{"_args_converter": {"line": 816, "args": [{"func_args": {"args": "()"}, "return_value": "()"}], "text": "def _args_converter(args: Iterable[str]) -> Tuple[str, ...]:\n    return tuple(args)"}, "_get_plugin_specs_as_list": {"line": 715, "args": [{"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "None"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}], "text": "def _get_plugin_specs_as_list(\n    specs: Union[None, types.ModuleType, str, Sequence[str]]\n) -> List[str]:\n    \"\"\"Parse a plugins specification into a list of plugin names.\"\"\"\n    # None means empty.\n    if specs is None:\n        return []\n    # Workaround for #3899 - a submodule which happens to be called \"pytest_plugins\".\n    if isinstance(specs, types.ModuleType):\n        return []\n    # Comma-separated list.\n    if isinstance(specs, str):\n        return specs.split(\",\") if specs else []\n    # Direct specification.\n    if isinstance(specs, collections.abc.Sequence):\n        return list(specs)\n    raise UsageError(\n        \"Plugins may be specified as a sequence or a ','-separated string of plugin names. Got: %r\"\n        % specs\n    )"}, "_assertion_supported": {"line": 1511, "args": [{"func_args": {}, "return_value": "True"}], "text": "def _assertion_supported() -> bool:\n    try:\n        assert False\n    except AssertionError:\n        return True\n    else:\n        return False"}, "scope2index": {"line": 803, "args": [{"func_args": {"scope": "'session'", "descr": "\"Fixture 'pytestconfig'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'capfd'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'capfdbinary'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'capsys'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'capsysbinary'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'tmp_path'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'session'", "descr": "\"Fixture 'tmp_path_factory'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'tmpdir'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'session'", "descr": "\"Fixture 'tmpdir_factory'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'monkeypatch'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'recwarn'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'record_property'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'session'", "descr": "\"Fixture 'record_testsuite_property'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'record_xml_attribute'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'session'", "descr": "\"Fixture 'doctest_namespace'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'cache'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'caplog'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'examples'\"", "where": "'test_confight.py'"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "'parametrize() call in test_it_should_detect_format_from_extension'", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'get_direct_param_fixture_func'\"", "where": "''"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "'parametrize() call in test_it_loads_strings_as_unicode'", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'get_direct_param_fixture_func'\"", "where": "''"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "'parametrize() call in test_it_should_load_for_given_format'", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'get_direct_param_fixture_func'\"", "where": "''"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'get_direct_param_fixture_func'\"", "where": "''"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "'parametrize() call in test_it_should_fail_with_invalid_files'", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'get_direct_param_fixture_func'\"", "where": "''"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "'parametrize() call in test_it_should_fail_with_invalid_extensions'", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'get_direct_param_fixture_func'\"", "where": "''"}, "return_value": "4"}], "text": "def scope2index(scope: str, descr: str, where: Optional[str] = None) -> int:\n    \"\"\"Look up the index of ``scope`` and raise a descriptive value error\n    if not defined.\"\"\"\n    strscopes: Sequence[str] = scopes\n    try:\n        return strscopes.index(scope)\n    except ValueError:\n        fail(\n            \"{} {}got an unexpected scope value '{}'\".format(\n                descr, f\"from {where} \" if where else \"\", scope\n            ),\n            pytrace=False,\n        )"}, "sort_by_scope": {"line": 1539, "args": [{"func_args": {"arg_name": "'name'"}, "return_value": "4"}, {"func_args": {"arg_name": "'examples'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmpdir'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path_factory'"}, "return_value": "0"}, {"func_args": {"arg_name": "'name'"}, "return_value": "4"}, {"func_args": {"arg_name": "'examples'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmpdir'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path_factory'"}, "return_value": "0"}, {"func_args": {"arg_name": "'name'"}, "return_value": "4"}, {"func_args": {"arg_name": "'format'"}, "return_value": "4"}, {"func_args": {"arg_name": "'examples'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmpdir'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path_factory'"}, "return_value": "0"}, {"func_args": {"arg_name": "'name'"}, "return_value": "4"}, {"func_args": {"arg_name": "'examples'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmpdir'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path_factory'"}, "return_value": "0"}, {"func_args": {"arg_name": "'name'"}, "return_value": "4"}, {"func_args": {"arg_name": "'examples'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmpdir'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path_factory'"}, "return_value": "0"}, {"func_args": {"arg_name": "'examples'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmpdir'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path_factory'"}, "return_value": "0"}, {"func_args": {"arg_name": "'examples'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmpdir'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path_factory'"}, "return_value": "0"}, {"func_args": {"arg_name": "'examples'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmpdir'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path_factory'"}, "return_value": "0"}, {"func_args": {"arg_name": "'tmpdir'"}, "return_value": "4"}, {"func_args": {"arg_name": "'examples'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path_factory'"}, "return_value": "0"}, {"func_args": {"arg_name": "'examples'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmpdir'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path_factory'"}, "return_value": "0"}, {"func_args": {"arg_name": "'tmpdir'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path_factory'"}, "return_value": "0"}, {"func_args": {"arg_name": "'examples'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmpdir'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path_factory'"}, "return_value": "0"}, {"func_args": {"arg_name": "'examples'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmpdir'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path_factory'"}, "return_value": "0"}, {"func_args": {"arg_name": "'examples'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmpdir'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path_factory'"}, "return_value": "0"}, {"func_args": {"arg_name": "'examples'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmpdir'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path_factory'"}, "return_value": "0"}, {"func_args": {"arg_name": "'examples'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmpdir'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path_factory'"}, "return_value": "0"}, {"func_args": {"arg_name": "'examples'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmpdir'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path_factory'"}, "return_value": "0"}, {"func_args": {"arg_name": "'examples'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmpdir'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path_factory'"}, "return_value": "0"}, {"func_args": {"arg_name": "'examples'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmpdir'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path_factory'"}, "return_value": "0"}, {"func_args": {"arg_name": "'examples'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmpdir'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path_factory'"}, "return_value": "0"}], "text": "def sort_by_scope(arg_name: str) -> int:\n            try:\n                fixturedefs = arg2fixturedefs[arg_name]\n            except KeyError:\n                return scopes.index(\"function\")\n            else:\n                return fixturedefs[-1].scopenum"}, "scopemismatch": {"line": 799, "args": [{"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}], "text": "def scopemismatch(currentscope: \"_Scope\", newscope: \"_Scope\") -> bool:\n    return scopes.index(newscope) > scopes.index(currentscope)"}, "_format_trimmed": {"line": 1262, "args": [{"func_args": {"format": "' - {}'", "msg": "\"AssertionError: \\nExpected: an empty collection\\n     but: was <['/tmp/pytest-of-root/pytest-4/test_it_should_ignore_unreadab0/basic_file.toml']>\"", "available_width": "7"}, "return_value": "' - A...'"}], "text": "def _format_trimmed(format: str, msg: str, available_width: int) -> Optional[str]:\n    \"\"\"Format msg into format, ellipsizing it if doesn't fit in available_width.\n\n    Returns None if even the ellipsis can't fit.\n    \"\"\"\n    # Only use the first line.\n    i = msg.find(\"\\n\")\n    if i != -1:\n        msg = msg[:i]\n\n    ellipsis = \"...\"\n    format_width = wcswidth(format.format(\"\"))\n    if format_width + len(ellipsis) > available_width:\n        return None\n\n    if format_width + wcswidth(msg) > available_width:\n        available_width -= len(ellipsis)\n        msg = msg[:available_width]\n        while format_width + wcswidth(msg) > available_width:\n            msg = msg[:-1]\n        msg += ellipsis\n\n    return format.format(msg)"}, "pluralize": {"line": 1350, "args": [{"func_args": {"count": "1", "noun": "'failed'"}, "return_value": "(1, 'failed')"}, {"func_args": {"count": "60", "noun": "'passed'"}, "return_value": "(60, 'passed')"}, {"func_args": {"count": "19", "noun": "'warnings'"}, "return_value": "(19, 'warnings')"}], "text": "def pluralize(count: int, noun: str) -> Tuple[int, str]:\n    # No need to pluralize words such as `failed` or `passed`.\n    if noun not in [\"error\", \"warnings\", \"test\"]:\n        return count, noun\n\n    # The `warnings` key is plural. To avoid API breakage, we keep it that way but\n    # set it to singular here so we can determine plurality in the same way as we do\n    # for `error`.\n    noun = noun.replace(\"warnings\", \"warning\")\n\n    return count, noun + \"s\" if count != 1 else noun"}, "format_session_duration": {"line": 1377, "args": [{"func_args": {"seconds": "1.1789343357086182"}, "return_value": "'1.18s'"}], "text": "def format_session_duration(seconds: float) -> str:\n    \"\"\"Format the given seconds in a human readable manner to show in the final summary.\"\"\"\n    if seconds < 60:\n        return f\"{seconds:.2f}s\"\n    else:\n        dt = datetime.timedelta(seconds=int(seconds))\n        return f\"{seconds:.2f}s ({dt})\""}, "_get_auto_indent": {"line": 113, "args": [{"func_args": {"auto_indent_option": "None"}, "return_value": "0"}, {"func_args": {"auto_indent_option": "None"}, "return_value": "0"}]}, "_get_stderr_fileno": {"line": 68, "args": [{"func_args": {}, "return_value": "2"}, {"func_args": {}, "return_value": "2"}]}, "get_terminal_width": {"line": 15, "args": [{"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}], "text": "def get_terminal_width() -> int:\n    width, _ = shutil.get_terminal_size(fallback=(80, 24))\n\n    # The Windows get_terminal_size may be bogus, let's sanify a bit.\n    if width < 40:\n        width = 80\n\n    return width"}, "get_dirs_from_args": {"line": 134, "args": [{"func_args": {"args": "[]"}, "return_value": "[]"}], "text": "def get_dirs_from_args(args: Iterable[str]) -> List[Path]:\n    def is_option(x: str) -> bool:\n        return x.startswith(\"-\")\n\n    def get_file_part_from_node_id(x: str) -> str:\n        return x.split(\"::\")[0]\n\n    def get_dir_from_path(path: Path) -> Path:\n        if path.is_dir():\n            return path\n        return path.parent\n\n    def safe_exists(path: Path) -> bool:\n        # This can throw on paths that contain characters unrepresentable at the OS level,\n        # or with invalid syntax on Windows (https://bugs.python.org/issue35306)\n        try:\n            return path.exists()\n        except OSError:\n            return False\n\n    # These look like paths but may not exist\n    possible_paths = (\n        absolutepath(get_file_part_from_node_id(arg))\n        for arg in args\n        if not is_option(arg)\n    )\n\n    return [get_dir_from_path(path) for path in possible_paths if safe_exists(path)]"}, "_is_same": {"line": 558, "args": [{"func_args": {"f1": "'/usr/app/src/test_repos/confight/test_confight.py'", "f2": "'/usr/app/src/test_repos/confight/test_confight.py'"}, "return_value": "True"}], "text": "def _is_same(f1: str, f2: str) -> bool:\n        return os.path.samefile(f1, f2)"}, "parse_num": {"line": 179, "args": [{"func_args": {"maybe_num": "'3'"}, "return_value": "3"}, {"func_args": {"maybe_num": "'2'"}, "return_value": "2"}, {"func_args": {"maybe_num": "'1'"}, "return_value": "1"}, {"func_args": {"maybe_num": "'current'"}, "return_value": "-1"}, {"func_args": {"maybe_num": "'0'"}, "return_value": "0"}, {"func_args": {"maybe_num": "'current'"}, "return_value": "-1"}, {"func_args": {"maybe_num": "'0'"}, "return_value": "0"}, {"func_args": {"maybe_num": "'current'"}, "return_value": "-1"}, {"func_args": {"maybe_num": "'1'"}, "return_value": "1"}, {"func_args": {"maybe_num": "'2'"}, "return_value": "2"}, {"func_args": {"maybe_num": "'0'"}, "return_value": "0"}, {"func_args": {"maybe_num": "'current'"}, "return_value": "-1"}, {"func_args": {"maybe_num": "'1'"}, "return_value": "1"}, {"func_args": {"maybe_num": "'2'"}, "return_value": "2"}, {"func_args": {"maybe_num": "'0'"}, "return_value": "0"}, {"func_args": {"maybe_num": "'3'"}, "return_value": "3"}, {"func_args": {"maybe_num": "'current'"}, "return_value": "-1"}, {"func_args": {"maybe_num": "'1'"}, "return_value": "1"}, {"func_args": {"maybe_num": "'0'"}, "return_value": "0"}, {"func_args": {"maybe_num": "'current'"}, "return_value": "-1"}, {"func_args": {"maybe_num": "'1'"}, "return_value": "1"}, {"func_args": {"maybe_num": "'0'"}, "return_value": "0"}, {"func_args": {"maybe_num": "'current'"}, "return_value": "-1"}, {"func_args": {"maybe_num": "'1'"}, "return_value": "1"}, {"func_args": {"maybe_num": "'2'"}, "return_value": "2"}, {"func_args": {"maybe_num": "'0'"}, "return_value": "0"}, {"func_args": {"maybe_num": "'current'"}, "return_value": "-1"}, {"func_args": {"maybe_num": "'3'"}, "return_value": "3"}, {"func_args": {"maybe_num": "'1'"}, "return_value": "1"}, {"func_args": {"maybe_num": "'2'"}, "return_value": "2"}, {"func_args": {"maybe_num": "'0'"}, "return_value": "0"}, {"func_args": {"maybe_num": "'current'"}, "return_value": "-1"}, {"func_args": {"maybe_num": "'0'"}, "return_value": "0"}, {"func_args": {"maybe_num": "'current'"}, "return_value": "-1"}, {"func_args": {"maybe_num": "'0'"}, "return_value": "0"}, {"func_args": {"maybe_num": "'current'"}, "return_value": "-1"}, {"func_args": {"maybe_num": "'1'"}, "return_value": "1"}, {"func_args": {"maybe_num": "'current'"}, "return_value": "-1"}, {"func_args": {"maybe_num": "'0'"}, "return_value": "0"}, {"func_args": {"maybe_num": "'current'"}, "return_value": "-1"}, {"func_args": {"maybe_num": "'0'"}, "return_value": "0"}, {"func_args": {"maybe_num": "'1'"}, "return_value": "1"}, {"func_args": {"maybe_num": "'current'"}, "return_value": "-1"}, {"func_args": {"maybe_num": "'2'"}, "return_value": "2"}, {"func_args": {"maybe_num": "'0'"}, "return_value": "0"}, {"func_args": {"maybe_num": "'1'"}, "return_value": "1"}, {"func_args": {"maybe_num": "'3'"}, "return_value": "3"}, {"func_args": {"maybe_num": "'current'"}, "return_value": "-1"}, {"func_args": {"maybe_num": "'2'"}, "return_value": "2"}, {"func_args": {"maybe_num": "'0'"}, "return_value": "0"}, {"func_args": {"maybe_num": "'1'"}, "return_value": "1"}, {"func_args": {"maybe_num": "'3'"}, "return_value": "3"}, {"func_args": {"maybe_num": "'current'"}, "return_value": "-1"}, {"func_args": {"maybe_num": "'4'"}, "return_value": "4"}, {"func_args": {"maybe_num": "'2'"}, "return_value": "2"}, {"func_args": {"maybe_num": "'0'"}, "return_value": "0"}, {"func_args": {"maybe_num": "'1'"}, "return_value": "1"}, {"func_args": {"maybe_num": "'3'"}, "return_value": "3"}, {"func_args": {"maybe_num": "'current'"}, "return_value": "-1"}, {"func_args": {"maybe_num": "'4'"}, "return_value": "4"}, {"func_args": {"maybe_num": "'2'"}, "return_value": "2"}, {"func_args": {"maybe_num": "'0'"}, "return_value": "0"}, {"func_args": {"maybe_num": "'1'"}, "return_value": "1"}, {"func_args": {"maybe_num": "'5'"}, "return_value": "5"}, {"func_args": {"maybe_num": "'3'"}, "return_value": "3"}, {"func_args": {"maybe_num": "'2'"}, "return_value": "2"}, {"func_args": {"maybe_num": "'4'"}, "return_value": "4"}, {"func_args": {"maybe_num": "'1'"}, "return_value": "1"}, {"func_args": {"maybe_num": "'current'"}, "return_value": "-1"}, {"func_args": {"maybe_num": "'3'"}, "return_value": "3"}, {"func_args": {"maybe_num": "'2'"}, "return_value": "2"}, {"func_args": {"maybe_num": "'4'"}, "return_value": "4"}, {"func_args": {"maybe_num": "'1'"}, "return_value": "1"}, {"func_args": {"maybe_num": "'current'"}, "return_value": "-1"}], "text": "def parse_num(maybe_num) -> int:\n    \"\"\"Parse number path suffixes, returns -1 on error.\"\"\"\n    try:\n        return int(maybe_num)\n    except ValueError:\n        return -1"}, "iscommentline": {"line": 162, "args": [{"func_args": {"line": "'[tox]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'envlist = py{27,35,36,37}-{basic,yaml}\\n'"}, "return_value": "False"}, {"func_args": {"line": "'skip_missing_interpreters = True\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}, {"func_args": {"line": "'[testenv]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'deps = \\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\t-r{toxinidir}/dev-requirements.txt\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tyaml: ruamel.yaml\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tviztracer \\n'"}, "return_value": "False"}, {"func_args": {"line": "'commands = python -m viztracer --ignore_frozen --log_func_args --log_func_retval -o result0.json -- pytest\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}], "text": "def iscommentline(line):\n    c = line.lstrip()[:1]\n    return c in COMMENTCHARS"}, "_parse_parametrize_args": {"line": 135, "args": [{"func_args": {"argnames": "'name'", "argvalues": "['basic_file.toml', 'basic_file.ini', 'basic_file.json', 'basic_file.cfg', 'basic_file.js']", "args": "()", "kwargs": "{}"}, "return_value": "(['name'], True)"}, {"func_args": {"argnames": "'name'", "argvalues": "['basic_file.toml', 'basic_file.ini', 'basic_file.json', 'basic_file.cfg', 'basic_file.js']", "args": "()", "kwargs": "{}"}, "return_value": "(['name'], True)"}, {"func_args": {"argnames": "'name'", "argvalues": "['basic_file.toml', 'basic_file.ini', 'basic_file.json', 'basic_file.cfg', 'basic_file.js']", "args": "()", "kwargs": "{}"}, "return_value": "(['name'], True)"}, {"func_args": {"argnames": "'name'", "argvalues": "['basic_file.toml', 'basic_file.ini', 'basic_file.json', 'basic_file.cfg', 'basic_file.js']", "args": "()", "kwargs": "{}"}, "return_value": "(['name'], True)"}, {"func_args": {"argnames": "'name'", "argvalues": "['basic_file.toml', 'basic_file.ini', 'basic_file.json', 'basic_file.cfg', 'basic_file.js']", "args": "()", "kwargs": "{}"}, "return_value": "(['name'], True)"}, {"func_args": {"argnames": "'name'", "argvalues": "['basic_file.toml', 'basic_file.ini', 'basic_file.json', 'basic_file.cfg', 'basic_file.js']", "args": "()", "kwargs": "{}"}, "return_value": "(['name'], True)"}, {"func_args": {"argnames": "'name'", "argvalues": "['basic_file.toml', 'basic_file.ini', 'basic_file.json', 'basic_file.cfg', 'basic_file.js']", "args": "()", "kwargs": "{}"}, "return_value": "(['name'], True)"}, {"func_args": {"argnames": "'name'", "argvalues": "['basic_file.toml', 'basic_file.ini', 'basic_file.json', 'basic_file.cfg', 'basic_file.js']", "args": "()", "kwargs": "{}"}, "return_value": "(['name'], True)"}, {"func_args": {"argnames": "'name'", "argvalues": "['basic_file.toml', 'basic_file.ini', 'basic_file.json', 'basic_file.cfg', 'basic_file.js']", "args": "()", "kwargs": "{}"}, "return_value": "(['name'], True)"}, {"func_args": {"argnames": "'name'", "argvalues": "['basic_file.toml', 'basic_file.ini', 'basic_file.json', 'basic_file.cfg', 'basic_file.js']", "args": "()", "kwargs": "{}"}, "return_value": "(['name'], True)"}, {"func_args": {"argnames": "'name'", "argvalues": "['basic_file.toml', 'basic_file.ini', 'basic_file.json', 'basic_file.cfg', 'basic_file.js']", "args": "()", "kwargs": "{}"}, "return_value": "(['name'], True)"}, {"func_args": {"argnames": "'name'", "argvalues": "['basic_file.toml', 'basic_file.ini', 'basic_file.json', 'basic_file.cfg', 'basic_file.js']", "args": "()", "kwargs": "{}"}, "return_value": "(['name'], True)"}, {"func_args": {"argnames": "'name, format'", "argvalues": "[('basic_file_toml', 'toml'), ('basic_file_ini', 'ini'), ('basic_file_json', 'json')]", "args": "()", "kwargs": "{}"}, "return_value": "(['name', 'format'], False)"}, {"func_args": {"argnames": "'name, format'", "argvalues": "[('basic_file_toml', 'toml'), ('basic_file_ini', 'ini'), ('basic_file_json', 'json')]", "args": "()", "kwargs": "{}"}, "return_value": "(['name', 'format'], False)"}, {"func_args": {"argnames": "'name, format'", "argvalues": "[('basic_file_toml', 'toml'), ('basic_file_ini', 'ini'), ('basic_file_json', 'json')]", "args": "()", "kwargs": "{}"}, "return_value": "(['name', 'format'], False)"}, {"func_args": {"argnames": "'name, format'", "argvalues": "[('basic_file_toml', 'toml'), ('basic_file_ini', 'ini'), ('basic_file_json', 'json')]", "args": "()", "kwargs": "{}"}, "return_value": "(['name', 'format'], False)"}, {"func_args": {"argnames": "'name, format'", "argvalues": "[('basic_file_toml', 'toml'), ('basic_file_ini', 'ini'), ('basic_file_json', 'json')]", "args": "()", "kwargs": "{}"}, "return_value": "(['name', 'format'], False)"}, {"func_args": {"argnames": "'name, format'", "argvalues": "[('basic_file_toml', 'toml'), ('basic_file_ini', 'ini'), ('basic_file_json', 'json')]", "args": "()", "kwargs": "{}"}, "return_value": "(['name', 'format'], False)"}, {"func_args": {"argnames": "'name'", "argvalues": "['invalid.toml', 'invalid.ini', 'invalid.json', 'invalid.cfg', 'invalid.js']", "args": "()", "kwargs": "{}"}, "return_value": "(['name'], True)"}, {"func_args": {"argnames": "'name'", "argvalues": "['invalid.toml', 'invalid.ini', 'invalid.json', 'invalid.cfg', 'invalid.js']", "args": "()", "kwargs": "{}"}, "return_value": "(['name'], True)"}, {"func_args": {"argnames": "'name'", "argvalues": "['invalid.toml', 'invalid.ini', 'invalid.json', 'invalid.cfg', 'invalid.js']", "args": "()", "kwargs": "{}"}, "return_value": "(['name'], True)"}, {"func_args": {"argnames": "'name'", "argvalues": "['invalid.toml', 'invalid.ini', 'invalid.json', 'invalid.cfg', 'invalid.js']", "args": "()", "kwargs": "{}"}, "return_value": "(['name'], True)"}, {"func_args": {"argnames": "'name'", "argvalues": "['invalid.toml', 'invalid.ini', 'invalid.json', 'invalid.cfg', 'invalid.js']", "args": "()", "kwargs": "{}"}, "return_value": "(['name'], True)"}, {"func_args": {"argnames": "'name'", "argvalues": "['invalid.toml', 'invalid.ini', 'invalid.json', 'invalid.cfg', 'invalid.js']", "args": "()", "kwargs": "{}"}, "return_value": "(['name'], True)"}, {"func_args": {"argnames": "'name'", "argvalues": "['bad_ext.ext', 'bad_ext.j']", "args": "()", "kwargs": "{}"}, "return_value": "(['name'], True)"}, {"func_args": {"argnames": "'name'", "argvalues": "['bad_ext.ext', 'bad_ext.j']", "args": "()", "kwargs": "{}"}, "return_value": "(['name'], True)"}, {"func_args": {"argnames": "'name'", "argvalues": "['bad_ext.ext', 'bad_ext.j']", "args": "()", "kwargs": "{}"}, "return_value": "(['name'], True)"}, {"func_args": {"argnames": "'name'", "argvalues": "['bad_ext.ext', 'bad_ext.j']", "args": "()", "kwargs": "{}"}, "return_value": "(['name'], True)"}, {"func_args": {"argnames": "'name'", "argvalues": "['bad_ext.ext', 'bad_ext.j']", "args": "()", "kwargs": "{}"}, "return_value": "(['name'], True)"}, {"func_args": {"argnames": "'name'", "argvalues": "['bad_ext.ext', 'bad_ext.j']", "args": "()", "kwargs": "{}"}, "return_value": "(['name'], True)"}]}, "iterparentnodeids": {"line": 44, "args": [{"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_detect_format_from_extension'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_detect_format_from_extension'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_detect_format_from_extension'"}, "return_value": "'test_confight.py::TestParse'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_detect_format_from_extension'"}, "return_value": "'test_confight.py::TestParse::test_it_should_detect_format_from_extension'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_detect_format_from_extension'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_detect_format_from_extension'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_detect_format_from_extension'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_detect_format_from_extension'"}, "return_value": "'test_confight.py::TestParse'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_detect_format_from_extension'"}, "return_value": "'test_confight.py::TestParse::test_it_should_detect_format_from_extension'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_detect_format_from_extension'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_detect_format_from_extension'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_detect_format_from_extension'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_detect_format_from_extension'"}, "return_value": "'test_confight.py::TestParse'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_detect_format_from_extension'"}, "return_value": "'test_confight.py::TestParse::test_it_should_detect_format_from_extension'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_detect_format_from_extension'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_detect_format_from_extension'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_detect_format_from_extension'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_detect_format_from_extension'"}, "return_value": "'test_confight.py::TestParse'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_detect_format_from_extension'"}, "return_value": "'test_confight.py::TestParse::test_it_should_detect_format_from_extension'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_detect_format_from_extension'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_detect_format_from_extension'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_detect_format_from_extension'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_detect_format_from_extension'"}, "return_value": "'test_confight.py::TestParse'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_detect_format_from_extension'"}, "return_value": "'test_confight.py::TestParse::test_it_should_detect_format_from_extension'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_detect_format_from_extension'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_loads_strings_as_unicode'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_loads_strings_as_unicode'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_loads_strings_as_unicode'"}, "return_value": "'test_confight.py::TestParse'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_loads_strings_as_unicode'"}, "return_value": "'test_confight.py::TestParse::test_it_loads_strings_as_unicode'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_loads_strings_as_unicode'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_loads_strings_as_unicode'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_loads_strings_as_unicode'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_loads_strings_as_unicode'"}, "return_value": "'test_confight.py::TestParse'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_loads_strings_as_unicode'"}, "return_value": "'test_confight.py::TestParse::test_it_loads_strings_as_unicode'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_loads_strings_as_unicode'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_loads_strings_as_unicode'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_loads_strings_as_unicode'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_loads_strings_as_unicode'"}, "return_value": "'test_confight.py::TestParse'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_loads_strings_as_unicode'"}, "return_value": "'test_confight.py::TestParse::test_it_loads_strings_as_unicode'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_loads_strings_as_unicode'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_loads_strings_as_unicode'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_loads_strings_as_unicode'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_loads_strings_as_unicode'"}, "return_value": "'test_confight.py::TestParse'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_loads_strings_as_unicode'"}, "return_value": "'test_confight.py::TestParse::test_it_loads_strings_as_unicode'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_loads_strings_as_unicode'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_loads_strings_as_unicode'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_loads_strings_as_unicode'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_loads_strings_as_unicode'"}, "return_value": "'test_confight.py::TestParse'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_loads_strings_as_unicode'"}, "return_value": "'test_confight.py::TestParse::test_it_loads_strings_as_unicode'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_loads_strings_as_unicode'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_load_for_given_format'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_load_for_given_format'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_load_for_given_format'"}, "return_value": "'test_confight.py::TestParse'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_load_for_given_format'"}, "return_value": "'test_confight.py::TestParse::test_it_should_load_for_given_format'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_load_for_given_format'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_load_for_given_format'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_load_for_given_format'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_load_for_given_format'"}, "return_value": "'test_confight.py::TestParse'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_load_for_given_format'"}, "return_value": "'test_confight.py::TestParse::test_it_should_load_for_given_format'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_load_for_given_format'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_load_for_given_format'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_load_for_given_format'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_load_for_given_format'"}, "return_value": "'test_confight.py::TestParse'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_load_for_given_format'"}, "return_value": "'test_confight.py::TestParse::test_it_should_load_for_given_format'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_load_for_given_format'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_load_for_given_format'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_load_for_given_format'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_load_for_given_format'"}, "return_value": "'test_confight.py::TestParse'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_load_for_given_format'"}, "return_value": "'test_confight.py::TestParse::test_it_should_load_for_given_format'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_load_for_given_format'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_load_for_given_format'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_load_for_given_format'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_load_for_given_format'"}, "return_value": "'test_confight.py::TestParse'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_load_for_given_format'"}, "return_value": "'test_confight.py::TestParse::test_it_should_load_for_given_format'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_load_for_given_format'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_missing_files'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_missing_files'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_missing_files'"}, "return_value": "'test_confight.py::TestParse'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_missing_files'"}, "return_value": "'test_confight.py::TestParse::test_it_should_fail_with_missing_files'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_missing_files'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_files'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_files'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_files'"}, "return_value": "'test_confight.py::TestParse'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_files'"}, "return_value": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_files'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_files'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_files'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_files'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_files'"}, "return_value": "'test_confight.py::TestParse'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_files'"}, "return_value": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_files'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_files'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_files'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_files'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_files'"}, "return_value": "'test_confight.py::TestParse'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_files'"}, "return_value": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_files'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_files'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_files'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_files'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_files'"}, "return_value": "'test_confight.py::TestParse'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_files'"}, "return_value": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_files'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_files'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_files'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_files'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_files'"}, "return_value": "'test_confight.py::TestParse'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_files'"}, "return_value": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_files'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_files'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_extensions'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_extensions'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_extensions'"}, "return_value": "'test_confight.py::TestParse'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_extensions'"}, "return_value": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_extensions'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_extensions'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_extensions'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_extensions'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_extensions'"}, "return_value": "'test_confight.py::TestParse'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_extensions'"}, "return_value": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_extensions'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_extensions'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_extensions'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_extensions'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_extensions'"}, "return_value": "'test_confight.py::TestParse'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_extensions'"}, "return_value": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_extensions'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_extensions'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_extensions'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_extensions'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_extensions'"}, "return_value": "'test_confight.py::TestParse'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_extensions'"}, "return_value": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_extensions'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_extensions'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_extensions'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_extensions'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_extensions'"}, "return_value": "'test_confight.py::TestParse'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_extensions'"}, "return_value": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_extensions'"}, {"func_args": {"nodeid": "'test_confight.py::TestParse::test_it_should_fail_with_invalid_extensions'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestMerge::test_it_should_give_priority_to_last_value'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestMerge::test_it_should_give_priority_to_last_value'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestMerge::test_it_should_give_priority_to_last_value'"}, "return_value": "'test_confight.py::TestMerge'"}, {"func_args": {"nodeid": "'test_confight.py::TestMerge::test_it_should_give_priority_to_last_value'"}, "return_value": "'test_confight.py::TestMerge::test_it_should_give_priority_to_last_value'"}, {"func_args": {"nodeid": "'test_confight.py::TestMerge::test_it_should_give_priority_to_last_value'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestMerge::test_it_should_add_all_values'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestMerge::test_it_should_add_all_values'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestMerge::test_it_should_add_all_values'"}, "return_value": "'test_confight.py::TestMerge'"}, {"func_args": {"nodeid": "'test_confight.py::TestMerge::test_it_should_add_all_values'"}, "return_value": "'test_confight.py::TestMerge::test_it_should_add_all_values'"}, {"func_args": {"nodeid": "'test_confight.py::TestMerge::test_it_should_add_all_values'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestMerge::test_it_should_merge_dicts_recursively'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestMerge::test_it_should_merge_dicts_recursively'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestMerge::test_it_should_merge_dicts_recursively'"}, "return_value": "'test_confight.py::TestMerge'"}, {"func_args": {"nodeid": "'test_confight.py::TestMerge::test_it_should_merge_dicts_recursively'"}, "return_value": "'test_confight.py::TestMerge::test_it_should_merge_dicts_recursively'"}, {"func_args": {"nodeid": "'test_confight.py::TestMerge::test_it_should_merge_dicts_recursively'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestMerge::test_it_should_ignore_scalar_values_given_as_configs'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestMerge::test_it_should_ignore_scalar_values_given_as_configs'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestMerge::test_it_should_ignore_scalar_values_given_as_configs'"}, "return_value": "'test_confight.py::TestMerge'"}, {"func_args": {"nodeid": "'test_confight.py::TestMerge::test_it_should_ignore_scalar_values_given_as_configs'"}, "return_value": "'test_confight.py::TestMerge::test_it_should_ignore_scalar_values_given_as_configs'"}, {"func_args": {"nodeid": "'test_confight.py::TestMerge::test_it_should_ignore_scalar_values_given_as_configs'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_files_in_order'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_files_in_order'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_files_in_order'"}, "return_value": "'test_confight.py::TestFind'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_files_in_order'"}, "return_value": "'test_confight.py::TestFind::test_it_should_load_files_in_order'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_files_in_order'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_files_in_order'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_files_in_order'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_files_in_order'"}, "return_value": "'test_confight.py::TestFind'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_files_in_order'"}, "return_value": "'test_confight.py::TestFind::test_it_should_load_files_in_order'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_files_in_order'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_files_in_order'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_files_in_order'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_files_in_order'"}, "return_value": "'test_confight.py::TestFind'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_files_in_order'"}, "return_value": "'test_confight.py::TestFind::test_it_should_load_files_in_order'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_files_in_order'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_files_in_order'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_files_in_order'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_files_in_order'"}, "return_value": "'test_confight.py::TestFind'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_files_in_order'"}, "return_value": "'test_confight.py::TestFind::test_it_should_load_files_in_order'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_files_in_order'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_files_in_order'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_files_in_order'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_files_in_order'"}, "return_value": "'test_confight.py::TestFind'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_files_in_order'"}, "return_value": "'test_confight.py::TestFind::test_it_should_load_files_in_order'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_files_in_order'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_full_paths'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_full_paths'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_full_paths'"}, "return_value": "'test_confight.py::TestFind'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_full_paths'"}, "return_value": "'test_confight.py::TestFind::test_it_should_load_full_paths'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_full_paths'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_full_paths'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_full_paths'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_full_paths'"}, "return_value": "'test_confight.py::TestFind'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_full_paths'"}, "return_value": "'test_confight.py::TestFind::test_it_should_load_full_paths'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_full_paths'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_full_paths'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_full_paths'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_full_paths'"}, "return_value": "'test_confight.py::TestFind'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_full_paths'"}, "return_value": "'test_confight.py::TestFind::test_it_should_load_full_paths'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_full_paths'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_full_paths'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_full_paths'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_full_paths'"}, "return_value": "'test_confight.py::TestFind'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_full_paths'"}, "return_value": "'test_confight.py::TestFind::test_it_should_load_full_paths'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_full_paths'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_full_paths'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_full_paths'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_full_paths'"}, "return_value": "'test_confight.py::TestFind'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_full_paths'"}, "return_value": "'test_confight.py::TestFind::test_it_should_load_full_paths'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_full_paths'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_normalize_relative_paths'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_normalize_relative_paths'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_normalize_relative_paths'"}, "return_value": "'test_confight.py::TestFind'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_normalize_relative_paths'"}, "return_value": "'test_confight.py::TestFind::test_it_should_normalize_relative_paths'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_normalize_relative_paths'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_existing_files'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_existing_files'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_existing_files'"}, "return_value": "'test_confight.py::TestFind'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_existing_files'"}, "return_value": "'test_confight.py::TestFind::test_it_should_load_existing_files'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_existing_files'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_existing_files'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_existing_files'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_existing_files'"}, "return_value": "'test_confight.py::TestFind'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_existing_files'"}, "return_value": "'test_confight.py::TestFind::test_it_should_load_existing_files'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_existing_files'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_existing_files'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_existing_files'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_existing_files'"}, "return_value": "'test_confight.py::TestFind'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_existing_files'"}, "return_value": "'test_confight.py::TestFind::test_it_should_load_existing_files'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_existing_files'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_existing_files'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_existing_files'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_existing_files'"}, "return_value": "'test_confight.py::TestFind'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_existing_files'"}, "return_value": "'test_confight.py::TestFind::test_it_should_load_existing_files'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_existing_files'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_existing_files'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_existing_files'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_existing_files'"}, "return_value": "'test_confight.py::TestFind'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_existing_files'"}, "return_value": "'test_confight.py::TestFind::test_it_should_load_existing_files'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_load_existing_files'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_expand_user_variables'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_expand_user_variables'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_expand_user_variables'"}, "return_value": "'test_confight.py::TestFind'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_expand_user_variables'"}, "return_value": "'test_confight.py::TestFind::test_it_should_expand_user_variables'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_expand_user_variables'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_expand_user_variables'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_expand_user_variables'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_expand_user_variables'"}, "return_value": "'test_confight.py::TestFind'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_expand_user_variables'"}, "return_value": "'test_confight.py::TestFind::test_it_should_expand_user_variables'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_expand_user_variables'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_expand_user_variables'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_expand_user_variables'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_expand_user_variables'"}, "return_value": "'test_confight.py::TestFind'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_expand_user_variables'"}, "return_value": "'test_confight.py::TestFind::test_it_should_expand_user_variables'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_expand_user_variables'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_expand_user_variables'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_expand_user_variables'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_expand_user_variables'"}, "return_value": "'test_confight.py::TestFind'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_expand_user_variables'"}, "return_value": "'test_confight.py::TestFind::test_it_should_expand_user_variables'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_expand_user_variables'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_expand_user_variables'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_expand_user_variables'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_expand_user_variables'"}, "return_value": "'test_confight.py::TestFind'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_expand_user_variables'"}, "return_value": "'test_confight.py::TestFind::test_it_should_expand_user_variables'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_expand_user_variables'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_return_nothing_for_missing_directories'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_return_nothing_for_missing_directories'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_return_nothing_for_missing_directories'"}, "return_value": "'test_confight.py::TestFind'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_return_nothing_for_missing_directories'"}, "return_value": "'test_confight.py::TestFind::test_it_should_return_nothing_for_missing_directories'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_return_nothing_for_missing_directories'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_ignore_invalid_files'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_ignore_invalid_files'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_ignore_invalid_files'"}, "return_value": "'test_confight.py::TestFind'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_ignore_invalid_files'"}, "return_value": "'test_confight.py::TestFind::test_it_should_ignore_invalid_files'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_ignore_invalid_files'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_ignore_unreadable_files'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_ignore_unreadable_files'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_ignore_unreadable_files'"}, "return_value": "'test_confight.py::TestFind'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_ignore_unreadable_files'"}, "return_value": "'test_confight.py::TestFind::test_it_should_ignore_unreadable_files'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_ignore_unreadable_files'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_ignore_unreadable_files'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_ignore_unreadable_files'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_ignore_unreadable_files'"}, "return_value": "'test_confight.py::TestFind'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_ignore_unreadable_files'"}, "return_value": "'test_confight.py::TestFind::test_it_should_ignore_unreadable_files'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_ignore_unreadable_files'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_ignore_unreadable_files'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_ignore_unreadable_files'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_ignore_unreadable_files'"}, "return_value": "'test_confight.py::TestFind'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_ignore_unreadable_files'"}, "return_value": "'test_confight.py::TestFind::test_it_should_ignore_unreadable_files'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_ignore_unreadable_files'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_ignore_unreadable_files'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_ignore_unreadable_files'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_ignore_unreadable_files'"}, "return_value": "'test_confight.py::TestFind'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_ignore_unreadable_files'"}, "return_value": "'test_confight.py::TestFind::test_it_should_ignore_unreadable_files'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_ignore_unreadable_files'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_ignore_unreadable_files'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_ignore_unreadable_files'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_ignore_unreadable_files'"}, "return_value": "'test_confight.py::TestFind'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_ignore_unreadable_files'"}, "return_value": "'test_confight.py::TestFind::test_it_should_ignore_unreadable_files'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_ignore_unreadable_files'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_ignore_unexplorable_dirs'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_ignore_unexplorable_dirs'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_ignore_unexplorable_dirs'"}, "return_value": "'test_confight.py::TestFind'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_ignore_unexplorable_dirs'"}, "return_value": "'test_confight.py::TestFind::test_it_should_ignore_unexplorable_dirs'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_ignore_unexplorable_dirs'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_ignore_unexplorable_dirs'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_ignore_unexplorable_dirs'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_ignore_unexplorable_dirs'"}, "return_value": "'test_confight.py::TestFind'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_ignore_unexplorable_dirs'"}, "return_value": "'test_confight.py::TestFind::test_it_should_ignore_unexplorable_dirs'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_ignore_unexplorable_dirs'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_ignore_unexplorable_dirs'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_ignore_unexplorable_dirs'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_ignore_unexplorable_dirs'"}, "return_value": "'test_confight.py::TestFind'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_ignore_unexplorable_dirs'"}, "return_value": "'test_confight.py::TestFind::test_it_should_ignore_unexplorable_dirs'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_ignore_unexplorable_dirs'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_ignore_unexplorable_dirs'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_ignore_unexplorable_dirs'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_ignore_unexplorable_dirs'"}, "return_value": "'test_confight.py::TestFind'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_ignore_unexplorable_dirs'"}, "return_value": "'test_confight.py::TestFind::test_it_should_ignore_unexplorable_dirs'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_ignore_unexplorable_dirs'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_warn_about_executable_config_files'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_warn_about_executable_config_files'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_warn_about_executable_config_files'"}, "return_value": "'test_confight.py::TestFind'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_warn_about_executable_config_files'"}, "return_value": "'test_confight.py::TestFind::test_it_should_warn_about_executable_config_files'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_warn_about_executable_config_files'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_warn_about_executable_config_files'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_warn_about_executable_config_files'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_warn_about_executable_config_files'"}, "return_value": "'test_confight.py::TestFind'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_warn_about_executable_config_files'"}, "return_value": "'test_confight.py::TestFind::test_it_should_warn_about_executable_config_files'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_warn_about_executable_config_files'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_warn_about_executable_config_files'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_warn_about_executable_config_files'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_warn_about_executable_config_files'"}, "return_value": "'test_confight.py::TestFind'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_warn_about_executable_config_files'"}, "return_value": "'test_confight.py::TestFind::test_it_should_warn_about_executable_config_files'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_warn_about_executable_config_files'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_warn_about_executable_config_files'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_warn_about_executable_config_files'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_warn_about_executable_config_files'"}, "return_value": "'test_confight.py::TestFind'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_warn_about_executable_config_files'"}, "return_value": "'test_confight.py::TestFind::test_it_should_warn_about_executable_config_files'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_warn_about_executable_config_files'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_warn_about_executable_config_files'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_warn_about_executable_config_files'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_warn_about_executable_config_files'"}, "return_value": "'test_confight.py::TestFind'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_warn_about_executable_config_files'"}, "return_value": "'test_confight.py::TestFind::test_it_should_warn_about_executable_config_files'"}, {"func_args": {"nodeid": "'test_confight.py::TestFind::test_it_should_warn_about_executable_config_files'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_load_and_merge_lists_of_paths'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_load_and_merge_lists_of_paths'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_load_and_merge_lists_of_paths'"}, "return_value": "'test_confight.py::TestLoad'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_load_and_merge_lists_of_paths'"}, "return_value": "'test_confight.py::TestLoad::test_it_should_load_and_merge_lists_of_paths'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_load_and_merge_lists_of_paths'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_load_and_merge_lists_of_paths'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_load_and_merge_lists_of_paths'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_load_and_merge_lists_of_paths'"}, "return_value": "'test_confight.py::TestLoad'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_load_and_merge_lists_of_paths'"}, "return_value": "'test_confight.py::TestLoad::test_it_should_load_and_merge_lists_of_paths'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_load_and_merge_lists_of_paths'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_load_and_merge_lists_of_paths'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_load_and_merge_lists_of_paths'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_load_and_merge_lists_of_paths'"}, "return_value": "'test_confight.py::TestLoad'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_load_and_merge_lists_of_paths'"}, "return_value": "'test_confight.py::TestLoad::test_it_should_load_and_merge_lists_of_paths'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_load_and_merge_lists_of_paths'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_load_and_merge_lists_of_paths'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_load_and_merge_lists_of_paths'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_load_and_merge_lists_of_paths'"}, "return_value": "'test_confight.py::TestLoad'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_load_and_merge_lists_of_paths'"}, "return_value": "'test_confight.py::TestLoad::test_it_should_load_and_merge_lists_of_paths'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_load_and_merge_lists_of_paths'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_load_and_merge_lists_of_paths'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_load_and_merge_lists_of_paths'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_load_and_merge_lists_of_paths'"}, "return_value": "'test_confight.py::TestLoad'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_load_and_merge_lists_of_paths'"}, "return_value": "'test_confight.py::TestLoad::test_it_should_load_and_merge_lists_of_paths'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_load_and_merge_lists_of_paths'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_load_paths_for_given_format'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_load_paths_for_given_format'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_load_paths_for_given_format'"}, "return_value": "'test_confight.py::TestLoad'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_load_paths_for_given_format'"}, "return_value": "'test_confight.py::TestLoad::test_it_should_load_paths_for_given_format'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_load_paths_for_given_format'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_load_paths_for_given_format'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_load_paths_for_given_format'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_load_paths_for_given_format'"}, "return_value": "'test_confight.py::TestLoad'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_load_paths_for_given_format'"}, "return_value": "'test_confight.py::TestLoad::test_it_should_load_paths_for_given_format'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_load_paths_for_given_format'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_load_paths_for_given_format'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_load_paths_for_given_format'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_load_paths_for_given_format'"}, "return_value": "'test_confight.py::TestLoad'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_load_paths_for_given_format'"}, "return_value": "'test_confight.py::TestLoad::test_it_should_load_paths_for_given_format'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_load_paths_for_given_format'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_load_paths_for_given_format'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_load_paths_for_given_format'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_load_paths_for_given_format'"}, "return_value": "'test_confight.py::TestLoad'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_load_paths_for_given_format'"}, "return_value": "'test_confight.py::TestLoad::test_it_should_load_paths_for_given_format'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_load_paths_for_given_format'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_load_paths_for_given_format'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_load_paths_for_given_format'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_load_paths_for_given_format'"}, "return_value": "'test_confight.py::TestLoad'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_load_paths_for_given_format'"}, "return_value": "'test_confight.py::TestLoad::test_it_should_load_paths_for_given_format'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_load_paths_for_given_format'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_use_given_parser'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_use_given_parser'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_use_given_parser'"}, "return_value": "'test_confight.py::TestLoad'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_use_given_parser'"}, "return_value": "'test_confight.py::TestLoad::test_it_should_use_given_parser'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_use_given_parser'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_use_given_merger'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_use_given_merger'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_use_given_merger'"}, "return_value": "'test_confight.py::TestLoad'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_use_given_merger'"}, "return_value": "'test_confight.py::TestLoad::test_it_should_use_given_merger'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_use_given_merger'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_use_given_merger'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_use_given_merger'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_use_given_merger'"}, "return_value": "'test_confight.py::TestLoad'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_use_given_merger'"}, "return_value": "'test_confight.py::TestLoad::test_it_should_use_given_merger'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_use_given_merger'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_use_given_merger'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_use_given_merger'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_use_given_merger'"}, "return_value": "'test_confight.py::TestLoad'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_use_given_merger'"}, "return_value": "'test_confight.py::TestLoad::test_it_should_use_given_merger'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_use_given_merger'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_use_given_merger'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_use_given_merger'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_use_given_merger'"}, "return_value": "'test_confight.py::TestLoad'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_use_given_merger'"}, "return_value": "'test_confight.py::TestLoad::test_it_should_use_given_merger'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_use_given_merger'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_use_given_merger'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_use_given_merger'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_use_given_merger'"}, "return_value": "'test_confight.py::TestLoad'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_use_given_merger'"}, "return_value": "'test_confight.py::TestLoad::test_it_should_use_given_merger'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoad::test_it_should_use_given_merger'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_it_should_load_from_file_and_directory'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_it_should_load_from_file_and_directory'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_it_should_load_from_file_and_directory'"}, "return_value": "'test_confight.py::TestLoadPaths'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_it_should_load_from_file_and_directory'"}, "return_value": "'test_confight.py::TestLoadPaths::test_it_should_load_from_file_and_directory'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_it_should_load_from_file_and_directory'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_it_should_load_from_file_and_directory'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_it_should_load_from_file_and_directory'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_it_should_load_from_file_and_directory'"}, "return_value": "'test_confight.py::TestLoadPaths'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_it_should_load_from_file_and_directory'"}, "return_value": "'test_confight.py::TestLoadPaths::test_it_should_load_from_file_and_directory'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_it_should_load_from_file_and_directory'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_it_should_load_from_file_and_directory'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_it_should_load_from_file_and_directory'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_it_should_load_from_file_and_directory'"}, "return_value": "'test_confight.py::TestLoadPaths'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_it_should_load_from_file_and_directory'"}, "return_value": "'test_confight.py::TestLoadPaths::test_it_should_load_from_file_and_directory'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_it_should_load_from_file_and_directory'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_it_should_load_from_file_and_directory'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_it_should_load_from_file_and_directory'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_it_should_load_from_file_and_directory'"}, "return_value": "'test_confight.py::TestLoadPaths'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_it_should_load_from_file_and_directory'"}, "return_value": "'test_confight.py::TestLoadPaths::test_it_should_load_from_file_and_directory'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_it_should_load_from_file_and_directory'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_it_should_load_from_file_and_directory'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_it_should_load_from_file_and_directory'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_it_should_load_from_file_and_directory'"}, "return_value": "'test_confight.py::TestLoadPaths'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_it_should_load_from_file_and_directory'"}, "return_value": "'test_confight.py::TestLoadPaths::test_it_should_load_from_file_and_directory'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_it_should_load_from_file_and_directory'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_it_should_filter_extensions'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_it_should_filter_extensions'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_it_should_filter_extensions'"}, "return_value": "'test_confight.py::TestLoadPaths'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_it_should_filter_extensions'"}, "return_value": "'test_confight.py::TestLoadPaths::test_it_should_filter_extensions'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_it_should_filter_extensions'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_it_should_filter_extensions'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_it_should_filter_extensions'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_it_should_filter_extensions'"}, "return_value": "'test_confight.py::TestLoadPaths'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_it_should_filter_extensions'"}, "return_value": "'test_confight.py::TestLoadPaths::test_it_should_filter_extensions'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_it_should_filter_extensions'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_it_should_filter_extensions'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_it_should_filter_extensions'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_it_should_filter_extensions'"}, "return_value": "'test_confight.py::TestLoadPaths'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_it_should_filter_extensions'"}, "return_value": "'test_confight.py::TestLoadPaths::test_it_should_filter_extensions'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_it_should_filter_extensions'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_it_should_filter_extensions'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_it_should_filter_extensions'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_it_should_filter_extensions'"}, "return_value": "'test_confight.py::TestLoadPaths'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_it_should_filter_extensions'"}, "return_value": "'test_confight.py::TestLoadPaths::test_it_should_filter_extensions'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_it_should_filter_extensions'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_it_should_filter_extensions'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_it_should_filter_extensions'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_it_should_filter_extensions'"}, "return_value": "'test_confight.py::TestLoadPaths'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_it_should_filter_extensions'"}, "return_value": "'test_confight.py::TestLoadPaths::test_it_should_filter_extensions'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_it_should_filter_extensions'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_merges_must_retain_order'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_merges_must_retain_order'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_merges_must_retain_order'"}, "return_value": "'test_confight.py::TestLoadPaths'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_merges_must_retain_order'"}, "return_value": "'test_confight.py::TestLoadPaths::test_merges_must_retain_order'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_merges_must_retain_order'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_merges_must_retain_order'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_merges_must_retain_order'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_merges_must_retain_order'"}, "return_value": "'test_confight.py::TestLoadPaths'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_merges_must_retain_order'"}, "return_value": "'test_confight.py::TestLoadPaths::test_merges_must_retain_order'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_merges_must_retain_order'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_merges_must_retain_order'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_merges_must_retain_order'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_merges_must_retain_order'"}, "return_value": "'test_confight.py::TestLoadPaths'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_merges_must_retain_order'"}, "return_value": "'test_confight.py::TestLoadPaths::test_merges_must_retain_order'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_merges_must_retain_order'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_merges_must_retain_order'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_merges_must_retain_order'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_merges_must_retain_order'"}, "return_value": "'test_confight.py::TestLoadPaths'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_merges_must_retain_order'"}, "return_value": "'test_confight.py::TestLoadPaths::test_merges_must_retain_order'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_merges_must_retain_order'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_merges_must_retain_order'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_merges_must_retain_order'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_merges_must_retain_order'"}, "return_value": "'test_confight.py::TestLoadPaths'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_merges_must_retain_order'"}, "return_value": "'test_confight.py::TestLoadPaths::test_merges_must_retain_order'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadPaths::test_merges_must_retain_order'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadApp::test_it_should_load_from_default_path'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadApp::test_it_should_load_from_default_path'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadApp::test_it_should_load_from_default_path'"}, "return_value": "'test_confight.py::TestLoadApp'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadApp::test_it_should_load_from_default_path'"}, "return_value": "'test_confight.py::TestLoadApp::test_it_should_load_from_default_path'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadApp::test_it_should_load_from_default_path'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadApp::test_it_should_be_able_to_ignore_file'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadApp::test_it_should_be_able_to_ignore_file'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadApp::test_it_should_be_able_to_ignore_file'"}, "return_value": "'test_confight.py::TestLoadApp'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadApp::test_it_should_be_able_to_ignore_file'"}, "return_value": "'test_confight.py::TestLoadApp::test_it_should_be_able_to_ignore_file'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadApp::test_it_should_be_able_to_ignore_file'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadApp::test_it_should_be_able_to_ignore_directory'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadApp::test_it_should_be_able_to_ignore_directory'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadApp::test_it_should_be_able_to_ignore_directory'"}, "return_value": "'test_confight.py::TestLoadApp'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadApp::test_it_should_be_able_to_ignore_directory'"}, "return_value": "'test_confight.py::TestLoadApp::test_it_should_be_able_to_ignore_directory'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadApp::test_it_should_be_able_to_ignore_directory'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadApp::test_it_should_load_extra_paths'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadApp::test_it_should_load_extra_paths'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadApp::test_it_should_load_extra_paths'"}, "return_value": "'test_confight.py::TestLoadApp'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadApp::test_it_should_load_extra_paths'"}, "return_value": "'test_confight.py::TestLoadApp::test_it_should_load_extra_paths'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadApp::test_it_should_load_extra_paths'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadApp::test_it_should_add_default_as_priority_location'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadApp::test_it_should_add_default_as_priority_location'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadApp::test_it_should_add_default_as_priority_location'"}, "return_value": "'test_confight.py::TestLoadApp'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadApp::test_it_should_add_default_as_priority_location'"}, "return_value": "'test_confight.py::TestLoadApp::test_it_should_add_default_as_priority_location'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadApp::test_it_should_add_default_as_priority_location'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadApp::test_it_should_allow_using_known_extensions'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadApp::test_it_should_allow_using_known_extensions'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadApp::test_it_should_allow_using_known_extensions'"}, "return_value": "'test_confight.py::TestLoadApp'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadApp::test_it_should_allow_using_known_extensions'"}, "return_value": "'test_confight.py::TestLoadApp::test_it_should_allow_using_known_extensions'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadApp::test_it_should_allow_using_known_extensions'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadApp::test_it_should_reject_custom_extensions'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadApp::test_it_should_reject_custom_extensions'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadApp::test_it_should_reject_custom_extensions'"}, "return_value": "'test_confight.py::TestLoadApp'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadApp::test_it_should_reject_custom_extensions'"}, "return_value": "'test_confight.py::TestLoadApp::test_it_should_reject_custom_extensions'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadApp::test_it_should_reject_custom_extensions'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadApp::test_it_should_allow_using_custom_extensions_with_format'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadApp::test_it_should_allow_using_custom_extensions_with_format'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadApp::test_it_should_allow_using_custom_extensions_with_format'"}, "return_value": "'test_confight.py::TestLoadApp'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadApp::test_it_should_allow_using_custom_extensions_with_format'"}, "return_value": "'test_confight.py::TestLoadApp::test_it_should_allow_using_custom_extensions_with_format'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadApp::test_it_should_allow_using_custom_extensions_with_format'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadApp::test_it_should_use_prefix_for_default_locations'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadApp::test_it_should_use_prefix_for_default_locations'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadApp::test_it_should_use_prefix_for_default_locations'"}, "return_value": "'test_confight.py::TestLoadApp'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadApp::test_it_should_use_prefix_for_default_locations'"}, "return_value": "'test_confight.py::TestLoadApp::test_it_should_use_prefix_for_default_locations'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadApp::test_it_should_use_prefix_for_default_locations'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadUserApp::test_it_should_load_from_default_user_path'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadUserApp::test_it_should_load_from_default_user_path'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadUserApp::test_it_should_load_from_default_user_path'"}, "return_value": "'test_confight.py::TestLoadUserApp'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadUserApp::test_it_should_load_from_default_user_path'"}, "return_value": "'test_confight.py::TestLoadUserApp::test_it_should_load_from_default_user_path'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadUserApp::test_it_should_load_from_default_user_path'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadUserApp::test_it_should_load_extra_paths'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadUserApp::test_it_should_load_extra_paths'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadUserApp::test_it_should_load_extra_paths'"}, "return_value": "'test_confight.py::TestLoadUserApp'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadUserApp::test_it_should_load_extra_paths'"}, "return_value": "'test_confight.py::TestLoadUserApp::test_it_should_load_extra_paths'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadUserApp::test_it_should_load_extra_paths'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadUserApp::test_it_should_allow_using_known_extensions'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadUserApp::test_it_should_allow_using_known_extensions'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadUserApp::test_it_should_allow_using_known_extensions'"}, "return_value": "'test_confight.py::TestLoadUserApp'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadUserApp::test_it_should_allow_using_known_extensions'"}, "return_value": "'test_confight.py::TestLoadUserApp::test_it_should_allow_using_known_extensions'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadUserApp::test_it_should_allow_using_known_extensions'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadUserApp::test_it_should_reject_custom_extensions'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadUserApp::test_it_should_reject_custom_extensions'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadUserApp::test_it_should_reject_custom_extensions'"}, "return_value": "'test_confight.py::TestLoadUserApp'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadUserApp::test_it_should_reject_custom_extensions'"}, "return_value": "'test_confight.py::TestLoadUserApp::test_it_should_reject_custom_extensions'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadUserApp::test_it_should_reject_custom_extensions'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadUserApp::test_it_should_allow_using_custom_extensions_with_format'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadUserApp::test_it_should_allow_using_custom_extensions_with_format'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadUserApp::test_it_should_allow_using_custom_extensions_with_format'"}, "return_value": "'test_confight.py::TestLoadUserApp'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadUserApp::test_it_should_allow_using_custom_extensions_with_format'"}, "return_value": "'test_confight.py::TestLoadUserApp::test_it_should_allow_using_custom_extensions_with_format'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadUserApp::test_it_should_allow_using_custom_extensions_with_format'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadUserApp::test_it_should_use_prefix_for_default_locations'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadUserApp::test_it_should_use_prefix_for_default_locations'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadUserApp::test_it_should_use_prefix_for_default_locations'"}, "return_value": "'test_confight.py::TestLoadUserApp'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadUserApp::test_it_should_use_prefix_for_default_locations'"}, "return_value": "'test_confight.py::TestLoadUserApp::test_it_should_use_prefix_for_default_locations'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadUserApp::test_it_should_use_prefix_for_default_locations'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadUserApp::test_it_should_use_prefix_for_default_user_locations'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadUserApp::test_it_should_use_prefix_for_default_user_locations'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadUserApp::test_it_should_use_prefix_for_default_user_locations'"}, "return_value": "'test_confight.py::TestLoadUserApp'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadUserApp::test_it_should_use_prefix_for_default_user_locations'"}, "return_value": "'test_confight.py::TestLoadUserApp::test_it_should_use_prefix_for_default_user_locations'"}, {"func_args": {"nodeid": "'test_confight.py::TestLoadUserApp::test_it_should_use_prefix_for_default_user_locations'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_print_help'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_print_help'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_print_help'"}, "return_value": "'test_confight.py::TestCli'"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_print_help'"}, "return_value": "'test_confight.py::TestCli::test_it_should_print_help'"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_print_help'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_show_message_on_exit'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_show_message_on_exit'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_show_message_on_exit'"}, "return_value": "'test_confight.py::TestCli'"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_show_message_on_exit'"}, "return_value": "'test_confight.py::TestCli::test_it_should_show_message_on_exit'"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_show_message_on_exit'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_show_message_on_exit'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_show_message_on_exit'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_show_message_on_exit'"}, "return_value": "'test_confight.py::TestCli'"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_show_message_on_exit'"}, "return_value": "'test_confight.py::TestCli::test_it_should_show_message_on_exit'"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_show_message_on_exit'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_show_message_on_exit'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_show_message_on_exit'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_show_message_on_exit'"}, "return_value": "'test_confight.py::TestCli'"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_show_message_on_exit'"}, "return_value": "'test_confight.py::TestCli::test_it_should_show_message_on_exit'"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_show_message_on_exit'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_show_message_on_exit'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_show_message_on_exit'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_show_message_on_exit'"}, "return_value": "'test_confight.py::TestCli'"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_show_message_on_exit'"}, "return_value": "'test_confight.py::TestCli::test_it_should_show_message_on_exit'"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_show_message_on_exit'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_show_message_on_exit'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_show_message_on_exit'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_show_message_on_exit'"}, "return_value": "'test_confight.py::TestCli'"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_show_message_on_exit'"}, "return_value": "'test_confight.py::TestCli::test_it_should_show_message_on_exit'"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_show_message_on_exit'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_show_config'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_show_config'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_show_config'"}, "return_value": "'test_confight.py::TestCli'"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_show_config'"}, "return_value": "'test_confight.py::TestCli::test_it_should_show_config'"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_show_config'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_show_config'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_show_config'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_show_config'"}, "return_value": "'test_confight.py::TestCli'"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_show_config'"}, "return_value": "'test_confight.py::TestCli::test_it_should_show_config'"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_show_config'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_show_config'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_show_config'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_show_config'"}, "return_value": "'test_confight.py::TestCli'"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_show_config'"}, "return_value": "'test_confight.py::TestCli::test_it_should_show_config'"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_show_config'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_show_config'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_show_config'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_show_config'"}, "return_value": "'test_confight.py::TestCli'"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_show_config'"}, "return_value": "'test_confight.py::TestCli::test_it_should_show_config'"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_show_config'"}, "return_value": "None"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_show_config'"}, "return_value": "''"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_show_config'"}, "return_value": "'test_confight.py'"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_show_config'"}, "return_value": "'test_confight.py::TestCli'"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_show_config'"}, "return_value": "'test_confight.py::TestCli::test_it_should_show_config'"}, {"func_args": {"nodeid": "'test_confight.py::TestCli::test_it_should_show_config'"}, "return_value": "None"}], "text": "def iterparentnodeids(nodeid: str) -> Iterator[str]:\n    \"\"\"Return the parent node IDs of a given node ID, inclusive.\n\n    For the node ID\n\n        \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_source\"\n\n    the result would be\n\n        \"\"\n        \"testing\"\n        \"testing/code\"\n        \"testing/code/test_excinfo.py\"\n        \"testing/code/test_excinfo.py::TestFormattedExcinfo\"\n        \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_source\"\n\n    Note that :: parts are only considered at the last / component.\n    \"\"\"\n    pos = 0\n    sep = SEP\n    yield \"\"\n    while True:\n        at = nodeid.find(sep, pos)\n        if at == -1 and sep == SEP:\n            sep = \"::\"\n        elif at == -1:\n            if nodeid:\n                yield nodeid\n            break\n        else:\n            if at:\n                yield nodeid[:at]\n            pos = at + len(sep)"}, "get_user": {"line": 173, "args": [{"func_args": {}, "return_value": "'root'"}], "text": "def get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\"\"\"\n    import getpass\n\n    try:\n        return getpass.getuser()\n    except (ImportError, KeyError):\n        return None"}, "_translate_non_printable": {"line": 204, "args": [{"func_args": {"s": "'basic_file.toml'"}, "return_value": "'basic_file.toml'"}, {"func_args": {"s": "'basic_file.ini'"}, "return_value": "'basic_file.ini'"}, {"func_args": {"s": "'basic_file.json'"}, "return_value": "'basic_file.json'"}, {"func_args": {"s": "'basic_file.cfg'"}, "return_value": "'basic_file.cfg'"}, {"func_args": {"s": "'basic_file.js'"}, "return_value": "'basic_file.js'"}, {"func_args": {"s": "'basic_file.toml'"}, "return_value": "'basic_file.toml'"}, {"func_args": {"s": "'basic_file.ini'"}, "return_value": "'basic_file.ini'"}, {"func_args": {"s": "'basic_file.json'"}, "return_value": "'basic_file.json'"}, {"func_args": {"s": "'basic_file.cfg'"}, "return_value": "'basic_file.cfg'"}, {"func_args": {"s": "'basic_file.js'"}, "return_value": "'basic_file.js'"}, {"func_args": {"s": "'basic_file_toml'"}, "return_value": "'basic_file_toml'"}, {"func_args": {"s": "'toml'"}, "return_value": "'toml'"}, {"func_args": {"s": "'basic_file_ini'"}, "return_value": "'basic_file_ini'"}, {"func_args": {"s": "'ini'"}, "return_value": "'ini'"}, {"func_args": {"s": "'basic_file_json'"}, "return_value": "'basic_file_json'"}, {"func_args": {"s": "'json'"}, "return_value": "'json'"}, {"func_args": {"s": "'invalid.toml'"}, "return_value": "'invalid.toml'"}, {"func_args": {"s": "'invalid.ini'"}, "return_value": "'invalid.ini'"}, {"func_args": {"s": "'invalid.json'"}, "return_value": "'invalid.json'"}, {"func_args": {"s": "'invalid.cfg'"}, "return_value": "'invalid.cfg'"}, {"func_args": {"s": "'invalid.js'"}, "return_value": "'invalid.js'"}, {"func_args": {"s": "'bad_ext.ext'"}, "return_value": "'bad_ext.ext'"}, {"func_args": {"s": "'bad_ext.j'"}, "return_value": "'bad_ext.j'"}], "text": "def _translate_non_printable(s: str) -> str:\n    return s.translate(_non_printable_ascii_translate_table)"}, "ascii_escaped": {"line": 215, "args": [{"func_args": {"val": "'basic_file.toml'"}, "return_value": "'basic_file.toml'"}, {"func_args": {"val": "'basic_file.ini'"}, "return_value": "'basic_file.ini'"}, {"func_args": {"val": "'basic_file.json'"}, "return_value": "'basic_file.json'"}, {"func_args": {"val": "'basic_file.cfg'"}, "return_value": "'basic_file.cfg'"}, {"func_args": {"val": "'basic_file.js'"}, "return_value": "'basic_file.js'"}, {"func_args": {"val": "'basic_file.toml'"}, "return_value": "'basic_file.toml'"}, {"func_args": {"val": "'basic_file.ini'"}, "return_value": "'basic_file.ini'"}, {"func_args": {"val": "'basic_file.json'"}, "return_value": "'basic_file.json'"}, {"func_args": {"val": "'basic_file.cfg'"}, "return_value": "'basic_file.cfg'"}, {"func_args": {"val": "'basic_file.js'"}, "return_value": "'basic_file.js'"}, {"func_args": {"val": "'basic_file_toml'"}, "return_value": "'basic_file_toml'"}, {"func_args": {"val": "'toml'"}, "return_value": "'toml'"}, {"func_args": {"val": "'basic_file_ini'"}, "return_value": "'basic_file_ini'"}, {"func_args": {"val": "'ini'"}, "return_value": "'ini'"}, {"func_args": {"val": "'basic_file_json'"}, "return_value": "'basic_file_json'"}, {"func_args": {"val": "'json'"}, "return_value": "'json'"}, {"func_args": {"val": "'invalid.toml'"}, "return_value": "'invalid.toml'"}, {"func_args": {"val": "'invalid.ini'"}, "return_value": "'invalid.ini'"}, {"func_args": {"val": "'invalid.json'"}, "return_value": "'invalid.json'"}, {"func_args": {"val": "'invalid.cfg'"}, "return_value": "'invalid.cfg'"}, {"func_args": {"val": "'invalid.js'"}, "return_value": "'invalid.js'"}, {"func_args": {"val": "'bad_ext.ext'"}, "return_value": "'bad_ext.ext'"}, {"func_args": {"val": "'bad_ext.j'"}, "return_value": "'bad_ext.j'"}], "text": "def ascii_escaped(val: Union[bytes, str]) -> str:\n    r\"\"\"If val is pure ASCII, return it as an str, otherwise, escape\n    bytes objects into a sequence of escaped bytes:\n\n    b'\\xc3\\xb4\\xc5\\xd6' -> r'\\xc3\\xb4\\xc5\\xd6'\n\n    and escapes unicode objects into a sequence of escaped unicode\n    ids, e.g.:\n\n    r'4\\nV\\U00043efa\\x0eMXWB\\x1e\\u3028\\u15fd\\xcd\\U0007d944'\n\n    Note:\n       The obvious \"v.decode('unicode-escape')\" will return\n       valid UTF-8 unicode if it finds them in bytes, but we\n       want to return escaped bytes for any byte, even if they match\n       a UTF-8 string.\n    \"\"\"\n    if isinstance(val, bytes):\n        ret = _bytes_to_ascii(val)\n    else:\n        ret = val.encode(\"unicode_escape\").decode(\"ascii\")\n    return _translate_non_printable(ret)"}, "wcswidth": {"line": 43, "args": [{"func_args": {"s": "''"}, "return_value": "0"}, {"func_args": {"s": "'test_confight.py .'"}, "return_value": "18"}, {"func_args": {"s": "'test_confight.py ..'"}, "return_value": "19"}, {"func_args": {"s": "'test_confight.py ...'"}, "return_value": "20"}, {"func_args": {"s": "'test_confight.py ....'"}, "return_value": "21"}, {"func_args": {"s": "'test_confight.py .....'"}, "return_value": "22"}, {"func_args": {"s": "'test_confight.py ......'"}, "return_value": "23"}, {"func_args": {"s": "'test_confight.py .......'"}, "return_value": "24"}, {"func_args": {"s": "'test_confight.py ........'"}, "return_value": "25"}, {"func_args": {"s": "'test_confight.py .........'"}, "return_value": "26"}, {"func_args": {"s": "'test_confight.py ..........'"}, "return_value": "27"}, {"func_args": {"s": "'test_confight.py ...........'"}, "return_value": "28"}, {"func_args": {"s": "'test_confight.py ............'"}, "return_value": "29"}, {"func_args": {"s": "'test_confight.py .............'"}, "return_value": "30"}, {"func_args": {"s": "'test_confight.py ..............'"}, "return_value": "31"}, {"func_args": {"s": "'test_confight.py ...............'"}, "return_value": "32"}, {"func_args": {"s": "'test_confight.py ................'"}, "return_value": "33"}, {"func_args": {"s": "'test_confight.py .................'"}, "return_value": "34"}, {"func_args": {"s": "'test_confight.py ..................'"}, "return_value": "35"}, {"func_args": {"s": "'test_confight.py ...................'"}, "return_value": "36"}, {"func_args": {"s": "'test_confight.py ....................'"}, "return_value": "37"}, {"func_args": {"s": "'test_confight.py .....................'"}, "return_value": "38"}, {"func_args": {"s": "'test_confight.py ......................'"}, "return_value": "39"}, {"func_args": {"s": "'test_confight.py .......................'"}, "return_value": "40"}, {"func_args": {"s": "'test_confight.py ........................'"}, "return_value": "41"}, {"func_args": {"s": "'test_confight.py .........................'"}, "return_value": "42"}, {"func_args": {"s": "'test_confight.py ..........................'"}, "return_value": "43"}, {"func_args": {"s": "'test_confight.py ...........................'"}, "return_value": "44"}, {"func_args": {"s": "'test_confight.py ............................'"}, "return_value": "45"}, {"func_args": {"s": "'test_confight.py .............................'"}, "return_value": "46"}, {"func_args": {"s": "'test_confight.py ..............................'"}, "return_value": "47"}, {"func_args": {"s": "'test_confight.py ...............................'"}, "return_value": "48"}, {"func_args": {"s": "'test_confight.py ................................'"}, "return_value": "49"}, {"func_args": {"s": "'test_confight.py ................................F'"}, "return_value": "50"}, {"func_args": {"s": "'test_confight.py ................................F.'"}, "return_value": "51"}, {"func_args": {"s": "'test_confight.py ................................F..'"}, "return_value": "52"}, {"func_args": {"s": "'test_confight.py ................................F...'"}, "return_value": "53"}, {"func_args": {"s": "'test_confight.py ................................F....'"}, "return_value": "54"}, {"func_args": {"s": "'test_confight.py ................................F.....'"}, "return_value": "55"}, {"func_args": {"s": "'test_confight.py ................................F......'"}, "return_value": "56"}, {"func_args": {"s": "'test_confight.py ................................F.......'"}, "return_value": "57"}, {"func_args": {"s": "'test_confight.py ................................F........'"}, "return_value": "58"}, {"func_args": {"s": "'test_confight.py ................................F.........'"}, "return_value": "59"}, {"func_args": {"s": "'test_confight.py ................................F..........'"}, "return_value": "60"}, {"func_args": {"s": "'test_confight.py ................................F...........'"}, "return_value": "61"}, {"func_args": {"s": "'test_confight.py ................................F............'"}, "return_value": "62"}, {"func_args": {"s": "'test_confight.py ................................F.............'"}, "return_value": "63"}, {"func_args": {"s": "'test_confight.py ................................F..............'"}, "return_value": "64"}, {"func_args": {"s": "'test_confight.py ................................F...............'"}, "return_value": "65"}, {"func_args": {"s": "'test_confight.py ................................F................'"}, "return_value": "66"}, {"func_args": {"s": "'test_confight.py ................................F.................'"}, "return_value": "67"}, {"func_args": {"s": "'test_confight.py ................................F..................'"}, "return_value": "68"}, {"func_args": {"s": "'test_confight.py ................................F...................'"}, "return_value": "69"}, {"func_args": {"s": "'test_confight.py ................................F....................'"}, "return_value": "70"}, {"func_args": {"s": "'test_confight.py ................................F.....................'"}, "return_value": "71"}, {"func_args": {"s": "'test_confight.py ................................F......................'"}, "return_value": "72"}, {"func_args": {"s": "'.'"}, "return_value": "1"}, {"func_args": {"s": "'..'"}, "return_value": "2"}, {"func_args": {"s": "'...'"}, "return_value": "3"}, {"func_args": {"s": "'....'"}, "return_value": "4"}, {"func_args": {"s": "'.....'"}, "return_value": "5"}, {"func_args": {"s": "'......'"}, "return_value": "6"}, {"func_args": {"s": "'FAILED test_confight.py::TestFind::test_it_should_ignore_unreadable_files'"}, "return_value": "73"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: '"}, "return_value": "16"}, {"func_args": {"s": "'Asse'"}, "return_value": "4"}, {"func_args": {"s": "'Ass'"}, "return_value": "3"}, {"func_args": {"s": "'As'"}, "return_value": "2"}, {"func_args": {"s": "'A'"}, "return_value": "1"}], "text": "def wcswidth(s: str) -> int:\n    \"\"\"Determine how many columns are needed to display a string in a terminal.\n\n    Returns -1 if the string contains non-printable characters.\n    \"\"\"\n    width = 0\n    for c in unicodedata.normalize(\"NFC\", s):\n        wc = wcwidth(c)\n        if wc < 0:\n            return -1\n        width += wc\n    return width"}, "wcwidth": {"line": 4, "args": [{"func_args": {"c": "'t'"}, "return_value": "1"}, {"func_args": {"c": "'e'"}, "return_value": "1"}, {"func_args": {"c": "'s'"}, "return_value": "1"}, {"func_args": {"c": "'_'"}, "return_value": "1"}, {"func_args": {"c": "'c'"}, "return_value": "1"}, {"func_args": {"c": "'o'"}, "return_value": "1"}, {"func_args": {"c": "'n'"}, "return_value": "1"}, {"func_args": {"c": "'f'"}, "return_value": "1"}, {"func_args": {"c": "'i'"}, "return_value": "1"}, {"func_args": {"c": "'g'"}, "return_value": "1"}, {"func_args": {"c": "'h'"}, "return_value": "1"}, {"func_args": {"c": "'.'"}, "return_value": "1"}, {"func_args": {"c": "'p'"}, "return_value": "1"}, {"func_args": {"c": "'y'"}, "return_value": "1"}, {"func_args": {"c": "' '"}, "return_value": "1"}, {"func_args": {"c": "'F'"}, "return_value": "1"}, {"func_args": {"c": "'A'"}, "return_value": "1"}, {"func_args": {"c": "'I'"}, "return_value": "1"}, {"func_args": {"c": "'L'"}, "return_value": "1"}, {"func_args": {"c": "'E'"}, "return_value": "1"}, {"func_args": {"c": "'D'"}, "return_value": "1"}, {"func_args": {"c": "':'"}, "return_value": "1"}, {"func_args": {"c": "'T'"}, "return_value": "1"}, {"func_args": {"c": "'d'"}, "return_value": "1"}, {"func_args": {"c": "'u'"}, "return_value": "1"}, {"func_args": {"c": "'l'"}, "return_value": "1"}, {"func_args": {"c": "'r'"}, "return_value": "1"}, {"func_args": {"c": "'a'"}, "return_value": "1"}, {"func_args": {"c": "'b'"}, "return_value": "1"}, {"func_args": {"c": "'-'"}, "return_value": "1"}]}, "myparse": {"line": 231, "args": [{"func_args": {"path": "'/path/to/1'", "format": "'toml'"}, "return_value": "{'path': '/path/to/1', 'format': 'toml'}"}, {"func_args": {"path": "'/path/to/2'", "format": "'toml'"}, "return_value": "{'path': '/path/to/2', 'format': 'toml'}"}], "text": "def myparse(path, format=None):\n            return {'path': path, 'format': format}"}, "myfinder": {"line": 301, "args": [{"func_args": {"path": "'/etc/myapp/config.toml'"}, "return_value": "['/etc/myapp/config.toml']"}, {"func_args": {"path": "'/etc/myapp/conf.d'"}, "return_value": "['/etc/myapp/conf.d']"}, {"func_args": {"path": "'/etc/myapp/conf.d'"}, "return_value": "['/etc/myapp/conf.d']"}, {"func_args": {"path": "'/etc/myapp/config.toml'"}, "return_value": "['/etc/myapp/config.toml']"}, {"func_args": {"path": "'/etc/myapp/config.toml'"}, "return_value": "['/etc/myapp/config.toml']"}, {"func_args": {"path": "'/etc/myapp/conf.d'"}, "return_value": "['/etc/myapp/conf.d']"}, {"func_args": {"path": "'/extra/path'"}, "return_value": "['/extra/path']"}, {"func_args": {"path": "'/path/to/default'"}, "return_value": "['/path/to/default']"}, {"func_args": {"path": "'/etc/myapp/config.toml'"}, "return_value": "['/etc/myapp/config.toml']"}, {"func_args": {"path": "'/etc/myapp/conf.d'"}, "return_value": "['/etc/myapp/conf.d']"}, {"func_args": {"path": "'/etc/myapp/config.json'"}, "return_value": "['/etc/myapp/config.json']"}, {"func_args": {"path": "'/etc/myapp/conf.d'"}, "return_value": "['/etc/myapp/conf.d']"}, {"func_args": {"path": "'/etc/myapp/config.jsn'"}, "return_value": "['/etc/myapp/config.jsn']"}, {"func_args": {"path": "'/etc/myapp/config.jsn'"}, "return_value": "['/etc/myapp/config.jsn']"}, {"func_args": {"path": "'/etc/myapp/conf.d'"}, "return_value": "['/etc/myapp/conf.d']"}, {"func_args": {"path": "'/my/path/config.toml'"}, "return_value": "['/my/path/config.toml']"}, {"func_args": {"path": "'/my/path/conf.d'"}, "return_value": "['/my/path/conf.d']"}, {"func_args": {"path": "'/etc/myapp/config.toml'"}, "return_value": "['/etc/myapp/config.toml']"}, {"func_args": {"path": "'/etc/myapp/conf.d'"}, "return_value": "['/etc/myapp/conf.d']"}, {"func_args": {"path": "'~/.config/myapp/config.toml'"}, "return_value": "['~/.config/myapp/config.toml']"}, {"func_args": {"path": "'~/.config/myapp/conf.d'"}, "return_value": "['~/.config/myapp/conf.d']"}, {"func_args": {"path": "'/etc/myapp/config.toml'"}, "return_value": "['/etc/myapp/config.toml']"}, {"func_args": {"path": "'/etc/myapp/conf.d'"}, "return_value": "['/etc/myapp/conf.d']"}, {"func_args": {"path": "'~/.config/myapp/config.toml'"}, "return_value": "['~/.config/myapp/config.toml']"}, {"func_args": {"path": "'~/.config/myapp/conf.d'"}, "return_value": "['~/.config/myapp/conf.d']"}, {"func_args": {"path": "'/extra/path'"}, "return_value": "['/extra/path']"}, {"func_args": {"path": "'/etc/myapp/config.json'"}, "return_value": "['/etc/myapp/config.json']"}, {"func_args": {"path": "'/etc/myapp/conf.d'"}, "return_value": "['/etc/myapp/conf.d']"}, {"func_args": {"path": "'~/.config/myapp/config.json'"}, "return_value": "['~/.config/myapp/config.json']"}, {"func_args": {"path": "'~/.config/myapp/conf.d'"}, "return_value": "['~/.config/myapp/conf.d']"}, {"func_args": {"path": "'/etc/myapp/config.jsn'"}, "return_value": "['/etc/myapp/config.jsn']"}, {"func_args": {"path": "'/etc/myapp/config.jsn'"}, "return_value": "['/etc/myapp/config.jsn']"}, {"func_args": {"path": "'/etc/myapp/conf.d'"}, "return_value": "['/etc/myapp/conf.d']"}, {"func_args": {"path": "'~/.config/myapp/config.jsn'"}, "return_value": "['~/.config/myapp/config.jsn']"}, {"func_args": {"path": "'~/.config/myapp/conf.d'"}, "return_value": "['~/.config/myapp/conf.d']"}, {"func_args": {"path": "'/my/path/config.toml'"}, "return_value": "['/my/path/config.toml']"}, {"func_args": {"path": "'/my/path/conf.d'"}, "return_value": "['/my/path/conf.d']"}, {"func_args": {"path": "'~/.config/myapp/config.toml'"}, "return_value": "['~/.config/myapp/config.toml']"}, {"func_args": {"path": "'~/.config/myapp/conf.d'"}, "return_value": "['~/.config/myapp/conf.d']"}, {"func_args": {"path": "'/etc/myapp/config.toml'"}, "return_value": "['/etc/myapp/config.toml']"}, {"func_args": {"path": "'/etc/myapp/conf.d'"}, "return_value": "['/etc/myapp/conf.d']"}, {"func_args": {"path": "'/my/path/config.toml'"}, "return_value": "['/my/path/config.toml']"}, {"func_args": {"path": "'/my/path/conf.d'"}, "return_value": "['/my/path/conf.d']"}], "text": "def myfinder(path):\n            return [path]"}, "myparser": {"line": 297, "args": [{"func_args": {"path": "'/etc/myapp/config.toml'", "format": "None", "_data": "{'n': 0}"}, "return_value": "{'/etc/myapp/config.toml': 1}"}, {"func_args": {"path": "'/etc/myapp/conf.d'", "format": "None", "_data": "{'n': 1}"}, "return_value": "{'/etc/myapp/conf.d': 2}"}, {"func_args": {"path": "'/etc/myapp/conf.d'", "format": "None", "_data": "{'n': 0}"}, "return_value": "{'/etc/myapp/conf.d': 1}"}, {"func_args": {"path": "'/etc/myapp/config.toml'", "format": "None", "_data": "{'n': 0}"}, "return_value": "{'/etc/myapp/config.toml': 1}"}, {"func_args": {"path": "'/etc/myapp/config.toml'", "format": "None", "_data": "{'n': 0}"}, "return_value": "{'/etc/myapp/config.toml': 1}"}, {"func_args": {"path": "'/etc/myapp/conf.d'", "format": "None", "_data": "{'n': 1}"}, "return_value": "{'/etc/myapp/conf.d': 2}"}, {"func_args": {"path": "'/extra/path'", "format": "None", "_data": "{'n': 2}"}, "return_value": "{'/extra/path': 3}"}, {"func_args": {"path": "'/path/to/default'", "format": "None", "_data": "{'n': 0}"}, "return_value": "{'/path/to/default': 1}"}, {"func_args": {"path": "'/etc/myapp/config.toml'", "format": "None", "_data": "{'n': 1}"}, "return_value": "{'/etc/myapp/config.toml': 2}"}, {"func_args": {"path": "'/etc/myapp/conf.d'", "format": "None", "_data": "{'n': 2}"}, "return_value": "{'/etc/myapp/conf.d': 3}"}, {"func_args": {"path": "'/etc/myapp/config.json'", "format": "None", "_data": "{'n': 0}"}, "return_value": "{'/etc/myapp/config.json': 1}"}, {"func_args": {"path": "'/etc/myapp/conf.d'", "format": "None", "_data": "{'n': 1}"}, "return_value": "{'/etc/myapp/conf.d': 2}"}, {"func_args": {"path": "'/etc/myapp/config.jsn'", "format": "'json'", "_data": "{'n': 0}"}, "return_value": "{'/etc/myapp/config.jsn': 1}"}, {"func_args": {"path": "'/etc/myapp/conf.d'", "format": "'json'", "_data": "{'n': 1}"}, "return_value": "{'/etc/myapp/conf.d': 2}"}, {"func_args": {"path": "'/my/path/config.toml'", "format": "None", "_data": "{'n': 0}"}, "return_value": "{'/my/path/config.toml': 1}"}, {"func_args": {"path": "'/my/path/conf.d'", "format": "None", "_data": "{'n': 1}"}, "return_value": "{'/my/path/conf.d': 2}"}, {"func_args": {"path": "'/etc/myapp/config.toml'", "format": "None", "_data": "{'n': 0}"}, "return_value": "{'/etc/myapp/config.toml': 1}"}, {"func_args": {"path": "'/etc/myapp/conf.d'", "format": "None", "_data": "{'n': 1}"}, "return_value": "{'/etc/myapp/conf.d': 2}"}, {"func_args": {"path": "'~/.config/myapp/config.toml'", "format": "None", "_data": "{'n': 2}"}, "return_value": "{'~/.config/myapp/config.toml': 3}"}, {"func_args": {"path": "'~/.config/myapp/conf.d'", "format": "None", "_data": "{'n': 3}"}, "return_value": "{'~/.config/myapp/conf.d': 4}"}, {"func_args": {"path": "'/etc/myapp/config.toml'", "format": "None", "_data": "{'n': 0}"}, "return_value": "{'/etc/myapp/config.toml': 1}"}, {"func_args": {"path": "'/etc/myapp/conf.d'", "format": "None", "_data": "{'n': 1}"}, "return_value": "{'/etc/myapp/conf.d': 2}"}, {"func_args": {"path": "'~/.config/myapp/config.toml'", "format": "None", "_data": "{'n': 2}"}, "return_value": "{'~/.config/myapp/config.toml': 3}"}, {"func_args": {"path": "'~/.config/myapp/conf.d'", "format": "None", "_data": "{'n': 3}"}, "return_value": "{'~/.config/myapp/conf.d': 4}"}, {"func_args": {"path": "'/extra/path'", "format": "None", "_data": "{'n': 4}"}, "return_value": "{'/extra/path': 5}"}, {"func_args": {"path": "'/etc/myapp/config.json'", "format": "None", "_data": "{'n': 0}"}, "return_value": "{'/etc/myapp/config.json': 1}"}, {"func_args": {"path": "'/etc/myapp/conf.d'", "format": "None", "_data": "{'n': 1}"}, "return_value": "{'/etc/myapp/conf.d': 2}"}, {"func_args": {"path": "'~/.config/myapp/config.json'", "format": "None", "_data": "{'n': 2}"}, "return_value": "{'~/.config/myapp/config.json': 3}"}, {"func_args": {"path": "'~/.config/myapp/conf.d'", "format": "None", "_data": "{'n': 3}"}, "return_value": "{'~/.config/myapp/conf.d': 4}"}, {"func_args": {"path": "'/etc/myapp/config.jsn'", "format": "'json'", "_data": "{'n': 0}"}, "return_value": "{'/etc/myapp/config.jsn': 1}"}, {"func_args": {"path": "'/etc/myapp/conf.d'", "format": "'json'", "_data": "{'n': 1}"}, "return_value": "{'/etc/myapp/conf.d': 2}"}, {"func_args": {"path": "'~/.config/myapp/config.jsn'", "format": "'json'", "_data": "{'n': 2}"}, "return_value": "{'~/.config/myapp/config.jsn': 3}"}, {"func_args": {"path": "'~/.config/myapp/conf.d'", "format": "'json'", "_data": "{'n': 3}"}, "return_value": "{'~/.config/myapp/conf.d': 4}"}, {"func_args": {"path": "'/my/path/config.toml'", "format": "None", "_data": "{'n': 0}"}, "return_value": "{'/my/path/config.toml': 1}"}, {"func_args": {"path": "'/my/path/conf.d'", "format": "None", "_data": "{'n': 1}"}, "return_value": "{'/my/path/conf.d': 2}"}, {"func_args": {"path": "'~/.config/myapp/config.toml'", "format": "None", "_data": "{'n': 2}"}, "return_value": "{'~/.config/myapp/config.toml': 3}"}, {"func_args": {"path": "'~/.config/myapp/conf.d'", "format": "None", "_data": "{'n': 3}"}, "return_value": "{'~/.config/myapp/conf.d': 4}"}, {"func_args": {"path": "'/etc/myapp/config.toml'", "format": "None", "_data": "{'n': 0}"}, "return_value": "{'/etc/myapp/config.toml': 1}"}, {"func_args": {"path": "'/etc/myapp/conf.d'", "format": "None", "_data": "{'n': 1}"}, "return_value": "{'/etc/myapp/conf.d': 2}"}, {"func_args": {"path": "'/my/path/config.toml'", "format": "None", "_data": "{'n': 2}"}, "return_value": "{'/my/path/config.toml': 3}"}, {"func_args": {"path": "'/my/path/conf.d'", "format": "None", "_data": "{'n': 3}"}, "return_value": "{'/my/path/conf.d': 4}"}], "text": "def myparser(path, format=None, _data={'n': 0}):\n            _data['n'] += 1\n            return {path: _data['n']}"}, "<lambda>": {"line": 289, "args": [{"func_args": {"k": "'/etc/myapp/config.toml'"}, "return_value": "1"}, {"func_args": {"k": "'/etc/myapp/conf.d'"}, "return_value": "2"}, {"func_args": {"k": "'/etc/myapp/conf.d'"}, "return_value": "1"}, {"func_args": {"k": "'/etc/myapp/config.toml'"}, "return_value": "1"}, {"func_args": {"k": "'/etc/myapp/config.toml'"}, "return_value": "1"}, {"func_args": {"k": "'/etc/myapp/conf.d'"}, "return_value": "2"}, {"func_args": {"k": "'/extra/path'"}, "return_value": "3"}, {"func_args": {"k": "'/path/to/default'"}, "return_value": "1"}, {"func_args": {"k": "'/etc/myapp/config.toml'"}, "return_value": "2"}, {"func_args": {"k": "'/etc/myapp/conf.d'"}, "return_value": "3"}, {"func_args": {"k": "'/etc/myapp/config.json'"}, "return_value": "1"}, {"func_args": {"k": "'/etc/myapp/conf.d'"}, "return_value": "2"}, {"func_args": {"k": "'/etc/myapp/config.jsn'"}, "return_value": "1"}, {"func_args": {"k": "'/etc/myapp/conf.d'"}, "return_value": "2"}, {"func_args": {"k": "'/my/path/config.toml'"}, "return_value": "1"}, {"func_args": {"k": "'/my/path/conf.d'"}, "return_value": "2"}, {"func_args": {"k": "'/etc/myapp/config.toml'"}, "return_value": "1"}, {"func_args": {"k": "'/etc/myapp/conf.d'"}, "return_value": "2"}, {"func_args": {"k": "'~/.config/myapp/config.toml'"}, "return_value": "3"}, {"func_args": {"k": "'~/.config/myapp/conf.d'"}, "return_value": "4"}, {"func_args": {"k": "'/etc/myapp/config.toml'"}, "return_value": "1"}, {"func_args": {"k": "'/etc/myapp/conf.d'"}, "return_value": "2"}, {"func_args": {"k": "'~/.config/myapp/config.toml'"}, "return_value": "3"}, {"func_args": {"k": "'~/.config/myapp/conf.d'"}, "return_value": "4"}, {"func_args": {"k": "'/extra/path'"}, "return_value": "5"}, {"func_args": {"k": "'/etc/myapp/config.json'"}, "return_value": "1"}, {"func_args": {"k": "'/etc/myapp/conf.d'"}, "return_value": "2"}, {"func_args": {"k": "'~/.config/myapp/config.json'"}, "return_value": "3"}, {"func_args": {"k": "'~/.config/myapp/conf.d'"}, "return_value": "4"}, {"func_args": {"k": "'/etc/myapp/config.jsn'"}, "return_value": "1"}, {"func_args": {"k": "'/etc/myapp/conf.d'"}, "return_value": "2"}, {"func_args": {"k": "'~/.config/myapp/config.jsn'"}, "return_value": "3"}, {"func_args": {"k": "'~/.config/myapp/conf.d'"}, "return_value": "4"}, {"func_args": {"k": "'/my/path/config.toml'"}, "return_value": "1"}, {"func_args": {"k": "'/my/path/conf.d'"}, "return_value": "2"}, {"func_args": {"k": "'~/.config/myapp/config.toml'"}, "return_value": "3"}, {"func_args": {"k": "'~/.config/myapp/conf.d'"}, "return_value": "4"}, {"func_args": {"k": "'/etc/myapp/config.toml'"}, "return_value": "1"}, {"func_args": {"k": "'/etc/myapp/conf.d'"}, "return_value": "2"}, {"func_args": {"k": "'/my/path/config.toml'"}, "return_value": "3"}, {"func_args": {"k": "'/my/path/conf.d'"}, "return_value": "4"}]}, "_isbytes": {"line": 32, "args": [{"func_args": {"x": "b'\\n# Basic toml file\\n[section]\\nstring = \"toml\"\\ninteger = 1\\nfloat = 1.5\\nboolean = true\\nlist = [\"first\", \"second\"]\\nkey = \"basic\"\\nunicode = \"\\xf0\\x9f\\x92\\xa9\"\\n\\n[section.subsection]\\nkey = \"value\"\\n'"}, "return_value": "True"}, {"func_args": {"x": "b'\\n# Basic ini file\\n[section]\\nstring = string\\nunicode = \\xf0\\x9f\\x92\\xa9\\n'"}, "return_value": "True"}, {"func_args": {"x": "b'\\n{\\n  \"section\": {\\n    \"string\": \"json\",\\n    \"integer\": 3,\\n    \"float\": 3.5,\\n    \"boolean\": false,\\n    \"null\": null,\\n    \"list\": [\"third\", \"fourth\"],\\n    \"unicode\": \"\\xf0\\x9f\\x92\\xa9\"\\n  }\\n}\\n'"}, "return_value": "True"}, {"func_args": {"x": "b'\\n# Basic ini file\\n[section]\\nstring = string\\nunicode = \\xf0\\x9f\\x92\\xa9\\n'"}, "return_value": "True"}, {"func_args": {"x": "b'\\n{\\n  \"section\": {\\n    \"string\": \"json\",\\n    \"integer\": 3,\\n    \"float\": 3.5,\\n    \"boolean\": false,\\n    \"null\": null,\\n    \"list\": [\"third\", \"fourth\"],\\n    \"unicode\": \"\\xf0\\x9f\\x92\\xa9\"\\n  }\\n}\\n'"}, "return_value": "True"}, {"func_args": {"x": "b'\\n# Basic toml file\\n[section]\\nstring = \"toml\"\\ninteger = 1\\nfloat = 1.5\\nboolean = true\\nlist = [\"first\", \"second\"]\\nkey = \"basic\"\\nunicode = \"\\xf0\\x9f\\x92\\xa9\"\\n\\n[section.subsection]\\nkey = \"value\"\\n'"}, "return_value": "True"}, {"func_args": {"x": "b'\\n# Basic ini file\\n[section]\\nstring = string\\nunicode = \\xf0\\x9f\\x92\\xa9\\n'"}, "return_value": "True"}, {"func_args": {"x": "b'\\n{\\n  \"section\": {\\n    \"string\": \"json\",\\n    \"integer\": 3,\\n    \"float\": 3.5,\\n    \"boolean\": false,\\n    \"null\": null,\\n    \"list\": [\"third\", \"fourth\"],\\n    \"unicode\": \"\\xf0\\x9f\\x92\\xa9\"\\n  }\\n}\\n'"}, "return_value": "True"}, {"func_args": {"x": "b'\\n[section]\\nkey = null\\n'"}, "return_value": "True"}, {"func_args": {"x": "b'\\n=\\n'"}, "return_value": "True"}, {"func_args": {"x": "b'\\n{\"invalid\"}\\n'"}, "return_value": "True"}, {"func_args": {"x": "b'\\n=\\n'"}, "return_value": "True"}, {"func_args": {"x": "b'\\n{\"invalid\"}\\n'"}, "return_value": "True"}, {"func_args": {"x": "b'\\n# Basic toml file\\n[section]\\nstring = \"toml\"\\ninteger = 1\\nfloat = 1.5\\nboolean = true\\nlist = [\"first\", \"second\"]\\nkey = \"basic\"\\nunicode = \"\\xf0\\x9f\\x92\\xa9\"\\n\\n[section.subsection]\\nkey = \"value\"\\n'"}, "return_value": "True"}, {"func_args": {"x": "b'\\n{\\n  \"section\": {\\n    \"string\": \"json\",\\n    \"integer\": 3,\\n    \"float\": 3.5,\\n    \"boolean\": false,\\n    \"null\": null,\\n    \"list\": [\"third\", \"fourth\"],\\n    \"unicode\": \"\\xf0\\x9f\\x92\\xa9\"\\n  }\\n}\\n'"}, "return_value": "True"}, {"func_args": {"x": "b'\\n[section]\\nkey = \"zero\"\\n'"}, "return_value": "True"}, {"func_args": {"x": "b'\\n{\\n  \"section\": {\\n    \"key\": \"first\"\\n  }\\n}\\n'"}, "return_value": "True"}, {"func_args": {"x": "b'\\n[section]\\nkey = second\\n'"}, "return_value": "True"}, {"func_args": {"x": "b'\\n[section]\\nkey = \"zero\"\\n'"}, "return_value": "True"}, {"func_args": {"x": "b'\\n{\\n  \"section\": {\\n    \"key\": \"first\"\\n  }\\n}\\n'"}, "return_value": "True"}, {"func_args": {"x": "b'\\n[section]\\nkey = second\\n'"}, "return_value": "True"}, {"func_args": {"x": "b'\\n# Basic toml file\\n[section]\\nstring = \"toml\"\\ninteger = 1\\nfloat = 1.5\\nboolean = true\\nlist = [\"first\", \"second\"]\\nkey = \"basic\"\\nunicode = \"\\xf0\\x9f\\x92\\xa9\"\\n\\n[section.subsection]\\nkey = \"value\"\\n'"}, "return_value": "True"}, {"func_args": {"x": "b'\\n# Basic toml file\\n[section]\\nstring = \"toml\"\\ninteger = 1\\nfloat = 1.5\\nboolean = true\\nlist = [\"first\", \"second\"]\\nkey = \"basic\"\\nunicode = \"\\xf0\\x9f\\x92\\xa9\"\\n\\n[section.subsection]\\nkey = \"value\"\\n'"}, "return_value": "True"}, {"func_args": {"x": "b'\\n# Basic toml file\\n[section]\\nstring = \"toml\"\\ninteger = 1\\nfloat = 1.5\\nboolean = true\\nlist = [\"first\", \"second\"]\\nkey = \"basic\"\\nunicode = \"\\xf0\\x9f\\x92\\xa9\"\\n\\n[section.subsection]\\nkey = \"value\"\\n'"}, "return_value": "True"}, {"func_args": {"x": "b'\\n# Basic toml file\\n[section]\\nstring = \"toml\"\\ninteger = 1\\nfloat = 1.5\\nboolean = true\\nlist = [\"first\", \"second\"]\\nkey = \"basic\"\\nunicode = \"\\xf0\\x9f\\x92\\xa9\"\\n\\n[section.subsection]\\nkey = \"value\"\\n'"}, "return_value": "True"}, {"func_args": {"x": "b'\\n[section]\\nkey = \"zero\"\\n'"}, "return_value": "True"}, {"func_args": {"x": "b'\\n{\\n  \"section\": {\\n    \"key\": \"first\"\\n  }\\n}\\n'"}, "return_value": "True"}, {"func_args": {"x": "b'\\n[section]\\nkey = second\\n'"}, "return_value": "True"}, {"func_args": {"x": "b'\\n# Basic toml file\\n[section]\\nstring = \"toml\"\\ninteger = 1\\nfloat = 1.5\\nboolean = true\\nlist = [\"first\", \"second\"]\\nkey = \"basic\"\\nunicode = \"\\xf0\\x9f\\x92\\xa9\"\\n\\n[section.subsection]\\nkey = \"value\"\\n'"}, "return_value": "True"}, {"func_args": {"x": "b'\\n# Basic ini file\\n[section]\\nstring = string\\nunicode = \\xf0\\x9f\\x92\\xa9\\n'"}, "return_value": "True"}, {"func_args": {"x": "b'\\n{\\n  \"section\": {\\n    \"string\": \"json\",\\n    \"integer\": 3,\\n    \"float\": 3.5,\\n    \"boolean\": false,\\n    \"null\": null,\\n    \"list\": [\"third\", \"fourth\"],\\n    \"unicode\": \"\\xf0\\x9f\\x92\\xa9\"\\n  }\\n}\\n'"}, "return_value": "True"}, {"func_args": {"x": "b'\\n# Basic ini file\\n[section]\\nstring = string\\nunicode = \\xf0\\x9f\\x92\\xa9\\n'"}, "return_value": "True"}, {"func_args": {"x": "b'\\n{\\n  \"section\": {\\n    \"string\": \"json\",\\n    \"integer\": 3,\\n    \"float\": 3.5,\\n    \"boolean\": false,\\n    \"null\": null,\\n    \"list\": [\"third\", \"fourth\"],\\n    \"unicode\": \"\\xf0\\x9f\\x92\\xa9\"\\n  }\\n}\\n'"}, "return_value": "True"}, {"func_args": {"x": "b'\\n# Basic toml file\\n[section]\\nstring = \"toml\"\\ninteger = 1\\nfloat = 1.5\\nboolean = true\\nlist = [\"first\", \"second\"]\\nkey = \"basic\"\\nunicode = \"\\xf0\\x9f\\x92\\xa9\"\\n\\n[section.subsection]\\nkey = \"value\"\\n'"}, "return_value": "True"}, {"func_args": {"x": "b'\\n# Basic ini file\\n[section]\\nstring = string\\nunicode = \\xf0\\x9f\\x92\\xa9\\n'"}, "return_value": "True"}, {"func_args": {"x": "b'\\n{\\n  \"section\": {\\n    \"string\": \"json\",\\n    \"integer\": 3,\\n    \"float\": 3.5,\\n    \"boolean\": false,\\n    \"null\": null,\\n    \"list\": [\"third\", \"fourth\"],\\n    \"unicode\": \"\\xf0\\x9f\\x92\\xa9\"\\n  }\\n}\\n'"}, "return_value": "True"}, {"func_args": {"x": "b'\\n# Basic ini file\\n[section]\\nstring = string\\nunicode = \\xf0\\x9f\\x92\\xa9\\n'"}, "return_value": "True"}, {"func_args": {"x": "b'\\n{\\n  \"section\": {\\n    \"string\": \"json\",\\n    \"integer\": 3,\\n    \"float\": 3.5,\\n    \"boolean\": false,\\n    \"null\": null,\\n    \"list\": [\"third\", \"fourth\"],\\n    \"unicode\": \"\\xf0\\x9f\\x92\\xa9\"\\n  }\\n}\\n'"}, "return_value": "True"}, {"func_args": {"x": "b'[broken'"}, "return_value": "True"}, {"func_args": {"x": "b'[section]\\nstring = \"toml\"\\n'"}, "return_value": "True"}], "text": "def _isbytes(x):\n        return isinstance(x, bytes)"}, "check_access": {"line": 169, "args": [{"func_args": {"path": "'/tmp/pytest-of-root/pytest-4/test_it_should_load_files_in_o0'"}, "return_value": "True"}, {"func_args": {"path": "'/tmp/pytest-of-root/pytest-4/test_it_should_load_full_paths0'"}, "return_value": "True"}, {"func_args": {"path": "'/usr/app/src/test_repos/confight/test_confight.py'"}, "return_value": "True"}, {"func_args": {"path": "'/tmp/pytest-of-root/pytest-4/test_it_should_load_existing_f0/basic_file.toml'"}, "return_value": "True"}, {"func_args": {"path": "'/tmp/pytest-of-root/pytest-4/test_it_should_load_existing_f0/basic_file.toml'"}, "return_value": "True"}, {"func_args": {"path": "'/path/to/nowhere'"}, "return_value": "False"}, {"func_args": {"path": "None"}, "return_value": "False"}, {"func_args": {"path": "'/tmp/pytest-of-root/pytest-4/test_it_should_ignore_unreadab0/basic_file.toml'"}, "return_value": "True"}, {"func_args": {"path": "'/tmp/pytest-of-root/pytest-4/test_it_should_ignore_unexplor0'"}, "return_value": "True"}, {"func_args": {"path": "'/tmp/pytest-of-root/pytest-4/test_it_should_warn_about_exec0/basic_file.toml'"}, "return_value": "True"}, {"func_args": {"path": "'/tmp/pytest-of-root/pytest-4/test_it_should_load_from_file_0/00_base.toml'"}, "return_value": "True"}, {"func_args": {"path": "'/tmp/pytest-of-root/pytest-4/test_it_should_load_from_file_0'"}, "return_value": "True"}, {"func_args": {"path": "'/tmp/pytest-of-root/pytest-4/test_it_should_filter_extensio0'"}, "return_value": "True"}], "text": "def check_access(path):\n    \"\"\"Return whether a config file or directory can be read\"\"\"\n    if not path:\n        return False\n    elif not os.path.exists(path):\n        logger.debug('Could not find %r', path)\n        return False\n    elif not os.access(path, os.R_OK):\n        logger.error('Could not read %r', path)\n        return False\n    elif os.path.isdir(path) and not os.access(path, os.X_OK):\n        logger.error('Could not list directory %r', path)\n        return False\n    elif os.path.isfile(path) and os.access(path, os.X_OK):\n        logger.warning('Config file %r has exec permissions', path)\n    return True"}, "find": {"line": 151, "args": [{"func_args": {"path": "'/tmp/pytest-of-root/pytest-4/test_it_should_load_files_in_o0'"}, "return_value": "['/tmp/pytest-of-root/pytest-4/test_it_should_load_files_in_o0/00_base.toml', '/tmp/pytest-of-root/pytest-4/test_it_should_load_files_in_o0/01_first.json', '/tmp/pytest-of-root/pytest-4/test_it_should_load_files_in_o0/AA_second.ini']"}, {"func_args": {"path": "'/tmp/pytest-of-root/pytest-4/test_it_should_load_full_paths0'"}, "return_value": "['/tmp/pytest-of-root/pytest-4/test_it_should_load_full_paths0/00_base.toml', '/tmp/pytest-of-root/pytest-4/test_it_should_load_full_paths0/01_first.json', '/tmp/pytest-of-root/pytest-4/test_it_should_load_full_paths0/AA_second.ini']"}, {"func_args": {"path": "'./test_confight.py'"}, "return_value": "['/usr/app/src/test_repos/confight/test_confight.py']"}, {"func_args": {"path": "'/tmp/pytest-of-root/pytest-4/test_it_should_load_existing_f0/basic_file.toml'"}, "return_value": "['/tmp/pytest-of-root/pytest-4/test_it_should_load_existing_f0/basic_file.toml']"}, {"func_args": {"path": "'~/../tmp/pytest-of-root/pytest-4/test_it_should_load_existing_f0/basic_file.toml'"}, "return_value": "['/tmp/pytest-of-root/pytest-4/test_it_should_load_existing_f0/basic_file.toml']"}, {"func_args": {"path": "'/path/to/nowhere'"}, "return_value": "[]"}, {"func_args": {"path": "None"}, "return_value": "[]"}, {"func_args": {"path": "'/tmp/pytest-of-root/pytest-4/test_it_should_ignore_unreadab0/basic_file.toml'"}, "return_value": "['/tmp/pytest-of-root/pytest-4/test_it_should_ignore_unreadab0/basic_file.toml']"}, {"func_args": {"path": "'/tmp/pytest-of-root/pytest-4/test_it_should_ignore_unexplor0'"}, "return_value": "[]"}, {"func_args": {"path": "'/tmp/pytest-of-root/pytest-4/test_it_should_warn_about_exec0/basic_file.toml'"}, "return_value": "['/tmp/pytest-of-root/pytest-4/test_it_should_warn_about_exec0/basic_file.toml']"}, {"func_args": {"path": "'/tmp/pytest-of-root/pytest-4/test_it_should_load_from_file_0/00_base.toml'"}, "return_value": "['/tmp/pytest-of-root/pytest-4/test_it_should_load_from_file_0/00_base.toml']"}, {"func_args": {"path": "'/tmp/pytest-of-root/pytest-4/test_it_should_load_from_file_0'"}, "return_value": "['/tmp/pytest-of-root/pytest-4/test_it_should_load_from_file_0/00_base.toml', '/tmp/pytest-of-root/pytest-4/test_it_should_load_from_file_0/01_first.json', '/tmp/pytest-of-root/pytest-4/test_it_should_load_from_file_0/AA_second.ini']"}, {"func_args": {"path": "'/tmp/pytest-of-root/pytest-4/test_it_should_filter_extensio0'"}, "return_value": "['/tmp/pytest-of-root/pytest-4/test_it_should_filter_extensio0/basic_file.cfg', '/tmp/pytest-of-root/pytest-4/test_it_should_filter_extensio0/basic_file.ini', '/tmp/pytest-of-root/pytest-4/test_it_should_filter_extensio0/basic_file.js', '/tmp/pytest-of-root/pytest-4/test_it_should_filter_extensio0/basic_file.json', '/tmp/pytest-of-root/pytest-4/test_it_should_filter_extensio0/basic_file.toml']"}], "text": "def find(path):\n    \"\"\"Find files in the filesystem in order\n\n    Expands and normalizes relative paths.\n    Ignores unreadable files and unexplorable directories.\n\n    :param dir_path: Path to a config file or dir containing configs\n    :returns: List of full paths of the files in the directory in lex. order\n    \"\"\"\n    if path:\n        path = os.path.abspath(os.path.expanduser(path))\n    if not check_access(path):\n        return []\n    if os.path.isfile(path):\n        return [path]\n    return sorted(glob.glob(os.path.join(path, '*')))"}, "_strictly_valid_num": {"line": 89, "args": [{"func_args": {"n": "' \"toml\"'"}, "return_value": "True"}, {"func_args": {"n": "' 1'"}, "return_value": "True"}, {"func_args": {"n": "' 1.5'"}, "return_value": "True"}, {"func_args": {"n": "' true'"}, "return_value": "True"}, {"func_args": {"n": "' [\"first\", \"second\"]'"}, "return_value": "True"}, {"func_args": {"n": "' \"basic\"'"}, "return_value": "True"}, {"func_args": {"n": "' \"\ud83d\udca9\"'"}, "return_value": "True"}, {"func_args": {"n": "' \"value\"'"}, "return_value": "True"}, {"func_args": {"n": "' \"toml\"'"}, "return_value": "True"}, {"func_args": {"n": "' 1'"}, "return_value": "True"}, {"func_args": {"n": "' 1.5'"}, "return_value": "True"}, {"func_args": {"n": "' true'"}, "return_value": "True"}, {"func_args": {"n": "' [\"first\", \"second\"]'"}, "return_value": "True"}, {"func_args": {"n": "' \"basic\"'"}, "return_value": "True"}, {"func_args": {"n": "' \"\ud83d\udca9\"'"}, "return_value": "True"}, {"func_args": {"n": "' \"value\"'"}, "return_value": "True"}, {"func_args": {"n": "' \"toml\"'"}, "return_value": "True"}, {"func_args": {"n": "' 1'"}, "return_value": "True"}, {"func_args": {"n": "' 1.5'"}, "return_value": "True"}, {"func_args": {"n": "' true'"}, "return_value": "True"}, {"func_args": {"n": "' [\"first\", \"second\"]'"}, "return_value": "True"}, {"func_args": {"n": "' \"basic\"'"}, "return_value": "True"}, {"func_args": {"n": "' \"\ud83d\udca9\"'"}, "return_value": "True"}, {"func_args": {"n": "' \"value\"'"}, "return_value": "True"}, {"func_args": {"n": "' null'"}, "return_value": "True"}, {"func_args": {"n": "' \"zero\"'"}, "return_value": "True"}, {"func_args": {"n": "' \"zero\"'"}, "return_value": "True"}, {"func_args": {"n": "' \"toml\"'"}, "return_value": "True"}, {"func_args": {"n": "' 1'"}, "return_value": "True"}, {"func_args": {"n": "' 1.5'"}, "return_value": "True"}, {"func_args": {"n": "' true'"}, "return_value": "True"}, {"func_args": {"n": "' [\"first\", \"second\"]'"}, "return_value": "True"}, {"func_args": {"n": "' \"basic\"'"}, "return_value": "True"}, {"func_args": {"n": "' \"\ud83d\udca9\"'"}, "return_value": "True"}, {"func_args": {"n": "' \"value\"'"}, "return_value": "True"}, {"func_args": {"n": "' \"zero\"'"}, "return_value": "True"}, {"func_args": {"n": "' \"zero\"'"}, "return_value": "True"}, {"func_args": {"n": "' \"zero\"'"}, "return_value": "True"}, {"func_args": {"n": "' \"toml\"'"}, "return_value": "True"}, {"func_args": {"n": "' 1'"}, "return_value": "True"}, {"func_args": {"n": "' 1.5'"}, "return_value": "True"}, {"func_args": {"n": "' true'"}, "return_value": "True"}, {"func_args": {"n": "' [\"first\", \"second\"]'"}, "return_value": "True"}, {"func_args": {"n": "' \"basic\"'"}, "return_value": "True"}, {"func_args": {"n": "' \"\ud83d\udca9\"'"}, "return_value": "True"}, {"func_args": {"n": "' \"value\"'"}, "return_value": "True"}, {"func_args": {"n": "' \"toml\"'"}, "return_value": "True"}, {"func_args": {"n": "' 1'"}, "return_value": "True"}, {"func_args": {"n": "' 1.5'"}, "return_value": "True"}, {"func_args": {"n": "' true'"}, "return_value": "True"}, {"func_args": {"n": "' [\"first\", \"second\"]'"}, "return_value": "True"}, {"func_args": {"n": "' \"basic\"'"}, "return_value": "True"}, {"func_args": {"n": "' \"\ud83d\udca9\"'"}, "return_value": "True"}, {"func_args": {"n": "' \"value\"'"}, "return_value": "True"}, {"func_args": {"n": "' \"toml\"'"}, "return_value": "True"}, {"func_args": {"n": "' 1'"}, "return_value": "True"}, {"func_args": {"n": "' 1.5'"}, "return_value": "True"}, {"func_args": {"n": "' true'"}, "return_value": "True"}, {"func_args": {"n": "' [\"first\", \"second\"]'"}, "return_value": "True"}, {"func_args": {"n": "' \"basic\"'"}, "return_value": "True"}, {"func_args": {"n": "' \"\ud83d\udca9\"'"}, "return_value": "True"}, {"func_args": {"n": "' \"value\"'"}, "return_value": "True"}], "text": "def _strictly_valid_num(n):\n    n = n.strip()\n    if not n:\n        return False\n    if n[0] == '_':\n        return False\n    if n[-1] == '_':\n        return False\n    if \"_.\" in n or \"._\" in n:\n        return False\n    if len(n) == 1:\n        return True\n    if n[0] == '0' and n[1] not in ['.', 'o', 'b', 'x']:\n        return False\n    if n[0] == '+' or n[0] == '-':\n        n = n[1:]\n        if len(n) > 1 and n[0] == '0' and n[1] != '.':\n            return False\n    if '__' in n:\n        return False\n    return True"}, "_unescape": {"line": 608, "args": [{"func_args": {"v": "'\"toml\"'"}, "return_value": "'\"toml\"'"}, {"func_args": {"v": "'\"first\"'"}, "return_value": "'\"first\"'"}, {"func_args": {"v": "'\"second\"'"}, "return_value": "'\"second\"'"}, {"func_args": {"v": "'\"basic\"'"}, "return_value": "'\"basic\"'"}, {"func_args": {"v": "'\"\ud83d\udca9\"'"}, "return_value": "'\"\ud83d\udca9\"'"}, {"func_args": {"v": "'\"value\"'"}, "return_value": "'\"value\"'"}, {"func_args": {"v": "'\"toml\"'"}, "return_value": "'\"toml\"'"}, {"func_args": {"v": "'\"first\"'"}, "return_value": "'\"first\"'"}, {"func_args": {"v": "'\"second\"'"}, "return_value": "'\"second\"'"}, {"func_args": {"v": "'\"basic\"'"}, "return_value": "'\"basic\"'"}, {"func_args": {"v": "'\"\ud83d\udca9\"'"}, "return_value": "'\"\ud83d\udca9\"'"}, {"func_args": {"v": "'\"value\"'"}, "return_value": "'\"value\"'"}, {"func_args": {"v": "'\"toml\"'"}, "return_value": "'\"toml\"'"}, {"func_args": {"v": "'\"first\"'"}, "return_value": "'\"first\"'"}, {"func_args": {"v": "'\"second\"'"}, "return_value": "'\"second\"'"}, {"func_args": {"v": "'\"basic\"'"}, "return_value": "'\"basic\"'"}, {"func_args": {"v": "'\"\ud83d\udca9\"'"}, "return_value": "'\"\ud83d\udca9\"'"}, {"func_args": {"v": "'\"value\"'"}, "return_value": "'\"value\"'"}, {"func_args": {"v": "'\"zero\"'"}, "return_value": "'\"zero\"'"}, {"func_args": {"v": "'\"zero\"'"}, "return_value": "'\"zero\"'"}, {"func_args": {"v": "'\"toml\"'"}, "return_value": "'\"toml\"'"}, {"func_args": {"v": "'\"first\"'"}, "return_value": "'\"first\"'"}, {"func_args": {"v": "'\"second\"'"}, "return_value": "'\"second\"'"}, {"func_args": {"v": "'\"basic\"'"}, "return_value": "'\"basic\"'"}, {"func_args": {"v": "'\"\ud83d\udca9\"'"}, "return_value": "'\"\ud83d\udca9\"'"}, {"func_args": {"v": "'\"value\"'"}, "return_value": "'\"value\"'"}, {"func_args": {"v": "'\"zero\"'"}, "return_value": "'\"zero\"'"}, {"func_args": {"v": "'\"zero\"'"}, "return_value": "'\"zero\"'"}, {"func_args": {"v": "'\"zero\"'"}, "return_value": "'\"zero\"'"}, {"func_args": {"v": "'\"toml\"'"}, "return_value": "'\"toml\"'"}, {"func_args": {"v": "'\"first\"'"}, "return_value": "'\"first\"'"}, {"func_args": {"v": "'\"second\"'"}, "return_value": "'\"second\"'"}, {"func_args": {"v": "'\"basic\"'"}, "return_value": "'\"basic\"'"}, {"func_args": {"v": "'\"\ud83d\udca9\"'"}, "return_value": "'\"\ud83d\udca9\"'"}, {"func_args": {"v": "'\"value\"'"}, "return_value": "'\"value\"'"}, {"func_args": {"v": "'\"toml\"'"}, "return_value": "'\"toml\"'"}, {"func_args": {"v": "'\"first\"'"}, "return_value": "'\"first\"'"}, {"func_args": {"v": "'\"second\"'"}, "return_value": "'\"second\"'"}, {"func_args": {"v": "'\"basic\"'"}, "return_value": "'\"basic\"'"}, {"func_args": {"v": "'\"\ud83d\udca9\"'"}, "return_value": "'\"\ud83d\udca9\"'"}, {"func_args": {"v": "'\"value\"'"}, "return_value": "'\"value\"'"}, {"func_args": {"v": "'\"toml\"'"}, "return_value": "'\"toml\"'"}, {"func_args": {"v": "'\"first\"'"}, "return_value": "'\"first\"'"}, {"func_args": {"v": "'\"second\"'"}, "return_value": "'\"second\"'"}, {"func_args": {"v": "'\"basic\"'"}, "return_value": "'\"basic\"'"}, {"func_args": {"v": "'\"\ud83d\udca9\"'"}, "return_value": "'\"\ud83d\udca9\"'"}, {"func_args": {"v": "'\"value\"'"}, "return_value": "'\"value\"'"}], "text": "def _unescape(v):\n    \"\"\"Unescape characters in a TOML string.\"\"\"\n    i = 0\n    backslash = False\n    while i < len(v):\n        if backslash:\n            backslash = False\n            if v[i] in _escapes:\n                v = v[:i - 1] + _escape_to_escapedchars[v[i]] + v[i + 1:]\n            elif v[i] == '\\\\':\n                v = v[:i - 1] + v[i:]\n            elif v[i] == 'u' or v[i] == 'U':\n                i += 1\n            else:\n                raise ValueError(\"Reserved escape sequence used\")\n            continue\n        elif v[i] == '\\\\':\n            backslash = True\n        i += 1\n    return v"}, "_ellipsize": {"line": 29, "args": [{"func_args": {"s": "'AssertionError(<hamcrest.core.string_description.StringDescription object at 0xffff9fbe02e0>)'", "maxsize": "240"}, "return_value": "'AssertionError(<hamcrest.core.string_description.StringDescription object at 0xffff9fbe02e0>)'"}, {"func_args": {"s": "'AssertionError(<hamcrest.core.string_description.StringDescription object at 0xffff9fbe02e0>)'", "maxsize": "240"}, "return_value": "'AssertionError(<hamcrest.core.string_description.StringDescription object at 0xffff9fbe02e0>)'"}, {"func_args": {"s": "'<test_confight.TestFind object at 0xffffa0993a90>'", "maxsize": "240"}, "return_value": "'<test_confight.TestFind object at 0xffffa0993a90>'"}, {"func_args": {"s": "'<test_confight.TestFind object at 0xffffa0993a90>'", "maxsize": "240"}, "return_value": "'<test_confight.TestFind object at 0xffffa0993a90>'"}, {"func_args": {"s": "'<test_confight.Repository object at 0xffff9fbe0310>'", "maxsize": "240"}, "return_value": "'<test_confight.Repository object at 0xffff9fbe0310>'"}, {"func_args": {"s": "'<test_confight.Repository object at 0xffff9fbe0310>'", "maxsize": "240"}, "return_value": "'<test_confight.Repository object at 0xffff9fbe0310>'"}], "text": "def _ellipsize(s: str, maxsize: int) -> str:\n    if len(s) > maxsize:\n        i = max(0, (maxsize - 3) // 2)\n        j = max(0, maxsize - 3 - i)\n        return s[:i] + \"...\" + s[len(s) - j :]\n    return s"}}