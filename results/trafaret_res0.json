{"_args_converter": {"line": 816, "args": [{"func_args": {"args": "['tests']"}, "return_value": "('tests',)"}], "text": "def _args_converter(args: Iterable[str]) -> Tuple[str, ...]:\n    return tuple(args)"}, "_get_plugin_specs_as_list": {"line": 715, "args": [{"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "None"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}], "text": "def _get_plugin_specs_as_list(\n    specs: Union[None, types.ModuleType, str, Sequence[str]]\n) -> List[str]:\n    \"\"\"Parse a plugins specification into a list of plugin names.\"\"\"\n    # None means empty.\n    if specs is None:\n        return []\n    # Workaround for #3899 - a submodule which happens to be called \"pytest_plugins\".\n    if isinstance(specs, types.ModuleType):\n        return []\n    # Comma-separated list.\n    if isinstance(specs, str):\n        return specs.split(\",\") if specs else []\n    # Direct specification.\n    if isinstance(specs, collections.abc.Sequence):\n        return list(specs)\n    raise UsageError(\n        \"Plugins may be specified as a sequence or a ','-separated string of plugin names. Got: %r\"\n        % specs\n    )"}, "_assertion_supported": {"line": 1511, "args": [{"func_args": {}, "return_value": "True"}], "text": "def _assertion_supported() -> bool:\n    try:\n        assert False\n    except AssertionError:\n        return True\n    else:\n        return False"}, "scope2index": {"line": 803, "args": [{"func_args": {"scope": "'session'", "descr": "\"Fixture 'pytestconfig'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'capfd'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'capfdbinary'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'capsys'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'capsysbinary'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'tmp_path'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'session'", "descr": "\"Fixture 'tmp_path_factory'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'tmpdir'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'session'", "descr": "\"Fixture 'tmpdir_factory'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'monkeypatch'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'recwarn'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'record_property'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'session'", "descr": "\"Fixture 'record_testsuite_property'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'record_xml_attribute'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'session'", "descr": "\"Fixture 'doctest_namespace'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'cache'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'caplog'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "'parametrize() call in test_bool'", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'get_direct_param_fixture_func'\"", "where": "''"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'get_direct_param_fixture_func'\"", "where": "''"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "'parametrize() call in test_str_bool'", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'get_direct_param_fixture_func'\"", "where": "''"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'get_direct_param_fixture_func'\"", "where": "''"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "'parametrize() call in test_date'", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'get_direct_param_fixture_func'\"", "where": "''"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'invalid_ips_v4'\"", "where": "'tests/test_internet.py'"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'invalid_ips_v6'\"", "where": "'tests/test_internet.py'"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'valid_ips_v4'\"", "where": "'tests/test_internet.py'"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'valid_ips_v6'\"", "where": "'tests/test_internet.py'"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "'parametrize() call in test_to_decimal'", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'get_direct_param_fixture_func'\"", "where": "''"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'get_direct_param_fixture_func'\"", "where": "''"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "'parametrize() call in test_repr'", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'get_direct_param_fixture_func'\"", "where": "''"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'get_direct_param_fixture_func'\"", "where": "''"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "'parametrize() call in test_to_int'", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'get_direct_param_fixture_func'\"", "where": "''"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'get_direct_param_fixture_func'\"", "where": "''"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "'parametrize() call in test_error_code'", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'get_direct_param_fixture_func'\"", "where": "''"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'get_direct_param_fixture_func'\"", "where": "''"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "'parametrize() call in test_repr'", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'get_direct_param_fixture_func'\"", "where": "''"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'get_direct_param_fixture_func'\"", "where": "''"}, "return_value": "4"}], "text": "def scope2index(scope: str, descr: str, where: Optional[str] = None) -> int:\n    \"\"\"Look up the index of ``scope`` and raise a descriptive value error\n    if not defined.\"\"\"\n    strscopes: Sequence[str] = scopes\n    try:\n        return strscopes.index(scope)\n    except ValueError:\n        fail(\n            \"{} {}got an unexpected scope value '{}'\".format(\n                descr, f\"from {where} \" if where else \"\", scope\n            ),\n            pytrace=False,\n        )"}, "sort_by_scope": {"line": 1539, "args": [{"func_args": {"arg_name": "'check_value'"}, "return_value": "4"}, {"func_args": {"arg_name": "'result'"}, "return_value": "4"}, {"func_args": {"arg_name": "'value'"}, "return_value": "4"}, {"func_args": {"arg_name": "'expected_result'"}, "return_value": "4"}, {"func_args": {"arg_name": "'value'"}, "return_value": "4"}, {"func_args": {"arg_name": "'valid_ips_v4'"}, "return_value": "4"}, {"func_args": {"arg_name": "'invalid_ips_v4'"}, "return_value": "4"}, {"func_args": {"arg_name": "'valid_ips_v6'"}, "return_value": "4"}, {"func_args": {"arg_name": "'invalid_ips_v6'"}, "return_value": "4"}, {"func_args": {"arg_name": "'value'"}, "return_value": "4"}, {"func_args": {"arg_name": "'expected'"}, "return_value": "4"}, {"func_args": {"arg_name": "'value'"}, "return_value": "4"}, {"func_args": {"arg_name": "'expected'"}, "return_value": "4"}, {"func_args": {"arg_name": "'value'"}, "return_value": "4"}, {"func_args": {"arg_name": "'expected'"}, "return_value": "4"}, {"func_args": {"arg_name": "'value'"}, "return_value": "4"}, {"func_args": {"arg_name": "'expected'"}, "return_value": "4"}, {"func_args": {"arg_name": "'value'"}, "return_value": "4"}, {"func_args": {"arg_name": "'expected'"}, "return_value": "4"}], "text": "def sort_by_scope(arg_name: str) -> int:\n            try:\n                fixturedefs = arg2fixturedefs[arg_name]\n            except KeyError:\n                return scopes.index(\"function\")\n            else:\n                return fixturedefs[-1].scopenum"}, "scopemismatch": {"line": 799, "args": [{"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}], "text": "def scopemismatch(currentscope: \"_Scope\", newscope: \"_Scope\") -> bool:\n    return scopes.index(newscope) > scopes.index(currentscope)"}, "_find_parametrized_scope": {"line": 1250, "args": [{"func_args": {"argnames": "['check_value', 'result']", "arg2fixturedefs": "{}", "indirect": "False"}, "return_value": "'function'"}, {"func_args": {"argnames": "['value', 'expected_result']", "arg2fixturedefs": "{}", "indirect": "False"}, "return_value": "'function'"}, {"func_args": {"argnames": "['value']", "arg2fixturedefs": "{}", "indirect": "False"}, "return_value": "'function'"}, {"func_args": {"argnames": "['value', 'expected']", "arg2fixturedefs": "{}", "indirect": "False"}, "return_value": "'function'"}, {"func_args": {"argnames": "['value', 'expected']", "arg2fixturedefs": "{}", "indirect": "False"}, "return_value": "'function'"}, {"func_args": {"argnames": "['value', 'expected']", "arg2fixturedefs": "{}", "indirect": "False"}, "return_value": "'function'"}, {"func_args": {"argnames": "['value', 'expected']", "arg2fixturedefs": "{}", "indirect": "False"}, "return_value": "'function'"}, {"func_args": {"argnames": "['value', 'expected']", "arg2fixturedefs": "{}", "indirect": "False"}, "return_value": "'function'"}], "text": "def _find_parametrized_scope(\n    argnames: Sequence[str],\n    arg2fixturedefs: Mapping[str, Sequence[fixtures.FixtureDef[object]]],\n    indirect: Union[bool, Sequence[str]],\n) -> \"fixtures._Scope\":\n    \"\"\"Find the most appropriate scope for a parametrized call based on its arguments.\n\n    When there's at least one direct argument, always use \"function\" scope.\n\n    When a test function is parametrized and all its arguments are indirect\n    (e.g. fixtures), return the most narrow scope based on the fixtures used.\n\n    Related to issue #1832, based on code posted by @Kingdread.\n    \"\"\"\n    if isinstance(indirect, Sequence):\n        all_arguments_are_fixtures = len(indirect) == len(argnames)\n    else:\n        all_arguments_are_fixtures = bool(indirect)\n\n    if all_arguments_are_fixtures:\n        fixturedefs = arg2fixturedefs or {}\n        used_scopes = [\n            fixturedef[0].scope\n            for name, fixturedef in fixturedefs.items()\n            if name in argnames\n        ]\n        if used_scopes:\n            # Takes the most narrow scope from used fixtures.\n            for scope in reversed(fixtures.scopes):\n                if scope in used_scopes:\n                    return scope\n\n    return \"function\""}, "pluralize": {"line": 1350, "args": [{"func_args": {"count": "211", "noun": "'passed'"}, "return_value": "(211, 'passed')"}, {"func_args": {"count": "1", "noun": "'warnings'"}, "return_value": "(1, 'warning')"}], "text": "def pluralize(count: int, noun: str) -> Tuple[int, str]:\n    # No need to pluralize words such as `failed` or `passed`.\n    if noun not in [\"error\", \"warnings\", \"test\"]:\n        return count, noun\n\n    # The `warnings` key is plural. To avoid API breakage, we keep it that way but\n    # set it to singular here so we can determine plurality in the same way as we do\n    # for `error`.\n    noun = noun.replace(\"warnings\", \"warning\")\n\n    return count, noun + \"s\" if count != 1 else noun"}, "format_session_duration": {"line": 1377, "args": [{"func_args": {"seconds": "2.0793979167938232"}, "return_value": "'2.08s'"}], "text": "def format_session_duration(seconds: float) -> str:\n    \"\"\"Format the given seconds in a human readable manner to show in the final summary.\"\"\"\n    if seconds < 60:\n        return f\"{seconds:.2f}s\"\n    else:\n        dt = datetime.timedelta(seconds=int(seconds))\n        return f\"{seconds:.2f}s ({dt})\""}, "_get_auto_indent": {"line": 113, "args": [{"func_args": {"auto_indent_option": "None"}, "return_value": "0"}, {"func_args": {"auto_indent_option": "None"}, "return_value": "0"}]}, "_get_stderr_fileno": {"line": 68, "args": [{"func_args": {}, "return_value": "2"}, {"func_args": {}, "return_value": "2"}]}, "get_terminal_width": {"line": 15, "args": [{"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}], "text": "def get_terminal_width() -> int:\n    width, _ = shutil.get_terminal_size(fallback=(80, 24))\n\n    # The Windows get_terminal_size may be bogus, let's sanify a bit.\n    if width < 40:\n        width = 80\n\n    return width"}, "is_option": {"line": 135, "args": [{"func_args": {"x": "'tests'"}, "return_value": "False"}], "text": "def is_option(x: str) -> bool:\n        return x.startswith(\"-\")"}, "get_file_part_from_node_id": {"line": 138, "args": [{"func_args": {"x": "'tests'"}, "return_value": "'tests'"}], "text": "def get_file_part_from_node_id(x: str) -> str:\n        return x.split(\"::\")[0]"}, "parts": {"line": 420, "args": [{"func_args": {"s": "'/usr/app/src/test_repos/trafaret/tests/test_base.py'"}, "return_value": "{'/usr', '/usr/app/src/test_repos/trafaret/tests', '/usr/app', '/', '/usr/app/src/test_repos', '/usr/app/src/test_repos/trafaret/tests/test_base.py', '/usr/app/src/test_repos/trafaret', '/usr/app/src'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/trafaret/tests/test_constructor.py'"}, "return_value": "{'/usr', '/usr/app/src/test_repos/trafaret/tests', '/usr/app/src/test_repos/trafaret/tests/test_constructor.py', '/usr/app', '/', '/usr/app/src/test_repos', '/usr/app/src/test_repos/trafaret', '/usr/app/src'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/trafaret/tests/test_context.py'"}, "return_value": "{'/usr', '/usr/app/src/test_repos/trafaret/tests', '/usr/app/src/test_repos/trafaret/tests/test_context.py', '/usr/app', '/', '/usr/app/src/test_repos', '/usr/app/src/test_repos/trafaret', '/usr/app/src'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/trafaret/tests/test_contrib.py'"}, "return_value": "{'/usr', '/usr/app/src/test_repos/trafaret/tests', '/usr/app', '/', '/usr/app/src/test_repos', '/usr/app/src/test_repos/trafaret', '/usr/app/src/test_repos/trafaret/tests/test_contrib.py', '/usr/app/src'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/trafaret/tests/test_dataerror.py'"}, "return_value": "{'/usr', '/usr/app/src/test_repos/trafaret/tests', '/usr/app/src/test_repos/trafaret/tests/test_dataerror.py', '/usr/app', '/', '/usr/app/src/test_repos', '/usr/app/src/test_repos/trafaret', '/usr/app/src'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/trafaret/tests/test_internet.py'"}, "return_value": "{'/usr', '/usr/app/src/test_repos/trafaret/tests', '/usr/app', '/', '/usr/app/src/test_repos', '/usr/app/src/test_repos/trafaret', '/usr/app/src', '/usr/app/src/test_repos/trafaret/tests/test_internet.py'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/trafaret/tests/test_keys.py'"}, "return_value": "{'/usr', '/usr/app/src/test_repos/trafaret/tests', '/usr/app', '/', '/usr/app/src/test_repos', '/usr/app/src/test_repos/trafaret', '/usr/app/src/test_repos/trafaret/tests/test_keys.py', '/usr/app/src'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/trafaret/tests/test_lib.py'"}, "return_value": "{'/usr', '/usr/app/src/test_repos/trafaret/tests', '/usr/app', '/', '/usr/app/src/test_repos', '/usr/app/src/test_repos/trafaret', '/usr/app/src', '/usr/app/src/test_repos/trafaret/tests/test_lib.py'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/trafaret/tests/test_mongo.py'"}, "return_value": "{'/usr', '/usr/app/src/test_repos/trafaret/tests', '/usr/app', '/', '/usr/app/src/test_repos', '/usr/app/src/test_repos/trafaret/tests/test_mongo.py', '/usr/app/src/test_repos/trafaret', '/usr/app/src'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/trafaret/tests/test_numeric.py'"}, "return_value": "{'/usr', '/usr/app/src/test_repos/trafaret/tests', '/usr/app', '/', '/usr/app/src/test_repos', '/usr/app/src/test_repos/trafaret/tests/test_numeric.py', '/usr/app/src/test_repos/trafaret', '/usr/app/src'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/trafaret/tests/test_utils.py'"}, "return_value": "{'/usr', '/usr/app/src/test_repos/trafaret/tests', '/usr/app', '/', '/usr/app/src/test_repos', '/usr/app/src/test_repos/trafaret/tests/test_utils.py', '/usr/app/src/test_repos/trafaret', '/usr/app/src'}"}], "text": "def parts(s: str) -> Set[str]:\n    parts = s.split(sep)\n    return {sep.join(parts[: i + 1]) or sep for i in range(len(parts))}"}, "_is_same": {"line": 558, "args": [{"func_args": {"f1": "'/usr/app/src/test_repos/trafaret/tests/test_base.py'", "f2": "'/usr/app/src/test_repos/trafaret/tests/test_base.py'"}, "return_value": "True"}, {"func_args": {"f1": "'/usr/app/src/test_repos/trafaret/tests/test_constructor.py'", "f2": "'/usr/app/src/test_repos/trafaret/tests/test_constructor.py'"}, "return_value": "True"}, {"func_args": {"f1": "'/usr/app/src/test_repos/trafaret/tests/test_context.py'", "f2": "'/usr/app/src/test_repos/trafaret/tests/test_context.py'"}, "return_value": "True"}, {"func_args": {"f1": "'/usr/app/src/test_repos/trafaret/tests/test_contrib.py'", "f2": "'/usr/app/src/test_repos/trafaret/tests/test_contrib.py'"}, "return_value": "True"}, {"func_args": {"f1": "'/usr/app/src/test_repos/trafaret/tests/test_dataerror.py'", "f2": "'/usr/app/src/test_repos/trafaret/tests/test_dataerror.py'"}, "return_value": "True"}, {"func_args": {"f1": "'/usr/app/src/test_repos/trafaret/tests/test_internet.py'", "f2": "'/usr/app/src/test_repos/trafaret/tests/test_internet.py'"}, "return_value": "True"}, {"func_args": {"f1": "'/usr/app/src/test_repos/trafaret/tests/test_keys.py'", "f2": "'/usr/app/src/test_repos/trafaret/tests/test_keys.py'"}, "return_value": "True"}, {"func_args": {"f1": "'/usr/app/src/test_repos/trafaret/tests/test_lib.py'", "f2": "'/usr/app/src/test_repos/trafaret/tests/test_lib.py'"}, "return_value": "True"}, {"func_args": {"f1": "'/usr/app/src/test_repos/trafaret/tests/test_mongo.py'", "f2": "'/usr/app/src/test_repos/trafaret/tests/test_mongo.py'"}, "return_value": "True"}, {"func_args": {"f1": "'/usr/app/src/test_repos/trafaret/tests/test_numeric.py'", "f2": "'/usr/app/src/test_repos/trafaret/tests/test_numeric.py'"}, "return_value": "True"}, {"func_args": {"f1": "'/usr/app/src/test_repos/trafaret/tests/test_utils.py'", "f2": "'/usr/app/src/test_repos/trafaret/tests/test_utils.py'"}, "return_value": "True"}], "text": "def _is_same(f1: str, f2: str) -> bool:\n        return os.path.samefile(f1, f2)"}, "iscommentline": {"line": 162, "args": [{"func_args": {"line": "'[tox]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'envlist = py27,py35,py36,py37\\n'"}, "return_value": "False"}, {"func_args": {"line": "'whitelist_externals = {toxinidir}/utests.py\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}, {"func_args": {"line": "'[testenv]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'deps = \\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tpytest\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tunittest2\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tflake8\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tpylint\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tpymongo\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tpython-dateutil\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tviztracer \\n'"}, "return_value": "False"}, {"func_args": {"line": "'commands = \\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tpython -m viztracer --ignore_frozen --log_func_args --log_func_retval -o result0.json -- pytest {toxinidir}/tests\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}, {"func_args": {"line": "'[testenv:py36]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'deps = \\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tflake8\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tpylint\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tpymongo\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tpython-dateutil\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tpytest\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tpytest-cov\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tpytest-asyncio\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tviztracer \\n'"}, "return_value": "False"}, {"func_args": {"line": "'commands = \\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tpython -m viztracer --ignore_frozen --log_func_args --log_func_retval -o result1.json -- pytest  --cov=trafaret {toxinidir}/tests {toxinidir}/tests3k\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tflake8 trafaret\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}, {"func_args": {"line": "'[testenv:py37]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'deps = \\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tpyannotate\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tflake8\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tpylint\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tpymongo\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tpython-dateutil\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tpytest\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tpytest-cov\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tpytest-asyncio\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tviztracer \\n'"}, "return_value": "False"}, {"func_args": {"line": "'commands = \\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tpython -m viztracer --ignore_frozen --log_func_args --log_func_retval -o result2.json -- pytest  --cov=trafaret {toxinidir}/tests {toxinidir}/tests3k\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tflake8 trafaret\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}, {"func_args": {"line": "'[flake8]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'exclude = .tox,*.egg,build\\n'"}, "return_value": "False"}, {"func_args": {"line": "'max-line-length = 120\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}], "text": "def iscommentline(line):\n    c = line.lstrip()[:1]\n    return c in COMMENTCHARS"}, "iterparentnodeids": {"line": 44, "args": [{"func_args": {"nodeid": "'tests/test_base.py::test_with_repr'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::test_with_repr'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::test_with_repr'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::test_with_repr'"}, "return_value": "'tests/test_base.py::test_with_repr'"}, {"func_args": {"nodeid": "'tests/test_base.py::test_with_repr'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::test_ignore'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::test_ignore'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::test_ignore'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::test_ignore'"}, "return_value": "'tests/test_base.py::test_ignore'"}, {"func_args": {"nodeid": "'tests/test_base.py::test_ignore'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::test_deprecated'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::test_deprecated'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::test_deprecated'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::test_deprecated'"}, "return_value": "'tests/test_base.py::test_deprecated'"}, {"func_args": {"nodeid": "'tests/test_base.py::test_deprecated'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTrafaret::test_any'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTrafaret::test_any'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTrafaret::test_any'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTrafaret::test_any'"}, "return_value": "'tests/test_base.py::TestTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTrafaret::test_any'"}, "return_value": "'tests/test_base.py::TestTrafaret::test_any'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTrafaret::test_any'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTrafaret::test_ensure'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTrafaret::test_ensure'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTrafaret::test_ensure'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTrafaret::test_ensure'"}, "return_value": "'tests/test_base.py::TestTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTrafaret::test_ensure'"}, "return_value": "'tests/test_base.py::TestTrafaret::test_ensure'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTrafaret::test_ensure'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTrafaret::test_is_valid'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTrafaret::test_is_valid'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTrafaret::test_is_valid'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTrafaret::test_is_valid'"}, "return_value": "'tests/test_base.py::TestTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTrafaret::test_is_valid'"}, "return_value": "'tests/test_base.py::TestTrafaret::test_is_valid'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTrafaret::test_is_valid'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestAnyTrafaret::test_any'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestAnyTrafaret::test_any'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestAnyTrafaret::test_any'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestAnyTrafaret::test_any'"}, "return_value": "'tests/test_base.py::TestAnyTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestAnyTrafaret::test_any'"}, "return_value": "'tests/test_base.py::TestAnyTrafaret::test_any'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestAnyTrafaret::test_any'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestAnyTrafaret::test_repr'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestAnyTrafaret::test_repr'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestAnyTrafaret::test_repr'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestAnyTrafaret::test_repr'"}, "return_value": "'tests/test_base.py::TestAnyTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestAnyTrafaret::test_repr'"}, "return_value": "'tests/test_base.py::TestAnyTrafaret::test_repr'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestAnyTrafaret::test_repr'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestAtomTrafaret::test_atom'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestAtomTrafaret::test_atom'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestAtomTrafaret::test_atom'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestAtomTrafaret::test_atom'"}, "return_value": "'tests/test_base.py::TestAtomTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestAtomTrafaret::test_atom'"}, "return_value": "'tests/test_base.py::TestAtomTrafaret::test_atom'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestAtomTrafaret::test_atom'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestBoolTrafaret::test_bool'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestBoolTrafaret::test_bool'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestBoolTrafaret::test_bool'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestBoolTrafaret::test_bool'"}, "return_value": "'tests/test_base.py::TestBoolTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestBoolTrafaret::test_bool'"}, "return_value": "'tests/test_base.py::TestBoolTrafaret::test_bool'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestBoolTrafaret::test_bool'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestBoolTrafaret::test_extract_error'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestBoolTrafaret::test_extract_error'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestBoolTrafaret::test_extract_error'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestBoolTrafaret::test_extract_error'"}, "return_value": "'tests/test_base.py::TestBoolTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestBoolTrafaret::test_extract_error'"}, "return_value": "'tests/test_base.py::TestBoolTrafaret::test_extract_error'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestBoolTrafaret::test_extract_error'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestBoolTrafaret::test_repr'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestBoolTrafaret::test_repr'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestBoolTrafaret::test_repr'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestBoolTrafaret::test_repr'"}, "return_value": "'tests/test_base.py::TestBoolTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestBoolTrafaret::test_repr'"}, "return_value": "'tests/test_base.py::TestBoolTrafaret::test_repr'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestBoolTrafaret::test_repr'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestCallTrafaret::test_call'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestCallTrafaret::test_call'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestCallTrafaret::test_call'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestCallTrafaret::test_call'"}, "return_value": "'tests/test_base.py::TestCallTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestCallTrafaret::test_call'"}, "return_value": "'tests/test_base.py::TestCallTrafaret::test_call'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestCallTrafaret::test_call'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestCallTrafaret::test_repr'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestCallTrafaret::test_repr'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestCallTrafaret::test_repr'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestCallTrafaret::test_repr'"}, "return_value": "'tests/test_base.py::TestCallTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestCallTrafaret::test_repr'"}, "return_value": "'tests/test_base.py::TestCallTrafaret::test_repr'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestCallTrafaret::test_repr'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestCallTrafaret::test_should_be_callable'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestCallTrafaret::test_should_be_callable'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestCallTrafaret::test_should_be_callable'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestCallTrafaret::test_should_be_callable'"}, "return_value": "'tests/test_base.py::TestCallTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestCallTrafaret::test_should_be_callable'"}, "return_value": "'tests/test_base.py::TestCallTrafaret::test_should_be_callable'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestCallTrafaret::test_should_be_callable'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestCallableTrafaret::test_callable'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestCallableTrafaret::test_callable'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestCallableTrafaret::test_callable'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestCallableTrafaret::test_callable'"}, "return_value": "'tests/test_base.py::TestCallableTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestCallableTrafaret::test_callable'"}, "return_value": "'tests/test_base.py::TestCallableTrafaret::test_callable'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestCallableTrafaret::test_callable'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestCallableTrafaret::test_repr'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestCallableTrafaret::test_repr'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestCallableTrafaret::test_repr'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestCallableTrafaret::test_repr'"}, "return_value": "'tests/test_base.py::TestCallableTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestCallableTrafaret::test_repr'"}, "return_value": "'tests/test_base.py::TestCallableTrafaret::test_repr'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestCallableTrafaret::test_repr'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestBasics::test_callable'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestBasics::test_callable'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestBasics::test_callable'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestBasics::test_callable'"}, "return_value": "'tests/test_base.py::TestBasics'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestBasics::test_callable'"}, "return_value": "'tests/test_base.py::TestBasics::test_callable'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestBasics::test_callable'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestBasics::test_auto_call'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestBasics::test_auto_call'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestBasics::test_auto_call'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestBasics::test_auto_call'"}, "return_value": "'tests/test_base.py::TestBasics'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestBasics::test_auto_call'"}, "return_value": "'tests/test_base.py::TestBasics::test_auto_call'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestBasics::test_auto_call'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestBasics::test_class'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestBasics::test_class'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestBasics::test_class'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestBasics::test_class'"}, "return_value": "'tests/test_base.py::TestBasics'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestBasics::test_class'"}, "return_value": "'tests/test_base.py::TestBasics::test_class'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestBasics::test_class'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestBasics::test_upper'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestBasics::test_upper'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestBasics::test_upper'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestBasics::test_upper'"}, "return_value": "'tests/test_base.py::TestBasics'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestBasics::test_upper'"}, "return_value": "'tests/test_base.py::TestBasics::test_upper'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestBasics::test_upper'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_base'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_base'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_base'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_base'"}, "return_value": "'tests/test_base.py::TestDictTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_base'"}, "return_value": "'tests/test_base.py::TestDictTrafaret::test_base'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_base'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_repr'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_repr'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_repr'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_repr'"}, "return_value": "'tests/test_base.py::TestDictTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_repr'"}, "return_value": "'tests/test_base.py::TestDictTrafaret::test_repr'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_repr'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_key_shadowed'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_key_shadowed'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_key_shadowed'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_key_shadowed'"}, "return_value": "'tests/test_base.py::TestDictTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_key_shadowed'"}, "return_value": "'tests/test_base.py::TestDictTrafaret::test_key_shadowed'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_key_shadowed'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_kwargs_extra'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_kwargs_extra'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_kwargs_extra'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_kwargs_extra'"}, "return_value": "'tests/test_base.py::TestDictTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_kwargs_extra'"}, "return_value": "'tests/test_base.py::TestDictTrafaret::test_kwargs_extra'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_kwargs_extra'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_kwargs_ignore'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_kwargs_ignore'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_kwargs_ignore'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_kwargs_ignore'"}, "return_value": "'tests/test_base.py::TestDictTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_kwargs_ignore'"}, "return_value": "'tests/test_base.py::TestDictTrafaret::test_kwargs_ignore'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_kwargs_ignore'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_add_kwargs_ignore'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_add_kwargs_ignore'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_add_kwargs_ignore'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_add_kwargs_ignore'"}, "return_value": "'tests/test_base.py::TestDictTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_add_kwargs_ignore'"}, "return_value": "'tests/test_base.py::TestDictTrafaret::test_add_kwargs_ignore'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_add_kwargs_ignore'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_add_kwargs_ignore_any'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_add_kwargs_ignore_any'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_add_kwargs_ignore_any'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_add_kwargs_ignore_any'"}, "return_value": "'tests/test_base.py::TestDictTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_add_kwargs_ignore_any'"}, "return_value": "'tests/test_base.py::TestDictTrafaret::test_add_kwargs_ignore_any'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_add_kwargs_ignore_any'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_add_kwargs_extra'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_add_kwargs_extra'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_add_kwargs_extra'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_add_kwargs_extra'"}, "return_value": "'tests/test_base.py::TestDictTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_add_kwargs_extra'"}, "return_value": "'tests/test_base.py::TestDictTrafaret::test_add_kwargs_extra'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_add_kwargs_extra'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_callable_key'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_callable_key'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_callable_key'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_callable_key'"}, "return_value": "'tests/test_base.py::TestDictTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_callable_key'"}, "return_value": "'tests/test_base.py::TestDictTrafaret::test_callable_key'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_callable_key'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_base2'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_base2'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_base2'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_base2'"}, "return_value": "'tests/test_base.py::TestDictTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_base2'"}, "return_value": "'tests/test_base.py::TestDictTrafaret::test_base2'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_base2'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_base3'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_base3'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_base3'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_base3'"}, "return_value": "'tests/test_base.py::TestDictTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_base3'"}, "return_value": "'tests/test_base.py::TestDictTrafaret::test_base3'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_base3'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_add'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_add'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_add'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_add'"}, "return_value": "'tests/test_base.py::TestDictTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_add'"}, "return_value": "'tests/test_base.py::TestDictTrafaret::test_add'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_add'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_bad_add_names'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_bad_add_names'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_bad_add_names'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_bad_add_names'"}, "return_value": "'tests/test_base.py::TestDictTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_bad_add_names'"}, "return_value": "'tests/test_base.py::TestDictTrafaret::test_bad_add_names'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_bad_add_names'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_bad_add_to_names'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_bad_add_to_names'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_bad_add_to_names'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_bad_add_to_names'"}, "return_value": "'tests/test_base.py::TestDictTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_bad_add_to_names'"}, "return_value": "'tests/test_base.py::TestDictTrafaret::test_bad_add_to_names'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_bad_add_to_names'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_add_to_names_list_of_keys'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_add_to_names_list_of_keys'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_add_to_names_list_of_keys'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_add_to_names_list_of_keys'"}, "return_value": "'tests/test_base.py::TestDictTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_add_to_names_list_of_keys'"}, "return_value": "'tests/test_base.py::TestDictTrafaret::test_add_to_names_list_of_keys'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_add_to_names_list_of_keys'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_add_to_names_dict_of_keys'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_add_to_names_dict_of_keys'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_add_to_names_dict_of_keys'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_add_to_names_dict_of_keys'"}, "return_value": "'tests/test_base.py::TestDictTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_add_to_names_dict_of_keys'"}, "return_value": "'tests/test_base.py::TestDictTrafaret::test_add_to_names_dict_of_keys'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_add_to_names_dict_of_keys'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_bad_args_add'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_bad_args_add'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_bad_args_add'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_bad_args_add'"}, "return_value": "'tests/test_base.py::TestDictTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_bad_args_add'"}, "return_value": "'tests/test_base.py::TestDictTrafaret::test_bad_args_add'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_bad_args_add'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_mapping_interface'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_mapping_interface'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_mapping_interface'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_mapping_interface'"}, "return_value": "'tests/test_base.py::TestDictTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_mapping_interface'"}, "return_value": "'tests/test_base.py::TestDictTrafaret::test_mapping_interface'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_mapping_interface'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_keys_must_be_callable'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_keys_must_be_callable'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_keys_must_be_callable'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_keys_must_be_callable'"}, "return_value": "'tests/test_base.py::TestDictTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_keys_must_be_callable'"}, "return_value": "'tests/test_base.py::TestDictTrafaret::test_keys_must_be_callable'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_keys_must_be_callable'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_clone'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_clone'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_clone'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_clone'"}, "return_value": "'tests/test_base.py::TestDictTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_clone'"}, "return_value": "'tests/test_base.py::TestDictTrafaret::test_clone'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictTrafaret::test_clone'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictKeys::test_dict_keys'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictKeys::test_dict_keys'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictKeys::test_dict_keys'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictKeys::test_dict_keys'"}, "return_value": "'tests/test_base.py::TestDictKeys'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictKeys::test_dict_keys'"}, "return_value": "'tests/test_base.py::TestDictKeys::test_dict_keys'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDictKeys::test_dict_keys'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestEnumTrafaret::test_enum'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestEnumTrafaret::test_enum'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestEnumTrafaret::test_enum'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestEnumTrafaret::test_enum'"}, "return_value": "'tests/test_base.py::TestEnumTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestEnumTrafaret::test_enum'"}, "return_value": "'tests/test_base.py::TestEnumTrafaret::test_enum'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestEnumTrafaret::test_enum'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestEnumTrafaret::test_repr'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestEnumTrafaret::test_repr'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestEnumTrafaret::test_repr'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestEnumTrafaret::test_repr'"}, "return_value": "'tests/test_base.py::TestEnumTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestEnumTrafaret::test_repr'"}, "return_value": "'tests/test_base.py::TestEnumTrafaret::test_repr'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestEnumTrafaret::test_repr'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToFloat::test_float'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToFloat::test_float'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToFloat::test_float'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToFloat::test_float'"}, "return_value": "'tests/test_base.py::TestToFloat'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToFloat::test_float'"}, "return_value": "'tests/test_base.py::TestToFloat::test_float'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToFloat::test_float'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToFloat::test_float_repr'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToFloat::test_float_repr'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToFloat::test_float_repr'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToFloat::test_float_repr'"}, "return_value": "'tests/test_base.py::TestToFloat'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToFloat::test_float_repr'"}, "return_value": "'tests/test_base.py::TestToFloat::test_float_repr'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToFloat::test_float_repr'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToFloat::test_float_meta_repr'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToFloat::test_float_meta_repr'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToFloat::test_float_meta_repr'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToFloat::test_float_meta_repr'"}, "return_value": "'tests/test_base.py::TestToFloat'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToFloat::test_float_meta_repr'"}, "return_value": "'tests/test_base.py::TestToFloat::test_float_meta_repr'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToFloat::test_float_meta_repr'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestForwardTrafaret::test_forward'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestForwardTrafaret::test_forward'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestForwardTrafaret::test_forward'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestForwardTrafaret::test_forward'"}, "return_value": "'tests/test_base.py::TestForwardTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestForwardTrafaret::test_forward'"}, "return_value": "'tests/test_base.py::TestForwardTrafaret::test_forward'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestForwardTrafaret::test_forward'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestForwardTrafaret::test_repr'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestForwardTrafaret::test_repr'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestForwardTrafaret::test_repr'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestForwardTrafaret::test_repr'"}, "return_value": "'tests/test_base.py::TestForwardTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestForwardTrafaret::test_repr'"}, "return_value": "'tests/test_base.py::TestForwardTrafaret::test_repr'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestForwardTrafaret::test_repr'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToIntTrafaret::test_int'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToIntTrafaret::test_int'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToIntTrafaret::test_int'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToIntTrafaret::test_int'"}, "return_value": "'tests/test_base.py::TestToIntTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToIntTrafaret::test_int'"}, "return_value": "'tests/test_base.py::TestToIntTrafaret::test_int'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToIntTrafaret::test_int'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToIntTrafaret::test_repr'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToIntTrafaret::test_repr'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToIntTrafaret::test_repr'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToIntTrafaret::test_repr'"}, "return_value": "'tests/test_base.py::TestToIntTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToIntTrafaret::test_repr'"}, "return_value": "'tests/test_base.py::TestToIntTrafaret::test_repr'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToIntTrafaret::test_repr'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestList::test_list'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestList::test_list'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestList::test_list'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestList::test_list'"}, "return_value": "'tests/test_base.py::TestList'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestList::test_list'"}, "return_value": "'tests/test_base.py::TestList::test_list'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestList::test_list'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestList::test_list_meta'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestList::test_list_meta'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestList::test_list_meta'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestList::test_list_meta'"}, "return_value": "'tests/test_base.py::TestList'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestList::test_list_meta'"}, "return_value": "'tests/test_base.py::TestList::test_list_meta'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestList::test_list_meta'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestList::test_2_0_regression'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestList::test_2_0_regression'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestList::test_2_0_regression'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestList::test_2_0_regression'"}, "return_value": "'tests/test_base.py::TestList'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestList::test_2_0_regression'"}, "return_value": "'tests/test_base.py::TestList::test_2_0_regression'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestList::test_2_0_regression'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestList::test_list_repr'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestList::test_list_repr'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestList::test_list_repr'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestList::test_list_repr'"}, "return_value": "'tests/test_base.py::TestList'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestList::test_list_repr'"}, "return_value": "'tests/test_base.py::TestList::test_list_repr'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestList::test_list_repr'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestIterableTrafaret::test_iterable'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestIterableTrafaret::test_iterable'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestIterableTrafaret::test_iterable'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestIterableTrafaret::test_iterable'"}, "return_value": "'tests/test_base.py::TestIterableTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestIterableTrafaret::test_iterable'"}, "return_value": "'tests/test_base.py::TestIterableTrafaret::test_iterable'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestIterableTrafaret::test_iterable'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestIterableTrafaret::test_repr'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestIterableTrafaret::test_repr'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestIterableTrafaret::test_repr'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestIterableTrafaret::test_repr'"}, "return_value": "'tests/test_base.py::TestIterableTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestIterableTrafaret::test_repr'"}, "return_value": "'tests/test_base.py::TestIterableTrafaret::test_repr'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestIterableTrafaret::test_repr'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestMappingTrafaret::test_mapping'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestMappingTrafaret::test_mapping'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestMappingTrafaret::test_mapping'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestMappingTrafaret::test_mapping'"}, "return_value": "'tests/test_base.py::TestMappingTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestMappingTrafaret::test_mapping'"}, "return_value": "'tests/test_base.py::TestMappingTrafaret::test_mapping'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestMappingTrafaret::test_mapping'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestMappingTrafaret::test_repr'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestMappingTrafaret::test_repr'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestMappingTrafaret::test_repr'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestMappingTrafaret::test_repr'"}, "return_value": "'tests/test_base.py::TestMappingTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestMappingTrafaret::test_repr'"}, "return_value": "'tests/test_base.py::TestMappingTrafaret::test_repr'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestMappingTrafaret::test_repr'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestNullTrafaret::test_null'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestNullTrafaret::test_null'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestNullTrafaret::test_null'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestNullTrafaret::test_null'"}, "return_value": "'tests/test_base.py::TestNullTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestNullTrafaret::test_null'"}, "return_value": "'tests/test_base.py::TestNullTrafaret::test_null'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestNullTrafaret::test_null'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestNullTrafaret::test_repr'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestNullTrafaret::test_repr'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestNullTrafaret::test_repr'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestNullTrafaret::test_repr'"}, "return_value": "'tests/test_base.py::TestNullTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestNullTrafaret::test_repr'"}, "return_value": "'tests/test_base.py::TestNullTrafaret::test_repr'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestNullTrafaret::test_repr'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestOrNotToTest::test_or'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestOrNotToTest::test_or'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestOrNotToTest::test_or'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestOrNotToTest::test_or'"}, "return_value": "'tests/test_base.py::TestOrNotToTest'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestOrNotToTest::test_or'"}, "return_value": "'tests/test_base.py::TestOrNotToTest::test_or'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestOrNotToTest::test_or'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestOrNotToTest::test_operator'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestOrNotToTest::test_operator'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestOrNotToTest::test_operator'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestOrNotToTest::test_operator'"}, "return_value": "'tests/test_base.py::TestOrNotToTest'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestOrNotToTest::test_operator'"}, "return_value": "'tests/test_base.py::TestOrNotToTest::test_operator'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestOrNotToTest::test_operator'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestOrNotToTest::test_repr'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestOrNotToTest::test_repr'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestOrNotToTest::test_repr'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestOrNotToTest::test_repr'"}, "return_value": "'tests/test_base.py::TestOrNotToTest'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestOrNotToTest::test_repr'"}, "return_value": "'tests/test_base.py::TestOrNotToTest::test_repr'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestOrNotToTest::test_repr'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestAndTest::test_and'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestAndTest::test_and'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestAndTest::test_and'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestAndTest::test_and'"}, "return_value": "'tests/test_base.py::TestAndTest'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestAndTest::test_and'"}, "return_value": "'tests/test_base.py::TestAndTest::test_and'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestAndTest::test_and'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestAndTest::test_raise_error'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestAndTest::test_raise_error'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestAndTest::test_raise_error'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestAndTest::test_raise_error'"}, "return_value": "'tests/test_base.py::TestAndTest'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestAndTest::test_raise_error'"}, "return_value": "'tests/test_base.py::TestAndTest::test_raise_error'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestAndTest::test_raise_error'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestAndTest::test_repr'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestAndTest::test_repr'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestAndTest::test_repr'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestAndTest::test_repr'"}, "return_value": "'tests/test_base.py::TestAndTest'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestAndTest::test_repr'"}, "return_value": "'tests/test_base.py::TestAndTest::test_repr'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestAndTest::test_repr'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToBoolTrafaret::test_str_bool'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToBoolTrafaret::test_str_bool'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToBoolTrafaret::test_str_bool'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToBoolTrafaret::test_str_bool'"}, "return_value": "'tests/test_base.py::TestToBoolTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToBoolTrafaret::test_str_bool'"}, "return_value": "'tests/test_base.py::TestToBoolTrafaret::test_str_bool'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToBoolTrafaret::test_str_bool'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToBoolTrafaret::test_extract_error'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToBoolTrafaret::test_extract_error'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToBoolTrafaret::test_extract_error'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToBoolTrafaret::test_extract_error'"}, "return_value": "'tests/test_base.py::TestToBoolTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToBoolTrafaret::test_extract_error'"}, "return_value": "'tests/test_base.py::TestToBoolTrafaret::test_extract_error'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToBoolTrafaret::test_extract_error'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToBoolTrafaret::test_repr'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToBoolTrafaret::test_repr'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToBoolTrafaret::test_repr'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToBoolTrafaret::test_repr'"}, "return_value": "'tests/test_base.py::TestToBoolTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToBoolTrafaret::test_repr'"}, "return_value": "'tests/test_base.py::TestToBoolTrafaret::test_repr'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToBoolTrafaret::test_repr'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestStringTrafaret::test_string'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestStringTrafaret::test_string'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestStringTrafaret::test_string'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestStringTrafaret::test_string'"}, "return_value": "'tests/test_base.py::TestStringTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestStringTrafaret::test_string'"}, "return_value": "'tests/test_base.py::TestStringTrafaret::test_string'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestStringTrafaret::test_string'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestStringTrafaret::test_repr'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestStringTrafaret::test_repr'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestStringTrafaret::test_repr'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestStringTrafaret::test_repr'"}, "return_value": "'tests/test_base.py::TestStringTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestStringTrafaret::test_repr'"}, "return_value": "'tests/test_base.py::TestStringTrafaret::test_repr'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestStringTrafaret::test_repr'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDateTrafaret::test_date'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDateTrafaret::test_date'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDateTrafaret::test_date'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDateTrafaret::test_date'"}, "return_value": "'tests/test_base.py::TestDateTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDateTrafaret::test_date'"}, "return_value": "'tests/test_base.py::TestDateTrafaret::test_date'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDateTrafaret::test_date'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDateTrafaret::test_to_date'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDateTrafaret::test_to_date'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDateTrafaret::test_to_date'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDateTrafaret::test_to_date'"}, "return_value": "'tests/test_base.py::TestDateTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDateTrafaret::test_to_date'"}, "return_value": "'tests/test_base.py::TestDateTrafaret::test_to_date'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDateTrafaret::test_to_date'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDateTrafaret::test_repr'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDateTrafaret::test_repr'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDateTrafaret::test_repr'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDateTrafaret::test_repr'"}, "return_value": "'tests/test_base.py::TestDateTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDateTrafaret::test_repr'"}, "return_value": "'tests/test_base.py::TestDateTrafaret::test_repr'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDateTrafaret::test_repr'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDateTimeTrafaret::test_datetime'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDateTimeTrafaret::test_datetime'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDateTimeTrafaret::test_datetime'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDateTimeTrafaret::test_datetime'"}, "return_value": "'tests/test_base.py::TestDateTimeTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDateTimeTrafaret::test_datetime'"}, "return_value": "'tests/test_base.py::TestDateTimeTrafaret::test_datetime'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDateTimeTrafaret::test_datetime'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDateTimeTrafaret::test_to_datetime'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDateTimeTrafaret::test_to_datetime'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDateTimeTrafaret::test_to_datetime'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDateTimeTrafaret::test_to_datetime'"}, "return_value": "'tests/test_base.py::TestDateTimeTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDateTimeTrafaret::test_to_datetime'"}, "return_value": "'tests/test_base.py::TestDateTimeTrafaret::test_to_datetime'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDateTimeTrafaret::test_to_datetime'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDateTimeTrafaret::test_repr'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDateTimeTrafaret::test_repr'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDateTimeTrafaret::test_repr'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDateTimeTrafaret::test_repr'"}, "return_value": "'tests/test_base.py::TestDateTimeTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDateTimeTrafaret::test_repr'"}, "return_value": "'tests/test_base.py::TestDateTimeTrafaret::test_repr'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestDateTimeTrafaret::test_repr'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToBytesTrafaret::test_bytes'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToBytesTrafaret::test_bytes'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToBytesTrafaret::test_bytes'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToBytesTrafaret::test_bytes'"}, "return_value": "'tests/test_base.py::TestToBytesTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToBytesTrafaret::test_bytes'"}, "return_value": "'tests/test_base.py::TestToBytesTrafaret::test_bytes'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToBytesTrafaret::test_bytes'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToBytesTrafaret::test_repr'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToBytesTrafaret::test_repr'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToBytesTrafaret::test_repr'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToBytesTrafaret::test_repr'"}, "return_value": "'tests/test_base.py::TestToBytesTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToBytesTrafaret::test_repr'"}, "return_value": "'tests/test_base.py::TestToBytesTrafaret::test_repr'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestToBytesTrafaret::test_repr'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestFromBytesTrafaret::test_bytes'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestFromBytesTrafaret::test_bytes'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestFromBytesTrafaret::test_bytes'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestFromBytesTrafaret::test_bytes'"}, "return_value": "'tests/test_base.py::TestFromBytesTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestFromBytesTrafaret::test_bytes'"}, "return_value": "'tests/test_base.py::TestFromBytesTrafaret::test_bytes'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestFromBytesTrafaret::test_bytes'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestFromBytesTrafaret::test_repr'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestFromBytesTrafaret::test_repr'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestFromBytesTrafaret::test_repr'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestFromBytesTrafaret::test_repr'"}, "return_value": "'tests/test_base.py::TestFromBytesTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestFromBytesTrafaret::test_repr'"}, "return_value": "'tests/test_base.py::TestFromBytesTrafaret::test_repr'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestFromBytesTrafaret::test_repr'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestRegexpTrafaret::test_regexp'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestRegexpTrafaret::test_regexp'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestRegexpTrafaret::test_regexp'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestRegexpTrafaret::test_regexp'"}, "return_value": "'tests/test_base.py::TestRegexpTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestRegexpTrafaret::test_regexp'"}, "return_value": "'tests/test_base.py::TestRegexpTrafaret::test_regexp'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestRegexpTrafaret::test_regexp'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestRegexpTrafaret::test_regexp_raw'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestRegexpTrafaret::test_regexp_raw'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestRegexpTrafaret::test_regexp_raw'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestRegexpTrafaret::test_regexp_raw'"}, "return_value": "'tests/test_base.py::TestRegexpTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestRegexpTrafaret::test_regexp_raw'"}, "return_value": "'tests/test_base.py::TestRegexpTrafaret::test_regexp_raw'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestRegexpTrafaret::test_regexp_raw'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestRegexpTrafaret::test_regexp_raw_error'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestRegexpTrafaret::test_regexp_raw_error'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestRegexpTrafaret::test_regexp_raw_error'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestRegexpTrafaret::test_regexp_raw_error'"}, "return_value": "'tests/test_base.py::TestRegexpTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestRegexpTrafaret::test_regexp_raw_error'"}, "return_value": "'tests/test_base.py::TestRegexpTrafaret::test_regexp_raw_error'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestRegexpTrafaret::test_regexp_raw_error'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestRegexpTrafaret::test_repr'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestRegexpTrafaret::test_repr'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestRegexpTrafaret::test_repr'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestRegexpTrafaret::test_repr'"}, "return_value": "'tests/test_base.py::TestRegexpTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestRegexpTrafaret::test_repr'"}, "return_value": "'tests/test_base.py::TestRegexpTrafaret::test_repr'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestRegexpTrafaret::test_repr'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestRegexpString::test_regexpstring'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestRegexpString::test_regexpstring'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestRegexpString::test_regexpstring'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestRegexpString::test_regexpstring'"}, "return_value": "'tests/test_base.py::TestRegexpString'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestRegexpString::test_regexpstring'"}, "return_value": "'tests/test_base.py::TestRegexpString::test_regexpstring'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestRegexpString::test_regexpstring'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTrafaretMeta::test_meta'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTrafaretMeta::test_meta'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTrafaretMeta::test_meta'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTrafaretMeta::test_meta'"}, "return_value": "'tests/test_base.py::TestTrafaretMeta'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTrafaretMeta::test_meta'"}, "return_value": "'tests/test_base.py::TestTrafaretMeta::test_meta'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTrafaretMeta::test_meta'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTrafaretMeta::test_repr'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTrafaretMeta::test_repr'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTrafaretMeta::test_repr'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTrafaretMeta::test_repr'"}, "return_value": "'tests/test_base.py::TestTrafaretMeta'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTrafaretMeta::test_repr'"}, "return_value": "'tests/test_base.py::TestTrafaretMeta::test_repr'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTrafaretMeta::test_repr'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTupleTrafaret::test_tuple'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTupleTrafaret::test_tuple'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTupleTrafaret::test_tuple'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTupleTrafaret::test_tuple'"}, "return_value": "'tests/test_base.py::TestTupleTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTupleTrafaret::test_tuple'"}, "return_value": "'tests/test_base.py::TestTupleTrafaret::test_tuple'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTupleTrafaret::test_tuple'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTupleTrafaret::test_repr'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTupleTrafaret::test_repr'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTupleTrafaret::test_repr'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTupleTrafaret::test_repr'"}, "return_value": "'tests/test_base.py::TestTupleTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTupleTrafaret::test_repr'"}, "return_value": "'tests/test_base.py::TestTupleTrafaret::test_repr'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTupleTrafaret::test_repr'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTypeTrafaret::test_type'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTypeTrafaret::test_type'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTypeTrafaret::test_type'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTypeTrafaret::test_type'"}, "return_value": "'tests/test_base.py::TestTypeTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTypeTrafaret::test_type'"}, "return_value": "'tests/test_base.py::TestTypeTrafaret::test_type'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTypeTrafaret::test_type'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTypeTrafaret::test_repr'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTypeTrafaret::test_repr'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTypeTrafaret::test_repr'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTypeTrafaret::test_repr'"}, "return_value": "'tests/test_base.py::TestTypeTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTypeTrafaret::test_repr'"}, "return_value": "'tests/test_base.py::TestTypeTrafaret::test_repr'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestTypeTrafaret::test_repr'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestSubclassTrafaret::test_subclass'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestSubclassTrafaret::test_subclass'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestSubclassTrafaret::test_subclass'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestSubclassTrafaret::test_subclass'"}, "return_value": "'tests/test_base.py::TestSubclassTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestSubclassTrafaret::test_subclass'"}, "return_value": "'tests/test_base.py::TestSubclassTrafaret::test_subclass'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestSubclassTrafaret::test_subclass'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestSubclassTrafaret::test_repr'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestSubclassTrafaret::test_repr'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestSubclassTrafaret::test_repr'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestSubclassTrafaret::test_repr'"}, "return_value": "'tests/test_base.py::TestSubclassTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestSubclassTrafaret::test_repr'"}, "return_value": "'tests/test_base.py::TestSubclassTrafaret::test_repr'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestSubclassTrafaret::test_repr'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestOnErrorTrafaret::test_on_error'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestOnErrorTrafaret::test_on_error'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestOnErrorTrafaret::test_on_error'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestOnErrorTrafaret::test_on_error'"}, "return_value": "'tests/test_base.py::TestOnErrorTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestOnErrorTrafaret::test_on_error'"}, "return_value": "'tests/test_base.py::TestOnErrorTrafaret::test_on_error'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestOnErrorTrafaret::test_on_error'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestOnErrorTrafaret::test_on_error_ensured_trafaret'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestOnErrorTrafaret::test_on_error_ensured_trafaret'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestOnErrorTrafaret::test_on_error_ensured_trafaret'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestOnErrorTrafaret::test_on_error_ensured_trafaret'"}, "return_value": "'tests/test_base.py::TestOnErrorTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestOnErrorTrafaret::test_on_error_ensured_trafaret'"}, "return_value": "'tests/test_base.py::TestOnErrorTrafaret::test_on_error_ensured_trafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestOnErrorTrafaret::test_on_error_ensured_trafaret'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestOnErrorTrafaret::test_on_error_data_error'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestOnErrorTrafaret::test_on_error_data_error'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestOnErrorTrafaret::test_on_error_data_error'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestOnErrorTrafaret::test_on_error_data_error'"}, "return_value": "'tests/test_base.py::TestOnErrorTrafaret'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestOnErrorTrafaret::test_on_error_data_error'"}, "return_value": "'tests/test_base.py::TestOnErrorTrafaret::test_on_error_data_error'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestOnErrorTrafaret::test_on_error_data_error'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestGuard::test_keywords_only'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestGuard::test_keywords_only'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestGuard::test_keywords_only'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestGuard::test_keywords_only'"}, "return_value": "'tests/test_base.py::TestGuard'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestGuard::test_keywords_only'"}, "return_value": "'tests/test_base.py::TestGuard::test_keywords_only'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestGuard::test_keywords_only'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestGuard::test_class_method'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestGuard::test_class_method'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestGuard::test_class_method'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestGuard::test_class_method'"}, "return_value": "'tests/test_base.py::TestGuard'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestGuard::test_class_method'"}, "return_value": "'tests/test_base.py::TestGuard::test_class_method'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestGuard::test_class_method'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base.py::TestGuard::test_args_checks'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base.py::TestGuard::test_args_checks'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestGuard::test_args_checks'"}, "return_value": "'tests/test_base.py'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestGuard::test_args_checks'"}, "return_value": "'tests/test_base.py::TestGuard'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestGuard::test_args_checks'"}, "return_value": "'tests/test_base.py::TestGuard::test_args_checks'"}, {"func_args": {"nodeid": "'tests/test_base.py::TestGuard::test_args_checks'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestConstruct::test_int'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestConstruct::test_int'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestConstruct::test_int'"}, "return_value": "'tests/test_constructor.py'"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestConstruct::test_int'"}, "return_value": "'tests/test_constructor.py::TestConstruct'"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestConstruct::test_int'"}, "return_value": "'tests/test_constructor.py::TestConstruct::test_int'"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestConstruct::test_int'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestConstruct::test_str'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestConstruct::test_str'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestConstruct::test_str'"}, "return_value": "'tests/test_constructor.py'"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestConstruct::test_str'"}, "return_value": "'tests/test_constructor.py::TestConstruct'"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestConstruct::test_str'"}, "return_value": "'tests/test_constructor.py::TestConstruct::test_str'"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestConstruct::test_str'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestConstruct::test_unknown'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestConstruct::test_unknown'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestConstruct::test_unknown'"}, "return_value": "'tests/test_constructor.py'"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestConstruct::test_unknown'"}, "return_value": "'tests/test_constructor.py::TestConstruct'"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestConstruct::test_unknown'"}, "return_value": "'tests/test_constructor.py::TestConstruct::test_unknown'"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestConstruct::test_unknown'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestComplexConstruct::test_list'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestComplexConstruct::test_list'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestComplexConstruct::test_list'"}, "return_value": "'tests/test_constructor.py'"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestComplexConstruct::test_list'"}, "return_value": "'tests/test_constructor.py::TestComplexConstruct'"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestComplexConstruct::test_list'"}, "return_value": "'tests/test_constructor.py::TestComplexConstruct::test_list'"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestComplexConstruct::test_list'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestComplexConstruct::test_tuple'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestComplexConstruct::test_tuple'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestComplexConstruct::test_tuple'"}, "return_value": "'tests/test_constructor.py'"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestComplexConstruct::test_tuple'"}, "return_value": "'tests/test_constructor.py::TestComplexConstruct'"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestComplexConstruct::test_tuple'"}, "return_value": "'tests/test_constructor.py::TestComplexConstruct::test_tuple'"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestComplexConstruct::test_tuple'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestDictConstruct::test_dict'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestDictConstruct::test_dict'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestDictConstruct::test_dict'"}, "return_value": "'tests/test_constructor.py'"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestDictConstruct::test_dict'"}, "return_value": "'tests/test_constructor.py::TestDictConstruct'"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestDictConstruct::test_dict'"}, "return_value": "'tests/test_constructor.py::TestDictConstruct::test_dict'"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestDictConstruct::test_dict'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestDictConstruct::test_optional_key'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestDictConstruct::test_optional_key'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestDictConstruct::test_optional_key'"}, "return_value": "'tests/test_constructor.py'"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestDictConstruct::test_optional_key'"}, "return_value": "'tests/test_constructor.py::TestDictConstruct'"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestDictConstruct::test_optional_key'"}, "return_value": "'tests/test_constructor.py::TestDictConstruct::test_optional_key'"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestDictConstruct::test_optional_key'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestDictConstruct::test_c'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestDictConstruct::test_c'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestDictConstruct::test_c'"}, "return_value": "'tests/test_constructor.py'"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestDictConstruct::test_c'"}, "return_value": "'tests/test_constructor.py::TestDictConstruct'"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestDictConstruct::test_c'"}, "return_value": "'tests/test_constructor.py::TestDictConstruct::test_c'"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestDictConstruct::test_c'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestDictConstruct::test_bad_key'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestDictConstruct::test_bad_key'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestDictConstruct::test_bad_key'"}, "return_value": "'tests/test_constructor.py'"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestDictConstruct::test_bad_key'"}, "return_value": "'tests/test_constructor.py::TestDictConstruct'"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestDictConstruct::test_bad_key'"}, "return_value": "'tests/test_constructor.py::TestDictConstruct::test_bad_key'"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestDictConstruct::test_bad_key'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestCall::test_call'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestCall::test_call'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestCall::test_call'"}, "return_value": "'tests/test_constructor.py'"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestCall::test_call'"}, "return_value": "'tests/test_constructor.py::TestCall'"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestCall::test_call'"}, "return_value": "'tests/test_constructor.py::TestCall::test_call'"}, {"func_args": {"nodeid": "'tests/test_constructor.py::TestCall::test_call'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_context.py::TestContext::test_context'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_context.py::TestContext::test_context'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_context.py::TestContext::test_context'"}, "return_value": "'tests/test_context.py'"}, {"func_args": {"nodeid": "'tests/test_context.py::TestContext::test_context'"}, "return_value": "'tests/test_context.py::TestContext'"}, {"func_args": {"nodeid": "'tests/test_context.py::TestContext::test_context'"}, "return_value": "'tests/test_context.py::TestContext::test_context'"}, {"func_args": {"nodeid": "'tests/test_context.py::TestContext::test_context'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_context.py::TestContext::test_dict_context'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_context.py::TestContext::test_dict_context'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_context.py::TestContext::test_dict_context'"}, "return_value": "'tests/test_context.py'"}, {"func_args": {"nodeid": "'tests/test_context.py::TestContext::test_dict_context'"}, "return_value": "'tests/test_context.py::TestContext'"}, {"func_args": {"nodeid": "'tests/test_context.py::TestContext::test_dict_context'"}, "return_value": "'tests/test_context.py::TestContext::test_dict_context'"}, {"func_args": {"nodeid": "'tests/test_context.py::TestContext::test_dict_context'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_context.py::TestContext::test_list'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_context.py::TestContext::test_list'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_context.py::TestContext::test_list'"}, "return_value": "'tests/test_context.py'"}, {"func_args": {"nodeid": "'tests/test_context.py::TestContext::test_list'"}, "return_value": "'tests/test_context.py::TestContext'"}, {"func_args": {"nodeid": "'tests/test_context.py::TestContext::test_list'"}, "return_value": "'tests/test_context.py::TestContext::test_list'"}, {"func_args": {"nodeid": "'tests/test_context.py::TestContext::test_list'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_context.py::TestContext::test_tuple'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_context.py::TestContext::test_tuple'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_context.py::TestContext::test_tuple'"}, "return_value": "'tests/test_context.py'"}, {"func_args": {"nodeid": "'tests/test_context.py::TestContext::test_tuple'"}, "return_value": "'tests/test_context.py::TestContext'"}, {"func_args": {"nodeid": "'tests/test_context.py::TestContext::test_tuple'"}, "return_value": "'tests/test_context.py::TestContext::test_tuple'"}, {"func_args": {"nodeid": "'tests/test_context.py::TestContext::test_tuple'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_context.py::TestContext::test_mapping'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_context.py::TestContext::test_mapping'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_context.py::TestContext::test_mapping'"}, "return_value": "'tests/test_context.py'"}, {"func_args": {"nodeid": "'tests/test_context.py::TestContext::test_mapping'"}, "return_value": "'tests/test_context.py::TestContext'"}, {"func_args": {"nodeid": "'tests/test_context.py::TestContext::test_mapping'"}, "return_value": "'tests/test_context.py::TestContext::test_mapping'"}, {"func_args": {"nodeid": "'tests/test_context.py::TestContext::test_mapping'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_context.py::TestContext::test_forward'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_context.py::TestContext::test_forward'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_context.py::TestContext::test_forward'"}, "return_value": "'tests/test_context.py'"}, {"func_args": {"nodeid": "'tests/test_context.py::TestContext::test_forward'"}, "return_value": "'tests/test_context.py::TestContext'"}, {"func_args": {"nodeid": "'tests/test_context.py::TestContext::test_forward'"}, "return_value": "'tests/test_context.py::TestContext::test_forward'"}, {"func_args": {"nodeid": "'tests/test_context.py::TestContext::test_forward'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDateTime::test_datetime'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDateTime::test_datetime'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDateTime::test_datetime'"}, "return_value": "'tests/test_contrib.py'"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDateTime::test_datetime'"}, "return_value": "'tests/test_contrib.py::TestDateTime'"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDateTime::test_datetime'"}, "return_value": "'tests/test_contrib.py::TestDateTime::test_datetime'"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDateTime::test_datetime'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDateTime::test_datetime_blank'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDateTime::test_datetime_blank'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDateTime::test_datetime_blank'"}, "return_value": "'tests/test_contrib.py'"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDateTime::test_datetime_blank'"}, "return_value": "'tests/test_contrib.py::TestDateTime'"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDateTime::test_datetime_blank'"}, "return_value": "'tests/test_contrib.py::TestDateTime::test_datetime_blank'"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDateTime::test_datetime_blank'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDateTime::test_nullable_datetime'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDateTime::test_nullable_datetime'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDateTime::test_nullable_datetime'"}, "return_value": "'tests/test_contrib.py'"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDateTime::test_nullable_datetime'"}, "return_value": "'tests/test_contrib.py::TestDateTime'"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDateTime::test_nullable_datetime'"}, "return_value": "'tests/test_contrib.py::TestDateTime::test_nullable_datetime'"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDateTime::test_nullable_datetime'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDateTime::test_repr'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDateTime::test_repr'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDateTime::test_repr'"}, "return_value": "'tests/test_contrib.py'"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDateTime::test_repr'"}, "return_value": "'tests/test_contrib.py::TestDateTime'"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDateTime::test_repr'"}, "return_value": "'tests/test_contrib.py::TestDateTime::test_repr'"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDateTime::test_repr'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDate::test_date'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDate::test_date'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDate::test_date'"}, "return_value": "'tests/test_contrib.py'"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDate::test_date'"}, "return_value": "'tests/test_contrib.py::TestDate'"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDate::test_date'"}, "return_value": "'tests/test_contrib.py::TestDate::test_date'"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDate::test_date'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDate::test_date_blank'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDate::test_date_blank'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDate::test_date_blank'"}, "return_value": "'tests/test_contrib.py'"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDate::test_date_blank'"}, "return_value": "'tests/test_contrib.py::TestDate'"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDate::test_date_blank'"}, "return_value": "'tests/test_contrib.py::TestDate::test_date_blank'"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDate::test_date_blank'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDate::test_date_parse_failed'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDate::test_date_parse_failed'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDate::test_date_parse_failed'"}, "return_value": "'tests/test_contrib.py'"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDate::test_date_parse_failed'"}, "return_value": "'tests/test_contrib.py::TestDate'"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDate::test_date_parse_failed'"}, "return_value": "'tests/test_contrib.py::TestDate::test_date_parse_failed'"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDate::test_date_parse_failed'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDate::test_nullable_date'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDate::test_nullable_date'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDate::test_nullable_date'"}, "return_value": "'tests/test_contrib.py'"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDate::test_nullable_date'"}, "return_value": "'tests/test_contrib.py::TestDate'"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDate::test_nullable_date'"}, "return_value": "'tests/test_contrib.py::TestDate::test_nullable_date'"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDate::test_nullable_date'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDate::test_repr'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDate::test_repr'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDate::test_repr'"}, "return_value": "'tests/test_contrib.py'"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDate::test_repr'"}, "return_value": "'tests/test_contrib.py::TestDate'"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDate::test_repr'"}, "return_value": "'tests/test_contrib.py::TestDate::test_repr'"}, {"func_args": {"nodeid": "'tests/test_contrib.py::TestDate::test_repr'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_dataerror.py::test_dataerror_value'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_dataerror.py::test_dataerror_value'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_dataerror.py::test_dataerror_value'"}, "return_value": "'tests/test_dataerror.py'"}, {"func_args": {"nodeid": "'tests/test_dataerror.py::test_dataerror_value'"}, "return_value": "'tests/test_dataerror.py::test_dataerror_value'"}, {"func_args": {"nodeid": "'tests/test_dataerror.py::test_dataerror_value'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_dataerror.py::test_nested_dataerror_value'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_dataerror.py::test_nested_dataerror_value'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_dataerror.py::test_nested_dataerror_value'"}, "return_value": "'tests/test_dataerror.py'"}, {"func_args": {"nodeid": "'tests/test_dataerror.py::test_nested_dataerror_value'"}, "return_value": "'tests/test_dataerror.py::test_nested_dataerror_value'"}, {"func_args": {"nodeid": "'tests/test_dataerror.py::test_nested_dataerror_value'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_dataerror.py::test_dataerror_wrong_arg'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_dataerror.py::test_dataerror_wrong_arg'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_dataerror.py::test_dataerror_wrong_arg'"}, "return_value": "'tests/test_dataerror.py'"}, {"func_args": {"nodeid": "'tests/test_dataerror.py::test_dataerror_wrong_arg'"}, "return_value": "'tests/test_dataerror.py::test_dataerror_wrong_arg'"}, {"func_args": {"nodeid": "'tests/test_dataerror.py::test_dataerror_wrong_arg'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_dataerror.py::test_repr'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_dataerror.py::test_repr'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_dataerror.py::test_repr'"}, "return_value": "'tests/test_dataerror.py'"}, {"func_args": {"nodeid": "'tests/test_dataerror.py::test_repr'"}, "return_value": "'tests/test_dataerror.py::test_repr'"}, {"func_args": {"nodeid": "'tests/test_dataerror.py::test_repr'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_internet.py::test_ipv4'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_internet.py::test_ipv4'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_internet.py::test_ipv4'"}, "return_value": "'tests/test_internet.py'"}, {"func_args": {"nodeid": "'tests/test_internet.py::test_ipv4'"}, "return_value": "'tests/test_internet.py::test_ipv4'"}, {"func_args": {"nodeid": "'tests/test_internet.py::test_ipv4'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_internet.py::test_ipv4'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_internet.py::test_ipv4'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_internet.py::test_ipv4'"}, "return_value": "'tests/test_internet.py'"}, {"func_args": {"nodeid": "'tests/test_internet.py::test_ipv4'"}, "return_value": "'tests/test_internet.py::test_ipv4'"}, {"func_args": {"nodeid": "'tests/test_internet.py::test_ipv4'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_internet.py::test_ipv4'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_internet.py::test_ipv4'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_internet.py::test_ipv4'"}, "return_value": "'tests/test_internet.py'"}, {"func_args": {"nodeid": "'tests/test_internet.py::test_ipv4'"}, "return_value": "'tests/test_internet.py::test_ipv4'"}, {"func_args": {"nodeid": "'tests/test_internet.py::test_ipv4'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_internet.py::test_ipv6'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_internet.py::test_ipv6'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_internet.py::test_ipv6'"}, "return_value": "'tests/test_internet.py'"}, {"func_args": {"nodeid": "'tests/test_internet.py::test_ipv6'"}, "return_value": "'tests/test_internet.py::test_ipv6'"}, {"func_args": {"nodeid": "'tests/test_internet.py::test_ipv6'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_internet.py::test_ipv6'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_internet.py::test_ipv6'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_internet.py::test_ipv6'"}, "return_value": "'tests/test_internet.py'"}, {"func_args": {"nodeid": "'tests/test_internet.py::test_ipv6'"}, "return_value": "'tests/test_internet.py::test_ipv6'"}, {"func_args": {"nodeid": "'tests/test_internet.py::test_ipv6'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_internet.py::test_ipv6'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_internet.py::test_ipv6'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_internet.py::test_ipv6'"}, "return_value": "'tests/test_internet.py'"}, {"func_args": {"nodeid": "'tests/test_internet.py::test_ipv6'"}, "return_value": "'tests/test_internet.py::test_ipv6'"}, {"func_args": {"nodeid": "'tests/test_internet.py::test_ipv6'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_internet.py::TestURLTrafaret::test_url'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_internet.py::TestURLTrafaret::test_url'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_internet.py::TestURLTrafaret::test_url'"}, "return_value": "'tests/test_internet.py'"}, {"func_args": {"nodeid": "'tests/test_internet.py::TestURLTrafaret::test_url'"}, "return_value": "'tests/test_internet.py::TestURLTrafaret'"}, {"func_args": {"nodeid": "'tests/test_internet.py::TestURLTrafaret::test_url'"}, "return_value": "'tests/test_internet.py::TestURLTrafaret::test_url'"}, {"func_args": {"nodeid": "'tests/test_internet.py::TestURLTrafaret::test_url'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_internet.py::TestURLTrafaret::test_bad_str'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_internet.py::TestURLTrafaret::test_bad_str'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_internet.py::TestURLTrafaret::test_bad_str'"}, "return_value": "'tests/test_internet.py'"}, {"func_args": {"nodeid": "'tests/test_internet.py::TestURLTrafaret::test_bad_str'"}, "return_value": "'tests/test_internet.py::TestURLTrafaret'"}, {"func_args": {"nodeid": "'tests/test_internet.py::TestURLTrafaret::test_bad_str'"}, "return_value": "'tests/test_internet.py::TestURLTrafaret::test_bad_str'"}, {"func_args": {"nodeid": "'tests/test_internet.py::TestURLTrafaret::test_bad_str'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_internet.py::TestEmailTrafaret::test_email'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_internet.py::TestEmailTrafaret::test_email'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_internet.py::TestEmailTrafaret::test_email'"}, "return_value": "'tests/test_internet.py'"}, {"func_args": {"nodeid": "'tests/test_internet.py::TestEmailTrafaret::test_email'"}, "return_value": "'tests/test_internet.py::TestEmailTrafaret'"}, {"func_args": {"nodeid": "'tests/test_internet.py::TestEmailTrafaret::test_email'"}, "return_value": "'tests/test_internet.py::TestEmailTrafaret::test_email'"}, {"func_args": {"nodeid": "'tests/test_internet.py::TestEmailTrafaret::test_email'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_internet.py::TestEmailTrafaret::test_bad_str'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_internet.py::TestEmailTrafaret::test_bad_str'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_internet.py::TestEmailTrafaret::test_bad_str'"}, "return_value": "'tests/test_internet.py'"}, {"func_args": {"nodeid": "'tests/test_internet.py::TestEmailTrafaret::test_bad_str'"}, "return_value": "'tests/test_internet.py::TestEmailTrafaret'"}, {"func_args": {"nodeid": "'tests/test_internet.py::TestEmailTrafaret::test_bad_str'"}, "return_value": "'tests/test_internet.py::TestEmailTrafaret::test_bad_str'"}, {"func_args": {"nodeid": "'tests/test_internet.py::TestEmailTrafaret::test_bad_str'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_internet.py::TestHexTrafaret::test_hex'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_internet.py::TestHexTrafaret::test_hex'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_internet.py::TestHexTrafaret::test_hex'"}, "return_value": "'tests/test_internet.py'"}, {"func_args": {"nodeid": "'tests/test_internet.py::TestHexTrafaret::test_hex'"}, "return_value": "'tests/test_internet.py::TestHexTrafaret'"}, {"func_args": {"nodeid": "'tests/test_internet.py::TestHexTrafaret::test_hex'"}, "return_value": "'tests/test_internet.py::TestHexTrafaret::test_hex'"}, {"func_args": {"nodeid": "'tests/test_internet.py::TestHexTrafaret::test_hex'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_internet.py::TestHexTrafaret::test_repr'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_internet.py::TestHexTrafaret::test_repr'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_internet.py::TestHexTrafaret::test_repr'"}, "return_value": "'tests/test_internet.py'"}, {"func_args": {"nodeid": "'tests/test_internet.py::TestHexTrafaret::test_repr'"}, "return_value": "'tests/test_internet.py::TestHexTrafaret'"}, {"func_args": {"nodeid": "'tests/test_internet.py::TestHexTrafaret::test_repr'"}, "return_value": "'tests/test_internet.py::TestHexTrafaret::test_repr'"}, {"func_args": {"nodeid": "'tests/test_internet.py::TestHexTrafaret::test_repr'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_internet.py::TestURLSafeTrafaret::test_urlsafe'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_internet.py::TestURLSafeTrafaret::test_urlsafe'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_internet.py::TestURLSafeTrafaret::test_urlsafe'"}, "return_value": "'tests/test_internet.py'"}, {"func_args": {"nodeid": "'tests/test_internet.py::TestURLSafeTrafaret::test_urlsafe'"}, "return_value": "'tests/test_internet.py::TestURLSafeTrafaret'"}, {"func_args": {"nodeid": "'tests/test_internet.py::TestURLSafeTrafaret::test_urlsafe'"}, "return_value": "'tests/test_internet.py::TestURLSafeTrafaret::test_urlsafe'"}, {"func_args": {"nodeid": "'tests/test_internet.py::TestURLSafeTrafaret::test_urlsafe'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_internet.py::TestURLSafeTrafaret::test_repr'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_internet.py::TestURLSafeTrafaret::test_repr'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_internet.py::TestURLSafeTrafaret::test_repr'"}, "return_value": "'tests/test_internet.py'"}, {"func_args": {"nodeid": "'tests/test_internet.py::TestURLSafeTrafaret::test_repr'"}, "return_value": "'tests/test_internet.py::TestURLSafeTrafaret'"}, {"func_args": {"nodeid": "'tests/test_internet.py::TestURLSafeTrafaret::test_repr'"}, "return_value": "'tests/test_internet.py::TestURLSafeTrafaret::test_repr'"}, {"func_args": {"nodeid": "'tests/test_internet.py::TestURLSafeTrafaret::test_repr'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_keys.py::TestKey::test_key'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_keys.py::TestKey::test_key'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_keys.py::TestKey::test_key'"}, "return_value": "'tests/test_keys.py'"}, {"func_args": {"nodeid": "'tests/test_keys.py::TestKey::test_key'"}, "return_value": "'tests/test_keys.py::TestKey'"}, {"func_args": {"nodeid": "'tests/test_keys.py::TestKey::test_key'"}, "return_value": "'tests/test_keys.py::TestKey::test_key'"}, {"func_args": {"nodeid": "'tests/test_keys.py::TestKey::test_key'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_keys.py::TestKey::test_key_return_original_name_on_error'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_keys.py::TestKey::test_key_return_original_name_on_error'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_keys.py::TestKey::test_key_return_original_name_on_error'"}, "return_value": "'tests/test_keys.py'"}, {"func_args": {"nodeid": "'tests/test_keys.py::TestKey::test_key_return_original_name_on_error'"}, "return_value": "'tests/test_keys.py::TestKey'"}, {"func_args": {"nodeid": "'tests/test_keys.py::TestKey::test_key_return_original_name_on_error'"}, "return_value": "'tests/test_keys.py::TestKey::test_key_return_original_name_on_error'"}, {"func_args": {"nodeid": "'tests/test_keys.py::TestKey::test_key_return_original_name_on_error'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_keys.py::TestKey::test_repr'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_keys.py::TestKey::test_repr'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_keys.py::TestKey::test_repr'"}, "return_value": "'tests/test_keys.py'"}, {"func_args": {"nodeid": "'tests/test_keys.py::TestKey::test_repr'"}, "return_value": "'tests/test_keys.py::TestKey'"}, {"func_args": {"nodeid": "'tests/test_keys.py::TestKey::test_repr'"}, "return_value": "'tests/test_keys.py::TestKey::test_repr'"}, {"func_args": {"nodeid": "'tests/test_keys.py::TestKey::test_repr'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_keys.py::TestKeysSubset::test_keys_subset'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_keys.py::TestKeysSubset::test_keys_subset'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_keys.py::TestKeysSubset::test_keys_subset'"}, "return_value": "'tests/test_keys.py'"}, {"func_args": {"nodeid": "'tests/test_keys.py::TestKeysSubset::test_keys_subset'"}, "return_value": "'tests/test_keys.py::TestKeysSubset'"}, {"func_args": {"nodeid": "'tests/test_keys.py::TestKeysSubset::test_keys_subset'"}, "return_value": "'tests/test_keys.py::TestKeysSubset::test_keys_subset'"}, {"func_args": {"nodeid": "'tests/test_keys.py::TestKeysSubset::test_keys_subset'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_keys.py::TestSubdict::test_subdict_sample'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_keys.py::TestSubdict::test_subdict_sample'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_keys.py::TestSubdict::test_subdict_sample'"}, "return_value": "'tests/test_keys.py'"}, {"func_args": {"nodeid": "'tests/test_keys.py::TestSubdict::test_subdict_sample'"}, "return_value": "'tests/test_keys.py::TestSubdict'"}, {"func_args": {"nodeid": "'tests/test_keys.py::TestSubdict::test_subdict_sample'"}, "return_value": "'tests/test_keys.py::TestSubdict::test_subdict_sample'"}, {"func_args": {"nodeid": "'tests/test_keys.py::TestSubdict::test_subdict_sample'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_keys.py::TestXorKey::test_xor_key'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_keys.py::TestXorKey::test_xor_key'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_keys.py::TestXorKey::test_xor_key'"}, "return_value": "'tests/test_keys.py'"}, {"func_args": {"nodeid": "'tests/test_keys.py::TestXorKey::test_xor_key'"}, "return_value": "'tests/test_keys.py::TestXorKey'"}, {"func_args": {"nodeid": "'tests/test_keys.py::TestXorKey::test_xor_key'"}, "return_value": "'tests/test_keys.py::TestXorKey::test_xor_key'"}, {"func_args": {"nodeid": "'tests/test_keys.py::TestXorKey::test_xor_key'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_keys.py::TestConfirmKey::test_confirm_key'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_keys.py::TestConfirmKey::test_confirm_key'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_keys.py::TestConfirmKey::test_confirm_key'"}, "return_value": "'tests/test_keys.py'"}, {"func_args": {"nodeid": "'tests/test_keys.py::TestConfirmKey::test_confirm_key'"}, "return_value": "'tests/test_keys.py::TestConfirmKey'"}, {"func_args": {"nodeid": "'tests/test_keys.py::TestConfirmKey::test_confirm_key'"}, "return_value": "'tests/test_keys.py::TestConfirmKey::test_confirm_key'"}, {"func_args": {"nodeid": "'tests/test_keys.py::TestConfirmKey::test_confirm_key'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib.py::test_with_context_caller'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib.py::test_with_context_caller'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib.py::test_with_context_caller'"}, "return_value": "'tests/test_lib.py'"}, {"func_args": {"nodeid": "'tests/test_lib.py::test_with_context_caller'"}, "return_value": "'tests/test_lib.py::test_with_context_caller'"}, {"func_args": {"nodeid": "'tests/test_lib.py::test_with_context_caller'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib.py::test_get_callable_args'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib.py::test_get_callable_args'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib.py::test_get_callable_args'"}, "return_value": "'tests/test_lib.py'"}, {"func_args": {"nodeid": "'tests/test_lib.py::test_get_callable_args'"}, "return_value": "'tests/test_lib.py::test_get_callable_args'"}, {"func_args": {"nodeid": "'tests/test_lib.py::test_get_callable_args'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_mongo.py::TestMongoIdTrafaret::test_mongo_id'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_mongo.py::TestMongoIdTrafaret::test_mongo_id'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_mongo.py::TestMongoIdTrafaret::test_mongo_id'"}, "return_value": "'tests/test_mongo.py'"}, {"func_args": {"nodeid": "'tests/test_mongo.py::TestMongoIdTrafaret::test_mongo_id'"}, "return_value": "'tests/test_mongo.py::TestMongoIdTrafaret'"}, {"func_args": {"nodeid": "'tests/test_mongo.py::TestMongoIdTrafaret::test_mongo_id'"}, "return_value": "'tests/test_mongo.py::TestMongoIdTrafaret::test_mongo_id'"}, {"func_args": {"nodeid": "'tests/test_mongo.py::TestMongoIdTrafaret::test_mongo_id'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_mongo.py::TestMongoIdTrafaret::test_mongo_id_blank'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_mongo.py::TestMongoIdTrafaret::test_mongo_id_blank'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_mongo.py::TestMongoIdTrafaret::test_mongo_id_blank'"}, "return_value": "'tests/test_mongo.py'"}, {"func_args": {"nodeid": "'tests/test_mongo.py::TestMongoIdTrafaret::test_mongo_id_blank'"}, "return_value": "'tests/test_mongo.py::TestMongoIdTrafaret'"}, {"func_args": {"nodeid": "'tests/test_mongo.py::TestMongoIdTrafaret::test_mongo_id_blank'"}, "return_value": "'tests/test_mongo.py::TestMongoIdTrafaret::test_mongo_id_blank'"}, {"func_args": {"nodeid": "'tests/test_mongo.py::TestMongoIdTrafaret::test_mongo_id_blank'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_mongo.py::TestMongoIdTrafaret::test_bad_id'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_mongo.py::TestMongoIdTrafaret::test_bad_id'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_mongo.py::TestMongoIdTrafaret::test_bad_id'"}, "return_value": "'tests/test_mongo.py'"}, {"func_args": {"nodeid": "'tests/test_mongo.py::TestMongoIdTrafaret::test_bad_id'"}, "return_value": "'tests/test_mongo.py::TestMongoIdTrafaret'"}, {"func_args": {"nodeid": "'tests/test_mongo.py::TestMongoIdTrafaret::test_bad_id'"}, "return_value": "'tests/test_mongo.py::TestMongoIdTrafaret::test_bad_id'"}, {"func_args": {"nodeid": "'tests/test_mongo.py::TestMongoIdTrafaret::test_bad_id'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_numeric.py::test_num_meta_repr'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_numeric.py::test_num_meta_repr'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_numeric.py::test_num_meta_repr'"}, "return_value": "'tests/test_numeric.py'"}, {"func_args": {"nodeid": "'tests/test_numeric.py::test_num_meta_repr'"}, "return_value": "'tests/test_numeric.py::test_num_meta_repr'"}, {"func_args": {"nodeid": "'tests/test_numeric.py::test_num_meta_repr'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToDecimal::test_to_decimal'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToDecimal::test_to_decimal'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToDecimal::test_to_decimal'"}, "return_value": "'tests/test_numeric.py'"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToDecimal::test_to_decimal'"}, "return_value": "'tests/test_numeric.py::TestToDecimal'"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToDecimal::test_to_decimal'"}, "return_value": "'tests/test_numeric.py::TestToDecimal::test_to_decimal'"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToDecimal::test_to_decimal'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToDecimal::test_error_code'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToDecimal::test_error_code'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToDecimal::test_error_code'"}, "return_value": "'tests/test_numeric.py'"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToDecimal::test_error_code'"}, "return_value": "'tests/test_numeric.py::TestToDecimal'"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToDecimal::test_error_code'"}, "return_value": "'tests/test_numeric.py::TestToDecimal::test_error_code'"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToDecimal::test_error_code'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToDecimal::test_extract_error'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToDecimal::test_extract_error'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToDecimal::test_extract_error'"}, "return_value": "'tests/test_numeric.py'"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToDecimal::test_extract_error'"}, "return_value": "'tests/test_numeric.py::TestToDecimal'"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToDecimal::test_extract_error'"}, "return_value": "'tests/test_numeric.py::TestToDecimal::test_extract_error'"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToDecimal::test_extract_error'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToDecimal::test_none_to_decimal'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToDecimal::test_none_to_decimal'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToDecimal::test_none_to_decimal'"}, "return_value": "'tests/test_numeric.py'"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToDecimal::test_none_to_decimal'"}, "return_value": "'tests/test_numeric.py::TestToDecimal'"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToDecimal::test_none_to_decimal'"}, "return_value": "'tests/test_numeric.py::TestToDecimal::test_none_to_decimal'"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToDecimal::test_none_to_decimal'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToDecimal::test_repr'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToDecimal::test_repr'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToDecimal::test_repr'"}, "return_value": "'tests/test_numeric.py'"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToDecimal::test_repr'"}, "return_value": "'tests/test_numeric.py::TestToDecimal'"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToDecimal::test_repr'"}, "return_value": "'tests/test_numeric.py::TestToDecimal::test_repr'"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToDecimal::test_repr'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToInt::test_to_int'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToInt::test_to_int'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToInt::test_to_int'"}, "return_value": "'tests/test_numeric.py'"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToInt::test_to_int'"}, "return_value": "'tests/test_numeric.py::TestToInt'"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToInt::test_to_int'"}, "return_value": "'tests/test_numeric.py::TestToInt::test_to_int'"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToInt::test_to_int'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToInt::test_error_code'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToInt::test_error_code'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToInt::test_error_code'"}, "return_value": "'tests/test_numeric.py'"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToInt::test_error_code'"}, "return_value": "'tests/test_numeric.py::TestToInt'"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToInt::test_error_code'"}, "return_value": "'tests/test_numeric.py::TestToInt::test_error_code'"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToInt::test_error_code'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToInt::test_extract_error'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToInt::test_extract_error'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToInt::test_extract_error'"}, "return_value": "'tests/test_numeric.py'"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToInt::test_extract_error'"}, "return_value": "'tests/test_numeric.py::TestToInt'"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToInt::test_extract_error'"}, "return_value": "'tests/test_numeric.py::TestToInt::test_extract_error'"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToInt::test_extract_error'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToInt::test_repr'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToInt::test_repr'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToInt::test_repr'"}, "return_value": "'tests/test_numeric.py'"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToInt::test_repr'"}, "return_value": "'tests/test_numeric.py::TestToInt'"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToInt::test_repr'"}, "return_value": "'tests/test_numeric.py::TestToInt::test_repr'"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToInt::test_repr'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToInt::test_meta_res'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToInt::test_meta_res'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToInt::test_meta_res'"}, "return_value": "'tests/test_numeric.py'"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToInt::test_meta_res'"}, "return_value": "'tests/test_numeric.py::TestToInt'"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToInt::test_meta_res'"}, "return_value": "'tests/test_numeric.py::TestToInt::test_meta_res'"}, {"func_args": {"nodeid": "'tests/test_numeric.py::TestToInt::test_meta_res'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_utils.py::TestUtils::test_split'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_utils.py::TestUtils::test_split'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_utils.py::TestUtils::test_split'"}, "return_value": "'tests/test_utils.py'"}, {"func_args": {"nodeid": "'tests/test_utils.py::TestUtils::test_split'"}, "return_value": "'tests/test_utils.py::TestUtils'"}, {"func_args": {"nodeid": "'tests/test_utils.py::TestUtils::test_split'"}, "return_value": "'tests/test_utils.py::TestUtils::test_split'"}, {"func_args": {"nodeid": "'tests/test_utils.py::TestUtils::test_split'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_utils.py::TestUtils::test_fold'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_utils.py::TestUtils::test_fold'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_utils.py::TestUtils::test_fold'"}, "return_value": "'tests/test_utils.py'"}, {"func_args": {"nodeid": "'tests/test_utils.py::TestUtils::test_fold'"}, "return_value": "'tests/test_utils.py::TestUtils'"}, {"func_args": {"nodeid": "'tests/test_utils.py::TestUtils::test_fold'"}, "return_value": "'tests/test_utils.py::TestUtils::test_fold'"}, {"func_args": {"nodeid": "'tests/test_utils.py::TestUtils::test_fold'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_utils.py::TestUtils::test_fold_underscored'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_utils.py::TestUtils::test_fold_underscored'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_utils.py::TestUtils::test_fold_underscored'"}, "return_value": "'tests/test_utils.py'"}, {"func_args": {"nodeid": "'tests/test_utils.py::TestUtils::test_fold_underscored'"}, "return_value": "'tests/test_utils.py::TestUtils'"}, {"func_args": {"nodeid": "'tests/test_utils.py::TestUtils::test_fold_underscored'"}, "return_value": "'tests/test_utils.py::TestUtils::test_fold_underscored'"}, {"func_args": {"nodeid": "'tests/test_utils.py::TestUtils::test_fold_underscored'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_utils.py::TestUtils::test_unfold'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_utils.py::TestUtils::test_unfold'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_utils.py::TestUtils::test_unfold'"}, "return_value": "'tests/test_utils.py'"}, {"func_args": {"nodeid": "'tests/test_utils.py::TestUtils::test_unfold'"}, "return_value": "'tests/test_utils.py::TestUtils'"}, {"func_args": {"nodeid": "'tests/test_utils.py::TestUtils::test_unfold'"}, "return_value": "'tests/test_utils.py::TestUtils::test_unfold'"}, {"func_args": {"nodeid": "'tests/test_utils.py::TestUtils::test_unfold'"}, "return_value": "None"}], "text": "def iterparentnodeids(nodeid: str) -> Iterator[str]:\n    \"\"\"Return the parent node IDs of a given node ID, inclusive.\n\n    For the node ID\n\n        \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_source\"\n\n    the result would be\n\n        \"\"\n        \"testing\"\n        \"testing/code\"\n        \"testing/code/test_excinfo.py\"\n        \"testing/code/test_excinfo.py::TestFormattedExcinfo\"\n        \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_source\"\n\n    Note that :: parts are only considered at the last / component.\n    \"\"\"\n    pos = 0\n    sep = SEP\n    yield \"\"\n    while True:\n        at = nodeid.find(sep, pos)\n        if at == -1 and sep == SEP:\n            sep = \"::\"\n        elif at == -1:\n            if nodeid:\n                yield nodeid\n            break\n        else:\n            if at:\n                yield nodeid[:at]\n            pos = at + len(sep)"}, "_translate_non_printable": {"line": 204, "args": [{"func_args": {"s": "'t'"}, "return_value": "'t'"}, {"func_args": {"s": "'true'"}, "return_value": "'true'"}, {"func_args": {"s": "'y'"}, "return_value": "'y'"}, {"func_args": {"s": "'yes'"}, "return_value": "'yes'"}, {"func_args": {"s": "'On'"}, "return_value": "'On'"}, {"func_args": {"s": "'1'"}, "return_value": "'1'"}, {"func_args": {"s": "'false'"}, "return_value": "'false'"}, {"func_args": {"s": "'n'"}, "return_value": "'n'"}, {"func_args": {"s": "'no'"}, "return_value": "'no'"}, {"func_args": {"s": "'off'"}, "return_value": "'off'"}, {"func_args": {"s": "'0'"}, "return_value": "'0'"}, {"func_args": {"s": "'1954-07-29'"}, "return_value": "'1954-07-29'"}, {"func_args": {"s": "'29 July 1954'"}, "return_value": "'29 July 1954'"}, {"func_args": {"s": "'29.07.1954'"}, "return_value": "'29.07.1954'"}, {"func_args": {"s": "'29/07/1954'"}, "return_value": "'29/07/1954'"}, {"func_args": {"s": "'07/29/1954'"}, "return_value": "'07/29/1954'"}, {"func_args": {"s": "'1000'"}, "return_value": "'1000'"}, {"func_args": {"s": "'1000.0'"}, "return_value": "'1000.0'"}, {"func_args": {"s": "'-1000'"}, "return_value": "'-1000'"}, {"func_args": {"s": "'-1000.0'"}, "return_value": "'-1000.0'"}, {"func_args": {"s": "'<ToDecimal>'"}, "return_value": "'<ToDecimal>'"}, {"func_args": {"s": "'<ToDecimal(gte=1)>'"}, "return_value": "'<ToDecimal(gte=1)>'"}, {"func_args": {"s": "'<ToDecimal(gte=1, lte=20)>'"}, "return_value": "'<ToDecimal(gte=1, lte=20)>'"}, {"func_args": {"s": "'1'"}, "return_value": "'1'"}, {"func_args": {"s": "'-1'"}, "return_value": "'-1'"}, {"func_args": {"s": "'wrong_type'"}, "return_value": "'wrong_type'"}, {"func_args": {"s": "''"}, "return_value": "''"}, {"func_args": {"s": "'is_not_a_number'"}, "return_value": "'is_not_a_number'"}, {"func_args": {"s": "'1.0'"}, "return_value": "'1.0'"}, {"func_args": {"s": "'is_not_a_number'"}, "return_value": "'is_not_a_number'"}, {"func_args": {"s": "'<ToInt>'"}, "return_value": "'<ToInt>'"}, {"func_args": {"s": "'<ToInt(gte=1)>'"}, "return_value": "'<ToInt(gte=1)>'"}, {"func_args": {"s": "'<ToInt(gte=1, lte=10)>'"}, "return_value": "'<ToInt(gte=1, lte=10)>'"}, {"func_args": {"s": "'<ToInt(lte=10)>'"}, "return_value": "'<ToInt(lte=10)>'"}, {"func_args": {"s": "'<ToInt(gte=3)>'"}, "return_value": "'<ToInt(gte=3)>'"}], "text": "def _translate_non_printable(s: str) -> str:\n    return s.translate(_non_printable_ascii_translate_table)"}, "ascii_escaped": {"line": 215, "args": [{"func_args": {"val": "'t'"}, "return_value": "'t'"}, {"func_args": {"val": "'true'"}, "return_value": "'true'"}, {"func_args": {"val": "'y'"}, "return_value": "'y'"}, {"func_args": {"val": "'yes'"}, "return_value": "'yes'"}, {"func_args": {"val": "'On'"}, "return_value": "'On'"}, {"func_args": {"val": "'1'"}, "return_value": "'1'"}, {"func_args": {"val": "'false'"}, "return_value": "'false'"}, {"func_args": {"val": "'n'"}, "return_value": "'n'"}, {"func_args": {"val": "'no'"}, "return_value": "'no'"}, {"func_args": {"val": "'off'"}, "return_value": "'off'"}, {"func_args": {"val": "'0'"}, "return_value": "'0'"}, {"func_args": {"val": "'1954-07-29'"}, "return_value": "'1954-07-29'"}, {"func_args": {"val": "'29 July 1954'"}, "return_value": "'29 July 1954'"}, {"func_args": {"val": "'29.07.1954'"}, "return_value": "'29.07.1954'"}, {"func_args": {"val": "'29/07/1954'"}, "return_value": "'29/07/1954'"}, {"func_args": {"val": "'07/29/1954'"}, "return_value": "'07/29/1954'"}, {"func_args": {"val": "'1000'"}, "return_value": "'1000'"}, {"func_args": {"val": "'1000.0'"}, "return_value": "'1000.0'"}, {"func_args": {"val": "'-1000'"}, "return_value": "'-1000'"}, {"func_args": {"val": "'-1000.0'"}, "return_value": "'-1000.0'"}, {"func_args": {"val": "'<ToDecimal>'"}, "return_value": "'<ToDecimal>'"}, {"func_args": {"val": "'<ToDecimal(gte=1)>'"}, "return_value": "'<ToDecimal(gte=1)>'"}, {"func_args": {"val": "'<ToDecimal(gte=1, lte=20)>'"}, "return_value": "'<ToDecimal(gte=1, lte=20)>'"}, {"func_args": {"val": "'1'"}, "return_value": "'1'"}, {"func_args": {"val": "'-1'"}, "return_value": "'-1'"}, {"func_args": {"val": "'wrong_type'"}, "return_value": "'wrong_type'"}, {"func_args": {"val": "''"}, "return_value": "''"}, {"func_args": {"val": "'is_not_a_number'"}, "return_value": "'is_not_a_number'"}, {"func_args": {"val": "'1.0'"}, "return_value": "'1.0'"}, {"func_args": {"val": "'is_not_a_number'"}, "return_value": "'is_not_a_number'"}, {"func_args": {"val": "'<ToInt>'"}, "return_value": "'<ToInt>'"}, {"func_args": {"val": "'<ToInt(gte=1)>'"}, "return_value": "'<ToInt(gte=1)>'"}, {"func_args": {"val": "'<ToInt(gte=1, lte=10)>'"}, "return_value": "'<ToInt(gte=1, lte=10)>'"}, {"func_args": {"val": "'<ToInt(lte=10)>'"}, "return_value": "'<ToInt(lte=10)>'"}, {"func_args": {"val": "'<ToInt(gte=3)>'"}, "return_value": "'<ToInt(gte=3)>'"}], "text": "def ascii_escaped(val: Union[bytes, str]) -> str:\n    r\"\"\"If val is pure ASCII, return it as an str, otherwise, escape\n    bytes objects into a sequence of escaped bytes:\n\n    b'\\xc3\\xb4\\xc5\\xd6' -> r'\\xc3\\xb4\\xc5\\xd6'\n\n    and escapes unicode objects into a sequence of escaped unicode\n    ids, e.g.:\n\n    r'4\\nV\\U00043efa\\x0eMXWB\\x1e\\u3028\\u15fd\\xcd\\U0007d944'\n\n    Note:\n       The obvious \"v.decode('unicode-escape')\" will return\n       valid UTF-8 unicode if it finds them in bytes, but we\n       want to return escaped bytes for any byte, even if they match\n       a UTF-8 string.\n    \"\"\"\n    if isinstance(val, bytes):\n        ret = _bytes_to_ascii(val)\n    else:\n        ret = val.encode(\"unicode_escape\").decode(\"ascii\")\n    return _translate_non_printable(ret)"}, "wcswidth": {"line": 43, "args": [{"func_args": {"s": "''"}, "return_value": "0"}, {"func_args": {"s": "'tests/test_base.py .'"}, "return_value": "20"}, {"func_args": {"s": "'tests/test_base.py ..'"}, "return_value": "21"}, {"func_args": {"s": "'tests/test_base.py ...'"}, "return_value": "22"}, {"func_args": {"s": "'tests/test_base.py ....'"}, "return_value": "23"}, {"func_args": {"s": "'tests/test_base.py .....'"}, "return_value": "24"}, {"func_args": {"s": "'tests/test_base.py ......'"}, "return_value": "25"}, {"func_args": {"s": "'tests/test_base.py .......'"}, "return_value": "26"}, {"func_args": {"s": "'tests/test_base.py ........'"}, "return_value": "27"}, {"func_args": {"s": "'tests/test_base.py .........'"}, "return_value": "28"}, {"func_args": {"s": "'tests/test_base.py ..........'"}, "return_value": "29"}, {"func_args": {"s": "'tests/test_base.py ...........'"}, "return_value": "30"}, {"func_args": {"s": "'tests/test_base.py ............'"}, "return_value": "31"}, {"func_args": {"s": "'tests/test_base.py .............'"}, "return_value": "32"}, {"func_args": {"s": "'tests/test_base.py ..............'"}, "return_value": "33"}, {"func_args": {"s": "'tests/test_base.py ...............'"}, "return_value": "34"}, {"func_args": {"s": "'tests/test_base.py ................'"}, "return_value": "35"}, {"func_args": {"s": "'tests/test_base.py .................'"}, "return_value": "36"}, {"func_args": {"s": "'tests/test_base.py ..................'"}, "return_value": "37"}, {"func_args": {"s": "'tests/test_base.py ...................'"}, "return_value": "38"}, {"func_args": {"s": "'tests/test_base.py ....................'"}, "return_value": "39"}, {"func_args": {"s": "'tests/test_base.py .....................'"}, "return_value": "40"}, {"func_args": {"s": "'tests/test_base.py ......................'"}, "return_value": "41"}, {"func_args": {"s": "'tests/test_base.py .......................'"}, "return_value": "42"}, {"func_args": {"s": "'tests/test_base.py ........................'"}, "return_value": "43"}, {"func_args": {"s": "'tests/test_base.py .........................'"}, "return_value": "44"}, {"func_args": {"s": "'tests/test_base.py ..........................'"}, "return_value": "45"}, {"func_args": {"s": "'tests/test_base.py ...........................'"}, "return_value": "46"}, {"func_args": {"s": "'tests/test_base.py ............................'"}, "return_value": "47"}, {"func_args": {"s": "'tests/test_base.py .............................'"}, "return_value": "48"}, {"func_args": {"s": "'tests/test_base.py ..............................'"}, "return_value": "49"}, {"func_args": {"s": "'tests/test_base.py ...............................'"}, "return_value": "50"}, {"func_args": {"s": "'tests/test_base.py ................................'"}, "return_value": "51"}, {"func_args": {"s": "'tests/test_base.py .................................'"}, "return_value": "52"}, {"func_args": {"s": "'tests/test_base.py ..................................'"}, "return_value": "53"}, {"func_args": {"s": "'tests/test_base.py ...................................'"}, "return_value": "54"}, {"func_args": {"s": "'tests/test_base.py ....................................'"}, "return_value": "55"}, {"func_args": {"s": "'tests/test_base.py .....................................'"}, "return_value": "56"}, {"func_args": {"s": "'tests/test_base.py ......................................'"}, "return_value": "57"}, {"func_args": {"s": "'tests/test_base.py .......................................'"}, "return_value": "58"}, {"func_args": {"s": "'tests/test_base.py ........................................'"}, "return_value": "59"}, {"func_args": {"s": "'tests/test_base.py .........................................'"}, "return_value": "60"}, {"func_args": {"s": "'tests/test_base.py ..........................................'"}, "return_value": "61"}, {"func_args": {"s": "'tests/test_base.py ...........................................'"}, "return_value": "62"}, {"func_args": {"s": "'tests/test_base.py ............................................'"}, "return_value": "63"}, {"func_args": {"s": "'tests/test_base.py .............................................'"}, "return_value": "64"}, {"func_args": {"s": "'tests/test_base.py ..............................................'"}, "return_value": "65"}, {"func_args": {"s": "'tests/test_base.py ...............................................'"}, "return_value": "66"}, {"func_args": {"s": "'tests/test_base.py ................................................'"}, "return_value": "67"}, {"func_args": {"s": "'tests/test_base.py .................................................'"}, "return_value": "68"}, {"func_args": {"s": "'tests/test_base.py ..................................................'"}, "return_value": "69"}, {"func_args": {"s": "'tests/test_base.py ...................................................'"}, "return_value": "70"}, {"func_args": {"s": "'tests/test_base.py ....................................................'"}, "return_value": "71"}, {"func_args": {"s": "'tests/test_base.py .....................................................'"}, "return_value": "72"}, {"func_args": {"s": "'.'"}, "return_value": "1"}, {"func_args": {"s": "'..'"}, "return_value": "2"}, {"func_args": {"s": "'...'"}, "return_value": "3"}, {"func_args": {"s": "'....'"}, "return_value": "4"}, {"func_args": {"s": "'.....'"}, "return_value": "5"}, {"func_args": {"s": "'......'"}, "return_value": "6"}, {"func_args": {"s": "'.......'"}, "return_value": "7"}, {"func_args": {"s": "'........'"}, "return_value": "8"}, {"func_args": {"s": "'.........'"}, "return_value": "9"}, {"func_args": {"s": "'..........'"}, "return_value": "10"}, {"func_args": {"s": "'...........'"}, "return_value": "11"}, {"func_args": {"s": "'............'"}, "return_value": "12"}, {"func_args": {"s": "'.............'"}, "return_value": "13"}, {"func_args": {"s": "'..............'"}, "return_value": "14"}, {"func_args": {"s": "'...............'"}, "return_value": "15"}, {"func_args": {"s": "'................'"}, "return_value": "16"}, {"func_args": {"s": "'.................'"}, "return_value": "17"}, {"func_args": {"s": "'..................'"}, "return_value": "18"}, {"func_args": {"s": "'...................'"}, "return_value": "19"}, {"func_args": {"s": "'....................'"}, "return_value": "20"}, {"func_args": {"s": "'.....................'"}, "return_value": "21"}, {"func_args": {"s": "'......................'"}, "return_value": "22"}, {"func_args": {"s": "'.......................'"}, "return_value": "23"}, {"func_args": {"s": "'........................'"}, "return_value": "24"}, {"func_args": {"s": "'.........................'"}, "return_value": "25"}, {"func_args": {"s": "'..........................'"}, "return_value": "26"}, {"func_args": {"s": "'...........................'"}, "return_value": "27"}, {"func_args": {"s": "'............................'"}, "return_value": "28"}, {"func_args": {"s": "'.............................'"}, "return_value": "29"}, {"func_args": {"s": "'..............................'"}, "return_value": "30"}, {"func_args": {"s": "'...............................'"}, "return_value": "31"}, {"func_args": {"s": "'................................'"}, "return_value": "32"}, {"func_args": {"s": "'.................................'"}, "return_value": "33"}, {"func_args": {"s": "'..................................'"}, "return_value": "34"}, {"func_args": {"s": "'...................................'"}, "return_value": "35"}, {"func_args": {"s": "'....................................'"}, "return_value": "36"}, {"func_args": {"s": "'.....................................'"}, "return_value": "37"}, {"func_args": {"s": "'......................................'"}, "return_value": "38"}, {"func_args": {"s": "'.......................................'"}, "return_value": "39"}, {"func_args": {"s": "'........................................'"}, "return_value": "40"}, {"func_args": {"s": "'.........................................'"}, "return_value": "41"}, {"func_args": {"s": "'..........................................'"}, "return_value": "42"}, {"func_args": {"s": "'...........................................'"}, "return_value": "43"}, {"func_args": {"s": "'............................................'"}, "return_value": "44"}, {"func_args": {"s": "'.............................................'"}, "return_value": "45"}, {"func_args": {"s": "'..............................................'"}, "return_value": "46"}, {"func_args": {"s": "'...............................................'"}, "return_value": "47"}, {"func_args": {"s": "'................................................'"}, "return_value": "48"}, {"func_args": {"s": "'.................................................'"}, "return_value": "49"}, {"func_args": {"s": "'..................................................'"}, "return_value": "50"}, {"func_args": {"s": "'...................................................'"}, "return_value": "51"}, {"func_args": {"s": "'....................................................'"}, "return_value": "52"}, {"func_args": {"s": "'.....................................................'"}, "return_value": "53"}, {"func_args": {"s": "'......................................................'"}, "return_value": "54"}, {"func_args": {"s": "'.......................................................'"}, "return_value": "55"}, {"func_args": {"s": "'........................................................'"}, "return_value": "56"}, {"func_args": {"s": "'.........................................................'"}, "return_value": "57"}, {"func_args": {"s": "'..........................................................'"}, "return_value": "58"}, {"func_args": {"s": "'...........................................................'"}, "return_value": "59"}, {"func_args": {"s": "'............................................................'"}, "return_value": "60"}, {"func_args": {"s": "'.............................................................'"}, "return_value": "61"}, {"func_args": {"s": "'..............................................................'"}, "return_value": "62"}, {"func_args": {"s": "'...............................................................'"}, "return_value": "63"}, {"func_args": {"s": "'................................................................'"}, "return_value": "64"}, {"func_args": {"s": "'.................................................................'"}, "return_value": "65"}, {"func_args": {"s": "'.................................................................'"}, "return_value": "65"}, {"func_args": {"s": "'tests/test_constructor.py .'"}, "return_value": "27"}, {"func_args": {"s": "'tests/test_constructor.py ..'"}, "return_value": "28"}, {"func_args": {"s": "'tests/test_constructor.py ...'"}, "return_value": "29"}, {"func_args": {"s": "'tests/test_constructor.py ....'"}, "return_value": "30"}, {"func_args": {"s": "'tests/test_constructor.py .....'"}, "return_value": "31"}, {"func_args": {"s": "'tests/test_constructor.py ......'"}, "return_value": "32"}, {"func_args": {"s": "'tests/test_constructor.py .......'"}, "return_value": "33"}, {"func_args": {"s": "'tests/test_constructor.py ........'"}, "return_value": "34"}, {"func_args": {"s": "'tests/test_constructor.py .........'"}, "return_value": "35"}, {"func_args": {"s": "'tests/test_constructor.py ..........'"}, "return_value": "36"}, {"func_args": {"s": "'tests/test_constructor.py ..........'"}, "return_value": "36"}, {"func_args": {"s": "'tests/test_context.py .'"}, "return_value": "23"}, {"func_args": {"s": "'tests/test_context.py ..'"}, "return_value": "24"}, {"func_args": {"s": "'tests/test_context.py ...'"}, "return_value": "25"}, {"func_args": {"s": "'tests/test_context.py ....'"}, "return_value": "26"}, {"func_args": {"s": "'tests/test_context.py .....'"}, "return_value": "27"}, {"func_args": {"s": "'tests/test_context.py ......'"}, "return_value": "28"}, {"func_args": {"s": "'tests/test_context.py ......'"}, "return_value": "28"}, {"func_args": {"s": "'tests/test_contrib.py .'"}, "return_value": "23"}, {"func_args": {"s": "'tests/test_contrib.py ..'"}, "return_value": "24"}, {"func_args": {"s": "'tests/test_contrib.py ...'"}, "return_value": "25"}, {"func_args": {"s": "'tests/test_contrib.py ....'"}, "return_value": "26"}, {"func_args": {"s": "'tests/test_contrib.py .....'"}, "return_value": "27"}, {"func_args": {"s": "'tests/test_contrib.py ......'"}, "return_value": "28"}, {"func_args": {"s": "'tests/test_contrib.py .......'"}, "return_value": "29"}, {"func_args": {"s": "'tests/test_contrib.py ........'"}, "return_value": "30"}, {"func_args": {"s": "'tests/test_contrib.py .........'"}, "return_value": "31"}, {"func_args": {"s": "'tests/test_contrib.py ..........'"}, "return_value": "32"}, {"func_args": {"s": "'tests/test_contrib.py ...........'"}, "return_value": "33"}, {"func_args": {"s": "'tests/test_contrib.py ............'"}, "return_value": "34"}, {"func_args": {"s": "'tests/test_contrib.py .............'"}, "return_value": "35"}, {"func_args": {"s": "'tests/test_contrib.py ..............'"}, "return_value": "36"}, {"func_args": {"s": "'tests/test_contrib.py ...............'"}, "return_value": "37"}, {"func_args": {"s": "'tests/test_contrib.py ...............'"}, "return_value": "37"}, {"func_args": {"s": "'tests/test_dataerror.py .'"}, "return_value": "25"}, {"func_args": {"s": "'tests/test_dataerror.py ..'"}, "return_value": "26"}, {"func_args": {"s": "'tests/test_dataerror.py ...'"}, "return_value": "27"}, {"func_args": {"s": "'tests/test_dataerror.py ....'"}, "return_value": "28"}, {"func_args": {"s": "'tests/test_dataerror.py ....'"}, "return_value": "28"}, {"func_args": {"s": "'tests/test_internet.py .'"}, "return_value": "24"}, {"func_args": {"s": "'tests/test_internet.py ..'"}, "return_value": "25"}, {"func_args": {"s": "'tests/test_internet.py ...'"}, "return_value": "26"}, {"func_args": {"s": "'tests/test_internet.py ....'"}, "return_value": "27"}, {"func_args": {"s": "'tests/test_internet.py .....'"}, "return_value": "28"}, {"func_args": {"s": "'tests/test_internet.py ......'"}, "return_value": "29"}, {"func_args": {"s": "'tests/test_internet.py .......'"}, "return_value": "30"}, {"func_args": {"s": "'tests/test_internet.py ........'"}, "return_value": "31"}, {"func_args": {"s": "'tests/test_internet.py .........'"}, "return_value": "32"}, {"func_args": {"s": "'tests/test_internet.py ..........'"}, "return_value": "33"}, {"func_args": {"s": "'tests/test_internet.py ..........'"}, "return_value": "33"}, {"func_args": {"s": "'tests/test_keys.py .'"}, "return_value": "20"}, {"func_args": {"s": "'tests/test_keys.py ..'"}, "return_value": "21"}, {"func_args": {"s": "'tests/test_keys.py ...'"}, "return_value": "22"}, {"func_args": {"s": "'tests/test_keys.py ....'"}, "return_value": "23"}, {"func_args": {"s": "'tests/test_keys.py .....'"}, "return_value": "24"}, {"func_args": {"s": "'tests/test_keys.py ......'"}, "return_value": "25"}, {"func_args": {"s": "'tests/test_keys.py .......'"}, "return_value": "26"}, {"func_args": {"s": "'tests/test_keys.py .......'"}, "return_value": "26"}, {"func_args": {"s": "'tests/test_lib.py .'"}, "return_value": "19"}, {"func_args": {"s": "'tests/test_lib.py ..'"}, "return_value": "20"}, {"func_args": {"s": "'tests/test_lib.py ..'"}, "return_value": "20"}, {"func_args": {"s": "'tests/test_mongo.py .'"}, "return_value": "21"}, {"func_args": {"s": "'tests/test_mongo.py ..'"}, "return_value": "22"}, {"func_args": {"s": "'tests/test_mongo.py ...'"}, "return_value": "23"}, {"func_args": {"s": "'tests/test_mongo.py ...'"}, "return_value": "23"}, {"func_args": {"s": "'tests/test_numeric.py .'"}, "return_value": "23"}, {"func_args": {"s": "'tests/test_numeric.py ..'"}, "return_value": "24"}, {"func_args": {"s": "'tests/test_numeric.py ...'"}, "return_value": "25"}, {"func_args": {"s": "'tests/test_numeric.py ....'"}, "return_value": "26"}, {"func_args": {"s": "'tests/test_numeric.py .....'"}, "return_value": "27"}, {"func_args": {"s": "'tests/test_numeric.py ......'"}, "return_value": "28"}, {"func_args": {"s": "'tests/test_numeric.py .......'"}, "return_value": "29"}, {"func_args": {"s": "'tests/test_numeric.py ........'"}, "return_value": "30"}, {"func_args": {"s": "'tests/test_numeric.py .........'"}, "return_value": "31"}, {"func_args": {"s": "'tests/test_numeric.py ..........'"}, "return_value": "32"}, {"func_args": {"s": "'tests/test_numeric.py ...........'"}, "return_value": "33"}, {"func_args": {"s": "'tests/test_numeric.py ............'"}, "return_value": "34"}, {"func_args": {"s": "'tests/test_numeric.py .............'"}, "return_value": "35"}, {"func_args": {"s": "'tests/test_numeric.py ..............'"}, "return_value": "36"}, {"func_args": {"s": "'tests/test_numeric.py ...............'"}, "return_value": "37"}, {"func_args": {"s": "'tests/test_numeric.py ................'"}, "return_value": "38"}, {"func_args": {"s": "'tests/test_numeric.py .................'"}, "return_value": "39"}, {"func_args": {"s": "'tests/test_numeric.py ..................'"}, "return_value": "40"}, {"func_args": {"s": "'tests/test_numeric.py ...................'"}, "return_value": "41"}, {"func_args": {"s": "'tests/test_numeric.py ....................'"}, "return_value": "42"}, {"func_args": {"s": "'tests/test_numeric.py .....................'"}, "return_value": "43"}, {"func_args": {"s": "'tests/test_numeric.py ......................'"}, "return_value": "44"}, {"func_args": {"s": "'tests/test_numeric.py .......................'"}, "return_value": "45"}, {"func_args": {"s": "'tests/test_numeric.py ........................'"}, "return_value": "46"}, {"func_args": {"s": "'tests/test_numeric.py .........................'"}, "return_value": "47"}, {"func_args": {"s": "'tests/test_numeric.py ..........................'"}, "return_value": "48"}, {"func_args": {"s": "'tests/test_numeric.py ...........................'"}, "return_value": "49"}, {"func_args": {"s": "'tests/test_numeric.py ............................'"}, "return_value": "50"}, {"func_args": {"s": "'tests/test_numeric.py .............................'"}, "return_value": "51"}, {"func_args": {"s": "'tests/test_numeric.py ..............................'"}, "return_value": "52"}, {"func_args": {"s": "'tests/test_numeric.py ...............................'"}, "return_value": "53"}, {"func_args": {"s": "'tests/test_numeric.py ................................'"}, "return_value": "54"}, {"func_args": {"s": "'tests/test_numeric.py ................................'"}, "return_value": "54"}, {"func_args": {"s": "'tests/test_utils.py .'"}, "return_value": "21"}, {"func_args": {"s": "'tests/test_utils.py ..'"}, "return_value": "22"}, {"func_args": {"s": "'tests/test_utils.py ...'"}, "return_value": "23"}, {"func_args": {"s": "'tests/test_utils.py ....'"}, "return_value": "24"}], "text": "def wcswidth(s: str) -> int:\n    \"\"\"Determine how many columns are needed to display a string in a terminal.\n\n    Returns -1 if the string contains non-printable characters.\n    \"\"\"\n    width = 0\n    for c in unicodedata.normalize(\"NFC\", s):\n        wc = wcwidth(c)\n        if wc < 0:\n            return -1\n        width += wc\n    return width"}, "wcwidth": {"line": 4, "args": [{"func_args": {"c": "'t'"}, "return_value": "1"}, {"func_args": {"c": "'e'"}, "return_value": "1"}, {"func_args": {"c": "'s'"}, "return_value": "1"}, {"func_args": {"c": "'/'"}, "return_value": "1"}, {"func_args": {"c": "'_'"}, "return_value": "1"}, {"func_args": {"c": "'b'"}, "return_value": "1"}, {"func_args": {"c": "'a'"}, "return_value": "1"}, {"func_args": {"c": "'.'"}, "return_value": "1"}, {"func_args": {"c": "'p'"}, "return_value": "1"}, {"func_args": {"c": "'y'"}, "return_value": "1"}, {"func_args": {"c": "' '"}, "return_value": "1"}, {"func_args": {"c": "'c'"}, "return_value": "1"}, {"func_args": {"c": "'o'"}, "return_value": "1"}, {"func_args": {"c": "'n'"}, "return_value": "1"}, {"func_args": {"c": "'r'"}, "return_value": "1"}, {"func_args": {"c": "'u'"}, "return_value": "1"}, {"func_args": {"c": "'x'"}, "return_value": "1"}, {"func_args": {"c": "'i'"}, "return_value": "1"}, {"func_args": {"c": "'d'"}, "return_value": "1"}, {"func_args": {"c": "'k'"}, "return_value": "1"}, {"func_args": {"c": "'l'"}, "return_value": "1"}, {"func_args": {"c": "'m'"}, "return_value": "1"}, {"func_args": {"c": "'g'"}, "return_value": "1"}]}, "simple_key": {"line": 221, "args": [{"func_args": {"value": "{}"}, "return_value": "('simple', 'simple data', [])"}, {"func_args": {"value": "{}"}, "return_value": "None"}, {"func_args": {"value": "{'key': 'blabla'}"}, "return_value": "('simple', 'simple data', [])"}, {"func_args": {"value": "{'key': 'blabla'}"}, "return_value": "None"}], "text": "def simple_key(value):\n            yield 'simple', 'simple data', []"}, "check_context": {"line": 3, "args": [{"func_args": {"value": "123", "context": "123"}, "return_value": "123"}, {"func_args": {"value": "123", "context": "123"}, "return_value": "123"}, {"func_args": {"value": "123", "context": "123"}, "return_value": "123"}, {"func_args": {"value": "123", "context": "123"}, "return_value": "123"}, {"func_args": {"value": "123", "context": "123"}, "return_value": "123"}, {"func_args": {"value": "123", "context": "123"}, "return_value": "123"}, {"func_args": {"value": "123", "context": "123"}, "return_value": "123"}], "text": "def check_context(value, context=None):\n    if value != context:\n        return t.DataError('have not context there')\n    return value"}, "_get_supported_offset": {"line": 1817, "args": [{"func_args": {"second_offset": "-10800"}, "return_value": "-10800"}], "text": "def _get_supported_offset(second_offset):\n        return second_offset"}, "decode_url_idna": {"line": 79, "args": [{"func_args": {"value": "'http://\u043f\u0440\u0438\u043c\u0435\u0440.\u0440\u0444/resource/?param=value#anchor'"}, "return_value": "'http://xn--e1afmkfd.xn--p1ai/resource/?param=value#anchor'"}], "text": "def decode_url_idna(value):\n    scheme, netloc, path, query, fragment = urlparse.urlsplit(value)\n    netloc = netloc.encode('idna').decode('ascii')  # IDN -> ACE\n    return urlparse.urlunsplit((scheme, netloc, path, query, fragment))"}, "email_idna_encode": {"line": 30, "args": [{"func_args": {"value": "'someone@example'"}, "return_value": "'someone@example'"}, {"func_args": {"value": "'someone@\u043f\u0440\u0438\u043c\u0435\u0440.\u0440\u0444'"}, "return_value": "'someone@xn--e1afmkfd.xn--p1ai'"}, {"func_args": {"value": "'foo'"}, "return_value": "'foo'"}], "text": "def email_idna_encode(value):\n    if '@' in value:\n        parts = value.split('@')\n        parts[-1] = parts[-1].encode('idna').decode('ascii')\n        return '@'.join(parts)\n    return value"}, "valid_ips_v4": {"line": 6, "args": [{"func_args": {}, "return_value": "('127.0.0.1', '8.8.8.8', '192.168.1.1')"}]}, "invalid_ips_v4": {"line": 15, "args": [{"func_args": {}, "return_value": "('32.64.128.256', '2001:0db8:0000:0042:0000:8a2e:0370:7334', '192.168.1.1 ')"}]}, "valid_ips_v6": {"line": 24, "args": [{"func_args": {}, "return_value": "('2001:0db8:0000:0042:0000:8a2e:0370:7334', '2001:0Db8:0000:0042:0000:8A2e:0370:7334', '2001:cdba:0:0:0:0:3257:9652', '2001:cdba::3257:9652', 'fe80::', '::', '::1', '2001:db8::', 'ffaa::', '::ffff:255.255.255.0', '2001:db8:3:4::192.168.1.1', 'fe80::1:2%en0')"}]}, "invalid_ips_v6": {"line": 42, "args": [{"func_args": {}, "return_value": "('2001:0db8:z000:0042:0000:8a2e:0370:7334', '2001:cdba:0:0:::0:0:3257:9652', '2001:cdba::3257:::9652', '127.0.0.1', ':ffaa:')"}]}, "split": {"line": 51, "args": [{"func_args": {"str": "'leads'", "delimeters": "()"}, "return_value": "['leads']"}, {"func_args": {"str": "'leads'", "delimeters": "(']',)"}, "return_value": "['leads']"}, {"func_args": {"str": "'delete'", "delimeters": "()"}, "return_value": "['delete']"}, {"func_args": {"str": "''", "delimeters": "()"}, "return_value": "['']"}, {"func_args": {"str": "'delete]'", "delimeters": "(']',)"}, "return_value": "['delete']"}, {"func_args": {"str": "'0'", "delimeters": "()"}, "return_value": "['0']"}, {"func_args": {"str": "''", "delimeters": "()"}, "return_value": "['']"}, {"func_args": {"str": "'0]'", "delimeters": "(']',)"}, "return_value": "['0']"}, {"func_args": {"str": "'id'", "delimeters": "()"}, "return_value": "['id']"}, {"func_args": {"str": "''", "delimeters": "()"}, "return_value": "['']"}, {"func_args": {"str": "'id]'", "delimeters": "(']',)"}, "return_value": "['id']"}, {"func_args": {"str": "'leads[delete][0][id]'", "delimeters": "('[', ']')"}, "return_value": "['leads', 'delete', '0', 'id']"}, {"func_args": {"str": "'leads[delete][0][id]'", "delimeters": "('[]', '[', ']')"}, "return_value": "['leads', 'delete', '0', 'id']"}, {"func_args": {"str": "'account'", "delimeters": "()"}, "return_value": "['account']"}, {"func_args": {"str": "'account'", "delimeters": "(']',)"}, "return_value": "['account']"}, {"func_args": {"str": "'subdomain'", "delimeters": "()"}, "return_value": "['subdomain']"}, {"func_args": {"str": "''", "delimeters": "()"}, "return_value": "['']"}, {"func_args": {"str": "'subdomain]'", "delimeters": "(']',)"}, "return_value": "['subdomain']"}, {"func_args": {"str": "'account[subdomain]'", "delimeters": "('[', ']')"}, "return_value": "['account', 'subdomain']"}, {"func_args": {"str": "'leads'", "delimeters": "()"}, "return_value": "['leads']"}, {"func_args": {"str": "'leads'", "delimeters": "(']',)"}, "return_value": "['leads']"}, {"func_args": {"str": "'delete'", "delimeters": "()"}, "return_value": "['delete']"}, {"func_args": {"str": "''", "delimeters": "()"}, "return_value": "['']"}, {"func_args": {"str": "'delete]'", "delimeters": "(']',)"}, "return_value": "['delete']"}, {"func_args": {"str": "'0'", "delimeters": "()"}, "return_value": "['0']"}, {"func_args": {"str": "''", "delimeters": "()"}, "return_value": "['']"}, {"func_args": {"str": "'0]'", "delimeters": "(']',)"}, "return_value": "['0']"}, {"func_args": {"str": "'id'", "delimeters": "()"}, "return_value": "['id']"}, {"func_args": {"str": "''", "delimeters": "()"}, "return_value": "['']"}, {"func_args": {"str": "'id]'", "delimeters": "(']',)"}, "return_value": "['id']"}, {"func_args": {"str": "'leads[delete][0][id]'", "delimeters": "('[', ']')"}, "return_value": "['leads', 'delete', '0', 'id']"}, {"func_args": {"str": "'a'", "delimeters": "()"}, "return_value": "['a']"}, {"func_args": {"str": "'a'", "delimeters": "()"}, "return_value": "['a']"}, {"func_args": {"str": "'a__a'", "delimeters": "('__',)"}, "return_value": "['a', 'a']"}, {"func_args": {"str": "'a'", "delimeters": "()"}, "return_value": "['a']"}, {"func_args": {"str": "'a'", "delimeters": "()"}, "return_value": "['a']"}, {"func_args": {"str": "'a__a'", "delimeters": "('__',)"}, "return_value": "['a', 'a']"}, {"func_args": {"str": "'a'", "delimeters": "()"}, "return_value": "['a']"}, {"func_args": {"str": "'b'", "delimeters": "()"}, "return_value": "['b']"}, {"func_args": {"str": "'a__b'", "delimeters": "('__',)"}, "return_value": "['a', 'b']"}, {"func_args": {"str": "'a'", "delimeters": "()"}, "return_value": "['a']"}, {"func_args": {"str": "'0'", "delimeters": "()"}, "return_value": "['0']"}, {"func_args": {"str": "'a__0'", "delimeters": "('__',)"}, "return_value": "['a', '0']"}, {"func_args": {"str": "'a'", "delimeters": "()"}, "return_value": "['a']"}, {"func_args": {"str": "'1'", "delimeters": "()"}, "return_value": "['1']"}, {"func_args": {"str": "'a__1'", "delimeters": "('__',)"}, "return_value": "['a', '1']"}, {"func_args": {"str": "'a'", "delimeters": "()"}, "return_value": "['a']"}, {"func_args": {"str": "'2'", "delimeters": "()"}, "return_value": "['2']"}, {"func_args": {"str": "'a__2'", "delimeters": "('__',)"}, "return_value": "['a', '2']"}, {"func_args": {"str": "'form'", "delimeters": "()"}, "return_value": "['form']"}, {"func_args": {"str": "'a'", "delimeters": "()"}, "return_value": "['a']"}, {"func_args": {"str": "'a'", "delimeters": "()"}, "return_value": "['a']"}, {"func_args": {"str": "'form__a__a'", "delimeters": "('__',)"}, "return_value": "['form', 'a', 'a']"}, {"func_args": {"str": "'form'", "delimeters": "()"}, "return_value": "['form']"}, {"func_args": {"str": "'a'", "delimeters": "()"}, "return_value": "['a']"}, {"func_args": {"str": "'b'", "delimeters": "()"}, "return_value": "['b']"}, {"func_args": {"str": "'form__a__b'", "delimeters": "('__',)"}, "return_value": "['form', 'a', 'b']"}, {"func_args": {"str": "'form'", "delimeters": "()"}, "return_value": "['form']"}, {"func_args": {"str": "'a'", "delimeters": "()"}, "return_value": "['a']"}, {"func_args": {"str": "'a'", "delimeters": "()"}, "return_value": "['a']"}, {"func_args": {"str": "'0'", "delimeters": "()"}, "return_value": "['0']"}, {"func_args": {"str": "'form__a__a__0'", "delimeters": "('__',)"}, "return_value": "['form', 'a', 'a', '0']"}, {"func_args": {"str": "'form'", "delimeters": "()"}, "return_value": "['form']"}, {"func_args": {"str": "'a'", "delimeters": "()"}, "return_value": "['a']"}, {"func_args": {"str": "'a'", "delimeters": "()"}, "return_value": "['a']"}, {"func_args": {"str": "'1'", "delimeters": "()"}, "return_value": "['1']"}, {"func_args": {"str": "'form__a__a__1'", "delimeters": "('__',)"}, "return_value": "['form', 'a', 'a', '1']"}, {"func_args": {"str": "'form'", "delimeters": "()"}, "return_value": "['form']"}, {"func_args": {"str": "'a'", "delimeters": "()"}, "return_value": "['a']"}, {"func_args": {"str": "'b'", "delimeters": "()"}, "return_value": "['b']"}, {"func_args": {"str": "'form__a__b'", "delimeters": "('__',)"}, "return_value": "['form', 'a', 'b']"}, {"func_args": {"str": "'form'", "delimeters": "()"}, "return_value": "['form']"}, {"func_args": {"str": "'0'", "delimeters": "()"}, "return_value": "['0']"}, {"func_args": {"str": "'a'", "delimeters": "()"}, "return_value": "['a']"}, {"func_args": {"str": "'0'", "delimeters": "()"}, "return_value": "['0']"}, {"func_args": {"str": "'form__0__a__0'", "delimeters": "('__',)"}, "return_value": "['form', '0', 'a', '0']"}, {"func_args": {"str": "'form'", "delimeters": "()"}, "return_value": "['form']"}, {"func_args": {"str": "'0'", "delimeters": "()"}, "return_value": "['0']"}, {"func_args": {"str": "'a'", "delimeters": "()"}, "return_value": "['a']"}, {"func_args": {"str": "'1'", "delimeters": "()"}, "return_value": "['1']"}, {"func_args": {"str": "'form__0__a__1'", "delimeters": "('__',)"}, "return_value": "['form', '0', 'a', '1']"}, {"func_args": {"str": "'form'", "delimeters": "()"}, "return_value": "['form']"}, {"func_args": {"str": "'1'", "delimeters": "()"}, "return_value": "['1']"}, {"func_args": {"str": "'b'", "delimeters": "()"}, "return_value": "['b']"}, {"func_args": {"str": "'form__1__b'", "delimeters": "('__',)"}, "return_value": "['form', '1', 'b']"}], "text": "def split(str, delimeters):\n    if not delimeters:\n        return [str]\n    rest = delimeters[1:]\n    return [\n        subkey\n        for key in str.split(delimeters[0])\n        for subkey in split(key, rest)\n        if subkey\n    ]"}, "<lambda>": {"line": 88, "args": [{"func_args": {"kv": "(['account', 'subdomain'], 'murmurzet')"}, "return_value": "'account'"}, {"func_args": {"kv": "(['leads', 'delete', '0', 'id'], '42')"}, "return_value": "'leads'"}, {"func_args": {"kv": "(['delete', '0', 'id'], '42')"}, "return_value": "'delete'"}, {"func_args": {"kv": "(['0', 'id'], '42')"}, "return_value": "'0'"}, {"func_args": {"kv": "(['a', 'a'], 4)"}, "return_value": "'a'"}, {"func_args": {"kv": "(['a', 'a'], 4)"}, "return_value": "'a'"}, {"func_args": {"kv": "(['a', 'b'], 5)"}, "return_value": "'a'"}, {"func_args": {"kv": "(['a'], 4)"}, "return_value": "'a'"}, {"func_args": {"kv": "(['b'], 5)"}, "return_value": "'b'"}, {"func_args": {"kv": "(['a', '0'], 1)"}, "return_value": "'a'"}, {"func_args": {"kv": "(['a', '1'], 2)"}, "return_value": "'a'"}, {"func_args": {"kv": "(['a', '2'], 3)"}, "return_value": "'a'"}, {"func_args": {"kv": "(['0'], 1)"}, "return_value": "'0'"}, {"func_args": {"kv": "(['1'], 2)"}, "return_value": "'1'"}, {"func_args": {"kv": "(['2'], 3)"}, "return_value": "'2'"}, {"func_args": {"kv": "(['form', 'a', 'a'], 4)"}, "return_value": "'form'"}, {"func_args": {"kv": "(['form', 'a', 'b'], 5)"}, "return_value": "'form'"}, {"func_args": {"kv": "(['a', 'a'], 4)"}, "return_value": "'a'"}, {"func_args": {"kv": "(['a', 'b'], 5)"}, "return_value": "'a'"}, {"func_args": {"kv": "(['a'], 4)"}, "return_value": "'a'"}, {"func_args": {"kv": "(['b'], 5)"}, "return_value": "'b'"}, {"func_args": {"kv": "(['form', 'a', 'a', '0'], 4)"}, "return_value": "'form'"}, {"func_args": {"kv": "(['form', 'a', 'a', '1'], 7)"}, "return_value": "'form'"}, {"func_args": {"kv": "(['form', 'a', 'b'], 5)"}, "return_value": "'form'"}, {"func_args": {"kv": "(['a', 'a', '0'], 4)"}, "return_value": "'a'"}, {"func_args": {"kv": "(['a', 'a', '1'], 7)"}, "return_value": "'a'"}, {"func_args": {"kv": "(['a', 'b'], 5)"}, "return_value": "'a'"}, {"func_args": {"kv": "(['a', '0'], 4)"}, "return_value": "'a'"}, {"func_args": {"kv": "(['a', '1'], 7)"}, "return_value": "'a'"}, {"func_args": {"kv": "(['b'], 5)"}, "return_value": "'b'"}, {"func_args": {"kv": "(['0'], 4)"}, "return_value": "'0'"}, {"func_args": {"kv": "(['1'], 7)"}, "return_value": "'1'"}, {"func_args": {"kv": "(['form', '0', 'a', '0'], 4)"}, "return_value": "'form'"}, {"func_args": {"kv": "(['form', '0', 'a', '1'], 7)"}, "return_value": "'form'"}, {"func_args": {"kv": "(['form', '1', 'b'], 5)"}, "return_value": "'form'"}, {"func_args": {"kv": "(['0', 'a', '0'], 4)"}, "return_value": "'0'"}, {"func_args": {"kv": "(['0', 'a', '1'], 7)"}, "return_value": "'0'"}, {"func_args": {"kv": "(['1', 'b'], 5)"}, "return_value": "'1'"}, {"func_args": {"kv": "(['a', '0'], 4)"}, "return_value": "'a'"}, {"func_args": {"kv": "(['a', '1'], 7)"}, "return_value": "'a'"}, {"func_args": {"kv": "(['0'], 4)"}, "return_value": "'0'"}, {"func_args": {"kv": "(['1'], 7)"}, "return_value": "'1'"}]}, "deep": {"line": 81, "args": [{"func_args": {"data": "[(['subdomain'], 'murmurzet')]"}, "return_value": "{'subdomain': 'murmurzet'}"}, {"func_args": {"data": "[(['id'], '42')]"}, "return_value": "{'id': '42'}"}, {"func_args": {"data": "[(['0', 'id'], '42')]"}, "return_value": "[{'id': '42'}]"}, {"func_args": {"data": "[(['delete', '0', 'id'], '42')]"}, "return_value": "{'delete': [{'id': '42'}]}"}, {"func_args": {"data": "[(['account', 'subdomain'], 'murmurzet'), (['leads', 'delete', '0', 'id'], '42')]"}, "return_value": "{'account': {'subdomain': 'murmurzet'}, 'leads': {'delete': [{'id': '42'}]}}"}, {"func_args": {"data": "[(['a'], 4)]"}, "return_value": "{'a': 4}"}, {"func_args": {"data": "[(['a', 'a'], 4)]"}, "return_value": "{'a': {'a': 4}}"}, {"func_args": {"data": "[([], 4)]"}, "return_value": "4"}, {"func_args": {"data": "[([], 5)]"}, "return_value": "5"}, {"func_args": {"data": "[(['a'], 4), (['b'], 5)]"}, "return_value": "{'a': 4, 'b': 5}"}, {"func_args": {"data": "[(['a', 'a'], 4), (['a', 'b'], 5)]"}, "return_value": "{'a': {'a': 4, 'b': 5}}"}, {"func_args": {"data": "[([], 1)]"}, "return_value": "1"}, {"func_args": {"data": "[([], 2)]"}, "return_value": "2"}, {"func_args": {"data": "[([], 3)]"}, "return_value": "3"}, {"func_args": {"data": "[(['0'], 1), (['1'], 2), (['2'], 3)]"}, "return_value": "[1, 2, 3]"}, {"func_args": {"data": "[(['a', '0'], 1), (['a', '1'], 2), (['a', '2'], 3)]"}, "return_value": "{'a': [1, 2, 3]}"}, {"func_args": {"data": "[([], 4)]"}, "return_value": "4"}, {"func_args": {"data": "[([], 5)]"}, "return_value": "5"}, {"func_args": {"data": "[(['a'], 4), (['b'], 5)]"}, "return_value": "{'a': 4, 'b': 5}"}, {"func_args": {"data": "[(['a', 'a'], 4), (['a', 'b'], 5)]"}, "return_value": "{'a': {'a': 4, 'b': 5}}"}, {"func_args": {"data": "[(['form', 'a', 'a'], 4), (['form', 'a', 'b'], 5)]"}, "return_value": "{'form': {'a': {'a': 4, 'b': 5}}}"}, {"func_args": {"data": "[([], 4)]"}, "return_value": "4"}, {"func_args": {"data": "[([], 7)]"}, "return_value": "7"}, {"func_args": {"data": "[(['0'], 4), (['1'], 7)]"}, "return_value": "[4, 7]"}, {"func_args": {"data": "[([], 5)]"}, "return_value": "5"}, {"func_args": {"data": "[(['a', '0'], 4), (['a', '1'], 7), (['b'], 5)]"}, "return_value": "{'a': [4, 7], 'b': 5}"}, {"func_args": {"data": "[(['a', 'a', '0'], 4), (['a', 'a', '1'], 7), (['a', 'b'], 5)]"}, "return_value": "{'a': {'a': [4, 7], 'b': 5}}"}, {"func_args": {"data": "[(['form', 'a', 'a', '0'], 4), (['form', 'a', 'a', '1'], 7), (['form', 'a', 'b'], 5)]"}, "return_value": "{'form': {'a': {'a': [4, 7], 'b': 5}}}"}, {"func_args": {"data": "[([], 4)]"}, "return_value": "4"}, {"func_args": {"data": "[([], 7)]"}, "return_value": "7"}, {"func_args": {"data": "[(['0'], 4), (['1'], 7)]"}, "return_value": "[4, 7]"}, {"func_args": {"data": "[(['a', '0'], 4), (['a', '1'], 7)]"}, "return_value": "{'a': [4, 7]}"}, {"func_args": {"data": "[(['b'], 5)]"}, "return_value": "{'b': 5}"}, {"func_args": {"data": "[(['0', 'a', '0'], 4), (['0', 'a', '1'], 7), (['1', 'b'], 5)]"}, "return_value": "[{'a': [4, 7]}, {'b': 5}]"}, {"func_args": {"data": "[(['form', '0', 'a', '0'], 4), (['form', '0', 'a', '1'], 7), (['form', '1', 'b'], 5)]"}, "return_value": "{'form': [{'a': [4, 7]}, {'b': 5}]}"}], "text": "def deep(data):\n        if len(data) == 1 and len(data[0][0]) < 2:\n            if data[0][0]:\n                return {data[0][0][0]: data[0][1]}\n            return data[0][1]\n\n        collect = {}\n        for key, group in groupby(data, lambda kv: kv[0][0]):\n            nest_data = [(k[1:], v) for k, v in group]\n            collect[key] = deep(nest_data)\n\n        is_num = all(k.isdigit() for k in collect.keys())\n        if is_num:\n            return [i[1] for i in sorted(collect.items())]\n        return collect"}, "fold": {"line": 63, "args": [{"func_args": {"data": "{'leads[delete][0][id]': '42', 'account[subdomain]': 'murmurzet'}", "prefix": "''", "delimeter": "('[', ']')"}, "return_value": "{'account': {'subdomain': 'murmurzet'}, 'leads': {'delete': [{'id': '42'}]}}"}, {"func_args": {"data": "{'a__a': 4}", "prefix": "''", "delimeter": "'__'"}, "return_value": "{'a': {'a': 4}}"}, {"func_args": {"data": "{'a__a': 4, 'a__b': 5}", "prefix": "''", "delimeter": "'__'"}, "return_value": "{'a': {'a': 4, 'b': 5}}"}, {"func_args": {"data": "{'a__1': 2, 'a__0': 1, 'a__2': 3}", "prefix": "''", "delimeter": "'__'"}, "return_value": "{'a': [1, 2, 3]}"}, {"func_args": {"data": "{'form__a__b': 5, 'form__a__a': 4}", "prefix": "'form'", "delimeter": "'__'"}, "return_value": "{'a': {'a': 4, 'b': 5}}"}, {"func_args": {"data": "{'form__a__b': 5, 'form__a__a__0': 4, 'form__a__a__1': 7}", "prefix": "'form'", "delimeter": "'__'"}, "return_value": "{'a': {'a': [4, 7], 'b': 5}}"}, {"func_args": {"data": "{'form__1__b': 5, 'form__0__a__0': 4, 'form__0__a__1': 7}", "prefix": "'form'", "delimeter": "'__'"}, "return_value": "[{'a': [4, 7]}, {'b': 5}]"}], "text": "def fold(data, prefix='', delimeter='__'):\n    \"\"\"\n    >>> _dd(fold({'a__a': 4}))\n    \"{'a': {'a': 4}}\"\n    >>> _dd(fold({'a__a': 4, 'a__b': 5}))\n    \"{'a': {'a': 4, 'b': 5}}\"\n    >>> _dd(fold({'a__1': 2, 'a__0': 1, 'a__2': 3}))\n    \"{'a': [1, 2, 3]}\"\n    >>> _dd(fold({'form__a__b': 5, 'form__a__a': 4}, 'form'))\n    \"{'a': {'a': 4, 'b': 5}}\"\n    >>> _dd(fold({'form__a__b': 5, 'form__a__a__0': 4, 'form__a__a__1': 7}, 'form'))\n    \"{'a': {'a': [4, 7], 'b': 5}}\"\n    >>> repr(fold({'form__1__b': 5, 'form__0__a__0': 4, 'form__0__a__1': 7}, 'form'))\n    \"[{'a': [4, 7]}, {'b': 5}]\"\n    \"\"\"\n    if not isinstance(delimeter, (tuple, list)):\n        delimeter = (delimeter, )\n\n    def deep(data):\n        if len(data) == 1 and len(data[0][0]) < 2:\n            if data[0][0]:\n                return {data[0][0][0]: data[0][1]}\n            return data[0][1]\n\n        collect = {}\n        for key, group in groupby(data, lambda kv: kv[0][0]):\n            nest_data = [(k[1:], v) for k, v in group]\n            collect[key] = deep(nest_data)\n\n        is_num = all(k.isdigit() for k in collect.keys())\n        if is_num:\n            return [i[1] for i in sorted(collect.items())]\n        return collect\n\n    data_ = [\n        (split(key, delimeter), value)\n        for key, value in sorted(data.items())\n    ]\n    result = deep(data_)\n    return result[prefix] if prefix else result"}, "concat": {"line": 8, "args": [{"func_args": {"prefix": "''", "value": "'a'", "delimeter": "'__'"}, "return_value": "'a'"}, {"func_args": {"prefix": "''", "value": "'b'", "delimeter": "'__'"}, "return_value": "'b'"}, {"func_args": {"prefix": "''", "value": "'a'", "delimeter": "'__'"}, "return_value": "'a'"}, {"func_args": {"prefix": "'a'", "value": "'0'", "delimeter": "'__'"}, "return_value": "'a__0'"}, {"func_args": {"prefix": "'a'", "value": "'1'", "delimeter": "'__'"}, "return_value": "'a__1'"}, {"func_args": {"prefix": "'a'", "value": "'2'", "delimeter": "'__'"}, "return_value": "'a__2'"}, {"func_args": {"prefix": "''", "value": "'a'", "delimeter": "'__'"}, "return_value": "'a'"}, {"func_args": {"prefix": "'a'", "value": "'a'", "delimeter": "'__'"}, "return_value": "'a__a'"}, {"func_args": {"prefix": "'a'", "value": "'b'", "delimeter": "'__'"}, "return_value": "'a__b'"}, {"func_args": {"prefix": "'form'", "value": "'a'", "delimeter": "'__'"}, "return_value": "'form__a'"}, {"func_args": {"prefix": "'form__a'", "value": "'a'", "delimeter": "'__'"}, "return_value": "'form__a__a'"}, {"func_args": {"prefix": "'form__a'", "value": "'b'", "delimeter": "'__'"}, "return_value": "'form__a__b'"}], "text": "def concat(prefix, value, delimeter):\n        return (prefix + delimeter if prefix else '') + str(value)"}, "recursive_unfold": {"line": 7, "args": [{"func_args": {"data": "4", "prefix": "'a'", "delimeter": "'__'"}, "return_value": "('a', 4)"}, {"func_args": {"data": "{'a': 4, 'b': 5}", "prefix": "''", "delimeter": "'__'"}, "return_value": "('a', 4)"}, {"func_args": {"data": "4", "prefix": "'a'", "delimeter": "'__'"}, "return_value": "None"}, {"func_args": {"data": "5", "prefix": "'b'", "delimeter": "'__'"}, "return_value": "('b', 5)"}, {"func_args": {"data": "{'a': 4, 'b': 5}", "prefix": "''", "delimeter": "'__'"}, "return_value": "('b', 5)"}, {"func_args": {"data": "5", "prefix": "'b'", "delimeter": "'__'"}, "return_value": "None"}, {"func_args": {"data": "{'a': 4, 'b': 5}", "prefix": "''", "delimeter": "'__'"}, "return_value": "None"}, {"func_args": {"data": "1", "prefix": "'a__0'", "delimeter": "'__'"}, "return_value": "('a__0', 1)"}, {"func_args": {"data": "[1, 2, 3]", "prefix": "'a'", "delimeter": "'__'"}, "return_value": "('a__0', 1)"}, {"func_args": {"data": "{'a': [1, 2, 3]}", "prefix": "''", "delimeter": "'__'"}, "return_value": "('a__0', 1)"}, {"func_args": {"data": "1", "prefix": "'a__0'", "delimeter": "'__'"}, "return_value": "None"}, {"func_args": {"data": "2", "prefix": "'a__1'", "delimeter": "'__'"}, "return_value": "('a__1', 2)"}, {"func_args": {"data": "[1, 2, 3]", "prefix": "'a'", "delimeter": "'__'"}, "return_value": "('a__1', 2)"}, {"func_args": {"data": "{'a': [1, 2, 3]}", "prefix": "''", "delimeter": "'__'"}, "return_value": "('a__1', 2)"}, {"func_args": {"data": "2", "prefix": "'a__1'", "delimeter": "'__'"}, "return_value": "None"}, {"func_args": {"data": "3", "prefix": "'a__2'", "delimeter": "'__'"}, "return_value": "('a__2', 3)"}, {"func_args": {"data": "[1, 2, 3]", "prefix": "'a'", "delimeter": "'__'"}, "return_value": "('a__2', 3)"}, {"func_args": {"data": "{'a': [1, 2, 3]}", "prefix": "''", "delimeter": "'__'"}, "return_value": "('a__2', 3)"}, {"func_args": {"data": "3", "prefix": "'a__2'", "delimeter": "'__'"}, "return_value": "None"}, {"func_args": {"data": "[1, 2, 3]", "prefix": "'a'", "delimeter": "'__'"}, "return_value": "None"}, {"func_args": {"data": "{'a': [1, 2, 3]}", "prefix": "''", "delimeter": "'__'"}, "return_value": "None"}, {"func_args": {"data": "4", "prefix": "'a__a'", "delimeter": "'__'"}, "return_value": "('a__a', 4)"}, {"func_args": {"data": "{'a': 4, 'b': 5}", "prefix": "'a'", "delimeter": "'__'"}, "return_value": "('a__a', 4)"}, {"func_args": {"data": "{'a': {'a': 4, 'b': 5}}", "prefix": "''", "delimeter": "'__'"}, "return_value": "('a__a', 4)"}, {"func_args": {"data": "4", "prefix": "'a__a'", "delimeter": "'__'"}, "return_value": "None"}, {"func_args": {"data": "5", "prefix": "'a__b'", "delimeter": "'__'"}, "return_value": "('a__b', 5)"}, {"func_args": {"data": "{'a': 4, 'b': 5}", "prefix": "'a'", "delimeter": "'__'"}, "return_value": "('a__b', 5)"}, {"func_args": {"data": "{'a': {'a': 4, 'b': 5}}", "prefix": "''", "delimeter": "'__'"}, "return_value": "('a__b', 5)"}, {"func_args": {"data": "5", "prefix": "'a__b'", "delimeter": "'__'"}, "return_value": "None"}, {"func_args": {"data": "{'a': 4, 'b': 5}", "prefix": "'a'", "delimeter": "'__'"}, "return_value": "None"}, {"func_args": {"data": "{'a': {'a': 4, 'b': 5}}", "prefix": "''", "delimeter": "'__'"}, "return_value": "None"}, {"func_args": {"data": "4", "prefix": "'form__a__a'", "delimeter": "'__'"}, "return_value": "('form__a__a', 4)"}, {"func_args": {"data": "{'a': 4, 'b': 5}", "prefix": "'form__a'", "delimeter": "'__'"}, "return_value": "('form__a__a', 4)"}, {"func_args": {"data": "{'a': {'a': 4, 'b': 5}}", "prefix": "'form'", "delimeter": "'__'"}, "return_value": "('form__a__a', 4)"}, {"func_args": {"data": "4", "prefix": "'form__a__a'", "delimeter": "'__'"}, "return_value": "None"}, {"func_args": {"data": "5", "prefix": "'form__a__b'", "delimeter": "'__'"}, "return_value": "('form__a__b', 5)"}, {"func_args": {"data": "{'a': 4, 'b': 5}", "prefix": "'form__a'", "delimeter": "'__'"}, "return_value": "('form__a__b', 5)"}, {"func_args": {"data": "{'a': {'a': 4, 'b': 5}}", "prefix": "'form'", "delimeter": "'__'"}, "return_value": "('form__a__b', 5)"}, {"func_args": {"data": "5", "prefix": "'form__a__b'", "delimeter": "'__'"}, "return_value": "None"}, {"func_args": {"data": "{'a': 4, 'b': 5}", "prefix": "'form__a'", "delimeter": "'__'"}, "return_value": "None"}, {"func_args": {"data": "{'a': {'a': 4, 'b': 5}}", "prefix": "'form'", "delimeter": "'__'"}, "return_value": "None"}], "text": "def recursive_unfold(data, prefix='', delimeter='__'):\n    def concat(prefix, value, delimeter):\n        return (prefix + delimeter if prefix else '') + str(value)\n\n    def unfold_list(data, prefix, delimeter):\n        i = 0\n        for value in data:\n            for pair in recursive_unfold(\n                    value, concat(prefix, str(i), delimeter), delimeter):\n                yield pair\n            i += 1\n\n    def unfold_dict(data, prefix, delimeter):\n        for key, value in data.items():\n            for pair in recursive_unfold(\n                    value, concat(prefix, key, delimeter), delimeter):\n                yield pair\n\n    if isinstance(data, AbcMapping):\n        for pair in unfold_dict(data, prefix, delimeter):\n            yield pair\n\n    elif isinstance(data, (list, tuple)):\n        for pair in unfold_list(data, prefix, delimeter):\n            yield pair\n\n    else:\n        yield prefix, data"}, "unfold_dict": {"line": 19, "args": [{"func_args": {"data": "{'a': 4, 'b': 5}", "prefix": "''", "delimeter": "'__'"}, "return_value": "('a', 4)"}, {"func_args": {"data": "{'a': 4, 'b': 5}", "prefix": "''", "delimeter": "'__'"}, "return_value": "('b', 5)"}, {"func_args": {"data": "{'a': 4, 'b': 5}", "prefix": "''", "delimeter": "'__'"}, "return_value": "None"}, {"func_args": {"data": "{'a': [1, 2, 3]}", "prefix": "''", "delimeter": "'__'"}, "return_value": "('a__0', 1)"}, {"func_args": {"data": "{'a': [1, 2, 3]}", "prefix": "''", "delimeter": "'__'"}, "return_value": "('a__1', 2)"}, {"func_args": {"data": "{'a': [1, 2, 3]}", "prefix": "''", "delimeter": "'__'"}, "return_value": "('a__2', 3)"}, {"func_args": {"data": "{'a': [1, 2, 3]}", "prefix": "''", "delimeter": "'__'"}, "return_value": "None"}, {"func_args": {"data": "{'a': 4, 'b': 5}", "prefix": "'a'", "delimeter": "'__'"}, "return_value": "('a__a', 4)"}, {"func_args": {"data": "{'a': {'a': 4, 'b': 5}}", "prefix": "''", "delimeter": "'__'"}, "return_value": "('a__a', 4)"}, {"func_args": {"data": "{'a': 4, 'b': 5}", "prefix": "'a'", "delimeter": "'__'"}, "return_value": "('a__b', 5)"}, {"func_args": {"data": "{'a': {'a': 4, 'b': 5}}", "prefix": "''", "delimeter": "'__'"}, "return_value": "('a__b', 5)"}, {"func_args": {"data": "{'a': 4, 'b': 5}", "prefix": "'a'", "delimeter": "'__'"}, "return_value": "None"}, {"func_args": {"data": "{'a': {'a': 4, 'b': 5}}", "prefix": "''", "delimeter": "'__'"}, "return_value": "None"}, {"func_args": {"data": "{'a': 4, 'b': 5}", "prefix": "'form__a'", "delimeter": "'__'"}, "return_value": "('form__a__a', 4)"}, {"func_args": {"data": "{'a': {'a': 4, 'b': 5}}", "prefix": "'form'", "delimeter": "'__'"}, "return_value": "('form__a__a', 4)"}, {"func_args": {"data": "{'a': 4, 'b': 5}", "prefix": "'form__a'", "delimeter": "'__'"}, "return_value": "('form__a__b', 5)"}, {"func_args": {"data": "{'a': {'a': 4, 'b': 5}}", "prefix": "'form'", "delimeter": "'__'"}, "return_value": "('form__a__b', 5)"}, {"func_args": {"data": "{'a': 4, 'b': 5}", "prefix": "'form__a'", "delimeter": "'__'"}, "return_value": "None"}, {"func_args": {"data": "{'a': {'a': 4, 'b': 5}}", "prefix": "'form'", "delimeter": "'__'"}, "return_value": "None"}], "text": "def unfold_dict(data, prefix, delimeter):\n        for key, value in data.items():\n            for pair in recursive_unfold(\n                    value, concat(prefix, key, delimeter), delimeter):\n                yield pair"}, "unfold": {"line": 37, "args": [{"func_args": {"data": "{'a': 4, 'b': 5}", "prefix": "''", "delimeter": "'__'"}, "return_value": "{'a': 4, 'b': 5}"}, {"func_args": {"data": "{'a': [1, 2, 3]}", "prefix": "''", "delimeter": "'__'"}, "return_value": "{'a__0': 1, 'a__1': 2, 'a__2': 3}"}, {"func_args": {"data": "{'a': {'a': 4, 'b': 5}}", "prefix": "''", "delimeter": "'__'"}, "return_value": "{'a__a': 4, 'a__b': 5}"}, {"func_args": {"data": "{'a': {'a': 4, 'b': 5}}", "prefix": "'form'", "delimeter": "'__'"}, "return_value": "{'form__a__a': 4, 'form__a__b': 5}"}], "text": "def unfold(data, prefix='', delimeter='__'):\n    \"\"\"\n    >>> _dd(unfold({'a': 4, 'b': 5}))\n    \"{'a': 4, 'b': 5}\"\n    >>> _dd(unfold({'a': [1, 2, 3]}))\n    \"{'a__0': 1, 'a__1': 2, 'a__2': 3}\"\n    >>> _dd(unfold({'a': {'a': 4, 'b': 5}}))\n    \"{'a__a': 4, 'a__b': 5}\"\n    >>> _dd(unfold({'a': {'a': 4, 'b': 5}}, 'form'))\n    \"{'form__a__a': 4, 'form__a__b': 5}\"\n    \"\"\"\n    return dict(recursive_unfold(data, prefix, delimeter))"}, "unfold_list": {"line": 11, "args": [{"func_args": {"data": "[1, 2, 3]", "prefix": "'a'", "delimeter": "'__'"}, "return_value": "('a__0', 1)"}, {"func_args": {"data": "[1, 2, 3]", "prefix": "'a'", "delimeter": "'__'"}, "return_value": "('a__1', 2)"}, {"func_args": {"data": "[1, 2, 3]", "prefix": "'a'", "delimeter": "'__'"}, "return_value": "('a__2', 3)"}, {"func_args": {"data": "[1, 2, 3]", "prefix": "'a'", "delimeter": "'__'"}, "return_value": "None"}], "text": "def unfold_list(data, prefix, delimeter):\n        i = 0\n        for value in data:\n            for pair in recursive_unfold(\n                    value, concat(prefix, str(i), delimeter), delimeter):\n                yield pair\n            i += 1"}}