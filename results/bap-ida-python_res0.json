{"_args_converter": {"line": 816, "args": [{"func_args": {"args": "()"}, "return_value": "()"}], "text": "def _args_converter(args: Iterable[str]) -> Tuple[str, ...]:\n    return tuple(args)"}, "_get_plugin_specs_as_list": {"line": 715, "args": [{"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "None"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}], "text": "def _get_plugin_specs_as_list(\n    specs: Union[None, types.ModuleType, str, Sequence[str]]\n) -> List[str]:\n    \"\"\"Parse a plugins specification into a list of plugin names.\"\"\"\n    # None means empty.\n    if specs is None:\n        return []\n    # Workaround for #3899 - a submodule which happens to be called \"pytest_plugins\".\n    if isinstance(specs, types.ModuleType):\n        return []\n    # Comma-separated list.\n    if isinstance(specs, str):\n        return specs.split(\",\") if specs else []\n    # Direct specification.\n    if isinstance(specs, collections.abc.Sequence):\n        return list(specs)\n    raise UsageError(\n        \"Plugins may be specified as a sequence or a ','-separated string of plugin names. Got: %r\"\n        % specs\n    )"}, "_assertion_supported": {"line": 1511, "args": [{"func_args": {}, "return_value": "True"}], "text": "def _assertion_supported() -> bool:\n    try:\n        assert False\n    except AssertionError:\n        return True\n    else:\n        return False"}, "scope2index": {"line": 803, "args": [{"func_args": {"scope": "'session'", "descr": "\"Fixture 'pytestconfig'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'capfd'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'capfdbinary'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'capsys'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'capsysbinary'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'tmp_path'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'session'", "descr": "\"Fixture 'tmp_path_factory'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'tmpdir'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'session'", "descr": "\"Fixture 'tmpdir_factory'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'monkeypatch'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'recwarn'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'record_property'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'session'", "descr": "\"Fixture 'record_testsuite_property'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'record_xml_attribute'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'session'", "descr": "\"Fixture 'doctest_namespace'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'cache'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'caplog'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'addresses'\"", "where": "'tests'"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'askbap'\"", "where": "'tests'"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'bapida'\"", "where": "'tests'"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'bappath'\"", "where": "'tests'"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'choice'\"", "where": "'tests'"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'comments'\"", "where": "'tests'"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'idadir'\"", "where": "'tests'"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'idapatch'\"", "where": "'tests'"}, "return_value": "4"}, {"func_args": {"scope": "'session'", "descr": "\"Fixture 'load'\"", "where": "'tests'"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'popenpatch'\"", "where": "'tests'"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "'parametrize() call in test_comments'", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "'parametrize() call in test_check_and_configure_bap'", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "'parametrize() call in test_check_and_configure_bap'", "where": "None"}, "return_value": "4"}], "text": "def scope2index(scope: str, descr: str, where: Optional[str] = None) -> int:\n    \"\"\"Look up the index of ``scope`` and raise a descriptive value error\n    if not defined.\"\"\"\n    strscopes: Sequence[str] = scopes\n    try:\n        return strscopes.index(scope)\n    except ValueError:\n        fail(\n            \"{} {}got an unexpected scope value '{}'\".format(\n                descr, f\"from {where} \" if where else \"\", scope\n            ),\n            pytrace=False,\n        )"}, "sort_by_scope": {"line": 1539, "args": [{"func_args": {"arg_name": "'idadir'"}, "return_value": "4"}, {"func_args": {"arg_name": "'idapatch'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmpdir'"}, "return_value": "4"}, {"func_args": {"arg_name": "'monkeypatch'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path_factory'"}, "return_value": "0"}, {"func_args": {"arg_name": "'addresses'"}, "return_value": "4"}, {"func_args": {"arg_name": "'comments'"}, "return_value": "4"}, {"func_args": {"arg_name": "'choice'"}, "return_value": "4"}, {"func_args": {"arg_name": "'load'"}, "return_value": "0"}, {"func_args": {"arg_name": "'monkeypatch'"}, "return_value": "4"}, {"func_args": {"arg_name": "'idapatch'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'bappath'"}, "return_value": "4"}, {"func_args": {"arg_name": "'askbap'"}, "return_value": "4"}, {"func_args": {"arg_name": "'idadir'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'popenpatch'"}, "return_value": "4"}, {"func_args": {"arg_name": "'idapatch'"}, "return_value": "4"}, {"func_args": {"arg_name": "'monkeypatch'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmpdir'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path_factory'"}, "return_value": "0"}, {"func_args": {"arg_name": "'bapida'"}, "return_value": "4"}, {"func_args": {"arg_name": "'idapatch'"}, "return_value": "4"}, {"func_args": {"arg_name": "'popenpatch'"}, "return_value": "4"}, {"func_args": {"arg_name": "'monkeypatch'"}, "return_value": "4"}, {"func_args": {"arg_name": "'idadir'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmpdir'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path_factory'"}, "return_value": "0"}, {"func_args": {"arg_name": "'bapida'"}, "return_value": "4"}, {"func_args": {"arg_name": "'idapatch'"}, "return_value": "4"}, {"func_args": {"arg_name": "'popenpatch'"}, "return_value": "4"}, {"func_args": {"arg_name": "'monkeypatch'"}, "return_value": "4"}, {"func_args": {"arg_name": "'idadir'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmpdir'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path_factory'"}, "return_value": "0"}, {"func_args": {"arg_name": "'bapida'"}, "return_value": "4"}, {"func_args": {"arg_name": "'idapatch'"}, "return_value": "4"}, {"func_args": {"arg_name": "'popenpatch'"}, "return_value": "4"}, {"func_args": {"arg_name": "'monkeypatch'"}, "return_value": "4"}, {"func_args": {"arg_name": "'idadir'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmpdir'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path_factory'"}, "return_value": "0"}, {"func_args": {"arg_name": "'bapida'"}, "return_value": "4"}, {"func_args": {"arg_name": "'idapatch'"}, "return_value": "4"}, {"func_args": {"arg_name": "'popenpatch'"}, "return_value": "4"}, {"func_args": {"arg_name": "'monkeypatch'"}, "return_value": "4"}, {"func_args": {"arg_name": "'idadir'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmpdir'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path_factory'"}, "return_value": "0"}, {"func_args": {"arg_name": "'bapida'"}, "return_value": "4"}, {"func_args": {"arg_name": "'idapatch'"}, "return_value": "4"}, {"func_args": {"arg_name": "'popenpatch'"}, "return_value": "4"}, {"func_args": {"arg_name": "'monkeypatch'"}, "return_value": "4"}, {"func_args": {"arg_name": "'idadir'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmpdir'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path_factory'"}, "return_value": "0"}], "text": "def sort_by_scope(arg_name: str) -> int:\n            try:\n                fixturedefs = arg2fixturedefs[arg_name]\n            except KeyError:\n                return scopes.index(\"function\")\n            else:\n                return fixturedefs[-1].scopenum"}, "scopemismatch": {"line": 799, "args": [{"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}], "text": "def scopemismatch(currentscope: \"_Scope\", newscope: \"_Scope\") -> bool:\n    return scopes.index(newscope) > scopes.index(currentscope)"}, "pluralize": {"line": 1350, "args": [{"func_args": {"count": "21", "noun": "'passed'"}, "return_value": "(21, 'passed')"}], "text": "def pluralize(count: int, noun: str) -> Tuple[int, str]:\n    # No need to pluralize words such as `failed` or `passed`.\n    if noun not in [\"error\", \"warnings\", \"test\"]:\n        return count, noun\n\n    # The `warnings` key is plural. To avoid API breakage, we keep it that way but\n    # set it to singular here so we can determine plurality in the same way as we do\n    # for `error`.\n    noun = noun.replace(\"warnings\", \"warning\")\n\n    return count, noun + \"s\" if count != 1 else noun"}, "format_session_duration": {"line": 1377, "args": [{"func_args": {"seconds": "3.4018962383270264"}, "return_value": "'3.40s'"}], "text": "def format_session_duration(seconds: float) -> str:\n    \"\"\"Format the given seconds in a human readable manner to show in the final summary.\"\"\"\n    if seconds < 60:\n        return f\"{seconds:.2f}s\"\n    else:\n        dt = datetime.timedelta(seconds=int(seconds))\n        return f\"{seconds:.2f}s ({dt})\""}, "_get_auto_indent": {"line": 113, "args": [{"func_args": {"auto_indent_option": "None"}, "return_value": "0"}, {"func_args": {"auto_indent_option": "None"}, "return_value": "0"}]}, "_get_stderr_fileno": {"line": 68, "args": [{"func_args": {}, "return_value": "2"}, {"func_args": {}, "return_value": "2"}]}, "get_terminal_width": {"line": 15, "args": [{"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}], "text": "def get_terminal_width() -> int:\n    width, _ = shutil.get_terminal_size(fallback=(80, 24))\n\n    # The Windows get_terminal_size may be bogus, let's sanify a bit.\n    if width < 40:\n        width = 80\n\n    return width"}, "get_dirs_from_args": {"line": 134, "args": [{"func_args": {"args": "[]"}, "return_value": "[]"}], "text": "def get_dirs_from_args(args: Iterable[str]) -> List[Path]:\n    def is_option(x: str) -> bool:\n        return x.startswith(\"-\")\n\n    def get_file_part_from_node_id(x: str) -> str:\n        return x.split(\"::\")[0]\n\n    def get_dir_from_path(path: Path) -> Path:\n        if path.is_dir():\n            return path\n        return path.parent\n\n    def safe_exists(path: Path) -> bool:\n        # This can throw on paths that contain characters unrepresentable at the OS level,\n        # or with invalid syntax on Windows (https://bugs.python.org/issue35306)\n        try:\n            return path.exists()\n        except OSError:\n            return False\n\n    # These look like paths but may not exist\n    possible_paths = (\n        absolutepath(get_file_part_from_node_id(arg))\n        for arg in args\n        if not is_option(arg)\n    )\n\n    return [get_dir_from_path(path) for path in possible_paths if safe_exists(path)]"}, "_is_same": {"line": 558, "args": [{"func_args": {"f1": "'/usr/app/src/test_repos/bap-ida-python/tests/conftest.py'", "f2": "'/usr/app/src/test_repos/bap-ida-python/tests/conftest.py'"}, "return_value": "True"}, {"func_args": {"f1": "'/usr/app/src/test_repos/bap-ida-python/tests/test_bap_comment.py'", "f2": "'/usr/app/src/test_repos/bap-ida-python/tests/test_bap_comment.py'"}, "return_value": "True"}, {"func_args": {"f1": "'/usr/app/src/test_repos/bap-ida-python/tests/test_config.py'", "f2": "'/usr/app/src/test_repos/bap-ida-python/tests/test_config.py'"}, "return_value": "True"}, {"func_args": {"f1": "'/usr/app/src/test_repos/bap-ida-python/tests/test_ida.py'", "f2": "'/usr/app/src/test_repos/bap-ida-python/tests/test_ida.py'"}, "return_value": "True"}, {"func_args": {"f1": "'/usr/app/src/test_repos/bap-ida-python/tests/test_run.py'", "f2": "'/usr/app/src/test_repos/bap-ida-python/tests/test_run.py'"}, "return_value": "True"}, {"func_args": {"f1": "'/usr/app/src/test_repos/bap-ida-python/tests/test_sexp.py'", "f2": "'/usr/app/src/test_repos/bap-ida-python/tests/test_sexp.py'"}, "return_value": "True"}, {"func_args": {"f1": "'/usr/app/src/test_repos/bap-ida-python/tests/test_trace.py'", "f2": "'/usr/app/src/test_repos/bap-ida-python/tests/test_trace.py'"}, "return_value": "True"}], "text": "def _is_same(f1: str, f2: str) -> bool:\n        return os.path.samefile(f1, f2)"}, "parts": {"line": 420, "args": [{"func_args": {"s": "'/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins', '/usr/app/src/test_repos/bap-ida-python', '/usr/app/src', '/', '/usr/app/src/test_repos/bap-ida-python/plugins/bap', '/usr', '/usr/app/src/test_repos/bap-ida-python/plugins', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src/test_repos/bap-ida-python', '/usr/app/src', '/', '/usr/app/src/test_repos/bap-ida-python/plugins/bap', '/usr', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils', '/usr/app/src/test_repos/bap-ida-python/plugins', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins/__init__.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins', '/usr/app/src/test_repos/bap-ida-python', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins/__init__.py', '/usr/app/src', '/', '/usr/app/src/test_repos/bap-ida-python/plugins/bap', '/usr', '/usr/app/src/test_repos/bap-ida-python/plugins', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins/bap_bir_attr.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins', '/usr/app/src/test_repos/bap-ida-python', '/usr/app/src', '/', '/usr/app/src/test_repos/bap-ida-python/plugins/bap', '/usr', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins/bap_bir_attr.py', '/usr/app/src/test_repos/bap-ida-python/plugins', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins/bap_clear_comments.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins', '/usr/app/src/test_repos/bap-ida-python', '/usr/app/src', '/', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins/bap_clear_comments.py', '/usr/app/src/test_repos/bap-ida-python/plugins/bap', '/usr', '/usr/app/src/test_repos/bap-ida-python/plugins', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins/bap_comments.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins', '/usr/app/src/test_repos/bap-ida-python', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins/bap_comments.py', '/usr/app/src', '/', '/usr/app/src/test_repos/bap-ida-python/plugins/bap', '/usr', '/usr/app/src/test_repos/bap-ida-python/plugins', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins/bap_functions.py'"}, "return_value": "{'/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins/bap_functions.py', '/usr/app/src/test_repos', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins', '/usr/app/src/test_repos/bap-ida-python', '/usr/app/src', '/', '/usr/app/src/test_repos/bap-ida-python/plugins/bap', '/usr', '/usr/app/src/test_repos/bap-ida-python/plugins', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins/bap_taint_ptr.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins', '/usr/app/src/test_repos/bap-ida-python', '/usr/app/src', '/', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins/bap_taint_ptr.py', '/usr/app/src/test_repos/bap-ida-python/plugins/bap', '/usr', '/usr/app/src/test_repos/bap-ida-python/plugins', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins/bap_taint_reg.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins', '/usr/app/src/test_repos/bap-ida-python', '/usr/app/src', '/', '/usr/app/src/test_repos/bap-ida-python/plugins/bap', '/usr', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins/bap_taint_reg.py', '/usr/app/src/test_repos/bap-ida-python/plugins', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins/bap_task_manager.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins', '/usr/app/src/test_repos/bap-ida-python', '/usr/app/src', '/', '/usr/app/src/test_repos/bap-ida-python/plugins/bap', '/usr', '/usr/app/src/test_repos/bap-ida-python/plugins', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins/bap_task_manager.py', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins/bap_trace.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins', '/usr/app/src/test_repos/bap-ida-python', '/usr/app/src', '/', '/usr/app/src/test_repos/bap-ida-python/plugins/bap', '/usr', '/usr/app/src/test_repos/bap-ida-python/plugins', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins/bap_trace.py', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins/bap_view.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins/bap_view.py', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins', '/usr/app/src/test_repos/bap-ida-python', '/usr/app/src', '/', '/usr/app/src/test_repos/bap-ida-python/plugins/bap', '/usr', '/usr/app/src/test_repos/bap-ida-python/plugins', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins/pseudocode_bap_comment.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins', '/usr/app/src/test_repos/bap-ida-python', '/usr/app/src', '/', '/usr/app/src/test_repos/bap-ida-python/plugins/bap', '/usr', '/usr/app/src/test_repos/bap-ida-python/plugins', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins/pseudocode_bap_comment.py', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins/pseudocode_bap_taint.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins', '/usr/app/src/test_repos/bap-ida-python', '/usr/app/src', '/', '/usr/app/src/test_repos/bap-ida-python/plugins/bap', '/usr', '/usr/app/src/test_repos/bap-ida-python/plugins', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins/pseudocode_bap_taint.py', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils/__init__.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src/test_repos/bap-ida-python', '/usr/app/src', '/', '/usr/app/src/test_repos/bap-ida-python/plugins/bap', '/usr', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils/__init__.py', '/usr/app/src/test_repos/bap-ida-python/plugins', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils/_comment_handler.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src/test_repos/bap-ida-python', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils/_comment_handler.py', '/usr/app/src', '/', '/usr/app/src/test_repos/bap-ida-python/plugins/bap', '/usr', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils', '/usr/app/src/test_repos/bap-ida-python/plugins', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils/_ctyperewriter.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src/test_repos/bap-ida-python', '/usr/app/src', '/', '/usr/app/src/test_repos/bap-ida-python/plugins/bap', '/usr', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils', '/usr/app/src/test_repos/bap-ida-python/plugins', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils/_ctyperewriter.py', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils/_service.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src/test_repos/bap-ida-python', '/usr/app/src', '/', '/usr/app/src/test_repos/bap-ida-python/plugins/bap', '/usr', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils', '/usr/app/src/test_repos/bap-ida-python/plugins', '/usr/app', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils/_service.py'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils/abstract_ida_plugins.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src/test_repos/bap-ida-python', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils/abstract_ida_plugins.py', '/usr/app/src', '/', '/usr/app/src/test_repos/bap-ida-python/plugins/bap', '/usr', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils', '/usr/app/src/test_repos/bap-ida-python/plugins', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils/bap_comment.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src/test_repos/bap-ida-python', '/usr/app/src', '/', '/usr/app/src/test_repos/bap-ida-python/plugins/bap', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils/bap_comment.py', '/usr', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils', '/usr/app/src/test_repos/bap-ida-python/plugins', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils/bap_taint.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src/test_repos/bap-ida-python', '/usr/app/src', '/', '/usr/app/src/test_repos/bap-ida-python/plugins/bap', '/usr', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils/bap_taint.py', '/usr/app/src/test_repos/bap-ida-python/plugins', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils/config.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils/config.py', '/usr/app/src/test_repos/bap-ida-python', '/usr/app/src', '/', '/usr/app/src/test_repos/bap-ida-python/plugins/bap', '/usr', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils', '/usr/app/src/test_repos/bap-ida-python/plugins', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils/hexrays.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src/test_repos/bap-ida-python', '/usr/app/src', '/', '/usr/app/src/test_repos/bap-ida-python/plugins/bap', '/usr', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils', '/usr/app/src/test_repos/bap-ida-python/plugins', '/usr/app', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils/hexrays.py'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils/ida.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src/test_repos/bap-ida-python', '/usr/app/src', '/', '/usr/app/src/test_repos/bap-ida-python/plugins/bap', '/usr', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils', '/usr/app/src/test_repos/bap-ida-python/plugins', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils/ida.py', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils/run.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src/test_repos/bap-ida-python', '/usr/app/src', '/', '/usr/app/src/test_repos/bap-ida-python/plugins/bap', '/usr', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils', '/usr/app/src/test_repos/bap-ida-python/plugins', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils/run.py', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils/sexp.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src/test_repos/bap-ida-python', '/usr/app/src', '/', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils/sexp.py', '/usr/app/src/test_repos/bap-ida-python/plugins/bap', '/usr', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils', '/usr/app/src/test_repos/bap-ida-python/plugins', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils/trace.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src/test_repos/bap-ida-python', '/usr/app/src', '/', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils/trace.py', '/usr/app/src/test_repos/bap-ida-python/plugins/bap', '/usr', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils', '/usr/app/src/test_repos/bap-ida-python/plugins', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins/bap_bir_attr.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins', '/usr/app/src/test_repos/bap-ida-python', '/usr/app/src', '/', '/usr/app/src/test_repos/bap-ida-python/plugins/bap', '/usr', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins/bap_bir_attr.py', '/usr/app/src/test_repos/bap-ida-python/plugins', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins/bap_clear_comments.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins', '/usr/app/src/test_repos/bap-ida-python', '/usr/app/src', '/', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins/bap_clear_comments.py', '/usr/app/src/test_repos/bap-ida-python/plugins/bap', '/usr', '/usr/app/src/test_repos/bap-ida-python/plugins', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins/bap_comments.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins', '/usr/app/src/test_repos/bap-ida-python', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins/bap_comments.py', '/usr/app/src', '/', '/usr/app/src/test_repos/bap-ida-python/plugins/bap', '/usr', '/usr/app/src/test_repos/bap-ida-python/plugins', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins/bap_functions.py'"}, "return_value": "{'/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins/bap_functions.py', '/usr/app/src/test_repos', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins', '/usr/app/src/test_repos/bap-ida-python', '/usr/app/src', '/', '/usr/app/src/test_repos/bap-ida-python/plugins/bap', '/usr', '/usr/app/src/test_repos/bap-ida-python/plugins', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins/bap_taint_ptr.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins', '/usr/app/src/test_repos/bap-ida-python', '/usr/app/src', '/', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins/bap_taint_ptr.py', '/usr/app/src/test_repos/bap-ida-python/plugins/bap', '/usr', '/usr/app/src/test_repos/bap-ida-python/plugins', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins/bap_taint_reg.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins', '/usr/app/src/test_repos/bap-ida-python', '/usr/app/src', '/', '/usr/app/src/test_repos/bap-ida-python/plugins/bap', '/usr', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins/bap_taint_reg.py', '/usr/app/src/test_repos/bap-ida-python/plugins', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins/bap_task_manager.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins', '/usr/app/src/test_repos/bap-ida-python', '/usr/app/src', '/', '/usr/app/src/test_repos/bap-ida-python/plugins/bap', '/usr', '/usr/app/src/test_repos/bap-ida-python/plugins', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins/bap_task_manager.py', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins/bap_trace.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins', '/usr/app/src/test_repos/bap-ida-python', '/usr/app/src', '/', '/usr/app/src/test_repos/bap-ida-python/plugins/bap', '/usr', '/usr/app/src/test_repos/bap-ida-python/plugins', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins/bap_trace.py', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins/bap_view.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins/bap_view.py', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins', '/usr/app/src/test_repos/bap-ida-python', '/usr/app/src', '/', '/usr/app/src/test_repos/bap-ida-python/plugins/bap', '/usr', '/usr/app/src/test_repos/bap-ida-python/plugins', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins/pseudocode_bap_comment.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins', '/usr/app/src/test_repos/bap-ida-python', '/usr/app/src', '/', '/usr/app/src/test_repos/bap-ida-python/plugins/bap', '/usr', '/usr/app/src/test_repos/bap-ida-python/plugins', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins/pseudocode_bap_comment.py', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins/pseudocode_bap_taint.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins', '/usr/app/src/test_repos/bap-ida-python', '/usr/app/src', '/', '/usr/app/src/test_repos/bap-ida-python/plugins/bap', '/usr', '/usr/app/src/test_repos/bap-ida-python/plugins', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/plugins/pseudocode_bap_taint.py', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils/_comment_handler.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src/test_repos/bap-ida-python', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils/_comment_handler.py', '/usr/app/src', '/', '/usr/app/src/test_repos/bap-ida-python/plugins/bap', '/usr', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils', '/usr/app/src/test_repos/bap-ida-python/plugins', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils/_ctyperewriter.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src/test_repos/bap-ida-python', '/usr/app/src', '/', '/usr/app/src/test_repos/bap-ida-python/plugins/bap', '/usr', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils', '/usr/app/src/test_repos/bap-ida-python/plugins', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils/_ctyperewriter.py', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils/_service.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src/test_repos/bap-ida-python', '/usr/app/src', '/', '/usr/app/src/test_repos/bap-ida-python/plugins/bap', '/usr', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils', '/usr/app/src/test_repos/bap-ida-python/plugins', '/usr/app', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils/_service.py'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils/abstract_ida_plugins.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src/test_repos/bap-ida-python', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils/abstract_ida_plugins.py', '/usr/app/src', '/', '/usr/app/src/test_repos/bap-ida-python/plugins/bap', '/usr', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils', '/usr/app/src/test_repos/bap-ida-python/plugins', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils/bap_comment.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src/test_repos/bap-ida-python', '/usr/app/src', '/', '/usr/app/src/test_repos/bap-ida-python/plugins/bap', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils/bap_comment.py', '/usr', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils', '/usr/app/src/test_repos/bap-ida-python/plugins', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils/bap_taint.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src/test_repos/bap-ida-python', '/usr/app/src', '/', '/usr/app/src/test_repos/bap-ida-python/plugins/bap', '/usr', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils/bap_taint.py', '/usr/app/src/test_repos/bap-ida-python/plugins', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils/config.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils/config.py', '/usr/app/src/test_repos/bap-ida-python', '/usr/app/src', '/', '/usr/app/src/test_repos/bap-ida-python/plugins/bap', '/usr', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils', '/usr/app/src/test_repos/bap-ida-python/plugins', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils/hexrays.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src/test_repos/bap-ida-python', '/usr/app/src', '/', '/usr/app/src/test_repos/bap-ida-python/plugins/bap', '/usr', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils', '/usr/app/src/test_repos/bap-ida-python/plugins', '/usr/app', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils/hexrays.py'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils/ida.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src/test_repos/bap-ida-python', '/usr/app/src', '/', '/usr/app/src/test_repos/bap-ida-python/plugins/bap', '/usr', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils', '/usr/app/src/test_repos/bap-ida-python/plugins', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils/ida.py', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils/run.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src/test_repos/bap-ida-python', '/usr/app/src', '/', '/usr/app/src/test_repos/bap-ida-python/plugins/bap', '/usr', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils', '/usr/app/src/test_repos/bap-ida-python/plugins', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils/run.py', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils/sexp.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src/test_repos/bap-ida-python', '/usr/app/src', '/', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils/sexp.py', '/usr/app/src/test_repos/bap-ida-python/plugins/bap', '/usr', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils', '/usr/app/src/test_repos/bap-ida-python/plugins', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils/trace.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src/test_repos/bap-ida-python', '/usr/app/src', '/', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils/trace.py', '/usr/app/src/test_repos/bap-ida-python/plugins/bap', '/usr', '/usr/app/src/test_repos/bap-ida-python/plugins/bap/utils', '/usr/app/src/test_repos/bap-ida-python/plugins', '/usr/app'}"}], "text": "def parts(s: str) -> Set[str]:\n    parts = s.split(sep)\n    return {sep.join(parts[: i + 1]) or sep for i in range(len(parts))}"}, "parse_num": {"line": 179, "args": [{"func_args": {"maybe_num": "'3'"}, "return_value": "3"}, {"func_args": {"maybe_num": "'2'"}, "return_value": "2"}, {"func_args": {"maybe_num": "'4'"}, "return_value": "4"}, {"func_args": {"maybe_num": "'current'"}, "return_value": "-1"}, {"func_args": {"maybe_num": "'current'"}, "return_value": "-1"}, {"func_args": {"maybe_num": "'0'"}, "return_value": "0"}, {"func_args": {"maybe_num": "'current'"}, "return_value": "-1"}, {"func_args": {"maybe_num": "'0'"}, "return_value": "0"}, {"func_args": {"maybe_num": "'3'"}, "return_value": "3"}, {"func_args": {"maybe_num": "'2'"}, "return_value": "2"}, {"func_args": {"maybe_num": "'5'"}, "return_value": "5"}, {"func_args": {"maybe_num": "'4'"}, "return_value": "4"}, {"func_args": {"maybe_num": "'current'"}, "return_value": "-1"}, {"func_args": {"maybe_num": "'3'"}, "return_value": "3"}, {"func_args": {"maybe_num": "'2'"}, "return_value": "2"}, {"func_args": {"maybe_num": "'5'"}, "return_value": "5"}, {"func_args": {"maybe_num": "'4'"}, "return_value": "4"}, {"func_args": {"maybe_num": "'current'"}, "return_value": "-1"}], "text": "def parse_num(maybe_num) -> int:\n    \"\"\"Parse number path suffixes, returns -1 on error.\"\"\"\n    try:\n        return int(maybe_num)\n    except ValueError:\n        return -1"}, "iscommentline": {"line": 162, "args": [{"func_args": {"line": "'[tox]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'envlist = py27,py3\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}, {"func_args": {"line": "'[testenv]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'deps = pytest\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tviztracer \\n'"}, "return_value": "False"}, {"func_args": {"line": "'commands = viztracer --ignore_frozen --log_func_args --log_func_retval -o result0.json -- py.test\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}], "text": "def iscommentline(line):\n    c = line.lstrip()[:1]\n    return c in COMMENTCHARS"}, "normalize_mark_list": {"line": 355, "args": [{"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "()"}, "return_value": "[]"}, {"func_args": {"mark_list": "()"}, "return_value": "[]"}, {"func_args": {"mark_list": "()"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "()"}, "return_value": "[]"}, {"func_args": {"mark_list": "()"}, "return_value": "[]"}, {"func_args": {"mark_list": "()"}, "return_value": "[]"}, {"func_args": {"mark_list": "()"}, "return_value": "[]"}, {"func_args": {"mark_list": "()"}, "return_value": "[]"}, {"func_args": {"mark_list": "()"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}], "text": "def normalize_mark_list(mark_list: Iterable[Union[Mark, MarkDecorator]]) -> List[Mark]:\n    \"\"\"Normalize marker decorating helpers to mark objects.\n\n    :type List[Union[Mark, Markdecorator]] mark_list:\n    :rtype: List[Mark]\n    \"\"\"\n    extracted = [\n        getattr(mark, \"mark\", mark) for mark in mark_list\n    ]  # unpack MarkDecorator\n    for mark in extracted:\n        if not isinstance(mark, Mark):\n            raise TypeError(f\"got {mark!r} instead of Mark\")\n    return [x for x in extracted if isinstance(x, Mark)]"}, "_parse_parametrize_args": {"line": 135, "args": [{"func_args": {"argnames": "'choice'", "argvalues": "('yes', 'no', 'cancel')", "args": "()", "kwargs": "{}"}, "return_value": "(['choice'], True)"}, {"func_args": {"argnames": "'bappath'", "argvalues": "(None, '/opt/bin/bap')", "args": "()", "kwargs": "{}"}, "return_value": "(['bappath'], True)"}, {"func_args": {"argnames": "'askbap'", "argvalues": "(('stupid', None, 'what?', 'oh, okay', 'bap'), ('clever',))", "args": "()", "kwargs": "{}"}, "return_value": "(['askbap'], True)"}]}, "iterparentnodeids": {"line": 44, "args": [{"func_args": {"nodeid": "'tests/test_bap_comment.py::test_parse'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_bap_comment.py::test_parse'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_bap_comment.py::test_parse'"}, "return_value": "'tests/test_bap_comment.py'"}, {"func_args": {"nodeid": "'tests/test_bap_comment.py::test_parse'"}, "return_value": "'tests/test_bap_comment.py::test_parse'"}, {"func_args": {"nodeid": "'tests/test_bap_comment.py::test_parse'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_bap_comment.py::test_dumps'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_bap_comment.py::test_dumps'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_bap_comment.py::test_dumps'"}, "return_value": "'tests/test_bap_comment.py'"}, {"func_args": {"nodeid": "'tests/test_bap_comment.py::test_dumps'"}, "return_value": "'tests/test_bap_comment.py::test_dumps'"}, {"func_args": {"nodeid": "'tests/test_bap_comment.py::test_dumps'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_bap_comment.py::test_is_valid'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_bap_comment.py::test_is_valid'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_bap_comment.py::test_is_valid'"}, "return_value": "'tests/test_bap_comment.py'"}, {"func_args": {"nodeid": "'tests/test_bap_comment.py::test_is_valid'"}, "return_value": "'tests/test_bap_comment.py::test_is_valid'"}, {"func_args": {"nodeid": "'tests/test_bap_comment.py::test_is_valid'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_bap_comment.py::test_roundup'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_bap_comment.py::test_roundup'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_bap_comment.py::test_roundup'"}, "return_value": "'tests/test_bap_comment.py'"}, {"func_args": {"nodeid": "'tests/test_bap_comment.py::test_roundup'"}, "return_value": "'tests/test_bap_comment.py::test_roundup'"}, {"func_args": {"nodeid": "'tests/test_bap_comment.py::test_roundup'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_bap_comment.py::test_quotation'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_bap_comment.py::test_quotation'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_bap_comment.py::test_quotation'"}, "return_value": "'tests/test_bap_comment.py'"}, {"func_args": {"nodeid": "'tests/test_bap_comment.py::test_quotation'"}, "return_value": "'tests/test_bap_comment.py::test_quotation'"}, {"func_args": {"nodeid": "'tests/test_bap_comment.py::test_quotation'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_bap_comment.py::test_single_quote'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_bap_comment.py::test_single_quote'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_bap_comment.py::test_single_quote'"}, "return_value": "'tests/test_bap_comment.py'"}, {"func_args": {"nodeid": "'tests/test_bap_comment.py::test_single_quote'"}, "return_value": "'tests/test_bap_comment.py::test_single_quote'"}, {"func_args": {"nodeid": "'tests/test_bap_comment.py::test_single_quote'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_config.py::test_set_and_get'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_config.py::test_set_and_get'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_config.py::test_set_and_get'"}, "return_value": "'tests/test_config.py'"}, {"func_args": {"nodeid": "'tests/test_config.py::test_set_and_get'"}, "return_value": "'tests/test_config.py::test_set_and_get'"}, {"func_args": {"nodeid": "'tests/test_config.py::test_set_and_get'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_config.py::test_set_and_get'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_config.py::test_set_and_get'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_config.py::test_set_and_get'"}, "return_value": "'tests/test_config.py'"}, {"func_args": {"nodeid": "'tests/test_config.py::test_set_and_get'"}, "return_value": "'tests/test_config.py::test_set_and_get'"}, {"func_args": {"nodeid": "'tests/test_config.py::test_set_and_get'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_config.py::test_set_and_get'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_config.py::test_set_and_get'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_config.py::test_set_and_get'"}, "return_value": "'tests/test_config.py'"}, {"func_args": {"nodeid": "'tests/test_config.py::test_set_and_get'"}, "return_value": "'tests/test_config.py::test_set_and_get'"}, {"func_args": {"nodeid": "'tests/test_config.py::test_set_and_get'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_config.py::test_set_and_get'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_config.py::test_set_and_get'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_config.py::test_set_and_get'"}, "return_value": "'tests/test_config.py'"}, {"func_args": {"nodeid": "'tests/test_config.py::test_set_and_get'"}, "return_value": "'tests/test_config.py::test_set_and_get'"}, {"func_args": {"nodeid": "'tests/test_config.py::test_set_and_get'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_config.py::test_set_and_get'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_config.py::test_set_and_get'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_config.py::test_set_and_get'"}, "return_value": "'tests/test_config.py'"}, {"func_args": {"nodeid": "'tests/test_config.py::test_set_and_get'"}, "return_value": "'tests/test_config.py::test_set_and_get'"}, {"func_args": {"nodeid": "'tests/test_config.py::test_set_and_get'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_config.py::test_set_and_get'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_config.py::test_set_and_get'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_config.py::test_set_and_get'"}, "return_value": "'tests/test_config.py'"}, {"func_args": {"nodeid": "'tests/test_config.py::test_set_and_get'"}, "return_value": "'tests/test_config.py::test_set_and_get'"}, {"func_args": {"nodeid": "'tests/test_config.py::test_set_and_get'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_config.py::test_set_and_get'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_config.py::test_set_and_get'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_config.py::test_set_and_get'"}, "return_value": "'tests/test_config.py'"}, {"func_args": {"nodeid": "'tests/test_config.py::test_set_and_get'"}, "return_value": "'tests/test_config.py::test_set_and_get'"}, {"func_args": {"nodeid": "'tests/test_config.py::test_set_and_get'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_ida.py::test_comments'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_ida.py::test_comments'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_ida.py::test_comments'"}, "return_value": "'tests/test_ida.py'"}, {"func_args": {"nodeid": "'tests/test_ida.py::test_comments'"}, "return_value": "'tests/test_ida.py::test_comments'"}, {"func_args": {"nodeid": "'tests/test_ida.py::test_comments'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_ida.py::test_comments'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_ida.py::test_comments'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_ida.py::test_comments'"}, "return_value": "'tests/test_ida.py'"}, {"func_args": {"nodeid": "'tests/test_ida.py::test_comments'"}, "return_value": "'tests/test_ida.py::test_comments'"}, {"func_args": {"nodeid": "'tests/test_ida.py::test_comments'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_ida.py::test_comments'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_ida.py::test_comments'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_ida.py::test_comments'"}, "return_value": "'tests/test_ida.py'"}, {"func_args": {"nodeid": "'tests/test_ida.py::test_comments'"}, "return_value": "'tests/test_ida.py::test_comments'"}, {"func_args": {"nodeid": "'tests/test_ida.py::test_comments'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_ida.py::test_comments'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_ida.py::test_comments'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_ida.py::test_comments'"}, "return_value": "'tests/test_ida.py'"}, {"func_args": {"nodeid": "'tests/test_ida.py::test_comments'"}, "return_value": "'tests/test_ida.py::test_comments'"}, {"func_args": {"nodeid": "'tests/test_ida.py::test_comments'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_ida.py::test_comments'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_ida.py::test_comments'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_ida.py::test_comments'"}, "return_value": "'tests/test_ida.py'"}, {"func_args": {"nodeid": "'tests/test_ida.py::test_comments'"}, "return_value": "'tests/test_ida.py::test_comments'"}, {"func_args": {"nodeid": "'tests/test_ida.py::test_comments'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_ida.py::test_comments'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_ida.py::test_comments'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_ida.py::test_comments'"}, "return_value": "'tests/test_ida.py'"}, {"func_args": {"nodeid": "'tests/test_ida.py::test_comments'"}, "return_value": "'tests/test_ida.py::test_comments'"}, {"func_args": {"nodeid": "'tests/test_ida.py::test_comments'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_ida.py::test_comments'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_ida.py::test_comments'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_ida.py::test_comments'"}, "return_value": "'tests/test_ida.py'"}, {"func_args": {"nodeid": "'tests/test_ida.py::test_comments'"}, "return_value": "'tests/test_ida.py::test_comments'"}, {"func_args": {"nodeid": "'tests/test_ida.py::test_comments'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_check_and_configure_bap'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_check_and_configure_bap'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_check_and_configure_bap'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_check_and_configure_bap'"}, "return_value": "'tests/test_run.py::test_check_and_configure_bap'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_check_and_configure_bap'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_check_and_configure_bap'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_check_and_configure_bap'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_check_and_configure_bap'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_check_and_configure_bap'"}, "return_value": "'tests/test_run.py::test_check_and_configure_bap'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_check_and_configure_bap'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_check_and_configure_bap'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_check_and_configure_bap'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_check_and_configure_bap'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_check_and_configure_bap'"}, "return_value": "'tests/test_run.py::test_check_and_configure_bap'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_check_and_configure_bap'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_check_and_configure_bap'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_check_and_configure_bap'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_check_and_configure_bap'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_check_and_configure_bap'"}, "return_value": "'tests/test_run.py::test_check_and_configure_bap'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_check_and_configure_bap'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_check_and_configure_bap'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_check_and_configure_bap'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_check_and_configure_bap'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_check_and_configure_bap'"}, "return_value": "'tests/test_run.py::test_check_and_configure_bap'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_check_and_configure_bap'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_check_and_configure_bap'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_check_and_configure_bap'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_check_and_configure_bap'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_check_and_configure_bap'"}, "return_value": "'tests/test_run.py::test_check_and_configure_bap'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_check_and_configure_bap'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_check_and_configure_bap'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_check_and_configure_bap'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_check_and_configure_bap'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_check_and_configure_bap'"}, "return_value": "'tests/test_run.py::test_check_and_configure_bap'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_check_and_configure_bap'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_check_and_configure_bap'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_check_and_configure_bap'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_check_and_configure_bap'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_check_and_configure_bap'"}, "return_value": "'tests/test_run.py::test_check_and_configure_bap'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_check_and_configure_bap'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_check_and_configure_bap'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_check_and_configure_bap'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_check_and_configure_bap'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_check_and_configure_bap'"}, "return_value": "'tests/test_run.py::test_check_and_configure_bap'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_check_and_configure_bap'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_check_and_configure_bap'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_check_and_configure_bap'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_check_and_configure_bap'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_check_and_configure_bap'"}, "return_value": "'tests/test_run.py::test_check_and_configure_bap'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_check_and_configure_bap'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_run_without_args'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_run_without_args'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_run_without_args'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_run_without_args'"}, "return_value": "'tests/test_run.py::test_run_without_args'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_run_without_args'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_run_without_args'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_run_without_args'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_run_without_args'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_run_without_args'"}, "return_value": "'tests/test_run.py::test_run_without_args'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_run_without_args'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_run_without_args'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_run_without_args'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_run_without_args'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_run_without_args'"}, "return_value": "'tests/test_run.py::test_run_without_args'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_run_without_args'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_run_without_args'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_run_without_args'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_run_without_args'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_run_without_args'"}, "return_value": "'tests/test_run.py::test_run_without_args'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_run_without_args'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_run_without_args'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_run_without_args'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_run_without_args'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_run_without_args'"}, "return_value": "'tests/test_run.py::test_run_without_args'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_run_without_args'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_run_without_args'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_run_without_args'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_run_without_args'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_run_without_args'"}, "return_value": "'tests/test_run.py::test_run_without_args'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_run_without_args'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_run_without_args'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_run_without_args'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_run_without_args'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_run_without_args'"}, "return_value": "'tests/test_run.py::test_run_without_args'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_run_without_args'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_run_without_args'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_run_without_args'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_run_without_args'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_run_without_args'"}, "return_value": "'tests/test_run.py::test_run_without_args'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_run_without_args'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_run_without_args'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_run_without_args'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_run_without_args'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_run_without_args'"}, "return_value": "'tests/test_run.py::test_run_without_args'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_run_without_args'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_disable_symbols'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_disable_symbols'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_disable_symbols'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_disable_symbols'"}, "return_value": "'tests/test_run.py::test_disable_symbols'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_disable_symbols'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_disable_symbols'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_disable_symbols'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_disable_symbols'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_disable_symbols'"}, "return_value": "'tests/test_run.py::test_disable_symbols'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_disable_symbols'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_disable_symbols'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_disable_symbols'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_disable_symbols'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_disable_symbols'"}, "return_value": "'tests/test_run.py::test_disable_symbols'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_disable_symbols'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_disable_symbols'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_disable_symbols'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_disable_symbols'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_disable_symbols'"}, "return_value": "'tests/test_run.py::test_disable_symbols'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_disable_symbols'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_disable_symbols'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_disable_symbols'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_disable_symbols'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_disable_symbols'"}, "return_value": "'tests/test_run.py::test_disable_symbols'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_disable_symbols'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_disable_symbols'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_disable_symbols'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_disable_symbols'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_disable_symbols'"}, "return_value": "'tests/test_run.py::test_disable_symbols'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_disable_symbols'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_disable_symbols'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_disable_symbols'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_disable_symbols'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_disable_symbols'"}, "return_value": "'tests/test_run.py::test_disable_symbols'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_disable_symbols'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_disable_symbols'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_disable_symbols'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_disable_symbols'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_disable_symbols'"}, "return_value": "'tests/test_run.py::test_disable_symbols'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_disable_symbols'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_disable_symbols'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_disable_symbols'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_disable_symbols'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_disable_symbols'"}, "return_value": "'tests/test_run.py::test_disable_symbols'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_disable_symbols'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_event_handlers'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_event_handlers'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_event_handlers'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_event_handlers'"}, "return_value": "'tests/test_run.py::test_event_handlers'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_event_handlers'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_event_handlers'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_event_handlers'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_event_handlers'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_event_handlers'"}, "return_value": "'tests/test_run.py::test_event_handlers'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_event_handlers'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_event_handlers'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_event_handlers'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_event_handlers'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_event_handlers'"}, "return_value": "'tests/test_run.py::test_event_handlers'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_event_handlers'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_event_handlers'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_event_handlers'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_event_handlers'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_event_handlers'"}, "return_value": "'tests/test_run.py::test_event_handlers'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_event_handlers'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_event_handlers'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_event_handlers'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_event_handlers'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_event_handlers'"}, "return_value": "'tests/test_run.py::test_event_handlers'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_event_handlers'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_event_handlers'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_event_handlers'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_event_handlers'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_event_handlers'"}, "return_value": "'tests/test_run.py::test_event_handlers'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_event_handlers'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_event_handlers'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_event_handlers'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_event_handlers'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_event_handlers'"}, "return_value": "'tests/test_run.py::test_event_handlers'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_event_handlers'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_event_handlers'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_event_handlers'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_event_handlers'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_event_handlers'"}, "return_value": "'tests/test_run.py::test_event_handlers'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_event_handlers'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_event_handlers'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_event_handlers'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_event_handlers'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_event_handlers'"}, "return_value": "'tests/test_run.py::test_event_handlers'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_event_handlers'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_failure'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_failure'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_failure'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_failure'"}, "return_value": "'tests/test_run.py::test_failure'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_failure'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_failure'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_failure'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_failure'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_failure'"}, "return_value": "'tests/test_run.py::test_failure'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_failure'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_failure'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_failure'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_failure'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_failure'"}, "return_value": "'tests/test_run.py::test_failure'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_failure'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_failure'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_failure'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_failure'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_failure'"}, "return_value": "'tests/test_run.py::test_failure'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_failure'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_failure'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_failure'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_failure'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_failure'"}, "return_value": "'tests/test_run.py::test_failure'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_failure'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_failure'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_failure'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_failure'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_failure'"}, "return_value": "'tests/test_run.py::test_failure'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_failure'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_failure'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_failure'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_failure'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_failure'"}, "return_value": "'tests/test_run.py::test_failure'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_failure'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_failure'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_failure'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_failure'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_failure'"}, "return_value": "'tests/test_run.py::test_failure'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_failure'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_failure'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_failure'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_failure'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_failure'"}, "return_value": "'tests/test_run.py::test_failure'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_failure'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_cancel'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_cancel'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_cancel'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_cancel'"}, "return_value": "'tests/test_run.py::test_cancel'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_cancel'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_cancel'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_cancel'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_cancel'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_cancel'"}, "return_value": "'tests/test_run.py::test_cancel'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_cancel'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_cancel'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_cancel'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_cancel'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_cancel'"}, "return_value": "'tests/test_run.py::test_cancel'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_cancel'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_cancel'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_cancel'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_cancel'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_cancel'"}, "return_value": "'tests/test_run.py::test_cancel'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_cancel'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_cancel'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_cancel'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_cancel'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_cancel'"}, "return_value": "'tests/test_run.py::test_cancel'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_cancel'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_cancel'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_cancel'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_cancel'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_cancel'"}, "return_value": "'tests/test_run.py::test_cancel'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_cancel'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_cancel'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_cancel'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_cancel'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_cancel'"}, "return_value": "'tests/test_run.py::test_cancel'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_cancel'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_cancel'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_cancel'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_cancel'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_cancel'"}, "return_value": "'tests/test_run.py::test_cancel'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_cancel'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_run.py::test_cancel'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_run.py::test_cancel'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_cancel'"}, "return_value": "'tests/test_run.py'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_cancel'"}, "return_value": "'tests/test_run.py::test_cancel'"}, {"func_args": {"nodeid": "'tests/test_run.py::test_cancel'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_sexp.py::test_parse'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_sexp.py::test_parse'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_sexp.py::test_parse'"}, "return_value": "'tests/test_sexp.py'"}, {"func_args": {"nodeid": "'tests/test_sexp.py::test_parse'"}, "return_value": "'tests/test_sexp.py::test_parse'"}, {"func_args": {"nodeid": "'tests/test_sexp.py::test_parse'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_trace.py::test_loader'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_trace.py::test_loader'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_trace.py::test_loader'"}, "return_value": "'tests/test_trace.py'"}, {"func_args": {"nodeid": "'tests/test_trace.py::test_loader'"}, "return_value": "'tests/test_trace.py::test_loader'"}, {"func_args": {"nodeid": "'tests/test_trace.py::test_loader'"}, "return_value": "None"}], "text": "def iterparentnodeids(nodeid: str) -> Iterator[str]:\n    \"\"\"Return the parent node IDs of a given node ID, inclusive.\n\n    For the node ID\n\n        \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_source\"\n\n    the result would be\n\n        \"\"\n        \"testing\"\n        \"testing/code\"\n        \"testing/code/test_excinfo.py\"\n        \"testing/code/test_excinfo.py::TestFormattedExcinfo\"\n        \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_source\"\n\n    Note that :: parts are only considered at the last / component.\n    \"\"\"\n    pos = 0\n    sep = SEP\n    yield \"\"\n    while True:\n        at = nodeid.find(sep, pos)\n        if at == -1 and sep == SEP:\n            sep = \"::\"\n        elif at == -1:\n            if nodeid:\n                yield nodeid\n            break\n        else:\n            if at:\n                yield nodeid[:at]\n            pos = at + len(sep)"}, "get_user": {"line": 173, "args": [{"func_args": {}, "return_value": "'root'"}], "text": "def get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\"\"\"\n    import getpass\n\n    try:\n        return getpass.getuser()\n    except (ImportError, KeyError):\n        return None"}, "_translate_non_printable": {"line": 204, "args": [{"func_args": {"s": "'yes'"}, "return_value": "'yes'"}, {"func_args": {"s": "'no'"}, "return_value": "'no'"}, {"func_args": {"s": "'cancel'"}, "return_value": "'cancel'"}, {"func_args": {"s": "'/opt/bin/bap'"}, "return_value": "'/opt/bin/bap'"}], "text": "def _translate_non_printable(s: str) -> str:\n    return s.translate(_non_printable_ascii_translate_table)"}, "ascii_escaped": {"line": 215, "args": [{"func_args": {"val": "'yes'"}, "return_value": "'yes'"}, {"func_args": {"val": "'no'"}, "return_value": "'no'"}, {"func_args": {"val": "'cancel'"}, "return_value": "'cancel'"}, {"func_args": {"val": "'/opt/bin/bap'"}, "return_value": "'/opt/bin/bap'"}], "text": "def ascii_escaped(val: Union[bytes, str]) -> str:\n    r\"\"\"If val is pure ASCII, return it as an str, otherwise, escape\n    bytes objects into a sequence of escaped bytes:\n\n    b'\\xc3\\xb4\\xc5\\xd6' -> r'\\xc3\\xb4\\xc5\\xd6'\n\n    and escapes unicode objects into a sequence of escaped unicode\n    ids, e.g.:\n\n    r'4\\nV\\U00043efa\\x0eMXWB\\x1e\\u3028\\u15fd\\xcd\\U0007d944'\n\n    Note:\n       The obvious \"v.decode('unicode-escape')\" will return\n       valid UTF-8 unicode if it finds them in bytes, but we\n       want to return escaped bytes for any byte, even if they match\n       a UTF-8 string.\n    \"\"\"\n    if isinstance(val, bytes):\n        ret = _bytes_to_ascii(val)\n    else:\n        ret = val.encode(\"unicode_escape\").decode(\"ascii\")\n    return _translate_non_printable(ret)"}, "wcswidth": {"line": 43, "args": [{"func_args": {"s": "''"}, "return_value": "0"}, {"func_args": {"s": "'tests/test_bap_comment.py .'"}, "return_value": "27"}, {"func_args": {"s": "'tests/test_bap_comment.py ..'"}, "return_value": "28"}, {"func_args": {"s": "'tests/test_bap_comment.py ...'"}, "return_value": "29"}, {"func_args": {"s": "'tests/test_bap_comment.py ....'"}, "return_value": "30"}, {"func_args": {"s": "'tests/test_bap_comment.py .....'"}, "return_value": "31"}, {"func_args": {"s": "'tests/test_bap_comment.py ......'"}, "return_value": "32"}, {"func_args": {"s": "'tests/test_bap_comment.py ......'"}, "return_value": "32"}, {"func_args": {"s": "'tests/test_config.py .'"}, "return_value": "22"}, {"func_args": {"s": "'tests/test_config.py .'"}, "return_value": "22"}, {"func_args": {"s": "'tests/test_ida.py .'"}, "return_value": "19"}, {"func_args": {"s": "'tests/test_ida.py ..'"}, "return_value": "20"}, {"func_args": {"s": "'tests/test_ida.py ...'"}, "return_value": "21"}, {"func_args": {"s": "'tests/test_ida.py ...'"}, "return_value": "21"}, {"func_args": {"s": "'tests/test_run.py .'"}, "return_value": "19"}, {"func_args": {"s": "'tests/test_run.py ..'"}, "return_value": "20"}, {"func_args": {"s": "'tests/test_run.py ...'"}, "return_value": "21"}, {"func_args": {"s": "'tests/test_run.py ....'"}, "return_value": "22"}, {"func_args": {"s": "'tests/test_run.py .....'"}, "return_value": "23"}, {"func_args": {"s": "'tests/test_run.py ......'"}, "return_value": "24"}, {"func_args": {"s": "'tests/test_run.py .......'"}, "return_value": "25"}, {"func_args": {"s": "'tests/test_run.py ........'"}, "return_value": "26"}, {"func_args": {"s": "'tests/test_run.py .........'"}, "return_value": "27"}, {"func_args": {"s": "'tests/test_run.py .........'"}, "return_value": "27"}, {"func_args": {"s": "'tests/test_sexp.py .'"}, "return_value": "20"}, {"func_args": {"s": "'tests/test_sexp.py .'"}, "return_value": "20"}, {"func_args": {"s": "'tests/test_trace.py .'"}, "return_value": "21"}], "text": "def wcswidth(s: str) -> int:\n    \"\"\"Determine how many columns are needed to display a string in a terminal.\n\n    Returns -1 if the string contains non-printable characters.\n    \"\"\"\n    width = 0\n    for c in unicodedata.normalize(\"NFC\", s):\n        wc = wcwidth(c)\n        if wc < 0:\n            return -1\n        width += wc\n    return width"}, "wcwidth": {"line": 4, "args": [{"func_args": {"c": "'t'"}, "return_value": "1"}, {"func_args": {"c": "'e'"}, "return_value": "1"}, {"func_args": {"c": "'s'"}, "return_value": "1"}, {"func_args": {"c": "'/'"}, "return_value": "1"}, {"func_args": {"c": "'_'"}, "return_value": "1"}, {"func_args": {"c": "'b'"}, "return_value": "1"}, {"func_args": {"c": "'a'"}, "return_value": "1"}, {"func_args": {"c": "'p'"}, "return_value": "1"}, {"func_args": {"c": "'c'"}, "return_value": "1"}, {"func_args": {"c": "'o'"}, "return_value": "1"}, {"func_args": {"c": "'m'"}, "return_value": "1"}, {"func_args": {"c": "'n'"}, "return_value": "1"}, {"func_args": {"c": "'.'"}, "return_value": "1"}, {"func_args": {"c": "'y'"}, "return_value": "1"}, {"func_args": {"c": "' '"}, "return_value": "1"}, {"func_args": {"c": "'f'"}, "return_value": "1"}, {"func_args": {"c": "'i'"}, "return_value": "1"}, {"func_args": {"c": "'g'"}, "return_value": "1"}, {"func_args": {"c": "'d'"}, "return_value": "1"}, {"func_args": {"c": "'r'"}, "return_value": "1"}, {"func_args": {"c": "'u'"}, "return_value": "1"}, {"func_args": {"c": "'x'"}, "return_value": "1"}]}, "parse": {"line": 41, "args": [{"func_args": {"ins": "'()'"}, "return_value": "[]"}, {"func_args": {"ins": "'hello'"}, "return_value": "'hello'"}, {"func_args": {"ins": "'\"hello world\"'"}, "return_value": "'\"hello world\"'"}, {"func_args": {"ins": "'(hello world)'"}, "return_value": "['hello', 'world']"}, {"func_args": {"ins": "'(() () ())'"}, "return_value": "[[], [], []]"}, {"func_args": {"ins": "\"hi'\""}, "return_value": "\"hi'\""}, {"func_args": {"ins": "'hello\"'"}, "return_value": "'hello\"'"}, {"func_args": {"ins": "'(hello\" cruel world\")'"}, "return_value": "['hello\"', 'cruel', 'world\"']"}, {"func_args": {"ins": "'(a (b c) c (d (e f) g) h'"}, "return_value": "['a', ['b', 'c'], 'c', ['d', ['e', 'f'], 'g'], 'h']"}], "text": "def parse(ins):\n    parser = Parser(ins)\n    return parser.next()"}, "unquote": {"line": 204, "args": [{"func_args": {"word": "'cruel'", "quotes": "'\\'\"'"}, "return_value": "'cruel'"}, {"func_args": {"word": "'world'", "quotes": "'\\'\"'"}, "return_value": "'world'"}, {"func_args": {"word": "'hello, world'", "quotes": "'\\'\"'"}, "return_value": "'hello, world'"}, {"func_args": {"word": "'cruel'", "quotes": "'\\'\"'"}, "return_value": "'cruel'"}, {"func_args": {"word": "'world'", "quotes": "'\\'\"'"}, "return_value": "'world'"}, {"func_args": {"word": "'real'", "quotes": "'\\'\"'"}, "return_value": "'real'"}, {"func_args": {"word": "'life'", "quotes": "'\\'\"'"}, "return_value": "'life'"}, {"func_args": {"word": "\"f'\"", "quotes": "'\\'\"'"}, "return_value": "\"f'\""}, {"func_args": {"word": "'1'", "quotes": "'\\'\"'"}, "return_value": "'1'"}, {"func_args": {"word": "'2'", "quotes": "'\\'\"'"}, "return_value": "'2'"}, {"func_args": {"word": "'3'", "quotes": "'\\'\"'"}, "return_value": "'3'"}, {"func_args": {"word": "\"thing'\"", "quotes": "'\\'\"'"}, "return_value": "\"thing'\""}, {"func_args": {"word": "'many things'", "quotes": "'\\'\"'"}, "return_value": "'many things'"}, {"func_args": {"word": "'strange \\\\ things'", "quotes": "'\\'\"'"}, "return_value": "'strange \\\\ things'"}, {"func_args": {"word": "'1'", "quotes": "'\\'\"'"}, "return_value": "'1'"}, {"func_args": {"word": "'2'", "quotes": "'\\'\"'"}, "return_value": "'2'"}, {"func_args": {"word": "'3'", "quotes": "'\\'\"'"}, "return_value": "'3'"}, {"func_args": {"word": "\"thing'\"", "quotes": "'\\'\"'"}, "return_value": "\"thing'\""}, {"func_args": {"word": "'many things'", "quotes": "'\\'\"'"}, "return_value": "'many things'"}, {"func_args": {"word": "'strange \\\\ things'", "quotes": "'\\'\"'"}, "return_value": "'strange \\\\ things'"}, {"func_args": {"word": "'{\"a\", \"b\", \"c\"}'", "quotes": "'\\'\"'"}, "return_value": "'{\"a\", \"b\", \"c\"}'"}, {"func_args": {"word": "'{\"a\", \"b\", \"c\"}'", "quotes": "'\\'\"'"}, "return_value": "'{\"a\", \"b\", \"c\"}'"}, {"func_args": {"word": "'{\"a\", \"b\", \"c\"}'", "quotes": "'\\'\"'"}, "return_value": "'{\"a\", \"b\", \"c\"}'"}, {"func_args": {"word": "'{\"a\", \"b\", \"c\"}'", "quotes": "'\\'\"'"}, "return_value": "'{\"a\", \"b\", \"c\"}'"}, {"func_args": {"word": "\"{can\\\\'t do}\"", "quotes": "'\\'\"'"}, "return_value": "\"{can\\\\'t do}\""}, {"func_args": {"word": "'bar'", "quotes": "'\\'\"'"}, "return_value": "'bar'"}, {"func_args": {"word": "'bar'", "quotes": "'\\'\"'"}, "return_value": "'bar'"}, {"func_args": {"word": "'baz'", "quotes": "'\\'\"'"}, "return_value": "'baz'"}, {"func_args": {"word": "'bar'", "quotes": "'\\'\"'"}, "return_value": "'bar'"}, {"func_args": {"word": "'bar'", "quotes": "'\\'\"'"}, "return_value": "'bar'"}, {"func_args": {"word": "'baz'", "quotes": "'\\'\"'"}, "return_value": "'baz'"}, {"func_args": {"word": "'bar'", "quotes": "'\\'\"'"}, "return_value": "'bar'"}, {"func_args": {"word": "'bar'", "quotes": "'\\'\"'"}, "return_value": "'bar'"}, {"func_args": {"word": "'baz'", "quotes": "'\\'\"'"}, "return_value": "'baz'"}, {"func_args": {"word": "'bar'", "quotes": "'\\'\"'"}, "return_value": "'bar'"}, {"func_args": {"word": "'bar'", "quotes": "'\\'\"'"}, "return_value": "'bar'"}, {"func_args": {"word": "'baz'", "quotes": "'\\'\"'"}, "return_value": "'baz'"}, {"func_args": {"word": "'bar'", "quotes": "'\\'\"'"}, "return_value": "'bar'"}, {"func_args": {"word": "'bar'", "quotes": "'\\'\"'"}, "return_value": "'bar'"}, {"func_args": {"word": "'baz'", "quotes": "'\\'\"'"}, "return_value": "'baz'"}, {"func_args": {"word": "'bar'", "quotes": "'\\'\"'"}, "return_value": "'bar'"}, {"func_args": {"word": "'bar'", "quotes": "'\\'\"'"}, "return_value": "'bar'"}, {"func_args": {"word": "'baz'", "quotes": "'\\'\"'"}, "return_value": "'baz'"}], "text": "def unquote(word, quotes='\\'\"'):\n    \"\"\"removes quotes from both sides of the word.\n\n    The quotes should occur on both sides of the word:\n\n    >>> unquote('\"hello\"')\n    'hello'\n\n    If a quote occurs only on one side of the word, then\n    the word is left intact:\n\n    >>> unquote('\"hello')\n    '\"hello'\n\n    The quotes that delimites the world should be equal, i.e.,\n    if the word is delimited with double quotes on the left and\n    a quote on the right, then it is not considered as delimited,\n    so it is not dequoted:\n\n    >>> unquote('\"hello\\\\'')\n    '\"hello\\\\''\n\n    Finally, only one layer of quotes is removed,\n\n    >>> unquote('\"\"hello\"\"')\n    '\"hello\"'\n    \"\"\"\n    if len(word) > 1 and word[0] == word[-1] \\\n       and word[0] in quotes and word[-1] in quotes:\n        return word[1:-1]\n    else:\n        return word"}, "dumps": {"line": 166, "args": [{"func_args": {"comm": "{'hello': []}"}, "return_value": "'BAP: hello'"}, {"func_args": {"comm": "{'hello': ['cruel', 'world'], 'nice': [], 'thing': []}"}, "return_value": "'BAP: nice,thing hello=cruel,world'"}, {"func_args": {"comm": "{'hello': [\"world'\"]}"}, "return_value": "'BAP: hello=\"world\\'\"'"}, {"func_args": {"comm": "{'x': [], 'y': [], 'z': [], 'a': ['1', '2', '3'], 'b': [\"thing'\"], 'c': ['many things'], 'd': ['strange \\\\ things']}"}, "return_value": "'BAP: x,y,z a=1,2,3 b=\"thing\\'\" c=\"many things\" d=\"strange \\\\ things\"'"}, {"func_args": {"comm": "{'x': [], 'y': [], 'z': [], 'a': ['1', '2', '3'], 'b': [\"thing'\"], 'c': ['many things'], 'd': ['strange \\\\ things']}"}, "return_value": "'BAP: x,y,z a=1,2,3 b=\"thing\\'\" c=\"many things\" d=\"strange \\\\ things\"'"}, {"func_args": {"comm": "{'chars': ['{\"a\", \"b\", \"c\"}']}"}, "return_value": "'BAP: chars=\"{\\\\\"a\\\\\", \\\\\"b\\\\\", \\\\\"c\\\\\"}\"'"}, {"func_args": {"comm": "{'foo': ['bar']}"}, "return_value": "'BAP: foo=bar'"}, {"func_args": {"comm": "{'foo': ['bar', 'baz']}"}, "return_value": "'BAP: foo=bar,baz'"}, {"func_args": {"comm": "{'foo': ['bar', 'baz'], 'bar': []}"}, "return_value": "'BAP: bar foo=bar,baz'"}, {"func_args": {"comm": "{'foo': ['bar']}"}, "return_value": "'BAP: foo=bar'"}, {"func_args": {"comm": "{'foo': ['bar', 'baz']}"}, "return_value": "'BAP: foo=bar,baz'"}, {"func_args": {"comm": "{'foo': ['bar', 'baz'], 'bar': []}"}, "return_value": "'BAP: bar foo=bar,baz'"}, {"func_args": {"comm": "{'foo': ['bar']}"}, "return_value": "'BAP: foo=bar'"}, {"func_args": {"comm": "{'foo': ['bar', 'baz']}"}, "return_value": "'BAP: foo=bar,baz'"}, {"func_args": {"comm": "{'foo': ['bar', 'baz'], 'bar': []}"}, "return_value": "'BAP: bar foo=bar,baz'"}, {"func_args": {"comm": "{'foo': ['bar']}"}, "return_value": "'BAP: foo=bar'"}, {"func_args": {"comm": "{'foo': ['bar', 'baz']}"}, "return_value": "'BAP: foo=bar,baz'"}, {"func_args": {"comm": "{'foo': ['bar', 'baz'], 'bar': []}"}, "return_value": "'BAP: bar foo=bar,baz'"}, {"func_args": {"comm": "{'foo': ['bar']}"}, "return_value": "'BAP: foo=bar'"}, {"func_args": {"comm": "{'foo': ['bar', 'baz']}"}, "return_value": "'BAP: foo=bar,baz'"}, {"func_args": {"comm": "{'foo': ['bar', 'baz'], 'bar': []}"}, "return_value": "'BAP: bar foo=bar,baz'"}, {"func_args": {"comm": "{'foo': ['bar']}"}, "return_value": "'BAP: foo=bar'"}, {"func_args": {"comm": "{'foo': ['bar', 'baz']}"}, "return_value": "'BAP: foo=bar,baz'"}, {"func_args": {"comm": "{'foo': ['bar', 'baz'], 'bar': []}"}, "return_value": "'BAP: bar foo=bar,baz'"}], "text": "def dumps(comm):\n    \"\"\"Dump dictionary into a comment string.\n\n    The representation is parseable with the parse function.\n    \"\"\"\n    keys = []\n    elts = []\n    for (key, values) in comm.items():\n        if values:\n            elts.append('{0}={1}'.format(key, ','.join(\n                quote(x) for x in values)))\n        else:\n            keys.append(key)\n    keys.sort()\n    elts.sort()\n    return ' '.join(x for x in\n                    ('BAP:', ','.join(keys), ' '.join(elts)) if x)"}, "quote": {"line": 185, "args": [{"func_args": {"token": "'cruel'"}, "return_value": "'cruel'"}, {"func_args": {"token": "'world'"}, "return_value": "'world'"}, {"func_args": {"token": "\"world'\""}, "return_value": "'\"world\\'\"'"}, {"func_args": {"token": "'1'"}, "return_value": "'1'"}, {"func_args": {"token": "'2'"}, "return_value": "'2'"}, {"func_args": {"token": "'3'"}, "return_value": "'3'"}, {"func_args": {"token": "\"thing'\""}, "return_value": "'\"thing\\'\"'"}, {"func_args": {"token": "'many things'"}, "return_value": "'\"many things\"'"}, {"func_args": {"token": "'strange \\\\ things'"}, "return_value": "'\"strange \\\\ things\"'"}, {"func_args": {"token": "'1'"}, "return_value": "'1'"}, {"func_args": {"token": "'2'"}, "return_value": "'2'"}, {"func_args": {"token": "'3'"}, "return_value": "'3'"}, {"func_args": {"token": "\"thing'\""}, "return_value": "'\"thing\\'\"'"}, {"func_args": {"token": "'many things'"}, "return_value": "'\"many things\"'"}, {"func_args": {"token": "'strange \\\\ things'"}, "return_value": "'\"strange \\\\ things\"'"}, {"func_args": {"token": "'{\"a\", \"b\", \"c\"}'"}, "return_value": "'\"{\\\\\"a\\\\\", \\\\\"b\\\\\", \\\\\"c\\\\\"}\"'"}, {"func_args": {"token": "'bar'"}, "return_value": "'bar'"}, {"func_args": {"token": "'bar'"}, "return_value": "'bar'"}, {"func_args": {"token": "'baz'"}, "return_value": "'baz'"}, {"func_args": {"token": "'bar'"}, "return_value": "'bar'"}, {"func_args": {"token": "'baz'"}, "return_value": "'baz'"}, {"func_args": {"token": "'bar'"}, "return_value": "'bar'"}, {"func_args": {"token": "'bar'"}, "return_value": "'bar'"}, {"func_args": {"token": "'baz'"}, "return_value": "'baz'"}, {"func_args": {"token": "'bar'"}, "return_value": "'bar'"}, {"func_args": {"token": "'baz'"}, "return_value": "'baz'"}, {"func_args": {"token": "'bar'"}, "return_value": "'bar'"}, {"func_args": {"token": "'bar'"}, "return_value": "'bar'"}, {"func_args": {"token": "'baz'"}, "return_value": "'baz'"}, {"func_args": {"token": "'bar'"}, "return_value": "'bar'"}, {"func_args": {"token": "'baz'"}, "return_value": "'baz'"}, {"func_args": {"token": "'bar'"}, "return_value": "'bar'"}, {"func_args": {"token": "'bar'"}, "return_value": "'bar'"}, {"func_args": {"token": "'baz'"}, "return_value": "'baz'"}, {"func_args": {"token": "'bar'"}, "return_value": "'bar'"}, {"func_args": {"token": "'baz'"}, "return_value": "'baz'"}, {"func_args": {"token": "'bar'"}, "return_value": "'bar'"}, {"func_args": {"token": "'bar'"}, "return_value": "'bar'"}, {"func_args": {"token": "'baz'"}, "return_value": "'baz'"}, {"func_args": {"token": "'bar'"}, "return_value": "'bar'"}, {"func_args": {"token": "'baz'"}, "return_value": "'baz'"}, {"func_args": {"token": "'bar'"}, "return_value": "'bar'"}, {"func_args": {"token": "'bar'"}, "return_value": "'bar'"}, {"func_args": {"token": "'baz'"}, "return_value": "'baz'"}, {"func_args": {"token": "'bar'"}, "return_value": "'bar'"}, {"func_args": {"token": "'baz'"}, "return_value": "'baz'"}], "text": "def quote(token):\n    \"\"\"delimit a token with quotes if needed.\n\n    The function guarantees that the string representation of the\n    token will be parsed into the same token. In case if a token\n    contains characters that are no in the set of WORDCHARS symbols,\n    that will lead to the splittage of the token during the lexing,\n    a pair of double quotes are added to prevent this.\n\n    >>> quote('hello, world')\n    '\"hello, world\"'\n    \"\"\"\n    if not token.startswith('\"') and set(token) - set(WORDCHARS):\n        return '\"{}\"'.format(''.join('\\\\'+c if c == '\"' else c\n                                     for c in token))\n    else:\n        return token"}, "is_valid": {"line": 159, "args": [{"func_args": {"comm": "'BAP: hello'"}, "return_value": "{'hello': []}"}, {"func_args": {"comm": "'BAP: hello,world'"}, "return_value": "{'hello': [], 'world': []}"}, {"func_args": {"comm": "'some comment'"}, "return_value": "False"}], "text": "def is_valid(comm):\n    try:\n        return comm.startswith('BAP:') and parse(comm)\n    except SyntaxError:\n            return False"}, "same_cmd": {"line": 107, "args": [{"func_args": {"cmd": "'which bap'", "args": "['which', 'bap']"}, "return_value": "True"}, {"func_args": {"cmd": "'which bap'", "args": "['which', 'bap']"}, "return_value": "True"}, {"func_args": {"cmd": "'which bap'", "args": "['which', 'bap']"}, "return_value": "True"}, {"func_args": {"cmd": "'which bap'", "args": "['which', 'bap']"}, "return_value": "True"}], "text": "def same_cmd(cmd, args):\n        return cmd == ' '.join(args)"}, "ask": {"line": 74, "args": [{"func_args": {"unk": "False", "path": "None", "msg": "'Path to bap'"}, "return_value": "None"}, {"func_args": {"unk": "False", "path": "None", "msg": "'Path to bap'"}, "return_value": "None"}, {"func_args": {"unk": "False", "path": "'/opt/bin/bap'", "msg": "'Path to bap'"}, "return_value": "None"}, {"func_args": {"unk": "False", "path": "'/opt/bin/bap'", "msg": "'Path to bap'"}, "return_value": "'/opt/bin/bap'"}], "text": "def ask(unk, path, msg):\n        if user == 'clever':\n            return path\n        elif user == 'stupid':\n            if len(param) > 0:\n                return param.pop(0)"}, "run_bap": {"line": 247, "args": [{"func_args": {"args": "'/opt/bin/bap list plugins'"}, "return_value": "None"}, {"func_args": {"args": "['/opt/bin/bap', NotImplemented, '--no-ida', '--read-symbols-from', '/tmp/bapq9dhc_2e/bap-ida0nkmh4ag.sym']"}, "return_value": "'exit 0'"}, {"func_args": {"args": "'/opt/bin/bap list plugins'"}, "return_value": "None"}, {"func_args": {"args": "['/opt/bin/bap', NotImplemented, '--no-ida']"}, "return_value": "'exit 0'"}, {"func_args": {"args": "'/opt/bin/bap list plugins'"}, "return_value": "None"}, {"func_args": {"args": "['/opt/bin/bap', NotImplemented, '--no-ida', '--read-symbols-from', '/tmp/bap6yxepryy/bap-idaxzw62b2r.sym']"}, "return_value": "'sleep 1'"}, {"func_args": {"args": "'/opt/bin/bap list plugins'"}, "return_value": "None"}, {"func_args": {"args": "['/opt/bin/bap', NotImplemented, '--no-ida', '--read-symbols-from', '/tmp/bapi1squlhn/bap-ida75e2k_et.sym']"}, "return_value": "'exit 1'"}, {"func_args": {"args": "'/opt/bin/bap list plugins'"}, "return_value": "None"}, {"func_args": {"args": "['/opt/bin/bap', NotImplemented, '--no-ida', '--read-symbols-from', '/tmp/bapzjzieouz/bap-idaypergjzs.sym']"}, "return_value": "'sleep 100'"}], "text": "def run_bap(args):\n        if args[0] == BAP_PATH:\n            res = bap.call(args) or 0\n            if isinstance(res, int):\n                return 'exit ' + str(res)\n            else:\n                return str(res)"}, "_read": {"line": 9, "args": [{"func_args": {}, "return_value": "{}"}, {"func_args": {}, "return_value": "{}"}, {"func_args": {}, "return_value": "{'default': ['foo\\thello']}"}, {"func_args": {}, "return_value": "{'default': ['foo\\thello']}"}, {"func_args": {}, "return_value": "{'default': ['foo\\thello']}"}, {"func_args": {}, "return_value": "{'default': ['foo\\ttrue\\t; Previously: foo\\thello']}"}, {"func_args": {}, "return_value": "{'default': ['foo\\ttrue\\t; Previously: foo\\thello']}"}, {"func_args": {}, "return_value": "{'default': ['foo\\ttrue\\t; Previously: foo\\thello']}"}, {"func_args": {}, "return_value": "{'default': ['foo\\ttrue\\t; Previously: foo\\thello'], 'foo': ['bar\\thello']}"}, {"func_args": {}, "return_value": "{'default': ['foo\\ttrue\\t; Previously: foo\\thello'], 'foo': ['bar\\thello']}"}, {"func_args": {}, "return_value": "{'default': ['foo\\ttrue\\t; Previously: foo\\thello'], 'foo': ['bar\\thello']}"}, {"func_args": {}, "return_value": "{'default': ['foo\\ttrue\\t; Previously: foo\\thello'], 'foo': ['bar\\ttrue\\t; Previously: bar\\thello']}"}, {"func_args": {}, "return_value": "{'default': ['foo\\ttrue\\t; Previously: foo\\thello'], 'foo': ['bar\\ttrue\\t; Previously: bar\\thello']}"}, {"func_args": {}, "return_value": "{'default': ['foo\\ttrue\\t; Previously: foo\\thello'], 'foo': ['bar\\ttrue\\t; Previously: bar\\thello']}"}, {"func_args": {}, "return_value": "{'default': ['foo\\ttrue\\t; Previously: foo\\thello'], 'foo': ['bar\\ttrue\\t; Previously: bar\\thello']}"}, {"func_args": {}, "return_value": "{'default': ['foo\\ttrue\\t; Previously: foo\\thello'], 'foo': ['bar\\ttrue\\t; Previously: bar\\thello']}"}, {"func_args": {}, "return_value": "{'default': ['foo\\ttrue\\t; Previously: foo\\thello'], 'foo': ['bar\\ttrue\\t; Previously: bar\\thello']}"}, {"func_args": {}, "return_value": "{'default': ['foo\\ttrue\\t; Previously: foo\\thello'], 'foo': ['bar\\ttrue\\t; Previously: bar\\thello']}"}, {"func_args": {}, "return_value": "{'default': ['foo\\ttrue\\t; Previously: foo\\thello'], 'foo': ['bar\\ttrue\\t; Previously: bar\\thello']}"}, {"func_args": {}, "return_value": "{'default': ['foo\\ttrue\\t; Previously: foo\\thello'], 'foo': ['bar\\ttrue\\t; Previously: bar\\thello']}"}, {"func_args": {}, "return_value": "{'default': ['foo\\ttrue\\t; Previously: foo\\thello', 'bap_executable_path\\t/opt/bin/bap'], 'foo': ['bar\\ttrue\\t; Previously: bar\\thello']}"}, {"func_args": {}, "return_value": "{'default': ['foo\\ttrue\\t; Previously: foo\\thello', 'bap_executable_path\\t/opt/bin/bap'], 'foo': ['bar\\ttrue\\t; Previously: bar\\thello']}"}, {"func_args": {}, "return_value": "{'default': ['foo\\ttrue\\t; Previously: foo\\thello', 'bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap'], 'foo': ['bar\\ttrue\\t; Previously: bar\\thello']}"}, {"func_args": {}, "return_value": "{'default': ['foo\\ttrue\\t; Previously: foo\\thello', 'bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap'], 'foo': ['bar\\ttrue\\t; Previously: bar\\thello']}"}, {"func_args": {}, "return_value": "{'default': ['foo\\ttrue\\t; Previously: foo\\thello', 'bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap'], 'foo': ['bar\\ttrue\\t; Previously: bar\\thello']}"}, {"func_args": {}, "return_value": "{'default': ['foo\\ttrue\\t; Previously: foo\\thello', 'bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap'], 'foo': ['bar\\ttrue\\t; Previously: bar\\thello']}"}, {"func_args": {}, "return_value": "{'default': ['foo\\ttrue\\t; Previously: foo\\thello', 'bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap'], 'foo': ['bar\\ttrue\\t; Previously: bar\\thello']}"}, {"func_args": {}, "return_value": "{'default': ['foo\\ttrue\\t; Previously: foo\\thello', 'bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap'], 'foo': ['bar\\ttrue\\t; Previously: bar\\thello']}"}, {"func_args": {}, "return_value": "{'default': ['foo\\ttrue\\t; Previously: foo\\thello', 'bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap'], 'foo': ['bar\\ttrue\\t; Previously: bar\\thello']}"}, {"func_args": {}, "return_value": "{'default': ['foo\\ttrue\\t; Previously: foo\\thello', 'bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap'], 'foo': ['bar\\ttrue\\t; Previously: bar\\thello']}"}, {"func_args": {}, "return_value": "{'default': ['foo\\ttrue\\t; Previously: foo\\thello', 'bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap'], 'foo': ['bar\\ttrue\\t; Previously: bar\\thello']}"}, {"func_args": {}, "return_value": "{'default': ['foo\\ttrue\\t; Previously: foo\\thello', 'bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap'], 'foo': ['bar\\ttrue\\t; Previously: bar\\thello']}"}, {"func_args": {}, "return_value": "{'default': ['foo\\ttrue\\t; Previously: foo\\thello', 'bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap'], 'foo': ['bar\\ttrue\\t; Previously: bar\\thello']}"}, {"func_args": {}, "return_value": "{'default': ['foo\\ttrue\\t; Previously: foo\\thello', 'bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap'], 'foo': ['bar\\ttrue\\t; Previously: bar\\thello']}"}, {"func_args": {}, "return_value": "{'default': ['foo\\ttrue\\t; Previously: foo\\thello', 'bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap'], 'foo': ['bar\\ttrue\\t; Previously: bar\\thello']}"}, {"func_args": {}, "return_value": "{'default': ['foo\\ttrue\\t; Previously: foo\\thello', 'bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap'], 'foo': ['bar\\ttrue\\t; Previously: bar\\thello']}"}, {"func_args": {}, "return_value": "{'default': ['foo\\ttrue\\t; Previously: foo\\thello', 'bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap'], 'foo': ['bar\\ttrue\\t; Previously: bar\\thello']}"}, {"func_args": {}, "return_value": "{'default': ['foo\\ttrue\\t; Previously: foo\\thello', 'bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap'], 'foo': ['bar\\ttrue\\t; Previously: bar\\thello']}"}, {"func_args": {}, "return_value": "{'default': ['foo\\ttrue\\t; Previously: foo\\thello', 'bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap'], 'foo': ['bar\\ttrue\\t; Previously: bar\\thello']}"}, {"func_args": {}, "return_value": "{'default': ['foo\\ttrue\\t; Previously: foo\\thello', 'bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap'], 'foo': ['bar\\ttrue\\t; Previously: bar\\thello']}"}, {"func_args": {}, "return_value": "{'default': ['foo\\ttrue\\t; Previously: foo\\thello', 'bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap\\t; Previously: bap_executable_path\\t/opt/bin/bap'], 'foo': ['bar\\ttrue\\t; Previously: bar\\thello']}"}], "text": "def _read():\n    \"parse the config file\"\n    if not os.path.exists(CFG_PATH):\n        return {}\n    cfg = {'default': []}\n    with open(CFG_PATH, 'r') as src:\n        current_section = 'default'\n        for line in src.read().split('\\n'):\n            if len(line) == 0:  # Empty line\n                continue\n            elif line[0] == '.':  # Section\n                current_section = line[1:]\n                if current_section not in cfg:\n                    cfg[current_section] = []\n            else:\n                cfg[current_section].append(line)\n    return cfg"}, "get": {"line": 42, "args": [{"func_args": {"path": "'foo'", "default": "None"}, "return_value": "None"}, {"func_args": {"path": "'foo'", "default": "None"}, "return_value": "'hello'"}, {"func_args": {"path": "'foo'", "default": "'0'"}, "return_value": "'hello'"}, {"func_args": {"path": "'foo'", "default": "'0'"}, "return_value": "'true'"}, {"func_args": {"path": "'foo.bar'", "default": "None"}, "return_value": "None"}, {"func_args": {"path": "'foo.bar'", "default": "None"}, "return_value": "'hello'"}, {"func_args": {"path": "'foo.bar'", "default": "'0'"}, "return_value": "'hello'"}, {"func_args": {"path": "'foo.bar'", "default": "'0'"}, "return_value": "'true'"}, {"func_args": {"path": "'bap_executable_path'", "default": "None"}, "return_value": "None"}, {"func_args": {"path": "'bap_executable_path'", "default": "None"}, "return_value": "None"}, {"func_args": {"path": "'bap_executable_path'", "default": "None"}, "return_value": "None"}, {"func_args": {"path": "'bap_executable_path'", "default": "None"}, "return_value": "None"}, {"func_args": {"path": "'bap_executable_path'", "default": "None"}, "return_value": "None"}, {"func_args": {"path": "'bap_executable_path'", "default": "None"}, "return_value": "None"}, {"func_args": {"path": "'bap_executable_path'", "default": "None"}, "return_value": "None"}, {"func_args": {"path": "'bap_executable_path'", "default": "None"}, "return_value": "'/opt/bin/bap'"}, {"func_args": {"path": "'bap_executable_path'", "default": "None"}, "return_value": "'/opt/bin/bap'"}, {"func_args": {"path": "'bap_executable_path'", "default": "None"}, "return_value": "'/opt/bin/bap'"}, {"func_args": {"path": "'ida_api.enabled'", "default": "'0'"}, "return_value": "'0'"}, {"func_args": {"path": "'bap_executable_path'", "default": "None"}, "return_value": "'/opt/bin/bap'"}, {"func_args": {"path": "'bap_executable_path'", "default": "None"}, "return_value": "'/opt/bin/bap'"}, {"func_args": {"path": "'ida_api.enabled'", "default": "'0'"}, "return_value": "'0'"}, {"func_args": {"path": "'bap_executable_path'", "default": "None"}, "return_value": "'/opt/bin/bap'"}, {"func_args": {"path": "'bap_executable_path'", "default": "None"}, "return_value": "'/opt/bin/bap'"}, {"func_args": {"path": "'ida_api.enabled'", "default": "'0'"}, "return_value": "'0'"}, {"func_args": {"path": "'bap_executable_path'", "default": "None"}, "return_value": "'/opt/bin/bap'"}, {"func_args": {"path": "'bap_executable_path'", "default": "None"}, "return_value": "'/opt/bin/bap'"}, {"func_args": {"path": "'ida_api.enabled'", "default": "'0'"}, "return_value": "'0'"}, {"func_args": {"path": "'bap_executable_path'", "default": "None"}, "return_value": "'/opt/bin/bap'"}, {"func_args": {"path": "'bap_executable_path'", "default": "None"}, "return_value": "'/opt/bin/bap'"}, {"func_args": {"path": "'ida_api.enabled'", "default": "'0'"}, "return_value": "'0'"}], "text": "def get(path, default=None):\n    \"\"\"Get value from key:value in the config file.\"\"\"\n    key = Key(path)\n    cfg = _read()\n    if key.section not in cfg:\n        return default\n    for line in cfg[key.section]:\n        if line[0] == ';':  # Comment\n            continue\n        elif line.split()[0] == key.value:\n            return line.split()[1]\n    return default"}, "is_set": {"line": 56, "args": [{"func_args": {"key": "'foo'"}, "return_value": "False"}, {"func_args": {"key": "'foo'"}, "return_value": "True"}, {"func_args": {"key": "'foo.bar'"}, "return_value": "False"}, {"func_args": {"key": "'foo.bar'"}, "return_value": "True"}, {"func_args": {"key": "'ida_api.enabled'"}, "return_value": "False"}, {"func_args": {"key": "'ida_api.enabled'"}, "return_value": "False"}, {"func_args": {"key": "'ida_api.enabled'"}, "return_value": "False"}, {"func_args": {"key": "'ida_api.enabled'"}, "return_value": "False"}, {"func_args": {"key": "'ida_api.enabled'"}, "return_value": "False"}], "text": "def is_set(key):\n    \"\"\"returns True if the value is set,\n    i.e., if it is `1`, `true` or `yes`.\n    returns False, if key is not present in the dictionary,\n    or has any other value.\n    \"\"\"\n    return get(key, default='0').lower() in ('1', 'true', 'yes')"}, "preadline": {"line": 387, "args": [{"func_args": {"cmd": "['which', 'bap']"}, "return_value": "None"}, {"func_args": {"cmd": "['which', 'bap']"}, "return_value": "None"}, {"func_args": {"cmd": "['which', 'bap']"}, "return_value": "'/opt/bin/bap'"}, {"func_args": {"cmd": "['which', 'bap']"}, "return_value": "'/opt/bin/bap'"}], "text": "def preadline(cmd):\n    try:\n        res = subprocess.check_output(cmd, universal_newlines=True)\n        return res.strip()\n    except (OSError, subprocess.CalledProcessError):\n        return None"}, "system": {"line": 348, "args": [{"func_args": {}, "return_value": "None"}, {"func_args": {}, "return_value": "None"}, {"func_args": {}, "return_value": "'/opt/bin/bap'"}, {"func_args": {}, "return_value": "'/opt/bin/bap'"}]}, "confirm": {"line": 366, "args": [{"func_args": {"msg": "\"Are you sure you don't want to set path?\""}, "return_value": "True"}, {"func_args": {"msg": "\"Are you sure you don't want to set path?\""}, "return_value": "True"}, {"func_args": {"msg": "\"Are you sure you don't want to set path?\""}, "return_value": "True"}], "text": "def confirm(msg):\n    return idaapi.askyn_c(idaapi.ASKBTN_YES, msg) == idaapi.ASKBTN_YES"}, "ask_user": {"line": 370, "args": [{"func_args": {"default_path": "None"}, "return_value": "None"}, {"func_args": {"default_path": "None"}, "return_value": "None"}, {"func_args": {"default_path": "'/opt/bin/bap'"}, "return_value": "None"}, {"func_args": {"default_path": "'/opt/bin/bap'"}, "return_value": "'/opt/bin/bap'"}], "text": "def ask_user(default_path):\n    while True:\n        bap_path = idaapi.askfile_c(False, default_path, 'Path to bap')\n        if bap_path is None:\n            if confirm('Are you sure you don\\'t want to set path?'):\n                return None\n            else:\n                continue\n        if not bap_path.endswith('bap'):\n            if not confirm(\"Path does not end with bap. Confirm?\"):\n                continue\n        if not os.path.isfile(bap_path):\n            if not confirm(\"Path does not point to a file. Confirm?\"):\n                continue\n        return bap_path"}, "get_input_file_path": {"line": 16, "args": [{"func_args": {}, "return_value": "NotImplemented"}, {"func_args": {}, "return_value": "NotImplemented"}, {"func_args": {}, "return_value": "NotImplemented"}, {"func_args": {}, "return_value": "NotImplemented"}, {"func_args": {}, "return_value": "NotImplemented"}], "text": "def get_input_file_path() : return NotImplemented"}, "satisfy_requirements": {"line": 274, "args": [{"func_args": {"requests": "[]"}, "return_value": "[]"}, {"func_args": {"requests": "[]"}, "return_value": "[]"}, {"func_args": {"requests": "['regs', 'mems']"}, "return_value": "['regs', 'mems']"}, {"func_args": {"requests": "[]"}, "return_value": "[]"}, {"func_args": {"requests": "['machine-id']"}, "return_value": "['machine-id']"}, {"func_args": {"requests": "[]"}, "return_value": "[]"}, {"func_args": {"requests": "[]"}, "return_value": "[]"}, {"func_args": {"requests": "[]"}, "return_value": "[]"}, {"func_args": {"requests": "['regs', 'mems', 'machine-id']"}, "return_value": "['regs', 'mems', 'machine-id']"}, {"func_args": {"requests": "[]"}, "return_value": "[]"}, {"func_args": {"requests": "['pc']"}, "return_value": "['pc']"}, {"func_args": {"requests": "[]"}, "return_value": "[]"}, {"func_args": {"requests": "[]"}, "return_value": "[]"}, {"func_args": {"requests": "[]"}, "return_value": "[]"}, {"func_args": {"requests": "[]"}, "return_value": "[]"}, {"func_args": {"requests": "['regs', 'mems', 'machine-id', 'pc']"}, "return_value": "['regs', 'mems', 'machine-id', 'pc']"}], "text": "def satisfy_requirements(requests):\n    \"\"\"ensures that each request gets what it ``requires``.\n\n    Accepts a list of handler names and returns a list of handler\n    names that guarantees that if a handler has a non-empty\n    ``requires`` field, then all names in this list will precede the\n    name of this handler. It also guarantees that each handler will\n    occur at most once.\n    \"\"\"\n    solution = []\n    for name in requests:\n        solution += satisfy_requirements(handlers[name].requires)\n        solution.append(name)\n\n    # now we need to dedup the solution - a handler must occur at most once\n    result = []\n    for h in solution:\n        if h not in result:\n            result.append(h)\n    return result"}, "<lambda>": {"line": 141, "args": [{"func_args": {"s": "{}"}, "return_value": "None"}, {"func_args": {"s": "{'regs': {}}"}, "return_value": "None"}, {"func_args": {"s": "{'regs': {}, 'mems': {}}"}, "return_value": "None"}, {"func_args": {"s": "{'regs': {}, 'mems': {}}"}, "return_value": "None"}, {"func_args": {"s": "{'regs': {}, 'mems': {}}"}, "return_value": "None"}, {"func_args": {"s": "{'regs': {}, 'mems': {}, 'machine-id': 0}"}, "return_value": "None"}, {"func_args": {"s": "{'regs': {}, 'mems': {}, 'machine-id': 0}"}, "return_value": "None"}, {"func_args": {"s": "{'regs': {}, 'mems': {}, 'machine-id': 0}"}, "return_value": "None"}, {"func_args": {"s": "{'regs': {}, 'mems': {}, 'machine-id': 0}"}, "return_value": "None"}, {"func_args": {"state": "{'regs': {}, 'mems': {}, 'machine-id': 0, 'pc': 16, 'event': 'pc-changed'}"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {}, 'mems': {}, 'machine-id': 0, 'pc': 16, 'event': 'pc-changed'}"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {}, 'mems': {}, 'machine-id': 0, 'pc': 16, 'event': 'written'}"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {}, 'mems': {}, 'machine-id': 0, 'pc': 16, 'event': 'written'}"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {'RAX': {'value': 1, 'type': '64u', 'id': 1}}, 'mems': {}, 'machine-id': 0, 'pc': 16, 'event': 'written'}"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {'RAX': {'value': 1, 'type': '64u', 'id': 1}}, 'mems': {}, 'machine-id': 0, 'pc': 16, 'event': 'written'}"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {'RAX': {'value': 1, 'type': '64u', 'id': 1}, 'RBX': {'value': 2, 'type': '64u', 'id': 4}}, 'mems': {}, 'machine-id': 1, 'pc': 16, 'event': 'machine-fork'}"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {'RAX': {'value': 1, 'type': '64u', 'id': 1}, 'RBX': {'value': 2, 'type': '64u', 'id': 4}}, 'mems': {}, 'machine-id': 1, 'pc': 16, 'event': 'machine-fork'}"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {'RAX': {'value': 1, 'type': '64u', 'id': 1}, 'RBX': {'value': 2, 'type': '64u', 'id': 4}}, 'mems': {}, 'machine-id': 1, 'pc': 16, 'event': 'written'}"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {'RAX': {'value': 1, 'type': '64u', 'id': 1}, 'RBX': {'value': 2, 'type': '64u', 'id': 4}}, 'mems': {}, 'machine-id': 1, 'pc': 16, 'event': 'written'}"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {'RAX': {'value': 1, 'type': '64u', 'id': 1}, 'RBX': {'value': 2, 'type': '64u', 'id': 4}, 'ZF': {'value': 1, 'type': '1u', 'id': 32}}, 'mems': {}, 'machine-id': 0, 'pc': 16, 'event': 'machine-switch'}"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {'RAX': {'value': 1, 'type': '64u', 'id': 1}, 'RBX': {'value': 2, 'type': '64u', 'id': 4}, 'ZF': {'value': 1, 'type': '1u', 'id': 32}}, 'mems': {}, 'machine-id': 0, 'pc': 16, 'event': 'machine-switch'}"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {'RAX': {'value': 1, 'type': '64u', 'id': 1}, 'RBX': {'value': 2, 'type': '64u', 'id': 4}, 'ZF': {'value': 1, 'type': '1u', 'id': 32}}, 'mems': {}, 'machine-id': 0, 'pc': 17, 'event': 'pc-changed'}"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {'RAX': {'value': 1, 'type': '64u', 'id': 1}, 'RBX': {'value': 2, 'type': '64u', 'id': 4}, 'ZF': {'value': 1, 'type': '1u', 'id': 32}}, 'mems': {}, 'machine-id': 0, 'pc': 17, 'event': 'pc-changed'}"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {}, 'mems': {}, 'machine-id': 0, 'pc': 17, 'event': 'stored'}"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {}, 'mems': {}, 'machine-id': 0, 'pc': 17, 'event': 'stored'}"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {}, 'mems': {1024: {'value': 222, 'type': '8u', 'id': 706}}, 'machine-id': 0, 'pc': 17, 'event': 'incident-location'}"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {}, 'mems': {1024: {'value': 222, 'type': '8u', 'id': 706}}, 'machine-id': 0, 'pc': 17, 'event': 'incident-location'}"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {}, 'mems': {1024: {'value': 222, 'type': '8u', 'id': 706}}, 'machine-id': 1, 'pc': 17, 'event': 'machine-switch'}"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {}, 'mems': {1024: {'value': 222, 'type': '8u', 'id': 706}}, 'machine-id': 1, 'pc': 17, 'event': 'machine-switch'}"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {}, 'mems': {1024: {'value': 222, 'type': '8u', 'id': 706}}, 'machine-id': 1, 'pc': 16, 'event': 'pc-changed'}"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {}, 'mems': {1024: {'value': 222, 'type': '8u', 'id': 706}}, 'machine-id': 1, 'pc': 16, 'event': 'pc-changed'}"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {}, 'mems': {}, 'machine-id': 1, 'pc': 16, 'event': 'written'}"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {}, 'mems': {}, 'machine-id': 1, 'pc': 16, 'event': 'written'}"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {'RAX': {'value': 2, 'type': '64u', 'id': 3}}, 'mems': {}, 'machine-id': 1, 'pc': 17, 'event': 'pc-changed'}"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {'RAX': {'value': 2, 'type': '64u', 'id': 3}}, 'mems': {}, 'machine-id': 1, 'pc': 17, 'event': 'pc-changed'}"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {}, 'mems': {}, 'machine-id': 1, 'pc': 17, 'event': 'call'}"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {}, 'mems': {}, 'machine-id': 1, 'pc': 17, 'event': 'call'}"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {}, 'mems': {}, 'machine-id': 1, 'pc': 1, 'event': 'pc-changed'}"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {}, 'mems': {}, 'machine-id': 1, 'pc': 1, 'event': 'pc-changed'}"}, "return_value": "False"}, {"func_args": {"state": "{'regs': {}, 'mems': {}, 'machine-id': 1, 'pc': 1, 'event': 'written'}"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {}, 'mems': {}, 'machine-id': 1, 'pc': 1, 'event': 'written'}"}, "return_value": "False"}, {"func_args": {"state": "{'regs': {}, 'mems': {}, 'machine-id': 1, 'pc': 18, 'event': 'pc-changed'}"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {}, 'mems': {}, 'machine-id': 1, 'pc': 18, 'event': 'pc-changed'}"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {}, 'mems': {}, 'machine-id': 1, 'pc': 18, 'event': 'written'}"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {}, 'mems': {}, 'machine-id': 1, 'pc': 18, 'event': 'written'}"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {'RAX': {'value': 2, 'type': '64u', 'id': 3}}, 'mems': {}, 'machine-id': 2, 'pc': 18, 'event': 'machine-fork'}"}, "return_value": "False"}, {"func_args": {"state": "{'regs': {'RAX': {'value': 2, 'type': '64u', 'id': 3}}, 'mems': {}, 'machine-id': 2, 'pc': 18, 'event': 'stored'}"}, "return_value": "False"}]}, "word": {"line": 257, "args": [{"func_args": {"x": "'0x10:64u'"}, "return_value": "{'value': 16, 'type': '64u'}"}, {"func_args": {"x": "'1:64u'"}, "return_value": "{'value': 1, 'type': '64u'}"}, {"func_args": {"x": "'2:64u'"}, "return_value": "{'value': 2, 'type': '64u'}"}, {"func_args": {"x": "'1:1u'"}, "return_value": "{'value': 1, 'type': '1u'}"}, {"func_args": {"x": "'0x11:64u'"}, "return_value": "{'value': 17, 'type': '64u'}"}, {"func_args": {"x": "'0xDE:8u'"}, "return_value": "{'value': 222, 'type': '8u'}"}, {"func_args": {"x": "'0x400:64u#42'"}, "return_value": "{'value': 1024, 'type': '64u#42'}"}, {"func_args": {"x": "'0x10:64u'"}, "return_value": "{'value': 16, 'type': '64u'}"}, {"func_args": {"x": "'2:64u'"}, "return_value": "{'value': 2, 'type': '64u'}"}, {"func_args": {"x": "'0x11:64u'"}, "return_value": "{'value': 17, 'type': '64u'}"}, {"func_args": {"x": "'0x1:64u'"}, "return_value": "{'value': 1, 'type': '64u'}"}, {"func_args": {"x": "'0x12:64u'"}, "return_value": "{'value': 18, 'type': '64u'}"}, {"func_args": {"x": "'2:64u'"}, "return_value": "{'value': 2, 'type': '64u'}"}], "text": "def word(x):\n    \"parses a Primus word into a ``value``, ``type`` dictionary\"\n    w, t = x.split(':')\n    return {\n        'value': int(w, 0),\n        'type': t\n    }"}, "filter_machine": {"line": 250, "args": [{"func_args": {"state": "{'regs': {}, 'mems': {}, 'machine-id': 0, 'pc': 16, 'event': 'pc-changed'}", "id": "[0, 1]"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {}, 'mems': {}, 'machine-id': 0, 'pc': 16, 'event': 'written'}", "id": "[0, 1]"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {'RAX': {'value': 1, 'type': '64u', 'id': 1}}, 'mems': {}, 'machine-id': 0, 'pc': 16, 'event': 'written'}", "id": "[0, 1]"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {'RAX': {'value': 1, 'type': '64u', 'id': 1}, 'RBX': {'value': 2, 'type': '64u', 'id': 4}}, 'mems': {}, 'machine-id': 1, 'pc': 16, 'event': 'machine-fork'}", "id": "[0, 1]"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {'RAX': {'value': 1, 'type': '64u', 'id': 1}, 'RBX': {'value': 2, 'type': '64u', 'id': 4}}, 'mems': {}, 'machine-id': 1, 'pc': 16, 'event': 'written'}", "id": "[0, 1]"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {'RAX': {'value': 1, 'type': '64u', 'id': 1}, 'RBX': {'value': 2, 'type': '64u', 'id': 4}, 'ZF': {'value': 1, 'type': '1u', 'id': 32}}, 'mems': {}, 'machine-id': 0, 'pc': 16, 'event': 'machine-switch'}", "id": "[0, 1]"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {'RAX': {'value': 1, 'type': '64u', 'id': 1}, 'RBX': {'value': 2, 'type': '64u', 'id': 4}, 'ZF': {'value': 1, 'type': '1u', 'id': 32}}, 'mems': {}, 'machine-id': 0, 'pc': 17, 'event': 'pc-changed'}", "id": "[0, 1]"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {}, 'mems': {}, 'machine-id': 0, 'pc': 17, 'event': 'stored'}", "id": "[0, 1]"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {}, 'mems': {1024: {'value': 222, 'type': '8u', 'id': 706}}, 'machine-id': 0, 'pc': 17, 'event': 'incident-location'}", "id": "[0, 1]"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {}, 'mems': {1024: {'value': 222, 'type': '8u', 'id': 706}}, 'machine-id': 1, 'pc': 17, 'event': 'machine-switch'}", "id": "[0, 1]"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {}, 'mems': {1024: {'value': 222, 'type': '8u', 'id': 706}}, 'machine-id': 1, 'pc': 16, 'event': 'pc-changed'}", "id": "[0, 1]"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {}, 'mems': {}, 'machine-id': 1, 'pc': 16, 'event': 'written'}", "id": "[0, 1]"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {'RAX': {'value': 2, 'type': '64u', 'id': 3}}, 'mems': {}, 'machine-id': 1, 'pc': 17, 'event': 'pc-changed'}", "id": "[0, 1]"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {}, 'mems': {}, 'machine-id': 1, 'pc': 17, 'event': 'call'}", "id": "[0, 1]"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {}, 'mems': {}, 'machine-id': 1, 'pc': 1, 'event': 'pc-changed'}", "id": "[0, 1]"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {}, 'mems': {}, 'machine-id': 1, 'pc': 1, 'event': 'written'}", "id": "[0, 1]"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {}, 'mems': {}, 'machine-id': 1, 'pc': 18, 'event': 'pc-changed'}", "id": "[0, 1]"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {}, 'mems': {}, 'machine-id': 1, 'pc': 18, 'event': 'written'}", "id": "[0, 1]"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {'RAX': {'value': 2, 'type': '64u', 'id': 3}}, 'mems': {}, 'machine-id': 2, 'pc': 18, 'event': 'machine-fork'}", "id": "[0, 1]"}, "return_value": "False"}, {"func_args": {"state": "{'regs': {'RAX': {'value': 2, 'type': '64u', 'id': 3}}, 'mems': {}, 'machine-id': 2, 'pc': 18, 'event': 'stored'}", "id": "[0, 1]"}, "return_value": "False"}]}, "filter_range": {"line": 240, "args": [{"func_args": {"state": "{'regs': {}, 'mems': {}, 'machine-id': 0, 'pc': 16, 'event': 'pc-changed'}", "lo": "16", "hi": "32"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {}, 'mems': {}, 'machine-id': 0, 'pc': 16, 'event': 'written'}", "lo": "16", "hi": "32"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {'RAX': {'value': 1, 'type': '64u', 'id': 1}}, 'mems': {}, 'machine-id': 0, 'pc': 16, 'event': 'written'}", "lo": "16", "hi": "32"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {'RAX': {'value': 1, 'type': '64u', 'id': 1}, 'RBX': {'value': 2, 'type': '64u', 'id': 4}}, 'mems': {}, 'machine-id': 1, 'pc': 16, 'event': 'machine-fork'}", "lo": "16", "hi": "32"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {'RAX': {'value': 1, 'type': '64u', 'id': 1}, 'RBX': {'value': 2, 'type': '64u', 'id': 4}}, 'mems': {}, 'machine-id': 1, 'pc': 16, 'event': 'written'}", "lo": "16", "hi": "32"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {'RAX': {'value': 1, 'type': '64u', 'id': 1}, 'RBX': {'value': 2, 'type': '64u', 'id': 4}, 'ZF': {'value': 1, 'type': '1u', 'id': 32}}, 'mems': {}, 'machine-id': 0, 'pc': 16, 'event': 'machine-switch'}", "lo": "16", "hi": "32"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {'RAX': {'value': 1, 'type': '64u', 'id': 1}, 'RBX': {'value': 2, 'type': '64u', 'id': 4}, 'ZF': {'value': 1, 'type': '1u', 'id': 32}}, 'mems': {}, 'machine-id': 0, 'pc': 17, 'event': 'pc-changed'}", "lo": "16", "hi": "32"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {}, 'mems': {}, 'machine-id': 0, 'pc': 17, 'event': 'stored'}", "lo": "16", "hi": "32"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {}, 'mems': {1024: {'value': 222, 'type': '8u', 'id': 706}}, 'machine-id': 0, 'pc': 17, 'event': 'incident-location'}", "lo": "16", "hi": "32"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {}, 'mems': {1024: {'value': 222, 'type': '8u', 'id': 706}}, 'machine-id': 1, 'pc': 17, 'event': 'machine-switch'}", "lo": "16", "hi": "32"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {}, 'mems': {1024: {'value': 222, 'type': '8u', 'id': 706}}, 'machine-id': 1, 'pc': 16, 'event': 'pc-changed'}", "lo": "16", "hi": "32"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {}, 'mems': {}, 'machine-id': 1, 'pc': 16, 'event': 'written'}", "lo": "16", "hi": "32"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {'RAX': {'value': 2, 'type': '64u', 'id': 3}}, 'mems': {}, 'machine-id': 1, 'pc': 17, 'event': 'pc-changed'}", "lo": "16", "hi": "32"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {}, 'mems': {}, 'machine-id': 1, 'pc': 17, 'event': 'call'}", "lo": "16", "hi": "32"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {}, 'mems': {}, 'machine-id': 1, 'pc': 1, 'event': 'pc-changed'}", "lo": "16", "hi": "32"}, "return_value": "False"}, {"func_args": {"state": "{'regs': {}, 'mems': {}, 'machine-id': 1, 'pc': 1, 'event': 'written'}", "lo": "16", "hi": "32"}, "return_value": "False"}, {"func_args": {"state": "{'regs': {}, 'mems': {}, 'machine-id': 1, 'pc': 18, 'event': 'pc-changed'}", "lo": "16", "hi": "32"}, "return_value": "True"}, {"func_args": {"state": "{'regs': {}, 'mems': {}, 'machine-id': 1, 'pc': 18, 'event': 'written'}", "lo": "16", "hi": "32"}, "return_value": "True"}]}, "value": {"line": 266, "args": [{"func_args": {"x": "'1:64u#1'"}, "return_value": "{'value': 1, 'type': '64u', 'id': 1}"}, {"func_args": {"x": "'2:64u#4'"}, "return_value": "{'value': 2, 'type': '64u', 'id': 4}"}, {"func_args": {"x": "'1:1u#32'"}, "return_value": "{'value': 1, 'type': '1u', 'id': 32}"}, {"func_args": {"x": "'0xDE:8u#706'"}, "return_value": "{'value': 222, 'type': '8u', 'id': 706}"}, {"func_args": {"x": "'2:64u#3'"}, "return_value": "{'value': 2, 'type': '64u', 'id': 3}"}, {"func_args": {"x": "'2:64u#3'"}, "return_value": "{'value': 2, 'type': '64u', 'id': 3}"}], "text": "def value(x):\n    \"parses a Primus value into a ``value``, ``type``, ``id`` dictionary\"\n    w, id = x.split('#')\n    w = word(w)\n    w['id'] = int(id)\n    return w"}}