{"get_line_width": {"line": 71, "args": [{"func_args": {"text": "'        redirect=True,'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        assert_same_host=True,'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        timeout=_Default,'"}, "return_value": "25"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        pool_timeout=None,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        release_conn=None,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        chunked=False,'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        body_pos=None,'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        **response_kw'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    ):'"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            Get a connection from the pool and perform an HTTP request. This is the'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            lowest level call for making a request, so you'll need to specify all\""}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            the raw details.'"}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            .. note::'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"               More commonly, it's appropriate to use a convenience method provided\""}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               by :class:`.RequestMethods`, such as :meth:`request`.'"}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            .. note::'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               `release_conn` will only behave as expected if'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               `preload_content=False` because we want to make'"}, "return_value": "62"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               `preload_content=False` the default behaviour someday soon without'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               breaking backwards compatibility.'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param method:'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                HTTP request method (such as GET, POST, PUT, etc.)'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param url:'"}, "return_value": "23"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                The URL to perform the request on.'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param body:'"}, "return_value": "24"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Data to send in the request body, either :class:`str`, :class:`bytes`,'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                an iterable of :class:`str`/:class:`bytes`, or a file-like object.'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param headers:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Dictionary of custom headers to send, such as User-Agent,'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If-None-Match, etc. If None, pool headers are used. If provided,'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                these headers completely replace any pool-specific headers.'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param retries:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Configure the number of retries to allow before raising a'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :class:`~urllib3.exceptions.MaxRetryError` exception.'"}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Pass ``None`` to retry until you receive a response. Pass a'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :class:`~urllib3.util.retry.Retry` object for fine-grained control'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                over different types of retries.'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Pass an integer number to retry connection errors that many times,'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                but no other types of errors. Pass zero to never retry.'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If ``False``, then retries are disabled and any exception is raised'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                immediately. Also, instead of raising a MaxRetryError on redirects,'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                the redirect response will be returned.'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param redirect:'"}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If True, automatically handle redirects (status codes 301, 302,'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                303, 307, 308). Each redirect counts as a retry. Disabling retries'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                will disable redirect, too.'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param assert_same_host:'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If ``True``, will make sure that the host of the pool requests is'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                consistent else will raise HostChangedError. When ``False``, you can'"}, "return_value": "84"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                use the pool on an HTTP proxy and request foreign hosts.'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param timeout:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If specified, overrides the default timeout for this one'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                request. It may be a float (in seconds) or an instance of'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :class:`urllib3.util.Timeout`.'"}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param pool_timeout:'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If set and the pool is set to block=True, then this method will'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                block for ``pool_timeout`` seconds and raise EmptyPoolError if no'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                connection is available within the time period.'"}, "return_value": "63"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param release_conn:'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If False, then the urlopen call will not release the connection'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                back into the pool once a response is received (but will release if'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                you read the entire contents of the response such as when'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                `preload_content=True`). This is useful if you're not preloading\""}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                the response's content immediately. You will need to call\""}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                ``r.release_conn()`` on the response ``r`` to return the connection'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                back into the pool. If None, it takes the value of'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                ``response_kw.get('preload_content', True)``.\""}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param chunked:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If True, urllib3 will send the body using chunked transfer'"}, "return_value": "74"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                encoding. Otherwise, urllib3 will send the body using the standard'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                content-length form. Defaults to False.'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param int body_pos:'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Position to seek to in file-like body in the event of a retry or'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                redirect. Typically this won't need to be set because urllib3 will\""}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                auto-populate the value when needed.'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param \\\\\\\\**response_kw:'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Additional parameters are passed to'"}, "return_value": "51"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :meth:`urllib3.response.HTTPResponse.from_httplib`'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        parsed_url = parse_url(url)'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        destination_scheme = parsed_url.scheme'"}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if headers is None:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            headers = self.headers'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if not isinstance(retries, Retry):'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if release_conn is None:'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            release_conn = response_kw.get(\"preload_content\", True)'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Check host'"}, "return_value": "20"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if assert_same_host and not self.is_same_host(url):'"}, "return_value": "59"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            raise HostChangedError(self, url, retries)'"}, "return_value": "54"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        # Ensure that the URL we're connecting to is properly encoded\""}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if url.startswith(\"/\"):'"}, "return_value": "31"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            url = six.ensure_str(_encode_target(url))'"}, "return_value": "53"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        else:'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            url = six.ensure_str(parsed_url.url)'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        conn = None'"}, "return_value": "19"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Track whether `conn` needs to be released before'"}, "return_value": "58"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # returning/raising/recursing. Update this variable if necessary, and'"}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # leave `release_conn` constant throughout the function. That way, if'"}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # the function recurses, the original value of `release_conn` will be'"}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # passed down into the recursive call, and its value will be respected.'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        #'"}, "return_value": "9"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # See issue #651 [1] for details.'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        #'"}, "return_value": "9"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # [1] <https://github.com/urllib3/urllib3/issues/651>'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        release_this_conn = release_conn'"}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        http_tunnel_required = connection_requires_http_tunnel('"}, "return_value": "63"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            self.proxy, self.proxy_config, destination_scheme'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        )'"}, "return_value": "9"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Merge the proxy headers. Only done when not using HTTP CONNECT. We'"}, "return_value": "76"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # have to copy the headers dict so we can safely change it without those'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        # changes being reflected in anyone else's copy.\""}, "return_value": "56"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if not http_tunnel_required:'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            headers = headers.copy()'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            headers.update(self.proxy_headers)'"}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Must keep the exception bound to a separate variable or else Python 3'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # complains about UnboundLocalError.'"}, "return_value": "44"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        err = None'"}, "return_value": "18"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Keep track of whether we cleanly exited the except block. This'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # ensures we do proper cleanup in finally.'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        clean_exit = False'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Rewind body position, if needed. Record current position'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # for future rewinds in the event of a redirect/retry.'"}, "return_value": "62"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        body_pos = set_file_position(body, body_pos)'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        try:'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Request a connection from the queue.'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            timeout_obj = self._get_timeout(timeout)'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            conn = self._get_conn(timeout=pool_timeout)'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            conn.timeout = timeout_obj.connect_timeout'"}, "return_value": "54"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            is_new_proxy_conn = self.proxy is not None and not getattr('"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                conn, \"sock\", None'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            )'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if is_new_proxy_conn and http_tunnel_required:'"}, "return_value": "58"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                self._prepare_proxy(conn)'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Make the request on the httplib connection object.'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>           httplib_response = self._make_request('"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                conn,'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                method,'"}, "return_value": "23"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                url,'"}, "return_value": "20"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                timeout=timeout_obj,'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                body=body,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                headers=headers,'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                chunked=chunked,'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            )'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/urllib3/connectionpool.py'"}, "return_value": "63"}, {"func_args": {"text": "':703: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0xffffa49b3310>'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'conn = <docker.transport.unixconn.UnixHTTPConnection object at 0xffffa49b31c0>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"method = 'GET'\""}, "return_value": "14"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"url = '/v1.18/images/json?filter=shipwright%2Fbase&only_ids=0&all=0'\""}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'timeout = Timeout(connect=60, read=60, total=None), chunked = False'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"httplib_request_kw = {'body': None, 'headers': {'User-Agent': 'docker-sdk-python/2.7.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}}\""}, "return_value": "170"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'timeout_obj = Timeout(connect=60, read=60, total=None)'"}, "return_value": "54"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def _make_request('"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    ):'"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            Perform a request on a given urllib connection object taken from our'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            pool.'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param conn:'"}, "return_value": "24"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                a connection from one of our connection pools'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param timeout:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Socket timeout in seconds for the request. This can be a'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                float or integer, which will set the same timeout value for'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                the socket connect and the socket read, or an instance of'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :class:`urllib3.util.Timeout`, which gives you more fine-grained'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                control over your timeouts.'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self.num_requests += 1'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        timeout_obj = self._get_timeout(timeout)'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        timeout_obj.start_connect()'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        conn.timeout = timeout_obj.connect_timeout'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Trigger any extra validation we need to do.'"}, "return_value": "53"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        try:'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            self._validate_conn(conn)'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        except (SocketTimeout, BaseSSLError) as e:'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            raise'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # conn.request() calls http.client.*.request, not the method in'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # urllib3.request. It also calls makefile (recv) on the socket.'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        try:'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if chunked:'"}, "return_value": "23"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                conn.request_chunked(method, url, **httplib_request_kw)'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            else:'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>               conn.request(method, url, **httplib_request_kw)'"}, "return_value": "63"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/urllib3/connectionpool.py'"}, "return_value": "63"}, {"func_args": {"text": "':398: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnection object at 0xffffa49b31c0>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"method = 'GET'\""}, "return_value": "14"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"url = '/v1.18/images/json?filter=shipwright%2Fbase&only_ids=0&all=0'\""}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'body = None'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"headers = {'User-Agent': 'docker-sdk-python/2.7.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\""}, "return_value": "132"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def request(self, method, url, body=None, headers={}, *,'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                encode_chunked=False):'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"Send a complete request to the server.\"\"\"'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       self._send_request(method, url, body, headers, encode_chunked)'"}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'/usr/local/lib/python3.8/http/client.py'"}, "return_value": "39"}, {"func_args": {"text": "':1256: '"}, "return_value": "7"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnection object at 0xffffa49b31c0>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"method = 'GET'\""}, "return_value": "14"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"url = '/v1.18/images/json?filter=shipwright%2Fbase&only_ids=0&all=0'\""}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'body = None'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"headers = {'User-Agent': 'docker-sdk-python/2.7.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\""}, "return_value": "132"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'encode_chunked = False'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def _send_request(self, method, url, body, headers, encode_chunked):'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Honor explicitly requested Host: and Accept-Encoding: headers.'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        header_names = frozenset(k.lower() for k in headers)'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        skips = {}'"}, "return_value": "18"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        if 'host' in header_names:\""}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            skips['skip_host'] = 1\""}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        if 'accept-encoding' in header_names:\""}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            skips['skip_accept_encoding'] = 1\""}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self.putrequest(method, url, **skips)'"}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # chunked encoding will happen if HTTP/1.1 is used and either'"}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # the caller passes encode_chunked=True or the following'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # conditions hold:'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # 1. content-length has not been explicitly set'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # 2. the body is a file or iterable, but not a str or bytes-like'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # 3. Transfer-Encoding has NOT been explicitly set by the caller'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        if 'content-length' not in header_names:\""}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # only chunk body if not explicitly set for backwards'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # compatibility, assuming the client code is already handling the'"}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # chunking'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            if 'transfer-encoding' not in header_names:\""}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                # if content-length cannot be automatically determined, fall'"}, "return_value": "76"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                # back to chunked encoding'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                encode_chunked = False'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                content_length = self._get_content_length(body, method)'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                if content_length is None:'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    if body is not None:'"}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        if self.debuglevel > 0:'"}, "return_value": "47"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                            print('Unable to determine size of %r' % body)\""}, "return_value": "74"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        encode_chunked = True'"}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                        self.putheader('Transfer-Encoding', 'chunked')\""}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                else:'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                    self.putheader('Content-Length', str(content_length))\""}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        else:'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            encode_chunked = False'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        for hdr, value in headers.items():'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            self.putheader(hdr, value)'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if isinstance(body, str):'"}, "return_value": "33"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # RFC 2616 Section 3.7.1 says that text default has a'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # default charset of iso-8859-1.'"}, "return_value": "44"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            body = _encode(body, 'body')\""}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       self.endheaders(body, encode_chunked=encode_chunked)'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'/usr/local/lib/python3.8/http/client.py'"}, "return_value": "39"}, {"func_args": {"text": "':1302: '"}, "return_value": "7"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnection object at 0xffffa49b31c0>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'message_body = None'"}, "return_value": "19"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def endheaders(self, message_body=None, *, encode_chunked=False):'"}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"Indicate that the last header line has been sent to the server.'"}, "return_value": "74"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            This method sends the request to the server.  The optional message_body'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            argument can be used to pass a message body associated with the'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            request.'"}, "return_value": "20"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if self.__state == _CS_REQ_STARTED:'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            self.__state = _CS_REQ_SENT'"}, "return_value": "39"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        else:'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            raise CannotSendHeader()'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       self._send_output(message_body, encode_chunked=encode_chunked)'"}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'/usr/local/lib/python3.8/http/client.py'"}, "return_value": "39"}, {"func_args": {"text": "':1251: '"}, "return_value": "7"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnection object at 0xffffa49b31c0>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'message_body = None, encode_chunked = False'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def _send_output(self, message_body=None, encode_chunked=False):'"}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"Send the currently buffered request and clear the buffer.'"}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            Appends an extra \\\\\\\\r\\\\\\\\n to the buffer.'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            A message_body may be specified, to be appended to the request.'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self._buffer.extend((b\"\", b\"\"))'"}, "return_value": "39"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        msg = b\"\\\\r\\\\n\".join(self._buffer)'"}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        del self._buffer[:]'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       self.send(msg)'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'/usr/local/lib/python3.8/http/client.py'"}, "return_value": "39"}, {"func_args": {"text": "':1011: '"}, "return_value": "7"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnection object at 0xffffa49b31c0>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"data = b'GET /v1.18/images/json?filter=shipwright%2Fbase&only_ids=0&all=0 HTTP/1.1\\\\r\\\\nHost: localhost\\\\r\\\\nUser-Agent: docker-sdk-python/2.7.0\\\\r\\\\nAccept-Encoding: gzip, deflate\\\\r\\\\nAccept: */*\\\\r\\\\nConnection: keep-alive\\\\r\\\\n\\\\r\\\\n'\""}, "return_value": "224"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def send(self, data):'"}, "return_value": "25"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"Send `data\\' to the server.'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            ``data`` can be a string object, a bytes object, an array object, a'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            file-like object that supports a .read() method, or an iterable object.'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if self.sock is None:'"}, "return_value": "29"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if self.auto_open:'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>               self.connect()'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'/usr/local/lib/python3.8/http/client.py'"}, "return_value": "39"}, {"func_args": {"text": "':951: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnection object at 0xffffa49b31c0>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def connect(self):'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        sock.settimeout(self.timeout)'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       sock.connect(self.unix_socket)'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'E       FileNotFoundError: [Errno 2] No such file or directory'"}, "return_value": "62"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/docker/transport/unixconn.py'"}, "return_value": "66"}, {"func_args": {"text": "':46: FileNotFoundError'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'During handling of the above exception, another exception occurred:'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixAdapter object at 0xffffa49b36a0>'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'request = <PreparedRequest [GET]>, stream = False'"}, "return_value": "49"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'proxies = OrderedDict()'"}, "return_value": "23"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):'"}, "return_value": "94"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"Sends PreparedRequest object. Returns Response object.'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param stream: (optional) Whether to stream the request content.'"}, "return_value": "76"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param timeout: (optional) How long to wait for the server to send'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                data before giving up, as a float, or a :ref:`(connect timeout,'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                read timeout) <timeouts>` tuple.'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :type timeout: float or tuple or urllib3 Timeout object'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param verify: (optional) Either a boolean, in which case it controls whether'"}, "return_value": "89"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                we verify the server's TLS certificate, or a string, in which case it\""}, "return_value": "85"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                must be a path to a CA bundle to use'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param cert: (optional) Any user-provided SSL certificate to be trusted.'"}, "return_value": "84"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param proxies: (optional) The proxies dictionary to apply to the request.'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :rtype: requests.Response'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        try:'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            conn = self.get_connection(request.url, proxies)'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        except LocationValueError as e:'"}, "return_value": "39"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            raise InvalidURL(e, request=request)'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self.cert_verify(conn, request.url, verify, cert)'"}, "return_value": "57"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        url = self.request_url(request, proxies)'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)'"}, "return_value": "108"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        chunked = not (request.body is None or 'Content-Length' in request.headers)\""}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if isinstance(timeout, tuple):'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            try:'"}, "return_value": "16"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                connect, read = timeout'"}, "return_value": "39"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                timeout = TimeoutSauce(connect=connect, read=read)'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            except ValueError as e:'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                # this may raise a string formatting error.'"}, "return_value": "59"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                err = (\"Invalid timeout {}. Pass a (connect, read) \"'"}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                       \"timeout tuple, or a single float to set \"'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                       \"both timeouts to the same value\".format(timeout))'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                raise ValueError(err)'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        elif isinstance(timeout, TimeoutSauce):'"}, "return_value": "47"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            pass'"}, "return_value": "16"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        else:'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            timeout = TimeoutSauce(connect=timeout, read=timeout)'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        try:'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if not chunked:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>               resp = conn.urlopen('"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    method=request.method,'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    url=url,'"}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    body=request.body,'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    headers=request.headers,'"}, "return_value": "44"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    redirect=False,'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    assert_same_host=False,'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    preload_content=False,'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    decode_content=False,'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    retries=self.max_retries,'"}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    timeout=timeout'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                )'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/requests/adapters.py'"}, "return_value": "58"}, {"func_args": {"text": "':440: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0xffffa49b3310>'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"method = 'GET'\""}, "return_value": "14"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"url = '/v1.18/images/json?filter=shipwright%2Fbase&only_ids=0&all=0'\""}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'body = None'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"headers = {'User-Agent': 'docker-sdk-python/2.7.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\""}, "return_value": "132"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'redirect = False, assert_same_host = False'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'release_conn = False, chunked = False, body_pos = None'"}, "return_value": "54"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"response_kw = {'decode_content': False, 'preload_content': False}\""}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/v1.18/images/json', query='filter=shipwright%2Fbase&only_ids=0&all=0', fragment=None)\""}, "return_value": "155"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'destination_scheme = None, conn = None, release_this_conn = True'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'http_tunnel_required = False, err = None, clean_exit = False'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def urlopen('"}, "return_value": "16"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self,'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        method,'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        url,'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        body=None,'"}, "return_value": "18"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        headers=None,'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        retries=None,'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        redirect=True,'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        assert_same_host=True,'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        timeout=_Default,'"}, "return_value": "25"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        pool_timeout=None,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        release_conn=None,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        chunked=False,'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        body_pos=None,'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        **response_kw'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    ):'"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            Get a connection from the pool and perform an HTTP request. This is the'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            lowest level call for making a request, so you'll need to specify all\""}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            the raw details.'"}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            .. note::'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"               More commonly, it's appropriate to use a convenience method provided\""}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               by :class:`.RequestMethods`, such as :meth:`request`.'"}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            .. note::'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               `release_conn` will only behave as expected if'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               `preload_content=False` because we want to make'"}, "return_value": "62"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               `preload_content=False` the default behaviour someday soon without'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               breaking backwards compatibility.'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param method:'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                HTTP request method (such as GET, POST, PUT, etc.)'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param url:'"}, "return_value": "23"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                The URL to perform the request on.'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param body:'"}, "return_value": "24"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Data to send in the request body, either :class:`str`, :class:`bytes`,'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                an iterable of :class:`str`/:class:`bytes`, or a file-like object.'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param headers:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Dictionary of custom headers to send, such as User-Agent,'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If-None-Match, etc. If None, pool headers are used. If provided,'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                these headers completely replace any pool-specific headers.'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param retries:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Configure the number of retries to allow before raising a'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :class:`~urllib3.exceptions.MaxRetryError` exception.'"}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Pass ``None`` to retry until you receive a response. Pass a'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :class:`~urllib3.util.retry.Retry` object for fine-grained control'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                over different types of retries.'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Pass an integer number to retry connection errors that many times,'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                but no other types of errors. Pass zero to never retry.'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If ``False``, then retries are disabled and any exception is raised'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                immediately. Also, instead of raising a MaxRetryError on redirects,'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                the redirect response will be returned.'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param redirect:'"}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If True, automatically handle redirects (status codes 301, 302,'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                303, 307, 308). Each redirect counts as a retry. Disabling retries'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                will disable redirect, too.'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param assert_same_host:'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If ``True``, will make sure that the host of the pool requests is'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                consistent else will raise HostChangedError. When ``False``, you can'"}, "return_value": "84"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                use the pool on an HTTP proxy and request foreign hosts.'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param timeout:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If specified, overrides the default timeout for this one'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                request. It may be a float (in seconds) or an instance of'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :class:`urllib3.util.Timeout`.'"}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param pool_timeout:'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If set and the pool is set to block=True, then this method will'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                block for ``pool_timeout`` seconds and raise EmptyPoolError if no'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                connection is available within the time period.'"}, "return_value": "63"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param release_conn:'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If False, then the urlopen call will not release the connection'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                back into the pool once a response is received (but will release if'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                you read the entire contents of the response such as when'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                `preload_content=True`). This is useful if you're not preloading\""}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                the response's content immediately. You will need to call\""}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                ``r.release_conn()`` on the response ``r`` to return the connection'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                back into the pool. If None, it takes the value of'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                ``response_kw.get('preload_content', True)``.\""}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param chunked:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If True, urllib3 will send the body using chunked transfer'"}, "return_value": "74"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                encoding. Otherwise, urllib3 will send the body using the standard'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                content-length form. Defaults to False.'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param int body_pos:'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Position to seek to in file-like body in the event of a retry or'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                redirect. Typically this won't need to be set because urllib3 will\""}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                auto-populate the value when needed.'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param \\\\\\\\**response_kw:'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Additional parameters are passed to'"}, "return_value": "51"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :meth:`urllib3.response.HTTPResponse.from_httplib`'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        parsed_url = parse_url(url)'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        destination_scheme = parsed_url.scheme'"}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if headers is None:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            headers = self.headers'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if not isinstance(retries, Retry):'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if release_conn is None:'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            release_conn = response_kw.get(\"preload_content\", True)'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Check host'"}, "return_value": "20"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if assert_same_host and not self.is_same_host(url):'"}, "return_value": "59"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            raise HostChangedError(self, url, retries)'"}, "return_value": "54"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        # Ensure that the URL we're connecting to is properly encoded\""}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if url.startswith(\"/\"):'"}, "return_value": "31"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            url = six.ensure_str(_encode_target(url))'"}, "return_value": "53"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        else:'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            url = six.ensure_str(parsed_url.url)'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        conn = None'"}, "return_value": "19"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Track whether `conn` needs to be released before'"}, "return_value": "58"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # returning/raising/recursing. Update this variable if necessary, and'"}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # leave `release_conn` constant throughout the function. That way, if'"}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # the function recurses, the original value of `release_conn` will be'"}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # passed down into the recursive call, and its value will be respected.'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        #'"}, "return_value": "9"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # See issue #651 [1] for details.'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        #'"}, "return_value": "9"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # [1] <https://github.com/urllib3/urllib3/issues/651>'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        release_this_conn = release_conn'"}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        http_tunnel_required = connection_requires_http_tunnel('"}, "return_value": "63"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            self.proxy, self.proxy_config, destination_scheme'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        )'"}, "return_value": "9"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Merge the proxy headers. Only done when not using HTTP CONNECT. We'"}, "return_value": "76"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # have to copy the headers dict so we can safely change it without those'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        # changes being reflected in anyone else's copy.\""}, "return_value": "56"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if not http_tunnel_required:'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            headers = headers.copy()'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            headers.update(self.proxy_headers)'"}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Must keep the exception bound to a separate variable or else Python 3'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # complains about UnboundLocalError.'"}, "return_value": "44"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        err = None'"}, "return_value": "18"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Keep track of whether we cleanly exited the except block. This'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # ensures we do proper cleanup in finally.'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        clean_exit = False'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Rewind body position, if needed. Record current position'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # for future rewinds in the event of a redirect/retry.'"}, "return_value": "62"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        body_pos = set_file_position(body, body_pos)'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        try:'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Request a connection from the queue.'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            timeout_obj = self._get_timeout(timeout)'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            conn = self._get_conn(timeout=pool_timeout)'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            conn.timeout = timeout_obj.connect_timeout'"}, "return_value": "54"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            is_new_proxy_conn = self.proxy is not None and not getattr('"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                conn, \"sock\", None'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            )'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if is_new_proxy_conn and http_tunnel_required:'"}, "return_value": "58"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                self._prepare_proxy(conn)'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Make the request on the httplib connection object.'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            httplib_response = self._make_request('"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                conn,'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                method,'"}, "return_value": "23"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                url,'"}, "return_value": "20"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                timeout=timeout_obj,'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                body=body,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                headers=headers,'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                chunked=chunked,'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            )'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            # If we're going to release the connection in ``finally:``, then\""}, "return_value": "76"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            # the response doesn't need to know about the connection. Otherwise\""}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            # it will also try to release it and we'll have a double-release\""}, "return_value": "76"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # mess.'"}, "return_value": "19"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            response_conn = conn if not release_conn else None'"}, "return_value": "62"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Pass method to Response for length checking'"}, "return_value": "57"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            response_kw[\"request_method\"] = method'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            # Import httplib's response into our own wrapper object\""}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            response = self.ResponseCls.from_httplib('"}, "return_value": "53"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                httplib_response,'"}, "return_value": "33"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                pool=self,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                connection=response_conn,'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                retries=retries,'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                **response_kw'"}, "return_value": "29"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            )'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Everything went great!'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            clean_exit = True'"}, "return_value": "29"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        except EmptyPoolError:'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            # Didn't get a connection from the pool, no need to clean up\""}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            clean_exit = True'"}, "return_value": "29"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            release_this_conn = False'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            raise'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        except ('"}, "return_value": "16"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            TimeoutError,'"}, "return_value": "25"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            HTTPException,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            SocketError,'"}, "return_value": "24"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            ProtocolError,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            BaseSSLError,'"}, "return_value": "25"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            SSLError,'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            CertificateError,'"}, "return_value": "29"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        ) as e:'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Discard the connection for these exceptions. It will be'"}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # replaced during the next _get_conn() call.'"}, "return_value": "56"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            clean_exit = False'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            def _is_ssl_error_message_from_http_proxy(ssl_error):'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                # We're trying to detect the message 'WRONG_VERSION_NUMBER' but\""}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                # SSLErrors are kinda all over the place when it comes to the message,'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                # so we try to cover our bases here!'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                message = \" \".join(re.split(\"[^a-z]\", str(ssl_error).lower()))'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                return ('"}, "return_value": "24"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    \"wrong version number\" in message or \"unknown protocol\" in message'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                )'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Try to detect a common user error with proxies which is to'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            # set an HTTP proxy to be HTTPS when it should be 'http://'\""}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            # (ie {'http': 'http://proxy', 'https': 'https://proxy'})\""}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Instead we add a nice error message and point to a URL.'"}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if ('"}, "return_value": "16"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                isinstance(e, BaseSSLError)'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                and self.proxy'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                and _is_ssl_error_message_from_http_proxy(e)'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            ):'"}, "return_value": "14"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                e = ProxyError('"}, "return_value": "31"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    \"Your proxy appears to only use HTTP and not HTTPS, \"'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    \"try changing your proxy URL to be HTTP. See: \"'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    \"https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html\"'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    \"#https-proxy-error-http-proxy\",'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    SSLError(e),'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                )'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            elif isinstance(e, (BaseSSLError, CertificateError)):'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                e = SSLError(e)'"}, "return_value": "31"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                e = ProxyError(\"Cannot connect to proxy.\", e)'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            elif isinstance(e, (SocketError, HTTPException)):'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                e = ProtocolError(\"Connection aborted.\", e)'"}, "return_value": "59"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>           retries = retries.increment('"}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            )'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/urllib3/connectionpool.py'"}, "return_value": "63"}, {"func_args": {"text": "':785: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = Retry(total=0, connect=None, read=False, redirect=None, status=None)'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"method = 'GET'\""}, "return_value": "14"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"url = '/v1.18/images/json?filter=shipwright%2Fbase&only_ids=0&all=0'\""}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'response = None'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"error = ProtocolError('Connection aborted.', FileNotFoundError(2, 'No such file or directory'))\""}, "return_value": "95"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_pool = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0xffffa49b3310>'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_stacktrace = <traceback object at 0xffff9d3f7880>'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def increment('"}, "return_value": "18"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self,'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        method=None,'"}, "return_value": "20"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        url=None,'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        response=None,'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        error=None,'"}, "return_value": "19"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        _pool=None,'"}, "return_value": "19"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        _stacktrace=None,'"}, "return_value": "25"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    ):'"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"Return a new Retry object with incremented retry counters.'"}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param response: A response object, or None, if the server did not'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                return a response.'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :type response: :class:`~urllib3.response.HTTPResponse`'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param Exception error: An error encountered during the request, or'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                None if the response was received successfully.'"}, "return_value": "63"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :return: A new ``Retry`` object.'"}, "return_value": "44"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if self.total is False and error:'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Disabled, indicate to re-raise the error.'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            raise six.reraise(type(error), error, _stacktrace)'"}, "return_value": "62"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        total = self.total'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if total is not None:'"}, "return_value": "29"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            total -= 1'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        connect = self.connect'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        read = self.read'"}, "return_value": "24"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        redirect = self.redirect'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        status_count = self.status'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        other = self.other'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        cause = \"unknown\"'"}, "return_value": "25"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        status = None'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        redirect_location = None'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if error and self._is_connection_error(error):'"}, "return_value": "54"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Connect retry?'"}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if connect is False:'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                raise six.reraise(type(error), error, _stacktrace)'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            elif connect is not None:'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                connect -= 1'"}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        elif error and self._is_read_error(error):'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Read retry?'"}, "return_value": "25"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if read is False or not self._is_method_retryable(method):'"}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>               raise six.reraise(type(error), error, _stacktrace)'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/urllib3/util/retry.py'"}, "return_value": "59"}, {"func_args": {"text": "':550: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"tp = <class 'urllib3.exceptions.ProtocolError'>, value = None, tb = None\""}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def reraise(tp, value, tb=None):'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        try:'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if value is None:'"}, "return_value": "29"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                value = tp()'"}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if value.__traceback__ is not tb:'"}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>               raise value.with_traceback(tb)'"}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/urllib3/packages/six.py'"}, "return_value": "61"}, {"func_args": {"text": "':769: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0xffffa49b3310>'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"method = 'GET'\""}, "return_value": "14"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"url = '/v1.18/images/json?filter=shipwright%2Fbase&only_ids=0&all=0'\""}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'body = None'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"headers = {'User-Agent': 'docker-sdk-python/2.7.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\""}, "return_value": "132"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'redirect = False, assert_same_host = False'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'release_conn = False, chunked = False, body_pos = None'"}, "return_value": "54"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"response_kw = {'decode_content': False, 'preload_content': False}\""}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/v1.18/images/json', query='filter=shipwright%2Fbase&only_ids=0&all=0', fragment=None)\""}, "return_value": "155"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'destination_scheme = None, conn = None, release_this_conn = True'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'http_tunnel_required = False, err = None, clean_exit = False'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def urlopen('"}, "return_value": "16"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self,'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        method,'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        url,'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        body=None,'"}, "return_value": "18"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        headers=None,'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        retries=None,'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        redirect=True,'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        assert_same_host=True,'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        timeout=_Default,'"}, "return_value": "25"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        pool_timeout=None,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        release_conn=None,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        chunked=False,'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        body_pos=None,'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        **response_kw'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    ):'"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            Get a connection from the pool and perform an HTTP request. This is the'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            lowest level call for making a request, so you'll need to specify all\""}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            the raw details.'"}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            .. note::'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"               More commonly, it's appropriate to use a convenience method provided\""}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               by :class:`.RequestMethods`, such as :meth:`request`.'"}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            .. note::'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               `release_conn` will only behave as expected if'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               `preload_content=False` because we want to make'"}, "return_value": "62"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               `preload_content=False` the default behaviour someday soon without'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               breaking backwards compatibility.'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param method:'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                HTTP request method (such as GET, POST, PUT, etc.)'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param url:'"}, "return_value": "23"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                The URL to perform the request on.'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param body:'"}, "return_value": "24"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Data to send in the request body, either :class:`str`, :class:`bytes`,'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                an iterable of :class:`str`/:class:`bytes`, or a file-like object.'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param headers:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Dictionary of custom headers to send, such as User-Agent,'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If-None-Match, etc. If None, pool headers are used. If provided,'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                these headers completely replace any pool-specific headers.'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param retries:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Configure the number of retries to allow before raising a'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :class:`~urllib3.exceptions.MaxRetryError` exception.'"}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Pass ``None`` to retry until you receive a response. Pass a'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :class:`~urllib3.util.retry.Retry` object for fine-grained control'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                over different types of retries.'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Pass an integer number to retry connection errors that many times,'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                but no other types of errors. Pass zero to never retry.'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If ``False``, then retries are disabled and any exception is raised'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                immediately. Also, instead of raising a MaxRetryError on redirects,'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                the redirect response will be returned.'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param redirect:'"}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If True, automatically handle redirects (status codes 301, 302,'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                303, 307, 308). Each redirect counts as a retry. Disabling retries'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                will disable redirect, too.'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param assert_same_host:'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If ``True``, will make sure that the host of the pool requests is'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                consistent else will raise HostChangedError. When ``False``, you can'"}, "return_value": "84"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                use the pool on an HTTP proxy and request foreign hosts.'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param timeout:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If specified, overrides the default timeout for this one'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                request. It may be a float (in seconds) or an instance of'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :class:`urllib3.util.Timeout`.'"}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param pool_timeout:'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If set and the pool is set to block=True, then this method will'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                block for ``pool_timeout`` seconds and raise EmptyPoolError if no'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                connection is available within the time period.'"}, "return_value": "63"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param release_conn:'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If False, then the urlopen call will not release the connection'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                back into the pool once a response is received (but will release if'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                you read the entire contents of the response such as when'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                `preload_content=True`). This is useful if you're not preloading\""}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                the response's content immediately. You will need to call\""}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                ``r.release_conn()`` on the response ``r`` to return the connection'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                back into the pool. If None, it takes the value of'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                ``response_kw.get('preload_content', True)``.\""}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param chunked:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If True, urllib3 will send the body using chunked transfer'"}, "return_value": "74"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                encoding. Otherwise, urllib3 will send the body using the standard'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                content-length form. Defaults to False.'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param int body_pos:'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Position to seek to in file-like body in the event of a retry or'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                redirect. Typically this won't need to be set because urllib3 will\""}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                auto-populate the value when needed.'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param \\\\\\\\**response_kw:'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Additional parameters are passed to'"}, "return_value": "51"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :meth:`urllib3.response.HTTPResponse.from_httplib`'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        parsed_url = parse_url(url)'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        destination_scheme = parsed_url.scheme'"}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if headers is None:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            headers = self.headers'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if not isinstance(retries, Retry):'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if release_conn is None:'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            release_conn = response_kw.get(\"preload_content\", True)'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Check host'"}, "return_value": "20"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if assert_same_host and not self.is_same_host(url):'"}, "return_value": "59"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            raise HostChangedError(self, url, retries)'"}, "return_value": "54"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        # Ensure that the URL we're connecting to is properly encoded\""}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if url.startswith(\"/\"):'"}, "return_value": "31"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            url = six.ensure_str(_encode_target(url))'"}, "return_value": "53"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        else:'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            url = six.ensure_str(parsed_url.url)'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        conn = None'"}, "return_value": "19"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Track whether `conn` needs to be released before'"}, "return_value": "58"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # returning/raising/recursing. Update this variable if necessary, and'"}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # leave `release_conn` constant throughout the function. That way, if'"}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # the function recurses, the original value of `release_conn` will be'"}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # passed down into the recursive call, and its value will be respected.'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        #'"}, "return_value": "9"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # See issue #651 [1] for details.'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        #'"}, "return_value": "9"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # [1] <https://github.com/urllib3/urllib3/issues/651>'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        release_this_conn = release_conn'"}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        http_tunnel_required = connection_requires_http_tunnel('"}, "return_value": "63"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            self.proxy, self.proxy_config, destination_scheme'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        )'"}, "return_value": "9"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Merge the proxy headers. Only done when not using HTTP CONNECT. We'"}, "return_value": "76"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # have to copy the headers dict so we can safely change it without those'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        # changes being reflected in anyone else's copy.\""}, "return_value": "56"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if not http_tunnel_required:'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            headers = headers.copy()'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            headers.update(self.proxy_headers)'"}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Must keep the exception bound to a separate variable or else Python 3'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # complains about UnboundLocalError.'"}, "return_value": "44"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        err = None'"}, "return_value": "18"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Keep track of whether we cleanly exited the except block. This'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # ensures we do proper cleanup in finally.'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        clean_exit = False'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Rewind body position, if needed. Record current position'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # for future rewinds in the event of a redirect/retry.'"}, "return_value": "62"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        body_pos = set_file_position(body, body_pos)'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        try:'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Request a connection from the queue.'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            timeout_obj = self._get_timeout(timeout)'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            conn = self._get_conn(timeout=pool_timeout)'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            conn.timeout = timeout_obj.connect_timeout'"}, "return_value": "54"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            is_new_proxy_conn = self.proxy is not None and not getattr('"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                conn, \"sock\", None'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            )'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if is_new_proxy_conn and http_tunnel_required:'"}, "return_value": "58"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                self._prepare_proxy(conn)'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Make the request on the httplib connection object.'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>           httplib_response = self._make_request('"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                conn,'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                method,'"}, "return_value": "23"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                url,'"}, "return_value": "20"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                timeout=timeout_obj,'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                body=body,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                headers=headers,'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                chunked=chunked,'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            )'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/urllib3/connectionpool.py'"}, "return_value": "63"}, {"func_args": {"text": "':703: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0xffffa49b3310>'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'conn = <docker.transport.unixconn.UnixHTTPConnection object at 0xffffa49b31c0>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"method = 'GET'\""}, "return_value": "14"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"url = '/v1.18/images/json?filter=shipwright%2Fbase&only_ids=0&all=0'\""}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'timeout = Timeout(connect=60, read=60, total=None), chunked = False'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"httplib_request_kw = {'body': None, 'headers': {'User-Agent': 'docker-sdk-python/2.7.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}}\""}, "return_value": "170"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'timeout_obj = Timeout(connect=60, read=60, total=None)'"}, "return_value": "54"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def _make_request('"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    ):'"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            Perform a request on a given urllib connection object taken from our'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            pool.'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param conn:'"}, "return_value": "24"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                a connection from one of our connection pools'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param timeout:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Socket timeout in seconds for the request. This can be a'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                float or integer, which will set the same timeout value for'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                the socket connect and the socket read, or an instance of'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :class:`urllib3.util.Timeout`, which gives you more fine-grained'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                control over your timeouts.'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self.num_requests += 1'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        timeout_obj = self._get_timeout(timeout)'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        timeout_obj.start_connect()'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        conn.timeout = timeout_obj.connect_timeout'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Trigger any extra validation we need to do.'"}, "return_value": "53"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        try:'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            self._validate_conn(conn)'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        except (SocketTimeout, BaseSSLError) as e:'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            raise'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # conn.request() calls http.client.*.request, not the method in'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # urllib3.request. It also calls makefile (recv) on the socket.'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        try:'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if chunked:'"}, "return_value": "23"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                conn.request_chunked(method, url, **httplib_request_kw)'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            else:'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>               conn.request(method, url, **httplib_request_kw)'"}, "return_value": "63"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/urllib3/connectionpool.py'"}, "return_value": "63"}, {"func_args": {"text": "':398: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnection object at 0xffffa49b31c0>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"method = 'GET'\""}, "return_value": "14"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"url = '/v1.18/images/json?filter=shipwright%2Fbase&only_ids=0&all=0'\""}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'body = None'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"headers = {'User-Agent': 'docker-sdk-python/2.7.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\""}, "return_value": "132"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def request(self, method, url, body=None, headers={}, *,'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                encode_chunked=False):'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"Send a complete request to the server.\"\"\"'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       self._send_request(method, url, body, headers, encode_chunked)'"}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'/usr/local/lib/python3.8/http/client.py'"}, "return_value": "39"}, {"func_args": {"text": "':1256: '"}, "return_value": "7"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnection object at 0xffffa49b31c0>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"method = 'GET'\""}, "return_value": "14"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"url = '/v1.18/images/json?filter=shipwright%2Fbase&only_ids=0&all=0'\""}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'body = None'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"headers = {'User-Agent': 'docker-sdk-python/2.7.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\""}, "return_value": "132"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'encode_chunked = False'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def _send_request(self, method, url, body, headers, encode_chunked):'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Honor explicitly requested Host: and Accept-Encoding: headers.'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        header_names = frozenset(k.lower() for k in headers)'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        skips = {}'"}, "return_value": "18"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        if 'host' in header_names:\""}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            skips['skip_host'] = 1\""}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        if 'accept-encoding' in header_names:\""}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            skips['skip_accept_encoding'] = 1\""}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self.putrequest(method, url, **skips)'"}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # chunked encoding will happen if HTTP/1.1 is used and either'"}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # the caller passes encode_chunked=True or the following'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # conditions hold:'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # 1. content-length has not been explicitly set'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # 2. the body is a file or iterable, but not a str or bytes-like'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # 3. Transfer-Encoding has NOT been explicitly set by the caller'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        if 'content-length' not in header_names:\""}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # only chunk body if not explicitly set for backwards'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # compatibility, assuming the client code is already handling the'"}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # chunking'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            if 'transfer-encoding' not in header_names:\""}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                # if content-length cannot be automatically determined, fall'"}, "return_value": "76"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                # back to chunked encoding'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                encode_chunked = False'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                content_length = self._get_content_length(body, method)'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                if content_length is None:'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    if body is not None:'"}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        if self.debuglevel > 0:'"}, "return_value": "47"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                            print('Unable to determine size of %r' % body)\""}, "return_value": "74"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        encode_chunked = True'"}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                        self.putheader('Transfer-Encoding', 'chunked')\""}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                else:'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                    self.putheader('Content-Length', str(content_length))\""}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        else:'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            encode_chunked = False'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        for hdr, value in headers.items():'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            self.putheader(hdr, value)'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if isinstance(body, str):'"}, "return_value": "33"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # RFC 2616 Section 3.7.1 says that text default has a'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # default charset of iso-8859-1.'"}, "return_value": "44"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            body = _encode(body, 'body')\""}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       self.endheaders(body, encode_chunked=encode_chunked)'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'/usr/local/lib/python3.8/http/client.py'"}, "return_value": "39"}, {"func_args": {"text": "':1302: '"}, "return_value": "7"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnection object at 0xffffa49b31c0>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'message_body = None'"}, "return_value": "19"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def endheaders(self, message_body=None, *, encode_chunked=False):'"}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"Indicate that the last header line has been sent to the server.'"}, "return_value": "74"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            This method sends the request to the server.  The optional message_body'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            argument can be used to pass a message body associated with the'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            request.'"}, "return_value": "20"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if self.__state == _CS_REQ_STARTED:'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            self.__state = _CS_REQ_SENT'"}, "return_value": "39"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        else:'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            raise CannotSendHeader()'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       self._send_output(message_body, encode_chunked=encode_chunked)'"}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'/usr/local/lib/python3.8/http/client.py'"}, "return_value": "39"}, {"func_args": {"text": "':1251: '"}, "return_value": "7"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnection object at 0xffffa49b31c0>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'message_body = None, encode_chunked = False'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def _send_output(self, message_body=None, encode_chunked=False):'"}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"Send the currently buffered request and clear the buffer.'"}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            Appends an extra \\\\\\\\r\\\\\\\\n to the buffer.'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            A message_body may be specified, to be appended to the request.'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self._buffer.extend((b\"\", b\"\"))'"}, "return_value": "39"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        msg = b\"\\\\r\\\\n\".join(self._buffer)'"}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        del self._buffer[:]'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       self.send(msg)'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'/usr/local/lib/python3.8/http/client.py'"}, "return_value": "39"}, {"func_args": {"text": "':1011: '"}, "return_value": "7"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnection object at 0xffffa49b31c0>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"data = b'GET /v1.18/images/json?filter=shipwright%2Fbase&only_ids=0&all=0 HTTP/1.1\\\\r\\\\nHost: localhost\\\\r\\\\nUser-Agent: docker-sdk-python/2.7.0\\\\r\\\\nAccept-Encoding: gzip, deflate\\\\r\\\\nAccept: */*\\\\r\\\\nConnection: keep-alive\\\\r\\\\n\\\\r\\\\n'\""}, "return_value": "224"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def send(self, data):'"}, "return_value": "25"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"Send `data\\' to the server.'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            ``data`` can be a string object, a bytes object, an array object, a'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            file-like object that supports a .read() method, or an iterable object.'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if self.sock is None:'"}, "return_value": "29"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if self.auto_open:'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>               self.connect()'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'/usr/local/lib/python3.8/http/client.py'"}, "return_value": "39"}, {"func_args": {"text": "':951: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnection object at 0xffffa49b31c0>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def connect(self):'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        sock.settimeout(self.timeout)'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       sock.connect(self.unix_socket)'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"E       urllib3.exceptions.ProtocolError: ('Connection aborted.', FileNotFoundError(2, 'No such file or directory'))\""}, "return_value": "116"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/docker/transport/unixconn.py'"}, "return_value": "66"}, {"func_args": {"text": "':46: ProtocolError'"}, "return_value": "18"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'During handling of the above exception, another exception occurred:'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"tmpdir = local('/tmp/pytest-of-root/pytest-1/test_short_name_target0')\""}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'docker_client = <docker.api.client.APIClient object at 0xffff9f0f2940>'"}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def test_short_name_target(tmpdir, docker_client):'"}, "return_value": "54"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        path = str(tmpdir.join('shipwright-sample'))\""}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        source = pkg_resources.resource_filename('"}, "return_value": "49"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            __name__,'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            'examples/shipwright-sample',\""}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        )'"}, "return_value": "9"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        repo = create_repo(path, source)'"}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        tag = repo.head.ref.commit.hexsha[:12]'"}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        client_cfg = docker_utils.kwargs_from_env()'"}, "return_value": "51"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        cli = docker_client'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        try:'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            defaults = get_defaults()'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            defaults['--upto'] = ['shared']\""}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>           shipw_cli.run('"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                path=path,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                client_cfg=client_cfg,'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                arguments=defaults,'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                environ={},'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            )'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'tests/integration/test_docker_builds.py'"}, "return_value": "39"}, {"func_args": {"text": "':611: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"path = '/tmp/pytest-of-root/pytest-1/test_short_name_target0/shipwright-sample'\""}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"arguments = {'--account': None, '--dependents': [], '--dirty': False, '--dump-file': None, ...}\""}, "return_value": "95"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'client_cfg = {}, environ = {}, new_style_args = None'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def run(path, arguments, client_cfg, environ, new_style_args=None):'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        args = process_arguments('"}, "return_value": "33"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            path, arguments, client_cfg, environ,'"}, "return_value": "49"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        )'"}, "return_value": "9"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        build_targets, no_build, command_name, dump_file, config, client = args'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if new_style_args is None:'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            dirty = False'"}, "return_value": "25"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            pull_cache = False'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            registry_logins = []'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        else:'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            dirty = new_style_args.dirty'"}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            pull_cache = new_style_args.pull_cache'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            registry_logins = _flatten(new_style_args.registry_login)'"}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        namespace = config['namespace']\""}, "return_value": "39"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        name_map = config.get('names', {})\""}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        scm = source_control.source_control(path, namespace, name_map)'"}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if not dirty and scm.is_dirty():'"}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            return ('"}, "return_value": "20"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                'Aborting build, due to uncommitted changes. If you are not ready '\""}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                'to commit these changes, re-run with the --dirty flag.'\""}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            )'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if registry_logins:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if isinstance(drc, Exception):'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                raise drc'"}, "return_value": "25"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            registry_config = parse_registry_logins(registry_logins)'"}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            registries = {}'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            for server, config in registry_config.items():'"}, "return_value": "58"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                registries[server] = drc.BaseClient('"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                    config['server'],\""}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                    username=config['username'],\""}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                    password=config['password'],\""}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    api_version=2,'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                )'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            the_cache = cache.DirectRegistry(client, registry.Registry(registries))'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        elif pull_cache:'"}, "return_value": "24"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            the_cache = cache.Cache(client)'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        else:'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            the_cache = cache.NoCache(client)'"}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        sw = Shipwright(scm, client, arguments['tags'], the_cache)\""}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        command = getattr(sw, command_name)'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        show_progress = sys.stdout.isatty()'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        errors = []'"}, "return_value": "19"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if no_build:'"}, "return_value": "20"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            events = command(build_targets, no_build)'"}, "return_value": "53"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        else:'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            events = command(build_targets)'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       for event in events:'"}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'shipwright/_lib/cli.py'"}, "return_value": "22"}, {"func_args": {"text": "':340: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <shipwright._lib.base.Shipwright object at 0xffffa49b37c0>'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"this_ref_str = '2acc1672077d'\""}, "return_value": "29"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"targets = [Target(image=Image(name='shipwright/base', dir_path='/tmp/pytest-of-root/pytest-1/test_short_name_target0/shipwright-...est-of-root/pytest-1/test_short_name_target0/shipwright-sample/shared/Dockerfile'})), ref='2acc1672077d', children=())]\""}, "return_value": "250"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def _build(self, this_ref_str, targets):'"}, "return_value": "44"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        client = self.docker_client'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        ref = this_ref_str'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        tags = self.source_control.default_tags() + self.tags + [this_ref_str]'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       for evt in build.do_build(client, ref, targets, self._cache):'"}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'shipwright/_lib/base.py'"}, "return_value": "23"}, {"func_args": {"text": "':26: '"}, "return_value": "5"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'client = <docker.api.client.APIClient object at 0xffffa49b7640>'"}, "return_value": "63"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"build_ref = '2acc1672077d'\""}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"targets = [Target(image=Image(name='shipwright/base', dir_path='/tmp/pytest-of-root/pytest-1/test_short_name_target0/shipwright-...est-of-root/pytest-1/test_short_name_target0/shipwright-sample/shared/Dockerfile'})), ref='2acc1672077d', children=())]\""}, "return_value": "250"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'cache = <shipwright._lib.cache.NoCache object at 0xffffa49b7130>'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def do_build(client, build_ref, targets, cache):'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        Generic function for building multiple images while'"}, "return_value": "59"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        notifying a callback function with output produced.'"}, "return_value": "59"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        Given a list of targets it builds the target with the given'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        build_func while streaming the output through the given'"}, "return_value": "63"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        show_func.'"}, "return_value": "18"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        Returns an iterator of (image, docker_image_id) pairs as'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        the final output.'"}, "return_value": "25"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        Building an image can take sometime so  the results are returned as'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        an iterator in case the caller wants to use restults in between builds.'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        The consequences of this is you must either call it as part of a for loop'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        or pass it to a function like list() which can consume an iterator.'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        build_index = {t.image.name: t.ref for t in targets}'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        for target in targets:'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            parent_ref = None'"}, "return_value": "29"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if target.parent:'"}, "return_value": "29"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                parent_ref = build_index.get(target.parent)'"}, "return_value": "59"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>           for evt in build(client, parent_ref, target, cache):'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'shipwright/_lib/build.py'"}, "return_value": "24"}, {"func_args": {"text": "':39: '"}, "return_value": "5"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'client = <docker.api.client.APIClient object at 0xffffa49b7640>'"}, "return_value": "63"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'parent_ref = None'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"image = Target(image=Image(name='shipwright/base', dir_path='/tmp/pytest-of-root/pytest-1/test_short_name_target0/shipwright-s...t-of-root/pytest-1/test_short_name_target0/shipwright-sample/shared/Dockerfile'})), ref='2acc1672077d', children=()),))\""}, "return_value": "248"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'cache = <shipwright._lib.cache.NoCache object at 0xffffa49b7130>'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def build(client, parent_ref, image, cache):'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        builds the given image tagged with <build_ref> and ensures that'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        it depends on it's parent if it's part of this build group (shares\""}, "return_value": "74"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        the same namespace)'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        merge_config = {'"}, "return_value": "24"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            'event': 'build_msg',\""}, "return_value": "33"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            'target': image,\""}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            'rev': image.ref,\""}, "return_value": "29"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        }'"}, "return_value": "9"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        def process_event_(evt):'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            return _merge(merge_config, evt)'"}, "return_value": "44"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       built_tags = docker.last_built_from_docker(client, image.name)'"}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'shipwright/_lib/build.py'"}, "return_value": "24"}, {"func_args": {"text": "':60: '"}, "return_value": "5"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'client = <docker.api.client.APIClient object at 0xffffa49b7640>'"}, "return_value": "63"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"name = 'shipwright/base'\""}, "return_value": "24"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def last_built_from_docker(client, name):'"}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       images = client.images(name)'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'shipwright/_lib/docker.py'"}, "return_value": "25"}, {"func_args": {"text": "':27: '"}, "return_value": "5"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.api.client.APIClient object at 0xffffa49b7640>'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"name = 'shipwright/base', quiet = False, all = False, viz = False\""}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'filters = None'"}, "return_value": "14"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def images(self, name=None, quiet=False, all=False, viz=False,'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               filters=None):'"}, "return_value": "29"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            List images. Similar to the ``docker images`` command.'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            Args:'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                name (str): Only show images belonging to the repository ``name``'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                quiet (bool): Only return numeric IDs as a list.'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                all (bool): Show intermediate image layers. By default, these are'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    filtered out.'"}, "return_value": "33"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                filters (dict): Filters to be processed on the image list.'"}, "return_value": "74"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    Available filters:'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    - ``dangling`` (bool)'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    - ``label`` (str): format either ``key`` or ``key=value``'"}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            Returns:'"}, "return_value": "20"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                (dict or list): A list if ``quiet=True``, otherwise a dict.'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            Raises:'"}, "return_value": "19"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :py:class:`docker.errors.APIError`'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    If the server returns an error.'"}, "return_value": "51"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if viz:'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            if utils.compare_version('1.7', self._version) >= 0:\""}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                raise Exception('Viz output is not supported in API >= 1.7!')\""}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            return self._result(self._get(self._url(\"images/viz\")))'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        params = {'"}, "return_value": "18"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            'filter': name,\""}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            'only_ids': 1 if quiet else 0,\""}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            'all': 1 if all else 0,\""}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        }'"}, "return_value": "9"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if filters:'"}, "return_value": "19"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            params['filters'] = utils.convert_filters(filters)\""}, "return_value": "62"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       res = self._result(self._get(self._url(\"/images/json\"), params=params),'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                           True)'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/docker/api/image.py'"}, "return_value": "57"}, {"func_args": {"text": "':93: '"}, "return_value": "5"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.api.client.APIClient object at 0xffffa49b7640>'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"args = ('http+docker://localunixsocket/v1.18/images/json',)\""}, "return_value": "59"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"kwargs = {'params': {'all': 0, 'filter': 'shipwright/base', 'only_ids': 0}}\""}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def inner(self, *args, **kwargs):'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        if 'HttpHeaders' in self._auth_configs:\""}, "return_value": "47"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            if not kwargs.get('headers'):\""}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                kwargs['headers'] = self._auth_configs['HttpHeaders']\""}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            else:'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                kwargs['headers'].update(self._auth_configs['HttpHeaders'])\""}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       return f(self, *args, **kwargs)'"}, "return_value": "39"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/docker/utils/decorators.py'"}, "return_value": "64"}, {"func_args": {"text": "':46: '"}, "return_value": "5"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.api.client.APIClient object at 0xffffa49b7640>'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"url = 'http+docker://localunixsocket/v1.18/images/json'\""}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"kwargs = {'params': {'all': 0, 'filter': 'shipwright/base', 'only_ids': 0}, 'timeout': 60}\""}, "return_value": "90"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    @update_headers'"}, "return_value": "19"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def _get(self, url, **kwargs):'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       return self.get(url, **self._set_request_timeout(kwargs))'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/docker/api/client.py'"}, "return_value": "58"}, {"func_args": {"text": "':191: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.api.client.APIClient object at 0xffffa49b7640>'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"url = 'http+docker://localunixsocket/v1.18/images/json'\""}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"kwargs = {'allow_redirects': True, 'params': {'all': 0, 'filter': 'shipwright/base', 'only_ids': 0}, 'timeout': 60}\""}, "return_value": "115"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def get(self, url, **kwargs):'"}, "return_value": "33"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        r\"\"\"Sends a GET request. Returns :class:`Response` object.'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param url: URL for the new :class:`Request` object.'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param \\\\*\\\\*kwargs: Optional arguments that ``request`` takes.'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :rtype: requests.Response'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        kwargs.setdefault('allow_redirects', True)\""}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\">       return self.request('GET', url, **kwargs)\""}, "return_value": "49"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/requests/sessions.py'"}, "return_value": "58"}, {"func_args": {"text": "':542: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"self = <docker.api.client.APIClient object at 0xffffa49b7640>, method = 'GET'\""}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"url = 'http+docker://localunixsocket/v1.18/images/json'\""}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"params = {'all': 0, 'filter': 'shipwright/base', 'only_ids': 0}, data = None\""}, "return_value": "76"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'headers = None, cookies = None, files = None, auth = None, timeout = 60'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'allow_redirects = True, proxies = {}, hooks = None, stream = None, verify = None'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'cert = None, json = None'"}, "return_value": "24"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def request(self, method, url,'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            params=None, data=None, headers=None, cookies=None, files=None,'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            auth=None, timeout=None, allow_redirects=True, proxies=None,'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            hooks=None, stream=None, verify=None, cert=None, json=None):'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"Constructs a :class:`Request <Request>`, prepares it and sends it.'"}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            Returns :class:`Response <Response>` object.'"}, "return_value": "56"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param method: method for the new :class:`Request` object.'"}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param url: URL for the new :class:`Request` object.'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param params: (optional) Dictionary or bytes to be sent in the query'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                string for the :class:`Request`.'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param data: (optional) Dictionary, list of tuples, bytes, or file-like'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                object to send in the body of the :class:`Request`.'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param json: (optional) json to send in the body of the'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :class:`Request`.'"}, "return_value": "33"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param headers: (optional) Dictionary of HTTP Headers to send with the'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :class:`Request`.'"}, "return_value": "33"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param cookies: (optional) Dict or CookieJar object to send with the'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :class:`Request`.'"}, "return_value": "33"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            :param files: (optional) Dictionary of ``'filename': file-like-objects``\""}, "return_value": "84"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                for multipart encoding upload.'"}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param auth: (optional) Auth tuple or callable to enable'"}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Basic/Digest/Custom HTTP Auth.'"}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param timeout: (optional) How long to wait for the server to send'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                data before giving up, as a float, or a :ref:`(connect timeout,'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                read timeout) <timeouts>` tuple.'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :type timeout: float or tuple'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param allow_redirects: (optional) Set to True by default.'"}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :type allow_redirects: bool'"}, "return_value": "39"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param proxies: (optional) Dictionary mapping protocol or protocol and'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                hostname to the URL of the proxy.'"}, "return_value": "49"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param stream: (optional) whether to immediately download the response'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                content. Defaults to ``False``.'"}, "return_value": "47"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param verify: (optional) Either a boolean, in which case it controls whether we verify'"}, "return_value": "99"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                the server's TLS certificate, or a string, in which case it must be a path\""}, "return_value": "90"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                to a CA bundle to use. Defaults to ``True``. When set to'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                ``False``, requests will accept any TLS certificate presented by'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                the server, and will ignore hostname mismatches and/or expired'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                certificates, which will make your application vulnerable to'"}, "return_value": "76"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                man-in-the-middle (MitM) attacks. Setting verify to ``False``'"}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                may be useful during local development or testing.'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param cert: (optional) if String, path to ssl client cert file (.pem).'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                If Tuple, ('cert', 'key') pair.\""}, "return_value": "47"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :rtype: requests.Response'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Create the Request.'"}, "return_value": "29"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        req = Request('"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            method=method.upper(),'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            url=url,'"}, "return_value": "20"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            headers=headers,'"}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            files=files,'"}, "return_value": "24"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            data=data or {},'"}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            json=json,'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            params=params or {},'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            auth=auth,'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            cookies=cookies,'"}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            hooks=hooks,'"}, "return_value": "24"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        )'"}, "return_value": "9"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        prep = self.prepare_request(req)'"}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        proxies = proxies or {}'"}, "return_value": "31"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        settings = self.merge_environment_settings('"}, "return_value": "51"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            prep.url, proxies, stream, verify, cert'"}, "return_value": "51"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        )'"}, "return_value": "9"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Send the request.'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        send_kwargs = {'"}, "return_value": "23"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            'timeout': timeout,\""}, "return_value": "31"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            'allow_redirects': allow_redirects,\""}, "return_value": "47"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        }'"}, "return_value": "9"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        send_kwargs.update(settings)'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       resp = self.send(prep, **send_kwargs)'"}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/requests/sessions.py'"}, "return_value": "58"}, {"func_args": {"text": "':529: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.api.client.APIClient object at 0xffffa49b7640>'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'request = <PreparedRequest [GET]>'"}, "return_value": "33"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"kwargs = {'cert': None, 'proxies': OrderedDict(), 'stream': False, 'timeout': 60, ...}\""}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"allow_redirects = True, stream = False, hooks = {'response': []}\""}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'adapter = <docker.transport.unixconn.UnixAdapter object at 0xffffa49b36a0>'"}, "return_value": "74"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'start = 1642611051.1879737'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def send(self, request, **kwargs):'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"Send a given PreparedRequest.'"}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :rtype: requests.Response'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Set defaults that the hooks can utilize to ensure they always have'"}, "return_value": "76"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # the correct parameters to reproduce the previous request.'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        kwargs.setdefault('stream', self.stream)\""}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        kwargs.setdefault('verify', self.verify)\""}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        kwargs.setdefault('cert', self.cert)\""}, "return_value": "44"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        if 'proxies' not in kwargs:\""}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            kwargs['proxies'] = resolve_proxies(\""}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                request, self.proxies, self.trust_env'"}, "return_value": "53"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            )'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        # It's possible that users might accidentally send a Request object.\""}, "return_value": "76"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Guard against that specific failure case.'"}, "return_value": "51"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if isinstance(request, Request):'"}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            raise ValueError('You can only send PreparedRequests.')\""}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Set up variables needed for resolve_redirects and dispatching of hooks'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        allow_redirects = kwargs.pop('allow_redirects', True)\""}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        stream = kwargs.get('stream')\""}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        hooks = request.hooks'"}, "return_value": "29"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Get the appropriate adapter to use'"}, "return_value": "44"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        adapter = self.get_adapter(url=request.url)'"}, "return_value": "51"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Start time (approximately) of the request'"}, "return_value": "51"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        start = preferred_clock()'"}, "return_value": "33"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Send the request'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       r = adapter.send(request, **kwargs)'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/requests/sessions.py'"}, "return_value": "58"}, {"func_args": {"text": "':645: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixAdapter object at 0xffffa49b36a0>'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'request = <PreparedRequest [GET]>, stream = False'"}, "return_value": "49"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'proxies = OrderedDict()'"}, "return_value": "23"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):'"}, "return_value": "94"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"Sends PreparedRequest object. Returns Response object.'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param stream: (optional) Whether to stream the request content.'"}, "return_value": "76"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param timeout: (optional) How long to wait for the server to send'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                data before giving up, as a float, or a :ref:`(connect timeout,'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                read timeout) <timeouts>` tuple.'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :type timeout: float or tuple or urllib3 Timeout object'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param verify: (optional) Either a boolean, in which case it controls whether'"}, "return_value": "89"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                we verify the server's TLS certificate, or a string, in which case it\""}, "return_value": "85"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                must be a path to a CA bundle to use'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param cert: (optional) Any user-provided SSL certificate to be trusted.'"}, "return_value": "84"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param proxies: (optional) The proxies dictionary to apply to the request.'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :rtype: requests.Response'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        try:'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            conn = self.get_connection(request.url, proxies)'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        except LocationValueError as e:'"}, "return_value": "39"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            raise InvalidURL(e, request=request)'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self.cert_verify(conn, request.url, verify, cert)'"}, "return_value": "57"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        url = self.request_url(request, proxies)'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)'"}, "return_value": "108"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        chunked = not (request.body is None or 'Content-Length' in request.headers)\""}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if isinstance(timeout, tuple):'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            try:'"}, "return_value": "16"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                connect, read = timeout'"}, "return_value": "39"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                timeout = TimeoutSauce(connect=connect, read=read)'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            except ValueError as e:'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                # this may raise a string formatting error.'"}, "return_value": "59"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                err = (\"Invalid timeout {}. Pass a (connect, read) \"'"}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                       \"timeout tuple, or a single float to set \"'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                       \"both timeouts to the same value\".format(timeout))'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                raise ValueError(err)'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        elif isinstance(timeout, TimeoutSauce):'"}, "return_value": "47"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            pass'"}, "return_value": "16"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        else:'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            timeout = TimeoutSauce(connect=timeout, read=timeout)'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        try:'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if not chunked:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                resp = conn.urlopen('"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    method=request.method,'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    url=url,'"}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    body=request.body,'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    headers=request.headers,'"}, "return_value": "44"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    redirect=False,'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    assert_same_host=False,'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    preload_content=False,'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    decode_content=False,'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    retries=self.max_retries,'"}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    timeout=timeout'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                )'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Send the request.'"}, "return_value": "31"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            else:'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                if hasattr(conn, 'proxy_pool'):\""}, "return_value": "47"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    conn = conn.proxy_pool'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                try:'"}, "return_value": "20"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                    skip_host = 'Host' in request.headers\""}, "return_value": "57"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    low_conn.putrequest(request.method,'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                                        url,'"}, "return_value": "44"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                                        skip_accept_encoding=True,'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                                        skip_host=skip_host)'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    for header, value in request.headers.items():'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        low_conn.putheader(header, value)'"}, "return_value": "57"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    low_conn.endheaders()'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    for i in request.body:'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                        low_conn.send(hex(len(i))[2:].encode('utf-8'))\""}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                        low_conn.send(b'\\\\r\\\\n')\""}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        low_conn.send(i)'"}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                        low_conn.send(b'\\\\r\\\\n')\""}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                    low_conn.send(b'0\\\\r\\\\n\\\\r\\\\n')\""}, "return_value": "47"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    # Receive the response from the server'"}, "return_value": "58"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    try:'"}, "return_value": "24"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        # For Python 2.7, use buffering of HTTP responses'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        r = low_conn.getresponse(buffering=True)'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    except TypeError:'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        # For compatibility with Python 3.3+'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        r = low_conn.getresponse()'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    resp = HTTPResponse.from_httplib('"}, "return_value": "53"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        r,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        pool=conn,'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        connection=low_conn,'"}, "return_value": "44"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        preload_content=False,'"}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        decode_content=False'"}, "return_value": "44"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    )'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                except:'"}, "return_value": "23"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    # If we hit any problems here, clean up the connection.'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    # Then, reraise so that we can handle the actual exception.'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    low_conn.close()'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    raise'"}, "return_value": "25"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        except (ProtocolError, socket.error) as err:'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>           raise ConnectionError(err, request=request)'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"E           requests.exceptions.ConnectionError: ('Connection aborted.', FileNotFoundError(2, 'No such file or directory'))\""}, "return_value": "123"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/requests/adapters.py'"}, "return_value": "58"}, {"func_args": {"text": "':501: ConnectionError'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'During handling of the above exception, another exception occurred:'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0xffffa49b3f70>'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"method = 'GET'\""}, "return_value": "14"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"url = '/v1.21/images/json?filter=shipwright%2Fshared&only_ids=1&all=0'\""}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'body = None'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"headers = {'User-Agent': 'docker-sdk-python/2.7.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\""}, "return_value": "132"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'redirect = False, assert_same_host = False'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'release_conn = False, chunked = False, body_pos = None'"}, "return_value": "54"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"response_kw = {'decode_content': False, 'preload_content': False}\""}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/v1.21/images/json', query='filter=shipwright%2Fshared&only_ids=1&all=0', fragment=None)\""}, "return_value": "157"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'destination_scheme = None, conn = None, release_this_conn = True'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'http_tunnel_required = False, err = None, clean_exit = False'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def urlopen('"}, "return_value": "16"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self,'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        method,'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        url,'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        body=None,'"}, "return_value": "18"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        headers=None,'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        retries=None,'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        redirect=True,'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        assert_same_host=True,'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        timeout=_Default,'"}, "return_value": "25"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        pool_timeout=None,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        release_conn=None,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        chunked=False,'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        body_pos=None,'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        **response_kw'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    ):'"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            Get a connection from the pool and perform an HTTP request. This is the'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            lowest level call for making a request, so you'll need to specify all\""}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            the raw details.'"}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            .. note::'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"               More commonly, it's appropriate to use a convenience method provided\""}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               by :class:`.RequestMethods`, such as :meth:`request`.'"}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            .. note::'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               `release_conn` will only behave as expected if'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               `preload_content=False` because we want to make'"}, "return_value": "62"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               `preload_content=False` the default behaviour someday soon without'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               breaking backwards compatibility.'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param method:'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                HTTP request method (such as GET, POST, PUT, etc.)'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param url:'"}, "return_value": "23"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                The URL to perform the request on.'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param body:'"}, "return_value": "24"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Data to send in the request body, either :class:`str`, :class:`bytes`,'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                an iterable of :class:`str`/:class:`bytes`, or a file-like object.'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param headers:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Dictionary of custom headers to send, such as User-Agent,'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If-None-Match, etc. If None, pool headers are used. If provided,'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                these headers completely replace any pool-specific headers.'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param retries:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Configure the number of retries to allow before raising a'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :class:`~urllib3.exceptions.MaxRetryError` exception.'"}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Pass ``None`` to retry until you receive a response. Pass a'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :class:`~urllib3.util.retry.Retry` object for fine-grained control'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                over different types of retries.'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Pass an integer number to retry connection errors that many times,'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                but no other types of errors. Pass zero to never retry.'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If ``False``, then retries are disabled and any exception is raised'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                immediately. Also, instead of raising a MaxRetryError on redirects,'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                the redirect response will be returned.'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param redirect:'"}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If True, automatically handle redirects (status codes 301, 302,'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                303, 307, 308). Each redirect counts as a retry. Disabling retries'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                will disable redirect, too.'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param assert_same_host:'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If ``True``, will make sure that the host of the pool requests is'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                consistent else will raise HostChangedError. When ``False``, you can'"}, "return_value": "84"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                use the pool on an HTTP proxy and request foreign hosts.'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param timeout:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If specified, overrides the default timeout for this one'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                request. It may be a float (in seconds) or an instance of'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :class:`urllib3.util.Timeout`.'"}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param pool_timeout:'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If set and the pool is set to block=True, then this method will'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                block for ``pool_timeout`` seconds and raise EmptyPoolError if no'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                connection is available within the time period.'"}, "return_value": "63"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param release_conn:'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If False, then the urlopen call will not release the connection'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                back into the pool once a response is received (but will release if'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                you read the entire contents of the response such as when'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                `preload_content=True`). This is useful if you're not preloading\""}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                the response's content immediately. You will need to call\""}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                ``r.release_conn()`` on the response ``r`` to return the connection'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                back into the pool. If None, it takes the value of'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                ``response_kw.get('preload_content', True)``.\""}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param chunked:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If True, urllib3 will send the body using chunked transfer'"}, "return_value": "74"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                encoding. Otherwise, urllib3 will send the body using the standard'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                content-length form. Defaults to False.'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param int body_pos:'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Position to seek to in file-like body in the event of a retry or'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                redirect. Typically this won't need to be set because urllib3 will\""}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                auto-populate the value when needed.'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param \\\\\\\\**response_kw:'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Additional parameters are passed to'"}, "return_value": "51"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :meth:`urllib3.response.HTTPResponse.from_httplib`'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        parsed_url = parse_url(url)'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        destination_scheme = parsed_url.scheme'"}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if headers is None:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            headers = self.headers'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if not isinstance(retries, Retry):'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if release_conn is None:'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            release_conn = response_kw.get(\"preload_content\", True)'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Check host'"}, "return_value": "20"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if assert_same_host and not self.is_same_host(url):'"}, "return_value": "59"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            raise HostChangedError(self, url, retries)'"}, "return_value": "54"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        # Ensure that the URL we're connecting to is properly encoded\""}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if url.startswith(\"/\"):'"}, "return_value": "31"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            url = six.ensure_str(_encode_target(url))'"}, "return_value": "53"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        else:'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            url = six.ensure_str(parsed_url.url)'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        conn = None'"}, "return_value": "19"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Track whether `conn` needs to be released before'"}, "return_value": "58"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # returning/raising/recursing. Update this variable if necessary, and'"}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # leave `release_conn` constant throughout the function. That way, if'"}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # the function recurses, the original value of `release_conn` will be'"}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # passed down into the recursive call, and its value will be respected.'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        #'"}, "return_value": "9"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # See issue #651 [1] for details.'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        #'"}, "return_value": "9"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # [1] <https://github.com/urllib3/urllib3/issues/651>'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        release_this_conn = release_conn'"}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        http_tunnel_required = connection_requires_http_tunnel('"}, "return_value": "63"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            self.proxy, self.proxy_config, destination_scheme'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        )'"}, "return_value": "9"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Merge the proxy headers. Only done when not using HTTP CONNECT. We'"}, "return_value": "76"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # have to copy the headers dict so we can safely change it without those'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        # changes being reflected in anyone else's copy.\""}, "return_value": "56"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if not http_tunnel_required:'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            headers = headers.copy()'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            headers.update(self.proxy_headers)'"}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Must keep the exception bound to a separate variable or else Python 3'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # complains about UnboundLocalError.'"}, "return_value": "44"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        err = None'"}, "return_value": "18"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Keep track of whether we cleanly exited the except block. This'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # ensures we do proper cleanup in finally.'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        clean_exit = False'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Rewind body position, if needed. Record current position'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # for future rewinds in the event of a redirect/retry.'"}, "return_value": "62"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        body_pos = set_file_position(body, body_pos)'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        try:'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Request a connection from the queue.'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            timeout_obj = self._get_timeout(timeout)'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            conn = self._get_conn(timeout=pool_timeout)'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            conn.timeout = timeout_obj.connect_timeout'"}, "return_value": "54"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            is_new_proxy_conn = self.proxy is not None and not getattr('"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                conn, \"sock\", None'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            )'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if is_new_proxy_conn and http_tunnel_required:'"}, "return_value": "58"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                self._prepare_proxy(conn)'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Make the request on the httplib connection object.'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>           httplib_response = self._make_request('"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                conn,'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                method,'"}, "return_value": "23"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                url,'"}, "return_value": "20"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                timeout=timeout_obj,'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                body=body,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                headers=headers,'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                chunked=chunked,'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            )'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/urllib3/connectionpool.py'"}, "return_value": "63"}, {"func_args": {"text": "':703: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0xffffa49b3f70>'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'conn = <docker.transport.unixconn.UnixHTTPConnection object at 0xffffa0cb3cd0>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"method = 'GET'\""}, "return_value": "14"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"url = '/v1.21/images/json?filter=shipwright%2Fshared&only_ids=1&all=0'\""}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'timeout = Timeout(connect=60, read=60, total=None), chunked = False'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"httplib_request_kw = {'body': None, 'headers': {'User-Agent': 'docker-sdk-python/2.7.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}}\""}, "return_value": "170"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'timeout_obj = Timeout(connect=60, read=60, total=None)'"}, "return_value": "54"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def _make_request('"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    ):'"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            Perform a request on a given urllib connection object taken from our'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            pool.'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param conn:'"}, "return_value": "24"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                a connection from one of our connection pools'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param timeout:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Socket timeout in seconds for the request. This can be a'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                float or integer, which will set the same timeout value for'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                the socket connect and the socket read, or an instance of'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :class:`urllib3.util.Timeout`, which gives you more fine-grained'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                control over your timeouts.'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self.num_requests += 1'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        timeout_obj = self._get_timeout(timeout)'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        timeout_obj.start_connect()'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        conn.timeout = timeout_obj.connect_timeout'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Trigger any extra validation we need to do.'"}, "return_value": "53"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        try:'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            self._validate_conn(conn)'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        except (SocketTimeout, BaseSSLError) as e:'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            raise'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # conn.request() calls http.client.*.request, not the method in'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # urllib3.request. It also calls makefile (recv) on the socket.'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        try:'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if chunked:'"}, "return_value": "23"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                conn.request_chunked(method, url, **httplib_request_kw)'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            else:'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>               conn.request(method, url, **httplib_request_kw)'"}, "return_value": "63"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/urllib3/connectionpool.py'"}, "return_value": "63"}, {"func_args": {"text": "':398: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnection object at 0xffffa0cb3cd0>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"method = 'GET'\""}, "return_value": "14"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"url = '/v1.21/images/json?filter=shipwright%2Fshared&only_ids=1&all=0'\""}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'body = None'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"headers = {'User-Agent': 'docker-sdk-python/2.7.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\""}, "return_value": "132"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def request(self, method, url, body=None, headers={}, *,'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                encode_chunked=False):'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"Send a complete request to the server.\"\"\"'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       self._send_request(method, url, body, headers, encode_chunked)'"}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'/usr/local/lib/python3.8/http/client.py'"}, "return_value": "39"}, {"func_args": {"text": "':1256: '"}, "return_value": "7"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnection object at 0xffffa0cb3cd0>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"method = 'GET'\""}, "return_value": "14"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"url = '/v1.21/images/json?filter=shipwright%2Fshared&only_ids=1&all=0'\""}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'body = None'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"headers = {'User-Agent': 'docker-sdk-python/2.7.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\""}, "return_value": "132"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'encode_chunked = False'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def _send_request(self, method, url, body, headers, encode_chunked):'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Honor explicitly requested Host: and Accept-Encoding: headers.'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        header_names = frozenset(k.lower() for k in headers)'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        skips = {}'"}, "return_value": "18"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        if 'host' in header_names:\""}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            skips['skip_host'] = 1\""}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        if 'accept-encoding' in header_names:\""}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            skips['skip_accept_encoding'] = 1\""}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self.putrequest(method, url, **skips)'"}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # chunked encoding will happen if HTTP/1.1 is used and either'"}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # the caller passes encode_chunked=True or the following'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # conditions hold:'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # 1. content-length has not been explicitly set'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # 2. the body is a file or iterable, but not a str or bytes-like'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # 3. Transfer-Encoding has NOT been explicitly set by the caller'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        if 'content-length' not in header_names:\""}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # only chunk body if not explicitly set for backwards'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # compatibility, assuming the client code is already handling the'"}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # chunking'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            if 'transfer-encoding' not in header_names:\""}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                # if content-length cannot be automatically determined, fall'"}, "return_value": "76"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                # back to chunked encoding'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                encode_chunked = False'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                content_length = self._get_content_length(body, method)'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                if content_length is None:'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    if body is not None:'"}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        if self.debuglevel > 0:'"}, "return_value": "47"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                            print('Unable to determine size of %r' % body)\""}, "return_value": "74"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        encode_chunked = True'"}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                        self.putheader('Transfer-Encoding', 'chunked')\""}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                else:'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                    self.putheader('Content-Length', str(content_length))\""}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        else:'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            encode_chunked = False'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        for hdr, value in headers.items():'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            self.putheader(hdr, value)'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if isinstance(body, str):'"}, "return_value": "33"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # RFC 2616 Section 3.7.1 says that text default has a'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # default charset of iso-8859-1.'"}, "return_value": "44"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            body = _encode(body, 'body')\""}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       self.endheaders(body, encode_chunked=encode_chunked)'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'/usr/local/lib/python3.8/http/client.py'"}, "return_value": "39"}, {"func_args": {"text": "':1302: '"}, "return_value": "7"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnection object at 0xffffa0cb3cd0>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'message_body = None'"}, "return_value": "19"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def endheaders(self, message_body=None, *, encode_chunked=False):'"}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"Indicate that the last header line has been sent to the server.'"}, "return_value": "74"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            This method sends the request to the server.  The optional message_body'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            argument can be used to pass a message body associated with the'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            request.'"}, "return_value": "20"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if self.__state == _CS_REQ_STARTED:'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            self.__state = _CS_REQ_SENT'"}, "return_value": "39"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        else:'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            raise CannotSendHeader()'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       self._send_output(message_body, encode_chunked=encode_chunked)'"}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'/usr/local/lib/python3.8/http/client.py'"}, "return_value": "39"}, {"func_args": {"text": "':1251: '"}, "return_value": "7"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnection object at 0xffffa0cb3cd0>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'message_body = None, encode_chunked = False'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def _send_output(self, message_body=None, encode_chunked=False):'"}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"Send the currently buffered request and clear the buffer.'"}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            Appends an extra \\\\\\\\r\\\\\\\\n to the buffer.'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            A message_body may be specified, to be appended to the request.'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self._buffer.extend((b\"\", b\"\"))'"}, "return_value": "39"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        msg = b\"\\\\r\\\\n\".join(self._buffer)'"}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        del self._buffer[:]'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       self.send(msg)'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'/usr/local/lib/python3.8/http/client.py'"}, "return_value": "39"}, {"func_args": {"text": "':1011: '"}, "return_value": "7"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnection object at 0xffffa0cb3cd0>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"data = b'GET /v1.21/images/json?filter=shipwright%2Fshared&only_ids=1&all=0 HTTP/1.1\\\\r\\\\nHost: localhost\\\\r\\\\nUser-Agent: docker-sdk-python/2.7.0\\\\r\\\\nAccept-Encoding: gzip, deflate\\\\r\\\\nAccept: */*\\\\r\\\\nConnection: keep-alive\\\\r\\\\n\\\\r\\\\n'\""}, "return_value": "226"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def send(self, data):'"}, "return_value": "25"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"Send `data\\' to the server.'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            ``data`` can be a string object, a bytes object, an array object, a'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            file-like object that supports a .read() method, or an iterable object.'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if self.sock is None:'"}, "return_value": "29"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if self.auto_open:'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>               self.connect()'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'/usr/local/lib/python3.8/http/client.py'"}, "return_value": "39"}, {"func_args": {"text": "':951: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnection object at 0xffffa0cb3cd0>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def connect(self):'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        sock.settimeout(self.timeout)'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       sock.connect(self.unix_socket)'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'E       FileNotFoundError: [Errno 2] No such file or directory'"}, "return_value": "62"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/docker/transport/unixconn.py'"}, "return_value": "66"}, {"func_args": {"text": "':46: FileNotFoundError'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'During handling of the above exception, another exception occurred:'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixAdapter object at 0xffff9f0f21f0>'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'request = <PreparedRequest [GET]>, stream = False'"}, "return_value": "49"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'proxies = OrderedDict()'"}, "return_value": "23"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):'"}, "return_value": "94"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"Sends PreparedRequest object. Returns Response object.'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param stream: (optional) Whether to stream the request content.'"}, "return_value": "76"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param timeout: (optional) How long to wait for the server to send'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                data before giving up, as a float, or a :ref:`(connect timeout,'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                read timeout) <timeouts>` tuple.'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :type timeout: float or tuple or urllib3 Timeout object'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param verify: (optional) Either a boolean, in which case it controls whether'"}, "return_value": "89"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                we verify the server's TLS certificate, or a string, in which case it\""}, "return_value": "85"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                must be a path to a CA bundle to use'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param cert: (optional) Any user-provided SSL certificate to be trusted.'"}, "return_value": "84"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param proxies: (optional) The proxies dictionary to apply to the request.'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :rtype: requests.Response'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        try:'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            conn = self.get_connection(request.url, proxies)'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        except LocationValueError as e:'"}, "return_value": "39"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            raise InvalidURL(e, request=request)'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self.cert_verify(conn, request.url, verify, cert)'"}, "return_value": "57"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        url = self.request_url(request, proxies)'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)'"}, "return_value": "108"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        chunked = not (request.body is None or 'Content-Length' in request.headers)\""}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if isinstance(timeout, tuple):'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            try:'"}, "return_value": "16"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                connect, read = timeout'"}, "return_value": "39"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                timeout = TimeoutSauce(connect=connect, read=read)'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            except ValueError as e:'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                # this may raise a string formatting error.'"}, "return_value": "59"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                err = (\"Invalid timeout {}. Pass a (connect, read) \"'"}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                       \"timeout tuple, or a single float to set \"'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                       \"both timeouts to the same value\".format(timeout))'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                raise ValueError(err)'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        elif isinstance(timeout, TimeoutSauce):'"}, "return_value": "47"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            pass'"}, "return_value": "16"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        else:'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            timeout = TimeoutSauce(connect=timeout, read=timeout)'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        try:'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if not chunked:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>               resp = conn.urlopen('"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    method=request.method,'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    url=url,'"}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    body=request.body,'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    headers=request.headers,'"}, "return_value": "44"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    redirect=False,'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    assert_same_host=False,'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    preload_content=False,'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    decode_content=False,'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    retries=self.max_retries,'"}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    timeout=timeout'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                )'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/requests/adapters.py'"}, "return_value": "58"}, {"func_args": {"text": "':440: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0xffffa49b3f70>'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"method = 'GET'\""}, "return_value": "14"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"url = '/v1.21/images/json?filter=shipwright%2Fshared&only_ids=1&all=0'\""}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'body = None'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"headers = {'User-Agent': 'docker-sdk-python/2.7.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\""}, "return_value": "132"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'redirect = False, assert_same_host = False'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'release_conn = False, chunked = False, body_pos = None'"}, "return_value": "54"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"response_kw = {'decode_content': False, 'preload_content': False}\""}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/v1.21/images/json', query='filter=shipwright%2Fshared&only_ids=1&all=0', fragment=None)\""}, "return_value": "157"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'destination_scheme = None, conn = None, release_this_conn = True'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'http_tunnel_required = False, err = None, clean_exit = False'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def urlopen('"}, "return_value": "16"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self,'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        method,'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        url,'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        body=None,'"}, "return_value": "18"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        headers=None,'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        retries=None,'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        redirect=True,'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        assert_same_host=True,'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        timeout=_Default,'"}, "return_value": "25"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        pool_timeout=None,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        release_conn=None,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        chunked=False,'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        body_pos=None,'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        **response_kw'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    ):'"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            Get a connection from the pool and perform an HTTP request. This is the'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            lowest level call for making a request, so you'll need to specify all\""}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            the raw details.'"}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            .. note::'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"               More commonly, it's appropriate to use a convenience method provided\""}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               by :class:`.RequestMethods`, such as :meth:`request`.'"}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            .. note::'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               `release_conn` will only behave as expected if'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               `preload_content=False` because we want to make'"}, "return_value": "62"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               `preload_content=False` the default behaviour someday soon without'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               breaking backwards compatibility.'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param method:'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                HTTP request method (such as GET, POST, PUT, etc.)'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param url:'"}, "return_value": "23"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                The URL to perform the request on.'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param body:'"}, "return_value": "24"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Data to send in the request body, either :class:`str`, :class:`bytes`,'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                an iterable of :class:`str`/:class:`bytes`, or a file-like object.'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param headers:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Dictionary of custom headers to send, such as User-Agent,'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If-None-Match, etc. If None, pool headers are used. If provided,'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                these headers completely replace any pool-specific headers.'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param retries:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Configure the number of retries to allow before raising a'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :class:`~urllib3.exceptions.MaxRetryError` exception.'"}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Pass ``None`` to retry until you receive a response. Pass a'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :class:`~urllib3.util.retry.Retry` object for fine-grained control'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                over different types of retries.'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Pass an integer number to retry connection errors that many times,'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                but no other types of errors. Pass zero to never retry.'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If ``False``, then retries are disabled and any exception is raised'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                immediately. Also, instead of raising a MaxRetryError on redirects,'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                the redirect response will be returned.'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param redirect:'"}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If True, automatically handle redirects (status codes 301, 302,'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                303, 307, 308). Each redirect counts as a retry. Disabling retries'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                will disable redirect, too.'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param assert_same_host:'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If ``True``, will make sure that the host of the pool requests is'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                consistent else will raise HostChangedError. When ``False``, you can'"}, "return_value": "84"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                use the pool on an HTTP proxy and request foreign hosts.'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param timeout:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If specified, overrides the default timeout for this one'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                request. It may be a float (in seconds) or an instance of'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :class:`urllib3.util.Timeout`.'"}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param pool_timeout:'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If set and the pool is set to block=True, then this method will'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                block for ``pool_timeout`` seconds and raise EmptyPoolError if no'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                connection is available within the time period.'"}, "return_value": "63"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param release_conn:'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If False, then the urlopen call will not release the connection'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                back into the pool once a response is received (but will release if'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                you read the entire contents of the response such as when'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                `preload_content=True`). This is useful if you're not preloading\""}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                the response's content immediately. You will need to call\""}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                ``r.release_conn()`` on the response ``r`` to return the connection'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                back into the pool. If None, it takes the value of'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                ``response_kw.get('preload_content', True)``.\""}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param chunked:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If True, urllib3 will send the body using chunked transfer'"}, "return_value": "74"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                encoding. Otherwise, urllib3 will send the body using the standard'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                content-length form. Defaults to False.'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param int body_pos:'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Position to seek to in file-like body in the event of a retry or'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                redirect. Typically this won't need to be set because urllib3 will\""}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                auto-populate the value when needed.'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param \\\\\\\\**response_kw:'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Additional parameters are passed to'"}, "return_value": "51"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :meth:`urllib3.response.HTTPResponse.from_httplib`'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        parsed_url = parse_url(url)'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        destination_scheme = parsed_url.scheme'"}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if headers is None:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            headers = self.headers'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if not isinstance(retries, Retry):'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if release_conn is None:'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            release_conn = response_kw.get(\"preload_content\", True)'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Check host'"}, "return_value": "20"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if assert_same_host and not self.is_same_host(url):'"}, "return_value": "59"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            raise HostChangedError(self, url, retries)'"}, "return_value": "54"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        # Ensure that the URL we're connecting to is properly encoded\""}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if url.startswith(\"/\"):'"}, "return_value": "31"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            url = six.ensure_str(_encode_target(url))'"}, "return_value": "53"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        else:'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            url = six.ensure_str(parsed_url.url)'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        conn = None'"}, "return_value": "19"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Track whether `conn` needs to be released before'"}, "return_value": "58"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # returning/raising/recursing. Update this variable if necessary, and'"}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # leave `release_conn` constant throughout the function. That way, if'"}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # the function recurses, the original value of `release_conn` will be'"}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # passed down into the recursive call, and its value will be respected.'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        #'"}, "return_value": "9"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # See issue #651 [1] for details.'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        #'"}, "return_value": "9"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # [1] <https://github.com/urllib3/urllib3/issues/651>'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        release_this_conn = release_conn'"}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        http_tunnel_required = connection_requires_http_tunnel('"}, "return_value": "63"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            self.proxy, self.proxy_config, destination_scheme'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        )'"}, "return_value": "9"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Merge the proxy headers. Only done when not using HTTP CONNECT. We'"}, "return_value": "76"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # have to copy the headers dict so we can safely change it without those'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        # changes being reflected in anyone else's copy.\""}, "return_value": "56"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if not http_tunnel_required:'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            headers = headers.copy()'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            headers.update(self.proxy_headers)'"}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Must keep the exception bound to a separate variable or else Python 3'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # complains about UnboundLocalError.'"}, "return_value": "44"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        err = None'"}, "return_value": "18"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Keep track of whether we cleanly exited the except block. This'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # ensures we do proper cleanup in finally.'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        clean_exit = False'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Rewind body position, if needed. Record current position'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # for future rewinds in the event of a redirect/retry.'"}, "return_value": "62"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        body_pos = set_file_position(body, body_pos)'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        try:'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Request a connection from the queue.'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            timeout_obj = self._get_timeout(timeout)'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            conn = self._get_conn(timeout=pool_timeout)'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            conn.timeout = timeout_obj.connect_timeout'"}, "return_value": "54"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            is_new_proxy_conn = self.proxy is not None and not getattr('"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                conn, \"sock\", None'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            )'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if is_new_proxy_conn and http_tunnel_required:'"}, "return_value": "58"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                self._prepare_proxy(conn)'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Make the request on the httplib connection object.'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            httplib_response = self._make_request('"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                conn,'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                method,'"}, "return_value": "23"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                url,'"}, "return_value": "20"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                timeout=timeout_obj,'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                body=body,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                headers=headers,'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                chunked=chunked,'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            )'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            # If we're going to release the connection in ``finally:``, then\""}, "return_value": "76"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            # the response doesn't need to know about the connection. Otherwise\""}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            # it will also try to release it and we'll have a double-release\""}, "return_value": "76"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # mess.'"}, "return_value": "19"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            response_conn = conn if not release_conn else None'"}, "return_value": "62"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Pass method to Response for length checking'"}, "return_value": "57"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            response_kw[\"request_method\"] = method'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            # Import httplib's response into our own wrapper object\""}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            response = self.ResponseCls.from_httplib('"}, "return_value": "53"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                httplib_response,'"}, "return_value": "33"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                pool=self,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                connection=response_conn,'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                retries=retries,'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                **response_kw'"}, "return_value": "29"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            )'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Everything went great!'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            clean_exit = True'"}, "return_value": "29"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        except EmptyPoolError:'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            # Didn't get a connection from the pool, no need to clean up\""}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            clean_exit = True'"}, "return_value": "29"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            release_this_conn = False'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            raise'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        except ('"}, "return_value": "16"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            TimeoutError,'"}, "return_value": "25"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            HTTPException,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            SocketError,'"}, "return_value": "24"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            ProtocolError,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            BaseSSLError,'"}, "return_value": "25"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            SSLError,'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            CertificateError,'"}, "return_value": "29"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        ) as e:'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Discard the connection for these exceptions. It will be'"}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # replaced during the next _get_conn() call.'"}, "return_value": "56"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            clean_exit = False'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            def _is_ssl_error_message_from_http_proxy(ssl_error):'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                # We're trying to detect the message 'WRONG_VERSION_NUMBER' but\""}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                # SSLErrors are kinda all over the place when it comes to the message,'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                # so we try to cover our bases here!'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                message = \" \".join(re.split(\"[^a-z]\", str(ssl_error).lower()))'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                return ('"}, "return_value": "24"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    \"wrong version number\" in message or \"unknown protocol\" in message'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                )'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Try to detect a common user error with proxies which is to'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            # set an HTTP proxy to be HTTPS when it should be 'http://'\""}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            # (ie {'http': 'http://proxy', 'https': 'https://proxy'})\""}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Instead we add a nice error message and point to a URL.'"}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if ('"}, "return_value": "16"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                isinstance(e, BaseSSLError)'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                and self.proxy'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                and _is_ssl_error_message_from_http_proxy(e)'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            ):'"}, "return_value": "14"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                e = ProxyError('"}, "return_value": "31"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    \"Your proxy appears to only use HTTP and not HTTPS, \"'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    \"try changing your proxy URL to be HTTP. See: \"'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    \"https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html\"'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    \"#https-proxy-error-http-proxy\",'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    SSLError(e),'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                )'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            elif isinstance(e, (BaseSSLError, CertificateError)):'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                e = SSLError(e)'"}, "return_value": "31"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                e = ProxyError(\"Cannot connect to proxy.\", e)'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            elif isinstance(e, (SocketError, HTTPException)):'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                e = ProtocolError(\"Connection aborted.\", e)'"}, "return_value": "59"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>           retries = retries.increment('"}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            )'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/urllib3/connectionpool.py'"}, "return_value": "63"}, {"func_args": {"text": "':785: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = Retry(total=0, connect=None, read=False, redirect=None, status=None)'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"method = 'GET'\""}, "return_value": "14"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"url = '/v1.21/images/json?filter=shipwright%2Fshared&only_ids=1&all=0'\""}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'response = None'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"error = ProtocolError('Connection aborted.', FileNotFoundError(2, 'No such file or directory'))\""}, "return_value": "95"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_pool = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0xffffa49b3f70>'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_stacktrace = <traceback object at 0xffffa149fb40>'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def increment('"}, "return_value": "18"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self,'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        method=None,'"}, "return_value": "20"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        url=None,'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        response=None,'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        error=None,'"}, "return_value": "19"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        _pool=None,'"}, "return_value": "19"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        _stacktrace=None,'"}, "return_value": "25"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    ):'"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"Return a new Retry object with incremented retry counters.'"}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param response: A response object, or None, if the server did not'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                return a response.'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :type response: :class:`~urllib3.response.HTTPResponse`'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param Exception error: An error encountered during the request, or'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                None if the response was received successfully.'"}, "return_value": "63"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :return: A new ``Retry`` object.'"}, "return_value": "44"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if self.total is False and error:'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Disabled, indicate to re-raise the error.'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            raise six.reraise(type(error), error, _stacktrace)'"}, "return_value": "62"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        total = self.total'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if total is not None:'"}, "return_value": "29"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            total -= 1'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        connect = self.connect'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        read = self.read'"}, "return_value": "24"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        redirect = self.redirect'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        status_count = self.status'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        other = self.other'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        cause = \"unknown\"'"}, "return_value": "25"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        status = None'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        redirect_location = None'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if error and self._is_connection_error(error):'"}, "return_value": "54"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Connect retry?'"}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if connect is False:'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                raise six.reraise(type(error), error, _stacktrace)'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            elif connect is not None:'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                connect -= 1'"}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        elif error and self._is_read_error(error):'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Read retry?'"}, "return_value": "25"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if read is False or not self._is_method_retryable(method):'"}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>               raise six.reraise(type(error), error, _stacktrace)'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/urllib3/util/retry.py'"}, "return_value": "59"}, {"func_args": {"text": "':550: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"tp = <class 'urllib3.exceptions.ProtocolError'>, value = None, tb = None\""}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def reraise(tp, value, tb=None):'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        try:'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if value is None:'"}, "return_value": "29"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                value = tp()'"}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if value.__traceback__ is not tb:'"}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>               raise value.with_traceback(tb)'"}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/urllib3/packages/six.py'"}, "return_value": "61"}, {"func_args": {"text": "':769: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0xffffa49b3f70>'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"method = 'GET'\""}, "return_value": "14"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"url = '/v1.21/images/json?filter=shipwright%2Fshared&only_ids=1&all=0'\""}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'body = None'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"headers = {'User-Agent': 'docker-sdk-python/2.7.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\""}, "return_value": "132"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'redirect = False, assert_same_host = False'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'release_conn = False, chunked = False, body_pos = None'"}, "return_value": "54"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"response_kw = {'decode_content': False, 'preload_content': False}\""}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/v1.21/images/json', query='filter=shipwright%2Fshared&only_ids=1&all=0', fragment=None)\""}, "return_value": "157"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'destination_scheme = None, conn = None, release_this_conn = True'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'http_tunnel_required = False, err = None, clean_exit = False'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def urlopen('"}, "return_value": "16"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self,'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        method,'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        url,'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        body=None,'"}, "return_value": "18"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        headers=None,'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        retries=None,'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        redirect=True,'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        assert_same_host=True,'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        timeout=_Default,'"}, "return_value": "25"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        pool_timeout=None,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        release_conn=None,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        chunked=False,'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        body_pos=None,'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        **response_kw'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    ):'"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            Get a connection from the pool and perform an HTTP request. This is the'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            lowest level call for making a request, so you'll need to specify all\""}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            the raw details.'"}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            .. note::'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"               More commonly, it's appropriate to use a convenience method provided\""}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               by :class:`.RequestMethods`, such as :meth:`request`.'"}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            .. note::'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               `release_conn` will only behave as expected if'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               `preload_content=False` because we want to make'"}, "return_value": "62"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               `preload_content=False` the default behaviour someday soon without'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               breaking backwards compatibility.'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param method:'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                HTTP request method (such as GET, POST, PUT, etc.)'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param url:'"}, "return_value": "23"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                The URL to perform the request on.'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param body:'"}, "return_value": "24"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Data to send in the request body, either :class:`str`, :class:`bytes`,'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                an iterable of :class:`str`/:class:`bytes`, or a file-like object.'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param headers:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Dictionary of custom headers to send, such as User-Agent,'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If-None-Match, etc. If None, pool headers are used. If provided,'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                these headers completely replace any pool-specific headers.'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param retries:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Configure the number of retries to allow before raising a'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :class:`~urllib3.exceptions.MaxRetryError` exception.'"}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Pass ``None`` to retry until you receive a response. Pass a'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :class:`~urllib3.util.retry.Retry` object for fine-grained control'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                over different types of retries.'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Pass an integer number to retry connection errors that many times,'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                but no other types of errors. Pass zero to never retry.'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If ``False``, then retries are disabled and any exception is raised'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                immediately. Also, instead of raising a MaxRetryError on redirects,'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                the redirect response will be returned.'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param redirect:'"}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If True, automatically handle redirects (status codes 301, 302,'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                303, 307, 308). Each redirect counts as a retry. Disabling retries'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                will disable redirect, too.'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param assert_same_host:'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If ``True``, will make sure that the host of the pool requests is'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                consistent else will raise HostChangedError. When ``False``, you can'"}, "return_value": "84"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                use the pool on an HTTP proxy and request foreign hosts.'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param timeout:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If specified, overrides the default timeout for this one'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                request. It may be a float (in seconds) or an instance of'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :class:`urllib3.util.Timeout`.'"}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param pool_timeout:'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If set and the pool is set to block=True, then this method will'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                block for ``pool_timeout`` seconds and raise EmptyPoolError if no'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                connection is available within the time period.'"}, "return_value": "63"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param release_conn:'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If False, then the urlopen call will not release the connection'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                back into the pool once a response is received (but will release if'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                you read the entire contents of the response such as when'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                `preload_content=True`). This is useful if you're not preloading\""}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                the response's content immediately. You will need to call\""}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                ``r.release_conn()`` on the response ``r`` to return the connection'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                back into the pool. If None, it takes the value of'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                ``response_kw.get('preload_content', True)``.\""}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param chunked:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If True, urllib3 will send the body using chunked transfer'"}, "return_value": "74"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                encoding. Otherwise, urllib3 will send the body using the standard'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                content-length form. Defaults to False.'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param int body_pos:'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Position to seek to in file-like body in the event of a retry or'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                redirect. Typically this won't need to be set because urllib3 will\""}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                auto-populate the value when needed.'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param \\\\\\\\**response_kw:'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Additional parameters are passed to'"}, "return_value": "51"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :meth:`urllib3.response.HTTPResponse.from_httplib`'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        parsed_url = parse_url(url)'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        destination_scheme = parsed_url.scheme'"}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if headers is None:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            headers = self.headers'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if not isinstance(retries, Retry):'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if release_conn is None:'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            release_conn = response_kw.get(\"preload_content\", True)'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Check host'"}, "return_value": "20"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if assert_same_host and not self.is_same_host(url):'"}, "return_value": "59"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            raise HostChangedError(self, url, retries)'"}, "return_value": "54"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        # Ensure that the URL we're connecting to is properly encoded\""}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if url.startswith(\"/\"):'"}, "return_value": "31"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            url = six.ensure_str(_encode_target(url))'"}, "return_value": "53"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        else:'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            url = six.ensure_str(parsed_url.url)'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        conn = None'"}, "return_value": "19"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Track whether `conn` needs to be released before'"}, "return_value": "58"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # returning/raising/recursing. Update this variable if necessary, and'"}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # leave `release_conn` constant throughout the function. That way, if'"}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # the function recurses, the original value of `release_conn` will be'"}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # passed down into the recursive call, and its value will be respected.'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        #'"}, "return_value": "9"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # See issue #651 [1] for details.'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        #'"}, "return_value": "9"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # [1] <https://github.com/urllib3/urllib3/issues/651>'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        release_this_conn = release_conn'"}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        http_tunnel_required = connection_requires_http_tunnel('"}, "return_value": "63"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            self.proxy, self.proxy_config, destination_scheme'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        )'"}, "return_value": "9"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Merge the proxy headers. Only done when not using HTTP CONNECT. We'"}, "return_value": "76"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # have to copy the headers dict so we can safely change it without those'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        # changes being reflected in anyone else's copy.\""}, "return_value": "56"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if not http_tunnel_required:'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            headers = headers.copy()'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            headers.update(self.proxy_headers)'"}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Must keep the exception bound to a separate variable or else Python 3'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # complains about UnboundLocalError.'"}, "return_value": "44"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        err = None'"}, "return_value": "18"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Keep track of whether we cleanly exited the except block. This'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # ensures we do proper cleanup in finally.'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        clean_exit = False'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Rewind body position, if needed. Record current position'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # for future rewinds in the event of a redirect/retry.'"}, "return_value": "62"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        body_pos = set_file_position(body, body_pos)'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        try:'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Request a connection from the queue.'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            timeout_obj = self._get_timeout(timeout)'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            conn = self._get_conn(timeout=pool_timeout)'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            conn.timeout = timeout_obj.connect_timeout'"}, "return_value": "54"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            is_new_proxy_conn = self.proxy is not None and not getattr('"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                conn, \"sock\", None'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            )'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if is_new_proxy_conn and http_tunnel_required:'"}, "return_value": "58"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                self._prepare_proxy(conn)'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Make the request on the httplib connection object.'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>           httplib_response = self._make_request('"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                conn,'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                method,'"}, "return_value": "23"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                url,'"}, "return_value": "20"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                timeout=timeout_obj,'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                body=body,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                headers=headers,'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                chunked=chunked,'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            )'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/urllib3/connectionpool.py'"}, "return_value": "63"}, {"func_args": {"text": "':703: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0xffffa49b3f70>'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'conn = <docker.transport.unixconn.UnixHTTPConnection object at 0xffffa0cb3cd0>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"method = 'GET'\""}, "return_value": "14"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"url = '/v1.21/images/json?filter=shipwright%2Fshared&only_ids=1&all=0'\""}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'timeout = Timeout(connect=60, read=60, total=None), chunked = False'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"httplib_request_kw = {'body': None, 'headers': {'User-Agent': 'docker-sdk-python/2.7.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}}\""}, "return_value": "170"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'timeout_obj = Timeout(connect=60, read=60, total=None)'"}, "return_value": "54"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def _make_request('"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    ):'"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            Perform a request on a given urllib connection object taken from our'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            pool.'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param conn:'"}, "return_value": "24"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                a connection from one of our connection pools'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param timeout:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Socket timeout in seconds for the request. This can be a'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                float or integer, which will set the same timeout value for'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                the socket connect and the socket read, or an instance of'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :class:`urllib3.util.Timeout`, which gives you more fine-grained'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                control over your timeouts.'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self.num_requests += 1'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        timeout_obj = self._get_timeout(timeout)'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        timeout_obj.start_connect()'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        conn.timeout = timeout_obj.connect_timeout'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Trigger any extra validation we need to do.'"}, "return_value": "53"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        try:'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            self._validate_conn(conn)'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        except (SocketTimeout, BaseSSLError) as e:'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            raise'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # conn.request() calls http.client.*.request, not the method in'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # urllib3.request. It also calls makefile (recv) on the socket.'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        try:'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if chunked:'"}, "return_value": "23"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                conn.request_chunked(method, url, **httplib_request_kw)'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            else:'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>               conn.request(method, url, **httplib_request_kw)'"}, "return_value": "63"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/urllib3/connectionpool.py'"}, "return_value": "63"}, {"func_args": {"text": "':398: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnection object at 0xffffa0cb3cd0>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"method = 'GET'\""}, "return_value": "14"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"url = '/v1.21/images/json?filter=shipwright%2Fshared&only_ids=1&all=0'\""}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'body = None'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"headers = {'User-Agent': 'docker-sdk-python/2.7.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\""}, "return_value": "132"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def request(self, method, url, body=None, headers={}, *,'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                encode_chunked=False):'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"Send a complete request to the server.\"\"\"'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       self._send_request(method, url, body, headers, encode_chunked)'"}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'/usr/local/lib/python3.8/http/client.py'"}, "return_value": "39"}, {"func_args": {"text": "':1256: '"}, "return_value": "7"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnection object at 0xffffa0cb3cd0>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"method = 'GET'\""}, "return_value": "14"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"url = '/v1.21/images/json?filter=shipwright%2Fshared&only_ids=1&all=0'\""}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'body = None'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"headers = {'User-Agent': 'docker-sdk-python/2.7.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\""}, "return_value": "132"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'encode_chunked = False'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def _send_request(self, method, url, body, headers, encode_chunked):'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Honor explicitly requested Host: and Accept-Encoding: headers.'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        header_names = frozenset(k.lower() for k in headers)'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        skips = {}'"}, "return_value": "18"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        if 'host' in header_names:\""}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            skips['skip_host'] = 1\""}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        if 'accept-encoding' in header_names:\""}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            skips['skip_accept_encoding'] = 1\""}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self.putrequest(method, url, **skips)'"}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # chunked encoding will happen if HTTP/1.1 is used and either'"}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # the caller passes encode_chunked=True or the following'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # conditions hold:'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # 1. content-length has not been explicitly set'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # 2. the body is a file or iterable, but not a str or bytes-like'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # 3. Transfer-Encoding has NOT been explicitly set by the caller'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        if 'content-length' not in header_names:\""}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # only chunk body if not explicitly set for backwards'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # compatibility, assuming the client code is already handling the'"}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # chunking'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            if 'transfer-encoding' not in header_names:\""}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                # if content-length cannot be automatically determined, fall'"}, "return_value": "76"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                # back to chunked encoding'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                encode_chunked = False'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                content_length = self._get_content_length(body, method)'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                if content_length is None:'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    if body is not None:'"}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        if self.debuglevel > 0:'"}, "return_value": "47"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                            print('Unable to determine size of %r' % body)\""}, "return_value": "74"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        encode_chunked = True'"}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                        self.putheader('Transfer-Encoding', 'chunked')\""}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                else:'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                    self.putheader('Content-Length', str(content_length))\""}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        else:'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            encode_chunked = False'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        for hdr, value in headers.items():'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            self.putheader(hdr, value)'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if isinstance(body, str):'"}, "return_value": "33"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # RFC 2616 Section 3.7.1 says that text default has a'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # default charset of iso-8859-1.'"}, "return_value": "44"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            body = _encode(body, 'body')\""}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       self.endheaders(body, encode_chunked=encode_chunked)'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'/usr/local/lib/python3.8/http/client.py'"}, "return_value": "39"}, {"func_args": {"text": "':1302: '"}, "return_value": "7"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnection object at 0xffffa0cb3cd0>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'message_body = None'"}, "return_value": "19"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def endheaders(self, message_body=None, *, encode_chunked=False):'"}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"Indicate that the last header line has been sent to the server.'"}, "return_value": "74"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            This method sends the request to the server.  The optional message_body'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            argument can be used to pass a message body associated with the'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            request.'"}, "return_value": "20"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if self.__state == _CS_REQ_STARTED:'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            self.__state = _CS_REQ_SENT'"}, "return_value": "39"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        else:'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            raise CannotSendHeader()'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       self._send_output(message_body, encode_chunked=encode_chunked)'"}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'/usr/local/lib/python3.8/http/client.py'"}, "return_value": "39"}, {"func_args": {"text": "':1251: '"}, "return_value": "7"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnection object at 0xffffa0cb3cd0>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'message_body = None, encode_chunked = False'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def _send_output(self, message_body=None, encode_chunked=False):'"}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"Send the currently buffered request and clear the buffer.'"}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            Appends an extra \\\\\\\\r\\\\\\\\n to the buffer.'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            A message_body may be specified, to be appended to the request.'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self._buffer.extend((b\"\", b\"\"))'"}, "return_value": "39"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        msg = b\"\\\\r\\\\n\".join(self._buffer)'"}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        del self._buffer[:]'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       self.send(msg)'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'/usr/local/lib/python3.8/http/client.py'"}, "return_value": "39"}, {"func_args": {"text": "':1011: '"}, "return_value": "7"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnection object at 0xffffa0cb3cd0>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"data = b'GET /v1.21/images/json?filter=shipwright%2Fshared&only_ids=1&all=0 HTTP/1.1\\\\r\\\\nHost: localhost\\\\r\\\\nUser-Agent: docker-sdk-python/2.7.0\\\\r\\\\nAccept-Encoding: gzip, deflate\\\\r\\\\nAccept: */*\\\\r\\\\nConnection: keep-alive\\\\r\\\\n\\\\r\\\\n'\""}, "return_value": "226"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def send(self, data):'"}, "return_value": "25"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"Send `data\\' to the server.'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            ``data`` can be a string object, a bytes object, an array object, a'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            file-like object that supports a .read() method, or an iterable object.'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if self.sock is None:'"}, "return_value": "29"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if self.auto_open:'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>               self.connect()'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'/usr/local/lib/python3.8/http/client.py'"}, "return_value": "39"}, {"func_args": {"text": "':951: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnection object at 0xffffa0cb3cd0>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def connect(self):'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        sock.settimeout(self.timeout)'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       sock.connect(self.unix_socket)'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"E       urllib3.exceptions.ProtocolError: ('Connection aborted.', FileNotFoundError(2, 'No such file or directory'))\""}, "return_value": "116"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/docker/transport/unixconn.py'"}, "return_value": "66"}, {"func_args": {"text": "':46: ProtocolError'"}, "return_value": "18"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'During handling of the above exception, another exception occurred:'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"tmpdir = local('/tmp/pytest-of-root/pytest-1/test_short_name_target0')\""}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'docker_client = <docker.api.client.APIClient object at 0xffff9f0f2940>'"}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def test_short_name_target(tmpdir, docker_client):'"}, "return_value": "54"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        path = str(tmpdir.join('shipwright-sample'))\""}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        source = pkg_resources.resource_filename('"}, "return_value": "49"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            __name__,'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            'examples/shipwright-sample',\""}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        )'"}, "return_value": "9"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        repo = create_repo(path, source)'"}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        tag = repo.head.ref.commit.hexsha[:12]'"}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        client_cfg = docker_utils.kwargs_from_env()'"}, "return_value": "51"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        cli = docker_client'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        try:'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            defaults = get_defaults()'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            defaults['--upto'] = ['shared']\""}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            shipw_cli.run('"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                path=path,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                client_cfg=client_cfg,'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                arguments=defaults,'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                environ={},'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            )'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            shared, base = ('"}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                cli.images(name='shipwright/service1') +\""}, "return_value": "56"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                cli.images(name='shipwright/shared') +\""}, "return_value": "54"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                cli.images(name='shipwright/base')\""}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            )'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            assert set(shared['RepoTags']) == {\""}, "return_value": "47"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                'shipwright/shared:master',\""}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                'shipwright/shared:latest',\""}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                'shipwright/shared:' + tag,\""}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            }'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            assert set(base['RepoTags']) == {\""}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                'shipwright/base:master',\""}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                'shipwright/base:latest',\""}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                'shipwright/base:' + tag,\""}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            }'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        finally:'"}, "return_value": "16"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            old_images = ('"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\">               cli.images(name='shipwright/shared', quiet=True) +\""}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                cli.images(name='shipwright/base', quiet=True)\""}, "return_value": "62"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            )'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'tests/integration/test_docker_builds.py'"}, "return_value": "39"}, {"func_args": {"text": "':637: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/docker/api/image.py'"}, "return_value": "57"}, {"func_args": {"text": "':93: in images'"}, "return_value": "14"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    res = self._result(self._get(self._url(\"/images/json\"), params=params),'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/docker/utils/decorators.py'"}, "return_value": "64"}, {"func_args": {"text": "':46: in inner'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    return f(self, *args, **kwargs)'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/docker/api/client.py'"}, "return_value": "58"}, {"func_args": {"text": "':191: in _get'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    return self.get(url, **self._set_request_timeout(kwargs))'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/requests/sessions.py'"}, "return_value": "58"}, {"func_args": {"text": "':542: in get'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"    return self.request('GET', url, **kwargs)\""}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/requests/sessions.py'"}, "return_value": "58"}, {"func_args": {"text": "':529: in request'"}, "return_value": "16"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    resp = self.send(prep, **send_kwargs)'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/requests/sessions.py'"}, "return_value": "58"}, {"func_args": {"text": "':645: in send'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    r = adapter.send(request, **kwargs)'"}, "return_value": "39"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixAdapter object at 0xffff9f0f21f0>'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'request = <PreparedRequest [GET]>, stream = False'"}, "return_value": "49"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'proxies = OrderedDict()'"}, "return_value": "23"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):'"}, "return_value": "94"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"Sends PreparedRequest object. Returns Response object.'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param stream: (optional) Whether to stream the request content.'"}, "return_value": "76"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param timeout: (optional) How long to wait for the server to send'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                data before giving up, as a float, or a :ref:`(connect timeout,'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                read timeout) <timeouts>` tuple.'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :type timeout: float or tuple or urllib3 Timeout object'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param verify: (optional) Either a boolean, in which case it controls whether'"}, "return_value": "89"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                we verify the server's TLS certificate, or a string, in which case it\""}, "return_value": "85"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                must be a path to a CA bundle to use'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param cert: (optional) Any user-provided SSL certificate to be trusted.'"}, "return_value": "84"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param proxies: (optional) The proxies dictionary to apply to the request.'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :rtype: requests.Response'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        try:'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            conn = self.get_connection(request.url, proxies)'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        except LocationValueError as e:'"}, "return_value": "39"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            raise InvalidURL(e, request=request)'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self.cert_verify(conn, request.url, verify, cert)'"}, "return_value": "57"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        url = self.request_url(request, proxies)'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)'"}, "return_value": "108"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        chunked = not (request.body is None or 'Content-Length' in request.headers)\""}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if isinstance(timeout, tuple):'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            try:'"}, "return_value": "16"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                connect, read = timeout'"}, "return_value": "39"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                timeout = TimeoutSauce(connect=connect, read=read)'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            except ValueError as e:'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                # this may raise a string formatting error.'"}, "return_value": "59"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                err = (\"Invalid timeout {}. Pass a (connect, read) \"'"}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                       \"timeout tuple, or a single float to set \"'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                       \"both timeouts to the same value\".format(timeout))'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                raise ValueError(err)'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        elif isinstance(timeout, TimeoutSauce):'"}, "return_value": "47"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            pass'"}, "return_value": "16"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        else:'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            timeout = TimeoutSauce(connect=timeout, read=timeout)'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        try:'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if not chunked:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                resp = conn.urlopen('"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    method=request.method,'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    url=url,'"}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    body=request.body,'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    headers=request.headers,'"}, "return_value": "44"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    redirect=False,'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    assert_same_host=False,'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    preload_content=False,'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    decode_content=False,'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    retries=self.max_retries,'"}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    timeout=timeout'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                )'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Send the request.'"}, "return_value": "31"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            else:'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                if hasattr(conn, 'proxy_pool'):\""}, "return_value": "47"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    conn = conn.proxy_pool'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                try:'"}, "return_value": "20"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                    skip_host = 'Host' in request.headers\""}, "return_value": "57"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    low_conn.putrequest(request.method,'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                                        url,'"}, "return_value": "44"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                                        skip_accept_encoding=True,'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                                        skip_host=skip_host)'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    for header, value in request.headers.items():'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        low_conn.putheader(header, value)'"}, "return_value": "57"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    low_conn.endheaders()'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    for i in request.body:'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                        low_conn.send(hex(len(i))[2:].encode('utf-8'))\""}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                        low_conn.send(b'\\\\r\\\\n')\""}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        low_conn.send(i)'"}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                        low_conn.send(b'\\\\r\\\\n')\""}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                    low_conn.send(b'0\\\\r\\\\n\\\\r\\\\n')\""}, "return_value": "47"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    # Receive the response from the server'"}, "return_value": "58"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    try:'"}, "return_value": "24"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        # For Python 2.7, use buffering of HTTP responses'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        r = low_conn.getresponse(buffering=True)'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    except TypeError:'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        # For compatibility with Python 3.3+'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        r = low_conn.getresponse()'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    resp = HTTPResponse.from_httplib('"}, "return_value": "53"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        r,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        pool=conn,'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        connection=low_conn,'"}, "return_value": "44"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        preload_content=False,'"}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        decode_content=False'"}, "return_value": "44"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    )'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                except:'"}, "return_value": "23"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    # If we hit any problems here, clean up the connection.'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    # Then, reraise so that we can handle the actual exception.'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    low_conn.close()'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    raise'"}, "return_value": "25"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        except (ProtocolError, socket.error) as err:'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>           raise ConnectionError(err, request=request)'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"E           requests.exceptions.ConnectionError: ('Connection aborted.', FileNotFoundError(2, 'No such file or directory'))\""}, "return_value": "123"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/requests/adapters.py'"}, "return_value": "58"}, {"func_args": {"text": "':501: ConnectionError'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'____________________ test_child_inherits_parents_build_tag _____________________'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0xffffa2a18b80>'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"method = 'GET'\""}, "return_value": "14"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"url = '/v1.18/images/json?filter=shipwright%2Fbase&only_ids=0&all=0'\""}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'body = None'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"headers = {'User-Agent': 'docker-sdk-python/2.7.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\""}, "return_value": "132"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'redirect = False, assert_same_host = False'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'release_conn = False, chunked = False, body_pos = None'"}, "return_value": "54"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"response_kw = {'decode_content': False, 'preload_content': False}\""}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/v1.18/images/json', query='filter=shipwright%2Fbase&only_ids=0&all=0', fragment=None)\""}, "return_value": "155"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'destination_scheme = None, conn = None, release_this_conn = True'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'http_tunnel_required = False, err = None, clean_exit = False'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def urlopen('"}, "return_value": "16"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self,'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        method,'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        url,'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        body=None,'"}, "return_value": "18"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        headers=None,'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        retries=None,'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        redirect=True,'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        assert_same_host=True,'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        timeout=_Default,'"}, "return_value": "25"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        pool_timeout=None,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        release_conn=None,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        chunked=False,'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        body_pos=None,'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        **response_kw'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    ):'"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            Get a connection from the pool and perform an HTTP request. This is the'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            lowest level call for making a request, so you'll need to specify all\""}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            the raw details.'"}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            .. note::'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"               More commonly, it's appropriate to use a convenience method provided\""}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               by :class:`.RequestMethods`, such as :meth:`request`.'"}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            .. note::'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               `release_conn` will only behave as expected if'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               `preload_content=False` because we want to make'"}, "return_value": "62"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               `preload_content=False` the default behaviour someday soon without'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               breaking backwards compatibility.'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param method:'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                HTTP request method (such as GET, POST, PUT, etc.)'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param url:'"}, "return_value": "23"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                The URL to perform the request on.'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param body:'"}, "return_value": "24"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Data to send in the request body, either :class:`str`, :class:`bytes`,'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                an iterable of :class:`str`/:class:`bytes`, or a file-like object.'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param headers:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Dictionary of custom headers to send, such as User-Agent,'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If-None-Match, etc. If None, pool headers are used. If provided,'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                these headers completely replace any pool-specific headers.'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param retries:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Configure the number of retries to allow before raising a'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :class:`~urllib3.exceptions.MaxRetryError` exception.'"}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Pass ``None`` to retry until you receive a response. Pass a'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :class:`~urllib3.util.retry.Retry` object for fine-grained control'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                over different types of retries.'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Pass an integer number to retry connection errors that many times,'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                but no other types of errors. Pass zero to never retry.'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If ``False``, then retries are disabled and any exception is raised'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                immediately. Also, instead of raising a MaxRetryError on redirects,'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                the redirect response will be returned.'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param redirect:'"}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If True, automatically handle redirects (status codes 301, 302,'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                303, 307, 308). Each redirect counts as a retry. Disabling retries'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                will disable redirect, too.'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param assert_same_host:'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If ``True``, will make sure that the host of the pool requests is'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                consistent else will raise HostChangedError. When ``False``, you can'"}, "return_value": "84"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                use the pool on an HTTP proxy and request foreign hosts.'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param timeout:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If specified, overrides the default timeout for this one'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                request. It may be a float (in seconds) or an instance of'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :class:`urllib3.util.Timeout`.'"}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param pool_timeout:'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If set and the pool is set to block=True, then this method will'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                block for ``pool_timeout`` seconds and raise EmptyPoolError if no'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                connection is available within the time period.'"}, "return_value": "63"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param release_conn:'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If False, then the urlopen call will not release the connection'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                back into the pool once a response is received (but will release if'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                you read the entire contents of the response such as when'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                `preload_content=True`). This is useful if you're not preloading\""}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                the response's content immediately. You will need to call\""}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                ``r.release_conn()`` on the response ``r`` to return the connection'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                back into the pool. If None, it takes the value of'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                ``response_kw.get('preload_content', True)``.\""}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param chunked:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If True, urllib3 will send the body using chunked transfer'"}, "return_value": "74"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                encoding. Otherwise, urllib3 will send the body using the standard'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                content-length form. Defaults to False.'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param int body_pos:'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Position to seek to in file-like body in the event of a retry or'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                redirect. Typically this won't need to be set because urllib3 will\""}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                auto-populate the value when needed.'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param \\\\\\\\**response_kw:'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Additional parameters are passed to'"}, "return_value": "51"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :meth:`urllib3.response.HTTPResponse.from_httplib`'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        parsed_url = parse_url(url)'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        destination_scheme = parsed_url.scheme'"}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if headers is None:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            headers = self.headers'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if not isinstance(retries, Retry):'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if release_conn is None:'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            release_conn = response_kw.get(\"preload_content\", True)'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Check host'"}, "return_value": "20"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if assert_same_host and not self.is_same_host(url):'"}, "return_value": "59"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            raise HostChangedError(self, url, retries)'"}, "return_value": "54"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        # Ensure that the URL we're connecting to is properly encoded\""}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if url.startswith(\"/\"):'"}, "return_value": "31"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            url = six.ensure_str(_encode_target(url))'"}, "return_value": "53"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        else:'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            url = six.ensure_str(parsed_url.url)'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        conn = None'"}, "return_value": "19"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Track whether `conn` needs to be released before'"}, "return_value": "58"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # returning/raising/recursing. Update this variable if necessary, and'"}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # leave `release_conn` constant throughout the function. That way, if'"}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # the function recurses, the original value of `release_conn` will be'"}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # passed down into the recursive call, and its value will be respected.'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        #'"}, "return_value": "9"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # See issue #651 [1] for details.'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        #'"}, "return_value": "9"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # [1] <https://github.com/urllib3/urllib3/issues/651>'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        release_this_conn = release_conn'"}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        http_tunnel_required = connection_requires_http_tunnel('"}, "return_value": "63"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            self.proxy, self.proxy_config, destination_scheme'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        )'"}, "return_value": "9"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Merge the proxy headers. Only done when not using HTTP CONNECT. We'"}, "return_value": "76"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # have to copy the headers dict so we can safely change it without those'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        # changes being reflected in anyone else's copy.\""}, "return_value": "56"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if not http_tunnel_required:'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            headers = headers.copy()'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            headers.update(self.proxy_headers)'"}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Must keep the exception bound to a separate variable or else Python 3'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # complains about UnboundLocalError.'"}, "return_value": "44"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        err = None'"}, "return_value": "18"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Keep track of whether we cleanly exited the except block. This'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # ensures we do proper cleanup in finally.'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        clean_exit = False'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Rewind body position, if needed. Record current position'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # for future rewinds in the event of a redirect/retry.'"}, "return_value": "62"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        body_pos = set_file_position(body, body_pos)'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        try:'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Request a connection from the queue.'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            timeout_obj = self._get_timeout(timeout)'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            conn = self._get_conn(timeout=pool_timeout)'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            conn.timeout = timeout_obj.connect_timeout'"}, "return_value": "54"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            is_new_proxy_conn = self.proxy is not None and not getattr('"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                conn, \"sock\", None'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            )'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if is_new_proxy_conn and http_tunnel_required:'"}, "return_value": "58"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                self._prepare_proxy(conn)'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Make the request on the httplib connection object.'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>           httplib_response = self._make_request('"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                conn,'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                method,'"}, "return_value": "23"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                url,'"}, "return_value": "20"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                timeout=timeout_obj,'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                body=body,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                headers=headers,'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                chunked=chunked,'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            )'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/urllib3/connectionpool.py'"}, "return_value": "63"}, {"func_args": {"text": "':703: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0xffffa2a18b80>'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'conn = <docker.transport.unixconn.UnixHTTPConnection object at 0xffff92b05940>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"method = 'GET'\""}, "return_value": "14"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"url = '/v1.18/images/json?filter=shipwright%2Fbase&only_ids=0&all=0'\""}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'timeout = Timeout(connect=60, read=60, total=None), chunked = False'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"httplib_request_kw = {'body': None, 'headers': {'User-Agent': 'docker-sdk-python/2.7.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}}\""}, "return_value": "170"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'timeout_obj = Timeout(connect=60, read=60, total=None)'"}, "return_value": "54"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def _make_request('"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    ):'"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            Perform a request on a given urllib connection object taken from our'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            pool.'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param conn:'"}, "return_value": "24"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                a connection from one of our connection pools'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param timeout:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Socket timeout in seconds for the request. This can be a'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                float or integer, which will set the same timeout value for'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                the socket connect and the socket read, or an instance of'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :class:`urllib3.util.Timeout`, which gives you more fine-grained'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                control over your timeouts.'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self.num_requests += 1'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        timeout_obj = self._get_timeout(timeout)'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        timeout_obj.start_connect()'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        conn.timeout = timeout_obj.connect_timeout'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Trigger any extra validation we need to do.'"}, "return_value": "53"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        try:'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            self._validate_conn(conn)'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        except (SocketTimeout, BaseSSLError) as e:'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            raise'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # conn.request() calls http.client.*.request, not the method in'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # urllib3.request. It also calls makefile (recv) on the socket.'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        try:'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if chunked:'"}, "return_value": "23"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                conn.request_chunked(method, url, **httplib_request_kw)'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            else:'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>               conn.request(method, url, **httplib_request_kw)'"}, "return_value": "63"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/urllib3/connectionpool.py'"}, "return_value": "63"}, {"func_args": {"text": "':398: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnection object at 0xffff92b05940>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"method = 'GET'\""}, "return_value": "14"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"url = '/v1.18/images/json?filter=shipwright%2Fbase&only_ids=0&all=0'\""}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'body = None'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"headers = {'User-Agent': 'docker-sdk-python/2.7.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\""}, "return_value": "132"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def request(self, method, url, body=None, headers={}, *,'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                encode_chunked=False):'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"Send a complete request to the server.\"\"\"'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       self._send_request(method, url, body, headers, encode_chunked)'"}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'/usr/local/lib/python3.8/http/client.py'"}, "return_value": "39"}, {"func_args": {"text": "':1256: '"}, "return_value": "7"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnection object at 0xffff92b05940>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"method = 'GET'\""}, "return_value": "14"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"url = '/v1.18/images/json?filter=shipwright%2Fbase&only_ids=0&all=0'\""}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'body = None'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"headers = {'User-Agent': 'docker-sdk-python/2.7.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\""}, "return_value": "132"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'encode_chunked = False'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def _send_request(self, method, url, body, headers, encode_chunked):'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Honor explicitly requested Host: and Accept-Encoding: headers.'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        header_names = frozenset(k.lower() for k in headers)'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        skips = {}'"}, "return_value": "18"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        if 'host' in header_names:\""}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            skips['skip_host'] = 1\""}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        if 'accept-encoding' in header_names:\""}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            skips['skip_accept_encoding'] = 1\""}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self.putrequest(method, url, **skips)'"}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # chunked encoding will happen if HTTP/1.1 is used and either'"}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # the caller passes encode_chunked=True or the following'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # conditions hold:'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # 1. content-length has not been explicitly set'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # 2. the body is a file or iterable, but not a str or bytes-like'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # 3. Transfer-Encoding has NOT been explicitly set by the caller'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        if 'content-length' not in header_names:\""}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # only chunk body if not explicitly set for backwards'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # compatibility, assuming the client code is already handling the'"}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # chunking'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            if 'transfer-encoding' not in header_names:\""}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                # if content-length cannot be automatically determined, fall'"}, "return_value": "76"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                # back to chunked encoding'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                encode_chunked = False'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                content_length = self._get_content_length(body, method)'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                if content_length is None:'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    if body is not None:'"}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        if self.debuglevel > 0:'"}, "return_value": "47"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                            print('Unable to determine size of %r' % body)\""}, "return_value": "74"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        encode_chunked = True'"}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                        self.putheader('Transfer-Encoding', 'chunked')\""}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                else:'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                    self.putheader('Content-Length', str(content_length))\""}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        else:'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            encode_chunked = False'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        for hdr, value in headers.items():'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            self.putheader(hdr, value)'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if isinstance(body, str):'"}, "return_value": "33"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # RFC 2616 Section 3.7.1 says that text default has a'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # default charset of iso-8859-1.'"}, "return_value": "44"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            body = _encode(body, 'body')\""}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       self.endheaders(body, encode_chunked=encode_chunked)'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'/usr/local/lib/python3.8/http/client.py'"}, "return_value": "39"}, {"func_args": {"text": "':1302: '"}, "return_value": "7"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnection object at 0xffff92b05940>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'message_body = None'"}, "return_value": "19"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def endheaders(self, message_body=None, *, encode_chunked=False):'"}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"Indicate that the last header line has been sent to the server.'"}, "return_value": "74"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            This method sends the request to the server.  The optional message_body'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            argument can be used to pass a message body associated with the'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            request.'"}, "return_value": "20"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if self.__state == _CS_REQ_STARTED:'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            self.__state = _CS_REQ_SENT'"}, "return_value": "39"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        else:'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            raise CannotSendHeader()'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       self._send_output(message_body, encode_chunked=encode_chunked)'"}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'/usr/local/lib/python3.8/http/client.py'"}, "return_value": "39"}, {"func_args": {"text": "':1251: '"}, "return_value": "7"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnection object at 0xffff92b05940>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'message_body = None, encode_chunked = False'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def _send_output(self, message_body=None, encode_chunked=False):'"}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"Send the currently buffered request and clear the buffer.'"}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            Appends an extra \\\\\\\\r\\\\\\\\n to the buffer.'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            A message_body may be specified, to be appended to the request.'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self._buffer.extend((b\"\", b\"\"))'"}, "return_value": "39"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        msg = b\"\\\\r\\\\n\".join(self._buffer)'"}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        del self._buffer[:]'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       self.send(msg)'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'/usr/local/lib/python3.8/http/client.py'"}, "return_value": "39"}, {"func_args": {"text": "':1011: '"}, "return_value": "7"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnection object at 0xffff92b05940>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"data = b'GET /v1.18/images/json?filter=shipwright%2Fbase&only_ids=0&all=0 HTTP/1.1\\\\r\\\\nHost: localhost\\\\r\\\\nUser-Agent: docker-sdk-python/2.7.0\\\\r\\\\nAccept-Encoding: gzip, deflate\\\\r\\\\nAccept: */*\\\\r\\\\nConnection: keep-alive\\\\r\\\\n\\\\r\\\\n'\""}, "return_value": "224"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def send(self, data):'"}, "return_value": "25"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"Send `data\\' to the server.'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            ``data`` can be a string object, a bytes object, an array object, a'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            file-like object that supports a .read() method, or an iterable object.'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if self.sock is None:'"}, "return_value": "29"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if self.auto_open:'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>               self.connect()'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'/usr/local/lib/python3.8/http/client.py'"}, "return_value": "39"}, {"func_args": {"text": "':951: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnection object at 0xffff92b05940>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def connect(self):'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        sock.settimeout(self.timeout)'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       sock.connect(self.unix_socket)'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'E       FileNotFoundError: [Errno 2] No such file or directory'"}, "return_value": "62"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/docker/transport/unixconn.py'"}, "return_value": "66"}, {"func_args": {"text": "':46: FileNotFoundError'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'During handling of the above exception, another exception occurred:'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixAdapter object at 0xffffa2a18ca0>'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'request = <PreparedRequest [GET]>, stream = False'"}, "return_value": "49"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'proxies = OrderedDict()'"}, "return_value": "23"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):'"}, "return_value": "94"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"Sends PreparedRequest object. Returns Response object.'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param stream: (optional) Whether to stream the request content.'"}, "return_value": "76"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param timeout: (optional) How long to wait for the server to send'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                data before giving up, as a float, or a :ref:`(connect timeout,'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                read timeout) <timeouts>` tuple.'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :type timeout: float or tuple or urllib3 Timeout object'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param verify: (optional) Either a boolean, in which case it controls whether'"}, "return_value": "89"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                we verify the server's TLS certificate, or a string, in which case it\""}, "return_value": "85"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                must be a path to a CA bundle to use'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param cert: (optional) Any user-provided SSL certificate to be trusted.'"}, "return_value": "84"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param proxies: (optional) The proxies dictionary to apply to the request.'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :rtype: requests.Response'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        try:'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            conn = self.get_connection(request.url, proxies)'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        except LocationValueError as e:'"}, "return_value": "39"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            raise InvalidURL(e, request=request)'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self.cert_verify(conn, request.url, verify, cert)'"}, "return_value": "57"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        url = self.request_url(request, proxies)'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)'"}, "return_value": "108"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        chunked = not (request.body is None or 'Content-Length' in request.headers)\""}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if isinstance(timeout, tuple):'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            try:'"}, "return_value": "16"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                connect, read = timeout'"}, "return_value": "39"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                timeout = TimeoutSauce(connect=connect, read=read)'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            except ValueError as e:'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                # this may raise a string formatting error.'"}, "return_value": "59"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                err = (\"Invalid timeout {}. Pass a (connect, read) \"'"}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                       \"timeout tuple, or a single float to set \"'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                       \"both timeouts to the same value\".format(timeout))'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                raise ValueError(err)'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        elif isinstance(timeout, TimeoutSauce):'"}, "return_value": "47"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            pass'"}, "return_value": "16"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        else:'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            timeout = TimeoutSauce(connect=timeout, read=timeout)'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        try:'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if not chunked:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>               resp = conn.urlopen('"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    method=request.method,'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    url=url,'"}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    body=request.body,'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    headers=request.headers,'"}, "return_value": "44"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    redirect=False,'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    assert_same_host=False,'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    preload_content=False,'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    decode_content=False,'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    retries=self.max_retries,'"}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    timeout=timeout'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                )'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/requests/adapters.py'"}, "return_value": "58"}, {"func_args": {"text": "':440: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0xffffa2a18b80>'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"method = 'GET'\""}, "return_value": "14"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"url = '/v1.18/images/json?filter=shipwright%2Fbase&only_ids=0&all=0'\""}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'body = None'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"headers = {'User-Agent': 'docker-sdk-python/2.7.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\""}, "return_value": "132"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'redirect = False, assert_same_host = False'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'release_conn = False, chunked = False, body_pos = None'"}, "return_value": "54"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"response_kw = {'decode_content': False, 'preload_content': False}\""}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/v1.18/images/json', query='filter=shipwright%2Fbase&only_ids=0&all=0', fragment=None)\""}, "return_value": "155"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'destination_scheme = None, conn = None, release_this_conn = True'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'http_tunnel_required = False, err = None, clean_exit = False'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def urlopen('"}, "return_value": "16"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self,'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        method,'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        url,'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        body=None,'"}, "return_value": "18"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        headers=None,'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        retries=None,'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        redirect=True,'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        assert_same_host=True,'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        timeout=_Default,'"}, "return_value": "25"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        pool_timeout=None,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        release_conn=None,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        chunked=False,'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        body_pos=None,'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        **response_kw'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    ):'"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            Get a connection from the pool and perform an HTTP request. This is the'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            lowest level call for making a request, so you'll need to specify all\""}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            the raw details.'"}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            .. note::'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"               More commonly, it's appropriate to use a convenience method provided\""}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               by :class:`.RequestMethods`, such as :meth:`request`.'"}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            .. note::'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               `release_conn` will only behave as expected if'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               `preload_content=False` because we want to make'"}, "return_value": "62"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               `preload_content=False` the default behaviour someday soon without'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               breaking backwards compatibility.'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param method:'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                HTTP request method (such as GET, POST, PUT, etc.)'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param url:'"}, "return_value": "23"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                The URL to perform the request on.'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param body:'"}, "return_value": "24"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Data to send in the request body, either :class:`str`, :class:`bytes`,'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                an iterable of :class:`str`/:class:`bytes`, or a file-like object.'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param headers:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Dictionary of custom headers to send, such as User-Agent,'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If-None-Match, etc. If None, pool headers are used. If provided,'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                these headers completely replace any pool-specific headers.'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param retries:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Configure the number of retries to allow before raising a'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :class:`~urllib3.exceptions.MaxRetryError` exception.'"}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Pass ``None`` to retry until you receive a response. Pass a'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :class:`~urllib3.util.retry.Retry` object for fine-grained control'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                over different types of retries.'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Pass an integer number to retry connection errors that many times,'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                but no other types of errors. Pass zero to never retry.'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If ``False``, then retries are disabled and any exception is raised'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                immediately. Also, instead of raising a MaxRetryError on redirects,'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                the redirect response will be returned.'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param redirect:'"}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If True, automatically handle redirects (status codes 301, 302,'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                303, 307, 308). Each redirect counts as a retry. Disabling retries'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                will disable redirect, too.'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param assert_same_host:'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If ``True``, will make sure that the host of the pool requests is'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                consistent else will raise HostChangedError. When ``False``, you can'"}, "return_value": "84"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                use the pool on an HTTP proxy and request foreign hosts.'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param timeout:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If specified, overrides the default timeout for this one'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                request. It may be a float (in seconds) or an instance of'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :class:`urllib3.util.Timeout`.'"}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param pool_timeout:'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If set and the pool is set to block=True, then this method will'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                block for ``pool_timeout`` seconds and raise EmptyPoolError if no'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                connection is available within the time period.'"}, "return_value": "63"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param release_conn:'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If False, then the urlopen call will not release the connection'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                back into the pool once a response is received (but will release if'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                you read the entire contents of the response such as when'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                `preload_content=True`). This is useful if you're not preloading\""}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                the response's content immediately. You will need to call\""}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                ``r.release_conn()`` on the response ``r`` to return the connection'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                back into the pool. If None, it takes the value of'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                ``response_kw.get('preload_content', True)``.\""}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param chunked:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If True, urllib3 will send the body using chunked transfer'"}, "return_value": "74"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                encoding. Otherwise, urllib3 will send the body using the standard'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                content-length form. Defaults to False.'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param int body_pos:'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Position to seek to in file-like body in the event of a retry or'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                redirect. Typically this won't need to be set because urllib3 will\""}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                auto-populate the value when needed.'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param \\\\\\\\**response_kw:'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Additional parameters are passed to'"}, "return_value": "51"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :meth:`urllib3.response.HTTPResponse.from_httplib`'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        parsed_url = parse_url(url)'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        destination_scheme = parsed_url.scheme'"}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if headers is None:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            headers = self.headers'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if not isinstance(retries, Retry):'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if release_conn is None:'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            release_conn = response_kw.get(\"preload_content\", True)'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Check host'"}, "return_value": "20"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if assert_same_host and not self.is_same_host(url):'"}, "return_value": "59"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            raise HostChangedError(self, url, retries)'"}, "return_value": "54"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        # Ensure that the URL we're connecting to is properly encoded\""}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if url.startswith(\"/\"):'"}, "return_value": "31"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            url = six.ensure_str(_encode_target(url))'"}, "return_value": "53"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        else:'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            url = six.ensure_str(parsed_url.url)'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        conn = None'"}, "return_value": "19"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Track whether `conn` needs to be released before'"}, "return_value": "58"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # returning/raising/recursing. Update this variable if necessary, and'"}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # leave `release_conn` constant throughout the function. That way, if'"}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # the function recurses, the original value of `release_conn` will be'"}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # passed down into the recursive call, and its value will be respected.'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        #'"}, "return_value": "9"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # See issue #651 [1] for details.'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        #'"}, "return_value": "9"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # [1] <https://github.com/urllib3/urllib3/issues/651>'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        release_this_conn = release_conn'"}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        http_tunnel_required = connection_requires_http_tunnel('"}, "return_value": "63"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            self.proxy, self.proxy_config, destination_scheme'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        )'"}, "return_value": "9"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Merge the proxy headers. Only done when not using HTTP CONNECT. We'"}, "return_value": "76"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # have to copy the headers dict so we can safely change it without those'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        # changes being reflected in anyone else's copy.\""}, "return_value": "56"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if not http_tunnel_required:'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            headers = headers.copy()'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            headers.update(self.proxy_headers)'"}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Must keep the exception bound to a separate variable or else Python 3'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # complains about UnboundLocalError.'"}, "return_value": "44"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        err = None'"}, "return_value": "18"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Keep track of whether we cleanly exited the except block. This'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # ensures we do proper cleanup in finally.'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        clean_exit = False'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Rewind body position, if needed. Record current position'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # for future rewinds in the event of a redirect/retry.'"}, "return_value": "62"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        body_pos = set_file_position(body, body_pos)'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        try:'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Request a connection from the queue.'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            timeout_obj = self._get_timeout(timeout)'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            conn = self._get_conn(timeout=pool_timeout)'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            conn.timeout = timeout_obj.connect_timeout'"}, "return_value": "54"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            is_new_proxy_conn = self.proxy is not None and not getattr('"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                conn, \"sock\", None'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            )'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if is_new_proxy_conn and http_tunnel_required:'"}, "return_value": "58"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                self._prepare_proxy(conn)'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Make the request on the httplib connection object.'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            httplib_response = self._make_request('"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                conn,'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                method,'"}, "return_value": "23"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                url,'"}, "return_value": "20"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                timeout=timeout_obj,'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                body=body,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                headers=headers,'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                chunked=chunked,'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            )'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            # If we're going to release the connection in ``finally:``, then\""}, "return_value": "76"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            # the response doesn't need to know about the connection. Otherwise\""}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            # it will also try to release it and we'll have a double-release\""}, "return_value": "76"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # mess.'"}, "return_value": "19"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            response_conn = conn if not release_conn else None'"}, "return_value": "62"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Pass method to Response for length checking'"}, "return_value": "57"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            response_kw[\"request_method\"] = method'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            # Import httplib's response into our own wrapper object\""}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            response = self.ResponseCls.from_httplib('"}, "return_value": "53"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                httplib_response,'"}, "return_value": "33"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                pool=self,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                connection=response_conn,'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                retries=retries,'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                **response_kw'"}, "return_value": "29"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            )'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Everything went great!'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            clean_exit = True'"}, "return_value": "29"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        except EmptyPoolError:'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            # Didn't get a connection from the pool, no need to clean up\""}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            clean_exit = True'"}, "return_value": "29"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            release_this_conn = False'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            raise'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        except ('"}, "return_value": "16"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            TimeoutError,'"}, "return_value": "25"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            HTTPException,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            SocketError,'"}, "return_value": "24"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            ProtocolError,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            BaseSSLError,'"}, "return_value": "25"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            SSLError,'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            CertificateError,'"}, "return_value": "29"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        ) as e:'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Discard the connection for these exceptions. It will be'"}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # replaced during the next _get_conn() call.'"}, "return_value": "56"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            clean_exit = False'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            def _is_ssl_error_message_from_http_proxy(ssl_error):'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                # We're trying to detect the message 'WRONG_VERSION_NUMBER' but\""}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                # SSLErrors are kinda all over the place when it comes to the message,'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                # so we try to cover our bases here!'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                message = \" \".join(re.split(\"[^a-z]\", str(ssl_error).lower()))'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                return ('"}, "return_value": "24"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    \"wrong version number\" in message or \"unknown protocol\" in message'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                )'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Try to detect a common user error with proxies which is to'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            # set an HTTP proxy to be HTTPS when it should be 'http://'\""}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            # (ie {'http': 'http://proxy', 'https': 'https://proxy'})\""}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Instead we add a nice error message and point to a URL.'"}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if ('"}, "return_value": "16"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                isinstance(e, BaseSSLError)'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                and self.proxy'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                and _is_ssl_error_message_from_http_proxy(e)'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            ):'"}, "return_value": "14"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                e = ProxyError('"}, "return_value": "31"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    \"Your proxy appears to only use HTTP and not HTTPS, \"'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    \"try changing your proxy URL to be HTTP. See: \"'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    \"https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html\"'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    \"#https-proxy-error-http-proxy\",'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    SSLError(e),'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                )'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            elif isinstance(e, (BaseSSLError, CertificateError)):'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                e = SSLError(e)'"}, "return_value": "31"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                e = ProxyError(\"Cannot connect to proxy.\", e)'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            elif isinstance(e, (SocketError, HTTPException)):'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                e = ProtocolError(\"Connection aborted.\", e)'"}, "return_value": "59"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>           retries = retries.increment('"}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            )'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/urllib3/connectionpool.py'"}, "return_value": "63"}, {"func_args": {"text": "':785: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = Retry(total=0, connect=None, read=False, redirect=None, status=None)'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"method = 'GET'\""}, "return_value": "14"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"url = '/v1.18/images/json?filter=shipwright%2Fbase&only_ids=0&all=0'\""}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'response = None'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"error = ProtocolError('Connection aborted.', FileNotFoundError(2, 'No such file or directory'))\""}, "return_value": "95"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_pool = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0xffffa2a18b80>'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_stacktrace = <traceback object at 0xffffa3b5f800>'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def increment('"}, "return_value": "18"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self,'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        method=None,'"}, "return_value": "20"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        url=None,'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        response=None,'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        error=None,'"}, "return_value": "19"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        _pool=None,'"}, "return_value": "19"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        _stacktrace=None,'"}, "return_value": "25"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    ):'"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"Return a new Retry object with incremented retry counters.'"}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param response: A response object, or None, if the server did not'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                return a response.'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :type response: :class:`~urllib3.response.HTTPResponse`'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param Exception error: An error encountered during the request, or'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                None if the response was received successfully.'"}, "return_value": "63"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :return: A new ``Retry`` object.'"}, "return_value": "44"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if self.total is False and error:'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Disabled, indicate to re-raise the error.'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            raise six.reraise(type(error), error, _stacktrace)'"}, "return_value": "62"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        total = self.total'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if total is not None:'"}, "return_value": "29"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            total -= 1'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        connect = self.connect'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        read = self.read'"}, "return_value": "24"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        redirect = self.redirect'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        status_count = self.status'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        other = self.other'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        cause = \"unknown\"'"}, "return_value": "25"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        status = None'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        redirect_location = None'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if error and self._is_connection_error(error):'"}, "return_value": "54"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Connect retry?'"}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if connect is False:'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                raise six.reraise(type(error), error, _stacktrace)'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            elif connect is not None:'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                connect -= 1'"}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        elif error and self._is_read_error(error):'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Read retry?'"}, "return_value": "25"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if read is False or not self._is_method_retryable(method):'"}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>               raise six.reraise(type(error), error, _stacktrace)'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/urllib3/util/retry.py'"}, "return_value": "59"}, {"func_args": {"text": "':550: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"tp = <class 'urllib3.exceptions.ProtocolError'>, value = None, tb = None\""}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def reraise(tp, value, tb=None):'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        try:'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if value is None:'"}, "return_value": "29"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                value = tp()'"}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if value.__traceback__ is not tb:'"}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>               raise value.with_traceback(tb)'"}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/urllib3/packages/six.py'"}, "return_value": "61"}, {"func_args": {"text": "':769: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0xffffa2a18b80>'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"method = 'GET'\""}, "return_value": "14"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"url = '/v1.18/images/json?filter=shipwright%2Fbase&only_ids=0&all=0'\""}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'body = None'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"headers = {'User-Agent': 'docker-sdk-python/2.7.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\""}, "return_value": "132"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'redirect = False, assert_same_host = False'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'release_conn = False, chunked = False, body_pos = None'"}, "return_value": "54"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"response_kw = {'decode_content': False, 'preload_content': False}\""}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/v1.18/images/json', query='filter=shipwright%2Fbase&only_ids=0&all=0', fragment=None)\""}, "return_value": "155"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'destination_scheme = None, conn = None, release_this_conn = True'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'http_tunnel_required = False, err = None, clean_exit = False'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def urlopen('"}, "return_value": "16"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self,'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        method,'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        url,'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        body=None,'"}, "return_value": "18"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        headers=None,'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        retries=None,'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        redirect=True,'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        assert_same_host=True,'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        timeout=_Default,'"}, "return_value": "25"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        pool_timeout=None,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        release_conn=None,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        chunked=False,'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        body_pos=None,'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        **response_kw'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    ):'"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            Get a connection from the pool and perform an HTTP request. This is the'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            lowest level call for making a request, so you'll need to specify all\""}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            the raw details.'"}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            .. note::'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"               More commonly, it's appropriate to use a convenience method provided\""}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               by :class:`.RequestMethods`, such as :meth:`request`.'"}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            .. note::'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               `release_conn` will only behave as expected if'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               `preload_content=False` because we want to make'"}, "return_value": "62"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               `preload_content=False` the default behaviour someday soon without'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               breaking backwards compatibility.'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param method:'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                HTTP request method (such as GET, POST, PUT, etc.)'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param url:'"}, "return_value": "23"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                The URL to perform the request on.'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param body:'"}, "return_value": "24"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Data to send in the request body, either :class:`str`, :class:`bytes`,'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                an iterable of :class:`str`/:class:`bytes`, or a file-like object.'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param headers:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Dictionary of custom headers to send, such as User-Agent,'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If-None-Match, etc. If None, pool headers are used. If provided,'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                these headers completely replace any pool-specific headers.'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param retries:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Configure the number of retries to allow before raising a'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :class:`~urllib3.exceptions.MaxRetryError` exception.'"}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Pass ``None`` to retry until you receive a response. Pass a'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :class:`~urllib3.util.retry.Retry` object for fine-grained control'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                over different types of retries.'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Pass an integer number to retry connection errors that many times,'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                but no other types of errors. Pass zero to never retry.'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If ``False``, then retries are disabled and any exception is raised'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                immediately. Also, instead of raising a MaxRetryError on redirects,'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                the redirect response will be returned.'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param redirect:'"}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If True, automatically handle redirects (status codes 301, 302,'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                303, 307, 308). Each redirect counts as a retry. Disabling retries'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                will disable redirect, too.'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param assert_same_host:'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If ``True``, will make sure that the host of the pool requests is'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                consistent else will raise HostChangedError. When ``False``, you can'"}, "return_value": "84"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                use the pool on an HTTP proxy and request foreign hosts.'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param timeout:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If specified, overrides the default timeout for this one'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                request. It may be a float (in seconds) or an instance of'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :class:`urllib3.util.Timeout`.'"}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param pool_timeout:'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If set and the pool is set to block=True, then this method will'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                block for ``pool_timeout`` seconds and raise EmptyPoolError if no'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                connection is available within the time period.'"}, "return_value": "63"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param release_conn:'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If False, then the urlopen call will not release the connection'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                back into the pool once a response is received (but will release if'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                you read the entire contents of the response such as when'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                `preload_content=True`). This is useful if you're not preloading\""}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                the response's content immediately. You will need to call\""}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                ``r.release_conn()`` on the response ``r`` to return the connection'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                back into the pool. If None, it takes the value of'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                ``response_kw.get('preload_content', True)``.\""}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param chunked:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If True, urllib3 will send the body using chunked transfer'"}, "return_value": "74"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                encoding. Otherwise, urllib3 will send the body using the standard'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                content-length form. Defaults to False.'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param int body_pos:'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Position to seek to in file-like body in the event of a retry or'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                redirect. Typically this won't need to be set because urllib3 will\""}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                auto-populate the value when needed.'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param \\\\\\\\**response_kw:'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Additional parameters are passed to'"}, "return_value": "51"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :meth:`urllib3.response.HTTPResponse.from_httplib`'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        parsed_url = parse_url(url)'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        destination_scheme = parsed_url.scheme'"}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if headers is None:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            headers = self.headers'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if not isinstance(retries, Retry):'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if release_conn is None:'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            release_conn = response_kw.get(\"preload_content\", True)'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Check host'"}, "return_value": "20"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if assert_same_host and not self.is_same_host(url):'"}, "return_value": "59"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            raise HostChangedError(self, url, retries)'"}, "return_value": "54"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        # Ensure that the URL we're connecting to is properly encoded\""}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if url.startswith(\"/\"):'"}, "return_value": "31"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            url = six.ensure_str(_encode_target(url))'"}, "return_value": "53"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        else:'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            url = six.ensure_str(parsed_url.url)'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        conn = None'"}, "return_value": "19"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Track whether `conn` needs to be released before'"}, "return_value": "58"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # returning/raising/recursing. Update this variable if necessary, and'"}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # leave `release_conn` constant throughout the function. That way, if'"}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # the function recurses, the original value of `release_conn` will be'"}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # passed down into the recursive call, and its value will be respected.'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        #'"}, "return_value": "9"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # See issue #651 [1] for details.'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        #'"}, "return_value": "9"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # [1] <https://github.com/urllib3/urllib3/issues/651>'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        release_this_conn = release_conn'"}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        http_tunnel_required = connection_requires_http_tunnel('"}, "return_value": "63"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            self.proxy, self.proxy_config, destination_scheme'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        )'"}, "return_value": "9"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Merge the proxy headers. Only done when not using HTTP CONNECT. We'"}, "return_value": "76"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # have to copy the headers dict so we can safely change it without those'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        # changes being reflected in anyone else's copy.\""}, "return_value": "56"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if not http_tunnel_required:'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            headers = headers.copy()'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            headers.update(self.proxy_headers)'"}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Must keep the exception bound to a separate variable or else Python 3'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # complains about UnboundLocalError.'"}, "return_value": "44"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        err = None'"}, "return_value": "18"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Keep track of whether we cleanly exited the except block. This'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # ensures we do proper cleanup in finally.'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        clean_exit = False'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Rewind body position, if needed. Record current position'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # for future rewinds in the event of a redirect/retry.'"}, "return_value": "62"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        body_pos = set_file_position(body, body_pos)'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        try:'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Request a connection from the queue.'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            timeout_obj = self._get_timeout(timeout)'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            conn = self._get_conn(timeout=pool_timeout)'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            conn.timeout = timeout_obj.connect_timeout'"}, "return_value": "54"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            is_new_proxy_conn = self.proxy is not None and not getattr('"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                conn, \"sock\", None'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            )'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if is_new_proxy_conn and http_tunnel_required:'"}, "return_value": "58"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                self._prepare_proxy(conn)'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Make the request on the httplib connection object.'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>           httplib_response = self._make_request('"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                conn,'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                method,'"}, "return_value": "23"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                url,'"}, "return_value": "20"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                timeout=timeout_obj,'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                body=body,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                headers=headers,'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                chunked=chunked,'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            )'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/urllib3/connectionpool.py'"}, "return_value": "63"}, {"func_args": {"text": "':703: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0xffffa2a18b80>'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'conn = <docker.transport.unixconn.UnixHTTPConnection object at 0xffff92b05940>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"method = 'GET'\""}, "return_value": "14"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"url = '/v1.18/images/json?filter=shipwright%2Fbase&only_ids=0&all=0'\""}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'timeout = Timeout(connect=60, read=60, total=None), chunked = False'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"httplib_request_kw = {'body': None, 'headers': {'User-Agent': 'docker-sdk-python/2.7.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}}\""}, "return_value": "170"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'timeout_obj = Timeout(connect=60, read=60, total=None)'"}, "return_value": "54"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def _make_request('"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    ):'"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            Perform a request on a given urllib connection object taken from our'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            pool.'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param conn:'"}, "return_value": "24"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                a connection from one of our connection pools'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param timeout:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Socket timeout in seconds for the request. This can be a'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                float or integer, which will set the same timeout value for'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                the socket connect and the socket read, or an instance of'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :class:`urllib3.util.Timeout`, which gives you more fine-grained'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                control over your timeouts.'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self.num_requests += 1'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        timeout_obj = self._get_timeout(timeout)'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        timeout_obj.start_connect()'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        conn.timeout = timeout_obj.connect_timeout'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Trigger any extra validation we need to do.'"}, "return_value": "53"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        try:'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            self._validate_conn(conn)'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        except (SocketTimeout, BaseSSLError) as e:'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            raise'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # conn.request() calls http.client.*.request, not the method in'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # urllib3.request. It also calls makefile (recv) on the socket.'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        try:'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if chunked:'"}, "return_value": "23"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                conn.request_chunked(method, url, **httplib_request_kw)'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            else:'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>               conn.request(method, url, **httplib_request_kw)'"}, "return_value": "63"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/urllib3/connectionpool.py'"}, "return_value": "63"}, {"func_args": {"text": "':398: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnection object at 0xffff92b05940>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"method = 'GET'\""}, "return_value": "14"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"url = '/v1.18/images/json?filter=shipwright%2Fbase&only_ids=0&all=0'\""}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'body = None'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"headers = {'User-Agent': 'docker-sdk-python/2.7.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\""}, "return_value": "132"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def request(self, method, url, body=None, headers={}, *,'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                encode_chunked=False):'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"Send a complete request to the server.\"\"\"'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       self._send_request(method, url, body, headers, encode_chunked)'"}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'/usr/local/lib/python3.8/http/client.py'"}, "return_value": "39"}, {"func_args": {"text": "':1256: '"}, "return_value": "7"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnection object at 0xffff92b05940>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"method = 'GET'\""}, "return_value": "14"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"url = '/v1.18/images/json?filter=shipwright%2Fbase&only_ids=0&all=0'\""}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'body = None'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"headers = {'User-Agent': 'docker-sdk-python/2.7.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\""}, "return_value": "132"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'encode_chunked = False'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def _send_request(self, method, url, body, headers, encode_chunked):'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Honor explicitly requested Host: and Accept-Encoding: headers.'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        header_names = frozenset(k.lower() for k in headers)'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        skips = {}'"}, "return_value": "18"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        if 'host' in header_names:\""}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            skips['skip_host'] = 1\""}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        if 'accept-encoding' in header_names:\""}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            skips['skip_accept_encoding'] = 1\""}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self.putrequest(method, url, **skips)'"}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # chunked encoding will happen if HTTP/1.1 is used and either'"}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # the caller passes encode_chunked=True or the following'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # conditions hold:'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # 1. content-length has not been explicitly set'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # 2. the body is a file or iterable, but not a str or bytes-like'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # 3. Transfer-Encoding has NOT been explicitly set by the caller'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        if 'content-length' not in header_names:\""}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # only chunk body if not explicitly set for backwards'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # compatibility, assuming the client code is already handling the'"}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # chunking'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            if 'transfer-encoding' not in header_names:\""}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                # if content-length cannot be automatically determined, fall'"}, "return_value": "76"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                # back to chunked encoding'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                encode_chunked = False'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                content_length = self._get_content_length(body, method)'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                if content_length is None:'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    if body is not None:'"}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        if self.debuglevel > 0:'"}, "return_value": "47"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                            print('Unable to determine size of %r' % body)\""}, "return_value": "74"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        encode_chunked = True'"}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                        self.putheader('Transfer-Encoding', 'chunked')\""}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                else:'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                    self.putheader('Content-Length', str(content_length))\""}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        else:'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            encode_chunked = False'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        for hdr, value in headers.items():'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            self.putheader(hdr, value)'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if isinstance(body, str):'"}, "return_value": "33"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # RFC 2616 Section 3.7.1 says that text default has a'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # default charset of iso-8859-1.'"}, "return_value": "44"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            body = _encode(body, 'body')\""}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       self.endheaders(body, encode_chunked=encode_chunked)'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'/usr/local/lib/python3.8/http/client.py'"}, "return_value": "39"}, {"func_args": {"text": "':1302: '"}, "return_value": "7"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnection object at 0xffff92b05940>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'message_body = None'"}, "return_value": "19"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def endheaders(self, message_body=None, *, encode_chunked=False):'"}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"Indicate that the last header line has been sent to the server.'"}, "return_value": "74"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            This method sends the request to the server.  The optional message_body'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            argument can be used to pass a message body associated with the'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            request.'"}, "return_value": "20"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if self.__state == _CS_REQ_STARTED:'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            self.__state = _CS_REQ_SENT'"}, "return_value": "39"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        else:'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            raise CannotSendHeader()'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       self._send_output(message_body, encode_chunked=encode_chunked)'"}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'/usr/local/lib/python3.8/http/client.py'"}, "return_value": "39"}, {"func_args": {"text": "':1251: '"}, "return_value": "7"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnection object at 0xffff92b05940>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'message_body = None, encode_chunked = False'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def _send_output(self, message_body=None, encode_chunked=False):'"}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"Send the currently buffered request and clear the buffer.'"}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            Appends an extra \\\\\\\\r\\\\\\\\n to the buffer.'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            A message_body may be specified, to be appended to the request.'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self._buffer.extend((b\"\", b\"\"))'"}, "return_value": "39"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        msg = b\"\\\\r\\\\n\".join(self._buffer)'"}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        del self._buffer[:]'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       self.send(msg)'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'/usr/local/lib/python3.8/http/client.py'"}, "return_value": "39"}, {"func_args": {"text": "':1011: '"}, "return_value": "7"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnection object at 0xffff92b05940>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"data = b'GET /v1.18/images/json?filter=shipwright%2Fbase&only_ids=0&all=0 HTTP/1.1\\\\r\\\\nHost: localhost\\\\r\\\\nUser-Agent: docker-sdk-python/2.7.0\\\\r\\\\nAccept-Encoding: gzip, deflate\\\\r\\\\nAccept: */*\\\\r\\\\nConnection: keep-alive\\\\r\\\\n\\\\r\\\\n'\""}, "return_value": "224"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def send(self, data):'"}, "return_value": "25"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"Send `data\\' to the server.'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            ``data`` can be a string object, a bytes object, an array object, a'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            file-like object that supports a .read() method, or an iterable object.'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if self.sock is None:'"}, "return_value": "29"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if self.auto_open:'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>               self.connect()'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'/usr/local/lib/python3.8/http/client.py'"}, "return_value": "39"}, {"func_args": {"text": "':951: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnection object at 0xffff92b05940>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def connect(self):'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        sock.settimeout(self.timeout)'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       sock.connect(self.unix_socket)'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"E       urllib3.exceptions.ProtocolError: ('Connection aborted.', FileNotFoundError(2, 'No such file or directory'))\""}, "return_value": "116"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/docker/transport/unixconn.py'"}, "return_value": "66"}, {"func_args": {"text": "':46: ProtocolError'"}, "return_value": "18"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'During handling of the above exception, another exception occurred:'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"tmpdir = local('/tmp/pytest-of-root/pytest-1/test_child_inherits_parents_bu0')\""}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'docker_client = <docker.api.client.APIClient object at 0xffff9f0f2940>'"}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def test_child_inherits_parents_build_tag(tmpdir, docker_client):'"}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        tmp = tmpdir.join('shipwright-sample')\""}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        path = str(tmp)'"}, "return_value": "23"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        source = pkg_resources.resource_filename('"}, "return_value": "49"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            __name__,'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            'examples/shipwright-sample',\""}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        )'"}, "return_value": "9"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        repo = create_repo(path, source)'"}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        old_tag = repo.head.ref.commit.hexsha[:12]'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        client_cfg = docker_utils.kwargs_from_env()'"}, "return_value": "51"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        cli = docker_client'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        try:'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>           shipw_cli.run('"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                path=path,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                client_cfg=client_cfg,'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                arguments=get_defaults(),'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                environ={},'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            )'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'tests/integration/test_docker_builds.py'"}, "return_value": "39"}, {"func_args": {"text": "':659: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"path = '/tmp/pytest-of-root/pytest-1/test_child_inherits_parents_bu0/shipwright-sample'\""}, "return_value": "87"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"arguments = {'--account': None, '--dependents': [], '--dirty': False, '--dump-file': None, ...}\""}, "return_value": "95"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'client_cfg = {}, environ = {}, new_style_args = None'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def run(path, arguments, client_cfg, environ, new_style_args=None):'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        args = process_arguments('"}, "return_value": "33"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            path, arguments, client_cfg, environ,'"}, "return_value": "49"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        )'"}, "return_value": "9"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        build_targets, no_build, command_name, dump_file, config, client = args'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if new_style_args is None:'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            dirty = False'"}, "return_value": "25"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            pull_cache = False'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            registry_logins = []'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        else:'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            dirty = new_style_args.dirty'"}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            pull_cache = new_style_args.pull_cache'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            registry_logins = _flatten(new_style_args.registry_login)'"}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        namespace = config['namespace']\""}, "return_value": "39"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        name_map = config.get('names', {})\""}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        scm = source_control.source_control(path, namespace, name_map)'"}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if not dirty and scm.is_dirty():'"}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            return ('"}, "return_value": "20"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                'Aborting build, due to uncommitted changes. If you are not ready '\""}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                'to commit these changes, re-run with the --dirty flag.'\""}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            )'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if registry_logins:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if isinstance(drc, Exception):'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                raise drc'"}, "return_value": "25"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            registry_config = parse_registry_logins(registry_logins)'"}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            registries = {}'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            for server, config in registry_config.items():'"}, "return_value": "58"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                registries[server] = drc.BaseClient('"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                    config['server'],\""}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                    username=config['username'],\""}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                    password=config['password'],\""}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    api_version=2,'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                )'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            the_cache = cache.DirectRegistry(client, registry.Registry(registries))'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        elif pull_cache:'"}, "return_value": "24"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            the_cache = cache.Cache(client)'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        else:'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            the_cache = cache.NoCache(client)'"}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        sw = Shipwright(scm, client, arguments['tags'], the_cache)\""}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        command = getattr(sw, command_name)'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        show_progress = sys.stdout.isatty()'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        errors = []'"}, "return_value": "19"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if no_build:'"}, "return_value": "20"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            events = command(build_targets, no_build)'"}, "return_value": "53"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        else:'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            events = command(build_targets)'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       for event in events:'"}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'shipwright/_lib/cli.py'"}, "return_value": "22"}, {"func_args": {"text": "':340: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <shipwright._lib.base.Shipwright object at 0xffffa2a18eb0>'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"this_ref_str = '7d5ffc917109'\""}, "return_value": "29"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"targets = [Target(image=Image(name='shipwright/base', dir_path='/tmp/pytest-of-root/pytest-1/test_child_inherits_parents_bu0/shi...ytest-1/test_child_inherits_parents_bu0/shipwright-sample/service1/.dockerignore'})), ref='7d5ffc917109', children=())]\""}, "return_value": "250"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def _build(self, this_ref_str, targets):'"}, "return_value": "44"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        client = self.docker_client'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        ref = this_ref_str'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        tags = self.source_control.default_tags() + self.tags + [this_ref_str]'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       for evt in build.do_build(client, ref, targets, self._cache):'"}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'shipwright/_lib/base.py'"}, "return_value": "23"}, {"func_args": {"text": "':26: '"}, "return_value": "5"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'client = <docker.api.client.APIClient object at 0xffff92b28340>'"}, "return_value": "63"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"build_ref = '7d5ffc917109'\""}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"targets = [Target(image=Image(name='shipwright/base', dir_path='/tmp/pytest-of-root/pytest-1/test_child_inherits_parents_bu0/shi...ytest-1/test_child_inherits_parents_bu0/shipwright-sample/service1/.dockerignore'})), ref='7d5ffc917109', children=())]\""}, "return_value": "250"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'cache = <shipwright._lib.cache.NoCache object at 0xffff92b28190>'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def do_build(client, build_ref, targets, cache):'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        Generic function for building multiple images while'"}, "return_value": "59"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        notifying a callback function with output produced.'"}, "return_value": "59"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        Given a list of targets it builds the target with the given'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        build_func while streaming the output through the given'"}, "return_value": "63"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        show_func.'"}, "return_value": "18"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        Returns an iterator of (image, docker_image_id) pairs as'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        the final output.'"}, "return_value": "25"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        Building an image can take sometime so  the results are returned as'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        an iterator in case the caller wants to use restults in between builds.'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        The consequences of this is you must either call it as part of a for loop'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        or pass it to a function like list() which can consume an iterator.'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        build_index = {t.image.name: t.ref for t in targets}'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        for target in targets:'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            parent_ref = None'"}, "return_value": "29"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if target.parent:'"}, "return_value": "29"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                parent_ref = build_index.get(target.parent)'"}, "return_value": "59"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>           for evt in build(client, parent_ref, target, cache):'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'shipwright/_lib/build.py'"}, "return_value": "24"}, {"func_args": {"text": "':39: '"}, "return_value": "5"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'client = <docker.api.client.APIClient object at 0xffff92b28340>'"}, "return_value": "63"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'parent_ref = None'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"image = Target(image=Image(name='shipwright/base', dir_path='/tmp/pytest-of-root/pytest-1/test_child_inherits_parents_bu0/ship...-1/test_child_inherits_parents_bu0/shipwright-sample/service1/.dockerignore'})), ref='7d5ffc917109', children=()),)),))\""}, "return_value": "248"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'cache = <shipwright._lib.cache.NoCache object at 0xffff92b28190>'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def build(client, parent_ref, image, cache):'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        builds the given image tagged with <build_ref> and ensures that'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        it depends on it's parent if it's part of this build group (shares\""}, "return_value": "74"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        the same namespace)'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        merge_config = {'"}, "return_value": "24"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            'event': 'build_msg',\""}, "return_value": "33"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            'target': image,\""}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            'rev': image.ref,\""}, "return_value": "29"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        }'"}, "return_value": "9"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        def process_event_(evt):'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            return _merge(merge_config, evt)'"}, "return_value": "44"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       built_tags = docker.last_built_from_docker(client, image.name)'"}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'shipwright/_lib/build.py'"}, "return_value": "24"}, {"func_args": {"text": "':60: '"}, "return_value": "5"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'client = <docker.api.client.APIClient object at 0xffff92b28340>'"}, "return_value": "63"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"name = 'shipwright/base'\""}, "return_value": "24"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def last_built_from_docker(client, name):'"}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       images = client.images(name)'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'shipwright/_lib/docker.py'"}, "return_value": "25"}, {"func_args": {"text": "':27: '"}, "return_value": "5"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.api.client.APIClient object at 0xffff92b28340>'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"name = 'shipwright/base', quiet = False, all = False, viz = False\""}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'filters = None'"}, "return_value": "14"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def images(self, name=None, quiet=False, all=False, viz=False,'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               filters=None):'"}, "return_value": "29"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            List images. Similar to the ``docker images`` command.'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            Args:'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                name (str): Only show images belonging to the repository ``name``'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                quiet (bool): Only return numeric IDs as a list.'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                all (bool): Show intermediate image layers. By default, these are'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    filtered out.'"}, "return_value": "33"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                filters (dict): Filters to be processed on the image list.'"}, "return_value": "74"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    Available filters:'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    - ``dangling`` (bool)'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    - ``label`` (str): format either ``key`` or ``key=value``'"}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            Returns:'"}, "return_value": "20"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                (dict or list): A list if ``quiet=True``, otherwise a dict.'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            Raises:'"}, "return_value": "19"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :py:class:`docker.errors.APIError`'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    If the server returns an error.'"}, "return_value": "51"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if viz:'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            if utils.compare_version('1.7', self._version) >= 0:\""}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                raise Exception('Viz output is not supported in API >= 1.7!')\""}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            return self._result(self._get(self._url(\"images/viz\")))'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        params = {'"}, "return_value": "18"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            'filter': name,\""}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            'only_ids': 1 if quiet else 0,\""}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            'all': 1 if all else 0,\""}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        }'"}, "return_value": "9"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if filters:'"}, "return_value": "19"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            params['filters'] = utils.convert_filters(filters)\""}, "return_value": "62"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       res = self._result(self._get(self._url(\"/images/json\"), params=params),'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                           True)'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/docker/api/image.py'"}, "return_value": "57"}, {"func_args": {"text": "':93: '"}, "return_value": "5"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.api.client.APIClient object at 0xffff92b28340>'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"args = ('http+docker://localunixsocket/v1.18/images/json',)\""}, "return_value": "59"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"kwargs = {'params': {'all': 0, 'filter': 'shipwright/base', 'only_ids': 0}}\""}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def inner(self, *args, **kwargs):'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        if 'HttpHeaders' in self._auth_configs:\""}, "return_value": "47"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            if not kwargs.get('headers'):\""}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                kwargs['headers'] = self._auth_configs['HttpHeaders']\""}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            else:'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                kwargs['headers'].update(self._auth_configs['HttpHeaders'])\""}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       return f(self, *args, **kwargs)'"}, "return_value": "39"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/docker/utils/decorators.py'"}, "return_value": "64"}, {"func_args": {"text": "':46: '"}, "return_value": "5"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.api.client.APIClient object at 0xffff92b28340>'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"url = 'http+docker://localunixsocket/v1.18/images/json'\""}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"kwargs = {'params': {'all': 0, 'filter': 'shipwright/base', 'only_ids': 0}, 'timeout': 60}\""}, "return_value": "90"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    @update_headers'"}, "return_value": "19"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def _get(self, url, **kwargs):'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       return self.get(url, **self._set_request_timeout(kwargs))'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/docker/api/client.py'"}, "return_value": "58"}, {"func_args": {"text": "':191: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.api.client.APIClient object at 0xffff92b28340>'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"url = 'http+docker://localunixsocket/v1.18/images/json'\""}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"kwargs = {'allow_redirects': True, 'params': {'all': 0, 'filter': 'shipwright/base', 'only_ids': 0}, 'timeout': 60}\""}, "return_value": "115"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def get(self, url, **kwargs):'"}, "return_value": "33"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        r\"\"\"Sends a GET request. Returns :class:`Response` object.'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param url: URL for the new :class:`Request` object.'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param \\\\*\\\\*kwargs: Optional arguments that ``request`` takes.'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :rtype: requests.Response'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        kwargs.setdefault('allow_redirects', True)\""}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\">       return self.request('GET', url, **kwargs)\""}, "return_value": "49"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/requests/sessions.py'"}, "return_value": "58"}, {"func_args": {"text": "':542: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"self = <docker.api.client.APIClient object at 0xffff92b28340>, method = 'GET'\""}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"url = 'http+docker://localunixsocket/v1.18/images/json'\""}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"params = {'all': 0, 'filter': 'shipwright/base', 'only_ids': 0}, data = None\""}, "return_value": "76"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'headers = None, cookies = None, files = None, auth = None, timeout = 60'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'allow_redirects = True, proxies = {}, hooks = None, stream = None, verify = None'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'cert = None, json = None'"}, "return_value": "24"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def request(self, method, url,'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            params=None, data=None, headers=None, cookies=None, files=None,'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            auth=None, timeout=None, allow_redirects=True, proxies=None,'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            hooks=None, stream=None, verify=None, cert=None, json=None):'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"Constructs a :class:`Request <Request>`, prepares it and sends it.'"}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            Returns :class:`Response <Response>` object.'"}, "return_value": "56"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param method: method for the new :class:`Request` object.'"}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param url: URL for the new :class:`Request` object.'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param params: (optional) Dictionary or bytes to be sent in the query'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                string for the :class:`Request`.'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param data: (optional) Dictionary, list of tuples, bytes, or file-like'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                object to send in the body of the :class:`Request`.'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param json: (optional) json to send in the body of the'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :class:`Request`.'"}, "return_value": "33"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param headers: (optional) Dictionary of HTTP Headers to send with the'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :class:`Request`.'"}, "return_value": "33"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param cookies: (optional) Dict or CookieJar object to send with the'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :class:`Request`.'"}, "return_value": "33"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            :param files: (optional) Dictionary of ``'filename': file-like-objects``\""}, "return_value": "84"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                for multipart encoding upload.'"}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param auth: (optional) Auth tuple or callable to enable'"}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Basic/Digest/Custom HTTP Auth.'"}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param timeout: (optional) How long to wait for the server to send'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                data before giving up, as a float, or a :ref:`(connect timeout,'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                read timeout) <timeouts>` tuple.'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :type timeout: float or tuple'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param allow_redirects: (optional) Set to True by default.'"}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :type allow_redirects: bool'"}, "return_value": "39"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param proxies: (optional) Dictionary mapping protocol or protocol and'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                hostname to the URL of the proxy.'"}, "return_value": "49"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param stream: (optional) whether to immediately download the response'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                content. Defaults to ``False``.'"}, "return_value": "47"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param verify: (optional) Either a boolean, in which case it controls whether we verify'"}, "return_value": "99"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                the server's TLS certificate, or a string, in which case it must be a path\""}, "return_value": "90"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                to a CA bundle to use. Defaults to ``True``. When set to'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                ``False``, requests will accept any TLS certificate presented by'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                the server, and will ignore hostname mismatches and/or expired'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                certificates, which will make your application vulnerable to'"}, "return_value": "76"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                man-in-the-middle (MitM) attacks. Setting verify to ``False``'"}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                may be useful during local development or testing.'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param cert: (optional) if String, path to ssl client cert file (.pem).'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                If Tuple, ('cert', 'key') pair.\""}, "return_value": "47"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :rtype: requests.Response'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Create the Request.'"}, "return_value": "29"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        req = Request('"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            method=method.upper(),'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            url=url,'"}, "return_value": "20"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            headers=headers,'"}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            files=files,'"}, "return_value": "24"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            data=data or {},'"}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            json=json,'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            params=params or {},'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            auth=auth,'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            cookies=cookies,'"}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            hooks=hooks,'"}, "return_value": "24"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        )'"}, "return_value": "9"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        prep = self.prepare_request(req)'"}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        proxies = proxies or {}'"}, "return_value": "31"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        settings = self.merge_environment_settings('"}, "return_value": "51"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            prep.url, proxies, stream, verify, cert'"}, "return_value": "51"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        )'"}, "return_value": "9"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Send the request.'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        send_kwargs = {'"}, "return_value": "23"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            'timeout': timeout,\""}, "return_value": "31"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            'allow_redirects': allow_redirects,\""}, "return_value": "47"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        }'"}, "return_value": "9"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        send_kwargs.update(settings)'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       resp = self.send(prep, **send_kwargs)'"}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/requests/sessions.py'"}, "return_value": "58"}, {"func_args": {"text": "':529: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.api.client.APIClient object at 0xffff92b28340>'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'request = <PreparedRequest [GET]>'"}, "return_value": "33"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"kwargs = {'cert': None, 'proxies': OrderedDict(), 'stream': False, 'timeout': 60, ...}\""}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"allow_redirects = True, stream = False, hooks = {'response': []}\""}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'adapter = <docker.transport.unixconn.UnixAdapter object at 0xffffa2a18ca0>'"}, "return_value": "74"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'start = 1642611056.0507443'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def send(self, request, **kwargs):'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"Send a given PreparedRequest.'"}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :rtype: requests.Response'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Set defaults that the hooks can utilize to ensure they always have'"}, "return_value": "76"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # the correct parameters to reproduce the previous request.'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        kwargs.setdefault('stream', self.stream)\""}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        kwargs.setdefault('verify', self.verify)\""}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        kwargs.setdefault('cert', self.cert)\""}, "return_value": "44"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        if 'proxies' not in kwargs:\""}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            kwargs['proxies'] = resolve_proxies(\""}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                request, self.proxies, self.trust_env'"}, "return_value": "53"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            )'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        # It's possible that users might accidentally send a Request object.\""}, "return_value": "76"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Guard against that specific failure case.'"}, "return_value": "51"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if isinstance(request, Request):'"}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            raise ValueError('You can only send PreparedRequests.')\""}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Set up variables needed for resolve_redirects and dispatching of hooks'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        allow_redirects = kwargs.pop('allow_redirects', True)\""}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        stream = kwargs.get('stream')\""}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        hooks = request.hooks'"}, "return_value": "29"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Get the appropriate adapter to use'"}, "return_value": "44"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        adapter = self.get_adapter(url=request.url)'"}, "return_value": "51"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Start time (approximately) of the request'"}, "return_value": "51"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        start = preferred_clock()'"}, "return_value": "33"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Send the request'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       r = adapter.send(request, **kwargs)'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/requests/sessions.py'"}, "return_value": "58"}, {"func_args": {"text": "':645: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixAdapter object at 0xffffa2a18ca0>'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'request = <PreparedRequest [GET]>, stream = False'"}, "return_value": "49"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'proxies = OrderedDict()'"}, "return_value": "23"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):'"}, "return_value": "94"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"Sends PreparedRequest object. Returns Response object.'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param stream: (optional) Whether to stream the request content.'"}, "return_value": "76"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param timeout: (optional) How long to wait for the server to send'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                data before giving up, as a float, or a :ref:`(connect timeout,'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                read timeout) <timeouts>` tuple.'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :type timeout: float or tuple or urllib3 Timeout object'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param verify: (optional) Either a boolean, in which case it controls whether'"}, "return_value": "89"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                we verify the server's TLS certificate, or a string, in which case it\""}, "return_value": "85"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                must be a path to a CA bundle to use'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param cert: (optional) Any user-provided SSL certificate to be trusted.'"}, "return_value": "84"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param proxies: (optional) The proxies dictionary to apply to the request.'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :rtype: requests.Response'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        try:'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            conn = self.get_connection(request.url, proxies)'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        except LocationValueError as e:'"}, "return_value": "39"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            raise InvalidURL(e, request=request)'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self.cert_verify(conn, request.url, verify, cert)'"}, "return_value": "57"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        url = self.request_url(request, proxies)'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)'"}, "return_value": "108"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        chunked = not (request.body is None or 'Content-Length' in request.headers)\""}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if isinstance(timeout, tuple):'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            try:'"}, "return_value": "16"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                connect, read = timeout'"}, "return_value": "39"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                timeout = TimeoutSauce(connect=connect, read=read)'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            except ValueError as e:'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                # this may raise a string formatting error.'"}, "return_value": "59"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                err = (\"Invalid timeout {}. Pass a (connect, read) \"'"}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                       \"timeout tuple, or a single float to set \"'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                       \"both timeouts to the same value\".format(timeout))'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                raise ValueError(err)'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        elif isinstance(timeout, TimeoutSauce):'"}, "return_value": "47"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            pass'"}, "return_value": "16"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        else:'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            timeout = TimeoutSauce(connect=timeout, read=timeout)'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        try:'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if not chunked:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                resp = conn.urlopen('"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    method=request.method,'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    url=url,'"}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    body=request.body,'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    headers=request.headers,'"}, "return_value": "44"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    redirect=False,'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    assert_same_host=False,'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    preload_content=False,'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    decode_content=False,'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    retries=self.max_retries,'"}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    timeout=timeout'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                )'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Send the request.'"}, "return_value": "31"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            else:'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                if hasattr(conn, 'proxy_pool'):\""}, "return_value": "47"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    conn = conn.proxy_pool'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                try:'"}, "return_value": "20"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                    skip_host = 'Host' in request.headers\""}, "return_value": "57"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    low_conn.putrequest(request.method,'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                                        url,'"}, "return_value": "44"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                                        skip_accept_encoding=True,'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                                        skip_host=skip_host)'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    for header, value in request.headers.items():'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        low_conn.putheader(header, value)'"}, "return_value": "57"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    low_conn.endheaders()'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    for i in request.body:'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                        low_conn.send(hex(len(i))[2:].encode('utf-8'))\""}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                        low_conn.send(b'\\\\r\\\\n')\""}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        low_conn.send(i)'"}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                        low_conn.send(b'\\\\r\\\\n')\""}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                    low_conn.send(b'0\\\\r\\\\n\\\\r\\\\n')\""}, "return_value": "47"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    # Receive the response from the server'"}, "return_value": "58"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    try:'"}, "return_value": "24"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        # For Python 2.7, use buffering of HTTP responses'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        r = low_conn.getresponse(buffering=True)'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    except TypeError:'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        # For compatibility with Python 3.3+'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        r = low_conn.getresponse()'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    resp = HTTPResponse.from_httplib('"}, "return_value": "53"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        r,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        pool=conn,'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        connection=low_conn,'"}, "return_value": "44"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        preload_content=False,'"}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        decode_content=False'"}, "return_value": "44"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    )'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                except:'"}, "return_value": "23"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    # If we hit any problems here, clean up the connection.'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    # Then, reraise so that we can handle the actual exception.'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    low_conn.close()'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    raise'"}, "return_value": "25"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        except (ProtocolError, socket.error) as err:'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>           raise ConnectionError(err, request=request)'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"E           requests.exceptions.ConnectionError: ('Connection aborted.', FileNotFoundError(2, 'No such file or directory'))\""}, "return_value": "123"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/requests/adapters.py'"}, "return_value": "58"}, {"func_args": {"text": "':501: ConnectionError'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'During handling of the above exception, another exception occurred:'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0xffff9f54b340>'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"method = 'GET'\""}, "return_value": "14"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"url = '/v1.21/images/json?filter=shipwright%2Fservice1&only_ids=1&all=0'\""}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'body = None'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"headers = {'User-Agent': 'docker-sdk-python/2.7.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\""}, "return_value": "132"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'redirect = False, assert_same_host = False'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'release_conn = False, chunked = False, body_pos = None'"}, "return_value": "54"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"response_kw = {'decode_content': False, 'preload_content': False}\""}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/v1.21/images/json', query='filter=shipwright%2Fservice1&only_ids=1&all=0', fragment=None)\""}, "return_value": "159"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'destination_scheme = None, conn = None, release_this_conn = True'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'http_tunnel_required = False, err = None, clean_exit = False'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def urlopen('"}, "return_value": "16"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self,'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        method,'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        url,'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        body=None,'"}, "return_value": "18"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        headers=None,'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        retries=None,'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        redirect=True,'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        assert_same_host=True,'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        timeout=_Default,'"}, "return_value": "25"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        pool_timeout=None,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        release_conn=None,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        chunked=False,'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        body_pos=None,'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        **response_kw'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    ):'"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            Get a connection from the pool and perform an HTTP request. This is the'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            lowest level call for making a request, so you'll need to specify all\""}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            the raw details.'"}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            .. note::'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"               More commonly, it's appropriate to use a convenience method provided\""}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               by :class:`.RequestMethods`, such as :meth:`request`.'"}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            .. note::'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               `release_conn` will only behave as expected if'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               `preload_content=False` because we want to make'"}, "return_value": "62"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               `preload_content=False` the default behaviour someday soon without'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               breaking backwards compatibility.'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param method:'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                HTTP request method (such as GET, POST, PUT, etc.)'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param url:'"}, "return_value": "23"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                The URL to perform the request on.'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param body:'"}, "return_value": "24"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Data to send in the request body, either :class:`str`, :class:`bytes`,'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                an iterable of :class:`str`/:class:`bytes`, or a file-like object.'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param headers:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Dictionary of custom headers to send, such as User-Agent,'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If-None-Match, etc. If None, pool headers are used. If provided,'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                these headers completely replace any pool-specific headers.'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param retries:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Configure the number of retries to allow before raising a'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :class:`~urllib3.exceptions.MaxRetryError` exception.'"}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Pass ``None`` to retry until you receive a response. Pass a'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :class:`~urllib3.util.retry.Retry` object for fine-grained control'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                over different types of retries.'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Pass an integer number to retry connection errors that many times,'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                but no other types of errors. Pass zero to never retry.'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If ``False``, then retries are disabled and any exception is raised'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                immediately. Also, instead of raising a MaxRetryError on redirects,'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                the redirect response will be returned.'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param redirect:'"}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If True, automatically handle redirects (status codes 301, 302,'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                303, 307, 308). Each redirect counts as a retry. Disabling retries'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                will disable redirect, too.'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param assert_same_host:'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If ``True``, will make sure that the host of the pool requests is'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                consistent else will raise HostChangedError. When ``False``, you can'"}, "return_value": "84"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                use the pool on an HTTP proxy and request foreign hosts.'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param timeout:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If specified, overrides the default timeout for this one'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                request. It may be a float (in seconds) or an instance of'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :class:`urllib3.util.Timeout`.'"}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param pool_timeout:'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If set and the pool is set to block=True, then this method will'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                block for ``pool_timeout`` seconds and raise EmptyPoolError if no'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                connection is available within the time period.'"}, "return_value": "63"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param release_conn:'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If False, then the urlopen call will not release the connection'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                back into the pool once a response is received (but will release if'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                you read the entire contents of the response such as when'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                `preload_content=True`). This is useful if you're not preloading\""}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                the response's content immediately. You will need to call\""}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                ``r.release_conn()`` on the response ``r`` to return the connection'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                back into the pool. If None, it takes the value of'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                ``response_kw.get('preload_content', True)``.\""}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param chunked:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If True, urllib3 will send the body using chunked transfer'"}, "return_value": "74"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                encoding. Otherwise, urllib3 will send the body using the standard'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                content-length form. Defaults to False.'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param int body_pos:'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Position to seek to in file-like body in the event of a retry or'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                redirect. Typically this won't need to be set because urllib3 will\""}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                auto-populate the value when needed.'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param \\\\\\\\**response_kw:'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Additional parameters are passed to'"}, "return_value": "51"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :meth:`urllib3.response.HTTPResponse.from_httplib`'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        parsed_url = parse_url(url)'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        destination_scheme = parsed_url.scheme'"}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if headers is None:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            headers = self.headers'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if not isinstance(retries, Retry):'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if release_conn is None:'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            release_conn = response_kw.get(\"preload_content\", True)'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Check host'"}, "return_value": "20"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if assert_same_host and not self.is_same_host(url):'"}, "return_value": "59"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            raise HostChangedError(self, url, retries)'"}, "return_value": "54"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        # Ensure that the URL we're connecting to is properly encoded\""}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if url.startswith(\"/\"):'"}, "return_value": "31"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            url = six.ensure_str(_encode_target(url))'"}, "return_value": "53"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        else:'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            url = six.ensure_str(parsed_url.url)'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        conn = None'"}, "return_value": "19"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Track whether `conn` needs to be released before'"}, "return_value": "58"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # returning/raising/recursing. Update this variable if necessary, and'"}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # leave `release_conn` constant throughout the function. That way, if'"}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # the function recurses, the original value of `release_conn` will be'"}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # passed down into the recursive call, and its value will be respected.'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        #'"}, "return_value": "9"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # See issue #651 [1] for details.'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        #'"}, "return_value": "9"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # [1] <https://github.com/urllib3/urllib3/issues/651>'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        release_this_conn = release_conn'"}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        http_tunnel_required = connection_requires_http_tunnel('"}, "return_value": "63"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            self.proxy, self.proxy_config, destination_scheme'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        )'"}, "return_value": "9"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Merge the proxy headers. Only done when not using HTTP CONNECT. We'"}, "return_value": "76"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # have to copy the headers dict so we can safely change it without those'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        # changes being reflected in anyone else's copy.\""}, "return_value": "56"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if not http_tunnel_required:'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            headers = headers.copy()'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            headers.update(self.proxy_headers)'"}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Must keep the exception bound to a separate variable or else Python 3'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # complains about UnboundLocalError.'"}, "return_value": "44"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        err = None'"}, "return_value": "18"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Keep track of whether we cleanly exited the except block. This'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # ensures we do proper cleanup in finally.'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        clean_exit = False'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Rewind body position, if needed. Record current position'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # for future rewinds in the event of a redirect/retry.'"}, "return_value": "62"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        body_pos = set_file_position(body, body_pos)'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        try:'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Request a connection from the queue.'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            timeout_obj = self._get_timeout(timeout)'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            conn = self._get_conn(timeout=pool_timeout)'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            conn.timeout = timeout_obj.connect_timeout'"}, "return_value": "54"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            is_new_proxy_conn = self.proxy is not None and not getattr('"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                conn, \"sock\", None'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            )'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if is_new_proxy_conn and http_tunnel_required:'"}, "return_value": "58"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                self._prepare_proxy(conn)'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Make the request on the httplib connection object.'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>           httplib_response = self._make_request('"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                conn,'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                method,'"}, "return_value": "23"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                url,'"}, "return_value": "20"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                timeout=timeout_obj,'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                body=body,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                headers=headers,'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                chunked=chunked,'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            )'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/urllib3/connectionpool.py'"}, "return_value": "63"}, {"func_args": {"text": "':703: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0xffff9f54b340>'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'conn = <docker.transport.unixconn.UnixHTTPConnection object at 0xffff92b05be0>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"method = 'GET'\""}, "return_value": "14"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"url = '/v1.21/images/json?filter=shipwright%2Fservice1&only_ids=1&all=0'\""}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'timeout = Timeout(connect=60, read=60, total=None), chunked = False'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"httplib_request_kw = {'body': None, 'headers': {'User-Agent': 'docker-sdk-python/2.7.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}}\""}, "return_value": "170"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'timeout_obj = Timeout(connect=60, read=60, total=None)'"}, "return_value": "54"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def _make_request('"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    ):'"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            Perform a request on a given urllib connection object taken from our'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            pool.'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param conn:'"}, "return_value": "24"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                a connection from one of our connection pools'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param timeout:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Socket timeout in seconds for the request. This can be a'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                float or integer, which will set the same timeout value for'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                the socket connect and the socket read, or an instance of'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :class:`urllib3.util.Timeout`, which gives you more fine-grained'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                control over your timeouts.'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self.num_requests += 1'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        timeout_obj = self._get_timeout(timeout)'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        timeout_obj.start_connect()'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        conn.timeout = timeout_obj.connect_timeout'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Trigger any extra validation we need to do.'"}, "return_value": "53"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        try:'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            self._validate_conn(conn)'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        except (SocketTimeout, BaseSSLError) as e:'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            raise'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # conn.request() calls http.client.*.request, not the method in'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # urllib3.request. It also calls makefile (recv) on the socket.'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        try:'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if chunked:'"}, "return_value": "23"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                conn.request_chunked(method, url, **httplib_request_kw)'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            else:'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>               conn.request(method, url, **httplib_request_kw)'"}, "return_value": "63"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/urllib3/connectionpool.py'"}, "return_value": "63"}, {"func_args": {"text": "':398: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnection object at 0xffff92b05be0>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"method = 'GET'\""}, "return_value": "14"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"url = '/v1.21/images/json?filter=shipwright%2Fservice1&only_ids=1&all=0'\""}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'body = None'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"headers = {'User-Agent': 'docker-sdk-python/2.7.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\""}, "return_value": "132"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def request(self, method, url, body=None, headers={}, *,'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                encode_chunked=False):'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"Send a complete request to the server.\"\"\"'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       self._send_request(method, url, body, headers, encode_chunked)'"}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'/usr/local/lib/python3.8/http/client.py'"}, "return_value": "39"}, {"func_args": {"text": "':1256: '"}, "return_value": "7"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnection object at 0xffff92b05be0>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"method = 'GET'\""}, "return_value": "14"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"url = '/v1.21/images/json?filter=shipwright%2Fservice1&only_ids=1&all=0'\""}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'body = None'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"headers = {'User-Agent': 'docker-sdk-python/2.7.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\""}, "return_value": "132"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'encode_chunked = False'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def _send_request(self, method, url, body, headers, encode_chunked):'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Honor explicitly requested Host: and Accept-Encoding: headers.'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        header_names = frozenset(k.lower() for k in headers)'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        skips = {}'"}, "return_value": "18"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        if 'host' in header_names:\""}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            skips['skip_host'] = 1\""}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        if 'accept-encoding' in header_names:\""}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            skips['skip_accept_encoding'] = 1\""}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self.putrequest(method, url, **skips)'"}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # chunked encoding will happen if HTTP/1.1 is used and either'"}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # the caller passes encode_chunked=True or the following'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # conditions hold:'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # 1. content-length has not been explicitly set'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # 2. the body is a file or iterable, but not a str or bytes-like'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # 3. Transfer-Encoding has NOT been explicitly set by the caller'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        if 'content-length' not in header_names:\""}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # only chunk body if not explicitly set for backwards'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # compatibility, assuming the client code is already handling the'"}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # chunking'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            if 'transfer-encoding' not in header_names:\""}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                # if content-length cannot be automatically determined, fall'"}, "return_value": "76"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                # back to chunked encoding'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                encode_chunked = False'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                content_length = self._get_content_length(body, method)'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                if content_length is None:'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    if body is not None:'"}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        if self.debuglevel > 0:'"}, "return_value": "47"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                            print('Unable to determine size of %r' % body)\""}, "return_value": "74"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        encode_chunked = True'"}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                        self.putheader('Transfer-Encoding', 'chunked')\""}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                else:'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                    self.putheader('Content-Length', str(content_length))\""}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        else:'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            encode_chunked = False'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        for hdr, value in headers.items():'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            self.putheader(hdr, value)'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if isinstance(body, str):'"}, "return_value": "33"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # RFC 2616 Section 3.7.1 says that text default has a'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # default charset of iso-8859-1.'"}, "return_value": "44"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            body = _encode(body, 'body')\""}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       self.endheaders(body, encode_chunked=encode_chunked)'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'/usr/local/lib/python3.8/http/client.py'"}, "return_value": "39"}, {"func_args": {"text": "':1302: '"}, "return_value": "7"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnection object at 0xffff92b05be0>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'message_body = None'"}, "return_value": "19"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def endheaders(self, message_body=None, *, encode_chunked=False):'"}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"Indicate that the last header line has been sent to the server.'"}, "return_value": "74"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            This method sends the request to the server.  The optional message_body'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            argument can be used to pass a message body associated with the'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            request.'"}, "return_value": "20"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if self.__state == _CS_REQ_STARTED:'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            self.__state = _CS_REQ_SENT'"}, "return_value": "39"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        else:'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            raise CannotSendHeader()'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       self._send_output(message_body, encode_chunked=encode_chunked)'"}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'/usr/local/lib/python3.8/http/client.py'"}, "return_value": "39"}, {"func_args": {"text": "':1251: '"}, "return_value": "7"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnection object at 0xffff92b05be0>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'message_body = None, encode_chunked = False'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def _send_output(self, message_body=None, encode_chunked=False):'"}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"Send the currently buffered request and clear the buffer.'"}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            Appends an extra \\\\\\\\r\\\\\\\\n to the buffer.'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            A message_body may be specified, to be appended to the request.'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self._buffer.extend((b\"\", b\"\"))'"}, "return_value": "39"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        msg = b\"\\\\r\\\\n\".join(self._buffer)'"}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        del self._buffer[:]'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       self.send(msg)'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'/usr/local/lib/python3.8/http/client.py'"}, "return_value": "39"}, {"func_args": {"text": "':1011: '"}, "return_value": "7"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnection object at 0xffff92b05be0>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"data = b'GET /v1.21/images/json?filter=shipwright%2Fservice1&only_ids=1&all=0 HTTP/1.1\\\\r\\\\nHost: localhost\\\\r\\\\nUser-Agent: docker-sdk-python/2.7.0\\\\r\\\\nAccept-Encoding: gzip, deflate\\\\r\\\\nAccept: */*\\\\r\\\\nConnection: keep-alive\\\\r\\\\n\\\\r\\\\n'\""}, "return_value": "228"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def send(self, data):'"}, "return_value": "25"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"Send `data\\' to the server.'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            ``data`` can be a string object, a bytes object, an array object, a'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            file-like object that supports a .read() method, or an iterable object.'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if self.sock is None:'"}, "return_value": "29"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if self.auto_open:'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>               self.connect()'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'/usr/local/lib/python3.8/http/client.py'"}, "return_value": "39"}, {"func_args": {"text": "':951: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnection object at 0xffff92b05be0>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def connect(self):'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        sock.settimeout(self.timeout)'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       sock.connect(self.unix_socket)'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'E       FileNotFoundError: [Errno 2] No such file or directory'"}, "return_value": "62"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/docker/transport/unixconn.py'"}, "return_value": "66"}, {"func_args": {"text": "':46: FileNotFoundError'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'During handling of the above exception, another exception occurred:'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixAdapter object at 0xffff9f0f21f0>'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'request = <PreparedRequest [GET]>, stream = False'"}, "return_value": "49"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'proxies = OrderedDict()'"}, "return_value": "23"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):'"}, "return_value": "94"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"Sends PreparedRequest object. Returns Response object.'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param stream: (optional) Whether to stream the request content.'"}, "return_value": "76"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param timeout: (optional) How long to wait for the server to send'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                data before giving up, as a float, or a :ref:`(connect timeout,'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                read timeout) <timeouts>` tuple.'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :type timeout: float or tuple or urllib3 Timeout object'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param verify: (optional) Either a boolean, in which case it controls whether'"}, "return_value": "89"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                we verify the server's TLS certificate, or a string, in which case it\""}, "return_value": "85"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                must be a path to a CA bundle to use'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param cert: (optional) Any user-provided SSL certificate to be trusted.'"}, "return_value": "84"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param proxies: (optional) The proxies dictionary to apply to the request.'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :rtype: requests.Response'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        try:'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            conn = self.get_connection(request.url, proxies)'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        except LocationValueError as e:'"}, "return_value": "39"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            raise InvalidURL(e, request=request)'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self.cert_verify(conn, request.url, verify, cert)'"}, "return_value": "57"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        url = self.request_url(request, proxies)'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)'"}, "return_value": "108"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        chunked = not (request.body is None or 'Content-Length' in request.headers)\""}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if isinstance(timeout, tuple):'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            try:'"}, "return_value": "16"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                connect, read = timeout'"}, "return_value": "39"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                timeout = TimeoutSauce(connect=connect, read=read)'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            except ValueError as e:'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                # this may raise a string formatting error.'"}, "return_value": "59"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                err = (\"Invalid timeout {}. Pass a (connect, read) \"'"}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                       \"timeout tuple, or a single float to set \"'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                       \"both timeouts to the same value\".format(timeout))'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                raise ValueError(err)'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        elif isinstance(timeout, TimeoutSauce):'"}, "return_value": "47"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            pass'"}, "return_value": "16"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        else:'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            timeout = TimeoutSauce(connect=timeout, read=timeout)'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        try:'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if not chunked:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>               resp = conn.urlopen('"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    method=request.method,'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    url=url,'"}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    body=request.body,'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    headers=request.headers,'"}, "return_value": "44"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    redirect=False,'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    assert_same_host=False,'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    preload_content=False,'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    decode_content=False,'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    retries=self.max_retries,'"}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    timeout=timeout'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                )'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/requests/adapters.py'"}, "return_value": "58"}, {"func_args": {"text": "':440: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0xffff9f54b340>'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"method = 'GET'\""}, "return_value": "14"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"url = '/v1.21/images/json?filter=shipwright%2Fservice1&only_ids=1&all=0'\""}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'body = None'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"headers = {'User-Agent': 'docker-sdk-python/2.7.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\""}, "return_value": "132"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'redirect = False, assert_same_host = False'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'release_conn = False, chunked = False, body_pos = None'"}, "return_value": "54"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"response_kw = {'decode_content': False, 'preload_content': False}\""}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/v1.21/images/json', query='filter=shipwright%2Fservice1&only_ids=1&all=0', fragment=None)\""}, "return_value": "159"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'destination_scheme = None, conn = None, release_this_conn = True'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'http_tunnel_required = False, err = None, clean_exit = False'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def urlopen('"}, "return_value": "16"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self,'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        method,'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        url,'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        body=None,'"}, "return_value": "18"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        headers=None,'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        retries=None,'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        redirect=True,'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        assert_same_host=True,'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        timeout=_Default,'"}, "return_value": "25"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        pool_timeout=None,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        release_conn=None,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        chunked=False,'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        body_pos=None,'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        **response_kw'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    ):'"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            Get a connection from the pool and perform an HTTP request. This is the'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            lowest level call for making a request, so you'll need to specify all\""}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            the raw details.'"}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            .. note::'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"               More commonly, it's appropriate to use a convenience method provided\""}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               by :class:`.RequestMethods`, such as :meth:`request`.'"}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            .. note::'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               `release_conn` will only behave as expected if'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               `preload_content=False` because we want to make'"}, "return_value": "62"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               `preload_content=False` the default behaviour someday soon without'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               breaking backwards compatibility.'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param method:'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                HTTP request method (such as GET, POST, PUT, etc.)'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param url:'"}, "return_value": "23"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                The URL to perform the request on.'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param body:'"}, "return_value": "24"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Data to send in the request body, either :class:`str`, :class:`bytes`,'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                an iterable of :class:`str`/:class:`bytes`, or a file-like object.'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param headers:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Dictionary of custom headers to send, such as User-Agent,'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If-None-Match, etc. If None, pool headers are used. If provided,'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                these headers completely replace any pool-specific headers.'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param retries:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Configure the number of retries to allow before raising a'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :class:`~urllib3.exceptions.MaxRetryError` exception.'"}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Pass ``None`` to retry until you receive a response. Pass a'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :class:`~urllib3.util.retry.Retry` object for fine-grained control'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                over different types of retries.'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Pass an integer number to retry connection errors that many times,'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                but no other types of errors. Pass zero to never retry.'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If ``False``, then retries are disabled and any exception is raised'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                immediately. Also, instead of raising a MaxRetryError on redirects,'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                the redirect response will be returned.'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param redirect:'"}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If True, automatically handle redirects (status codes 301, 302,'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                303, 307, 308). Each redirect counts as a retry. Disabling retries'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                will disable redirect, too.'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param assert_same_host:'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If ``True``, will make sure that the host of the pool requests is'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                consistent else will raise HostChangedError. When ``False``, you can'"}, "return_value": "84"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                use the pool on an HTTP proxy and request foreign hosts.'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param timeout:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If specified, overrides the default timeout for this one'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                request. It may be a float (in seconds) or an instance of'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :class:`urllib3.util.Timeout`.'"}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param pool_timeout:'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If set and the pool is set to block=True, then this method will'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                block for ``pool_timeout`` seconds and raise EmptyPoolError if no'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                connection is available within the time period.'"}, "return_value": "63"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param release_conn:'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If False, then the urlopen call will not release the connection'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                back into the pool once a response is received (but will release if'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                you read the entire contents of the response such as when'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                `preload_content=True`). This is useful if you're not preloading\""}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                the response's content immediately. You will need to call\""}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                ``r.release_conn()`` on the response ``r`` to return the connection'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                back into the pool. If None, it takes the value of'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                ``response_kw.get('preload_content', True)``.\""}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param chunked:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If True, urllib3 will send the body using chunked transfer'"}, "return_value": "74"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                encoding. Otherwise, urllib3 will send the body using the standard'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                content-length form. Defaults to False.'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param int body_pos:'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Position to seek to in file-like body in the event of a retry or'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                redirect. Typically this won't need to be set because urllib3 will\""}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                auto-populate the value when needed.'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param \\\\\\\\**response_kw:'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Additional parameters are passed to'"}, "return_value": "51"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :meth:`urllib3.response.HTTPResponse.from_httplib`'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        parsed_url = parse_url(url)'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        destination_scheme = parsed_url.scheme'"}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if headers is None:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            headers = self.headers'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if not isinstance(retries, Retry):'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if release_conn is None:'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            release_conn = response_kw.get(\"preload_content\", True)'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Check host'"}, "return_value": "20"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if assert_same_host and not self.is_same_host(url):'"}, "return_value": "59"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            raise HostChangedError(self, url, retries)'"}, "return_value": "54"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        # Ensure that the URL we're connecting to is properly encoded\""}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if url.startswith(\"/\"):'"}, "return_value": "31"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            url = six.ensure_str(_encode_target(url))'"}, "return_value": "53"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        else:'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            url = six.ensure_str(parsed_url.url)'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        conn = None'"}, "return_value": "19"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Track whether `conn` needs to be released before'"}, "return_value": "58"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # returning/raising/recursing. Update this variable if necessary, and'"}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # leave `release_conn` constant throughout the function. That way, if'"}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # the function recurses, the original value of `release_conn` will be'"}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # passed down into the recursive call, and its value will be respected.'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        #'"}, "return_value": "9"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # See issue #651 [1] for details.'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        #'"}, "return_value": "9"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # [1] <https://github.com/urllib3/urllib3/issues/651>'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        release_this_conn = release_conn'"}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        http_tunnel_required = connection_requires_http_tunnel('"}, "return_value": "63"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            self.proxy, self.proxy_config, destination_scheme'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        )'"}, "return_value": "9"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Merge the proxy headers. Only done when not using HTTP CONNECT. We'"}, "return_value": "76"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # have to copy the headers dict so we can safely change it without those'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        # changes being reflected in anyone else's copy.\""}, "return_value": "56"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if not http_tunnel_required:'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            headers = headers.copy()'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            headers.update(self.proxy_headers)'"}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Must keep the exception bound to a separate variable or else Python 3'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # complains about UnboundLocalError.'"}, "return_value": "44"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        err = None'"}, "return_value": "18"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Keep track of whether we cleanly exited the except block. This'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # ensures we do proper cleanup in finally.'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        clean_exit = False'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Rewind body position, if needed. Record current position'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # for future rewinds in the event of a redirect/retry.'"}, "return_value": "62"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        body_pos = set_file_position(body, body_pos)'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        try:'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Request a connection from the queue.'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            timeout_obj = self._get_timeout(timeout)'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            conn = self._get_conn(timeout=pool_timeout)'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            conn.timeout = timeout_obj.connect_timeout'"}, "return_value": "54"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            is_new_proxy_conn = self.proxy is not None and not getattr('"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                conn, \"sock\", None'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            )'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if is_new_proxy_conn and http_tunnel_required:'"}, "return_value": "58"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                self._prepare_proxy(conn)'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Make the request on the httplib connection object.'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            httplib_response = self._make_request('"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                conn,'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                method,'"}, "return_value": "23"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                url,'"}, "return_value": "20"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                timeout=timeout_obj,'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                body=body,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                headers=headers,'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                chunked=chunked,'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            )'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            # If we're going to release the connection in ``finally:``, then\""}, "return_value": "76"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            # the response doesn't need to know about the connection. Otherwise\""}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            # it will also try to release it and we'll have a double-release\""}, "return_value": "76"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # mess.'"}, "return_value": "19"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            response_conn = conn if not release_conn else None'"}, "return_value": "62"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Pass method to Response for length checking'"}, "return_value": "57"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            response_kw[\"request_method\"] = method'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            # Import httplib's response into our own wrapper object\""}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            response = self.ResponseCls.from_httplib('"}, "return_value": "53"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                httplib_response,'"}, "return_value": "33"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                pool=self,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                connection=response_conn,'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                retries=retries,'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                **response_kw'"}, "return_value": "29"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            )'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Everything went great!'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            clean_exit = True'"}, "return_value": "29"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        except EmptyPoolError:'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            # Didn't get a connection from the pool, no need to clean up\""}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            clean_exit = True'"}, "return_value": "29"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            release_this_conn = False'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            raise'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        except ('"}, "return_value": "16"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            TimeoutError,'"}, "return_value": "25"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            HTTPException,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            SocketError,'"}, "return_value": "24"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            ProtocolError,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            BaseSSLError,'"}, "return_value": "25"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            SSLError,'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            CertificateError,'"}, "return_value": "29"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        ) as e:'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Discard the connection for these exceptions. It will be'"}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # replaced during the next _get_conn() call.'"}, "return_value": "56"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            clean_exit = False'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            def _is_ssl_error_message_from_http_proxy(ssl_error):'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                # We're trying to detect the message 'WRONG_VERSION_NUMBER' but\""}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                # SSLErrors are kinda all over the place when it comes to the message,'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                # so we try to cover our bases here!'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                message = \" \".join(re.split(\"[^a-z]\", str(ssl_error).lower()))'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                return ('"}, "return_value": "24"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    \"wrong version number\" in message or \"unknown protocol\" in message'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                )'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Try to detect a common user error with proxies which is to'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            # set an HTTP proxy to be HTTPS when it should be 'http://'\""}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            # (ie {'http': 'http://proxy', 'https': 'https://proxy'})\""}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Instead we add a nice error message and point to a URL.'"}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if ('"}, "return_value": "16"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                isinstance(e, BaseSSLError)'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                and self.proxy'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                and _is_ssl_error_message_from_http_proxy(e)'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            ):'"}, "return_value": "14"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                e = ProxyError('"}, "return_value": "31"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    \"Your proxy appears to only use HTTP and not HTTPS, \"'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    \"try changing your proxy URL to be HTTP. See: \"'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    \"https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html\"'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    \"#https-proxy-error-http-proxy\",'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    SSLError(e),'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                )'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            elif isinstance(e, (BaseSSLError, CertificateError)):'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                e = SSLError(e)'"}, "return_value": "31"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                e = ProxyError(\"Cannot connect to proxy.\", e)'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            elif isinstance(e, (SocketError, HTTPException)):'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                e = ProtocolError(\"Connection aborted.\", e)'"}, "return_value": "59"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>           retries = retries.increment('"}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            )'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/urllib3/connectionpool.py'"}, "return_value": "63"}, {"func_args": {"text": "':785: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = Retry(total=0, connect=None, read=False, redirect=None, status=None)'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"method = 'GET'\""}, "return_value": "14"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"url = '/v1.21/images/json?filter=shipwright%2Fservice1&only_ids=1&all=0'\""}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'response = None'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"error = ProtocolError('Connection aborted.', FileNotFoundError(2, 'No such file or directory'))\""}, "return_value": "95"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_pool = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0xffff9f54b340>'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_stacktrace = <traceback object at 0xffff982cf740>'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def increment('"}, "return_value": "18"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self,'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        method=None,'"}, "return_value": "20"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        url=None,'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        response=None,'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        error=None,'"}, "return_value": "19"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        _pool=None,'"}, "return_value": "19"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        _stacktrace=None,'"}, "return_value": "25"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    ):'"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"Return a new Retry object with incremented retry counters.'"}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param response: A response object, or None, if the server did not'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                return a response.'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :type response: :class:`~urllib3.response.HTTPResponse`'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param Exception error: An error encountered during the request, or'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                None if the response was received successfully.'"}, "return_value": "63"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :return: A new ``Retry`` object.'"}, "return_value": "44"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if self.total is False and error:'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Disabled, indicate to re-raise the error.'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            raise six.reraise(type(error), error, _stacktrace)'"}, "return_value": "62"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        total = self.total'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if total is not None:'"}, "return_value": "29"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            total -= 1'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        connect = self.connect'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        read = self.read'"}, "return_value": "24"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        redirect = self.redirect'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        status_count = self.status'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        other = self.other'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        cause = \"unknown\"'"}, "return_value": "25"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        status = None'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        redirect_location = None'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if error and self._is_connection_error(error):'"}, "return_value": "54"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Connect retry?'"}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if connect is False:'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                raise six.reraise(type(error), error, _stacktrace)'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            elif connect is not None:'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                connect -= 1'"}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        elif error and self._is_read_error(error):'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Read retry?'"}, "return_value": "25"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if read is False or not self._is_method_retryable(method):'"}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>               raise six.reraise(type(error), error, _stacktrace)'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/urllib3/util/retry.py'"}, "return_value": "59"}, {"func_args": {"text": "':550: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"tp = <class 'urllib3.exceptions.ProtocolError'>, value = None, tb = None\""}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def reraise(tp, value, tb=None):'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        try:'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if value is None:'"}, "return_value": "29"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                value = tp()'"}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if value.__traceback__ is not tb:'"}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>               raise value.with_traceback(tb)'"}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/urllib3/packages/six.py'"}, "return_value": "61"}, {"func_args": {"text": "':769: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0xffff9f54b340>'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"method = 'GET'\""}, "return_value": "14"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"url = '/v1.21/images/json?filter=shipwright%2Fservice1&only_ids=1&all=0'\""}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'body = None'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"headers = {'User-Agent': 'docker-sdk-python/2.7.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\""}, "return_value": "132"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'redirect = False, assert_same_host = False'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'release_conn = False, chunked = False, body_pos = None'"}, "return_value": "54"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"response_kw = {'decode_content': False, 'preload_content': False}\""}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/v1.21/images/json', query='filter=shipwright%2Fservice1&only_ids=1&all=0', fragment=None)\""}, "return_value": "159"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'destination_scheme = None, conn = None, release_this_conn = True'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'http_tunnel_required = False, err = None, clean_exit = False'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def urlopen('"}, "return_value": "16"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self,'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        method,'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        url,'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        body=None,'"}, "return_value": "18"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        headers=None,'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        retries=None,'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        redirect=True,'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        assert_same_host=True,'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        timeout=_Default,'"}, "return_value": "25"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        pool_timeout=None,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        release_conn=None,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        chunked=False,'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        body_pos=None,'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        **response_kw'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    ):'"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            Get a connection from the pool and perform an HTTP request. This is the'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            lowest level call for making a request, so you'll need to specify all\""}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            the raw details.'"}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            .. note::'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"               More commonly, it's appropriate to use a convenience method provided\""}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               by :class:`.RequestMethods`, such as :meth:`request`.'"}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            .. note::'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               `release_conn` will only behave as expected if'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               `preload_content=False` because we want to make'"}, "return_value": "62"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               `preload_content=False` the default behaviour someday soon without'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'               breaking backwards compatibility.'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param method:'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                HTTP request method (such as GET, POST, PUT, etc.)'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param url:'"}, "return_value": "23"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                The URL to perform the request on.'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param body:'"}, "return_value": "24"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Data to send in the request body, either :class:`str`, :class:`bytes`,'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                an iterable of :class:`str`/:class:`bytes`, or a file-like object.'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param headers:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Dictionary of custom headers to send, such as User-Agent,'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If-None-Match, etc. If None, pool headers are used. If provided,'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                these headers completely replace any pool-specific headers.'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param retries:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Configure the number of retries to allow before raising a'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :class:`~urllib3.exceptions.MaxRetryError` exception.'"}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Pass ``None`` to retry until you receive a response. Pass a'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :class:`~urllib3.util.retry.Retry` object for fine-grained control'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                over different types of retries.'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Pass an integer number to retry connection errors that many times,'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                but no other types of errors. Pass zero to never retry.'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If ``False``, then retries are disabled and any exception is raised'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                immediately. Also, instead of raising a MaxRetryError on redirects,'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                the redirect response will be returned.'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param redirect:'"}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If True, automatically handle redirects (status codes 301, 302,'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                303, 307, 308). Each redirect counts as a retry. Disabling retries'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                will disable redirect, too.'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param assert_same_host:'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If ``True``, will make sure that the host of the pool requests is'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                consistent else will raise HostChangedError. When ``False``, you can'"}, "return_value": "84"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                use the pool on an HTTP proxy and request foreign hosts.'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param timeout:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If specified, overrides the default timeout for this one'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                request. It may be a float (in seconds) or an instance of'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :class:`urllib3.util.Timeout`.'"}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param pool_timeout:'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If set and the pool is set to block=True, then this method will'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                block for ``pool_timeout`` seconds and raise EmptyPoolError if no'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                connection is available within the time period.'"}, "return_value": "63"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param release_conn:'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If False, then the urlopen call will not release the connection'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                back into the pool once a response is received (but will release if'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                you read the entire contents of the response such as when'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                `preload_content=True`). This is useful if you're not preloading\""}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                the response's content immediately. You will need to call\""}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                ``r.release_conn()`` on the response ``r`` to return the connection'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                back into the pool. If None, it takes the value of'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                ``response_kw.get('preload_content', True)``.\""}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param chunked:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                If True, urllib3 will send the body using chunked transfer'"}, "return_value": "74"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                encoding. Otherwise, urllib3 will send the body using the standard'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                content-length form. Defaults to False.'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param int body_pos:'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Position to seek to in file-like body in the event of a retry or'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                redirect. Typically this won't need to be set because urllib3 will\""}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                auto-populate the value when needed.'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param \\\\\\\\**response_kw:'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Additional parameters are passed to'"}, "return_value": "51"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :meth:`urllib3.response.HTTPResponse.from_httplib`'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        parsed_url = parse_url(url)'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        destination_scheme = parsed_url.scheme'"}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if headers is None:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            headers = self.headers'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if not isinstance(retries, Retry):'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if release_conn is None:'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            release_conn = response_kw.get(\"preload_content\", True)'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Check host'"}, "return_value": "20"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if assert_same_host and not self.is_same_host(url):'"}, "return_value": "59"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            raise HostChangedError(self, url, retries)'"}, "return_value": "54"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        # Ensure that the URL we're connecting to is properly encoded\""}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if url.startswith(\"/\"):'"}, "return_value": "31"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            url = six.ensure_str(_encode_target(url))'"}, "return_value": "53"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        else:'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            url = six.ensure_str(parsed_url.url)'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        conn = None'"}, "return_value": "19"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Track whether `conn` needs to be released before'"}, "return_value": "58"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # returning/raising/recursing. Update this variable if necessary, and'"}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # leave `release_conn` constant throughout the function. That way, if'"}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # the function recurses, the original value of `release_conn` will be'"}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # passed down into the recursive call, and its value will be respected.'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        #'"}, "return_value": "9"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # See issue #651 [1] for details.'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        #'"}, "return_value": "9"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # [1] <https://github.com/urllib3/urllib3/issues/651>'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        release_this_conn = release_conn'"}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        http_tunnel_required = connection_requires_http_tunnel('"}, "return_value": "63"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            self.proxy, self.proxy_config, destination_scheme'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        )'"}, "return_value": "9"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Merge the proxy headers. Only done when not using HTTP CONNECT. We'"}, "return_value": "76"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # have to copy the headers dict so we can safely change it without those'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        # changes being reflected in anyone else's copy.\""}, "return_value": "56"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if not http_tunnel_required:'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            headers = headers.copy()'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            headers.update(self.proxy_headers)'"}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Must keep the exception bound to a separate variable or else Python 3'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # complains about UnboundLocalError.'"}, "return_value": "44"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        err = None'"}, "return_value": "18"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Keep track of whether we cleanly exited the except block. This'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # ensures we do proper cleanup in finally.'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        clean_exit = False'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Rewind body position, if needed. Record current position'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # for future rewinds in the event of a redirect/retry.'"}, "return_value": "62"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        body_pos = set_file_position(body, body_pos)'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        try:'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Request a connection from the queue.'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            timeout_obj = self._get_timeout(timeout)'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            conn = self._get_conn(timeout=pool_timeout)'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            conn.timeout = timeout_obj.connect_timeout'"}, "return_value": "54"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            is_new_proxy_conn = self.proxy is not None and not getattr('"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                conn, \"sock\", None'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            )'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if is_new_proxy_conn and http_tunnel_required:'"}, "return_value": "58"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                self._prepare_proxy(conn)'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Make the request on the httplib connection object.'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>           httplib_response = self._make_request('"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                conn,'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                method,'"}, "return_value": "23"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                url,'"}, "return_value": "20"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                timeout=timeout_obj,'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                body=body,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                headers=headers,'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                chunked=chunked,'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            )'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/urllib3/connectionpool.py'"}, "return_value": "63"}, {"func_args": {"text": "':703: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0xffff9f54b340>'"}, "return_value": "82"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'conn = <docker.transport.unixconn.UnixHTTPConnection object at 0xffff92b05be0>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"method = 'GET'\""}, "return_value": "14"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"url = '/v1.21/images/json?filter=shipwright%2Fservice1&only_ids=1&all=0'\""}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'timeout = Timeout(connect=60, read=60, total=None), chunked = False'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"httplib_request_kw = {'body': None, 'headers': {'User-Agent': 'docker-sdk-python/2.7.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}}\""}, "return_value": "170"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'timeout_obj = Timeout(connect=60, read=60, total=None)'"}, "return_value": "54"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def _make_request('"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    ):'"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            Perform a request on a given urllib connection object taken from our'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            pool.'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param conn:'"}, "return_value": "24"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                a connection from one of our connection pools'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param timeout:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                Socket timeout in seconds for the request. This can be a'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                float or integer, which will set the same timeout value for'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                the socket connect and the socket read, or an instance of'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                :class:`urllib3.util.Timeout`, which gives you more fine-grained'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                control over your timeouts.'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self.num_requests += 1'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        timeout_obj = self._get_timeout(timeout)'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        timeout_obj.start_connect()'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        conn.timeout = timeout_obj.connect_timeout'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Trigger any extra validation we need to do.'"}, "return_value": "53"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        try:'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            self._validate_conn(conn)'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        except (SocketTimeout, BaseSSLError) as e:'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            raise'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # conn.request() calls http.client.*.request, not the method in'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # urllib3.request. It also calls makefile (recv) on the socket.'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        try:'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if chunked:'"}, "return_value": "23"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                conn.request_chunked(method, url, **httplib_request_kw)'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            else:'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>               conn.request(method, url, **httplib_request_kw)'"}, "return_value": "63"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/urllib3/connectionpool.py'"}, "return_value": "63"}, {"func_args": {"text": "':398: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnection object at 0xffff92b05be0>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"method = 'GET'\""}, "return_value": "14"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"url = '/v1.21/images/json?filter=shipwright%2Fservice1&only_ids=1&all=0'\""}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'body = None'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"headers = {'User-Agent': 'docker-sdk-python/2.7.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\""}, "return_value": "132"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def request(self, method, url, body=None, headers={}, *,'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                encode_chunked=False):'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"Send a complete request to the server.\"\"\"'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       self._send_request(method, url, body, headers, encode_chunked)'"}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'/usr/local/lib/python3.8/http/client.py'"}, "return_value": "39"}, {"func_args": {"text": "':1256: '"}, "return_value": "7"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnection object at 0xffff92b05be0>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"method = 'GET'\""}, "return_value": "14"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"url = '/v1.21/images/json?filter=shipwright%2Fservice1&only_ids=1&all=0'\""}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'body = None'"}, "return_value": "11"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"headers = {'User-Agent': 'docker-sdk-python/2.7.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\""}, "return_value": "132"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'encode_chunked = False'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def _send_request(self, method, url, body, headers, encode_chunked):'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # Honor explicitly requested Host: and Accept-Encoding: headers.'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        header_names = frozenset(k.lower() for k in headers)'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        skips = {}'"}, "return_value": "18"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        if 'host' in header_names:\""}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            skips['skip_host'] = 1\""}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        if 'accept-encoding' in header_names:\""}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            skips['skip_accept_encoding'] = 1\""}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self.putrequest(method, url, **skips)'"}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # chunked encoding will happen if HTTP/1.1 is used and either'"}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # the caller passes encode_chunked=True or the following'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # conditions hold:'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # 1. content-length has not been explicitly set'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # 2. the body is a file or iterable, but not a str or bytes-like'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        # 3. Transfer-Encoding has NOT been explicitly set by the caller'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        if 'content-length' not in header_names:\""}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # only chunk body if not explicitly set for backwards'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # compatibility, assuming the client code is already handling the'"}, "return_value": "77"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # chunking'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            if 'transfer-encoding' not in header_names:\""}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                # if content-length cannot be automatically determined, fall'"}, "return_value": "76"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                # back to chunked encoding'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                encode_chunked = False'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                content_length = self._get_content_length(body, method)'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                if content_length is None:'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    if body is not None:'"}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        if self.debuglevel > 0:'"}, "return_value": "47"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                            print('Unable to determine size of %r' % body)\""}, "return_value": "74"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        encode_chunked = True'"}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                        self.putheader('Transfer-Encoding', 'chunked')\""}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                else:'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                    self.putheader('Content-Length', str(content_length))\""}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        else:'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            encode_chunked = False'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        for hdr, value in headers.items():'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            self.putheader(hdr, value)'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if isinstance(body, str):'"}, "return_value": "33"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # RFC 2616 Section 3.7.1 says that text default has a'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # default charset of iso-8859-1.'"}, "return_value": "44"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            body = _encode(body, 'body')\""}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       self.endheaders(body, encode_chunked=encode_chunked)'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'/usr/local/lib/python3.8/http/client.py'"}, "return_value": "39"}, {"func_args": {"text": "':1302: '"}, "return_value": "7"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnection object at 0xffff92b05be0>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'message_body = None'"}, "return_value": "19"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def endheaders(self, message_body=None, *, encode_chunked=False):'"}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"Indicate that the last header line has been sent to the server.'"}, "return_value": "74"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            This method sends the request to the server.  The optional message_body'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            argument can be used to pass a message body associated with the'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            request.'"}, "return_value": "20"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if self.__state == _CS_REQ_STARTED:'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            self.__state = _CS_REQ_SENT'"}, "return_value": "39"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        else:'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            raise CannotSendHeader()'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       self._send_output(message_body, encode_chunked=encode_chunked)'"}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'/usr/local/lib/python3.8/http/client.py'"}, "return_value": "39"}, {"func_args": {"text": "':1251: '"}, "return_value": "7"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnection object at 0xffff92b05be0>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'message_body = None, encode_chunked = False'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def _send_output(self, message_body=None, encode_chunked=False):'"}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"Send the currently buffered request and clear the buffer.'"}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            Appends an extra \\\\\\\\r\\\\\\\\n to the buffer.'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            A message_body may be specified, to be appended to the request.'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self._buffer.extend((b\"\", b\"\"))'"}, "return_value": "39"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        msg = b\"\\\\r\\\\n\".join(self._buffer)'"}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        del self._buffer[:]'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       self.send(msg)'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'/usr/local/lib/python3.8/http/client.py'"}, "return_value": "39"}, {"func_args": {"text": "':1011: '"}, "return_value": "7"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnection object at 0xffff92b05be0>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"data = b'GET /v1.21/images/json?filter=shipwright%2Fservice1&only_ids=1&all=0 HTTP/1.1\\\\r\\\\nHost: localhost\\\\r\\\\nUser-Agent: docker-sdk-python/2.7.0\\\\r\\\\nAccept-Encoding: gzip, deflate\\\\r\\\\nAccept: */*\\\\r\\\\nConnection: keep-alive\\\\r\\\\n\\\\r\\\\n'\""}, "return_value": "228"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def send(self, data):'"}, "return_value": "25"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"Send `data\\' to the server.'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            ``data`` can be a string object, a bytes object, an array object, a'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            file-like object that supports a .read() method, or an iterable object.'"}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if self.sock is None:'"}, "return_value": "29"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if self.auto_open:'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>               self.connect()'"}, "return_value": "30"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'/usr/local/lib/python3.8/http/client.py'"}, "return_value": "39"}, {"func_args": {"text": "':951: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixHTTPConnection object at 0xffff92b05be0>'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def connect(self):'"}, "return_value": "22"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        sock.settimeout(self.timeout)'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>       sock.connect(self.unix_socket)'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"E       urllib3.exceptions.ProtocolError: ('Connection aborted.', FileNotFoundError(2, 'No such file or directory'))\""}, "return_value": "116"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/docker/transport/unixconn.py'"}, "return_value": "66"}, {"func_args": {"text": "':46: ProtocolError'"}, "return_value": "18"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'During handling of the above exception, another exception occurred:'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"tmpdir = local('/tmp/pytest-of-root/pytest-1/test_child_inherits_parents_bu0')\""}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'docker_client = <docker.api.client.APIClient object at 0xffff9f0f2940>'"}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def test_child_inherits_parents_build_tag(tmpdir, docker_client):'"}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        tmp = tmpdir.join('shipwright-sample')\""}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        path = str(tmp)'"}, "return_value": "23"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        source = pkg_resources.resource_filename('"}, "return_value": "49"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            __name__,'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            'examples/shipwright-sample',\""}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        )'"}, "return_value": "9"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        repo = create_repo(path, source)'"}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        old_tag = repo.head.ref.commit.hexsha[:12]'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        client_cfg = docker_utils.kwargs_from_env()'"}, "return_value": "51"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        cli = docker_client'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        try:'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            shipw_cli.run('"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                path=path,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                client_cfg=client_cfg,'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                arguments=get_defaults(),'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                environ={},'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            )'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            tmp.join('shared/base.txt').write('Hi mum')\""}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            commit_untracked(repo)'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            new_tag = repo.head.ref.commit.hexsha[:12]'"}, "return_value": "54"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Currently service1 has not had any changes, and so naivly would not'"}, "return_value": "81"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            # need to be built, however because it's parent, shared has changes\""}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            # it will need to be rebuilt with the parent's build tag.\""}, "return_value": "69"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Dockhand asks the question: What is the latest commit in this'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            # directory, and all of this image's parents?\""}, "return_value": "57"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            shipw_cli.run('"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                path=path,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                client_cfg=client_cfg,'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                arguments=get_defaults(),'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                environ={},'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            )'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            service1a, service1b, sharedA, sharedB, base = ('"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                cli.images(name='shipwright/service1') +\""}, "return_value": "56"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                cli.images(name='shipwright/shared') +\""}, "return_value": "54"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                cli.images(name='shipwright/base')\""}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            )'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            service1a, service1b = sorted('"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                (service1a, service1b),'"}, "return_value": "39"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                key=lambda x: len(x['RepoTags']),\""}, "return_value": "49"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                reverse=True,'"}, "return_value": "29"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            )'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            sharedA, sharedB = sorted('"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                (sharedA, sharedB),'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                key=lambda x: len(x['RepoTags']),\""}, "return_value": "49"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                reverse=True,'"}, "return_value": "29"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            )'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            assert set(service1a['RepoTags']) == {\""}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                'shipwright/service1:master',\""}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                'shipwright/service1:latest',\""}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                'shipwright/service1:' + new_tag,\""}, "return_value": "49"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            }'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            assert set(service1b['RepoTags']) == {\""}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                'shipwright/service1:' + old_tag,\""}, "return_value": "49"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            }'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            assert set(sharedA['RepoTags']) == {\""}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                'shipwright/shared:master',\""}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                'shipwright/shared:latest',\""}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                'shipwright/shared:' + new_tag,\""}, "return_value": "47"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            }'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            assert set(sharedB['RepoTags']) == {\""}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                'shipwright/shared:' + old_tag,\""}, "return_value": "47"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            }'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"            assert set(base['RepoTags']) == {\""}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                'shipwright/base:master',\""}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                'shipwright/base:latest',\""}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                'shipwright/base:' + old_tag,\""}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                'shipwright/base:' + new_tag,\""}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            }'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        finally:'"}, "return_value": "16"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            old_images = ('"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\">               cli.images(name='shipwright/service1', quiet=True) +\""}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                cli.images(name='shipwright/shared', quiet=True) +\""}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                cli.images(name='shipwright/base', quiet=True)\""}, "return_value": "62"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            )'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'tests/integration/test_docker_builds.py'"}, "return_value": "39"}, {"func_args": {"text": "':731: '"}, "return_value": "6"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/docker/api/image.py'"}, "return_value": "57"}, {"func_args": {"text": "':93: in images'"}, "return_value": "14"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    res = self._result(self._get(self._url(\"/images/json\"), params=params),'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/docker/utils/decorators.py'"}, "return_value": "64"}, {"func_args": {"text": "':46: in inner'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    return f(self, *args, **kwargs)'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/docker/api/client.py'"}, "return_value": "58"}, {"func_args": {"text": "':191: in _get'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    return self.get(url, **self._set_request_timeout(kwargs))'"}, "return_value": "61"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/requests/sessions.py'"}, "return_value": "58"}, {"func_args": {"text": "':542: in get'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"    return self.request('GET', url, **kwargs)\""}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/requests/sessions.py'"}, "return_value": "58"}, {"func_args": {"text": "':529: in request'"}, "return_value": "16"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    resp = self.send(prep, **send_kwargs)'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/requests/sessions.py'"}, "return_value": "58"}, {"func_args": {"text": "':645: in send'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    r = adapter.send(request, **kwargs)'"}, "return_value": "39"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ '"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'self = <docker.transport.unixconn.UnixAdapter object at 0xffff9f0f21f0>'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'request = <PreparedRequest [GET]>, stream = False'"}, "return_value": "49"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'proxies = OrderedDict()'"}, "return_value": "23"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):'"}, "return_value": "94"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        \"\"\"Sends PreparedRequest object. Returns Response object.'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param stream: (optional) Whether to stream the request content.'"}, "return_value": "76"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param timeout: (optional) How long to wait for the server to send'"}, "return_value": "78"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                data before giving up, as a float, or a :ref:`(connect timeout,'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                read timeout) <timeouts>` tuple.'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :type timeout: float or tuple or urllib3 Timeout object'"}, "return_value": "67"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param verify: (optional) Either a boolean, in which case it controls whether'"}, "return_value": "89"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                we verify the server's TLS certificate, or a string, in which case it\""}, "return_value": "85"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                must be a path to a CA bundle to use'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param cert: (optional) Any user-provided SSL certificate to be trusted.'"}, "return_value": "84"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :param proxies: (optional) The proxies dictionary to apply to the request.'"}, "return_value": "86"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            :rtype: requests.Response'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            \"\"\"'"}, "return_value": "15"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        try:'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            conn = self.get_connection(request.url, proxies)'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        except LocationValueError as e:'"}, "return_value": "39"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            raise InvalidURL(e, request=request)'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self.cert_verify(conn, request.url, verify, cert)'"}, "return_value": "57"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        url = self.request_url(request, proxies)'"}, "return_value": "48"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)'"}, "return_value": "108"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"        chunked = not (request.body is None or 'Content-Length' in request.headers)\""}, "return_value": "83"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        if isinstance(timeout, tuple):'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            try:'"}, "return_value": "16"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                connect, read = timeout'"}, "return_value": "39"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                timeout = TimeoutSauce(connect=connect, read=read)'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            except ValueError as e:'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                # this may raise a string formatting error.'"}, "return_value": "59"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                err = (\"Invalid timeout {}. Pass a (connect, read) \"'"}, "return_value": "68"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                       \"timeout tuple, or a single float to set \"'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                       \"both timeouts to the same value\".format(timeout))'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                raise ValueError(err)'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        elif isinstance(timeout, TimeoutSauce):'"}, "return_value": "47"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            pass'"}, "return_value": "16"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        else:'"}, "return_value": "13"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            timeout = TimeoutSauce(connect=timeout, read=timeout)'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        try:'"}, "return_value": "12"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            if not chunked:'"}, "return_value": "27"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                resp = conn.urlopen('"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    method=request.method,'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    url=url,'"}, "return_value": "28"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    body=request.body,'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    headers=request.headers,'"}, "return_value": "44"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    redirect=False,'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    assert_same_host=False,'"}, "return_value": "43"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    preload_content=False,'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    decode_content=False,'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    retries=self.max_retries,'"}, "return_value": "45"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    timeout=timeout'"}, "return_value": "35"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                )'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            # Send the request.'"}, "return_value": "31"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'            else:'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                if hasattr(conn, 'proxy_pool'):\""}, "return_value": "47"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    conn = conn.proxy_pool'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                try:'"}, "return_value": "20"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                    skip_host = 'Host' in request.headers\""}, "return_value": "57"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    low_conn.putrequest(request.method,'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                                        url,'"}, "return_value": "44"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                                        skip_accept_encoding=True,'"}, "return_value": "66"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                                        skip_host=skip_host)'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    for header, value in request.headers.items():'"}, "return_value": "65"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        low_conn.putheader(header, value)'"}, "return_value": "57"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    low_conn.endheaders()'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    for i in request.body:'"}, "return_value": "42"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                        low_conn.send(hex(len(i))[2:].encode('utf-8'))\""}, "return_value": "70"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                        low_conn.send(b'\\\\r\\\\n')\""}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        low_conn.send(i)'"}, "return_value": "40"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                        low_conn.send(b'\\\\r\\\\n')\""}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"                    low_conn.send(b'0\\\\r\\\\n\\\\r\\\\n')\""}, "return_value": "47"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    # Receive the response from the server'"}, "return_value": "58"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    try:'"}, "return_value": "24"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        # For Python 2.7, use buffering of HTTP responses'"}, "return_value": "73"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        r = low_conn.getresponse(buffering=True)'"}, "return_value": "64"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    except TypeError:'"}, "return_value": "37"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        # For compatibility with Python 3.3+'"}, "return_value": "60"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        r = low_conn.getresponse()'"}, "return_value": "50"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    resp = HTTPResponse.from_httplib('"}, "return_value": "53"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        r,'"}, "return_value": "26"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        pool=conn,'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        connection=low_conn,'"}, "return_value": "44"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        preload_content=False,'"}, "return_value": "46"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                        decode_content=False'"}, "return_value": "44"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    )'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                except:'"}, "return_value": "23"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    # If we hit any problems here, clean up the connection.'"}, "return_value": "75"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    # Then, reraise so that we can handle the actual exception.'"}, "return_value": "79"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    low_conn.close()'"}, "return_value": "36"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'                    raise'"}, "return_value": "25"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'    '"}, "return_value": "4"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'        except (ProtocolError, socket.error) as err:'"}, "return_value": "52"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'>           raise ConnectionError(err, request=request)'"}, "return_value": "55"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "\"E           requests.exceptions.ConnectionError: ('Connection aborted.', FileNotFoundError(2, 'No such file or directory'))\""}, "return_value": "123"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.tox/py38/lib/python3.8/site-packages/requests/adapters.py'"}, "return_value": "58"}, {"func_args": {"text": "':501: ConnectionError'"}, "return_value": "21"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'================ 12 failed, 41 passed, 6 error in 81.19 seconds ================'"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}], "text": "def get_line_width(text):\n    text = unicodedata.normalize('NFC', text)\n    return sum(char_width.get(unicodedata.east_asian_width(c), 1) for c in text)"}, "_getdimensions": {"line": 26, "args": [{"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}], "text": "def _getdimensions():\n    if py33:\n        import shutil\n        size = shutil.get_terminal_size()\n        return size.lines, size.columns\n    else:\n        import termios, fcntl, struct\n        call = fcntl.ioctl(1, termios.TIOCGWINSZ, \"\\000\" * 8)\n        height, width = struct.unpack(\"hhhh\", call)[:2]\n        return height, width"}, "get_terminal_width": {"line": 38, "args": [{"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}], "text": "def get_terminal_width():\n    width = 0\n    try:\n        _, width = _getdimensions()\n    except py.builtin._sysex:\n        raise\n    except:\n        # pass to fallback below\n        pass\n\n    if width == 0:\n        # FALLBACK:\n        # * some exception happened\n        # * or this is emacs terminal which reports (0,0)\n        width = int(os.environ.get('COLUMNS', 80))\n\n    # XXX the windows getdimensions may be bogus, let's sanify a bit\n    if width < 40:\n        width = 80\n    return width"}, "main": {"line": 38, "args": [{"func_args": {"args": "None", "plugins": "None"}, "return_value": "1"}], "text": "def main(args=None, plugins=None):\n    \"\"\" return exit code, after performing an in-process test run.\n\n    :arg args: list of command line arguments.\n\n    :arg plugins: list of plugin objects to be auto-registered during\n                  initialization.\n    \"\"\"\n    try:\n        try:\n            config = _prepareconfig(args, plugins)\n        except ConftestImportFailure as e:\n            tw = py.io.TerminalWriter(sys.stderr)\n            for line in traceback.format_exception(*e.excinfo):\n                tw.line(line.rstrip(), red=True)\n            tw.line(\"ERROR: could not load %s\\n\" % (e.path), red=True)\n            return 4\n        else:\n            try:\n                return config.hook.pytest_cmdline_main(config=config)\n            finally:\n                config._ensure_unconfigure()\n    except UsageError as e:\n        for msg in e.args:\n            sys.stderr.write(\"ERROR: %s\\n\" %(msg,))\n        return 4"}}