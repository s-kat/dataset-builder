{"_args_converter": {"line": 816, "args": [{"func_args": {"args": "['tests/']"}, "return_value": "('tests/',)"}], "text": "def _args_converter(args: Iterable[str]) -> Tuple[str, ...]:\n    return tuple(args)"}, "_get_plugin_specs_as_list": {"line": 715, "args": [{"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "None"}, "return_value": "[]"}], "text": "def _get_plugin_specs_as_list(\n    specs: Union[None, types.ModuleType, str, Sequence[str]]\n) -> List[str]:\n    \"\"\"Parse a plugins specification into a list of plugin names.\"\"\"\n    # None means empty.\n    if specs is None:\n        return []\n    # Workaround for #3899 - a submodule which happens to be called \"pytest_plugins\".\n    if isinstance(specs, types.ModuleType):\n        return []\n    # Comma-separated list.\n    if isinstance(specs, str):\n        return specs.split(\",\") if specs else []\n    # Direct specification.\n    if isinstance(specs, collections.abc.Sequence):\n        return list(specs)\n    raise UsageError(\n        \"Plugins may be specified as a sequence or a ','-separated string of plugin names. Got: %r\"\n        % specs\n    )"}, "_assertion_supported": {"line": 1511, "args": [{"func_args": {}, "return_value": "True"}], "text": "def _assertion_supported() -> bool:\n    try:\n        assert False\n    except AssertionError:\n        return True\n    else:\n        return False"}, "_strtobool": {"line": 1544, "args": [{"func_args": {"val": "'true'"}, "return_value": "True"}], "text": "def _strtobool(val: str) -> bool:\n    \"\"\"Convert a string representation of truth to True or False.\n\n    True values are 'y', 'yes', 't', 'true', 'on', and '1'; false values\n    are 'n', 'no', 'f', 'false', 'off', and '0'.  Raises ValueError if\n    'val' is anything else.\n\n    .. note:: Copied from distutils.util.\n    \"\"\"\n    val = val.lower()\n    if val in (\"y\", \"yes\", \"t\", \"true\", \"on\", \"1\"):\n        return True\n    elif val in (\"n\", \"no\", \"f\", \"false\", \"off\", \"0\"):\n        return False\n    else:\n        raise ValueError(f\"invalid truth value {val!r}\")"}, "get_terminal_width": {"line": 15, "args": [{"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}], "text": "def get_terminal_width() -> int:\n    width, _ = shutil.get_terminal_size(fallback=(80, 24))\n\n    # The Windows get_terminal_size may be bogus, let's sanify a bit.\n    if width < 40:\n        width = 80\n\n    return width"}, "is_option": {"line": 135, "args": [{"func_args": {"x": "'tests/'"}, "return_value": "False"}], "text": "def is_option(x: str) -> bool:\n        return x.startswith(\"-\")"}, "get_file_part_from_node_id": {"line": 138, "args": [{"func_args": {"x": "'tests/'"}, "return_value": "'tests/'"}], "text": "def get_file_part_from_node_id(x: str) -> str:\n        return x.split(\"::\")[0]"}, "iscommentline": {"line": 162, "args": [{"func_args": {"line": "'[pytest]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'DJANGO_SETTINGS_MODULE = test_project.settings\\n'"}, "return_value": "False"}, {"func_args": {"line": "'django_find_project = true\\n'"}, "return_value": "False"}, {"func_args": {"line": "'python_paths = tests/.temptest\\n'"}, "return_value": "False"}], "text": "def iscommentline(line):\n    c = line.lstrip()[:1]\n    return c in COMMENTCHARS"}, "_get_boolean_value": {"line": 240, "args": [{"func_args": {"x": "True", "name": "'django_find_project'", "default": "None"}, "return_value": "True"}, {"func_args": {"x": "None", "name": "'FAIL_INVALID_TEMPLATE_VARS'", "default": "None"}, "return_value": "False"}], "text": "def _get_boolean_value(\n    x: Union[None, bool, str],\n    name: str,\n    default: Optional[bool] = None,\n) -> bool:\n    if x is None:\n        return bool(default)\n    if isinstance(x, bool):\n        return x\n    possible_values = {\"true\": True, \"false\": False, \"1\": True, \"0\": False}\n    try:\n        return possible_values[x.lower()]\n    except KeyError:\n        raise ValueError(\n            \"{} is not a valid value for {}. \"\n            \"It must be one of {}.\".format(x, name, \", \".join(possible_values.keys()))\n        )"}, "_add_django_project_to_path": {"line": 185, "args": [{"func_args": {"args": "['tests/']"}, "return_value": "'pytest-django could not find a Django project (no manage.py file could be found). You must explicitly add your Django project to the Python path to have it picked up.'"}], "text": "def _add_django_project_to_path(args) -> str:\n    def is_django_project(path: pathlib.Path) -> bool:\n        try:\n            return path.is_dir() and (path / \"manage.py\").exists()\n        except OSError:\n            return False\n\n    def arg_to_path(arg: str) -> pathlib.Path:\n        # Test classes or functions can be appended to paths separated by ::\n        arg = arg.split(\"::\", 1)[0]\n        return pathlib.Path(arg)\n\n    def find_django_path(args) -> Optional[pathlib.Path]:\n        str_args = (str(arg) for arg in args)\n        path_args = [arg_to_path(x) for x in str_args if not x.startswith(\"-\")]\n\n        cwd = pathlib.Path.cwd()\n        if not path_args:\n            path_args.append(cwd)\n        elif cwd not in path_args:\n            path_args.append(cwd)\n\n        for arg in path_args:\n            if is_django_project(arg):\n                return arg\n            for parent in arg.parents:\n                if is_django_project(parent):\n                    return parent\n        return None\n\n    project_dir = find_django_path(args)\n    if project_dir:\n        sys.path.insert(0, str(project_dir.absolute()))\n        return PROJECT_FOUND % project_dir\n    return PROJECT_NOT_FOUND"}, "_get_option_with_source": {"line": 316, "args": [{"func_args": {"option": "None", "envname": "'DJANGO_SETTINGS_MODULE'"}, "return_value": "('test_project.settings', 'ini')"}, {"func_args": {"option": "None", "envname": "'DJANGO_CONFIGURATION'"}, "return_value": "(None, None)"}], "text": "def _get_option_with_source(\n        option: Optional[str],\n        envname: str,\n    ) -> Union[Tuple[str, str], Tuple[None, None]]:\n        if option:\n            return option, \"option\"\n        if envname in os.environ:\n            return os.environ[envname], \"env\"\n        cfgval = early_config.getini(envname)\n        if cfgval:\n            return cfgval, \"ini\"\n        return None, None"}}