{"_looks_like_package": {"line": 97, "args": [{"func_args": {"path": "'./example123'"}, "return_value": "True"}, {"func_args": {"path": "'./example123'"}, "return_value": "True"}, {"func_args": {"path": "'./tests'"}, "return_value": "False"}, {"func_args": {"path": "'./pkg123'"}, "return_value": "True"}]}, "<lambda>": {"line": 394, "args": [{"func_args": {"pair": "('src/tox/__main__.py                              1      1      0      0     0%   1', ('src/tox/__main__.py', 1, 1, 0, 0, '0', '1', 0.0))"}, "return_value": "(['src/tox/__main__.py                              ', 1, '      ', 1, '      ', 0, '      ', 0, '     ', 0, '%   ', 1, ''], ('src/tox/__main__.py', 1, 1, 0, 0, '0', '1', 0.0))"}, {"func_args": {"pair": "('src/tox/_pytestplugin.py                       360     28    116     14    89%   31, 33, 61, 93-100, 122, 133, 137-138, 175-176, 192, 203->exit, 225, 249->262, 293, 311, 345-348, 492->489, 496-499', ('src/tox/_pytestplugin.py', 360, 28, 116, 14, '89', '31, 33, 61, 93-100, 122, 133, 137-138, 175-176, 192, 203->exit, 225, 249->262, 293, 311, 345-348, 492->489, 496-499', 89.49579831932773))"}, "return_value": "(['src/tox/_pytestplugin.py                       ', 360, '     ', 28, '    ', 116, '     ', 14, '    ', 89, '%   ', 31, ', ', 33, ', ', 61, ', ', 93, '-', 100, ', ', 122, ', ', 133, ', ', 137, '-', 138, ', ', 175, '-', 176, ', ', 192, ', ', 203, '->exit, ', 225, ', ', 249, '->', 262, ', ', 293, ', ', 311, ', ', 345, '-', 348, ', ', 492, '->', 489, ', ', 496, '-', 499, ''], ('src/tox/_pytestplugin.py', 360, 28, 116, 14, '89', '31, 33, 61, 93-100, 122, 133, 137-138, 175-176, 192, 203->exit, 225, 249->262, 293, 311, 345-348, 492->489, 496-499', 89.49579831932773))"}, {"func_args": {"pair": "('src/tox/_quickstart.py                         120     19     59      7    83%   76, 83, 91, 99, 116-128, 132-134, 176->186, 178->177, 277-279', ('src/tox/_quickstart.py', 120, 19, 59, 7, '83', '76, 83, 91, 99, 116-128, 132-134, 176->186, 178->177, 277-279', 83.24022346368714))"}, "return_value": "(['src/tox/_quickstart.py                         ', 120, '     ', 19, '     ', 59, '      ', 7, '    ', 83, '%   ', 76, ', ', 83, ', ', 91, ', ', 99, ', ', 116, '-', 128, ', ', 132, '-', 134, ', ', 176, '->', 186, ', ', 178, '->', 177, ', ', 277, '-', 279, ''], ('src/tox/_quickstart.py', 120, 19, 59, 7, '83', '76, 83, 91, 99, 116-128, 132-134, 176->186, 178->177, 277-279', 83.24022346368714))"}, {"func_args": {"pair": "('src/tox/action.py                              184     59     68      5    65%   118-119, 133->144, 138, 152-178, 180-195, 200-210, 214-226, 263-265, 266->270, 290-291', ('src/tox/action.py', 184, 59, 68, 5, '65', '118-119, 133->144, 138, 152-178, 180-195, 200-210, 214-226, 263-265, 266->270, 290-291', 65.07936507936508))"}, "return_value": "(['src/tox/action.py                              ', 184, '     ', 59, '     ', 68, '      ', 5, '    ', 65, '%   ', 118, '-', 119, ', ', 133, '->', 144, ', ', 138, ', ', 152, '-', 178, ', ', 180, '-', 195, ', ', 200, '-', 210, ', ', 214, '-', 226, ', ', 263, '-', 265, ', ', 266, '->', 270, ', ', 290, '-', 291, ''], ('src/tox/action.py', 184, 59, 68, 5, '65', '118-119, 133->144, 138, 152-178, 180-195, 200-210, 214-226, 263-265, 266->270, 290-291', 65.07936507936508))"}, {"func_args": {"pair": "('src/tox/cli.py                                   7      7      0      0     0%   1-11', ('src/tox/cli.py', 7, 7, 0, 0, '0', '1-11', 0.0))"}, "return_value": "(['src/tox/cli.py                                   ', 7, '      ', 7, '      ', 0, '      ', 0, '     ', 0, '%   ', 1, '-', 11, ''], ('src/tox/cli.py', 7, 7, 0, 0, '0', '1-11', 0.0))"}, {"func_args": {"pair": "('src/tox/config/__init__.py                    1162     29    487     23    97%   49-50, 233->241, 355->exit, 405, 979, 1013, 1049-1052, 1181, 1239, 1356->1348, 1379-1380, 1393-1395, 1459, 1466, 1472->1474, 1619, 1717, 1722-1723, 1795, 1933, 1935, 1942, 1955->1968, 2000, 2014, 2042', ('src/tox/config/__init__.py', 1162, 29, 487, 23, '97', '49-50, 233->241, 355->exit, 405, 979, 1013, 1049-1052, 1181, 1239, 1356->1348, 1379-1380, 1393-1395, 1459, 1466, 1472->1474, 1619, 1717, 1722-1723, 1795, 1933, 1935, 1942, 1955->1968, 2000, 2014, 2042', 96.60400242571255))"}, "return_value": "(['src/tox/config/__init__.py                    ', 1162, '     ', 29, '    ', 487, '     ', 23, '    ', 97, '%   ', 49, '-', 50, ', ', 233, '->', 241, ', ', 355, '->exit, ', 405, ', ', 979, ', ', 1013, ', ', 1049, '-', 1052, ', ', 1181, ', ', 1239, ', ', 1356, '->', 1348, ', ', 1379, '-', 1380, ', ', 1393, '-', 1395, ', ', 1459, ', ', 1466, ', ', 1472, '->', 1474, ', ', 1619, ', ', 1717, ', ', 1722, '-', 1723, ', ', 1795, ', ', 1933, ', ', 1935, ', ', 1942, ', ', 1955, '->', 1968, ', ', 2000, ', ', 2014, ', ', 2042, ''], ('src/tox/config/__init__.py', 1162, 29, 487, 23, '97', '49-50, 233->241, 355->exit, 405, 979, 1013, 1049-1052, 1181, 1239, 1356->1348, 1379-1380, 1393-1395, 1459, 1466, 1472->1474, 1619, 1717, 1722-1723, 1795, 1933, 1935, 1942, 1955->1968, 2000, 2014, 2042', 96.60400242571255))"}, {"func_args": {"pair": "('src/tox/config/parallel.py                      36      6      6      0    86%   15-16, 22-23, 27-28', ('src/tox/config/parallel.py', 36, 6, 6, 0, '86', '15-16, 22-23, 27-28', 85.71428571428571))"}, "return_value": "(['src/tox/config/parallel.py                      ', 36, '      ', 6, '      ', 6, '      ', 0, '    ', 86, '%   ', 15, '-', 16, ', ', 22, '-', 23, ', ', 27, '-', 28, ''], ('src/tox/config/parallel.py', 36, 6, 6, 0, '86', '15-16, 22-23, 27-28', 85.71428571428571))"}, {"func_args": {"pair": "('src/tox/exception.py                            46      1     34      0    96%   99', ('src/tox/exception.py', 46, 1, 34, 0, '96', '99', 96.25))"}, "return_value": "(['src/tox/exception.py                            ', 46, '      ', 1, '     ', 34, '      ', 0, '    ', 96, '%   ', 99, ''], ('src/tox/exception.py', 46, 1, 34, 0, '96', '99', 96.25))"}, {"func_args": {"pair": "('src/tox/helper/build_isolated.py                21     21      9      0     0%   8-42', ('src/tox/helper/build_isolated.py', 21, 21, 9, 0, '0', '8-42', 0.0))"}, "return_value": "(['src/tox/helper/build_isolated.py                ', 21, '     ', 21, '      ', 9, '      ', 0, '     ', 0, '%   ', 8, '-', 42, ''], ('src/tox/helper/build_isolated.py', 21, 21, 9, 0, '0', '8-42', 0.0))"}, {"func_args": {"pair": "('src/tox/helper/build_requires.py                16     16      2      0     0%   1-24', ('src/tox/helper/build_requires.py', 16, 16, 2, 0, '0', '1-24', 0.0))"}, "return_value": "(['src/tox/helper/build_requires.py                ', 16, '     ', 16, '      ', 2, '      ', 0, '     ', 0, '%   ', 1, '-', 24, ''], ('src/tox/helper/build_requires.py', 16, 16, 2, 0, '0', '1-24', 0.0))"}, {"func_args": {"pair": "('src/tox/helper/get_site_package_dir.py          15     15      2      0     0%   1-22', ('src/tox/helper/get_site_package_dir.py', 15, 15, 2, 0, '0', '1-22', 0.0))"}, "return_value": "(['src/tox/helper/get_site_package_dir.py          ', 15, '     ', 15, '      ', 2, '      ', 0, '     ', 0, '%   ', 1, '-', 22, ''], ('src/tox/helper/get_site_package_dir.py', 15, 15, 2, 0, '0', '1-22', 0.0))"}, {"func_args": {"pair": "('src/tox/interpreters/__init__.py                98      6     22      4    92%   63, 68-69, 80, 82, 138', ('src/tox/interpreters/__init__.py', 98, 6, 22, 4, '92', '63, 68-69, 80, 82, 138', 91.66666666666667))"}, "return_value": "(['src/tox/interpreters/__init__.py                ', 98, '      ', 6, '     ', 22, '      ', 4, '    ', 92, '%   ', 63, ', ', 68, '-', 69, ', ', 80, ', ', 82, ', ', 138, ''], ('src/tox/interpreters/__init__.py', 98, 6, 22, 4, '92', '63, 68-69, 80, 82, 138', 91.66666666666667))"}, {"func_args": {"pair": "('src/tox/interpreters/common.py                  17      3     10      1    78%   17-19', ('src/tox/interpreters/common.py', 17, 3, 10, 1, '78', '17-19', 77.77777777777777))"}, "return_value": "(['src/tox/interpreters/common.py                  ', 17, '      ', 3, '     ', 10, '      ', 1, '    ', 78, '%   ', 17, '-', 19, ''], ('src/tox/interpreters/common.py', 17, 3, 10, 1, '78', '17-19', 77.77777777777777))"}, {"func_args": {"pair": "('src/tox/interpreters/py_spec.py                 51      6     18      3    87%   22, 28-29, 33, 41, 43', ('src/tox/interpreters/py_spec.py', 51, 6, 18, 3, '87', '22, 28-29, 33, 41, 43', 86.95652173913044))"}, "return_value": "(['src/tox/interpreters/py_spec.py                 ', 51, '      ', 6, '     ', 18, '      ', 3, '    ', 87, '%   ', 22, ', ', 28, '-', 29, ', ', 33, ', ', 41, ', ', 43, ''], ('src/tox/interpreters/py_spec.py', 51, 6, 18, 3, '87', '22, 28-29, 33, 41, 43', 86.95652173913044))"}, {"func_args": {"pair": "('src/tox/interpreters/via_path.py                51      5     18      2    90%   49, 72-73, 78-79', ('src/tox/interpreters/via_path.py', 51, 5, 18, 2, '90', '49, 72-73, 78-79', 89.85507246376811))"}, "return_value": "(['src/tox/interpreters/via_path.py                ', 51, '      ', 5, '     ', 18, '      ', 2, '    ', 90, '%   ', 49, ', ', 72, '-', 73, ', ', 78, '-', 79, ''], ('src/tox/interpreters/via_path.py', 51, 5, 18, 2, '90', '49, 72-73, 78-79', 89.85507246376811))"}, {"func_args": {"pair": "('src/tox/interpreters/windows/__init__.py        33     33     18      0     0%   1-49', ('src/tox/interpreters/windows/__init__.py', 33, 33, 18, 0, '0', '1-49', 0.0))"}, "return_value": "(['src/tox/interpreters/windows/__init__.py        ', 33, '     ', 33, '     ', 18, '      ', 0, '     ', 0, '%   ', 1, '-', 49, ''], ('src/tox/interpreters/windows/__init__.py', 33, 33, 18, 0, '0', '1-49', 0.0))"}, {"func_args": {"pair": "('src/tox/interpreters/windows/pep514.py         111    111     42      0     0%   2-161', ('src/tox/interpreters/windows/pep514.py', 111, 111, 42, 0, '0', '2-161', 0.0))"}, "return_value": "(['src/tox/interpreters/windows/pep', 514, '.py         ', 111, '    ', 111, '     ', 42, '      ', 0, '     ', 0, '%   ', 2, '-', 161, ''], ('src/tox/interpreters/windows/pep514.py', 111, 111, 42, 0, '0', '2-161', 0.0))"}, {"func_args": {"pair": "('src/tox/package/__init__.py                     55      4     16      4    89%   15->17, 24-25, 45->53, 49-50, 70->67', ('src/tox/package/__init__.py', 55, 4, 16, 4, '89', '15->17, 24-25, 45->53, 49-50, 70->67', 88.73239436619718))"}, "return_value": "(['src/tox/package/__init__.py                     ', 55, '      ', 4, '     ', 16, '      ', 4, '    ', 89, '%   ', 15, '->', 17, ', ', 24, '-', 25, ', ', 45, '->', 53, ', ', 49, '-', 50, ', ', 70, '->', 67, ''], ('src/tox/package/__init__.py', 55, 4, 16, 4, '89', '15->17, 24-25, 45->53, 49-50, 70->67', 88.73239436619718))"}, {"func_args": {"pair": "('src/tox/package/builder/isolated.py             76     14     40      0    79%   39-51, 109-132', ('src/tox/package/builder/isolated.py', 76, 14, 40, 0, '79', '39-51, 109-132', 79.3103448275862))"}, "return_value": "(['src/tox/package/builder/isolated.py             ', 76, '     ', 14, '     ', 40, '      ', 0, '    ', 79, '%   ', 39, '-', 51, ', ', 109, '-', 132, ''], ('src/tox/package/builder/isolated.py', 76, 14, 40, 0, '79', '39-51, 109-132', 79.3103448275862))"}, {"func_args": {"pair": "('src/tox/package/local.py                        49      2     18      2    94%   44, 58', ('src/tox/package/local.py', 49, 2, 18, 2, '94', '44, 58', 94.02985074626865))"}, "return_value": "(['src/tox/package/local.py                        ', 49, '      ', 2, '     ', 18, '      ', 2, '    ', 94, '%   ', 44, ', ', 58, ''], ('src/tox/package/local.py', 49, 2, 18, 2, '94', '44, 58', 94.02985074626865))"}, {"func_args": {"pair": "('src/tox/package/view.py                         27      3     10      2    86%   32->38, 36-37, 39', ('src/tox/package/view.py', 27, 3, 10, 2, '86', '32->38, 36-37, 39', 86.48648648648648))"}, "return_value": "(['src/tox/package/view.py                         ', 27, '      ', 3, '     ', 10, '      ', 2, '    ', 86, '%   ', 32, '->', 38, ', ', 36, '-', 37, ', ', 39, ''], ('src/tox/package/view.py', 27, 3, 10, 2, '86', '32->38, 36-37, 39', 86.48648648648648))"}, {"func_args": {"pair": "('src/tox/reporter.py                            114      9     22      4    89%   29, 31, 48->50, 82, 87-91, 112', ('src/tox/reporter.py', 114, 9, 22, 4, '89', '29, 31, 48->50, 82, 87-91, 112', 88.97058823529412))"}, "return_value": "(['src/tox/reporter.py                            ', 114, '      ', 9, '     ', 22, '      ', 4, '    ', 89, '%   ', 29, ', ', 31, ', ', 48, '->', 50, ', ', 82, ', ', 87, '-', 91, ', ', 112, ''], ('src/tox/reporter.py', 114, 9, 22, 4, '89', '29, 31, 48->50, 82, 87-91, 112', 88.97058823529412))"}, {"func_args": {"pair": "('src/tox/session/__init__.py                    224     15     84     11    91%   74, 76, 150, 231->exit, 233->exit, 235-236, 242->exit, 245-246, 250->252, 259, 264-270, 272, 281->253, 289-292', ('src/tox/session/__init__.py', 224, 15, 84, 11, '91', '74, 76, 150, 231->exit, 233->exit, 235-236, 242->exit, 245-246, 250->252, 259, 264-270, 272, 281->253, 289-292', 90.9090909090909))"}, "return_value": "(['src/tox/session/__init__.py                    ', 224, '     ', 15, '     ', 84, '     ', 11, '    ', 91, '%   ', 74, ', ', 76, ', ', 150, ', ', 231, '->exit, ', 233, '->exit, ', 235, '-', 236, ', ', 242, '->exit, ', 245, '-', 246, ', ', 250, '->', 252, ', ', 259, ', ', 264, '-', 270, ', ', 272, ', ', 281, '->', 253, ', ', 289, '-', 292, ''], ('src/tox/session/__init__.py', 224, 15, 84, 11, '91', '74, 76, 150, 231->exit, 233->exit, 235-236, 242->exit, 245-246, 250->252, 259, 264-270, 272, 281->253, 289-292', 90.9090909090909))"}, {"func_args": {"pair": "('src/tox/session/commands/provision.py           18      2      2      1    85%   19-20, 24->exit', ('src/tox/session/commands/provision.py', 18, 2, 2, 1, '85', '19-20, 24->exit', 85.0))"}, "return_value": "(['src/tox/session/commands/provision.py           ', 18, '      ', 2, '      ', 2, '      ', 1, '    ', 85, '%   ', 19, '-', 20, ', ', 24, '->exit'], ('src/tox/session/commands/provision.py', 18, 2, 2, 1, '85', '19-20, 24->exit', 85.0))"}, {"func_args": {"pair": "('src/tox/session/commands/run/parallel.py       101     27     34      5    70%   46-47, 66-67, 75, 77, 92, 106-107, 112-125, 132-143', ('src/tox/session/commands/run/parallel.py', 101, 27, 34, 5, '70', '46-47, 66-67, 75, 77, 92, 106-107, 112-125, 132-143', 70.37037037037037))"}, "return_value": "(['src/tox/session/commands/run/parallel.py       ', 101, '     ', 27, '     ', 34, '      ', 5, '    ', 70, '%   ', 46, '-', 47, ', ', 66, '-', 67, ', ', 75, ', ', 77, ', ', 92, ', ', 106, '-', 107, ', ', 112, '-', 125, ', ', 132, '-', 143, ''], ('src/tox/session/commands/run/parallel.py', 101, 27, 34, 5, '70', '46-47, 66-67, 75, 77, 92, 106-107, 112-125, 132-143', 70.37037037037037))"}, {"func_args": {"pair": "('src/tox/session/commands/run/sequential.py      51      9     20      3    83%   19->21, 30-32, 48-50, 63-64, 72, 74->76', ('src/tox/session/commands/run/sequential.py', 51, 9, 20, 3, '83', '19->21, 30-32, 48-50, 63-64, 72, 74->76', 83.09859154929578))"}, "return_value": "(['src/tox/session/commands/run/sequential.py      ', 51, '      ', 9, '     ', 20, '      ', 3, '    ', 83, '%   ', 19, '->', 21, ', ', 30, '-', 32, ', ', 48, '-', 50, ', ', 63, '-', 64, ', ', 72, ', ', 74, '->', 76, ''], ('src/tox/session/commands/run/sequential.py', 51, 9, 20, 3, '83', '19->21, 30-32, 48-50, 63-64, 72, 74->76', 83.09859154929578))"}, {"func_args": {"pair": "('src/tox/util/graph.py                           48      0     40      1    99%   65->exit', ('src/tox/util/graph.py', 48, 0, 40, 1, '99', '65->exit', 98.86363636363636))"}, "return_value": "(['src/tox/util/graph.py                           ', 48, '      ', 0, '     ', 40, '      ', 1, '    ', 99, '%   ', 65, '->exit'], ('src/tox/util/graph.py', 48, 0, 40, 1, '99', '65->exit', 98.86363636363636))"}, {"func_args": {"pair": "('src/tox/util/lock.py                            30      2      2      0    94%   37-38', ('src/tox/util/lock.py', 30, 2, 2, 0, '94', '37-38', 93.75))"}, "return_value": "(['src/tox/util/lock.py                            ', 30, '      ', 2, '      ', 2, '      ', 0, '    ', 94, '%   ', 37, '-', 38, ''], ('src/tox/util/lock.py', 30, 2, 2, 0, '94', '37-38', 93.75))"}, {"func_args": {"pair": "('src/tox/util/spinner.py                        126     13     46      7    87%   16-19, 53->exit, 91->95, 134-138, 139->exit, 145-149, 150->exit', ('src/tox/util/spinner.py', 126, 13, 46, 7, '87', '16-19, 53->exit, 91->95, 134-138, 139->exit, 145-149, 150->exit', 87.20930232558139))"}, "return_value": "(['src/tox/util/spinner.py                        ', 126, '     ', 13, '     ', 46, '      ', 7, '    ', 87, '%   ', 16, '-', 19, ', ', 53, '->exit, ', 91, '->', 95, ', ', 134, '-', 138, ', ', 139, '->exit, ', 145, '-', 149, ', ', 150, '->exit'], ('src/tox/util/spinner.py', 126, 13, 46, 7, '87', '16-19, 53->exit, 91->95, 134-138, 139->exit, 145-149, 150->exit', 87.20930232558139))"}, {"func_args": {"pair": "('src/tox/util/stdlib.py                          35     17     12      3    45%   9, 19, 30-50', ('src/tox/util/stdlib.py', 35, 17, 12, 3, '45', '9, 19, 30-50', 44.680851063829785))"}, "return_value": "(['src/tox/util/stdlib.py                          ', 35, '     ', 17, '     ', 12, '      ', 3, '    ', 45, '%   ', 9, ', ', 19, ', ', 30, '-', 50, ''], ('src/tox/util/stdlib.py', 35, 17, 12, 3, '45', '9, 19, 30-50', 44.680851063829785))"}, {"func_args": {"pair": "('src/tox/venv.py                                484     39    205     23    89%   107, 173, 187->190, 193, 233-234, 245->244, 246->245, 276, 279-280, 322->exit, 330, 361, 364-376, 387-388, 470, 543-547, 569->532, 572, 600, 615-624, 626-627, 635-637, 646, 656, 712, 725->737, 764-769, 772-776', ('src/tox/venv.py', 484, 39, 205, 23, '89', '107, 173, 187->190, 193, 233-234, 245->244, 246->245, 276, 279-280, 322->exit, 330, 361, 364-376, 387-388, 470, 543-547, 569->532, 572, 600, 615-624, 626-627, 635-637, 646, 656, 712, 725->737, 764-769, 772-776', 88.67924528301887))"}, "return_value": "(['src/tox/venv.py                                ', 484, '     ', 39, '    ', 205, '     ', 23, '    ', 89, '%   ', 107, ', ', 173, ', ', 187, '->', 190, ', ', 193, ', ', 233, '-', 234, ', ', 245, '->', 244, ', ', 246, '->', 245, ', ', 276, ', ', 279, '-', 280, ', ', 322, '->exit, ', 330, ', ', 361, ', ', 364, '-', 376, ', ', 387, '-', 388, ', ', 470, ', ', 543, '-', 547, ', ', 569, '->', 532, ', ', 572, ', ', 600, ', ', 615, '-', 624, ', ', 626, '-', 627, ', ', 635, '-', 637, ', ', 646, ', ', 656, ', ', 712, ', ', 725, '->', 737, ', ', 764, '-', 769, ', ', 772, '-', 776, ''], ('src/tox/venv.py', 484, 39, 205, 23, '89', '107, 173, 187->190, 193, 233-234, 245->244, 246->245, 276, 279-280, 322->exit, 330, 361, 364-376, 387-388, 470, 543-547, 569->532, 572, 600, 615-624, 626-627, 635-637, 646, 656, 712, 725->737, 764-769, 772-776', 88.67924528301887))"}]}, "_validate_version": {"line": 496, "args": [{"func_args": {"version": "None"}, "return_value": "None"}, {"func_args": {"version": "'0.5'"}, "return_value": "'0.5'"}, {"func_args": {"version": "None"}, "return_value": "None"}, {"func_args": {"version": "'0.6'"}, "return_value": "'0.6'"}, {"func_args": {"version": "None"}, "return_value": "None"}, {"func_args": {"version": "'0.7'"}, "return_value": "'0.7'"}]}, "_normalize_version": {"line": 484, "args": [{"func_args": {"version": "None"}, "return_value": "None"}, {"func_args": {"version": "'0.5'"}, "return_value": "'0.5'"}, {"func_args": {"version": "None"}, "return_value": "None"}, {"func_args": {"version": "'0.6'"}, "return_value": "'0.6'"}, {"func_args": {"version": "None"}, "return_value": "None"}, {"func_args": {"version": "'0.7'"}, "return_value": "'0.7'"}]}, "single_line": {"line": 149, "args": [{"func_args": {"val": "'example123 project'"}, "return_value": "'example123 project'"}, {"func_args": {"val": "'example123 project'"}, "return_value": "'example123 project'"}, {"func_args": {"val": "'example123 project'"}, "return_value": "'example123 project'"}, {"func_args": {"val": "'example123 project'"}, "return_value": "'example123 project'"}, {"func_args": {"val": "'pkg123 project'"}, "return_value": "'pkg123 project'"}, {"func_args": {"val": "'pkg123 project'"}, "return_value": "'pkg123 project'"}], "text": "def single_line(val):\n    \"\"\"\n    Quick and dirty validation for Summary pypa/setuptools#1390.\n    \"\"\"\n    if '\\n' in val:\n        # TODO: Replace with `raise ValueError(\"newlines not allowed\")`\n        # after reviewing #2893.\n        warnings.warn(\"newlines not allowed and will break in the future\")\n        val = val.strip().split('\\n')[0]\n    return val"}, "_nonblank": {"line": 2398, "args": [{"func_args": {"str": "'[distutils.commands]'"}, "return_value": "True"}, {"func_args": {"str": "'[distutils.commands]'"}, "return_value": "True"}, {"func_args": {"str": "'alias = setuptools.command.alias:alias'"}, "return_value": "True"}, {"func_args": {"str": "'alias = setuptools.command.alias:alias'"}, "return_value": "True"}, {"func_args": {"str": "'bdist_egg = setuptools.command.bdist_egg:bdist_egg'"}, "return_value": "True"}, {"func_args": {"str": "'bdist_egg = setuptools.command.bdist_egg:bdist_egg'"}, "return_value": "True"}, {"func_args": {"str": "'bdist_rpm = setuptools.command.bdist_rpm:bdist_rpm'"}, "return_value": "True"}, {"func_args": {"str": "'bdist_rpm = setuptools.command.bdist_rpm:bdist_rpm'"}, "return_value": "True"}, {"func_args": {"str": "'build_clib = setuptools.command.build_clib:build_clib'"}, "return_value": "True"}, {"func_args": {"str": "'build_clib = setuptools.command.build_clib:build_clib'"}, "return_value": "True"}, {"func_args": {"str": "'build_ext = setuptools.command.build_ext:build_ext'"}, "return_value": "True"}, {"func_args": {"str": "'build_ext = setuptools.command.build_ext:build_ext'"}, "return_value": "True"}, {"func_args": {"str": "'build_py = setuptools.command.build_py:build_py'"}, "return_value": "True"}, {"func_args": {"str": "'build_py = setuptools.command.build_py:build_py'"}, "return_value": "True"}, {"func_args": {"str": "'develop = setuptools.command.develop:develop'"}, "return_value": "True"}, {"func_args": {"str": "'develop = setuptools.command.develop:develop'"}, "return_value": "True"}, {"func_args": {"str": "'dist_info = setuptools.command.dist_info:dist_info'"}, "return_value": "True"}, {"func_args": {"str": "'dist_info = setuptools.command.dist_info:dist_info'"}, "return_value": "True"}, {"func_args": {"str": "'easy_install = setuptools.command.easy_install:easy_install'"}, "return_value": "True"}, {"func_args": {"str": "'easy_install = setuptools.command.easy_install:easy_install'"}, "return_value": "True"}, {"func_args": {"str": "'egg_info = setuptools.command.egg_info:egg_info'"}, "return_value": "True"}, {"func_args": {"str": "'egg_info = setuptools.command.egg_info:egg_info'"}, "return_value": "True"}, {"func_args": {"str": "'install = setuptools.command.install:install'"}, "return_value": "True"}, {"func_args": {"str": "'install = setuptools.command.install:install'"}, "return_value": "True"}, {"func_args": {"str": "'install_egg_info = setuptools.command.install_egg_info:install_egg_info'"}, "return_value": "True"}, {"func_args": {"str": "'install_egg_info = setuptools.command.install_egg_info:install_egg_info'"}, "return_value": "True"}, {"func_args": {"str": "'install_lib = setuptools.command.install_lib:install_lib'"}, "return_value": "True"}, {"func_args": {"str": "'install_lib = setuptools.command.install_lib:install_lib'"}, "return_value": "True"}, {"func_args": {"str": "'install_scripts = setuptools.command.install_scripts:install_scripts'"}, "return_value": "True"}, {"func_args": {"str": "'install_scripts = setuptools.command.install_scripts:install_scripts'"}, "return_value": "True"}, {"func_args": {"str": "'rotate = setuptools.command.rotate:rotate'"}, "return_value": "True"}, {"func_args": {"str": "'rotate = setuptools.command.rotate:rotate'"}, "return_value": "True"}, {"func_args": {"str": "'saveopts = setuptools.command.saveopts:saveopts'"}, "return_value": "True"}, {"func_args": {"str": "'saveopts = setuptools.command.saveopts:saveopts'"}, "return_value": "True"}, {"func_args": {"str": "'sdist = setuptools.command.sdist:sdist'"}, "return_value": "True"}, {"func_args": {"str": "'sdist = setuptools.command.sdist:sdist'"}, "return_value": "True"}, {"func_args": {"str": "'setopt = setuptools.command.setopt:setopt'"}, "return_value": "True"}, {"func_args": {"str": "'setopt = setuptools.command.setopt:setopt'"}, "return_value": "True"}, {"func_args": {"str": "'test = setuptools.command.test:test'"}, "return_value": "True"}, {"func_args": {"str": "'test = setuptools.command.test:test'"}, "return_value": "True"}, {"func_args": {"str": "'upload_docs = setuptools.command.upload_docs:upload_docs'"}, "return_value": "True"}, {"func_args": {"str": "'upload_docs = setuptools.command.upload_docs:upload_docs'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'[distutils.setup_keywords]'"}, "return_value": "True"}, {"func_args": {"str": "'[distutils.setup_keywords]'"}, "return_value": "True"}, {"func_args": {"str": "'alias = setuptools.command.alias:alias'"}, "return_value": "True"}, {"func_args": {"str": "'bdist_egg = setuptools.command.bdist_egg:bdist_egg'"}, "return_value": "True"}, {"func_args": {"str": "'bdist_rpm = setuptools.command.bdist_rpm:bdist_rpm'"}, "return_value": "True"}, {"func_args": {"str": "'build_clib = setuptools.command.build_clib:build_clib'"}, "return_value": "True"}, {"func_args": {"str": "'build_ext = setuptools.command.build_ext:build_ext'"}, "return_value": "True"}, {"func_args": {"str": "'build_py = setuptools.command.build_py:build_py'"}, "return_value": "True"}, {"func_args": {"str": "'develop = setuptools.command.develop:develop'"}, "return_value": "True"}, {"func_args": {"str": "'dist_info = setuptools.command.dist_info:dist_info'"}, "return_value": "True"}, {"func_args": {"str": "'easy_install = setuptools.command.easy_install:easy_install'"}, "return_value": "True"}, {"func_args": {"str": "'egg_info = setuptools.command.egg_info:egg_info'"}, "return_value": "True"}, {"func_args": {"str": "'install = setuptools.command.install:install'"}, "return_value": "True"}, {"func_args": {"str": "'install_egg_info = setuptools.command.install_egg_info:install_egg_info'"}, "return_value": "True"}, {"func_args": {"str": "'install_lib = setuptools.command.install_lib:install_lib'"}, "return_value": "True"}, {"func_args": {"str": "'install_scripts = setuptools.command.install_scripts:install_scripts'"}, "return_value": "True"}, {"func_args": {"str": "'rotate = setuptools.command.rotate:rotate'"}, "return_value": "True"}, {"func_args": {"str": "'saveopts = setuptools.command.saveopts:saveopts'"}, "return_value": "True"}, {"func_args": {"str": "'sdist = setuptools.command.sdist:sdist'"}, "return_value": "True"}, {"func_args": {"str": "'setopt = setuptools.command.setopt:setopt'"}, "return_value": "True"}, {"func_args": {"str": "'test = setuptools.command.test:test'"}, "return_value": "True"}, {"func_args": {"str": "'upload_docs = setuptools.command.upload_docs:upload_docs'"}, "return_value": "True"}, {"func_args": {"str": "'dependency_links = setuptools.dist:assert_string_list'"}, "return_value": "True"}, {"func_args": {"str": "'dependency_links = setuptools.dist:assert_string_list'"}, "return_value": "True"}, {"func_args": {"str": "'eager_resources = setuptools.dist:assert_string_list'"}, "return_value": "True"}, {"func_args": {"str": "'eager_resources = setuptools.dist:assert_string_list'"}, "return_value": "True"}, {"func_args": {"str": "'entry_points = setuptools.dist:check_entry_points'"}, "return_value": "True"}, {"func_args": {"str": "'entry_points = setuptools.dist:check_entry_points'"}, "return_value": "True"}, {"func_args": {"str": "'exclude_package_data = setuptools.dist:check_package_data'"}, "return_value": "True"}, {"func_args": {"str": "'exclude_package_data = setuptools.dist:check_package_data'"}, "return_value": "True"}, {"func_args": {"str": "'extras_require = setuptools.dist:check_extras'"}, "return_value": "True"}, {"func_args": {"str": "'extras_require = setuptools.dist:check_extras'"}, "return_value": "True"}, {"func_args": {"str": "'include_package_data = setuptools.dist:assert_bool'"}, "return_value": "True"}, {"func_args": {"str": "'include_package_data = setuptools.dist:assert_bool'"}, "return_value": "True"}, {"func_args": {"str": "'install_requires = setuptools.dist:check_requirements'"}, "return_value": "True"}, {"func_args": {"str": "'install_requires = setuptools.dist:check_requirements'"}, "return_value": "True"}, {"func_args": {"str": "'namespace_packages = setuptools.dist:check_nsp'"}, "return_value": "True"}, {"func_args": {"str": "'namespace_packages = setuptools.dist:check_nsp'"}, "return_value": "True"}, {"func_args": {"str": "'package_data = setuptools.dist:check_package_data'"}, "return_value": "True"}, {"func_args": {"str": "'package_data = setuptools.dist:check_package_data'"}, "return_value": "True"}, {"func_args": {"str": "'packages = setuptools.dist:check_packages'"}, "return_value": "True"}, {"func_args": {"str": "'packages = setuptools.dist:check_packages'"}, "return_value": "True"}, {"func_args": {"str": "'python_requires = setuptools.dist:check_specifier'"}, "return_value": "True"}, {"func_args": {"str": "'python_requires = setuptools.dist:check_specifier'"}, "return_value": "True"}, {"func_args": {"str": "'setup_requires = setuptools.dist:check_requirements'"}, "return_value": "True"}, {"func_args": {"str": "'setup_requires = setuptools.dist:check_requirements'"}, "return_value": "True"}, {"func_args": {"str": "'test_loader = setuptools.dist:check_importable'"}, "return_value": "True"}, {"func_args": {"str": "'test_loader = setuptools.dist:check_importable'"}, "return_value": "True"}, {"func_args": {"str": "'test_runner = setuptools.dist:check_importable'"}, "return_value": "True"}, {"func_args": {"str": "'test_runner = setuptools.dist:check_importable'"}, "return_value": "True"}, {"func_args": {"str": "'test_suite = setuptools.dist:check_test_suite'"}, "return_value": "True"}, {"func_args": {"str": "'test_suite = setuptools.dist:check_test_suite'"}, "return_value": "True"}, {"func_args": {"str": "'tests_require = setuptools.dist:check_requirements'"}, "return_value": "True"}, {"func_args": {"str": "'tests_require = setuptools.dist:check_requirements'"}, "return_value": "True"}, {"func_args": {"str": "'use_2to3 = setuptools.dist:invalid_unless_false'"}, "return_value": "True"}, {"func_args": {"str": "'use_2to3 = setuptools.dist:invalid_unless_false'"}, "return_value": "True"}, {"func_args": {"str": "'zip_safe = setuptools.dist:assert_bool'"}, "return_value": "True"}, {"func_args": {"str": "'zip_safe = setuptools.dist:assert_bool'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'[egg_info.writers]'"}, "return_value": "True"}, {"func_args": {"str": "'[egg_info.writers]'"}, "return_value": "True"}, {"func_args": {"str": "'dependency_links = setuptools.dist:assert_string_list'"}, "return_value": "True"}, {"func_args": {"str": "'eager_resources = setuptools.dist:assert_string_list'"}, "return_value": "True"}, {"func_args": {"str": "'entry_points = setuptools.dist:check_entry_points'"}, "return_value": "True"}, {"func_args": {"str": "'exclude_package_data = setuptools.dist:check_package_data'"}, "return_value": "True"}, {"func_args": {"str": "'extras_require = setuptools.dist:check_extras'"}, "return_value": "True"}, {"func_args": {"str": "'include_package_data = setuptools.dist:assert_bool'"}, "return_value": "True"}, {"func_args": {"str": "'install_requires = setuptools.dist:check_requirements'"}, "return_value": "True"}, {"func_args": {"str": "'namespace_packages = setuptools.dist:check_nsp'"}, "return_value": "True"}, {"func_args": {"str": "'package_data = setuptools.dist:check_package_data'"}, "return_value": "True"}, {"func_args": {"str": "'packages = setuptools.dist:check_packages'"}, "return_value": "True"}, {"func_args": {"str": "'python_requires = setuptools.dist:check_specifier'"}, "return_value": "True"}, {"func_args": {"str": "'setup_requires = setuptools.dist:check_requirements'"}, "return_value": "True"}, {"func_args": {"str": "'test_loader = setuptools.dist:check_importable'"}, "return_value": "True"}, {"func_args": {"str": "'test_runner = setuptools.dist:check_importable'"}, "return_value": "True"}, {"func_args": {"str": "'test_suite = setuptools.dist:check_test_suite'"}, "return_value": "True"}, {"func_args": {"str": "'tests_require = setuptools.dist:check_requirements'"}, "return_value": "True"}, {"func_args": {"str": "'use_2to3 = setuptools.dist:invalid_unless_false'"}, "return_value": "True"}, {"func_args": {"str": "'zip_safe = setuptools.dist:assert_bool'"}, "return_value": "True"}, {"func_args": {"str": "'PKG-INFO = setuptools.command.egg_info:write_pkg_info'"}, "return_value": "True"}, {"func_args": {"str": "'PKG-INFO = setuptools.command.egg_info:write_pkg_info'"}, "return_value": "True"}, {"func_args": {"str": "'dependency_links.txt = setuptools.command.egg_info:overwrite_arg'"}, "return_value": "True"}, {"func_args": {"str": "'dependency_links.txt = setuptools.command.egg_info:overwrite_arg'"}, "return_value": "True"}, {"func_args": {"str": "'depends.txt = setuptools.command.egg_info:warn_depends_obsolete'"}, "return_value": "True"}, {"func_args": {"str": "'depends.txt = setuptools.command.egg_info:warn_depends_obsolete'"}, "return_value": "True"}, {"func_args": {"str": "'eager_resources.txt = setuptools.command.egg_info:overwrite_arg'"}, "return_value": "True"}, {"func_args": {"str": "'eager_resources.txt = setuptools.command.egg_info:overwrite_arg'"}, "return_value": "True"}, {"func_args": {"str": "'entry_points.txt = setuptools.command.egg_info:write_entries'"}, "return_value": "True"}, {"func_args": {"str": "'entry_points.txt = setuptools.command.egg_info:write_entries'"}, "return_value": "True"}, {"func_args": {"str": "'namespace_packages.txt = setuptools.command.egg_info:overwrite_arg'"}, "return_value": "True"}, {"func_args": {"str": "'namespace_packages.txt = setuptools.command.egg_info:overwrite_arg'"}, "return_value": "True"}, {"func_args": {"str": "'requires.txt = setuptools.command.egg_info:write_requirements'"}, "return_value": "True"}, {"func_args": {"str": "'requires.txt = setuptools.command.egg_info:write_requirements'"}, "return_value": "True"}, {"func_args": {"str": "'top_level.txt = setuptools.command.egg_info:write_toplevel_names'"}, "return_value": "True"}, {"func_args": {"str": "'top_level.txt = setuptools.command.egg_info:write_toplevel_names'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'[setuptools.finalize_distribution_options]'"}, "return_value": "True"}, {"func_args": {"str": "'[setuptools.finalize_distribution_options]'"}, "return_value": "True"}, {"func_args": {"str": "'PKG-INFO = setuptools.command.egg_info:write_pkg_info'"}, "return_value": "True"}, {"func_args": {"str": "'dependency_links.txt = setuptools.command.egg_info:overwrite_arg'"}, "return_value": "True"}, {"func_args": {"str": "'depends.txt = setuptools.command.egg_info:warn_depends_obsolete'"}, "return_value": "True"}, {"func_args": {"str": "'eager_resources.txt = setuptools.command.egg_info:overwrite_arg'"}, "return_value": "True"}, {"func_args": {"str": "'entry_points.txt = setuptools.command.egg_info:write_entries'"}, "return_value": "True"}, {"func_args": {"str": "'namespace_packages.txt = setuptools.command.egg_info:overwrite_arg'"}, "return_value": "True"}, {"func_args": {"str": "'requires.txt = setuptools.command.egg_info:write_requirements'"}, "return_value": "True"}, {"func_args": {"str": "'top_level.txt = setuptools.command.egg_info:write_toplevel_names'"}, "return_value": "True"}, {"func_args": {"str": "'keywords = setuptools.dist:Distribution._finalize_setup_keywords'"}, "return_value": "True"}, {"func_args": {"str": "'keywords = setuptools.dist:Distribution._finalize_setup_keywords'"}, "return_value": "True"}, {"func_args": {"str": "'parent_finalize = setuptools.dist:_Distribution.finalize_options'"}, "return_value": "True"}, {"func_args": {"str": "'parent_finalize = setuptools.dist:_Distribution.finalize_options'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'keywords = setuptools.dist:Distribution._finalize_setup_keywords'"}, "return_value": "True"}, {"func_args": {"str": "'parent_finalize = setuptools.dist:_Distribution.finalize_options'"}, "return_value": "True"}, {"func_args": {"str": "'[console_scripts]'"}, "return_value": "True"}, {"func_args": {"str": "'[console_scripts]'"}, "return_value": "True"}, {"func_args": {"str": "'pip = pip._internal.cli.main:main'"}, "return_value": "True"}, {"func_args": {"str": "'pip = pip._internal.cli.main:main'"}, "return_value": "True"}, {"func_args": {"str": "'pip3 = pip._internal.cli.main:main'"}, "return_value": "True"}, {"func_args": {"str": "'pip3 = pip._internal.cli.main:main'"}, "return_value": "True"}, {"func_args": {"str": "'pip3.9 = pip._internal.cli.main:main'"}, "return_value": "True"}, {"func_args": {"str": "'pip3.9 = pip._internal.cli.main:main'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'pip = pip._internal.cli.main:main'"}, "return_value": "True"}, {"func_args": {"str": "'pip3 = pip._internal.cli.main:main'"}, "return_value": "True"}, {"func_args": {"str": "'pip3.9 = pip._internal.cli.main:main'"}, "return_value": "True"}, {"func_args": {"str": "'[console_scripts]'"}, "return_value": "True"}, {"func_args": {"str": "'[console_scripts]'"}, "return_value": "True"}, {"func_args": {"str": "'virtualenv = virtualenv.__main__:run_with_catch'"}, "return_value": "True"}, {"func_args": {"str": "'virtualenv = virtualenv.__main__:run_with_catch'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'[virtualenv.activate]'"}, "return_value": "True"}, {"func_args": {"str": "'[virtualenv.activate]'"}, "return_value": "True"}, {"func_args": {"str": "'virtualenv = virtualenv.__main__:run_with_catch'"}, "return_value": "True"}, {"func_args": {"str": "'bash = virtualenv.activation.bash:BashActivator'"}, "return_value": "True"}, {"func_args": {"str": "'bash = virtualenv.activation.bash:BashActivator'"}, "return_value": "True"}, {"func_args": {"str": "'batch = virtualenv.activation.batch:BatchActivator'"}, "return_value": "True"}, {"func_args": {"str": "'batch = virtualenv.activation.batch:BatchActivator'"}, "return_value": "True"}, {"func_args": {"str": "'cshell = virtualenv.activation.cshell:CShellActivator'"}, "return_value": "True"}, {"func_args": {"str": "'cshell = virtualenv.activation.cshell:CShellActivator'"}, "return_value": "True"}, {"func_args": {"str": "'fish = virtualenv.activation.fish:FishActivator'"}, "return_value": "True"}, {"func_args": {"str": "'fish = virtualenv.activation.fish:FishActivator'"}, "return_value": "True"}, {"func_args": {"str": "'nushell = virtualenv.activation.nushell:NushellActivator'"}, "return_value": "True"}, {"func_args": {"str": "'nushell = virtualenv.activation.nushell:NushellActivator'"}, "return_value": "True"}, {"func_args": {"str": "'powershell = virtualenv.activation.powershell:PowerShellActivator'"}, "return_value": "True"}, {"func_args": {"str": "'powershell = virtualenv.activation.powershell:PowerShellActivator'"}, "return_value": "True"}, {"func_args": {"str": "'python = virtualenv.activation.python:PythonActivator'"}, "return_value": "True"}, {"func_args": {"str": "'python = virtualenv.activation.python:PythonActivator'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'[virtualenv.create]'"}, "return_value": "True"}, {"func_args": {"str": "'[virtualenv.create]'"}, "return_value": "True"}, {"func_args": {"str": "'bash = virtualenv.activation.bash:BashActivator'"}, "return_value": "True"}, {"func_args": {"str": "'batch = virtualenv.activation.batch:BatchActivator'"}, "return_value": "True"}, {"func_args": {"str": "'cshell = virtualenv.activation.cshell:CShellActivator'"}, "return_value": "True"}, {"func_args": {"str": "'fish = virtualenv.activation.fish:FishActivator'"}, "return_value": "True"}, {"func_args": {"str": "'nushell = virtualenv.activation.nushell:NushellActivator'"}, "return_value": "True"}, {"func_args": {"str": "'powershell = virtualenv.activation.powershell:PowerShellActivator'"}, "return_value": "True"}, {"func_args": {"str": "'python = virtualenv.activation.python:PythonActivator'"}, "return_value": "True"}, {"func_args": {"str": "'cpython2-mac-arm-framework = virtualenv.create.via_global_ref.builtin.cpython.mac_os:CPython2macOsArmFramework'"}, "return_value": "True"}, {"func_args": {"str": "'cpython2-mac-arm-framework = virtualenv.create.via_global_ref.builtin.cpython.mac_os:CPython2macOsArmFramework'"}, "return_value": "True"}, {"func_args": {"str": "'cpython2-mac-framework = virtualenv.create.via_global_ref.builtin.cpython.mac_os:CPython2macOsFramework'"}, "return_value": "True"}, {"func_args": {"str": "'cpython2-mac-framework = virtualenv.create.via_global_ref.builtin.cpython.mac_os:CPython2macOsFramework'"}, "return_value": "True"}, {"func_args": {"str": "'cpython2-posix = virtualenv.create.via_global_ref.builtin.cpython.cpython2:CPython2Posix'"}, "return_value": "True"}, {"func_args": {"str": "'cpython2-posix = virtualenv.create.via_global_ref.builtin.cpython.cpython2:CPython2Posix'"}, "return_value": "True"}, {"func_args": {"str": "'cpython2-win = virtualenv.create.via_global_ref.builtin.cpython.cpython2:CPython2Windows'"}, "return_value": "True"}, {"func_args": {"str": "'cpython2-win = virtualenv.create.via_global_ref.builtin.cpython.cpython2:CPython2Windows'"}, "return_value": "True"}, {"func_args": {"str": "'cpython3-mac-framework = virtualenv.create.via_global_ref.builtin.cpython.mac_os:CPython3macOsFramework'"}, "return_value": "True"}, {"func_args": {"str": "'cpython3-mac-framework = virtualenv.create.via_global_ref.builtin.cpython.mac_os:CPython3macOsFramework'"}, "return_value": "True"}, {"func_args": {"str": "'cpython3-posix = virtualenv.create.via_global_ref.builtin.cpython.cpython3:CPython3Posix'"}, "return_value": "True"}, {"func_args": {"str": "'cpython3-posix = virtualenv.create.via_global_ref.builtin.cpython.cpython3:CPython3Posix'"}, "return_value": "True"}, {"func_args": {"str": "'cpython3-win = virtualenv.create.via_global_ref.builtin.cpython.cpython3:CPython3Windows'"}, "return_value": "True"}, {"func_args": {"str": "'cpython3-win = virtualenv.create.via_global_ref.builtin.cpython.cpython3:CPython3Windows'"}, "return_value": "True"}, {"func_args": {"str": "'pypy2-posix = virtualenv.create.via_global_ref.builtin.pypy.pypy2:PyPy2Posix'"}, "return_value": "True"}, {"func_args": {"str": "'pypy2-posix = virtualenv.create.via_global_ref.builtin.pypy.pypy2:PyPy2Posix'"}, "return_value": "True"}, {"func_args": {"str": "'pypy2-win = virtualenv.create.via_global_ref.builtin.pypy.pypy2:Pypy2Windows'"}, "return_value": "True"}, {"func_args": {"str": "'pypy2-win = virtualenv.create.via_global_ref.builtin.pypy.pypy2:Pypy2Windows'"}, "return_value": "True"}, {"func_args": {"str": "'pypy3-posix = virtualenv.create.via_global_ref.builtin.pypy.pypy3:PyPy3Posix'"}, "return_value": "True"}, {"func_args": {"str": "'pypy3-posix = virtualenv.create.via_global_ref.builtin.pypy.pypy3:PyPy3Posix'"}, "return_value": "True"}, {"func_args": {"str": "'pypy3-win = virtualenv.create.via_global_ref.builtin.pypy.pypy3:Pypy3Windows'"}, "return_value": "True"}, {"func_args": {"str": "'pypy3-win = virtualenv.create.via_global_ref.builtin.pypy.pypy3:Pypy3Windows'"}, "return_value": "True"}, {"func_args": {"str": "'venv = virtualenv.create.via_global_ref.venv:Venv'"}, "return_value": "True"}, {"func_args": {"str": "'venv = virtualenv.create.via_global_ref.venv:Venv'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'[virtualenv.discovery]'"}, "return_value": "True"}, {"func_args": {"str": "'[virtualenv.discovery]'"}, "return_value": "True"}, {"func_args": {"str": "'cpython2-mac-arm-framework = virtualenv.create.via_global_ref.builtin.cpython.mac_os:CPython2macOsArmFramework'"}, "return_value": "True"}, {"func_args": {"str": "'cpython2-mac-framework = virtualenv.create.via_global_ref.builtin.cpython.mac_os:CPython2macOsFramework'"}, "return_value": "True"}, {"func_args": {"str": "'cpython2-posix = virtualenv.create.via_global_ref.builtin.cpython.cpython2:CPython2Posix'"}, "return_value": "True"}, {"func_args": {"str": "'cpython2-win = virtualenv.create.via_global_ref.builtin.cpython.cpython2:CPython2Windows'"}, "return_value": "True"}, {"func_args": {"str": "'cpython3-mac-framework = virtualenv.create.via_global_ref.builtin.cpython.mac_os:CPython3macOsFramework'"}, "return_value": "True"}, {"func_args": {"str": "'cpython3-posix = virtualenv.create.via_global_ref.builtin.cpython.cpython3:CPython3Posix'"}, "return_value": "True"}, {"func_args": {"str": "'cpython3-win = virtualenv.create.via_global_ref.builtin.cpython.cpython3:CPython3Windows'"}, "return_value": "True"}, {"func_args": {"str": "'pypy2-posix = virtualenv.create.via_global_ref.builtin.pypy.pypy2:PyPy2Posix'"}, "return_value": "True"}, {"func_args": {"str": "'pypy2-win = virtualenv.create.via_global_ref.builtin.pypy.pypy2:Pypy2Windows'"}, "return_value": "True"}, {"func_args": {"str": "'pypy3-posix = virtualenv.create.via_global_ref.builtin.pypy.pypy3:PyPy3Posix'"}, "return_value": "True"}, {"func_args": {"str": "'pypy3-win = virtualenv.create.via_global_ref.builtin.pypy.pypy3:Pypy3Windows'"}, "return_value": "True"}, {"func_args": {"str": "'venv = virtualenv.create.via_global_ref.venv:Venv'"}, "return_value": "True"}, {"func_args": {"str": "'builtin = virtualenv.discovery.builtin:Builtin'"}, "return_value": "True"}, {"func_args": {"str": "'builtin = virtualenv.discovery.builtin:Builtin'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'[virtualenv.seed]'"}, "return_value": "True"}, {"func_args": {"str": "'[virtualenv.seed]'"}, "return_value": "True"}, {"func_args": {"str": "'builtin = virtualenv.discovery.builtin:Builtin'"}, "return_value": "True"}, {"func_args": {"str": "'app-data = virtualenv.seed.embed.via_app_data.via_app_data:FromAppData'"}, "return_value": "True"}, {"func_args": {"str": "'app-data = virtualenv.seed.embed.via_app_data.via_app_data:FromAppData'"}, "return_value": "True"}, {"func_args": {"str": "'pip = virtualenv.seed.embed.pip_invoke:PipInvoke'"}, "return_value": "True"}, {"func_args": {"str": "'pip = virtualenv.seed.embed.pip_invoke:PipInvoke'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'app-data = virtualenv.seed.embed.via_app_data.via_app_data:FromAppData'"}, "return_value": "True"}, {"func_args": {"str": "'pip = virtualenv.seed.embed.pip_invoke:PipInvoke'"}, "return_value": "True"}, {"func_args": {"str": "'[console_scripts]'"}, "return_value": "True"}, {"func_args": {"str": "'[console_scripts]'"}, "return_value": "True"}, {"func_args": {"str": "'py.test = pytest:console_main'"}, "return_value": "True"}, {"func_args": {"str": "'py.test = pytest:console_main'"}, "return_value": "True"}, {"func_args": {"str": "'pytest = pytest:console_main'"}, "return_value": "True"}, {"func_args": {"str": "'pytest = pytest:console_main'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'py.test = pytest:console_main'"}, "return_value": "True"}, {"func_args": {"str": "'pytest = pytest:console_main'"}, "return_value": "True"}, {"func_args": {"str": "'[console_scripts]'"}, "return_value": "True"}, {"func_args": {"str": "'[console_scripts]'"}, "return_value": "True"}, {"func_args": {"str": "'coverage = coverage.cmdline:main'"}, "return_value": "True"}, {"func_args": {"str": "'coverage = coverage.cmdline:main'"}, "return_value": "True"}, {"func_args": {"str": "'coverage-3.8 = coverage.cmdline:main'"}, "return_value": "True"}, {"func_args": {"str": "'coverage-3.8 = coverage.cmdline:main'"}, "return_value": "True"}, {"func_args": {"str": "'coverage3 = coverage.cmdline:main'"}, "return_value": "True"}, {"func_args": {"str": "'coverage3 = coverage.cmdline:main'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'coverage = coverage.cmdline:main'"}, "return_value": "True"}, {"func_args": {"str": "'coverage-3.8 = coverage.cmdline:main'"}, "return_value": "True"}, {"func_args": {"str": "'coverage3 = coverage.cmdline:main'"}, "return_value": "True"}, {"func_args": {"str": "'[console_scripts]'"}, "return_value": "True"}, {"func_args": {"str": "'[console_scripts]'"}, "return_value": "True"}, {"func_args": {"str": "'tox = tox:cmdline'"}, "return_value": "True"}, {"func_args": {"str": "'tox = tox:cmdline'"}, "return_value": "True"}, {"func_args": {"str": "'tox-quickstart = tox._quickstart:main'"}, "return_value": "True"}, {"func_args": {"str": "'tox-quickstart = tox._quickstart:main'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'tox = tox:cmdline'"}, "return_value": "True"}, {"func_args": {"str": "'tox-quickstart = tox._quickstart:main'"}, "return_value": "True"}, {"func_args": {"str": "'[pytest11]'"}, "return_value": "True"}, {"func_args": {"str": "'[pytest11]'"}, "return_value": "True"}, {"func_args": {"str": "'randomly = pytest_randomly'"}, "return_value": "True"}, {"func_args": {"str": "'randomly = pytest_randomly'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'randomly = pytest_randomly'"}, "return_value": "True"}, {"func_args": {"str": "'[nose.plugins.0.10]'"}, "return_value": "True"}, {"func_args": {"str": "'[nose.plugins.0.10]'"}, "return_value": "True"}, {"func_args": {"str": "'flaky = flaky.flaky_nose_plugin:FlakyPlugin'"}, "return_value": "True"}, {"func_args": {"str": "'flaky = flaky.flaky_nose_plugin:FlakyPlugin'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'[pytest11]'"}, "return_value": "True"}, {"func_args": {"str": "'[pytest11]'"}, "return_value": "True"}, {"func_args": {"str": "'flaky = flaky.flaky_nose_plugin:FlakyPlugin'"}, "return_value": "True"}, {"func_args": {"str": "'flaky = flaky.flaky_pytest_plugin'"}, "return_value": "True"}, {"func_args": {"str": "'flaky = flaky.flaky_pytest_plugin'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'flaky = flaky.flaky_pytest_plugin'"}, "return_value": "True"}, {"func_args": {"str": "'[pytest11]'"}, "return_value": "True"}, {"func_args": {"str": "'[pytest11]'"}, "return_value": "True"}, {"func_args": {"str": "'pytest_mock = pytest_mock'"}, "return_value": "True"}, {"func_args": {"str": "'pytest_mock = pytest_mock'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'pytest_mock = pytest_mock'"}, "return_value": "True"}, {"func_args": {"str": "'[pytest11]'"}, "return_value": "True"}, {"func_args": {"str": "'[pytest11]'"}, "return_value": "True"}, {"func_args": {"str": "'pytest_cov = pytest_cov.plugin'"}, "return_value": "True"}, {"func_args": {"str": "'pytest_cov = pytest_cov.plugin'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'pytest_cov = pytest_cov.plugin'"}, "return_value": "True"}, {"func_args": {"str": "'[console_scripts]'"}, "return_value": "True"}, {"func_args": {"str": "'[console_scripts]'"}, "return_value": "True"}, {"func_args": {"str": "'wheel = wheel.cli:main'"}, "return_value": "True"}, {"func_args": {"str": "'wheel = wheel.cli:main'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'[distutils.commands]'"}, "return_value": "True"}, {"func_args": {"str": "'[distutils.commands]'"}, "return_value": "True"}, {"func_args": {"str": "'wheel = wheel.cli:main'"}, "return_value": "True"}, {"func_args": {"str": "'bdist_wheel = wheel.bdist_wheel:bdist_wheel'"}, "return_value": "True"}, {"func_args": {"str": "'bdist_wheel = wheel.bdist_wheel:bdist_wheel'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'bdist_wheel = wheel.bdist_wheel:bdist_wheel'"}, "return_value": "True"}, {"func_args": {"str": "'[console_scripts]'"}, "return_value": "True"}, {"func_args": {"str": "'[console_scripts]'"}, "return_value": "True"}, {"func_args": {"str": "'vdb = viztracer:sim_main'"}, "return_value": "True"}, {"func_args": {"str": "'vdb = viztracer:sim_main'"}, "return_value": "True"}, {"func_args": {"str": "'viztracer = viztracer:main'"}, "return_value": "True"}, {"func_args": {"str": "'viztracer = viztracer:main'"}, "return_value": "True"}, {"func_args": {"str": "'vizviewer = viztracer:viewer_main'"}, "return_value": "True"}, {"func_args": {"str": "'vizviewer = viztracer:viewer_main'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'vdb = viztracer:sim_main'"}, "return_value": "True"}, {"func_args": {"str": "'viztracer = viztracer:main'"}, "return_value": "True"}, {"func_args": {"str": "'vizviewer = viztracer:viewer_main'"}, "return_value": "True"}, {"func_args": {"str": "'setuptools'"}, "return_value": "True"}, {"func_args": {"str": "'setuptools'"}, "return_value": "True"}, {"func_args": {"str": "\"sphinx ; extra == 'docs'\""}, "return_value": "True"}, {"func_args": {"str": "\"jaraco.packaging (>=8.2) ; extra == 'docs'\""}, "return_value": "True"}, {"func_args": {"str": "\"rst.linker (>=1.9) ; extra == 'docs'\""}, "return_value": "True"}, {"func_args": {"str": "\"jaraco.tidelift (>=1.4) ; extra == 'docs'\""}, "return_value": "True"}, {"func_args": {"str": "\"pygments-github-lexers (==0.0.5) ; extra == 'docs'\""}, "return_value": "True"}, {"func_args": {"str": "\"sphinx-inline-tabs ; extra == 'docs'\""}, "return_value": "True"}, {"func_args": {"str": "\"sphinxcontrib-towncrier ; extra == 'docs'\""}, "return_value": "True"}, {"func_args": {"str": "\"furo ; extra == 'docs'\""}, "return_value": "True"}, {"func_args": {"str": "\"pytest (>=6) ; extra == 'testing'\""}, "return_value": "True"}, {"func_args": {"str": "\"pytest-checkdocs (>=2.4) ; extra == 'testing'\""}, "return_value": "True"}, {"func_args": {"str": "\"pytest-flake8 ; extra == 'testing'\""}, "return_value": "True"}, {"func_args": {"str": "\"pytest-cov ; extra == 'testing'\""}, "return_value": "True"}, {"func_args": {"str": "\"pytest-enabler (>=1.0.1) ; extra == 'testing'\""}, "return_value": "True"}, {"func_args": {"str": "\"mock ; extra == 'testing'\""}, "return_value": "True"}, {"func_args": {"str": "\"flake8-2020 ; extra == 'testing'\""}, "return_value": "True"}, {"func_args": {"str": "\"virtualenv (>=13.0.0) ; extra == 'testing'\""}, "return_value": "True"}, {"func_args": {"str": "\"pytest-virtualenv (>=1.2.7) ; extra == 'testing'\""}, "return_value": "True"}, {"func_args": {"str": "\"wheel ; extra == 'testing'\""}, "return_value": "True"}, {"func_args": {"str": "\"paver ; extra == 'testing'\""}, "return_value": "True"}, {"func_args": {"str": "\"pip (>=19.1) ; extra == 'testing'\""}, "return_value": "True"}, {"func_args": {"str": "\"jaraco.envs (>=2.2) ; extra == 'testing'\""}, "return_value": "True"}, {"func_args": {"str": "\"pytest-xdist ; extra == 'testing'\""}, "return_value": "True"}, {"func_args": {"str": "\"sphinx ; extra == 'testing'\""}, "return_value": "True"}, {"func_args": {"str": "\"jaraco.path (>=3.2.0) ; extra == 'testing'\""}, "return_value": "True"}, {"func_args": {"str": "'pytest-black (>=0.3.7) ; (platform_python_implementation != \"PyPy\") and extra == \\'testing\\''"}, "return_value": "True"}, {"func_args": {"str": "'pytest-mypy ; (platform_python_implementation != \"PyPy\") and extra == \\'testing\\''"}, "return_value": "True"}, {"func_args": {"str": "'setuptools'"}, "return_value": "True"}, {"func_args": {"str": "'setuptools'"}, "return_value": "True"}, {"func_args": {"str": "'example123===0.5'"}, "return_value": "True"}, {"func_args": {"str": "'[distutils.commands]'"}, "return_value": "True"}, {"func_args": {"str": "'[distutils.commands]'"}, "return_value": "True"}, {"func_args": {"str": "'alias = setuptools.command.alias:alias'"}, "return_value": "True"}, {"func_args": {"str": "'alias = setuptools.command.alias:alias'"}, "return_value": "True"}, {"func_args": {"str": "'bdist_egg = setuptools.command.bdist_egg:bdist_egg'"}, "return_value": "True"}, {"func_args": {"str": "'bdist_egg = setuptools.command.bdist_egg:bdist_egg'"}, "return_value": "True"}, {"func_args": {"str": "'bdist_rpm = setuptools.command.bdist_rpm:bdist_rpm'"}, "return_value": "True"}, {"func_args": {"str": "'bdist_rpm = setuptools.command.bdist_rpm:bdist_rpm'"}, "return_value": "True"}, {"func_args": {"str": "'build_clib = setuptools.command.build_clib:build_clib'"}, "return_value": "True"}, {"func_args": {"str": "'build_clib = setuptools.command.build_clib:build_clib'"}, "return_value": "True"}, {"func_args": {"str": "'build_ext = setuptools.command.build_ext:build_ext'"}, "return_value": "True"}, {"func_args": {"str": "'build_ext = setuptools.command.build_ext:build_ext'"}, "return_value": "True"}, {"func_args": {"str": "'build_py = setuptools.command.build_py:build_py'"}, "return_value": "True"}, {"func_args": {"str": "'build_py = setuptools.command.build_py:build_py'"}, "return_value": "True"}, {"func_args": {"str": "'develop = setuptools.command.develop:develop'"}, "return_value": "True"}, {"func_args": {"str": "'develop = setuptools.command.develop:develop'"}, "return_value": "True"}, {"func_args": {"str": "'dist_info = setuptools.command.dist_info:dist_info'"}, "return_value": "True"}, {"func_args": {"str": "'dist_info = setuptools.command.dist_info:dist_info'"}, "return_value": "True"}, {"func_args": {"str": "'easy_install = setuptools.command.easy_install:easy_install'"}, "return_value": "True"}, {"func_args": {"str": "'easy_install = setuptools.command.easy_install:easy_install'"}, "return_value": "True"}, {"func_args": {"str": "'egg_info = setuptools.command.egg_info:egg_info'"}, "return_value": "True"}, {"func_args": {"str": "'egg_info = setuptools.command.egg_info:egg_info'"}, "return_value": "True"}, {"func_args": {"str": "'install = setuptools.command.install:install'"}, "return_value": "True"}, {"func_args": {"str": "'install = setuptools.command.install:install'"}, "return_value": "True"}, {"func_args": {"str": "'install_egg_info = setuptools.command.install_egg_info:install_egg_info'"}, "return_value": "True"}, {"func_args": {"str": "'install_egg_info = setuptools.command.install_egg_info:install_egg_info'"}, "return_value": "True"}, {"func_args": {"str": "'install_lib = setuptools.command.install_lib:install_lib'"}, "return_value": "True"}, {"func_args": {"str": "'install_lib = setuptools.command.install_lib:install_lib'"}, "return_value": "True"}, {"func_args": {"str": "'install_scripts = setuptools.command.install_scripts:install_scripts'"}, "return_value": "True"}, {"func_args": {"str": "'install_scripts = setuptools.command.install_scripts:install_scripts'"}, "return_value": "True"}, {"func_args": {"str": "'rotate = setuptools.command.rotate:rotate'"}, "return_value": "True"}, {"func_args": {"str": "'rotate = setuptools.command.rotate:rotate'"}, "return_value": "True"}, {"func_args": {"str": "'saveopts = setuptools.command.saveopts:saveopts'"}, "return_value": "True"}, {"func_args": {"str": "'saveopts = setuptools.command.saveopts:saveopts'"}, "return_value": "True"}, {"func_args": {"str": "'sdist = setuptools.command.sdist:sdist'"}, "return_value": "True"}, {"func_args": {"str": "'sdist = setuptools.command.sdist:sdist'"}, "return_value": "True"}, {"func_args": {"str": "'setopt = setuptools.command.setopt:setopt'"}, "return_value": "True"}, {"func_args": {"str": "'setopt = setuptools.command.setopt:setopt'"}, "return_value": "True"}, {"func_args": {"str": "'test = setuptools.command.test:test'"}, "return_value": "True"}, {"func_args": {"str": "'test = setuptools.command.test:test'"}, "return_value": "True"}, {"func_args": {"str": "'upload_docs = setuptools.command.upload_docs:upload_docs'"}, "return_value": "True"}, {"func_args": {"str": "'upload_docs = setuptools.command.upload_docs:upload_docs'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'[distutils.setup_keywords]'"}, "return_value": "True"}, {"func_args": {"str": "'[distutils.setup_keywords]'"}, "return_value": "True"}, {"func_args": {"str": "'alias = setuptools.command.alias:alias'"}, "return_value": "True"}, {"func_args": {"str": "'bdist_egg = setuptools.command.bdist_egg:bdist_egg'"}, "return_value": "True"}, {"func_args": {"str": "'bdist_rpm = setuptools.command.bdist_rpm:bdist_rpm'"}, "return_value": "True"}, {"func_args": {"str": "'build_clib = setuptools.command.build_clib:build_clib'"}, "return_value": "True"}, {"func_args": {"str": "'build_ext = setuptools.command.build_ext:build_ext'"}, "return_value": "True"}, {"func_args": {"str": "'build_py = setuptools.command.build_py:build_py'"}, "return_value": "True"}, {"func_args": {"str": "'develop = setuptools.command.develop:develop'"}, "return_value": "True"}, {"func_args": {"str": "'dist_info = setuptools.command.dist_info:dist_info'"}, "return_value": "True"}, {"func_args": {"str": "'easy_install = setuptools.command.easy_install:easy_install'"}, "return_value": "True"}, {"func_args": {"str": "'egg_info = setuptools.command.egg_info:egg_info'"}, "return_value": "True"}, {"func_args": {"str": "'install = setuptools.command.install:install'"}, "return_value": "True"}, {"func_args": {"str": "'install_egg_info = setuptools.command.install_egg_info:install_egg_info'"}, "return_value": "True"}, {"func_args": {"str": "'install_lib = setuptools.command.install_lib:install_lib'"}, "return_value": "True"}, {"func_args": {"str": "'install_scripts = setuptools.command.install_scripts:install_scripts'"}, "return_value": "True"}, {"func_args": {"str": "'rotate = setuptools.command.rotate:rotate'"}, "return_value": "True"}, {"func_args": {"str": "'saveopts = setuptools.command.saveopts:saveopts'"}, "return_value": "True"}, {"func_args": {"str": "'sdist = setuptools.command.sdist:sdist'"}, "return_value": "True"}, {"func_args": {"str": "'setopt = setuptools.command.setopt:setopt'"}, "return_value": "True"}, {"func_args": {"str": "'test = setuptools.command.test:test'"}, "return_value": "True"}, {"func_args": {"str": "'upload_docs = setuptools.command.upload_docs:upload_docs'"}, "return_value": "True"}, {"func_args": {"str": "'dependency_links = setuptools.dist:assert_string_list'"}, "return_value": "True"}, {"func_args": {"str": "'dependency_links = setuptools.dist:assert_string_list'"}, "return_value": "True"}, {"func_args": {"str": "'eager_resources = setuptools.dist:assert_string_list'"}, "return_value": "True"}, {"func_args": {"str": "'eager_resources = setuptools.dist:assert_string_list'"}, "return_value": "True"}, {"func_args": {"str": "'entry_points = setuptools.dist:check_entry_points'"}, "return_value": "True"}, {"func_args": {"str": "'entry_points = setuptools.dist:check_entry_points'"}, "return_value": "True"}, {"func_args": {"str": "'exclude_package_data = setuptools.dist:check_package_data'"}, "return_value": "True"}, {"func_args": {"str": "'exclude_package_data = setuptools.dist:check_package_data'"}, "return_value": "True"}, {"func_args": {"str": "'extras_require = setuptools.dist:check_extras'"}, "return_value": "True"}, {"func_args": {"str": "'extras_require = setuptools.dist:check_extras'"}, "return_value": "True"}, {"func_args": {"str": "'include_package_data = setuptools.dist:assert_bool'"}, "return_value": "True"}, {"func_args": {"str": "'include_package_data = setuptools.dist:assert_bool'"}, "return_value": "True"}, {"func_args": {"str": "'install_requires = setuptools.dist:check_requirements'"}, "return_value": "True"}, {"func_args": {"str": "'install_requires = setuptools.dist:check_requirements'"}, "return_value": "True"}, {"func_args": {"str": "'namespace_packages = setuptools.dist:check_nsp'"}, "return_value": "True"}, {"func_args": {"str": "'namespace_packages = setuptools.dist:check_nsp'"}, "return_value": "True"}, {"func_args": {"str": "'package_data = setuptools.dist:check_package_data'"}, "return_value": "True"}, {"func_args": {"str": "'package_data = setuptools.dist:check_package_data'"}, "return_value": "True"}, {"func_args": {"str": "'packages = setuptools.dist:check_packages'"}, "return_value": "True"}, {"func_args": {"str": "'packages = setuptools.dist:check_packages'"}, "return_value": "True"}, {"func_args": {"str": "'python_requires = setuptools.dist:check_specifier'"}, "return_value": "True"}, {"func_args": {"str": "'python_requires = setuptools.dist:check_specifier'"}, "return_value": "True"}, {"func_args": {"str": "'setup_requires = setuptools.dist:check_requirements'"}, "return_value": "True"}, {"func_args": {"str": "'setup_requires = setuptools.dist:check_requirements'"}, "return_value": "True"}, {"func_args": {"str": "'test_loader = setuptools.dist:check_importable'"}, "return_value": "True"}, {"func_args": {"str": "'test_loader = setuptools.dist:check_importable'"}, "return_value": "True"}, {"func_args": {"str": "'test_runner = setuptools.dist:check_importable'"}, "return_value": "True"}, {"func_args": {"str": "'test_runner = setuptools.dist:check_importable'"}, "return_value": "True"}, {"func_args": {"str": "'test_suite = setuptools.dist:check_test_suite'"}, "return_value": "True"}, {"func_args": {"str": "'test_suite = setuptools.dist:check_test_suite'"}, "return_value": "True"}, {"func_args": {"str": "'tests_require = setuptools.dist:check_requirements'"}, "return_value": "True"}, {"func_args": {"str": "'tests_require = setuptools.dist:check_requirements'"}, "return_value": "True"}, {"func_args": {"str": "'use_2to3 = setuptools.dist:invalid_unless_false'"}, "return_value": "True"}, {"func_args": {"str": "'use_2to3 = setuptools.dist:invalid_unless_false'"}, "return_value": "True"}, {"func_args": {"str": "'zip_safe = setuptools.dist:assert_bool'"}, "return_value": "True"}, {"func_args": {"str": "'zip_safe = setuptools.dist:assert_bool'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'[egg_info.writers]'"}, "return_value": "True"}, {"func_args": {"str": "'[egg_info.writers]'"}, "return_value": "True"}, {"func_args": {"str": "'dependency_links = setuptools.dist:assert_string_list'"}, "return_value": "True"}, {"func_args": {"str": "'eager_resources = setuptools.dist:assert_string_list'"}, "return_value": "True"}, {"func_args": {"str": "'entry_points = setuptools.dist:check_entry_points'"}, "return_value": "True"}, {"func_args": {"str": "'exclude_package_data = setuptools.dist:check_package_data'"}, "return_value": "True"}, {"func_args": {"str": "'extras_require = setuptools.dist:check_extras'"}, "return_value": "True"}, {"func_args": {"str": "'include_package_data = setuptools.dist:assert_bool'"}, "return_value": "True"}, {"func_args": {"str": "'install_requires = setuptools.dist:check_requirements'"}, "return_value": "True"}, {"func_args": {"str": "'namespace_packages = setuptools.dist:check_nsp'"}, "return_value": "True"}, {"func_args": {"str": "'package_data = setuptools.dist:check_package_data'"}, "return_value": "True"}, {"func_args": {"str": "'packages = setuptools.dist:check_packages'"}, "return_value": "True"}, {"func_args": {"str": "'python_requires = setuptools.dist:check_specifier'"}, "return_value": "True"}, {"func_args": {"str": "'setup_requires = setuptools.dist:check_requirements'"}, "return_value": "True"}, {"func_args": {"str": "'test_loader = setuptools.dist:check_importable'"}, "return_value": "True"}, {"func_args": {"str": "'test_runner = setuptools.dist:check_importable'"}, "return_value": "True"}, {"func_args": {"str": "'test_suite = setuptools.dist:check_test_suite'"}, "return_value": "True"}, {"func_args": {"str": "'tests_require = setuptools.dist:check_requirements'"}, "return_value": "True"}, {"func_args": {"str": "'use_2to3 = setuptools.dist:invalid_unless_false'"}, "return_value": "True"}, {"func_args": {"str": "'zip_safe = setuptools.dist:assert_bool'"}, "return_value": "True"}, {"func_args": {"str": "'PKG-INFO = setuptools.command.egg_info:write_pkg_info'"}, "return_value": "True"}, {"func_args": {"str": "'PKG-INFO = setuptools.command.egg_info:write_pkg_info'"}, "return_value": "True"}, {"func_args": {"str": "'dependency_links.txt = setuptools.command.egg_info:overwrite_arg'"}, "return_value": "True"}, {"func_args": {"str": "'dependency_links.txt = setuptools.command.egg_info:overwrite_arg'"}, "return_value": "True"}, {"func_args": {"str": "'depends.txt = setuptools.command.egg_info:warn_depends_obsolete'"}, "return_value": "True"}, {"func_args": {"str": "'depends.txt = setuptools.command.egg_info:warn_depends_obsolete'"}, "return_value": "True"}, {"func_args": {"str": "'eager_resources.txt = setuptools.command.egg_info:overwrite_arg'"}, "return_value": "True"}, {"func_args": {"str": "'eager_resources.txt = setuptools.command.egg_info:overwrite_arg'"}, "return_value": "True"}, {"func_args": {"str": "'entry_points.txt = setuptools.command.egg_info:write_entries'"}, "return_value": "True"}, {"func_args": {"str": "'entry_points.txt = setuptools.command.egg_info:write_entries'"}, "return_value": "True"}, {"func_args": {"str": "'namespace_packages.txt = setuptools.command.egg_info:overwrite_arg'"}, "return_value": "True"}, {"func_args": {"str": "'namespace_packages.txt = setuptools.command.egg_info:overwrite_arg'"}, "return_value": "True"}, {"func_args": {"str": "'requires.txt = setuptools.command.egg_info:write_requirements'"}, "return_value": "True"}, {"func_args": {"str": "'requires.txt = setuptools.command.egg_info:write_requirements'"}, "return_value": "True"}, {"func_args": {"str": "'top_level.txt = setuptools.command.egg_info:write_toplevel_names'"}, "return_value": "True"}, {"func_args": {"str": "'top_level.txt = setuptools.command.egg_info:write_toplevel_names'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'[setuptools.finalize_distribution_options]'"}, "return_value": "True"}, {"func_args": {"str": "'[setuptools.finalize_distribution_options]'"}, "return_value": "True"}, {"func_args": {"str": "'PKG-INFO = setuptools.command.egg_info:write_pkg_info'"}, "return_value": "True"}, {"func_args": {"str": "'dependency_links.txt = setuptools.command.egg_info:overwrite_arg'"}, "return_value": "True"}, {"func_args": {"str": "'depends.txt = setuptools.command.egg_info:warn_depends_obsolete'"}, "return_value": "True"}, {"func_args": {"str": "'eager_resources.txt = setuptools.command.egg_info:overwrite_arg'"}, "return_value": "True"}, {"func_args": {"str": "'entry_points.txt = setuptools.command.egg_info:write_entries'"}, "return_value": "True"}, {"func_args": {"str": "'namespace_packages.txt = setuptools.command.egg_info:overwrite_arg'"}, "return_value": "True"}, {"func_args": {"str": "'requires.txt = setuptools.command.egg_info:write_requirements'"}, "return_value": "True"}, {"func_args": {"str": "'top_level.txt = setuptools.command.egg_info:write_toplevel_names'"}, "return_value": "True"}, {"func_args": {"str": "'keywords = setuptools.dist:Distribution._finalize_setup_keywords'"}, "return_value": "True"}, {"func_args": {"str": "'keywords = setuptools.dist:Distribution._finalize_setup_keywords'"}, "return_value": "True"}, {"func_args": {"str": "'parent_finalize = setuptools.dist:_Distribution.finalize_options'"}, "return_value": "True"}, {"func_args": {"str": "'parent_finalize = setuptools.dist:_Distribution.finalize_options'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'keywords = setuptools.dist:Distribution._finalize_setup_keywords'"}, "return_value": "True"}, {"func_args": {"str": "'parent_finalize = setuptools.dist:_Distribution.finalize_options'"}, "return_value": "True"}, {"func_args": {"str": "'[console_scripts]'"}, "return_value": "True"}, {"func_args": {"str": "'[console_scripts]'"}, "return_value": "True"}, {"func_args": {"str": "'pip = pip._internal.cli.main:main'"}, "return_value": "True"}, {"func_args": {"str": "'pip = pip._internal.cli.main:main'"}, "return_value": "True"}, {"func_args": {"str": "'pip3 = pip._internal.cli.main:main'"}, "return_value": "True"}, {"func_args": {"str": "'pip3 = pip._internal.cli.main:main'"}, "return_value": "True"}, {"func_args": {"str": "'pip3.9 = pip._internal.cli.main:main'"}, "return_value": "True"}, {"func_args": {"str": "'pip3.9 = pip._internal.cli.main:main'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'pip = pip._internal.cli.main:main'"}, "return_value": "True"}, {"func_args": {"str": "'pip3 = pip._internal.cli.main:main'"}, "return_value": "True"}, {"func_args": {"str": "'pip3.9 = pip._internal.cli.main:main'"}, "return_value": "True"}, {"func_args": {"str": "'[console_scripts]'"}, "return_value": "True"}, {"func_args": {"str": "'[console_scripts]'"}, "return_value": "True"}, {"func_args": {"str": "'virtualenv = virtualenv.__main__:run_with_catch'"}, "return_value": "True"}, {"func_args": {"str": "'virtualenv = virtualenv.__main__:run_with_catch'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'[virtualenv.activate]'"}, "return_value": "True"}, {"func_args": {"str": "'[virtualenv.activate]'"}, "return_value": "True"}, {"func_args": {"str": "'virtualenv = virtualenv.__main__:run_with_catch'"}, "return_value": "True"}, {"func_args": {"str": "'bash = virtualenv.activation.bash:BashActivator'"}, "return_value": "True"}, {"func_args": {"str": "'bash = virtualenv.activation.bash:BashActivator'"}, "return_value": "True"}, {"func_args": {"str": "'batch = virtualenv.activation.batch:BatchActivator'"}, "return_value": "True"}, {"func_args": {"str": "'batch = virtualenv.activation.batch:BatchActivator'"}, "return_value": "True"}, {"func_args": {"str": "'cshell = virtualenv.activation.cshell:CShellActivator'"}, "return_value": "True"}, {"func_args": {"str": "'cshell = virtualenv.activation.cshell:CShellActivator'"}, "return_value": "True"}, {"func_args": {"str": "'fish = virtualenv.activation.fish:FishActivator'"}, "return_value": "True"}, {"func_args": {"str": "'fish = virtualenv.activation.fish:FishActivator'"}, "return_value": "True"}, {"func_args": {"str": "'nushell = virtualenv.activation.nushell:NushellActivator'"}, "return_value": "True"}, {"func_args": {"str": "'nushell = virtualenv.activation.nushell:NushellActivator'"}, "return_value": "True"}, {"func_args": {"str": "'powershell = virtualenv.activation.powershell:PowerShellActivator'"}, "return_value": "True"}, {"func_args": {"str": "'powershell = virtualenv.activation.powershell:PowerShellActivator'"}, "return_value": "True"}, {"func_args": {"str": "'python = virtualenv.activation.python:PythonActivator'"}, "return_value": "True"}, {"func_args": {"str": "'python = virtualenv.activation.python:PythonActivator'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'[virtualenv.create]'"}, "return_value": "True"}, {"func_args": {"str": "'[virtualenv.create]'"}, "return_value": "True"}, {"func_args": {"str": "'bash = virtualenv.activation.bash:BashActivator'"}, "return_value": "True"}, {"func_args": {"str": "'batch = virtualenv.activation.batch:BatchActivator'"}, "return_value": "True"}, {"func_args": {"str": "'cshell = virtualenv.activation.cshell:CShellActivator'"}, "return_value": "True"}, {"func_args": {"str": "'fish = virtualenv.activation.fish:FishActivator'"}, "return_value": "True"}, {"func_args": {"str": "'nushell = virtualenv.activation.nushell:NushellActivator'"}, "return_value": "True"}, {"func_args": {"str": "'powershell = virtualenv.activation.powershell:PowerShellActivator'"}, "return_value": "True"}, {"func_args": {"str": "'python = virtualenv.activation.python:PythonActivator'"}, "return_value": "True"}, {"func_args": {"str": "'cpython2-mac-arm-framework = virtualenv.create.via_global_ref.builtin.cpython.mac_os:CPython2macOsArmFramework'"}, "return_value": "True"}, {"func_args": {"str": "'cpython2-mac-arm-framework = virtualenv.create.via_global_ref.builtin.cpython.mac_os:CPython2macOsArmFramework'"}, "return_value": "True"}, {"func_args": {"str": "'cpython2-mac-framework = virtualenv.create.via_global_ref.builtin.cpython.mac_os:CPython2macOsFramework'"}, "return_value": "True"}, {"func_args": {"str": "'cpython2-mac-framework = virtualenv.create.via_global_ref.builtin.cpython.mac_os:CPython2macOsFramework'"}, "return_value": "True"}, {"func_args": {"str": "'cpython2-posix = virtualenv.create.via_global_ref.builtin.cpython.cpython2:CPython2Posix'"}, "return_value": "True"}, {"func_args": {"str": "'cpython2-posix = virtualenv.create.via_global_ref.builtin.cpython.cpython2:CPython2Posix'"}, "return_value": "True"}, {"func_args": {"str": "'cpython2-win = virtualenv.create.via_global_ref.builtin.cpython.cpython2:CPython2Windows'"}, "return_value": "True"}, {"func_args": {"str": "'cpython2-win = virtualenv.create.via_global_ref.builtin.cpython.cpython2:CPython2Windows'"}, "return_value": "True"}, {"func_args": {"str": "'cpython3-mac-framework = virtualenv.create.via_global_ref.builtin.cpython.mac_os:CPython3macOsFramework'"}, "return_value": "True"}, {"func_args": {"str": "'cpython3-mac-framework = virtualenv.create.via_global_ref.builtin.cpython.mac_os:CPython3macOsFramework'"}, "return_value": "True"}, {"func_args": {"str": "'cpython3-posix = virtualenv.create.via_global_ref.builtin.cpython.cpython3:CPython3Posix'"}, "return_value": "True"}, {"func_args": {"str": "'cpython3-posix = virtualenv.create.via_global_ref.builtin.cpython.cpython3:CPython3Posix'"}, "return_value": "True"}, {"func_args": {"str": "'cpython3-win = virtualenv.create.via_global_ref.builtin.cpython.cpython3:CPython3Windows'"}, "return_value": "True"}, {"func_args": {"str": "'cpython3-win = virtualenv.create.via_global_ref.builtin.cpython.cpython3:CPython3Windows'"}, "return_value": "True"}, {"func_args": {"str": "'pypy2-posix = virtualenv.create.via_global_ref.builtin.pypy.pypy2:PyPy2Posix'"}, "return_value": "True"}, {"func_args": {"str": "'pypy2-posix = virtualenv.create.via_global_ref.builtin.pypy.pypy2:PyPy2Posix'"}, "return_value": "True"}, {"func_args": {"str": "'pypy2-win = virtualenv.create.via_global_ref.builtin.pypy.pypy2:Pypy2Windows'"}, "return_value": "True"}, {"func_args": {"str": "'pypy2-win = virtualenv.create.via_global_ref.builtin.pypy.pypy2:Pypy2Windows'"}, "return_value": "True"}, {"func_args": {"str": "'pypy3-posix = virtualenv.create.via_global_ref.builtin.pypy.pypy3:PyPy3Posix'"}, "return_value": "True"}, {"func_args": {"str": "'pypy3-posix = virtualenv.create.via_global_ref.builtin.pypy.pypy3:PyPy3Posix'"}, "return_value": "True"}, {"func_args": {"str": "'pypy3-win = virtualenv.create.via_global_ref.builtin.pypy.pypy3:Pypy3Windows'"}, "return_value": "True"}, {"func_args": {"str": "'pypy3-win = virtualenv.create.via_global_ref.builtin.pypy.pypy3:Pypy3Windows'"}, "return_value": "True"}, {"func_args": {"str": "'venv = virtualenv.create.via_global_ref.venv:Venv'"}, "return_value": "True"}, {"func_args": {"str": "'venv = virtualenv.create.via_global_ref.venv:Venv'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'[virtualenv.discovery]'"}, "return_value": "True"}, {"func_args": {"str": "'[virtualenv.discovery]'"}, "return_value": "True"}, {"func_args": {"str": "'cpython2-mac-arm-framework = virtualenv.create.via_global_ref.builtin.cpython.mac_os:CPython2macOsArmFramework'"}, "return_value": "True"}, {"func_args": {"str": "'cpython2-mac-framework = virtualenv.create.via_global_ref.builtin.cpython.mac_os:CPython2macOsFramework'"}, "return_value": "True"}, {"func_args": {"str": "'cpython2-posix = virtualenv.create.via_global_ref.builtin.cpython.cpython2:CPython2Posix'"}, "return_value": "True"}, {"func_args": {"str": "'cpython2-win = virtualenv.create.via_global_ref.builtin.cpython.cpython2:CPython2Windows'"}, "return_value": "True"}, {"func_args": {"str": "'cpython3-mac-framework = virtualenv.create.via_global_ref.builtin.cpython.mac_os:CPython3macOsFramework'"}, "return_value": "True"}, {"func_args": {"str": "'cpython3-posix = virtualenv.create.via_global_ref.builtin.cpython.cpython3:CPython3Posix'"}, "return_value": "True"}, {"func_args": {"str": "'cpython3-win = virtualenv.create.via_global_ref.builtin.cpython.cpython3:CPython3Windows'"}, "return_value": "True"}, {"func_args": {"str": "'pypy2-posix = virtualenv.create.via_global_ref.builtin.pypy.pypy2:PyPy2Posix'"}, "return_value": "True"}, {"func_args": {"str": "'pypy2-win = virtualenv.create.via_global_ref.builtin.pypy.pypy2:Pypy2Windows'"}, "return_value": "True"}, {"func_args": {"str": "'pypy3-posix = virtualenv.create.via_global_ref.builtin.pypy.pypy3:PyPy3Posix'"}, "return_value": "True"}, {"func_args": {"str": "'pypy3-win = virtualenv.create.via_global_ref.builtin.pypy.pypy3:Pypy3Windows'"}, "return_value": "True"}, {"func_args": {"str": "'venv = virtualenv.create.via_global_ref.venv:Venv'"}, "return_value": "True"}, {"func_args": {"str": "'builtin = virtualenv.discovery.builtin:Builtin'"}, "return_value": "True"}, {"func_args": {"str": "'builtin = virtualenv.discovery.builtin:Builtin'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'[virtualenv.seed]'"}, "return_value": "True"}, {"func_args": {"str": "'[virtualenv.seed]'"}, "return_value": "True"}, {"func_args": {"str": "'builtin = virtualenv.discovery.builtin:Builtin'"}, "return_value": "True"}, {"func_args": {"str": "'app-data = virtualenv.seed.embed.via_app_data.via_app_data:FromAppData'"}, "return_value": "True"}, {"func_args": {"str": "'app-data = virtualenv.seed.embed.via_app_data.via_app_data:FromAppData'"}, "return_value": "True"}, {"func_args": {"str": "'pip = virtualenv.seed.embed.pip_invoke:PipInvoke'"}, "return_value": "True"}, {"func_args": {"str": "'pip = virtualenv.seed.embed.pip_invoke:PipInvoke'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'app-data = virtualenv.seed.embed.via_app_data.via_app_data:FromAppData'"}, "return_value": "True"}, {"func_args": {"str": "'pip = virtualenv.seed.embed.pip_invoke:PipInvoke'"}, "return_value": "True"}, {"func_args": {"str": "'[console_scripts]'"}, "return_value": "True"}, {"func_args": {"str": "'[console_scripts]'"}, "return_value": "True"}, {"func_args": {"str": "'py.test = pytest:console_main'"}, "return_value": "True"}, {"func_args": {"str": "'py.test = pytest:console_main'"}, "return_value": "True"}, {"func_args": {"str": "'pytest = pytest:console_main'"}, "return_value": "True"}, {"func_args": {"str": "'pytest = pytest:console_main'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'py.test = pytest:console_main'"}, "return_value": "True"}, {"func_args": {"str": "'pytest = pytest:console_main'"}, "return_value": "True"}, {"func_args": {"str": "'[console_scripts]'"}, "return_value": "True"}, {"func_args": {"str": "'[console_scripts]'"}, "return_value": "True"}, {"func_args": {"str": "'coverage = coverage.cmdline:main'"}, "return_value": "True"}, {"func_args": {"str": "'coverage = coverage.cmdline:main'"}, "return_value": "True"}, {"func_args": {"str": "'coverage-3.8 = coverage.cmdline:main'"}, "return_value": "True"}, {"func_args": {"str": "'coverage-3.8 = coverage.cmdline:main'"}, "return_value": "True"}, {"func_args": {"str": "'coverage3 = coverage.cmdline:main'"}, "return_value": "True"}, {"func_args": {"str": "'coverage3 = coverage.cmdline:main'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'coverage = coverage.cmdline:main'"}, "return_value": "True"}, {"func_args": {"str": "'coverage-3.8 = coverage.cmdline:main'"}, "return_value": "True"}, {"func_args": {"str": "'coverage3 = coverage.cmdline:main'"}, "return_value": "True"}, {"func_args": {"str": "'[console_scripts]'"}, "return_value": "True"}, {"func_args": {"str": "'[console_scripts]'"}, "return_value": "True"}, {"func_args": {"str": "'tox = tox:cmdline'"}, "return_value": "True"}, {"func_args": {"str": "'tox = tox:cmdline'"}, "return_value": "True"}, {"func_args": {"str": "'tox-quickstart = tox._quickstart:main'"}, "return_value": "True"}, {"func_args": {"str": "'tox-quickstart = tox._quickstart:main'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'tox = tox:cmdline'"}, "return_value": "True"}, {"func_args": {"str": "'tox-quickstart = tox._quickstart:main'"}, "return_value": "True"}, {"func_args": {"str": "'[pytest11]'"}, "return_value": "True"}, {"func_args": {"str": "'[pytest11]'"}, "return_value": "True"}, {"func_args": {"str": "'randomly = pytest_randomly'"}, "return_value": "True"}, {"func_args": {"str": "'randomly = pytest_randomly'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'randomly = pytest_randomly'"}, "return_value": "True"}, {"func_args": {"str": "'[nose.plugins.0.10]'"}, "return_value": "True"}, {"func_args": {"str": "'[nose.plugins.0.10]'"}, "return_value": "True"}, {"func_args": {"str": "'flaky = flaky.flaky_nose_plugin:FlakyPlugin'"}, "return_value": "True"}, {"func_args": {"str": "'flaky = flaky.flaky_nose_plugin:FlakyPlugin'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'[pytest11]'"}, "return_value": "True"}, {"func_args": {"str": "'[pytest11]'"}, "return_value": "True"}, {"func_args": {"str": "'flaky = flaky.flaky_nose_plugin:FlakyPlugin'"}, "return_value": "True"}, {"func_args": {"str": "'flaky = flaky.flaky_pytest_plugin'"}, "return_value": "True"}, {"func_args": {"str": "'flaky = flaky.flaky_pytest_plugin'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'flaky = flaky.flaky_pytest_plugin'"}, "return_value": "True"}, {"func_args": {"str": "'[pytest11]'"}, "return_value": "True"}, {"func_args": {"str": "'[pytest11]'"}, "return_value": "True"}, {"func_args": {"str": "'pytest_mock = pytest_mock'"}, "return_value": "True"}, {"func_args": {"str": "'pytest_mock = pytest_mock'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'pytest_mock = pytest_mock'"}, "return_value": "True"}, {"func_args": {"str": "'[pytest11]'"}, "return_value": "True"}, {"func_args": {"str": "'[pytest11]'"}, "return_value": "True"}, {"func_args": {"str": "'pytest_cov = pytest_cov.plugin'"}, "return_value": "True"}, {"func_args": {"str": "'pytest_cov = pytest_cov.plugin'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'pytest_cov = pytest_cov.plugin'"}, "return_value": "True"}, {"func_args": {"str": "'[console_scripts]'"}, "return_value": "True"}, {"func_args": {"str": "'[console_scripts]'"}, "return_value": "True"}, {"func_args": {"str": "'wheel = wheel.cli:main'"}, "return_value": "True"}, {"func_args": {"str": "'wheel = wheel.cli:main'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'[distutils.commands]'"}, "return_value": "True"}, {"func_args": {"str": "'[distutils.commands]'"}, "return_value": "True"}, {"func_args": {"str": "'wheel = wheel.cli:main'"}, "return_value": "True"}, {"func_args": {"str": "'bdist_wheel = wheel.bdist_wheel:bdist_wheel'"}, "return_value": "True"}, {"func_args": {"str": "'bdist_wheel = wheel.bdist_wheel:bdist_wheel'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'bdist_wheel = wheel.bdist_wheel:bdist_wheel'"}, "return_value": "True"}, {"func_args": {"str": "'[console_scripts]'"}, "return_value": "True"}, {"func_args": {"str": "'[console_scripts]'"}, "return_value": "True"}, {"func_args": {"str": "'vdb = viztracer:sim_main'"}, "return_value": "True"}, {"func_args": {"str": "'vdb = viztracer:sim_main'"}, "return_value": "True"}, {"func_args": {"str": "'viztracer = viztracer:main'"}, "return_value": "True"}, {"func_args": {"str": "'viztracer = viztracer:main'"}, "return_value": "True"}, {"func_args": {"str": "'vizviewer = viztracer:viewer_main'"}, "return_value": "True"}, {"func_args": {"str": "'vizviewer = viztracer:viewer_main'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'vdb = viztracer:sim_main'"}, "return_value": "True"}, {"func_args": {"str": "'viztracer = viztracer:main'"}, "return_value": "True"}, {"func_args": {"str": "'vizviewer = viztracer:viewer_main'"}, "return_value": "True"}, {"func_args": {"str": "'setuptools'"}, "return_value": "True"}, {"func_args": {"str": "'setuptools'"}, "return_value": "True"}, {"func_args": {"str": "\"sphinx ; extra == 'docs'\""}, "return_value": "True"}, {"func_args": {"str": "\"jaraco.packaging (>=8.2) ; extra == 'docs'\""}, "return_value": "True"}, {"func_args": {"str": "\"rst.linker (>=1.9) ; extra == 'docs'\""}, "return_value": "True"}, {"func_args": {"str": "\"jaraco.tidelift (>=1.4) ; extra == 'docs'\""}, "return_value": "True"}, {"func_args": {"str": "\"pygments-github-lexers (==0.0.5) ; extra == 'docs'\""}, "return_value": "True"}, {"func_args": {"str": "\"sphinx-inline-tabs ; extra == 'docs'\""}, "return_value": "True"}, {"func_args": {"str": "\"sphinxcontrib-towncrier ; extra == 'docs'\""}, "return_value": "True"}, {"func_args": {"str": "\"furo ; extra == 'docs'\""}, "return_value": "True"}, {"func_args": {"str": "\"pytest (>=6) ; extra == 'testing'\""}, "return_value": "True"}, {"func_args": {"str": "\"pytest-checkdocs (>=2.4) ; extra == 'testing'\""}, "return_value": "True"}, {"func_args": {"str": "\"pytest-flake8 ; extra == 'testing'\""}, "return_value": "True"}, {"func_args": {"str": "\"pytest-cov ; extra == 'testing'\""}, "return_value": "True"}, {"func_args": {"str": "\"pytest-enabler (>=1.0.1) ; extra == 'testing'\""}, "return_value": "True"}, {"func_args": {"str": "\"mock ; extra == 'testing'\""}, "return_value": "True"}, {"func_args": {"str": "\"flake8-2020 ; extra == 'testing'\""}, "return_value": "True"}, {"func_args": {"str": "\"virtualenv (>=13.0.0) ; extra == 'testing'\""}, "return_value": "True"}, {"func_args": {"str": "\"pytest-virtualenv (>=1.2.7) ; extra == 'testing'\""}, "return_value": "True"}, {"func_args": {"str": "\"wheel ; extra == 'testing'\""}, "return_value": "True"}, {"func_args": {"str": "\"paver ; extra == 'testing'\""}, "return_value": "True"}, {"func_args": {"str": "\"pip (>=19.1) ; extra == 'testing'\""}, "return_value": "True"}, {"func_args": {"str": "\"jaraco.envs (>=2.2) ; extra == 'testing'\""}, "return_value": "True"}, {"func_args": {"str": "\"pytest-xdist ; extra == 'testing'\""}, "return_value": "True"}, {"func_args": {"str": "\"sphinx ; extra == 'testing'\""}, "return_value": "True"}, {"func_args": {"str": "\"jaraco.path (>=3.2.0) ; extra == 'testing'\""}, "return_value": "True"}, {"func_args": {"str": "'pytest-black (>=0.3.7) ; (platform_python_implementation != \"PyPy\") and extra == \\'testing\\''"}, "return_value": "True"}, {"func_args": {"str": "'pytest-mypy ; (platform_python_implementation != \"PyPy\") and extra == \\'testing\\''"}, "return_value": "True"}, {"func_args": {"str": "'setuptools'"}, "return_value": "True"}, {"func_args": {"str": "'setuptools'"}, "return_value": "True"}, {"func_args": {"str": "'example123===0.6'"}, "return_value": "True"}, {"func_args": {"str": "'[distutils.commands]'"}, "return_value": "True"}, {"func_args": {"str": "'[distutils.commands]'"}, "return_value": "True"}, {"func_args": {"str": "'alias = setuptools.command.alias:alias'"}, "return_value": "True"}, {"func_args": {"str": "'alias = setuptools.command.alias:alias'"}, "return_value": "True"}, {"func_args": {"str": "'bdist_egg = setuptools.command.bdist_egg:bdist_egg'"}, "return_value": "True"}, {"func_args": {"str": "'bdist_egg = setuptools.command.bdist_egg:bdist_egg'"}, "return_value": "True"}, {"func_args": {"str": "'bdist_rpm = setuptools.command.bdist_rpm:bdist_rpm'"}, "return_value": "True"}, {"func_args": {"str": "'bdist_rpm = setuptools.command.bdist_rpm:bdist_rpm'"}, "return_value": "True"}, {"func_args": {"str": "'build_clib = setuptools.command.build_clib:build_clib'"}, "return_value": "True"}, {"func_args": {"str": "'build_clib = setuptools.command.build_clib:build_clib'"}, "return_value": "True"}, {"func_args": {"str": "'build_ext = setuptools.command.build_ext:build_ext'"}, "return_value": "True"}, {"func_args": {"str": "'build_ext = setuptools.command.build_ext:build_ext'"}, "return_value": "True"}, {"func_args": {"str": "'build_py = setuptools.command.build_py:build_py'"}, "return_value": "True"}, {"func_args": {"str": "'build_py = setuptools.command.build_py:build_py'"}, "return_value": "True"}, {"func_args": {"str": "'develop = setuptools.command.develop:develop'"}, "return_value": "True"}, {"func_args": {"str": "'develop = setuptools.command.develop:develop'"}, "return_value": "True"}, {"func_args": {"str": "'dist_info = setuptools.command.dist_info:dist_info'"}, "return_value": "True"}, {"func_args": {"str": "'dist_info = setuptools.command.dist_info:dist_info'"}, "return_value": "True"}, {"func_args": {"str": "'easy_install = setuptools.command.easy_install:easy_install'"}, "return_value": "True"}, {"func_args": {"str": "'easy_install = setuptools.command.easy_install:easy_install'"}, "return_value": "True"}, {"func_args": {"str": "'egg_info = setuptools.command.egg_info:egg_info'"}, "return_value": "True"}, {"func_args": {"str": "'egg_info = setuptools.command.egg_info:egg_info'"}, "return_value": "True"}, {"func_args": {"str": "'install = setuptools.command.install:install'"}, "return_value": "True"}, {"func_args": {"str": "'install = setuptools.command.install:install'"}, "return_value": "True"}, {"func_args": {"str": "'install_egg_info = setuptools.command.install_egg_info:install_egg_info'"}, "return_value": "True"}, {"func_args": {"str": "'install_egg_info = setuptools.command.install_egg_info:install_egg_info'"}, "return_value": "True"}, {"func_args": {"str": "'install_lib = setuptools.command.install_lib:install_lib'"}, "return_value": "True"}, {"func_args": {"str": "'install_lib = setuptools.command.install_lib:install_lib'"}, "return_value": "True"}, {"func_args": {"str": "'install_scripts = setuptools.command.install_scripts:install_scripts'"}, "return_value": "True"}, {"func_args": {"str": "'install_scripts = setuptools.command.install_scripts:install_scripts'"}, "return_value": "True"}, {"func_args": {"str": "'rotate = setuptools.command.rotate:rotate'"}, "return_value": "True"}, {"func_args": {"str": "'rotate = setuptools.command.rotate:rotate'"}, "return_value": "True"}, {"func_args": {"str": "'saveopts = setuptools.command.saveopts:saveopts'"}, "return_value": "True"}, {"func_args": {"str": "'saveopts = setuptools.command.saveopts:saveopts'"}, "return_value": "True"}, {"func_args": {"str": "'sdist = setuptools.command.sdist:sdist'"}, "return_value": "True"}, {"func_args": {"str": "'sdist = setuptools.command.sdist:sdist'"}, "return_value": "True"}, {"func_args": {"str": "'setopt = setuptools.command.setopt:setopt'"}, "return_value": "True"}, {"func_args": {"str": "'setopt = setuptools.command.setopt:setopt'"}, "return_value": "True"}, {"func_args": {"str": "'test = setuptools.command.test:test'"}, "return_value": "True"}, {"func_args": {"str": "'test = setuptools.command.test:test'"}, "return_value": "True"}, {"func_args": {"str": "'upload_docs = setuptools.command.upload_docs:upload_docs'"}, "return_value": "True"}, {"func_args": {"str": "'upload_docs = setuptools.command.upload_docs:upload_docs'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'[distutils.setup_keywords]'"}, "return_value": "True"}, {"func_args": {"str": "'[distutils.setup_keywords]'"}, "return_value": "True"}, {"func_args": {"str": "'alias = setuptools.command.alias:alias'"}, "return_value": "True"}, {"func_args": {"str": "'bdist_egg = setuptools.command.bdist_egg:bdist_egg'"}, "return_value": "True"}, {"func_args": {"str": "'bdist_rpm = setuptools.command.bdist_rpm:bdist_rpm'"}, "return_value": "True"}, {"func_args": {"str": "'build_clib = setuptools.command.build_clib:build_clib'"}, "return_value": "True"}, {"func_args": {"str": "'build_ext = setuptools.command.build_ext:build_ext'"}, "return_value": "True"}, {"func_args": {"str": "'build_py = setuptools.command.build_py:build_py'"}, "return_value": "True"}, {"func_args": {"str": "'develop = setuptools.command.develop:develop'"}, "return_value": "True"}, {"func_args": {"str": "'dist_info = setuptools.command.dist_info:dist_info'"}, "return_value": "True"}, {"func_args": {"str": "'easy_install = setuptools.command.easy_install:easy_install'"}, "return_value": "True"}, {"func_args": {"str": "'egg_info = setuptools.command.egg_info:egg_info'"}, "return_value": "True"}, {"func_args": {"str": "'install = setuptools.command.install:install'"}, "return_value": "True"}, {"func_args": {"str": "'install_egg_info = setuptools.command.install_egg_info:install_egg_info'"}, "return_value": "True"}, {"func_args": {"str": "'install_lib = setuptools.command.install_lib:install_lib'"}, "return_value": "True"}, {"func_args": {"str": "'install_scripts = setuptools.command.install_scripts:install_scripts'"}, "return_value": "True"}, {"func_args": {"str": "'rotate = setuptools.command.rotate:rotate'"}, "return_value": "True"}, {"func_args": {"str": "'saveopts = setuptools.command.saveopts:saveopts'"}, "return_value": "True"}, {"func_args": {"str": "'sdist = setuptools.command.sdist:sdist'"}, "return_value": "True"}, {"func_args": {"str": "'setopt = setuptools.command.setopt:setopt'"}, "return_value": "True"}, {"func_args": {"str": "'test = setuptools.command.test:test'"}, "return_value": "True"}, {"func_args": {"str": "'upload_docs = setuptools.command.upload_docs:upload_docs'"}, "return_value": "True"}, {"func_args": {"str": "'dependency_links = setuptools.dist:assert_string_list'"}, "return_value": "True"}, {"func_args": {"str": "'dependency_links = setuptools.dist:assert_string_list'"}, "return_value": "True"}, {"func_args": {"str": "'eager_resources = setuptools.dist:assert_string_list'"}, "return_value": "True"}, {"func_args": {"str": "'eager_resources = setuptools.dist:assert_string_list'"}, "return_value": "True"}, {"func_args": {"str": "'entry_points = setuptools.dist:check_entry_points'"}, "return_value": "True"}, {"func_args": {"str": "'entry_points = setuptools.dist:check_entry_points'"}, "return_value": "True"}, {"func_args": {"str": "'exclude_package_data = setuptools.dist:check_package_data'"}, "return_value": "True"}, {"func_args": {"str": "'exclude_package_data = setuptools.dist:check_package_data'"}, "return_value": "True"}, {"func_args": {"str": "'extras_require = setuptools.dist:check_extras'"}, "return_value": "True"}, {"func_args": {"str": "'extras_require = setuptools.dist:check_extras'"}, "return_value": "True"}, {"func_args": {"str": "'include_package_data = setuptools.dist:assert_bool'"}, "return_value": "True"}, {"func_args": {"str": "'include_package_data = setuptools.dist:assert_bool'"}, "return_value": "True"}, {"func_args": {"str": "'install_requires = setuptools.dist:check_requirements'"}, "return_value": "True"}, {"func_args": {"str": "'install_requires = setuptools.dist:check_requirements'"}, "return_value": "True"}, {"func_args": {"str": "'namespace_packages = setuptools.dist:check_nsp'"}, "return_value": "True"}, {"func_args": {"str": "'namespace_packages = setuptools.dist:check_nsp'"}, "return_value": "True"}, {"func_args": {"str": "'package_data = setuptools.dist:check_package_data'"}, "return_value": "True"}, {"func_args": {"str": "'package_data = setuptools.dist:check_package_data'"}, "return_value": "True"}, {"func_args": {"str": "'packages = setuptools.dist:check_packages'"}, "return_value": "True"}, {"func_args": {"str": "'packages = setuptools.dist:check_packages'"}, "return_value": "True"}, {"func_args": {"str": "'python_requires = setuptools.dist:check_specifier'"}, "return_value": "True"}, {"func_args": {"str": "'python_requires = setuptools.dist:check_specifier'"}, "return_value": "True"}, {"func_args": {"str": "'setup_requires = setuptools.dist:check_requirements'"}, "return_value": "True"}, {"func_args": {"str": "'setup_requires = setuptools.dist:check_requirements'"}, "return_value": "True"}, {"func_args": {"str": "'test_loader = setuptools.dist:check_importable'"}, "return_value": "True"}, {"func_args": {"str": "'test_loader = setuptools.dist:check_importable'"}, "return_value": "True"}, {"func_args": {"str": "'test_runner = setuptools.dist:check_importable'"}, "return_value": "True"}, {"func_args": {"str": "'test_runner = setuptools.dist:check_importable'"}, "return_value": "True"}, {"func_args": {"str": "'test_suite = setuptools.dist:check_test_suite'"}, "return_value": "True"}, {"func_args": {"str": "'test_suite = setuptools.dist:check_test_suite'"}, "return_value": "True"}, {"func_args": {"str": "'tests_require = setuptools.dist:check_requirements'"}, "return_value": "True"}, {"func_args": {"str": "'tests_require = setuptools.dist:check_requirements'"}, "return_value": "True"}, {"func_args": {"str": "'use_2to3 = setuptools.dist:invalid_unless_false'"}, "return_value": "True"}, {"func_args": {"str": "'use_2to3 = setuptools.dist:invalid_unless_false'"}, "return_value": "True"}, {"func_args": {"str": "'zip_safe = setuptools.dist:assert_bool'"}, "return_value": "True"}, {"func_args": {"str": "'zip_safe = setuptools.dist:assert_bool'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'[egg_info.writers]'"}, "return_value": "True"}, {"func_args": {"str": "'[egg_info.writers]'"}, "return_value": "True"}, {"func_args": {"str": "'dependency_links = setuptools.dist:assert_string_list'"}, "return_value": "True"}, {"func_args": {"str": "'eager_resources = setuptools.dist:assert_string_list'"}, "return_value": "True"}, {"func_args": {"str": "'entry_points = setuptools.dist:check_entry_points'"}, "return_value": "True"}, {"func_args": {"str": "'exclude_package_data = setuptools.dist:check_package_data'"}, "return_value": "True"}, {"func_args": {"str": "'extras_require = setuptools.dist:check_extras'"}, "return_value": "True"}, {"func_args": {"str": "'include_package_data = setuptools.dist:assert_bool'"}, "return_value": "True"}, {"func_args": {"str": "'install_requires = setuptools.dist:check_requirements'"}, "return_value": "True"}, {"func_args": {"str": "'namespace_packages = setuptools.dist:check_nsp'"}, "return_value": "True"}, {"func_args": {"str": "'package_data = setuptools.dist:check_package_data'"}, "return_value": "True"}, {"func_args": {"str": "'packages = setuptools.dist:check_packages'"}, "return_value": "True"}, {"func_args": {"str": "'python_requires = setuptools.dist:check_specifier'"}, "return_value": "True"}, {"func_args": {"str": "'setup_requires = setuptools.dist:check_requirements'"}, "return_value": "True"}, {"func_args": {"str": "'test_loader = setuptools.dist:check_importable'"}, "return_value": "True"}, {"func_args": {"str": "'test_runner = setuptools.dist:check_importable'"}, "return_value": "True"}, {"func_args": {"str": "'test_suite = setuptools.dist:check_test_suite'"}, "return_value": "True"}, {"func_args": {"str": "'tests_require = setuptools.dist:check_requirements'"}, "return_value": "True"}, {"func_args": {"str": "'use_2to3 = setuptools.dist:invalid_unless_false'"}, "return_value": "True"}, {"func_args": {"str": "'zip_safe = setuptools.dist:assert_bool'"}, "return_value": "True"}, {"func_args": {"str": "'PKG-INFO = setuptools.command.egg_info:write_pkg_info'"}, "return_value": "True"}, {"func_args": {"str": "'PKG-INFO = setuptools.command.egg_info:write_pkg_info'"}, "return_value": "True"}, {"func_args": {"str": "'dependency_links.txt = setuptools.command.egg_info:overwrite_arg'"}, "return_value": "True"}, {"func_args": {"str": "'dependency_links.txt = setuptools.command.egg_info:overwrite_arg'"}, "return_value": "True"}, {"func_args": {"str": "'depends.txt = setuptools.command.egg_info:warn_depends_obsolete'"}, "return_value": "True"}, {"func_args": {"str": "'depends.txt = setuptools.command.egg_info:warn_depends_obsolete'"}, "return_value": "True"}, {"func_args": {"str": "'eager_resources.txt = setuptools.command.egg_info:overwrite_arg'"}, "return_value": "True"}, {"func_args": {"str": "'eager_resources.txt = setuptools.command.egg_info:overwrite_arg'"}, "return_value": "True"}, {"func_args": {"str": "'entry_points.txt = setuptools.command.egg_info:write_entries'"}, "return_value": "True"}, {"func_args": {"str": "'entry_points.txt = setuptools.command.egg_info:write_entries'"}, "return_value": "True"}, {"func_args": {"str": "'namespace_packages.txt = setuptools.command.egg_info:overwrite_arg'"}, "return_value": "True"}, {"func_args": {"str": "'namespace_packages.txt = setuptools.command.egg_info:overwrite_arg'"}, "return_value": "True"}, {"func_args": {"str": "'requires.txt = setuptools.command.egg_info:write_requirements'"}, "return_value": "True"}, {"func_args": {"str": "'requires.txt = setuptools.command.egg_info:write_requirements'"}, "return_value": "True"}, {"func_args": {"str": "'top_level.txt = setuptools.command.egg_info:write_toplevel_names'"}, "return_value": "True"}, {"func_args": {"str": "'top_level.txt = setuptools.command.egg_info:write_toplevel_names'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'[setuptools.finalize_distribution_options]'"}, "return_value": "True"}, {"func_args": {"str": "'[setuptools.finalize_distribution_options]'"}, "return_value": "True"}, {"func_args": {"str": "'PKG-INFO = setuptools.command.egg_info:write_pkg_info'"}, "return_value": "True"}, {"func_args": {"str": "'dependency_links.txt = setuptools.command.egg_info:overwrite_arg'"}, "return_value": "True"}, {"func_args": {"str": "'depends.txt = setuptools.command.egg_info:warn_depends_obsolete'"}, "return_value": "True"}, {"func_args": {"str": "'eager_resources.txt = setuptools.command.egg_info:overwrite_arg'"}, "return_value": "True"}, {"func_args": {"str": "'entry_points.txt = setuptools.command.egg_info:write_entries'"}, "return_value": "True"}, {"func_args": {"str": "'namespace_packages.txt = setuptools.command.egg_info:overwrite_arg'"}, "return_value": "True"}, {"func_args": {"str": "'requires.txt = setuptools.command.egg_info:write_requirements'"}, "return_value": "True"}, {"func_args": {"str": "'top_level.txt = setuptools.command.egg_info:write_toplevel_names'"}, "return_value": "True"}, {"func_args": {"str": "'keywords = setuptools.dist:Distribution._finalize_setup_keywords'"}, "return_value": "True"}, {"func_args": {"str": "'keywords = setuptools.dist:Distribution._finalize_setup_keywords'"}, "return_value": "True"}, {"func_args": {"str": "'parent_finalize = setuptools.dist:_Distribution.finalize_options'"}, "return_value": "True"}, {"func_args": {"str": "'parent_finalize = setuptools.dist:_Distribution.finalize_options'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'keywords = setuptools.dist:Distribution._finalize_setup_keywords'"}, "return_value": "True"}, {"func_args": {"str": "'parent_finalize = setuptools.dist:_Distribution.finalize_options'"}, "return_value": "True"}, {"func_args": {"str": "'[console_scripts]'"}, "return_value": "True"}, {"func_args": {"str": "'[console_scripts]'"}, "return_value": "True"}, {"func_args": {"str": "'pip = pip._internal.cli.main:main'"}, "return_value": "True"}, {"func_args": {"str": "'pip = pip._internal.cli.main:main'"}, "return_value": "True"}, {"func_args": {"str": "'pip3 = pip._internal.cli.main:main'"}, "return_value": "True"}, {"func_args": {"str": "'pip3 = pip._internal.cli.main:main'"}, "return_value": "True"}, {"func_args": {"str": "'pip3.9 = pip._internal.cli.main:main'"}, "return_value": "True"}, {"func_args": {"str": "'pip3.9 = pip._internal.cli.main:main'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'pip = pip._internal.cli.main:main'"}, "return_value": "True"}, {"func_args": {"str": "'pip3 = pip._internal.cli.main:main'"}, "return_value": "True"}, {"func_args": {"str": "'pip3.9 = pip._internal.cli.main:main'"}, "return_value": "True"}, {"func_args": {"str": "'[console_scripts]'"}, "return_value": "True"}, {"func_args": {"str": "'[console_scripts]'"}, "return_value": "True"}, {"func_args": {"str": "'virtualenv = virtualenv.__main__:run_with_catch'"}, "return_value": "True"}, {"func_args": {"str": "'virtualenv = virtualenv.__main__:run_with_catch'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'[virtualenv.activate]'"}, "return_value": "True"}, {"func_args": {"str": "'[virtualenv.activate]'"}, "return_value": "True"}, {"func_args": {"str": "'virtualenv = virtualenv.__main__:run_with_catch'"}, "return_value": "True"}, {"func_args": {"str": "'bash = virtualenv.activation.bash:BashActivator'"}, "return_value": "True"}, {"func_args": {"str": "'bash = virtualenv.activation.bash:BashActivator'"}, "return_value": "True"}, {"func_args": {"str": "'batch = virtualenv.activation.batch:BatchActivator'"}, "return_value": "True"}, {"func_args": {"str": "'batch = virtualenv.activation.batch:BatchActivator'"}, "return_value": "True"}, {"func_args": {"str": "'cshell = virtualenv.activation.cshell:CShellActivator'"}, "return_value": "True"}, {"func_args": {"str": "'cshell = virtualenv.activation.cshell:CShellActivator'"}, "return_value": "True"}, {"func_args": {"str": "'fish = virtualenv.activation.fish:FishActivator'"}, "return_value": "True"}, {"func_args": {"str": "'fish = virtualenv.activation.fish:FishActivator'"}, "return_value": "True"}, {"func_args": {"str": "'nushell = virtualenv.activation.nushell:NushellActivator'"}, "return_value": "True"}, {"func_args": {"str": "'nushell = virtualenv.activation.nushell:NushellActivator'"}, "return_value": "True"}, {"func_args": {"str": "'powershell = virtualenv.activation.powershell:PowerShellActivator'"}, "return_value": "True"}, {"func_args": {"str": "'powershell = virtualenv.activation.powershell:PowerShellActivator'"}, "return_value": "True"}, {"func_args": {"str": "'python = virtualenv.activation.python:PythonActivator'"}, "return_value": "True"}, {"func_args": {"str": "'python = virtualenv.activation.python:PythonActivator'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'[virtualenv.create]'"}, "return_value": "True"}, {"func_args": {"str": "'[virtualenv.create]'"}, "return_value": "True"}, {"func_args": {"str": "'bash = virtualenv.activation.bash:BashActivator'"}, "return_value": "True"}, {"func_args": {"str": "'batch = virtualenv.activation.batch:BatchActivator'"}, "return_value": "True"}, {"func_args": {"str": "'cshell = virtualenv.activation.cshell:CShellActivator'"}, "return_value": "True"}, {"func_args": {"str": "'fish = virtualenv.activation.fish:FishActivator'"}, "return_value": "True"}, {"func_args": {"str": "'nushell = virtualenv.activation.nushell:NushellActivator'"}, "return_value": "True"}, {"func_args": {"str": "'powershell = virtualenv.activation.powershell:PowerShellActivator'"}, "return_value": "True"}, {"func_args": {"str": "'python = virtualenv.activation.python:PythonActivator'"}, "return_value": "True"}, {"func_args": {"str": "'cpython2-mac-arm-framework = virtualenv.create.via_global_ref.builtin.cpython.mac_os:CPython2macOsArmFramework'"}, "return_value": "True"}, {"func_args": {"str": "'cpython2-mac-arm-framework = virtualenv.create.via_global_ref.builtin.cpython.mac_os:CPython2macOsArmFramework'"}, "return_value": "True"}, {"func_args": {"str": "'cpython2-mac-framework = virtualenv.create.via_global_ref.builtin.cpython.mac_os:CPython2macOsFramework'"}, "return_value": "True"}, {"func_args": {"str": "'cpython2-mac-framework = virtualenv.create.via_global_ref.builtin.cpython.mac_os:CPython2macOsFramework'"}, "return_value": "True"}, {"func_args": {"str": "'cpython2-posix = virtualenv.create.via_global_ref.builtin.cpython.cpython2:CPython2Posix'"}, "return_value": "True"}, {"func_args": {"str": "'cpython2-posix = virtualenv.create.via_global_ref.builtin.cpython.cpython2:CPython2Posix'"}, "return_value": "True"}, {"func_args": {"str": "'cpython2-win = virtualenv.create.via_global_ref.builtin.cpython.cpython2:CPython2Windows'"}, "return_value": "True"}, {"func_args": {"str": "'cpython2-win = virtualenv.create.via_global_ref.builtin.cpython.cpython2:CPython2Windows'"}, "return_value": "True"}, {"func_args": {"str": "'cpython3-mac-framework = virtualenv.create.via_global_ref.builtin.cpython.mac_os:CPython3macOsFramework'"}, "return_value": "True"}, {"func_args": {"str": "'cpython3-mac-framework = virtualenv.create.via_global_ref.builtin.cpython.mac_os:CPython3macOsFramework'"}, "return_value": "True"}, {"func_args": {"str": "'cpython3-posix = virtualenv.create.via_global_ref.builtin.cpython.cpython3:CPython3Posix'"}, "return_value": "True"}, {"func_args": {"str": "'cpython3-posix = virtualenv.create.via_global_ref.builtin.cpython.cpython3:CPython3Posix'"}, "return_value": "True"}, {"func_args": {"str": "'cpython3-win = virtualenv.create.via_global_ref.builtin.cpython.cpython3:CPython3Windows'"}, "return_value": "True"}, {"func_args": {"str": "'cpython3-win = virtualenv.create.via_global_ref.builtin.cpython.cpython3:CPython3Windows'"}, "return_value": "True"}, {"func_args": {"str": "'pypy2-posix = virtualenv.create.via_global_ref.builtin.pypy.pypy2:PyPy2Posix'"}, "return_value": "True"}, {"func_args": {"str": "'pypy2-posix = virtualenv.create.via_global_ref.builtin.pypy.pypy2:PyPy2Posix'"}, "return_value": "True"}, {"func_args": {"str": "'pypy2-win = virtualenv.create.via_global_ref.builtin.pypy.pypy2:Pypy2Windows'"}, "return_value": "True"}, {"func_args": {"str": "'pypy2-win = virtualenv.create.via_global_ref.builtin.pypy.pypy2:Pypy2Windows'"}, "return_value": "True"}, {"func_args": {"str": "'pypy3-posix = virtualenv.create.via_global_ref.builtin.pypy.pypy3:PyPy3Posix'"}, "return_value": "True"}, {"func_args": {"str": "'pypy3-posix = virtualenv.create.via_global_ref.builtin.pypy.pypy3:PyPy3Posix'"}, "return_value": "True"}, {"func_args": {"str": "'pypy3-win = virtualenv.create.via_global_ref.builtin.pypy.pypy3:Pypy3Windows'"}, "return_value": "True"}, {"func_args": {"str": "'pypy3-win = virtualenv.create.via_global_ref.builtin.pypy.pypy3:Pypy3Windows'"}, "return_value": "True"}, {"func_args": {"str": "'venv = virtualenv.create.via_global_ref.venv:Venv'"}, "return_value": "True"}, {"func_args": {"str": "'venv = virtualenv.create.via_global_ref.venv:Venv'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'[virtualenv.discovery]'"}, "return_value": "True"}, {"func_args": {"str": "'[virtualenv.discovery]'"}, "return_value": "True"}, {"func_args": {"str": "'cpython2-mac-arm-framework = virtualenv.create.via_global_ref.builtin.cpython.mac_os:CPython2macOsArmFramework'"}, "return_value": "True"}, {"func_args": {"str": "'cpython2-mac-framework = virtualenv.create.via_global_ref.builtin.cpython.mac_os:CPython2macOsFramework'"}, "return_value": "True"}, {"func_args": {"str": "'cpython2-posix = virtualenv.create.via_global_ref.builtin.cpython.cpython2:CPython2Posix'"}, "return_value": "True"}, {"func_args": {"str": "'cpython2-win = virtualenv.create.via_global_ref.builtin.cpython.cpython2:CPython2Windows'"}, "return_value": "True"}, {"func_args": {"str": "'cpython3-mac-framework = virtualenv.create.via_global_ref.builtin.cpython.mac_os:CPython3macOsFramework'"}, "return_value": "True"}, {"func_args": {"str": "'cpython3-posix = virtualenv.create.via_global_ref.builtin.cpython.cpython3:CPython3Posix'"}, "return_value": "True"}, {"func_args": {"str": "'cpython3-win = virtualenv.create.via_global_ref.builtin.cpython.cpython3:CPython3Windows'"}, "return_value": "True"}, {"func_args": {"str": "'pypy2-posix = virtualenv.create.via_global_ref.builtin.pypy.pypy2:PyPy2Posix'"}, "return_value": "True"}, {"func_args": {"str": "'pypy2-win = virtualenv.create.via_global_ref.builtin.pypy.pypy2:Pypy2Windows'"}, "return_value": "True"}, {"func_args": {"str": "'pypy3-posix = virtualenv.create.via_global_ref.builtin.pypy.pypy3:PyPy3Posix'"}, "return_value": "True"}, {"func_args": {"str": "'pypy3-win = virtualenv.create.via_global_ref.builtin.pypy.pypy3:Pypy3Windows'"}, "return_value": "True"}, {"func_args": {"str": "'venv = virtualenv.create.via_global_ref.venv:Venv'"}, "return_value": "True"}, {"func_args": {"str": "'builtin = virtualenv.discovery.builtin:Builtin'"}, "return_value": "True"}, {"func_args": {"str": "'builtin = virtualenv.discovery.builtin:Builtin'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'[virtualenv.seed]'"}, "return_value": "True"}, {"func_args": {"str": "'[virtualenv.seed]'"}, "return_value": "True"}, {"func_args": {"str": "'builtin = virtualenv.discovery.builtin:Builtin'"}, "return_value": "True"}, {"func_args": {"str": "'app-data = virtualenv.seed.embed.via_app_data.via_app_data:FromAppData'"}, "return_value": "True"}, {"func_args": {"str": "'app-data = virtualenv.seed.embed.via_app_data.via_app_data:FromAppData'"}, "return_value": "True"}, {"func_args": {"str": "'pip = virtualenv.seed.embed.pip_invoke:PipInvoke'"}, "return_value": "True"}, {"func_args": {"str": "'pip = virtualenv.seed.embed.pip_invoke:PipInvoke'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'app-data = virtualenv.seed.embed.via_app_data.via_app_data:FromAppData'"}, "return_value": "True"}, {"func_args": {"str": "'pip = virtualenv.seed.embed.pip_invoke:PipInvoke'"}, "return_value": "True"}, {"func_args": {"str": "'[console_scripts]'"}, "return_value": "True"}, {"func_args": {"str": "'[console_scripts]'"}, "return_value": "True"}, {"func_args": {"str": "'py.test = pytest:console_main'"}, "return_value": "True"}, {"func_args": {"str": "'py.test = pytest:console_main'"}, "return_value": "True"}, {"func_args": {"str": "'pytest = pytest:console_main'"}, "return_value": "True"}, {"func_args": {"str": "'pytest = pytest:console_main'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'py.test = pytest:console_main'"}, "return_value": "True"}, {"func_args": {"str": "'pytest = pytest:console_main'"}, "return_value": "True"}, {"func_args": {"str": "'[console_scripts]'"}, "return_value": "True"}, {"func_args": {"str": "'[console_scripts]'"}, "return_value": "True"}, {"func_args": {"str": "'coverage = coverage.cmdline:main'"}, "return_value": "True"}, {"func_args": {"str": "'coverage = coverage.cmdline:main'"}, "return_value": "True"}, {"func_args": {"str": "'coverage-3.8 = coverage.cmdline:main'"}, "return_value": "True"}, {"func_args": {"str": "'coverage-3.8 = coverage.cmdline:main'"}, "return_value": "True"}, {"func_args": {"str": "'coverage3 = coverage.cmdline:main'"}, "return_value": "True"}, {"func_args": {"str": "'coverage3 = coverage.cmdline:main'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'coverage = coverage.cmdline:main'"}, "return_value": "True"}, {"func_args": {"str": "'coverage-3.8 = coverage.cmdline:main'"}, "return_value": "True"}, {"func_args": {"str": "'coverage3 = coverage.cmdline:main'"}, "return_value": "True"}, {"func_args": {"str": "'[console_scripts]'"}, "return_value": "True"}, {"func_args": {"str": "'[console_scripts]'"}, "return_value": "True"}, {"func_args": {"str": "'tox = tox:cmdline'"}, "return_value": "True"}, {"func_args": {"str": "'tox = tox:cmdline'"}, "return_value": "True"}, {"func_args": {"str": "'tox-quickstart = tox._quickstart:main'"}, "return_value": "True"}, {"func_args": {"str": "'tox-quickstart = tox._quickstart:main'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'tox = tox:cmdline'"}, "return_value": "True"}, {"func_args": {"str": "'tox-quickstart = tox._quickstart:main'"}, "return_value": "True"}, {"func_args": {"str": "'[pytest11]'"}, "return_value": "True"}, {"func_args": {"str": "'[pytest11]'"}, "return_value": "True"}, {"func_args": {"str": "'randomly = pytest_randomly'"}, "return_value": "True"}, {"func_args": {"str": "'randomly = pytest_randomly'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'randomly = pytest_randomly'"}, "return_value": "True"}, {"func_args": {"str": "'[nose.plugins.0.10]'"}, "return_value": "True"}, {"func_args": {"str": "'[nose.plugins.0.10]'"}, "return_value": "True"}, {"func_args": {"str": "'flaky = flaky.flaky_nose_plugin:FlakyPlugin'"}, "return_value": "True"}, {"func_args": {"str": "'flaky = flaky.flaky_nose_plugin:FlakyPlugin'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'[pytest11]'"}, "return_value": "True"}, {"func_args": {"str": "'[pytest11]'"}, "return_value": "True"}, {"func_args": {"str": "'flaky = flaky.flaky_nose_plugin:FlakyPlugin'"}, "return_value": "True"}, {"func_args": {"str": "'flaky = flaky.flaky_pytest_plugin'"}, "return_value": "True"}, {"func_args": {"str": "'flaky = flaky.flaky_pytest_plugin'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'flaky = flaky.flaky_pytest_plugin'"}, "return_value": "True"}, {"func_args": {"str": "'[pytest11]'"}, "return_value": "True"}, {"func_args": {"str": "'[pytest11]'"}, "return_value": "True"}, {"func_args": {"str": "'pytest_mock = pytest_mock'"}, "return_value": "True"}, {"func_args": {"str": "'pytest_mock = pytest_mock'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'pytest_mock = pytest_mock'"}, "return_value": "True"}, {"func_args": {"str": "'[pytest11]'"}, "return_value": "True"}, {"func_args": {"str": "'[pytest11]'"}, "return_value": "True"}, {"func_args": {"str": "'pytest_cov = pytest_cov.plugin'"}, "return_value": "True"}, {"func_args": {"str": "'pytest_cov = pytest_cov.plugin'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'pytest_cov = pytest_cov.plugin'"}, "return_value": "True"}, {"func_args": {"str": "'[console_scripts]'"}, "return_value": "True"}, {"func_args": {"str": "'[console_scripts]'"}, "return_value": "True"}, {"func_args": {"str": "'wheel = wheel.cli:main'"}, "return_value": "True"}, {"func_args": {"str": "'wheel = wheel.cli:main'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'[distutils.commands]'"}, "return_value": "True"}, {"func_args": {"str": "'[distutils.commands]'"}, "return_value": "True"}, {"func_args": {"str": "'wheel = wheel.cli:main'"}, "return_value": "True"}, {"func_args": {"str": "'bdist_wheel = wheel.bdist_wheel:bdist_wheel'"}, "return_value": "True"}, {"func_args": {"str": "'bdist_wheel = wheel.bdist_wheel:bdist_wheel'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'bdist_wheel = wheel.bdist_wheel:bdist_wheel'"}, "return_value": "True"}, {"func_args": {"str": "'[console_scripts]'"}, "return_value": "True"}, {"func_args": {"str": "'[console_scripts]'"}, "return_value": "True"}, {"func_args": {"str": "'vdb = viztracer:sim_main'"}, "return_value": "True"}, {"func_args": {"str": "'vdb = viztracer:sim_main'"}, "return_value": "True"}, {"func_args": {"str": "'viztracer = viztracer:main'"}, "return_value": "True"}, {"func_args": {"str": "'viztracer = viztracer:main'"}, "return_value": "True"}, {"func_args": {"str": "'vizviewer = viztracer:viewer_main'"}, "return_value": "True"}, {"func_args": {"str": "'vizviewer = viztracer:viewer_main'"}, "return_value": "True"}, {"func_args": {"str": "''"}, "return_value": "''"}, {"func_args": {"str": "'vdb = viztracer:sim_main'"}, "return_value": "True"}, {"func_args": {"str": "'viztracer = viztracer:main'"}, "return_value": "True"}, {"func_args": {"str": "'vizviewer = viztracer:viewer_main'"}, "return_value": "True"}, {"func_args": {"str": "'setuptools'"}, "return_value": "True"}, {"func_args": {"str": "'setuptools'"}, "return_value": "True"}, {"func_args": {"str": "\"sphinx ; extra == 'docs'\""}, "return_value": "True"}, {"func_args": {"str": "\"jaraco.packaging (>=8.2) ; extra == 'docs'\""}, "return_value": "True"}, {"func_args": {"str": "\"rst.linker (>=1.9) ; extra == 'docs'\""}, "return_value": "True"}, {"func_args": {"str": "\"jaraco.tidelift (>=1.4) ; extra == 'docs'\""}, "return_value": "True"}, {"func_args": {"str": "\"pygments-github-lexers (==0.0.5) ; extra == 'docs'\""}, "return_value": "True"}, {"func_args": {"str": "\"sphinx-inline-tabs ; extra == 'docs'\""}, "return_value": "True"}, {"func_args": {"str": "\"sphinxcontrib-towncrier ; extra == 'docs'\""}, "return_value": "True"}, {"func_args": {"str": "\"furo ; extra == 'docs'\""}, "return_value": "True"}, {"func_args": {"str": "\"pytest (>=6) ; extra == 'testing'\""}, "return_value": "True"}, {"func_args": {"str": "\"pytest-checkdocs (>=2.4) ; extra == 'testing'\""}, "return_value": "True"}, {"func_args": {"str": "\"pytest-flake8 ; extra == 'testing'\""}, "return_value": "True"}, {"func_args": {"str": "\"pytest-cov ; extra == 'testing'\""}, "return_value": "True"}, {"func_args": {"str": "\"pytest-enabler (>=1.0.1) ; extra == 'testing'\""}, "return_value": "True"}, {"func_args": {"str": "\"mock ; extra == 'testing'\""}, "return_value": "True"}, {"func_args": {"str": "\"flake8-2020 ; extra == 'testing'\""}, "return_value": "True"}, {"func_args": {"str": "\"virtualenv (>=13.0.0) ; extra == 'testing'\""}, "return_value": "True"}, {"func_args": {"str": "\"pytest-virtualenv (>=1.2.7) ; extra == 'testing'\""}, "return_value": "True"}, {"func_args": {"str": "\"wheel ; extra == 'testing'\""}, "return_value": "True"}, {"func_args": {"str": "\"paver ; extra == 'testing'\""}, "return_value": "True"}, {"func_args": {"str": "\"pip (>=19.1) ; extra == 'testing'\""}, "return_value": "True"}, {"func_args": {"str": "\"jaraco.envs (>=2.2) ; extra == 'testing'\""}, "return_value": "True"}, {"func_args": {"str": "\"pytest-xdist ; extra == 'testing'\""}, "return_value": "True"}, {"func_args": {"str": "\"sphinx ; extra == 'testing'\""}, "return_value": "True"}, {"func_args": {"str": "\"jaraco.path (>=3.2.0) ; extra == 'testing'\""}, "return_value": "True"}, {"func_args": {"str": "'pytest-black (>=0.3.7) ; (platform_python_implementation != \"PyPy\") and extra == \\'testing\\''"}, "return_value": "True"}, {"func_args": {"str": "'pytest-mypy ; (platform_python_implementation != \"PyPy\") and extra == \\'testing\\''"}, "return_value": "True"}, {"func_args": {"str": "'setuptools'"}, "return_value": "True"}, {"func_args": {"str": "'setuptools'"}, "return_value": "True"}, {"func_args": {"str": "'pkg123===0.7'"}, "return_value": "True"}], "text": "def _nonblank(str):\n    return str and not str.startswith('#')"}, "safe_name": {"line": 1308, "args": [{"func_args": {"name": "'setuptools'"}, "return_value": "'setuptools'"}, {"func_args": {"name": "'setuptools'"}, "return_value": "'setuptools'"}, {"func_args": {"name": "'example123'"}, "return_value": "'example123'"}, {"func_args": {"name": "'sphinx'"}, "return_value": "'sphinx'"}, {"func_args": {"name": "'jaraco.packaging'"}, "return_value": "'jaraco.packaging'"}, {"func_args": {"name": "'rst.linker'"}, "return_value": "'rst.linker'"}, {"func_args": {"name": "'jaraco.tidelift'"}, "return_value": "'jaraco.tidelift'"}, {"func_args": {"name": "'pygments-github-lexers'"}, "return_value": "'pygments-github-lexers'"}, {"func_args": {"name": "'sphinx-inline-tabs'"}, "return_value": "'sphinx-inline-tabs'"}, {"func_args": {"name": "'sphinxcontrib-towncrier'"}, "return_value": "'sphinxcontrib-towncrier'"}, {"func_args": {"name": "'furo'"}, "return_value": "'furo'"}, {"func_args": {"name": "'pytest'"}, "return_value": "'pytest'"}, {"func_args": {"name": "'pytest-checkdocs'"}, "return_value": "'pytest-checkdocs'"}, {"func_args": {"name": "'pytest-flake8'"}, "return_value": "'pytest-flake8'"}, {"func_args": {"name": "'pytest-cov'"}, "return_value": "'pytest-cov'"}, {"func_args": {"name": "'pytest-enabler'"}, "return_value": "'pytest-enabler'"}, {"func_args": {"name": "'mock'"}, "return_value": "'mock'"}, {"func_args": {"name": "'flake8-2020'"}, "return_value": "'flake8-2020'"}, {"func_args": {"name": "'virtualenv'"}, "return_value": "'virtualenv'"}, {"func_args": {"name": "'pytest-virtualenv'"}, "return_value": "'pytest-virtualenv'"}, {"func_args": {"name": "'wheel'"}, "return_value": "'wheel'"}, {"func_args": {"name": "'paver'"}, "return_value": "'paver'"}, {"func_args": {"name": "'pip'"}, "return_value": "'pip'"}, {"func_args": {"name": "'jaraco.envs'"}, "return_value": "'jaraco.envs'"}, {"func_args": {"name": "'pytest-xdist'"}, "return_value": "'pytest-xdist'"}, {"func_args": {"name": "'sphinx'"}, "return_value": "'sphinx'"}, {"func_args": {"name": "'jaraco.path'"}, "return_value": "'jaraco.path'"}, {"func_args": {"name": "'pytest-black'"}, "return_value": "'pytest-black'"}, {"func_args": {"name": "'pytest-mypy'"}, "return_value": "'pytest-mypy'"}, {"func_args": {"name": "'setuptools'"}, "return_value": "'setuptools'"}, {"func_args": {"name": "'setuptools'"}, "return_value": "'setuptools'"}, {"func_args": {"name": "'example123'"}, "return_value": "'example123'"}, {"func_args": {"name": "'example123'"}, "return_value": "'example123'"}, {"func_args": {"name": "'setuptools'"}, "return_value": "'setuptools'"}, {"func_args": {"name": "'setuptools'"}, "return_value": "'setuptools'"}, {"func_args": {"name": "'example123'"}, "return_value": "'example123'"}, {"func_args": {"name": "'sphinx'"}, "return_value": "'sphinx'"}, {"func_args": {"name": "'jaraco.packaging'"}, "return_value": "'jaraco.packaging'"}, {"func_args": {"name": "'rst.linker'"}, "return_value": "'rst.linker'"}, {"func_args": {"name": "'jaraco.tidelift'"}, "return_value": "'jaraco.tidelift'"}, {"func_args": {"name": "'pygments-github-lexers'"}, "return_value": "'pygments-github-lexers'"}, {"func_args": {"name": "'sphinx-inline-tabs'"}, "return_value": "'sphinx-inline-tabs'"}, {"func_args": {"name": "'sphinxcontrib-towncrier'"}, "return_value": "'sphinxcontrib-towncrier'"}, {"func_args": {"name": "'furo'"}, "return_value": "'furo'"}, {"func_args": {"name": "'pytest'"}, "return_value": "'pytest'"}, {"func_args": {"name": "'pytest-checkdocs'"}, "return_value": "'pytest-checkdocs'"}, {"func_args": {"name": "'pytest-flake8'"}, "return_value": "'pytest-flake8'"}, {"func_args": {"name": "'pytest-cov'"}, "return_value": "'pytest-cov'"}, {"func_args": {"name": "'pytest-enabler'"}, "return_value": "'pytest-enabler'"}, {"func_args": {"name": "'mock'"}, "return_value": "'mock'"}, {"func_args": {"name": "'flake8-2020'"}, "return_value": "'flake8-2020'"}, {"func_args": {"name": "'virtualenv'"}, "return_value": "'virtualenv'"}, {"func_args": {"name": "'pytest-virtualenv'"}, "return_value": "'pytest-virtualenv'"}, {"func_args": {"name": "'wheel'"}, "return_value": "'wheel'"}, {"func_args": {"name": "'paver'"}, "return_value": "'paver'"}, {"func_args": {"name": "'pip'"}, "return_value": "'pip'"}, {"func_args": {"name": "'jaraco.envs'"}, "return_value": "'jaraco.envs'"}, {"func_args": {"name": "'pytest-xdist'"}, "return_value": "'pytest-xdist'"}, {"func_args": {"name": "'sphinx'"}, "return_value": "'sphinx'"}, {"func_args": {"name": "'jaraco.path'"}, "return_value": "'jaraco.path'"}, {"func_args": {"name": "'pytest-black'"}, "return_value": "'pytest-black'"}, {"func_args": {"name": "'pytest-mypy'"}, "return_value": "'pytest-mypy'"}, {"func_args": {"name": "'setuptools'"}, "return_value": "'setuptools'"}, {"func_args": {"name": "'setuptools'"}, "return_value": "'setuptools'"}, {"func_args": {"name": "'example123'"}, "return_value": "'example123'"}, {"func_args": {"name": "'example123'"}, "return_value": "'example123'"}, {"func_args": {"name": "'setuptools'"}, "return_value": "'setuptools'"}, {"func_args": {"name": "'setuptools'"}, "return_value": "'setuptools'"}, {"func_args": {"name": "'pkg123'"}, "return_value": "'pkg123'"}, {"func_args": {"name": "'sphinx'"}, "return_value": "'sphinx'"}, {"func_args": {"name": "'jaraco.packaging'"}, "return_value": "'jaraco.packaging'"}, {"func_args": {"name": "'rst.linker'"}, "return_value": "'rst.linker'"}, {"func_args": {"name": "'jaraco.tidelift'"}, "return_value": "'jaraco.tidelift'"}, {"func_args": {"name": "'pygments-github-lexers'"}, "return_value": "'pygments-github-lexers'"}, {"func_args": {"name": "'sphinx-inline-tabs'"}, "return_value": "'sphinx-inline-tabs'"}, {"func_args": {"name": "'sphinxcontrib-towncrier'"}, "return_value": "'sphinxcontrib-towncrier'"}, {"func_args": {"name": "'furo'"}, "return_value": "'furo'"}, {"func_args": {"name": "'pytest'"}, "return_value": "'pytest'"}, {"func_args": {"name": "'pytest-checkdocs'"}, "return_value": "'pytest-checkdocs'"}, {"func_args": {"name": "'pytest-flake8'"}, "return_value": "'pytest-flake8'"}, {"func_args": {"name": "'pytest-cov'"}, "return_value": "'pytest-cov'"}, {"func_args": {"name": "'pytest-enabler'"}, "return_value": "'pytest-enabler'"}, {"func_args": {"name": "'mock'"}, "return_value": "'mock'"}, {"func_args": {"name": "'flake8-2020'"}, "return_value": "'flake8-2020'"}, {"func_args": {"name": "'virtualenv'"}, "return_value": "'virtualenv'"}, {"func_args": {"name": "'pytest-virtualenv'"}, "return_value": "'pytest-virtualenv'"}, {"func_args": {"name": "'wheel'"}, "return_value": "'wheel'"}, {"func_args": {"name": "'paver'"}, "return_value": "'paver'"}, {"func_args": {"name": "'pip'"}, "return_value": "'pip'"}, {"func_args": {"name": "'jaraco.envs'"}, "return_value": "'jaraco.envs'"}, {"func_args": {"name": "'pytest-xdist'"}, "return_value": "'pytest-xdist'"}, {"func_args": {"name": "'sphinx'"}, "return_value": "'sphinx'"}, {"func_args": {"name": "'jaraco.path'"}, "return_value": "'jaraco.path'"}, {"func_args": {"name": "'pytest-black'"}, "return_value": "'pytest-black'"}, {"func_args": {"name": "'pytest-mypy'"}, "return_value": "'pytest-mypy'"}, {"func_args": {"name": "'setuptools'"}, "return_value": "'setuptools'"}, {"func_args": {"name": "'setuptools'"}, "return_value": "'setuptools'"}, {"func_args": {"name": "'pkg123'"}, "return_value": "'pkg123'"}, {"func_args": {"name": "'pkg123'"}, "return_value": "'pkg123'"}], "text": "def safe_name(name):\n    \"\"\"Convert an arbitrary string to a standard distribution name\n\n    Any runs of non-alphanumeric/. characters are replaced with a single '-'.\n    \"\"\"\n    return re.sub('[^A-Za-z0-9.]+', '-', name)"}, "safe_extra": {"line": 1328, "args": [{"func_args": {"extra": "'certs'"}, "return_value": "'certs'"}, {"func_args": {"extra": "'docs'"}, "return_value": "'docs'"}, {"func_args": {"extra": "'ssl'"}, "return_value": "'ssl'"}, {"func_args": {"extra": "'testing'"}, "return_value": "'testing'"}, {"func_args": {"extra": "'certs'"}, "return_value": "'certs'"}, {"func_args": {"extra": "'docs'"}, "return_value": "'docs'"}, {"func_args": {"extra": "'ssl'"}, "return_value": "'ssl'"}, {"func_args": {"extra": "'testing'"}, "return_value": "'testing'"}, {"func_args": {"extra": "'certs'"}, "return_value": "'certs'"}, {"func_args": {"extra": "'docs'"}, "return_value": "'docs'"}, {"func_args": {"extra": "'ssl'"}, "return_value": "'ssl'"}, {"func_args": {"extra": "'testing'"}, "return_value": "'testing'"}], "text": "def safe_extra(extra):\n    \"\"\"Convert an arbitrary string to a standard 'extra' name\n\n    Any runs of non-alphanumeric characters are replaced with a single '_',\n    and the result is always lowercased.\n    \"\"\"\n    return re.sub('[^A-Za-z0-9.-]+', '_', extra).lower()"}, "safe_version": {"line": 1316, "args": [{"func_args": {"version": "'0.5'"}, "return_value": "'0.5'"}, {"func_args": {"version": "'0.6'"}, "return_value": "'0.6'"}, {"func_args": {"version": "'0.7'"}, "return_value": "'0.7'"}], "text": "def safe_version(version):\n    \"\"\"\n    Convert an arbitrary string to a standard version string\n    \"\"\"\n    try:\n        # normalize the version\n        return str(packaging.version.Version(version))\n    except packaging.version.InvalidVersion:\n        version = version.replace(' ', '.')\n        return re.sub('[^A-Za-z0-9.]+', '-', version)"}, "to_filename": {"line": 1337, "args": [{"func_args": {"name": "'example123'"}, "return_value": "'example123'"}, {"func_args": {"name": "'example123'"}, "return_value": "'example123'"}, {"func_args": {"name": "'pkg123'"}, "return_value": "'pkg123'"}], "text": "def to_filename(name):\n    \"\"\"Convert a project or version name to its filename-escaped form\n\n    Any '-' characters are currently replaced with '_'.\n    \"\"\"\n    return name.replace('-', '_')"}, "default_environment": {"line": 256, "args": [{"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}, {"func_args": {}, "return_value": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin'}"}], "text": "def default_environment() -> Dict[str, str]:\n    iver = format_full_version(sys.implementation.version)\n    implementation_name = sys.implementation.name\n    return {\n        \"implementation_name\": implementation_name,\n        \"implementation_version\": iver,\n        \"os_name\": os.name,\n        \"platform_machine\": platform.machine(),\n        \"platform_release\": platform.release(),\n        \"platform_system\": platform.system(),\n        \"platform_version\": platform.version(),\n        \"python_full_version\": platform.python_version(),\n        \"platform_python_implementation\": platform.python_implementation(),\n        \"python_version\": \".\".join(platform.python_version_tuple()[:2]),\n        \"sys_platform\": sys.platform,\n    }"}, "_get_env": {"line": 210, "args": [{"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'platform_python_implementation'"}, "return_value": "'CPython'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'platform_python_implementation'"}, "return_value": "'CPython'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'platform_python_implementation'"}, "return_value": "'CPython'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'platform_python_implementation'"}, "return_value": "'CPython'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'platform_python_implementation'"}, "return_value": "'CPython'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'platform_python_implementation'"}, "return_value": "'CPython'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'platform_python_implementation'"}, "return_value": "'CPython'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'platform_python_implementation'"}, "return_value": "'CPython'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'platform_python_implementation'"}, "return_value": "'CPython'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'platform_python_implementation'"}, "return_value": "'CPython'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'platform_python_implementation'"}, "return_value": "'CPython'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'platform_python_implementation'"}, "return_value": "'CPython'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'platform_python_implementation'"}, "return_value": "'CPython'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'platform_python_implementation'"}, "return_value": "'CPython'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'platform_python_implementation'"}, "return_value": "'CPython'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'platform_python_implementation'"}, "return_value": "'CPython'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'platform_python_implementation'"}, "return_value": "'CPython'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'platform_python_implementation'"}, "return_value": "'CPython'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'platform_python_implementation'"}, "return_value": "'CPython'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'platform_python_implementation'"}, "return_value": "'CPython'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'platform_python_implementation'"}, "return_value": "'CPython'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'platform_python_implementation'"}, "return_value": "'CPython'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': None}", "name": "'extra'"}, "return_value": "None"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'platform_python_implementation'"}, "return_value": "'CPython'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'platform_python_implementation'"}, "return_value": "'CPython'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'certs'}", "name": "'extra'"}, "return_value": "'certs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'platform_python_implementation'"}, "return_value": "'CPython'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'platform_python_implementation'"}, "return_value": "'CPython'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'docs'}", "name": "'extra'"}, "return_value": "'docs'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'platform_python_implementation'"}, "return_value": "'CPython'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'platform_python_implementation'"}, "return_value": "'CPython'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'ssl'}", "name": "'extra'"}, "return_value": "'ssl'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'platform_python_implementation'"}, "return_value": "'CPython'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'platform_python_implementation'"}, "return_value": "'CPython'"}, {"func_args": {"environment": "{'implementation_name': 'cpython', 'implementation_version': '3.8.12', 'os_name': 'posix', 'platform_machine': 'arm64', 'platform_release': '21.1.0', 'platform_system': 'Darwin', 'platform_version': 'Darwin Kernel Version 21.1.0: Wed Oct 13 17:33:24 PDT 2021; root:xnu-8019.41.5~1/RELEASE_ARM64_T8101', 'python_full_version': '3.8.12', 'platform_python_implementation': 'CPython', 'python_version': '3.8', 'sys_platform': 'darwin', 'extra': 'testing'}", "name": "'extra'"}, "return_value": "'testing'"}], "text": "def _get_env(environment: Dict[str, str], name: str) -> str:\n    value: Union[str, Undefined] = environment.get(name, _undefined)\n\n    if isinstance(value, Undefined):\n        raise UndefinedEnvironmentName(\n            f\"{name!r} does not exist in evaluation environment.\"\n        )\n\n    return value"}, "canonicalize_version": {"line": 37, "args": [{"func_args": {"version": "'8.2'"}, "return_value": "'8.2'"}, {"func_args": {"version": "'1.9'"}, "return_value": "'1.9'"}, {"func_args": {"version": "'1.4'"}, "return_value": "'1.4'"}, {"func_args": {"version": "'0.0.5'"}, "return_value": "'0.0.5'"}, {"func_args": {"version": "'6'"}, "return_value": "'6'"}, {"func_args": {"version": "'2.4'"}, "return_value": "'2.4'"}, {"func_args": {"version": "'1.0.1'"}, "return_value": "'1.0.1'"}, {"func_args": {"version": "'13.0.0'"}, "return_value": "'13'"}, {"func_args": {"version": "'1.2.7'"}, "return_value": "'1.2.7'"}, {"func_args": {"version": "'19.1'"}, "return_value": "'19.1'"}, {"func_args": {"version": "'2.2'"}, "return_value": "'2.2'"}, {"func_args": {"version": "'3.2.0'"}, "return_value": "'3.2'"}, {"func_args": {"version": "'0.3.7'"}, "return_value": "'0.3.7'"}, {"func_args": {"version": "'0.5'"}, "return_value": "'0.5'"}, {"func_args": {"version": "'8.2'"}, "return_value": "'8.2'"}, {"func_args": {"version": "'1.9'"}, "return_value": "'1.9'"}, {"func_args": {"version": "'1.4'"}, "return_value": "'1.4'"}, {"func_args": {"version": "'0.0.5'"}, "return_value": "'0.0.5'"}, {"func_args": {"version": "'6'"}, "return_value": "'6'"}, {"func_args": {"version": "'2.4'"}, "return_value": "'2.4'"}, {"func_args": {"version": "'1.0.1'"}, "return_value": "'1.0.1'"}, {"func_args": {"version": "'13.0.0'"}, "return_value": "'13'"}, {"func_args": {"version": "'1.2.7'"}, "return_value": "'1.2.7'"}, {"func_args": {"version": "'19.1'"}, "return_value": "'19.1'"}, {"func_args": {"version": "'2.2'"}, "return_value": "'2.2'"}, {"func_args": {"version": "'3.2.0'"}, "return_value": "'3.2'"}, {"func_args": {"version": "'0.3.7'"}, "return_value": "'0.3.7'"}, {"func_args": {"version": "'0.6'"}, "return_value": "'0.6'"}, {"func_args": {"version": "'8.2'"}, "return_value": "'8.2'"}, {"func_args": {"version": "'1.9'"}, "return_value": "'1.9'"}, {"func_args": {"version": "'1.4'"}, "return_value": "'1.4'"}, {"func_args": {"version": "'0.0.5'"}, "return_value": "'0.0.5'"}, {"func_args": {"version": "'6'"}, "return_value": "'6'"}, {"func_args": {"version": "'2.4'"}, "return_value": "'2.4'"}, {"func_args": {"version": "'1.0.1'"}, "return_value": "'1.0.1'"}, {"func_args": {"version": "'13.0.0'"}, "return_value": "'13'"}, {"func_args": {"version": "'1.2.7'"}, "return_value": "'1.2.7'"}, {"func_args": {"version": "'19.1'"}, "return_value": "'19.1'"}, {"func_args": {"version": "'2.2'"}, "return_value": "'2.2'"}, {"func_args": {"version": "'3.2.0'"}, "return_value": "'3.2'"}, {"func_args": {"version": "'0.3.7'"}, "return_value": "'0.3.7'"}, {"func_args": {"version": "'0.7'"}, "return_value": "'0.7'"}], "text": "def canonicalize_version(version: Union[Version, str]) -> str:\n    \"\"\"\n    This is very similar to Version.__str__, but has one subtle difference\n    with the way it handles the release segment.\n    \"\"\"\n    if isinstance(version, str):\n        try:\n            parsed = Version(version)\n        except InvalidVersion:\n            # Legacy versions cannot be normalized\n            return version\n    else:\n        parsed = version\n\n    parts = []\n\n    # Epoch\n    if parsed.epoch != 0:\n        parts.append(f\"{parsed.epoch}!\")\n\n    # Release segment\n    # NB: This strips trailing '.0's to normalize\n    parts.append(re.sub(r\"(\\.0)+$\", \"\", \".\".join(str(x) for x in parsed.release)))\n\n    # Pre-release\n    if parsed.pre is not None:\n        parts.append(\"\".join(str(x) for x in parsed.pre))\n\n    # Post-release\n    if parsed.post is not None:\n        parts.append(f\".post{parsed.post}\")\n\n    # Development release\n    if parsed.dev is not None:\n        parts.append(f\".dev{parsed.dev}\")\n\n    # Local version segment\n    if parsed.local is not None:\n        parts.append(f\"+{parsed.local}\")\n\n    return \"\".join(parts)"}, "filesys_decode": {"line": 17, "args": [{"func_args": {"path": "'setup.py'"}, "return_value": "'setup.py'"}, {"func_args": {"path": "'./example123/__init__.py'"}, "return_value": "'./example123/__init__.py'"}, {"func_args": {"path": "'MANIFEST.in'"}, "return_value": "'MANIFEST.in'"}, {"func_args": {"path": "'example123.egg-info/SOURCES.txt'"}, "return_value": "'example123.egg-info/SOURCES.txt'"}, {"func_args": {"path": "'setup.py'"}, "return_value": "'setup.py'"}, {"func_args": {"path": "'example123.egg-info/PKG-INFO'"}, "return_value": "'example123.egg-info/PKG-INFO'"}, {"func_args": {"path": "'example123.egg-info/SOURCES.txt'"}, "return_value": "'example123.egg-info/SOURCES.txt'"}, {"func_args": {"path": "'example123.egg-info/top_level.txt'"}, "return_value": "'example123.egg-info/top_level.txt'"}, {"func_args": {"path": "'example123.egg-info/dependency_links.txt'"}, "return_value": "'example123.egg-info/dependency_links.txt'"}, {"func_args": {"path": "'example123/__init__.py'"}, "return_value": "'example123/__init__.py'"}, {"func_args": {"path": "'setup.py'"}, "return_value": "'setup.py'"}, {"func_args": {"path": "'tox.ini'"}, "return_value": "'tox.ini'"}, {"func_args": {"path": "'MANIFEST.in'"}, "return_value": "'MANIFEST.in'"}, {"func_args": {"path": "'setup.py'"}, "return_value": "'setup.py'"}, {"func_args": {"path": "'tox.ini'"}, "return_value": "'tox.ini'"}, {"func_args": {"path": "'./example123/__init__.py'"}, "return_value": "'./example123/__init__.py'"}, {"func_args": {"path": "'example123/__init__.py'"}, "return_value": "'example123/__init__.py'"}, {"func_args": {"path": "'example123.egg-info/PKG-INFO'"}, "return_value": "'example123.egg-info/PKG-INFO'"}, {"func_args": {"path": "'example123.egg-info/SOURCES.txt'"}, "return_value": "'example123.egg-info/SOURCES.txt'"}, {"func_args": {"path": "'example123.egg-info/dependency_links.txt'"}, "return_value": "'example123.egg-info/dependency_links.txt'"}, {"func_args": {"path": "'example123.egg-info/top_level.txt'"}, "return_value": "'example123.egg-info/top_level.txt'"}, {"func_args": {"path": "'MANIFEST.in'"}, "return_value": "'MANIFEST.in'"}, {"func_args": {"path": "'setup.py'"}, "return_value": "'setup.py'"}, {"func_args": {"path": "'tox.ini'"}, "return_value": "'tox.ini'"}, {"func_args": {"path": "'./example123/__init__.py'"}, "return_value": "'./example123/__init__.py'"}, {"func_args": {"path": "'example123/__init__.py'"}, "return_value": "'example123/__init__.py'"}, {"func_args": {"path": "'example123.egg-info/PKG-INFO'"}, "return_value": "'example123.egg-info/PKG-INFO'"}, {"func_args": {"path": "'example123.egg-info/SOURCES.txt'"}, "return_value": "'example123.egg-info/SOURCES.txt'"}, {"func_args": {"path": "'example123.egg-info/dependency_links.txt'"}, "return_value": "'example123.egg-info/dependency_links.txt'"}, {"func_args": {"path": "'example123.egg-info/top_level.txt'"}, "return_value": "'example123.egg-info/top_level.txt'"}, {"func_args": {"path": "'example123.egg-info/SOURCES.txt'"}, "return_value": "'example123.egg-info/SOURCES.txt'"}, {"func_args": {"path": "'setup.py'"}, "return_value": "'setup.py'"}, {"func_args": {"path": "'./example123/__init__.py'"}, "return_value": "'./example123/__init__.py'"}, {"func_args": {"path": "'MANIFEST.in'"}, "return_value": "'MANIFEST.in'"}, {"func_args": {"path": "'example123.egg-info/SOURCES.txt'"}, "return_value": "'example123.egg-info/SOURCES.txt'"}, {"func_args": {"path": "'setup.py'"}, "return_value": "'setup.py'"}, {"func_args": {"path": "'example123.egg-info/PKG-INFO'"}, "return_value": "'example123.egg-info/PKG-INFO'"}, {"func_args": {"path": "'example123.egg-info/SOURCES.txt'"}, "return_value": "'example123.egg-info/SOURCES.txt'"}, {"func_args": {"path": "'example123.egg-info/top_level.txt'"}, "return_value": "'example123.egg-info/top_level.txt'"}, {"func_args": {"path": "'example123.egg-info/dependency_links.txt'"}, "return_value": "'example123.egg-info/dependency_links.txt'"}, {"func_args": {"path": "'example123/__init__.py'"}, "return_value": "'example123/__init__.py'"}, {"func_args": {"path": "'tests/test_hello.py'"}, "return_value": "'tests/test_hello.py'"}, {"func_args": {"path": "'setup.py'"}, "return_value": "'setup.py'"}, {"func_args": {"path": "'tox.ini'"}, "return_value": "'tox.ini'"}, {"func_args": {"path": "'MANIFEST.in'"}, "return_value": "'MANIFEST.in'"}, {"func_args": {"path": "'setup.py'"}, "return_value": "'setup.py'"}, {"func_args": {"path": "'tox.ini'"}, "return_value": "'tox.ini'"}, {"func_args": {"path": "'./example123/__init__.py'"}, "return_value": "'./example123/__init__.py'"}, {"func_args": {"path": "'example123/__init__.py'"}, "return_value": "'example123/__init__.py'"}, {"func_args": {"path": "'example123.egg-info/PKG-INFO'"}, "return_value": "'example123.egg-info/PKG-INFO'"}, {"func_args": {"path": "'example123.egg-info/SOURCES.txt'"}, "return_value": "'example123.egg-info/SOURCES.txt'"}, {"func_args": {"path": "'example123.egg-info/dependency_links.txt'"}, "return_value": "'example123.egg-info/dependency_links.txt'"}, {"func_args": {"path": "'example123.egg-info/top_level.txt'"}, "return_value": "'example123.egg-info/top_level.txt'"}, {"func_args": {"path": "'tests/test_hello.py'"}, "return_value": "'tests/test_hello.py'"}, {"func_args": {"path": "'MANIFEST.in'"}, "return_value": "'MANIFEST.in'"}, {"func_args": {"path": "'setup.py'"}, "return_value": "'setup.py'"}, {"func_args": {"path": "'tox.ini'"}, "return_value": "'tox.ini'"}, {"func_args": {"path": "'./example123/__init__.py'"}, "return_value": "'./example123/__init__.py'"}, {"func_args": {"path": "'example123/__init__.py'"}, "return_value": "'example123/__init__.py'"}, {"func_args": {"path": "'example123.egg-info/PKG-INFO'"}, "return_value": "'example123.egg-info/PKG-INFO'"}, {"func_args": {"path": "'example123.egg-info/SOURCES.txt'"}, "return_value": "'example123.egg-info/SOURCES.txt'"}, {"func_args": {"path": "'example123.egg-info/dependency_links.txt'"}, "return_value": "'example123.egg-info/dependency_links.txt'"}, {"func_args": {"path": "'example123.egg-info/top_level.txt'"}, "return_value": "'example123.egg-info/top_level.txt'"}, {"func_args": {"path": "'tests/test_hello.py'"}, "return_value": "'tests/test_hello.py'"}, {"func_args": {"path": "'example123.egg-info/SOURCES.txt'"}, "return_value": "'example123.egg-info/SOURCES.txt'"}, {"func_args": {"path": "'setup.py'"}, "return_value": "'setup.py'"}, {"func_args": {"path": "'./pkg123/__init__.py'"}, "return_value": "'./pkg123/__init__.py'"}, {"func_args": {"path": "'MANIFEST.in'"}, "return_value": "'MANIFEST.in'"}, {"func_args": {"path": "'pkg123.egg-info/SOURCES.txt'"}, "return_value": "'pkg123.egg-info/SOURCES.txt'"}, {"func_args": {"path": "'setup.py'"}, "return_value": "'setup.py'"}, {"func_args": {"path": "'pkg123.egg-info/PKG-INFO'"}, "return_value": "'pkg123.egg-info/PKG-INFO'"}, {"func_args": {"path": "'pkg123.egg-info/SOURCES.txt'"}, "return_value": "'pkg123.egg-info/SOURCES.txt'"}, {"func_args": {"path": "'pkg123.egg-info/top_level.txt'"}, "return_value": "'pkg123.egg-info/top_level.txt'"}, {"func_args": {"path": "'pkg123.egg-info/dependency_links.txt'"}, "return_value": "'pkg123.egg-info/dependency_links.txt'"}, {"func_args": {"path": "'pkg123/__init__.py'"}, "return_value": "'pkg123/__init__.py'"}, {"func_args": {"path": "'setup.py'"}, "return_value": "'setup.py'"}, {"func_args": {"path": "'tox.ini'"}, "return_value": "'tox.ini'"}, {"func_args": {"path": "'MANIFEST.in'"}, "return_value": "'MANIFEST.in'"}, {"func_args": {"path": "'setup.py'"}, "return_value": "'setup.py'"}, {"func_args": {"path": "'tox.ini'"}, "return_value": "'tox.ini'"}, {"func_args": {"path": "'./pkg123/__init__.py'"}, "return_value": "'./pkg123/__init__.py'"}, {"func_args": {"path": "'pkg123/__init__.py'"}, "return_value": "'pkg123/__init__.py'"}, {"func_args": {"path": "'pkg123.egg-info/PKG-INFO'"}, "return_value": "'pkg123.egg-info/PKG-INFO'"}, {"func_args": {"path": "'pkg123.egg-info/SOURCES.txt'"}, "return_value": "'pkg123.egg-info/SOURCES.txt'"}, {"func_args": {"path": "'pkg123.egg-info/dependency_links.txt'"}, "return_value": "'pkg123.egg-info/dependency_links.txt'"}, {"func_args": {"path": "'pkg123.egg-info/top_level.txt'"}, "return_value": "'pkg123.egg-info/top_level.txt'"}, {"func_args": {"path": "'MANIFEST.in'"}, "return_value": "'MANIFEST.in'"}, {"func_args": {"path": "'setup.py'"}, "return_value": "'setup.py'"}, {"func_args": {"path": "'tox.ini'"}, "return_value": "'tox.ini'"}, {"func_args": {"path": "'./pkg123/__init__.py'"}, "return_value": "'./pkg123/__init__.py'"}, {"func_args": {"path": "'pkg123/__init__.py'"}, "return_value": "'pkg123/__init__.py'"}, {"func_args": {"path": "'pkg123.egg-info/PKG-INFO'"}, "return_value": "'pkg123.egg-info/PKG-INFO'"}, {"func_args": {"path": "'pkg123.egg-info/SOURCES.txt'"}, "return_value": "'pkg123.egg-info/SOURCES.txt'"}, {"func_args": {"path": "'pkg123.egg-info/dependency_links.txt'"}, "return_value": "'pkg123.egg-info/dependency_links.txt'"}, {"func_args": {"path": "'pkg123.egg-info/top_level.txt'"}, "return_value": "'pkg123.egg-info/top_level.txt'"}, {"func_args": {"path": "'pkg123.egg-info/SOURCES.txt'"}, "return_value": "'pkg123.egg-info/SOURCES.txt'"}], "text": "def filesys_decode(path):\n    \"\"\"\n    Ensure that the given path is decoded,\n    NONE when no expected encoding works\n    \"\"\"\n\n    if isinstance(path, str):\n        return path\n\n    fs_enc = sys.getfilesystemencoding() or 'utf-8'\n    candidates = fs_enc, 'utf-8'\n\n    for enc in candidates:\n        try:\n            return path.decode(enc)\n        except UnicodeDecodeError:\n            continue"}, "try_encode": {"line": 36, "args": [{"func_args": {"string": "'setup.py'", "enc": "'utf-8'"}, "return_value": "b'setup.py'"}, {"func_args": {"string": "'./example123/__init__.py'", "enc": "'utf-8'"}, "return_value": "b'./example123/__init__.py'"}, {"func_args": {"string": "'MANIFEST.in'", "enc": "'utf-8'"}, "return_value": "b'MANIFEST.in'"}, {"func_args": {"string": "'example123.egg-info/SOURCES.txt'", "enc": "'utf-8'"}, "return_value": "b'example123.egg-info/SOURCES.txt'"}, {"func_args": {"string": "'setup.py'", "enc": "'utf-8'"}, "return_value": "b'setup.py'"}, {"func_args": {"string": "'example123.egg-info/PKG-INFO'", "enc": "'utf-8'"}, "return_value": "b'example123.egg-info/PKG-INFO'"}, {"func_args": {"string": "'example123.egg-info/SOURCES.txt'", "enc": "'utf-8'"}, "return_value": "b'example123.egg-info/SOURCES.txt'"}, {"func_args": {"string": "'example123.egg-info/top_level.txt'", "enc": "'utf-8'"}, "return_value": "b'example123.egg-info/top_level.txt'"}, {"func_args": {"string": "'example123.egg-info/dependency_links.txt'", "enc": "'utf-8'"}, "return_value": "b'example123.egg-info/dependency_links.txt'"}, {"func_args": {"string": "'example123/__init__.py'", "enc": "'utf-8'"}, "return_value": "b'example123/__init__.py'"}, {"func_args": {"string": "'setup.py'", "enc": "'utf-8'"}, "return_value": "b'setup.py'"}, {"func_args": {"string": "'tox.ini'", "enc": "'utf-8'"}, "return_value": "b'tox.ini'"}, {"func_args": {"string": "'MANIFEST.in'", "enc": "'utf-8'"}, "return_value": "b'MANIFEST.in'"}, {"func_args": {"string": "'setup.py'", "enc": "'utf-8'"}, "return_value": "b'setup.py'"}, {"func_args": {"string": "'tox.ini'", "enc": "'utf-8'"}, "return_value": "b'tox.ini'"}, {"func_args": {"string": "'./example123/__init__.py'", "enc": "'utf-8'"}, "return_value": "b'./example123/__init__.py'"}, {"func_args": {"string": "'example123/__init__.py'", "enc": "'utf-8'"}, "return_value": "b'example123/__init__.py'"}, {"func_args": {"string": "'example123.egg-info/PKG-INFO'", "enc": "'utf-8'"}, "return_value": "b'example123.egg-info/PKG-INFO'"}, {"func_args": {"string": "'example123.egg-info/SOURCES.txt'", "enc": "'utf-8'"}, "return_value": "b'example123.egg-info/SOURCES.txt'"}, {"func_args": {"string": "'example123.egg-info/dependency_links.txt'", "enc": "'utf-8'"}, "return_value": "b'example123.egg-info/dependency_links.txt'"}, {"func_args": {"string": "'example123.egg-info/top_level.txt'", "enc": "'utf-8'"}, "return_value": "b'example123.egg-info/top_level.txt'"}, {"func_args": {"string": "'example123.egg-info/SOURCES.txt'", "enc": "'utf-8'"}, "return_value": "b'example123.egg-info/SOURCES.txt'"}, {"func_args": {"string": "'setup.py'", "enc": "'utf-8'"}, "return_value": "b'setup.py'"}, {"func_args": {"string": "'./example123/__init__.py'", "enc": "'utf-8'"}, "return_value": "b'./example123/__init__.py'"}, {"func_args": {"string": "'MANIFEST.in'", "enc": "'utf-8'"}, "return_value": "b'MANIFEST.in'"}, {"func_args": {"string": "'example123.egg-info/SOURCES.txt'", "enc": "'utf-8'"}, "return_value": "b'example123.egg-info/SOURCES.txt'"}, {"func_args": {"string": "'setup.py'", "enc": "'utf-8'"}, "return_value": "b'setup.py'"}, {"func_args": {"string": "'example123.egg-info/PKG-INFO'", "enc": "'utf-8'"}, "return_value": "b'example123.egg-info/PKG-INFO'"}, {"func_args": {"string": "'example123.egg-info/SOURCES.txt'", "enc": "'utf-8'"}, "return_value": "b'example123.egg-info/SOURCES.txt'"}, {"func_args": {"string": "'example123.egg-info/top_level.txt'", "enc": "'utf-8'"}, "return_value": "b'example123.egg-info/top_level.txt'"}, {"func_args": {"string": "'example123.egg-info/dependency_links.txt'", "enc": "'utf-8'"}, "return_value": "b'example123.egg-info/dependency_links.txt'"}, {"func_args": {"string": "'example123/__init__.py'", "enc": "'utf-8'"}, "return_value": "b'example123/__init__.py'"}, {"func_args": {"string": "'tests/test_hello.py'", "enc": "'utf-8'"}, "return_value": "b'tests/test_hello.py'"}, {"func_args": {"string": "'setup.py'", "enc": "'utf-8'"}, "return_value": "b'setup.py'"}, {"func_args": {"string": "'tox.ini'", "enc": "'utf-8'"}, "return_value": "b'tox.ini'"}, {"func_args": {"string": "'MANIFEST.in'", "enc": "'utf-8'"}, "return_value": "b'MANIFEST.in'"}, {"func_args": {"string": "'setup.py'", "enc": "'utf-8'"}, "return_value": "b'setup.py'"}, {"func_args": {"string": "'tox.ini'", "enc": "'utf-8'"}, "return_value": "b'tox.ini'"}, {"func_args": {"string": "'./example123/__init__.py'", "enc": "'utf-8'"}, "return_value": "b'./example123/__init__.py'"}, {"func_args": {"string": "'example123/__init__.py'", "enc": "'utf-8'"}, "return_value": "b'example123/__init__.py'"}, {"func_args": {"string": "'example123.egg-info/PKG-INFO'", "enc": "'utf-8'"}, "return_value": "b'example123.egg-info/PKG-INFO'"}, {"func_args": {"string": "'example123.egg-info/SOURCES.txt'", "enc": "'utf-8'"}, "return_value": "b'example123.egg-info/SOURCES.txt'"}, {"func_args": {"string": "'example123.egg-info/dependency_links.txt'", "enc": "'utf-8'"}, "return_value": "b'example123.egg-info/dependency_links.txt'"}, {"func_args": {"string": "'example123.egg-info/top_level.txt'", "enc": "'utf-8'"}, "return_value": "b'example123.egg-info/top_level.txt'"}, {"func_args": {"string": "'tests/test_hello.py'", "enc": "'utf-8'"}, "return_value": "b'tests/test_hello.py'"}, {"func_args": {"string": "'example123.egg-info/SOURCES.txt'", "enc": "'utf-8'"}, "return_value": "b'example123.egg-info/SOURCES.txt'"}, {"func_args": {"string": "'setup.py'", "enc": "'utf-8'"}, "return_value": "b'setup.py'"}, {"func_args": {"string": "'./pkg123/__init__.py'", "enc": "'utf-8'"}, "return_value": "b'./pkg123/__init__.py'"}, {"func_args": {"string": "'MANIFEST.in'", "enc": "'utf-8'"}, "return_value": "b'MANIFEST.in'"}, {"func_args": {"string": "'pkg123.egg-info/SOURCES.txt'", "enc": "'utf-8'"}, "return_value": "b'pkg123.egg-info/SOURCES.txt'"}, {"func_args": {"string": "'setup.py'", "enc": "'utf-8'"}, "return_value": "b'setup.py'"}, {"func_args": {"string": "'pkg123.egg-info/PKG-INFO'", "enc": "'utf-8'"}, "return_value": "b'pkg123.egg-info/PKG-INFO'"}, {"func_args": {"string": "'pkg123.egg-info/SOURCES.txt'", "enc": "'utf-8'"}, "return_value": "b'pkg123.egg-info/SOURCES.txt'"}, {"func_args": {"string": "'pkg123.egg-info/top_level.txt'", "enc": "'utf-8'"}, "return_value": "b'pkg123.egg-info/top_level.txt'"}, {"func_args": {"string": "'pkg123.egg-info/dependency_links.txt'", "enc": "'utf-8'"}, "return_value": "b'pkg123.egg-info/dependency_links.txt'"}, {"func_args": {"string": "'pkg123/__init__.py'", "enc": "'utf-8'"}, "return_value": "b'pkg123/__init__.py'"}, {"func_args": {"string": "'setup.py'", "enc": "'utf-8'"}, "return_value": "b'setup.py'"}, {"func_args": {"string": "'tox.ini'", "enc": "'utf-8'"}, "return_value": "b'tox.ini'"}, {"func_args": {"string": "'MANIFEST.in'", "enc": "'utf-8'"}, "return_value": "b'MANIFEST.in'"}, {"func_args": {"string": "'setup.py'", "enc": "'utf-8'"}, "return_value": "b'setup.py'"}, {"func_args": {"string": "'tox.ini'", "enc": "'utf-8'"}, "return_value": "b'tox.ini'"}, {"func_args": {"string": "'./pkg123/__init__.py'", "enc": "'utf-8'"}, "return_value": "b'./pkg123/__init__.py'"}, {"func_args": {"string": "'pkg123/__init__.py'", "enc": "'utf-8'"}, "return_value": "b'pkg123/__init__.py'"}, {"func_args": {"string": "'pkg123.egg-info/PKG-INFO'", "enc": "'utf-8'"}, "return_value": "b'pkg123.egg-info/PKG-INFO'"}, {"func_args": {"string": "'pkg123.egg-info/SOURCES.txt'", "enc": "'utf-8'"}, "return_value": "b'pkg123.egg-info/SOURCES.txt'"}, {"func_args": {"string": "'pkg123.egg-info/dependency_links.txt'", "enc": "'utf-8'"}, "return_value": "b'pkg123.egg-info/dependency_links.txt'"}, {"func_args": {"string": "'pkg123.egg-info/top_level.txt'", "enc": "'utf-8'"}, "return_value": "b'pkg123.egg-info/top_level.txt'"}, {"func_args": {"string": "'pkg123.egg-info/SOURCES.txt'", "enc": "'utf-8'"}, "return_value": "b'pkg123.egg-info/SOURCES.txt'"}], "text": "def try_encode(string, enc):\n    \"turn unicode encoding into a functional routine\"\n    try:\n        return string.encode(enc)\n    except UnicodeEncodeError:\n        return None"}, "has_magic": {"line": 141, "args": [{"func_args": {"s": "'example123.egg-info'"}, "return_value": "False"}, {"func_args": {"s": "'example123/__init__.py'"}, "return_value": "False"}, {"func_args": {"s": "'setup.py'"}, "return_value": "False"}, {"func_args": {"s": "'tox.ini'"}, "return_value": "False"}, {"func_args": {"s": "'example123.egg-info'"}, "return_value": "False"}, {"func_args": {"s": "'example123/__init__.py'"}, "return_value": "False"}, {"func_args": {"s": "'tests/test_hello.py'"}, "return_value": "False"}, {"func_args": {"s": "'setup.py'"}, "return_value": "False"}, {"func_args": {"s": "'tox.ini'"}, "return_value": "False"}, {"func_args": {"s": "'pkg123.egg-info'"}, "return_value": "False"}, {"func_args": {"s": "'pkg123/__init__.py'"}, "return_value": "False"}, {"func_args": {"s": "'setup.py'"}, "return_value": "False"}, {"func_args": {"s": "'tox.ini'"}, "return_value": "False"}], "text": "def has_magic(s):\n    if isinstance(s, bytes):\n        match = magic_check_bytes.search(s)\n    else:\n        match = magic_check.search(s)\n    return match is not None"}, "_iglob": {"line": 47, "args": [{"func_args": {"pathname": "'example123.egg-info'", "recursive": "False"}, "return_value": "'example123.egg-info'"}, {"func_args": {"pathname": "'example123.egg-info'", "recursive": "False"}, "return_value": "None"}, {"func_args": {"pathname": "'example123/__init__.py'", "recursive": "False"}, "return_value": "'example123/__init__.py'"}, {"func_args": {"pathname": "'example123/__init__.py'", "recursive": "False"}, "return_value": "None"}, {"func_args": {"pathname": "'setup.py'", "recursive": "False"}, "return_value": "'setup.py'"}, {"func_args": {"pathname": "'setup.py'", "recursive": "False"}, "return_value": "None"}, {"func_args": {"pathname": "'tox.ini'", "recursive": "False"}, "return_value": "'tox.ini'"}, {"func_args": {"pathname": "'tox.ini'", "recursive": "False"}, "return_value": "None"}, {"func_args": {"pathname": "'example123.egg-info'", "recursive": "False"}, "return_value": "'example123.egg-info'"}, {"func_args": {"pathname": "'example123.egg-info'", "recursive": "False"}, "return_value": "None"}, {"func_args": {"pathname": "'example123/__init__.py'", "recursive": "False"}, "return_value": "'example123/__init__.py'"}, {"func_args": {"pathname": "'example123/__init__.py'", "recursive": "False"}, "return_value": "None"}, {"func_args": {"pathname": "'tests/test_hello.py'", "recursive": "False"}, "return_value": "'tests/test_hello.py'"}, {"func_args": {"pathname": "'tests/test_hello.py'", "recursive": "False"}, "return_value": "None"}, {"func_args": {"pathname": "'setup.py'", "recursive": "False"}, "return_value": "'setup.py'"}, {"func_args": {"pathname": "'setup.py'", "recursive": "False"}, "return_value": "None"}, {"func_args": {"pathname": "'tox.ini'", "recursive": "False"}, "return_value": "'tox.ini'"}, {"func_args": {"pathname": "'tox.ini'", "recursive": "False"}, "return_value": "None"}, {"func_args": {"pathname": "'pkg123.egg-info'", "recursive": "False"}, "return_value": "'pkg123.egg-info'"}, {"func_args": {"pathname": "'pkg123.egg-info'", "recursive": "False"}, "return_value": "None"}, {"func_args": {"pathname": "'pkg123/__init__.py'", "recursive": "False"}, "return_value": "'pkg123/__init__.py'"}, {"func_args": {"pathname": "'pkg123/__init__.py'", "recursive": "False"}, "return_value": "None"}, {"func_args": {"pathname": "'setup.py'", "recursive": "False"}, "return_value": "'setup.py'"}, {"func_args": {"pathname": "'setup.py'", "recursive": "False"}, "return_value": "None"}, {"func_args": {"pathname": "'tox.ini'", "recursive": "False"}, "return_value": "'tox.ini'"}, {"func_args": {"pathname": "'tox.ini'", "recursive": "False"}, "return_value": "None"}], "text": "def _iglob(pathname, recursive):\n    dirname, basename = os.path.split(pathname)\n    glob_in_dir = glob2 if recursive and _isrecursive(basename) else glob1\n\n    if not has_magic(pathname):\n        if basename:\n            if os.path.lexists(pathname):\n                yield pathname\n        else:\n            # Patterns ending with a slash should match only directories\n            if os.path.isdir(dirname):\n                yield pathname\n        return\n\n    if not dirname:\n        yield from glob_in_dir(dirname, basename)\n        return\n    # `os.path.split()` returns the argument itself as a dirname if it is a\n    # drive or UNC path.  Prevent an infinite recursion if a drive or UNC path\n    # contains magic characters (i.e. r'\\\\?\\C:').\n    if dirname != pathname and has_magic(dirname):\n        dirs = _iglob(dirname, recursive)\n    else:\n        dirs = [dirname]\n    if not has_magic(basename):\n        glob_in_dir = glob0\n    for dirname in dirs:\n        for name in glob_in_dir(dirname, basename):\n            yield os.path.join(dirname, name)"}, "glob": {"line": 15, "args": [{"func_args": {"pathname": "'example123.egg-info'", "recursive": "False"}, "return_value": "['example123.egg-info']"}, {"func_args": {"pathname": "'example123/__init__.py'", "recursive": "False"}, "return_value": "['example123/__init__.py']"}, {"func_args": {"pathname": "'setup.py'", "recursive": "False"}, "return_value": "['setup.py']"}, {"func_args": {"pathname": "'tox.ini'", "recursive": "False"}, "return_value": "['tox.ini']"}, {"func_args": {"pathname": "'example123.egg-info'", "recursive": "False"}, "return_value": "['example123.egg-info']"}, {"func_args": {"pathname": "'example123/__init__.py'", "recursive": "False"}, "return_value": "['example123/__init__.py']"}, {"func_args": {"pathname": "'tests/test_hello.py'", "recursive": "False"}, "return_value": "['tests/test_hello.py']"}, {"func_args": {"pathname": "'setup.py'", "recursive": "False"}, "return_value": "['setup.py']"}, {"func_args": {"pathname": "'tox.ini'", "recursive": "False"}, "return_value": "['tox.ini']"}, {"func_args": {"pathname": "'pkg123.egg-info'", "recursive": "False"}, "return_value": "['pkg123.egg-info']"}, {"func_args": {"pathname": "'pkg123/__init__.py'", "recursive": "False"}, "return_value": "['pkg123/__init__.py']"}, {"func_args": {"pathname": "'setup.py'", "recursive": "False"}, "return_value": "['setup.py']"}, {"func_args": {"pathname": "'tox.ini'", "recursive": "False"}, "return_value": "['tox.ini']"}], "text": "def glob(pathname, recursive=False):\n    \"\"\"Return a list of paths matching a pathname pattern.\n\n    The pattern may contain simple shell-style wildcards a la\n    fnmatch. However, unlike fnmatch, filenames starting with a\n    dot are special cases that are not matched by '*' and '?'\n    patterns.\n\n    If recursive is true, the pattern '**' will match any files and\n    zero or more directories and subdirectories.\n    \"\"\"\n    return list(iglob(pathname, recursive=recursive))"}, "neuter_encoding_declaration": {"line": 214, "args": [{"func_args": {"source": "'\"\"\"All non private names (no leading underscore) here are part of the tox API.\\n\\nThey live in the tox namespace and can be accessed as tox.[NAMESPACE.]NAME\\n\"\"\"\\nimport os\\nimport re\\nimport sys\\n\\n_THIS_FILE = os.path.realpath(os.path.abspath(__file__))\\n\\n\\nclass PYTHON:\\n    PY_FACTORS_RE = re.compile(\"^(?!py$)(py|pypy|jython)([2-9][0-9]?[0-9]?)?$\")\\n    CURRENT_RELEASE_ENV = \"py37\"\\n    \"\"\"Should hold currently released py -> for easy updating\"\"\"\\n    QUICKSTART_PY_ENVS = [\"py27\", \"py35\", \"py36\", CURRENT_RELEASE_ENV, \"pypy\", \"jython\"]\\n    \"\"\"For choices in tox-quickstart\"\"\"\\n\\n\\nclass INFO:\\n    DEFAULT_CONFIG_NAME = \"tox.ini\"\\n    CONFIG_CANDIDATES = (\"pyproject.toml\", \"tox.ini\", \"setup.cfg\")\\n    IS_WIN = sys.platform == \"win32\"\\n    IS_PYPY = hasattr(sys, \"pypy_version_info\")\\n\\n\\nclass PIP:\\n    SHORT_OPTIONS = [\"c\", \"e\", \"r\", \"b\", \"t\", \"d\"]\\n    LONG_OPTIONS = [\\n        \"build\",\\n        \"cache-dir\",\\n        \"client-cert\",\\n        \"constraint\",\\n        \"download\",\\n        \"editable\",\\n        \"exists-action\",\\n        \"extra-index-url\",\\n        \"global-option\",\\n        \"find-links\",\\n        \"index-url\",\\n        \"install-options\",\\n        \"prefix\",\\n        \"proxy\",\\n        \"no-binary\",\\n        \"only-binary\",\\n        \"requirement\",\\n        \"retries\",\\n        \"root\",\\n        \"src\",\\n        \"target\",\\n        \"timeout\",\\n        \"trusted-host\",\\n        \"upgrade-strategy\",\\n    ]\\n    INSTALL_SHORT_OPTIONS_ARGUMENT = [\"-{}\".format(option) for option in SHORT_OPTIONS]\\n    INSTALL_LONG_OPTIONS_ARGUMENT = [\"--{}\".format(option) for option in LONG_OPTIONS]\\n\\n\\n_HELP_DIR = os.path.join(os.path.dirname(_THIS_FILE), \"helper\")\\nVERSION_QUERY_SCRIPT = os.path.join(_HELP_DIR, \"get_version.py\")\\nSITE_PACKAGE_QUERY_SCRIPT = os.path.join(_HELP_DIR, \"get_site_package_dir.py\")\\nBUILD_REQUIRE_SCRIPT = os.path.join(_HELP_DIR, \"build_requires.py\")\\nBUILD_ISOLATED = os.path.join(_HELP_DIR, \"build_isolated.py\")\\nPARALLEL_RESULT_JSON_PREFIX = \".tox-result\"\\nPARALLEL_RESULT_JSON_SUFFIX = \".json\"\\n'"}, "return_value": "'\"\"\"All non private names (no leading underscore) here are part of the tox API.\\n\\nThey live in the tox namespace and can be accessed as tox.[NAMESPACE.]NAME\\n\"\"\"\\nimport os\\nimport re\\nimport sys\\n\\n_THIS_FILE = os.path.realpath(os.path.abspath(__file__))\\n\\n\\nclass PYTHON:\\n    PY_FACTORS_RE = re.compile(\"^(?!py$)(py|pypy|jython)([2-9][0-9]?[0-9]?)?$\")\\n    CURRENT_RELEASE_ENV = \"py37\"\\n    \"\"\"Should hold currently released py -> for easy updating\"\"\"\\n    QUICKSTART_PY_ENVS = [\"py27\", \"py35\", \"py36\", CURRENT_RELEASE_ENV, \"pypy\", \"jython\"]\\n    \"\"\"For choices in tox-quickstart\"\"\"\\n\\n\\nclass INFO:\\n    DEFAULT_CONFIG_NAME = \"tox.ini\"\\n    CONFIG_CANDIDATES = (\"pyproject.toml\", \"tox.ini\", \"setup.cfg\")\\n    IS_WIN = sys.platform == \"win32\"\\n    IS_PYPY = hasattr(sys, \"pypy_version_info\")\\n\\n\\nclass PIP:\\n    SHORT_OPTIONS = [\"c\", \"e\", \"r\", \"b\", \"t\", \"d\"]\\n    LONG_OPTIONS = [\\n        \"build\",\\n        \"cache-dir\",\\n        \"client-cert\",\\n        \"constraint\",\\n        \"download\",\\n        \"editable\",\\n        \"exists-action\",\\n        \"extra-index-url\",\\n        \"global-option\",\\n        \"find-links\",\\n        \"index-url\",\\n        \"install-options\",\\n        \"prefix\",\\n        \"proxy\",\\n        \"no-binary\",\\n        \"only-binary\",\\n        \"requirement\",\\n        \"retries\",\\n        \"root\",\\n        \"src\",\\n        \"target\",\\n        \"timeout\",\\n        \"trusted-host\",\\n        \"upgrade-strategy\",\\n    ]\\n    INSTALL_SHORT_OPTIONS_ARGUMENT = [\"-{}\".format(option) for option in SHORT_OPTIONS]\\n    INSTALL_LONG_OPTIONS_ARGUMENT = [\"--{}\".format(option) for option in LONG_OPTIONS]\\n\\n\\n_HELP_DIR = os.path.join(os.path.dirname(_THIS_FILE), \"helper\")\\nVERSION_QUERY_SCRIPT = os.path.join(_HELP_DIR, \"get_version.py\")\\nSITE_PACKAGE_QUERY_SCRIPT = os.path.join(_HELP_DIR, \"get_site_package_dir.py\")\\nBUILD_REQUIRE_SCRIPT = os.path.join(_HELP_DIR, \"build_requires.py\")\\nBUILD_ISOLATED = os.path.join(_HELP_DIR, \"build_isolated.py\")\\nPARALLEL_RESULT_JSON_PREFIX = \".tox-result\"\\nPARALLEL_RESULT_JSON_SUFFIX = \".json\"\\n'"}, {"func_args": {"source": "'\"\"\"All non private names (no leading underscore) here are part of the tox API.\\n\\nThey live in the tox namespace and can be accessed as tox.[NAMESPACE.]NAME\\n\"\"\"\\nimport os\\nimport re\\nimport sys\\n\\n_THIS_FILE = os.path.realpath(os.path.abspath(__file__))\\n\\n\\nclass PYTHON:\\n    PY_FACTORS_RE = re.compile(\"^(?!py$)(py|pypy|jython)([2-9][0-9]?[0-9]?)?$\")\\n    CURRENT_RELEASE_ENV = \"py37\"\\n    \"\"\"Should hold currently released py -> for easy updating\"\"\"\\n    QUICKSTART_PY_ENVS = [\"py27\", \"py35\", \"py36\", CURRENT_RELEASE_ENV, \"pypy\", \"jython\"]\\n    \"\"\"For choices in tox-quickstart\"\"\"\\n\\n\\nclass INFO:\\n    DEFAULT_CONFIG_NAME = \"tox.ini\"\\n    CONFIG_CANDIDATES = (\"pyproject.toml\", \"tox.ini\", \"setup.cfg\")\\n    IS_WIN = sys.platform == \"win32\"\\n    IS_PYPY = hasattr(sys, \"pypy_version_info\")\\n\\n\\nclass PIP:\\n    SHORT_OPTIONS = [\"c\", \"e\", \"r\", \"b\", \"t\", \"d\"]\\n    LONG_OPTIONS = [\\n        \"build\",\\n        \"cache-dir\",\\n        \"client-cert\",\\n        \"constraint\",\\n        \"download\",\\n        \"editable\",\\n        \"exists-action\",\\n        \"extra-index-url\",\\n        \"global-option\",\\n        \"find-links\",\\n        \"index-url\",\\n        \"install-options\",\\n        \"prefix\",\\n        \"proxy\",\\n        \"no-binary\",\\n        \"only-binary\",\\n        \"requirement\",\\n        \"retries\",\\n        \"root\",\\n        \"src\",\\n        \"target\",\\n        \"timeout\",\\n        \"trusted-host\",\\n        \"upgrade-strategy\",\\n    ]\\n    INSTALL_SHORT_OPTIONS_ARGUMENT = [\"-{}\".format(option) for option in SHORT_OPTIONS]\\n    INSTALL_LONG_OPTIONS_ARGUMENT = [\"--{}\".format(option) for option in LONG_OPTIONS]\\n\\n\\n_HELP_DIR = os.path.join(os.path.dirname(_THIS_FILE), \"helper\")\\nVERSION_QUERY_SCRIPT = os.path.join(_HELP_DIR, \"get_version.py\")\\nSITE_PACKAGE_QUERY_SCRIPT = os.path.join(_HELP_DIR, \"get_site_package_dir.py\")\\nBUILD_REQUIRE_SCRIPT = os.path.join(_HELP_DIR, \"build_requires.py\")\\nBUILD_ISOLATED = os.path.join(_HELP_DIR, \"build_isolated.py\")\\nPARALLEL_RESULT_JSON_PREFIX = \".tox-result\"\\nPARALLEL_RESULT_JSON_SUFFIX = \".json\"\\n'"}, "return_value": "'\"\"\"All non private names (no leading underscore) here are part of the tox API.\\n\\nThey live in the tox namespace and can be accessed as tox.[NAMESPACE.]NAME\\n\"\"\"\\nimport os\\nimport re\\nimport sys\\n\\n_THIS_FILE = os.path.realpath(os.path.abspath(__file__))\\n\\n\\nclass PYTHON:\\n    PY_FACTORS_RE = re.compile(\"^(?!py$)(py|pypy|jython)([2-9][0-9]?[0-9]?)?$\")\\n    CURRENT_RELEASE_ENV = \"py37\"\\n    \"\"\"Should hold currently released py -> for easy updating\"\"\"\\n    QUICKSTART_PY_ENVS = [\"py27\", \"py35\", \"py36\", CURRENT_RELEASE_ENV, \"pypy\", \"jython\"]\\n    \"\"\"For choices in tox-quickstart\"\"\"\\n\\n\\nclass INFO:\\n    DEFAULT_CONFIG_NAME = \"tox.ini\"\\n    CONFIG_CANDIDATES = (\"pyproject.toml\", \"tox.ini\", \"setup.cfg\")\\n    IS_WIN = sys.platform == \"win32\"\\n    IS_PYPY = hasattr(sys, \"pypy_version_info\")\\n\\n\\nclass PIP:\\n    SHORT_OPTIONS = [\"c\", \"e\", \"r\", \"b\", \"t\", \"d\"]\\n    LONG_OPTIONS = [\\n        \"build\",\\n        \"cache-dir\",\\n        \"client-cert\",\\n        \"constraint\",\\n        \"download\",\\n        \"editable\",\\n        \"exists-action\",\\n        \"extra-index-url\",\\n        \"global-option\",\\n        \"find-links\",\\n        \"index-url\",\\n        \"install-options\",\\n        \"prefix\",\\n        \"proxy\",\\n        \"no-binary\",\\n        \"only-binary\",\\n        \"requirement\",\\n        \"retries\",\\n        \"root\",\\n        \"src\",\\n        \"target\",\\n        \"timeout\",\\n        \"trusted-host\",\\n        \"upgrade-strategy\",\\n    ]\\n    INSTALL_SHORT_OPTIONS_ARGUMENT = [\"-{}\".format(option) for option in SHORT_OPTIONS]\\n    INSTALL_LONG_OPTIONS_ARGUMENT = [\"--{}\".format(option) for option in LONG_OPTIONS]\\n\\n\\n_HELP_DIR = os.path.join(os.path.dirname(_THIS_FILE), \"helper\")\\nVERSION_QUERY_SCRIPT = os.path.join(_HELP_DIR, \"get_version.py\")\\nSITE_PACKAGE_QUERY_SCRIPT = os.path.join(_HELP_DIR, \"get_site_package_dir.py\")\\nBUILD_REQUIRE_SCRIPT = os.path.join(_HELP_DIR, \"build_requires.py\")\\nBUILD_ISOLATED = os.path.join(_HELP_DIR, \"build_isolated.py\")\\nPARALLEL_RESULT_JSON_PREFIX = \".tox-result\"\\nPARALLEL_RESULT_JSON_SUFFIX = \".json\"\\n'"}, {"func_args": {"source": "'import os\\nimport pipes\\nimport signal\\n\\n\\ndef exit_code_str(exception_name, command, exit_code):\\n    \"\"\"String representation for an InvocationError, with exit code\\n\\n    NOTE: this might also be used by plugin tests (tox-venv at the time of writing),\\n    so some coordination is needed if this is ever moved or a different solution for this hack\\n    is found.\\n\\n    NOTE: this is a separate function because pytest-mock `spy` does not work on Exceptions\\n    We can use neither a class method nor a static because of https://bugs.python.org/issue23078.\\n    Even a normal method failed with \"TypeError: descriptor \\'__getattribute__\\' requires a\\n    \\'BaseException\\' object but received a \\'type\\'\".\\n    \"\"\"\\n    str_ = \"{} for command {}\".format(exception_name, command)\\n    if exit_code is not None:\\n        if exit_code < 0 or (os.name == \"posix\" and exit_code > 128):\\n            signals = {\\n                number: name for name, number in vars(signal).items() if name.startswith(\"SIG\")\\n            }\\n            if exit_code < 0:\\n                # Signal reported via subprocess.Popen.\\n                sig_name = signals.get(-exit_code)\\n                str_ += \" (exited with code {:d} ({}))\".format(exit_code, sig_name)\\n            else:\\n                str_ += \" (exited with code {:d})\".format(exit_code)\\n                number = exit_code - 128\\n                name = signals.get(number)\\n                if name:\\n                    str_ += (\\n                        \")\\\\nNote: this might indicate a fatal error signal \"\\n                        \"({:d} - 128 = {:d}: {})\".format(exit_code, number, name)\\n                    )\\n        str_ += \" (exited with code {:d})\".format(exit_code)\\n    return str_\\n\\n\\nclass Error(Exception):\\n    def __str__(self):\\n        return \"{}: {}\".format(self.__class__.__name__, self.args[0])\\n\\n\\nclass MissingSubstitution(Error):\\n    FLAG = \"TOX_MISSING_SUBSTITUTION\"\\n    \"\"\"placeholder for debugging configurations\"\"\"\\n\\n    def __init__(self, name):\\n        self.name = name\\n        super(Error, self).__init__(name)\\n\\n\\nclass ConfigError(Error):\\n    \"\"\"Error in tox configuration.\"\"\"\\n\\n\\nclass SubstitutionStackError(ConfigError, ValueError):\\n    \"\"\"Error in tox configuration recursive substitution.\"\"\"\\n\\n\\nclass UnsupportedInterpreter(Error):\\n    \"\"\"Signals an unsupported Interpreter.\"\"\"\\n\\n\\nclass InterpreterNotFound(Error):\\n    \"\"\"Signals that an interpreter could not be found.\"\"\"\\n\\n\\nclass InvocationError(Error):\\n    \"\"\"An error while invoking a script.\"\"\"\\n\\n    def __init__(self, command, exit_code=None, out=None):\\n        super(Error, self).__init__(command, exit_code)\\n        self.command = command\\n        self.exit_code = exit_code\\n        self.out = out\\n\\n    def __str__(self):\\n        return exit_code_str(self.__class__.__name__, self.command, self.exit_code)\\n\\n\\nclass MissingDirectory(Error):\\n    \"\"\"A directory did not exist.\"\"\"\\n\\n\\nclass MissingDependency(Error):\\n    \"\"\"A dependency could not be found or determined.\"\"\"\\n\\n\\nclass MissingRequirement(Error):\\n    \"\"\"A requirement defined in :config:`require` is not met.\"\"\"\\n\\n    def __init__(self, config):\\n        self.config = config\\n\\n    def __str__(self):\\n        return \" \".join(pipes.quote(i) for i in self.config.requires)\\n\\n\\nclass BadRequirement(Error):\\n    \"\"\"A requirement defined in :config:`require` cannot be parsed.\"\"\"\\n'"}, "return_value": "'import os\\nimport pipes\\nimport signal\\n\\n\\ndef exit_code_str(exception_name, command, exit_code):\\n    \"\"\"String representation for an InvocationError, with exit code\\n\\n    NOTE: this might also be used by plugin tests (tox-venv at the time of writing),\\n    so some coordination is needed if this is ever moved or a different solution for this hack\\n    is found.\\n\\n    NOTE: this is a separate function because pytest-mock `spy` does not work on Exceptions\\n    We can use neither a class method nor a static because of https://bugs.python.org/issue23078.\\n    Even a normal method failed with \"TypeError: descriptor \\'__getattribute__\\' requires a\\n    \\'BaseException\\' object but received a \\'type\\'\".\\n    \"\"\"\\n    str_ = \"{} for command {}\".format(exception_name, command)\\n    if exit_code is not None:\\n        if exit_code < 0 or (os.name == \"posix\" and exit_code > 128):\\n            signals = {\\n                number: name for name, number in vars(signal).items() if name.startswith(\"SIG\")\\n            }\\n            if exit_code < 0:\\n                # Signal reported via subprocess.Popen.\\n                sig_name = signals.get(-exit_code)\\n                str_ += \" (exited with code {:d} ({}))\".format(exit_code, sig_name)\\n            else:\\n                str_ += \" (exited with code {:d})\".format(exit_code)\\n                number = exit_code - 128\\n                name = signals.get(number)\\n                if name:\\n                    str_ += (\\n                        \")\\\\nNote: this might indicate a fatal error signal \"\\n                        \"({:d} - 128 = {:d}: {})\".format(exit_code, number, name)\\n                    )\\n        str_ += \" (exited with code {:d})\".format(exit_code)\\n    return str_\\n\\n\\nclass Error(Exception):\\n    def __str__(self):\\n        return \"{}: {}\".format(self.__class__.__name__, self.args[0])\\n\\n\\nclass MissingSubstitution(Error):\\n    FLAG = \"TOX_MISSING_SUBSTITUTION\"\\n    \"\"\"placeholder for debugging configurations\"\"\"\\n\\n    def __init__(self, name):\\n        self.name = name\\n        super(Error, self).__init__(name)\\n\\n\\nclass ConfigError(Error):\\n    \"\"\"Error in tox configuration.\"\"\"\\n\\n\\nclass SubstitutionStackError(ConfigError, ValueError):\\n    \"\"\"Error in tox configuration recursive substitution.\"\"\"\\n\\n\\nclass UnsupportedInterpreter(Error):\\n    \"\"\"Signals an unsupported Interpreter.\"\"\"\\n\\n\\nclass InterpreterNotFound(Error):\\n    \"\"\"Signals that an interpreter could not be found.\"\"\"\\n\\n\\nclass InvocationError(Error):\\n    \"\"\"An error while invoking a script.\"\"\"\\n\\n    def __init__(self, command, exit_code=None, out=None):\\n        super(Error, self).__init__(command, exit_code)\\n        self.command = command\\n        self.exit_code = exit_code\\n        self.out = out\\n\\n    def __str__(self):\\n        return exit_code_str(self.__class__.__name__, self.command, self.exit_code)\\n\\n\\nclass MissingDirectory(Error):\\n    \"\"\"A directory did not exist.\"\"\"\\n\\n\\nclass MissingDependency(Error):\\n    \"\"\"A dependency could not be found or determined.\"\"\"\\n\\n\\nclass MissingRequirement(Error):\\n    \"\"\"A requirement defined in :config:`require` is not met.\"\"\"\\n\\n    def __init__(self, config):\\n        self.config = config\\n\\n    def __str__(self):\\n        return \" \".join(pipes.quote(i) for i in self.config.requires)\\n\\n\\nclass BadRequirement(Error):\\n    \"\"\"A requirement defined in :config:`require` cannot be parsed.\"\"\"\\n'"}, {"func_args": {"source": "'import os\\nimport pipes\\nimport signal\\n\\n\\ndef exit_code_str(exception_name, command, exit_code):\\n    \"\"\"String representation for an InvocationError, with exit code\\n\\n    NOTE: this might also be used by plugin tests (tox-venv at the time of writing),\\n    so some coordination is needed if this is ever moved or a different solution for this hack\\n    is found.\\n\\n    NOTE: this is a separate function because pytest-mock `spy` does not work on Exceptions\\n    We can use neither a class method nor a static because of https://bugs.python.org/issue23078.\\n    Even a normal method failed with \"TypeError: descriptor \\'__getattribute__\\' requires a\\n    \\'BaseException\\' object but received a \\'type\\'\".\\n    \"\"\"\\n    str_ = \"{} for command {}\".format(exception_name, command)\\n    if exit_code is not None:\\n        if exit_code < 0 or (os.name == \"posix\" and exit_code > 128):\\n            signals = {\\n                number: name for name, number in vars(signal).items() if name.startswith(\"SIG\")\\n            }\\n            if exit_code < 0:\\n                # Signal reported via subprocess.Popen.\\n                sig_name = signals.get(-exit_code)\\n                str_ += \" (exited with code {:d} ({}))\".format(exit_code, sig_name)\\n            else:\\n                str_ += \" (exited with code {:d})\".format(exit_code)\\n                number = exit_code - 128\\n                name = signals.get(number)\\n                if name:\\n                    str_ += (\\n                        \")\\\\nNote: this might indicate a fatal error signal \"\\n                        \"({:d} - 128 = {:d}: {})\".format(exit_code, number, name)\\n                    )\\n        str_ += \" (exited with code {:d})\".format(exit_code)\\n    return str_\\n\\n\\nclass Error(Exception):\\n    def __str__(self):\\n        return \"{}: {}\".format(self.__class__.__name__, self.args[0])\\n\\n\\nclass MissingSubstitution(Error):\\n    FLAG = \"TOX_MISSING_SUBSTITUTION\"\\n    \"\"\"placeholder for debugging configurations\"\"\"\\n\\n    def __init__(self, name):\\n        self.name = name\\n        super(Error, self).__init__(name)\\n\\n\\nclass ConfigError(Error):\\n    \"\"\"Error in tox configuration.\"\"\"\\n\\n\\nclass SubstitutionStackError(ConfigError, ValueError):\\n    \"\"\"Error in tox configuration recursive substitution.\"\"\"\\n\\n\\nclass UnsupportedInterpreter(Error):\\n    \"\"\"Signals an unsupported Interpreter.\"\"\"\\n\\n\\nclass InterpreterNotFound(Error):\\n    \"\"\"Signals that an interpreter could not be found.\"\"\"\\n\\n\\nclass InvocationError(Error):\\n    \"\"\"An error while invoking a script.\"\"\"\\n\\n    def __init__(self, command, exit_code=None, out=None):\\n        super(Error, self).__init__(command, exit_code)\\n        self.command = command\\n        self.exit_code = exit_code\\n        self.out = out\\n\\n    def __str__(self):\\n        return exit_code_str(self.__class__.__name__, self.command, self.exit_code)\\n\\n\\nclass MissingDirectory(Error):\\n    \"\"\"A directory did not exist.\"\"\"\\n\\n\\nclass MissingDependency(Error):\\n    \"\"\"A dependency could not be found or determined.\"\"\"\\n\\n\\nclass MissingRequirement(Error):\\n    \"\"\"A requirement defined in :config:`require` is not met.\"\"\"\\n\\n    def __init__(self, config):\\n        self.config = config\\n\\n    def __str__(self):\\n        return \" \".join(pipes.quote(i) for i in self.config.requires)\\n\\n\\nclass BadRequirement(Error):\\n    \"\"\"A requirement defined in :config:`require` cannot be parsed.\"\"\"\\n'"}, "return_value": "'import os\\nimport pipes\\nimport signal\\n\\n\\ndef exit_code_str(exception_name, command, exit_code):\\n    \"\"\"String representation for an InvocationError, with exit code\\n\\n    NOTE: this might also be used by plugin tests (tox-venv at the time of writing),\\n    so some coordination is needed if this is ever moved or a different solution for this hack\\n    is found.\\n\\n    NOTE: this is a separate function because pytest-mock `spy` does not work on Exceptions\\n    We can use neither a class method nor a static because of https://bugs.python.org/issue23078.\\n    Even a normal method failed with \"TypeError: descriptor \\'__getattribute__\\' requires a\\n    \\'BaseException\\' object but received a \\'type\\'\".\\n    \"\"\"\\n    str_ = \"{} for command {}\".format(exception_name, command)\\n    if exit_code is not None:\\n        if exit_code < 0 or (os.name == \"posix\" and exit_code > 128):\\n            signals = {\\n                number: name for name, number in vars(signal).items() if name.startswith(\"SIG\")\\n            }\\n            if exit_code < 0:\\n                # Signal reported via subprocess.Popen.\\n                sig_name = signals.get(-exit_code)\\n                str_ += \" (exited with code {:d} ({}))\".format(exit_code, sig_name)\\n            else:\\n                str_ += \" (exited with code {:d})\".format(exit_code)\\n                number = exit_code - 128\\n                name = signals.get(number)\\n                if name:\\n                    str_ += (\\n                        \")\\\\nNote: this might indicate a fatal error signal \"\\n                        \"({:d} - 128 = {:d}: {})\".format(exit_code, number, name)\\n                    )\\n        str_ += \" (exited with code {:d})\".format(exit_code)\\n    return str_\\n\\n\\nclass Error(Exception):\\n    def __str__(self):\\n        return \"{}: {}\".format(self.__class__.__name__, self.args[0])\\n\\n\\nclass MissingSubstitution(Error):\\n    FLAG = \"TOX_MISSING_SUBSTITUTION\"\\n    \"\"\"placeholder for debugging configurations\"\"\"\\n\\n    def __init__(self, name):\\n        self.name = name\\n        super(Error, self).__init__(name)\\n\\n\\nclass ConfigError(Error):\\n    \"\"\"Error in tox configuration.\"\"\"\\n\\n\\nclass SubstitutionStackError(ConfigError, ValueError):\\n    \"\"\"Error in tox configuration recursive substitution.\"\"\"\\n\\n\\nclass UnsupportedInterpreter(Error):\\n    \"\"\"Signals an unsupported Interpreter.\"\"\"\\n\\n\\nclass InterpreterNotFound(Error):\\n    \"\"\"Signals that an interpreter could not be found.\"\"\"\\n\\n\\nclass InvocationError(Error):\\n    \"\"\"An error while invoking a script.\"\"\"\\n\\n    def __init__(self, command, exit_code=None, out=None):\\n        super(Error, self).__init__(command, exit_code)\\n        self.command = command\\n        self.exit_code = exit_code\\n        self.out = out\\n\\n    def __str__(self):\\n        return exit_code_str(self.__class__.__name__, self.command, self.exit_code)\\n\\n\\nclass MissingDirectory(Error):\\n    \"\"\"A directory did not exist.\"\"\"\\n\\n\\nclass MissingDependency(Error):\\n    \"\"\"A dependency could not be found or determined.\"\"\"\\n\\n\\nclass MissingRequirement(Error):\\n    \"\"\"A requirement defined in :config:`require` is not met.\"\"\"\\n\\n    def __init__(self, config):\\n        self.config = config\\n\\n    def __str__(self):\\n        return \" \".join(pipes.quote(i) for i in self.config.requires)\\n\\n\\nclass BadRequirement(Error):\\n    \"\"\"A requirement defined in :config:`require` cannot be parsed.\"\"\"\\n'"}, {"func_args": {"source": "''"}, "return_value": "''"}, {"func_args": {"source": "'\"\"\"PEP 517 build backend invocation script.\\n\\nIt accepts externally parsed build configuration from `[build-system]`\\nin `pyproject.toml` and invokes an API endpoint for building an sdist\\ntarball.\\n\"\"\"\\n\\nimport os\\nimport sys\\n\\n\\ndef _ensure_module_in_paths(module, paths):\\n    \"\"\"Verify that the imported backend belongs in-tree.\"\"\"\\n    if not paths:\\n        return\\n\\n    module_path = os.path.normcase(os.path.abspath(module.__file__))\\n    normalized_paths = (os.path.normcase(os.path.abspath(path)) for path in paths)\\n\\n    if any(os.path.commonprefix((module_path, path)) == path for path in normalized_paths):\\n        return\\n\\n    raise SystemExit(\\n        \"build-backend ({!r}) must exist in one of the paths \"\\n        \"specified by backend-path ({!r})\".format(module, paths),\\n    )\\n\\n\\ndist_folder = sys.argv[1]\\nbackend_spec = sys.argv[2]\\nbackend_obj = sys.argv[3] if len(sys.argv) >= 4 else None\\nbackend_paths = sys.argv[4].split(os.path.pathsep) if (len(sys.argv) >= 5 and sys.argv[4]) else []\\n\\nsys.path[:0] = backend_paths\\n\\nbackend = __import__(backend_spec, fromlist=[\"_trash\"])\\n_ensure_module_in_paths(backend, backend_paths)\\nif backend_obj:\\n    backend = getattr(backend, backend_obj)\\n\\nbasename = backend.build_sdist(dist_folder, {\"--global-option\": [\"--formats=gztar\"]})\\nprint(basename)\\n'"}, "return_value": "'\"\"\"PEP 517 build backend invocation script.\\n\\nIt accepts externally parsed build configuration from `[build-system]`\\nin `pyproject.toml` and invokes an API endpoint for building an sdist\\ntarball.\\n\"\"\"\\n\\nimport os\\nimport sys\\n\\n\\ndef _ensure_module_in_paths(module, paths):\\n    \"\"\"Verify that the imported backend belongs in-tree.\"\"\"\\n    if not paths:\\n        return\\n\\n    module_path = os.path.normcase(os.path.abspath(module.__file__))\\n    normalized_paths = (os.path.normcase(os.path.abspath(path)) for path in paths)\\n\\n    if any(os.path.commonprefix((module_path, path)) == path for path in normalized_paths):\\n        return\\n\\n    raise SystemExit(\\n        \"build-backend ({!r}) must exist in one of the paths \"\\n        \"specified by backend-path ({!r})\".format(module, paths),\\n    )\\n\\n\\ndist_folder = sys.argv[1]\\nbackend_spec = sys.argv[2]\\nbackend_obj = sys.argv[3] if len(sys.argv) >= 4 else None\\nbackend_paths = sys.argv[4].split(os.path.pathsep) if (len(sys.argv) >= 5 and sys.argv[4]) else []\\n\\nsys.path[:0] = backend_paths\\n\\nbackend = __import__(backend_spec, fromlist=[\"_trash\"])\\n_ensure_module_in_paths(backend, backend_paths)\\nif backend_obj:\\n    backend = getattr(backend, backend_obj)\\n\\nbasename = backend.build_sdist(dist_folder, {\"--global-option\": [\"--formats=gztar\"]})\\nprint(basename)\\n'"}, {"func_args": {"source": "'\"\"\"PEP 517 build backend invocation script.\\n\\nIt accepts externally parsed build configuration from `[build-system]`\\nin `pyproject.toml` and invokes an API endpoint for building an sdist\\ntarball.\\n\"\"\"\\n\\nimport os\\nimport sys\\n\\n\\ndef _ensure_module_in_paths(module, paths):\\n    \"\"\"Verify that the imported backend belongs in-tree.\"\"\"\\n    if not paths:\\n        return\\n\\n    module_path = os.path.normcase(os.path.abspath(module.__file__))\\n    normalized_paths = (os.path.normcase(os.path.abspath(path)) for path in paths)\\n\\n    if any(os.path.commonprefix((module_path, path)) == path for path in normalized_paths):\\n        return\\n\\n    raise SystemExit(\\n        \"build-backend ({!r}) must exist in one of the paths \"\\n        \"specified by backend-path ({!r})\".format(module, paths),\\n    )\\n\\n\\ndist_folder = sys.argv[1]\\nbackend_spec = sys.argv[2]\\nbackend_obj = sys.argv[3] if len(sys.argv) >= 4 else None\\nbackend_paths = sys.argv[4].split(os.path.pathsep) if (len(sys.argv) >= 5 and sys.argv[4]) else []\\n\\nsys.path[:0] = backend_paths\\n\\nbackend = __import__(backend_spec, fromlist=[\"_trash\"])\\n_ensure_module_in_paths(backend, backend_paths)\\nif backend_obj:\\n    backend = getattr(backend, backend_obj)\\n\\nbasename = backend.build_sdist(dist_folder, {\"--global-option\": [\"--formats=gztar\"]})\\nprint(basename)\\n'"}, "return_value": "'\"\"\"PEP 517 build backend invocation script.\\n\\nIt accepts externally parsed build configuration from `[build-system]`\\nin `pyproject.toml` and invokes an API endpoint for building an sdist\\ntarball.\\n\"\"\"\\n\\nimport os\\nimport sys\\n\\n\\ndef _ensure_module_in_paths(module, paths):\\n    \"\"\"Verify that the imported backend belongs in-tree.\"\"\"\\n    if not paths:\\n        return\\n\\n    module_path = os.path.normcase(os.path.abspath(module.__file__))\\n    normalized_paths = (os.path.normcase(os.path.abspath(path)) for path in paths)\\n\\n    if any(os.path.commonprefix((module_path, path)) == path for path in normalized_paths):\\n        return\\n\\n    raise SystemExit(\\n        \"build-backend ({!r}) must exist in one of the paths \"\\n        \"specified by backend-path ({!r})\".format(module, paths),\\n    )\\n\\n\\ndist_folder = sys.argv[1]\\nbackend_spec = sys.argv[2]\\nbackend_obj = sys.argv[3] if len(sys.argv) >= 4 else None\\nbackend_paths = sys.argv[4].split(os.path.pathsep) if (len(sys.argv) >= 5 and sys.argv[4]) else []\\n\\nsys.path[:0] = backend_paths\\n\\nbackend = __import__(backend_spec, fromlist=[\"_trash\"])\\n_ensure_module_in_paths(backend, backend_paths)\\nif backend_obj:\\n    backend = getattr(backend, backend_obj)\\n\\nbasename = backend.build_sdist(dist_folder, {\"--global-option\": [\"--formats=gztar\"]})\\nprint(basename)\\n'"}, {"func_args": {"source": "'import json\\nimport os\\nimport sys\\n\\nbackend_spec = sys.argv[1]\\nbackend_obj = sys.argv[2] if len(sys.argv) >= 3 else None\\nbackend_paths = sys.argv[3].split(os.path.pathsep) if len(sys.argv) >= 4 else []\\n\\nsys.path[:0] = backend_paths\\n\\nbackend = __import__(backend_spec, fromlist=[\"_trash\"])\\nif backend_obj:\\n    backend = getattr(backend, backend_obj)\\n\\ntry:\\n    for_build_requires = backend.get_requires_for_build_sdist(None)\\nexcept AttributeError:\\n    # PEP 517 states that get_requires_for_build_sdist is optional for a build\\n    # backend object. When the backend object omits it, the default\\n    # implementation must be equivalent to return []\\n    for_build_requires = []\\n\\noutput = json.dumps(for_build_requires)\\nprint(output)\\n'"}, "return_value": "'import json\\nimport os\\nimport sys\\n\\nbackend_spec = sys.argv[1]\\nbackend_obj = sys.argv[2] if len(sys.argv) >= 3 else None\\nbackend_paths = sys.argv[3].split(os.path.pathsep) if len(sys.argv) >= 4 else []\\n\\nsys.path[:0] = backend_paths\\n\\nbackend = __import__(backend_spec, fromlist=[\"_trash\"])\\nif backend_obj:\\n    backend = getattr(backend, backend_obj)\\n\\ntry:\\n    for_build_requires = backend.get_requires_for_build_sdist(None)\\nexcept AttributeError:\\n    # PEP 517 states that get_requires_for_build_sdist is optional for a build\\n    # backend object. When the backend object omits it, the default\\n    # implementation must be equivalent to return []\\n    for_build_requires = []\\n\\noutput = json.dumps(for_build_requires)\\nprint(output)\\n'"}, {"func_args": {"source": "'import json\\nimport os\\nimport sys\\n\\nbackend_spec = sys.argv[1]\\nbackend_obj = sys.argv[2] if len(sys.argv) >= 3 else None\\nbackend_paths = sys.argv[3].split(os.path.pathsep) if len(sys.argv) >= 4 else []\\n\\nsys.path[:0] = backend_paths\\n\\nbackend = __import__(backend_spec, fromlist=[\"_trash\"])\\nif backend_obj:\\n    backend = getattr(backend, backend_obj)\\n\\ntry:\\n    for_build_requires = backend.get_requires_for_build_sdist(None)\\nexcept AttributeError:\\n    # PEP 517 states that get_requires_for_build_sdist is optional for a build\\n    # backend object. When the backend object omits it, the default\\n    # implementation must be equivalent to return []\\n    for_build_requires = []\\n\\noutput = json.dumps(for_build_requires)\\nprint(output)\\n'"}, "return_value": "'import json\\nimport os\\nimport sys\\n\\nbackend_spec = sys.argv[1]\\nbackend_obj = sys.argv[2] if len(sys.argv) >= 3 else None\\nbackend_paths = sys.argv[3].split(os.path.pathsep) if len(sys.argv) >= 4 else []\\n\\nsys.path[:0] = backend_paths\\n\\nbackend = __import__(backend_spec, fromlist=[\"_trash\"])\\nif backend_obj:\\n    backend = getattr(backend, backend_obj)\\n\\ntry:\\n    for_build_requires = backend.get_requires_for_build_sdist(None)\\nexcept AttributeError:\\n    # PEP 517 states that get_requires_for_build_sdist is optional for a build\\n    # backend object. When the backend object omits it, the default\\n    # implementation must be equivalent to return []\\n    for_build_requires = []\\n\\noutput = json.dumps(for_build_requires)\\nprint(output)\\n'"}, {"func_args": {"source": "'from __future__ import unicode_literals\\n\\nimport json\\nimport sys\\nimport sysconfig\\nimport warnings\\n\\ndest_prefix = sys.argv[1]\\nwith warnings.catch_warnings():  # disable warning for PEP-632\\n    warnings.simplefilter(\"ignore\")\\n    try:\\n        import distutils.sysconfig\\n\\n        data = distutils.sysconfig.get_python_lib(prefix=dest_prefix)\\n    except ImportError:  # if removed or not installed ignore\\n        config_vars = {\\n            k: dest_prefix if any(v == p for p in (sys.prefix, sys.base_prefix)) else v\\n            for k, v in sysconfig.get_config_vars().items()\\n        }\\n        data = sysconfig.get_path(\"purelib\", vars=config_vars)\\n\\nprint(json.dumps({\"dir\": data}))\\n'"}, "return_value": "'from __future__ import unicode_literals\\n\\nimport json\\nimport sys\\nimport sysconfig\\nimport warnings\\n\\ndest_prefix = sys.argv[1]\\nwith warnings.catch_warnings():  # disable warning for PEP-632\\n    warnings.simplefilter(\"ignore\")\\n    try:\\n        import distutils.sysconfig\\n\\n        data = distutils.sysconfig.get_python_lib(prefix=dest_prefix)\\n    except ImportError:  # if removed or not installed ignore\\n        config_vars = {\\n            k: dest_prefix if any(v == p for p in (sys.prefix, sys.base_prefix)) else v\\n            for k, v in sysconfig.get_config_vars().items()\\n        }\\n        data = sysconfig.get_path(\"purelib\", vars=config_vars)\\n\\nprint(json.dumps({\"dir\": data}))\\n'"}, {"func_args": {"source": "'from __future__ import unicode_literals\\n\\nimport json\\nimport sys\\nimport sysconfig\\nimport warnings\\n\\ndest_prefix = sys.argv[1]\\nwith warnings.catch_warnings():  # disable warning for PEP-632\\n    warnings.simplefilter(\"ignore\")\\n    try:\\n        import distutils.sysconfig\\n\\n        data = distutils.sysconfig.get_python_lib(prefix=dest_prefix)\\n    except ImportError:  # if removed or not installed ignore\\n        config_vars = {\\n            k: dest_prefix if any(v == p for p in (sys.prefix, sys.base_prefix)) else v\\n            for k, v in sysconfig.get_config_vars().items()\\n        }\\n        data = sysconfig.get_path(\"purelib\", vars=config_vars)\\n\\nprint(json.dumps({\"dir\": data}))\\n'"}, "return_value": "'from __future__ import unicode_literals\\n\\nimport json\\nimport sys\\nimport sysconfig\\nimport warnings\\n\\ndest_prefix = sys.argv[1]\\nwith warnings.catch_warnings():  # disable warning for PEP-632\\n    warnings.simplefilter(\"ignore\")\\n    try:\\n        import distutils.sysconfig\\n\\n        data = distutils.sysconfig.get_python_lib(prefix=dest_prefix)\\n    except ImportError:  # if removed or not installed ignore\\n        config_vars = {\\n            k: dest_prefix if any(v == p for p in (sys.prefix, sys.base_prefix)) else v\\n            for k, v in sysconfig.get_config_vars().items()\\n        }\\n        data = sysconfig.get_path(\"purelib\", vars=config_vars)\\n\\nprint(json.dumps({\"dir\": data}))\\n'"}, {"func_args": {"source": "'from __future__ import unicode_literals\\n\\nimport json\\nimport os\\nimport platform\\nimport sys\\n\\ninfo = {\\n    \"executable\": sys.executable,\\n    \"implementation\": platform.python_implementation(),\\n    \"version_info\": list(sys.version_info),\\n    \"version\": sys.version,\\n    \"is_64\": sys.maxsize > 2 ** 32,\\n    \"sysplatform\": sys.platform,\\n    \"os_sep\": os.sep,\\n    \"extra_version_info\": getattr(sys, \"pypy_version_info\", None),\\n}\\ninfo_as_dump = json.dumps(info)\\nprint(info_as_dump)\\n'"}, "return_value": "'from __future__ import unicode_literals\\n\\nimport json\\nimport os\\nimport platform\\nimport sys\\n\\ninfo = {\\n    \"executable\": sys.executable,\\n    \"implementation\": platform.python_implementation(),\\n    \"version_info\": list(sys.version_info),\\n    \"version\": sys.version,\\n    \"is_64\": sys.maxsize > 2 ** 32,\\n    \"sysplatform\": sys.platform,\\n    \"os_sep\": os.sep,\\n    \"extra_version_info\": getattr(sys, \"pypy_version_info\", None),\\n}\\ninfo_as_dump = json.dumps(info)\\nprint(info_as_dump)\\n'"}, {"func_args": {"source": "'from __future__ import unicode_literals\\n\\nimport json\\nimport os\\nimport platform\\nimport sys\\n\\ninfo = {\\n    \"executable\": sys.executable,\\n    \"implementation\": platform.python_implementation(),\\n    \"version_info\": list(sys.version_info),\\n    \"version\": sys.version,\\n    \"is_64\": sys.maxsize > 2 ** 32,\\n    \"sysplatform\": sys.platform,\\n    \"os_sep\": os.sep,\\n    \"extra_version_info\": getattr(sys, \"pypy_version_info\", None),\\n}\\ninfo_as_dump = json.dumps(info)\\nprint(info_as_dump)\\n'"}, "return_value": "'from __future__ import unicode_literals\\n\\nimport json\\nimport os\\nimport platform\\nimport sys\\n\\ninfo = {\\n    \"executable\": sys.executable,\\n    \"implementation\": platform.python_implementation(),\\n    \"version_info\": list(sys.version_info),\\n    \"version\": sys.version,\\n    \"is_64\": sys.maxsize > 2 ** 32,\\n    \"sysplatform\": sys.platform,\\n    \"os_sep\": os.sep,\\n    \"extra_version_info\": getattr(sys, \"pypy_version_info\", None),\\n}\\ninfo_as_dump = json.dumps(info)\\nprint(info_as_dump)\\n'"}, {"func_args": {"source": "'\"\"\"Hook specifications for tox - see https://pluggy.readthedocs.io/\"\"\"\\nimport pluggy\\n\\nhookspec = pluggy.HookspecMarker(\"tox\")\\n\\n\\n@hookspec\\ndef tox_addoption(parser):\\n    \"\"\"add command line options to the argparse-style parser object.\"\"\"\\n\\n\\n@hookspec\\ndef tox_configure(config):\\n    \"\"\"Called after command line options are parsed and ini-file has been read.\\n\\n    Please be aware that the config object layout may change between major tox versions.\\n    \"\"\"\\n\\n\\n@hookspec(firstresult=True)\\ndef tox_package(session, venv):\\n    \"\"\"Return the package to be installed for the given venv.\\n\\n    Called once for every environment.\"\"\"\\n\\n\\n@hookspec(firstresult=True)\\ndef tox_get_python_executable(envconfig):\\n    \"\"\"Return a python executable for the given python base name.\\n\\n    The first plugin/hook which returns an executable path will determine it.\\n\\n    ``envconfig`` is the testenv configuration which contains\\n    per-testenv configuration, notably the ``.envname`` and ``.basepython``\\n    setting.\\n    \"\"\"\\n\\n\\n@hookspec(firstresult=True)\\ndef tox_testenv_create(venv, action):\\n    \"\"\"Perform creation action for this venv.\\n\\n    Some example usage:\\n\\n    - To *add* behavior but still use tox\\'s implementation to set up a\\n      virtualenv, implement this hook but do not return a value (or explicitly\\n      return ``None``).\\n    - To *override* tox\\'s virtualenv creation, implement this hook and return\\n      a non-``None`` value.\\n\\n    .. note:: This api is experimental due to the unstable api of\\n        :class:`tox.venv.VirtualEnv`.\\n\\n    .. note:: This hook uses ``firstresult=True`` (see `pluggy first result only`_) -- hooks\\n        implementing this will be run until one returns non-``None``.\\n\\n    .. _`pluggy first result only`: https://pluggy.readthedocs.io/en/latest/#first-result-only\\n    \"\"\"\\n\\n\\n@hookspec(firstresult=True)\\ndef tox_testenv_install_deps(venv, action):\\n    \"\"\"Perform install dependencies action for this venv.\\n\\n    Some example usage:\\n\\n    - To *add* behavior but still use tox\\'s implementation to install\\n      dependencies, implement this hook but do not return a value (or\\n      explicitly return ``None``).  One use-case may be to install (or ensure)\\n      non-python dependencies such as debian packages.\\n    - To *override* tox\\'s installation of dependencies, implement this hook\\n      and return a non-``None`` value.  One use-case may be to install via\\n      a different installation tool such as `pip-accel`_ or `pip-faster`_.\\n\\n    .. note:: This api is experimental due to the unstable api of\\n        :class:`tox.venv.VirtualEnv`.\\n\\n    .. note:: This hook uses ``firstresult=True`` (see `pluggy first result only`_) -- hooks\\n        implementing this will be run until one returns non-``None``.\\n\\n    .. _pip-accel: https://github.com/paylogic/pip-accel\\n    .. _pip-faster: https://github.com/Yelp/venv-update\\n    \"\"\"\\n\\n\\n@hookspec\\ndef tox_runtest_pre(venv):\\n    \"\"\"Perform arbitrary action before running tests for this venv.\\n\\n    This could be used to indicate that tests for a given venv have started, for instance.\\n    \"\"\"\\n\\n\\n@hookspec(firstresult=True)\\ndef tox_runtest(venv, redirect):\\n    \"\"\"Run the tests for this venv.\\n\\n    .. note:: This hook uses ``firstresult=True`` (see `pluggy first result only`_) -- hooks\\n        implementing this will be run until one returns non-``None``.\\n    \"\"\"\\n\\n\\n@hookspec\\ndef tox_runtest_post(venv):\\n    \"\"\"Perform arbitrary action after running tests for this venv.\\n\\n    This could be used to have per-venv test reporting of pass/fail status.\\n    \"\"\"\\n\\n\\n@hookspec(firstresult=True)\\ndef tox_runenvreport(venv, action):\\n    \"\"\"Get the installed packages and versions in this venv.\\n\\n    This could be used for alternative (ie non-pip) package managers, this\\n    plugin should return a ``list`` of type ``str``\\n    \"\"\"\\n\\n\\n@hookspec\\ndef tox_cleanup(session):\\n    \"\"\"Called just before the session is destroyed, allowing any final cleanup operation\"\"\"\\n'"}, "return_value": "'\"\"\"Hook specifications for tox - see https://pluggy.readthedocs.io/\"\"\"\\nimport pluggy\\n\\nhookspec = pluggy.HookspecMarker(\"tox\")\\n\\n\\n@hookspec\\ndef tox_addoption(parser):\\n    \"\"\"add command line options to the argparse-style parser object.\"\"\"\\n\\n\\n@hookspec\\ndef tox_configure(config):\\n    \"\"\"Called after command line options are parsed and ini-file has been read.\\n\\n    Please be aware that the config object layout may change between major tox versions.\\n    \"\"\"\\n\\n\\n@hookspec(firstresult=True)\\ndef tox_package(session, venv):\\n    \"\"\"Return the package to be installed for the given venv.\\n\\n    Called once for every environment.\"\"\"\\n\\n\\n@hookspec(firstresult=True)\\ndef tox_get_python_executable(envconfig):\\n    \"\"\"Return a python executable for the given python base name.\\n\\n    The first plugin/hook which returns an executable path will determine it.\\n\\n    ``envconfig`` is the testenv configuration which contains\\n    per-testenv configuration, notably the ``.envname`` and ``.basepython``\\n    setting.\\n    \"\"\"\\n\\n\\n@hookspec(firstresult=True)\\ndef tox_testenv_create(venv, action):\\n    \"\"\"Perform creation action for this venv.\\n\\n    Some example usage:\\n\\n    - To *add* behavior but still use tox\\'s implementation to set up a\\n      virtualenv, implement this hook but do not return a value (or explicitly\\n      return ``None``).\\n    - To *override* tox\\'s virtualenv creation, implement this hook and return\\n      a non-``None`` value.\\n\\n    .. note:: This api is experimental due to the unstable api of\\n        :class:`tox.venv.VirtualEnv`.\\n\\n    .. note:: This hook uses ``firstresult=True`` (see `pluggy first result only`_) -- hooks\\n        implementing this will be run until one returns non-``None``.\\n\\n    .. _`pluggy first result only`: https://pluggy.readthedocs.io/en/latest/#first-result-only\\n    \"\"\"\\n\\n\\n@hookspec(firstresult=True)\\ndef tox_testenv_install_deps(venv, action):\\n    \"\"\"Perform install dependencies action for this venv.\\n\\n    Some example usage:\\n\\n    - To *add* behavior but still use tox\\'s implementation to install\\n      dependencies, implement this hook but do not return a value (or\\n      explicitly return ``None``).  One use-case may be to install (or ensure)\\n      non-python dependencies such as debian packages.\\n    - To *override* tox\\'s installation of dependencies, implement this hook\\n      and return a non-``None`` value.  One use-case may be to install via\\n      a different installation tool such as `pip-accel`_ or `pip-faster`_.\\n\\n    .. note:: This api is experimental due to the unstable api of\\n        :class:`tox.venv.VirtualEnv`.\\n\\n    .. note:: This hook uses ``firstresult=True`` (see `pluggy first result only`_) -- hooks\\n        implementing this will be run until one returns non-``None``.\\n\\n    .. _pip-accel: https://github.com/paylogic/pip-accel\\n    .. _pip-faster: https://github.com/Yelp/venv-update\\n    \"\"\"\\n\\n\\n@hookspec\\ndef tox_runtest_pre(venv):\\n    \"\"\"Perform arbitrary action before running tests for this venv.\\n\\n    This could be used to indicate that tests for a given venv have started, for instance.\\n    \"\"\"\\n\\n\\n@hookspec(firstresult=True)\\ndef tox_runtest(venv, redirect):\\n    \"\"\"Run the tests for this venv.\\n\\n    .. note:: This hook uses ``firstresult=True`` (see `pluggy first result only`_) -- hooks\\n        implementing this will be run until one returns non-``None``.\\n    \"\"\"\\n\\n\\n@hookspec\\ndef tox_runtest_post(venv):\\n    \"\"\"Perform arbitrary action after running tests for this venv.\\n\\n    This could be used to have per-venv test reporting of pass/fail status.\\n    \"\"\"\\n\\n\\n@hookspec(firstresult=True)\\ndef tox_runenvreport(venv, action):\\n    \"\"\"Get the installed packages and versions in this venv.\\n\\n    This could be used for alternative (ie non-pip) package managers, this\\n    plugin should return a ``list`` of type ``str``\\n    \"\"\"\\n\\n\\n@hookspec\\ndef tox_cleanup(session):\\n    \"\"\"Called just before the session is destroyed, allowing any final cleanup operation\"\"\"\\n'"}, {"func_args": {"source": "'\"\"\"Hook specifications for tox - see https://pluggy.readthedocs.io/\"\"\"\\nimport pluggy\\n\\nhookspec = pluggy.HookspecMarker(\"tox\")\\n\\n\\n@hookspec\\ndef tox_addoption(parser):\\n    \"\"\"add command line options to the argparse-style parser object.\"\"\"\\n\\n\\n@hookspec\\ndef tox_configure(config):\\n    \"\"\"Called after command line options are parsed and ini-file has been read.\\n\\n    Please be aware that the config object layout may change between major tox versions.\\n    \"\"\"\\n\\n\\n@hookspec(firstresult=True)\\ndef tox_package(session, venv):\\n    \"\"\"Return the package to be installed for the given venv.\\n\\n    Called once for every environment.\"\"\"\\n\\n\\n@hookspec(firstresult=True)\\ndef tox_get_python_executable(envconfig):\\n    \"\"\"Return a python executable for the given python base name.\\n\\n    The first plugin/hook which returns an executable path will determine it.\\n\\n    ``envconfig`` is the testenv configuration which contains\\n    per-testenv configuration, notably the ``.envname`` and ``.basepython``\\n    setting.\\n    \"\"\"\\n\\n\\n@hookspec(firstresult=True)\\ndef tox_testenv_create(venv, action):\\n    \"\"\"Perform creation action for this venv.\\n\\n    Some example usage:\\n\\n    - To *add* behavior but still use tox\\'s implementation to set up a\\n      virtualenv, implement this hook but do not return a value (or explicitly\\n      return ``None``).\\n    - To *override* tox\\'s virtualenv creation, implement this hook and return\\n      a non-``None`` value.\\n\\n    .. note:: This api is experimental due to the unstable api of\\n        :class:`tox.venv.VirtualEnv`.\\n\\n    .. note:: This hook uses ``firstresult=True`` (see `pluggy first result only`_) -- hooks\\n        implementing this will be run until one returns non-``None``.\\n\\n    .. _`pluggy first result only`: https://pluggy.readthedocs.io/en/latest/#first-result-only\\n    \"\"\"\\n\\n\\n@hookspec(firstresult=True)\\ndef tox_testenv_install_deps(venv, action):\\n    \"\"\"Perform install dependencies action for this venv.\\n\\n    Some example usage:\\n\\n    - To *add* behavior but still use tox\\'s implementation to install\\n      dependencies, implement this hook but do not return a value (or\\n      explicitly return ``None``).  One use-case may be to install (or ensure)\\n      non-python dependencies such as debian packages.\\n    - To *override* tox\\'s installation of dependencies, implement this hook\\n      and return a non-``None`` value.  One use-case may be to install via\\n      a different installation tool such as `pip-accel`_ or `pip-faster`_.\\n\\n    .. note:: This api is experimental due to the unstable api of\\n        :class:`tox.venv.VirtualEnv`.\\n\\n    .. note:: This hook uses ``firstresult=True`` (see `pluggy first result only`_) -- hooks\\n        implementing this will be run until one returns non-``None``.\\n\\n    .. _pip-accel: https://github.com/paylogic/pip-accel\\n    .. _pip-faster: https://github.com/Yelp/venv-update\\n    \"\"\"\\n\\n\\n@hookspec\\ndef tox_runtest_pre(venv):\\n    \"\"\"Perform arbitrary action before running tests for this venv.\\n\\n    This could be used to indicate that tests for a given venv have started, for instance.\\n    \"\"\"\\n\\n\\n@hookspec(firstresult=True)\\ndef tox_runtest(venv, redirect):\\n    \"\"\"Run the tests for this venv.\\n\\n    .. note:: This hook uses ``firstresult=True`` (see `pluggy first result only`_) -- hooks\\n        implementing this will be run until one returns non-``None``.\\n    \"\"\"\\n\\n\\n@hookspec\\ndef tox_runtest_post(venv):\\n    \"\"\"Perform arbitrary action after running tests for this venv.\\n\\n    This could be used to have per-venv test reporting of pass/fail status.\\n    \"\"\"\\n\\n\\n@hookspec(firstresult=True)\\ndef tox_runenvreport(venv, action):\\n    \"\"\"Get the installed packages and versions in this venv.\\n\\n    This could be used for alternative (ie non-pip) package managers, this\\n    plugin should return a ``list`` of type ``str``\\n    \"\"\"\\n\\n\\n@hookspec\\ndef tox_cleanup(session):\\n    \"\"\"Called just before the session is destroyed, allowing any final cleanup operation\"\"\"\\n'"}, "return_value": "'\"\"\"Hook specifications for tox - see https://pluggy.readthedocs.io/\"\"\"\\nimport pluggy\\n\\nhookspec = pluggy.HookspecMarker(\"tox\")\\n\\n\\n@hookspec\\ndef tox_addoption(parser):\\n    \"\"\"add command line options to the argparse-style parser object.\"\"\"\\n\\n\\n@hookspec\\ndef tox_configure(config):\\n    \"\"\"Called after command line options are parsed and ini-file has been read.\\n\\n    Please be aware that the config object layout may change between major tox versions.\\n    \"\"\"\\n\\n\\n@hookspec(firstresult=True)\\ndef tox_package(session, venv):\\n    \"\"\"Return the package to be installed for the given venv.\\n\\n    Called once for every environment.\"\"\"\\n\\n\\n@hookspec(firstresult=True)\\ndef tox_get_python_executable(envconfig):\\n    \"\"\"Return a python executable for the given python base name.\\n\\n    The first plugin/hook which returns an executable path will determine it.\\n\\n    ``envconfig`` is the testenv configuration which contains\\n    per-testenv configuration, notably the ``.envname`` and ``.basepython``\\n    setting.\\n    \"\"\"\\n\\n\\n@hookspec(firstresult=True)\\ndef tox_testenv_create(venv, action):\\n    \"\"\"Perform creation action for this venv.\\n\\n    Some example usage:\\n\\n    - To *add* behavior but still use tox\\'s implementation to set up a\\n      virtualenv, implement this hook but do not return a value (or explicitly\\n      return ``None``).\\n    - To *override* tox\\'s virtualenv creation, implement this hook and return\\n      a non-``None`` value.\\n\\n    .. note:: This api is experimental due to the unstable api of\\n        :class:`tox.venv.VirtualEnv`.\\n\\n    .. note:: This hook uses ``firstresult=True`` (see `pluggy first result only`_) -- hooks\\n        implementing this will be run until one returns non-``None``.\\n\\n    .. _`pluggy first result only`: https://pluggy.readthedocs.io/en/latest/#first-result-only\\n    \"\"\"\\n\\n\\n@hookspec(firstresult=True)\\ndef tox_testenv_install_deps(venv, action):\\n    \"\"\"Perform install dependencies action for this venv.\\n\\n    Some example usage:\\n\\n    - To *add* behavior but still use tox\\'s implementation to install\\n      dependencies, implement this hook but do not return a value (or\\n      explicitly return ``None``).  One use-case may be to install (or ensure)\\n      non-python dependencies such as debian packages.\\n    - To *override* tox\\'s installation of dependencies, implement this hook\\n      and return a non-``None`` value.  One use-case may be to install via\\n      a different installation tool such as `pip-accel`_ or `pip-faster`_.\\n\\n    .. note:: This api is experimental due to the unstable api of\\n        :class:`tox.venv.VirtualEnv`.\\n\\n    .. note:: This hook uses ``firstresult=True`` (see `pluggy first result only`_) -- hooks\\n        implementing this will be run until one returns non-``None``.\\n\\n    .. _pip-accel: https://github.com/paylogic/pip-accel\\n    .. _pip-faster: https://github.com/Yelp/venv-update\\n    \"\"\"\\n\\n\\n@hookspec\\ndef tox_runtest_pre(venv):\\n    \"\"\"Perform arbitrary action before running tests for this venv.\\n\\n    This could be used to indicate that tests for a given venv have started, for instance.\\n    \"\"\"\\n\\n\\n@hookspec(firstresult=True)\\ndef tox_runtest(venv, redirect):\\n    \"\"\"Run the tests for this venv.\\n\\n    .. note:: This hook uses ``firstresult=True`` (see `pluggy first result only`_) -- hooks\\n        implementing this will be run until one returns non-``None``.\\n    \"\"\"\\n\\n\\n@hookspec\\ndef tox_runtest_post(venv):\\n    \"\"\"Perform arbitrary action after running tests for this venv.\\n\\n    This could be used to have per-venv test reporting of pass/fail status.\\n    \"\"\"\\n\\n\\n@hookspec(firstresult=True)\\ndef tox_runenvreport(venv, action):\\n    \"\"\"Get the installed packages and versions in this venv.\\n\\n    This could be used for alternative (ie non-pip) package managers, this\\n    plugin should return a ``list`` of type ``str``\\n    \"\"\"\\n\\n\\n@hookspec\\ndef tox_cleanup(session):\\n    \"\"\"Called just before the session is destroyed, allowing any final cleanup operation\"\"\"\\n'"}, {"func_args": {"source": "'from __future__ import unicode_literals\\n\\nimport json\\nimport sys\\n\\nimport tox\\nfrom tox import reporter\\nfrom tox.constants import SITE_PACKAGE_QUERY_SCRIPT\\nfrom tox.interpreters.via_path import get_python_info\\n\\n\\nclass Interpreters:\\n    def __init__(self, hook):\\n        self.name2executable = {}\\n        self.executable2info = {}\\n        self.hook = hook\\n\\n    def get_executable(self, envconfig):\\n        \"\"\"return path object to the executable for the given\\n        name (e.g. python2.7, python3.6, python etc.)\\n        if name is already an existing path, return name.\\n        If an interpreter cannot be found, return None.\\n        \"\"\"\\n        try:\\n            return self.name2executable[envconfig.envname]\\n        except KeyError:\\n            exe = self.hook.tox_get_python_executable(envconfig=envconfig)\\n            reporter.verbosity2(\"{} uses {}\".format(envconfig.envname, exe))\\n            self.name2executable[envconfig.envname] = exe\\n            return exe\\n\\n    def get_info(self, envconfig):\\n        executable = self.get_executable(envconfig)\\n        name = envconfig.basepython\\n        if not executable:\\n            return NoInterpreterInfo(name=name)\\n        try:\\n            return self.executable2info[executable]\\n        except KeyError:\\n            info = run_and_get_interpreter_info(name, executable)\\n            self.executable2info[executable] = info\\n            return info\\n\\n    def get_sitepackagesdir(self, info, envdir):\\n        if not info.executable:\\n            return \"\"\\n        envdir = str(envdir)\\n        try:\\n            res = exec_on_interpreter(str(info.executable), SITE_PACKAGE_QUERY_SCRIPT, str(envdir))\\n        except ExecFailed as e:\\n            reporter.verbosity1(\"execution failed: {} -- {}\".format(e.out, e.err))\\n            return \"\"\\n        else:\\n            return res[\"dir\"]\\n\\n\\ndef run_and_get_interpreter_info(name, executable):\\n    assert executable\\n    try:\\n        result = get_python_info(str(executable))\\n        result[\"version_info\"] = tuple(result[\"version_info\"])  # fix json dump transformation\\n        if result[\"extra_version_info\"] is not None:\\n            result[\"extra_version_info\"] = tuple(\\n                result[\"extra_version_info\"],\\n            )  # fix json dump transformation\\n        del result[\"version\"]\\n        result[\"executable\"] = str(executable)\\n    except ExecFailed as e:\\n        return NoInterpreterInfo(name, executable=e.executable, out=e.out, err=e.err)\\n    else:\\n        return InterpreterInfo(**result)\\n\\n\\ndef exec_on_interpreter(*args):\\n    from subprocess import PIPE, Popen\\n\\n    popen = Popen(args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\\n    out, err = popen.communicate()\\n    if popen.returncode:\\n        raise ExecFailed(args[0], args[1:], out, err)\\n    if err:\\n        sys.stderr.write(err)\\n    try:\\n        result = json.loads(out)\\n    except Exception:\\n        raise ExecFailed(args[0], args[1:], out, \"could not decode {!r}\".format(out))\\n    return result\\n\\n\\nclass ExecFailed(Exception):\\n    def __init__(self, executable, source, out, err):\\n        self.executable = executable\\n        self.source = source\\n        self.out = out\\n        self.err = err\\n\\n\\nclass InterpreterInfo:\\n    def __init__(\\n        self,\\n        implementation,\\n        executable,\\n        version_info,\\n        sysplatform,\\n        is_64,\\n        os_sep,\\n        extra_version_info,\\n    ):\\n        self.implementation = implementation\\n        self.executable = executable\\n\\n        self.version_info = version_info\\n        self.sysplatform = sysplatform\\n        self.is_64 = is_64\\n        self.os_sep = os_sep\\n        self.extra_version_info = extra_version_info\\n\\n    def __str__(self):\\n        return \"<executable at {}, version_info {}>\".format(self.executable, self.version_info)\\n\\n\\nclass NoInterpreterInfo:\\n    def __init__(self, name, executable=None, out=None, err=\"not found\"):\\n        self.name = name\\n        self.executable = executable\\n        self.version_info = None\\n        self.out = out\\n        self.err = err\\n\\n    def __str__(self):\\n        if self.executable:\\n            return \"<executable at {}, not runnable>\".format(self.executable)\\n        else:\\n            return \"<executable not found for: {}>\".format(self.name)\\n\\n\\nif tox.INFO.IS_WIN:\\n    from .windows import tox_get_python_executable\\nelse:\\n    from .unix import tox_get_python_executable\\nassert tox_get_python_executable\\n'"}, "return_value": "'from __future__ import unicode_literals\\n\\nimport json\\nimport sys\\n\\nimport tox\\nfrom tox import reporter\\nfrom tox.constants import SITE_PACKAGE_QUERY_SCRIPT\\nfrom tox.interpreters.via_path import get_python_info\\n\\n\\nclass Interpreters:\\n    def __init__(self, hook):\\n        self.name2executable = {}\\n        self.executable2info = {}\\n        self.hook = hook\\n\\n    def get_executable(self, envconfig):\\n        \"\"\"return path object to the executable for the given\\n        name (e.g. python2.7, python3.6, python etc.)\\n        if name is already an existing path, return name.\\n        If an interpreter cannot be found, return None.\\n        \"\"\"\\n        try:\\n            return self.name2executable[envconfig.envname]\\n        except KeyError:\\n            exe = self.hook.tox_get_python_executable(envconfig=envconfig)\\n            reporter.verbosity2(\"{} uses {}\".format(envconfig.envname, exe))\\n            self.name2executable[envconfig.envname] = exe\\n            return exe\\n\\n    def get_info(self, envconfig):\\n        executable = self.get_executable(envconfig)\\n        name = envconfig.basepython\\n        if not executable:\\n            return NoInterpreterInfo(name=name)\\n        try:\\n            return self.executable2info[executable]\\n        except KeyError:\\n            info = run_and_get_interpreter_info(name, executable)\\n            self.executable2info[executable] = info\\n            return info\\n\\n    def get_sitepackagesdir(self, info, envdir):\\n        if not info.executable:\\n            return \"\"\\n        envdir = str(envdir)\\n        try:\\n            res = exec_on_interpreter(str(info.executable), SITE_PACKAGE_QUERY_SCRIPT, str(envdir))\\n        except ExecFailed as e:\\n            reporter.verbosity1(\"execution failed: {} -- {}\".format(e.out, e.err))\\n            return \"\"\\n        else:\\n            return res[\"dir\"]\\n\\n\\ndef run_and_get_interpreter_info(name, executable):\\n    assert executable\\n    try:\\n        result = get_python_info(str(executable))\\n        result[\"version_info\"] = tuple(result[\"version_info\"])  # fix json dump transformation\\n        if result[\"extra_version_info\"] is not None:\\n            result[\"extra_version_info\"] = tuple(\\n                result[\"extra_version_info\"],\\n            )  # fix json dump transformation\\n        del result[\"version\"]\\n        result[\"executable\"] = str(executable)\\n    except ExecFailed as e:\\n        return NoInterpreterInfo(name, executable=e.executable, out=e.out, err=e.err)\\n    else:\\n        return InterpreterInfo(**result)\\n\\n\\ndef exec_on_interpreter(*args):\\n    from subprocess import PIPE, Popen\\n\\n    popen = Popen(args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\\n    out, err = popen.communicate()\\n    if popen.returncode:\\n        raise ExecFailed(args[0], args[1:], out, err)\\n    if err:\\n        sys.stderr.write(err)\\n    try:\\n        result = json.loads(out)\\n    except Exception:\\n        raise ExecFailed(args[0], args[1:], out, \"could not decode {!r}\".format(out))\\n    return result\\n\\n\\nclass ExecFailed(Exception):\\n    def __init__(self, executable, source, out, err):\\n        self.executable = executable\\n        self.source = source\\n        self.out = out\\n        self.err = err\\n\\n\\nclass InterpreterInfo:\\n    def __init__(\\n        self,\\n        implementation,\\n        executable,\\n        version_info,\\n        sysplatform,\\n        is_64,\\n        os_sep,\\n        extra_version_info,\\n    ):\\n        self.implementation = implementation\\n        self.executable = executable\\n\\n        self.version_info = version_info\\n        self.sysplatform = sysplatform\\n        self.is_64 = is_64\\n        self.os_sep = os_sep\\n        self.extra_version_info = extra_version_info\\n\\n    def __str__(self):\\n        return \"<executable at {}, version_info {}>\".format(self.executable, self.version_info)\\n\\n\\nclass NoInterpreterInfo:\\n    def __init__(self, name, executable=None, out=None, err=\"not found\"):\\n        self.name = name\\n        self.executable = executable\\n        self.version_info = None\\n        self.out = out\\n        self.err = err\\n\\n    def __str__(self):\\n        if self.executable:\\n            return \"<executable at {}, not runnable>\".format(self.executable)\\n        else:\\n            return \"<executable not found for: {}>\".format(self.name)\\n\\n\\nif tox.INFO.IS_WIN:\\n    from .windows import tox_get_python_executable\\nelse:\\n    from .unix import tox_get_python_executable\\nassert tox_get_python_executable\\n'"}, {"func_args": {"source": "'from __future__ import unicode_literals\\n\\nimport json\\nimport sys\\n\\nimport tox\\nfrom tox import reporter\\nfrom tox.constants import SITE_PACKAGE_QUERY_SCRIPT\\nfrom tox.interpreters.via_path import get_python_info\\n\\n\\nclass Interpreters:\\n    def __init__(self, hook):\\n        self.name2executable = {}\\n        self.executable2info = {}\\n        self.hook = hook\\n\\n    def get_executable(self, envconfig):\\n        \"\"\"return path object to the executable for the given\\n        name (e.g. python2.7, python3.6, python etc.)\\n        if name is already an existing path, return name.\\n        If an interpreter cannot be found, return None.\\n        \"\"\"\\n        try:\\n            return self.name2executable[envconfig.envname]\\n        except KeyError:\\n            exe = self.hook.tox_get_python_executable(envconfig=envconfig)\\n            reporter.verbosity2(\"{} uses {}\".format(envconfig.envname, exe))\\n            self.name2executable[envconfig.envname] = exe\\n            return exe\\n\\n    def get_info(self, envconfig):\\n        executable = self.get_executable(envconfig)\\n        name = envconfig.basepython\\n        if not executable:\\n            return NoInterpreterInfo(name=name)\\n        try:\\n            return self.executable2info[executable]\\n        except KeyError:\\n            info = run_and_get_interpreter_info(name, executable)\\n            self.executable2info[executable] = info\\n            return info\\n\\n    def get_sitepackagesdir(self, info, envdir):\\n        if not info.executable:\\n            return \"\"\\n        envdir = str(envdir)\\n        try:\\n            res = exec_on_interpreter(str(info.executable), SITE_PACKAGE_QUERY_SCRIPT, str(envdir))\\n        except ExecFailed as e:\\n            reporter.verbosity1(\"execution failed: {} -- {}\".format(e.out, e.err))\\n            return \"\"\\n        else:\\n            return res[\"dir\"]\\n\\n\\ndef run_and_get_interpreter_info(name, executable):\\n    assert executable\\n    try:\\n        result = get_python_info(str(executable))\\n        result[\"version_info\"] = tuple(result[\"version_info\"])  # fix json dump transformation\\n        if result[\"extra_version_info\"] is not None:\\n            result[\"extra_version_info\"] = tuple(\\n                result[\"extra_version_info\"],\\n            )  # fix json dump transformation\\n        del result[\"version\"]\\n        result[\"executable\"] = str(executable)\\n    except ExecFailed as e:\\n        return NoInterpreterInfo(name, executable=e.executable, out=e.out, err=e.err)\\n    else:\\n        return InterpreterInfo(**result)\\n\\n\\ndef exec_on_interpreter(*args):\\n    from subprocess import PIPE, Popen\\n\\n    popen = Popen(args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\\n    out, err = popen.communicate()\\n    if popen.returncode:\\n        raise ExecFailed(args[0], args[1:], out, err)\\n    if err:\\n        sys.stderr.write(err)\\n    try:\\n        result = json.loads(out)\\n    except Exception:\\n        raise ExecFailed(args[0], args[1:], out, \"could not decode {!r}\".format(out))\\n    return result\\n\\n\\nclass ExecFailed(Exception):\\n    def __init__(self, executable, source, out, err):\\n        self.executable = executable\\n        self.source = source\\n        self.out = out\\n        self.err = err\\n\\n\\nclass InterpreterInfo:\\n    def __init__(\\n        self,\\n        implementation,\\n        executable,\\n        version_info,\\n        sysplatform,\\n        is_64,\\n        os_sep,\\n        extra_version_info,\\n    ):\\n        self.implementation = implementation\\n        self.executable = executable\\n\\n        self.version_info = version_info\\n        self.sysplatform = sysplatform\\n        self.is_64 = is_64\\n        self.os_sep = os_sep\\n        self.extra_version_info = extra_version_info\\n\\n    def __str__(self):\\n        return \"<executable at {}, version_info {}>\".format(self.executable, self.version_info)\\n\\n\\nclass NoInterpreterInfo:\\n    def __init__(self, name, executable=None, out=None, err=\"not found\"):\\n        self.name = name\\n        self.executable = executable\\n        self.version_info = None\\n        self.out = out\\n        self.err = err\\n\\n    def __str__(self):\\n        if self.executable:\\n            return \"<executable at {}, not runnable>\".format(self.executable)\\n        else:\\n            return \"<executable not found for: {}>\".format(self.name)\\n\\n\\nif tox.INFO.IS_WIN:\\n    from .windows import tox_get_python_executable\\nelse:\\n    from .unix import tox_get_python_executable\\nassert tox_get_python_executable\\n'"}, "return_value": "'from __future__ import unicode_literals\\n\\nimport json\\nimport sys\\n\\nimport tox\\nfrom tox import reporter\\nfrom tox.constants import SITE_PACKAGE_QUERY_SCRIPT\\nfrom tox.interpreters.via_path import get_python_info\\n\\n\\nclass Interpreters:\\n    def __init__(self, hook):\\n        self.name2executable = {}\\n        self.executable2info = {}\\n        self.hook = hook\\n\\n    def get_executable(self, envconfig):\\n        \"\"\"return path object to the executable for the given\\n        name (e.g. python2.7, python3.6, python etc.)\\n        if name is already an existing path, return name.\\n        If an interpreter cannot be found, return None.\\n        \"\"\"\\n        try:\\n            return self.name2executable[envconfig.envname]\\n        except KeyError:\\n            exe = self.hook.tox_get_python_executable(envconfig=envconfig)\\n            reporter.verbosity2(\"{} uses {}\".format(envconfig.envname, exe))\\n            self.name2executable[envconfig.envname] = exe\\n            return exe\\n\\n    def get_info(self, envconfig):\\n        executable = self.get_executable(envconfig)\\n        name = envconfig.basepython\\n        if not executable:\\n            return NoInterpreterInfo(name=name)\\n        try:\\n            return self.executable2info[executable]\\n        except KeyError:\\n            info = run_and_get_interpreter_info(name, executable)\\n            self.executable2info[executable] = info\\n            return info\\n\\n    def get_sitepackagesdir(self, info, envdir):\\n        if not info.executable:\\n            return \"\"\\n        envdir = str(envdir)\\n        try:\\n            res = exec_on_interpreter(str(info.executable), SITE_PACKAGE_QUERY_SCRIPT, str(envdir))\\n        except ExecFailed as e:\\n            reporter.verbosity1(\"execution failed: {} -- {}\".format(e.out, e.err))\\n            return \"\"\\n        else:\\n            return res[\"dir\"]\\n\\n\\ndef run_and_get_interpreter_info(name, executable):\\n    assert executable\\n    try:\\n        result = get_python_info(str(executable))\\n        result[\"version_info\"] = tuple(result[\"version_info\"])  # fix json dump transformation\\n        if result[\"extra_version_info\"] is not None:\\n            result[\"extra_version_info\"] = tuple(\\n                result[\"extra_version_info\"],\\n            )  # fix json dump transformation\\n        del result[\"version\"]\\n        result[\"executable\"] = str(executable)\\n    except ExecFailed as e:\\n        return NoInterpreterInfo(name, executable=e.executable, out=e.out, err=e.err)\\n    else:\\n        return InterpreterInfo(**result)\\n\\n\\ndef exec_on_interpreter(*args):\\n    from subprocess import PIPE, Popen\\n\\n    popen = Popen(args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\\n    out, err = popen.communicate()\\n    if popen.returncode:\\n        raise ExecFailed(args[0], args[1:], out, err)\\n    if err:\\n        sys.stderr.write(err)\\n    try:\\n        result = json.loads(out)\\n    except Exception:\\n        raise ExecFailed(args[0], args[1:], out, \"could not decode {!r}\".format(out))\\n    return result\\n\\n\\nclass ExecFailed(Exception):\\n    def __init__(self, executable, source, out, err):\\n        self.executable = executable\\n        self.source = source\\n        self.out = out\\n        self.err = err\\n\\n\\nclass InterpreterInfo:\\n    def __init__(\\n        self,\\n        implementation,\\n        executable,\\n        version_info,\\n        sysplatform,\\n        is_64,\\n        os_sep,\\n        extra_version_info,\\n    ):\\n        self.implementation = implementation\\n        self.executable = executable\\n\\n        self.version_info = version_info\\n        self.sysplatform = sysplatform\\n        self.is_64 = is_64\\n        self.os_sep = os_sep\\n        self.extra_version_info = extra_version_info\\n\\n    def __str__(self):\\n        return \"<executable at {}, version_info {}>\".format(self.executable, self.version_info)\\n\\n\\nclass NoInterpreterInfo:\\n    def __init__(self, name, executable=None, out=None, err=\"not found\"):\\n        self.name = name\\n        self.executable = executable\\n        self.version_info = None\\n        self.out = out\\n        self.err = err\\n\\n    def __str__(self):\\n        if self.executable:\\n            return \"<executable at {}, not runnable>\".format(self.executable)\\n        else:\\n            return \"<executable not found for: {}>\".format(self.name)\\n\\n\\nif tox.INFO.IS_WIN:\\n    from .windows import tox_get_python_executable\\nelse:\\n    from .unix import tox_get_python_executable\\nassert tox_get_python_executable\\n'"}, {"func_args": {"source": "'import os\\n\\nfrom tox.interpreters.py_spec import CURRENT, PythonSpec\\nfrom tox.interpreters.via_path import exe_spec\\n\\n\\ndef base_discover(envconfig):\\n    base_python = envconfig.basepython\\n    spec = PythonSpec.from_name(base_python)\\n\\n    # 1. check passed in discover elements\\n    discovers = envconfig.config.option.discover\\n    if not discovers:\\n        discovers = os.environ.get(str(\"TOX_DISCOVER\"), \"\").split(os.pathsep)\\n    for discover in discovers:\\n        if os.path.exists(discover):\\n            cur_spec = exe_spec(discover, envconfig.basepython)\\n            if cur_spec is not None and cur_spec.satisfies(spec):\\n                return spec, cur_spec.path\\n\\n    # 2. check current\\n    if spec.name is not None and CURRENT.satisfies(spec):\\n        return spec, CURRENT.path\\n\\n    return spec, None\\n'"}, "return_value": "'import os\\n\\nfrom tox.interpreters.py_spec import CURRENT, PythonSpec\\nfrom tox.interpreters.via_path import exe_spec\\n\\n\\ndef base_discover(envconfig):\\n    base_python = envconfig.basepython\\n    spec = PythonSpec.from_name(base_python)\\n\\n    # 1. check passed in discover elements\\n    discovers = envconfig.config.option.discover\\n    if not discovers:\\n        discovers = os.environ.get(str(\"TOX_DISCOVER\"), \"\").split(os.pathsep)\\n    for discover in discovers:\\n        if os.path.exists(discover):\\n            cur_spec = exe_spec(discover, envconfig.basepython)\\n            if cur_spec is not None and cur_spec.satisfies(spec):\\n                return spec, cur_spec.path\\n\\n    # 2. check current\\n    if spec.name is not None and CURRENT.satisfies(spec):\\n        return spec, CURRENT.path\\n\\n    return spec, None\\n'"}, {"func_args": {"source": "'import os\\n\\nfrom tox.interpreters.py_spec import CURRENT, PythonSpec\\nfrom tox.interpreters.via_path import exe_spec\\n\\n\\ndef base_discover(envconfig):\\n    base_python = envconfig.basepython\\n    spec = PythonSpec.from_name(base_python)\\n\\n    # 1. check passed in discover elements\\n    discovers = envconfig.config.option.discover\\n    if not discovers:\\n        discovers = os.environ.get(str(\"TOX_DISCOVER\"), \"\").split(os.pathsep)\\n    for discover in discovers:\\n        if os.path.exists(discover):\\n            cur_spec = exe_spec(discover, envconfig.basepython)\\n            if cur_spec is not None and cur_spec.satisfies(spec):\\n                return spec, cur_spec.path\\n\\n    # 2. check current\\n    if spec.name is not None and CURRENT.satisfies(spec):\\n        return spec, CURRENT.path\\n\\n    return spec, None\\n'"}, "return_value": "'import os\\n\\nfrom tox.interpreters.py_spec import CURRENT, PythonSpec\\nfrom tox.interpreters.via_path import exe_spec\\n\\n\\ndef base_discover(envconfig):\\n    base_python = envconfig.basepython\\n    spec = PythonSpec.from_name(base_python)\\n\\n    # 1. check passed in discover elements\\n    discovers = envconfig.config.option.discover\\n    if not discovers:\\n        discovers = os.environ.get(str(\"TOX_DISCOVER\"), \"\").split(os.pathsep)\\n    for discover in discovers:\\n        if os.path.exists(discover):\\n            cur_spec = exe_spec(discover, envconfig.basepython)\\n            if cur_spec is not None and cur_spec.satisfies(spec):\\n                return spec, cur_spec.path\\n\\n    # 2. check current\\n    if spec.name is not None and CURRENT.satisfies(spec):\\n        return spec, CURRENT.path\\n\\n    return spec, None\\n'"}, {"func_args": {"source": "'from __future__ import unicode_literals\\n\\nimport os\\nimport re\\nimport sys\\n\\nimport six\\n\\nimport tox\\n\\n\\nclass PythonSpec(object):\\n    def __init__(self, name, major, minor, architecture, path, args=None):\\n        self.name = name\\n        self.major = major\\n        self.minor = minor\\n        self.architecture = architecture\\n        self.path = path\\n        self.args = args\\n\\n    def __repr__(self):\\n        return (\\n            \"{0.__class__.__name__}(name={0.name!r}, major={0.major!r}, minor={0.minor!r}, \"\\n            \"architecture={0.architecture!r}, path={0.path!r}, args={0.args!r})\"\\n        ).format(self)\\n\\n    def __str__(self):\\n        msg = repr(self)\\n        return msg.encode(\"utf-8\") if six.PY2 else msg\\n\\n    def satisfies(self, req):\\n        if req.is_abs and self.is_abs and self.path != req.path:\\n            return False\\n        if req.name is not None and req.name != self.name:\\n            return False\\n        if req.architecture is not None and req.architecture != self.architecture:\\n            return False\\n        if req.major is not None and req.major != self.major:\\n            return False\\n        if req.minor is not None and req.minor != self.minor:\\n            return False\\n        if req.major is None and req.minor is not None:\\n            return False\\n        return True\\n\\n    @property\\n    def is_abs(self):\\n        return self.path is not None and os.path.isabs(self.path)\\n\\n    @classmethod\\n    def from_name(cls, base_python):\\n        name, major, minor, architecture, path = None, None, None, None, None\\n        if os.path.isabs(base_python):\\n            path = base_python\\n        else:\\n            match = re.match(r\"(python|pypy|jython)(\\\\d)?(?:\\\\.(\\\\d+))?(?:-(32|64))?$\", base_python)\\n            if match:\\n                groups = match.groups()\\n                name = groups[0]\\n                major = int(groups[1]) if len(groups) >= 2 and groups[1] is not None else None\\n                minor = int(groups[2]) if len(groups) >= 3 and groups[2] is not None else None\\n                architecture = (\\n                    int(groups[3]) if len(groups) >= 4 and groups[3] is not None else None\\n                )\\n            else:\\n                path = base_python\\n        return cls(name, major, minor, architecture, path)\\n\\n\\nCURRENT = PythonSpec(\\n    \"pypy\" if tox.constants.INFO.IS_PYPY else \"python\",\\n    sys.version_info[0],\\n    sys.version_info[1],\\n    64 if sys.maxsize > 2 ** 32 else 32,\\n    sys.executable,\\n)\\n'"}, "return_value": "'from __future__ import unicode_literals\\n\\nimport os\\nimport re\\nimport sys\\n\\nimport six\\n\\nimport tox\\n\\n\\nclass PythonSpec(object):\\n    def __init__(self, name, major, minor, architecture, path, args=None):\\n        self.name = name\\n        self.major = major\\n        self.minor = minor\\n        self.architecture = architecture\\n        self.path = path\\n        self.args = args\\n\\n    def __repr__(self):\\n        return (\\n            \"{0.__class__.__name__}(name={0.name!r}, major={0.major!r}, minor={0.minor!r}, \"\\n            \"architecture={0.architecture!r}, path={0.path!r}, args={0.args!r})\"\\n        ).format(self)\\n\\n    def __str__(self):\\n        msg = repr(self)\\n        return msg.encode(\"utf-8\") if six.PY2 else msg\\n\\n    def satisfies(self, req):\\n        if req.is_abs and self.is_abs and self.path != req.path:\\n            return False\\n        if req.name is not None and req.name != self.name:\\n            return False\\n        if req.architecture is not None and req.architecture != self.architecture:\\n            return False\\n        if req.major is not None and req.major != self.major:\\n            return False\\n        if req.minor is not None and req.minor != self.minor:\\n            return False\\n        if req.major is None and req.minor is not None:\\n            return False\\n        return True\\n\\n    @property\\n    def is_abs(self):\\n        return self.path is not None and os.path.isabs(self.path)\\n\\n    @classmethod\\n    def from_name(cls, base_python):\\n        name, major, minor, architecture, path = None, None, None, None, None\\n        if os.path.isabs(base_python):\\n            path = base_python\\n        else:\\n            match = re.match(r\"(python|pypy|jython)(\\\\d)?(?:\\\\.(\\\\d+))?(?:-(32|64))?$\", base_python)\\n            if match:\\n                groups = match.groups()\\n                name = groups[0]\\n                major = int(groups[1]) if len(groups) >= 2 and groups[1] is not None else None\\n                minor = int(groups[2]) if len(groups) >= 3 and groups[2] is not None else None\\n                architecture = (\\n                    int(groups[3]) if len(groups) >= 4 and groups[3] is not None else None\\n                )\\n            else:\\n                path = base_python\\n        return cls(name, major, minor, architecture, path)\\n\\n\\nCURRENT = PythonSpec(\\n    \"pypy\" if tox.constants.INFO.IS_PYPY else \"python\",\\n    sys.version_info[0],\\n    sys.version_info[1],\\n    64 if sys.maxsize > 2 ** 32 else 32,\\n    sys.executable,\\n)\\n'"}, {"func_args": {"source": "'from __future__ import unicode_literals\\n\\nimport os\\nimport re\\nimport sys\\n\\nimport six\\n\\nimport tox\\n\\n\\nclass PythonSpec(object):\\n    def __init__(self, name, major, minor, architecture, path, args=None):\\n        self.name = name\\n        self.major = major\\n        self.minor = minor\\n        self.architecture = architecture\\n        self.path = path\\n        self.args = args\\n\\n    def __repr__(self):\\n        return (\\n            \"{0.__class__.__name__}(name={0.name!r}, major={0.major!r}, minor={0.minor!r}, \"\\n            \"architecture={0.architecture!r}, path={0.path!r}, args={0.args!r})\"\\n        ).format(self)\\n\\n    def __str__(self):\\n        msg = repr(self)\\n        return msg.encode(\"utf-8\") if six.PY2 else msg\\n\\n    def satisfies(self, req):\\n        if req.is_abs and self.is_abs and self.path != req.path:\\n            return False\\n        if req.name is not None and req.name != self.name:\\n            return False\\n        if req.architecture is not None and req.architecture != self.architecture:\\n            return False\\n        if req.major is not None and req.major != self.major:\\n            return False\\n        if req.minor is not None and req.minor != self.minor:\\n            return False\\n        if req.major is None and req.minor is not None:\\n            return False\\n        return True\\n\\n    @property\\n    def is_abs(self):\\n        return self.path is not None and os.path.isabs(self.path)\\n\\n    @classmethod\\n    def from_name(cls, base_python):\\n        name, major, minor, architecture, path = None, None, None, None, None\\n        if os.path.isabs(base_python):\\n            path = base_python\\n        else:\\n            match = re.match(r\"(python|pypy|jython)(\\\\d)?(?:\\\\.(\\\\d+))?(?:-(32|64))?$\", base_python)\\n            if match:\\n                groups = match.groups()\\n                name = groups[0]\\n                major = int(groups[1]) if len(groups) >= 2 and groups[1] is not None else None\\n                minor = int(groups[2]) if len(groups) >= 3 and groups[2] is not None else None\\n                architecture = (\\n                    int(groups[3]) if len(groups) >= 4 and groups[3] is not None else None\\n                )\\n            else:\\n                path = base_python\\n        return cls(name, major, minor, architecture, path)\\n\\n\\nCURRENT = PythonSpec(\\n    \"pypy\" if tox.constants.INFO.IS_PYPY else \"python\",\\n    sys.version_info[0],\\n    sys.version_info[1],\\n    64 if sys.maxsize > 2 ** 32 else 32,\\n    sys.executable,\\n)\\n'"}, "return_value": "'from __future__ import unicode_literals\\n\\nimport os\\nimport re\\nimport sys\\n\\nimport six\\n\\nimport tox\\n\\n\\nclass PythonSpec(object):\\n    def __init__(self, name, major, minor, architecture, path, args=None):\\n        self.name = name\\n        self.major = major\\n        self.minor = minor\\n        self.architecture = architecture\\n        self.path = path\\n        self.args = args\\n\\n    def __repr__(self):\\n        return (\\n            \"{0.__class__.__name__}(name={0.name!r}, major={0.major!r}, minor={0.minor!r}, \"\\n            \"architecture={0.architecture!r}, path={0.path!r}, args={0.args!r})\"\\n        ).format(self)\\n\\n    def __str__(self):\\n        msg = repr(self)\\n        return msg.encode(\"utf-8\") if six.PY2 else msg\\n\\n    def satisfies(self, req):\\n        if req.is_abs and self.is_abs and self.path != req.path:\\n            return False\\n        if req.name is not None and req.name != self.name:\\n            return False\\n        if req.architecture is not None and req.architecture != self.architecture:\\n            return False\\n        if req.major is not None and req.major != self.major:\\n            return False\\n        if req.minor is not None and req.minor != self.minor:\\n            return False\\n        if req.major is None and req.minor is not None:\\n            return False\\n        return True\\n\\n    @property\\n    def is_abs(self):\\n        return self.path is not None and os.path.isabs(self.path)\\n\\n    @classmethod\\n    def from_name(cls, base_python):\\n        name, major, minor, architecture, path = None, None, None, None, None\\n        if os.path.isabs(base_python):\\n            path = base_python\\n        else:\\n            match = re.match(r\"(python|pypy|jython)(\\\\d)?(?:\\\\.(\\\\d+))?(?:-(32|64))?$\", base_python)\\n            if match:\\n                groups = match.groups()\\n                name = groups[0]\\n                major = int(groups[1]) if len(groups) >= 2 and groups[1] is not None else None\\n                minor = int(groups[2]) if len(groups) >= 3 and groups[2] is not None else None\\n                architecture = (\\n                    int(groups[3]) if len(groups) >= 4 and groups[3] is not None else None\\n                )\\n            else:\\n                path = base_python\\n        return cls(name, major, minor, architecture, path)\\n\\n\\nCURRENT = PythonSpec(\\n    \"pypy\" if tox.constants.INFO.IS_PYPY else \"python\",\\n    sys.version_info[0],\\n    sys.version_info[1],\\n    64 if sys.maxsize > 2 ** 32 else 32,\\n    sys.executable,\\n)\\n'"}, {"func_args": {"source": "'from __future__ import unicode_literals\\n\\nimport tox\\n\\nfrom .common import base_discover\\nfrom .via_path import check_with_path\\n\\n\\n@tox.hookimpl\\ndef tox_get_python_executable(envconfig):\\n    spec, path = base_discover(envconfig)\\n    if path is not None:\\n        return path\\n    # 3. check if the literal base python\\n    candidates = [envconfig.basepython]\\n    # 4. check if the un-versioned name is good\\n    if spec.name is not None and spec.name != envconfig.basepython:\\n        candidates.append(spec.name)\\n    return check_with_path(candidates, spec)\\n'"}, "return_value": "'from __future__ import unicode_literals\\n\\nimport tox\\n\\nfrom .common import base_discover\\nfrom .via_path import check_with_path\\n\\n\\n@tox.hookimpl\\ndef tox_get_python_executable(envconfig):\\n    spec, path = base_discover(envconfig)\\n    if path is not None:\\n        return path\\n    # 3. check if the literal base python\\n    candidates = [envconfig.basepython]\\n    # 4. check if the un-versioned name is good\\n    if spec.name is not None and spec.name != envconfig.basepython:\\n        candidates.append(spec.name)\\n    return check_with_path(candidates, spec)\\n'"}, {"func_args": {"source": "'from __future__ import unicode_literals\\n\\nimport tox\\n\\nfrom .common import base_discover\\nfrom .via_path import check_with_path\\n\\n\\n@tox.hookimpl\\ndef tox_get_python_executable(envconfig):\\n    spec, path = base_discover(envconfig)\\n    if path is not None:\\n        return path\\n    # 3. check if the literal base python\\n    candidates = [envconfig.basepython]\\n    # 4. check if the un-versioned name is good\\n    if spec.name is not None and spec.name != envconfig.basepython:\\n        candidates.append(spec.name)\\n    return check_with_path(candidates, spec)\\n'"}, "return_value": "'from __future__ import unicode_literals\\n\\nimport tox\\n\\nfrom .common import base_discover\\nfrom .via_path import check_with_path\\n\\n\\n@tox.hookimpl\\ndef tox_get_python_executable(envconfig):\\n    spec, path = base_discover(envconfig)\\n    if path is not None:\\n        return path\\n    # 3. check if the literal base python\\n    candidates = [envconfig.basepython]\\n    # 4. check if the un-versioned name is good\\n    if spec.name is not None and spec.name != envconfig.basepython:\\n        candidates.append(spec.name)\\n    return check_with_path(candidates, spec)\\n'"}, {"func_args": {"source": "'from __future__ import unicode_literals\\n\\nimport json\\nimport os\\nimport subprocess\\nfrom collections import defaultdict\\nfrom threading import Lock\\n\\nimport py\\n\\nfrom tox import reporter\\nfrom tox.constants import VERSION_QUERY_SCRIPT\\n\\nfrom .py_spec import PythonSpec\\n\\n\\ndef check_with_path(candidates, spec):\\n    for path in candidates:\\n        base = path\\n        if not os.path.isabs(path):\\n            path = py.path.local.sysfind(path)\\n        if path is not None:\\n            if os.path.exists(str(path)):\\n                cur_spec = exe_spec(path, base)\\n                if cur_spec is not None and cur_spec.satisfies(spec):\\n                    return cur_spec.path\\n\\n\\n_SPECS = {}\\n_SPECK_LOCK = defaultdict(Lock)\\n\\n\\ndef exe_spec(python_exe, base):\\n    if not isinstance(python_exe, str):\\n        python_exe = str(python_exe)\\n    with _SPECK_LOCK[python_exe]:\\n        if python_exe not in _SPECS:\\n            info = get_python_info(python_exe)\\n            if info is not None:\\n                found = PythonSpec(\\n                    \"pypy\" if info[\"implementation\"] == \"PyPy\" else \"python\",\\n                    info[\"version_info\"][0],\\n                    info[\"version_info\"][1],\\n                    64 if info[\"is_64\"] else 32,\\n                    info[\"executable\"],\\n                )\\n                reporter.verbosity2(\"{} ({}) is {}\".format(base, python_exe, info))\\n            else:\\n                found = None\\n            _SPECS[python_exe] = found\\n    return _SPECS[python_exe]\\n\\n\\n_python_info_cache = {}\\n\\n\\ndef get_python_info(cmd):\\n    try:\\n        return _python_info_cache[cmd].copy()\\n    except KeyError:\\n        pass\\n    proc = subprocess.Popen(\\n        [cmd] + [VERSION_QUERY_SCRIPT],\\n        stdout=subprocess.PIPE,\\n        stderr=subprocess.PIPE,\\n        universal_newlines=True,\\n    )\\n    out, err = proc.communicate()\\n    if not proc.returncode:\\n        try:\\n            result = json.loads(out)\\n        except ValueError as exception:\\n            failure = exception\\n        else:\\n            _python_info_cache[cmd] = result\\n            return result.copy()\\n    else:\\n        failure = \"exit code {}\".format(proc.returncode)\\n    reporter.verbosity1(\"{!r} cmd {!r} out {!r} err {!r} \".format(failure, cmd, out, err))\\n'"}, "return_value": "'from __future__ import unicode_literals\\n\\nimport json\\nimport os\\nimport subprocess\\nfrom collections import defaultdict\\nfrom threading import Lock\\n\\nimport py\\n\\nfrom tox import reporter\\nfrom tox.constants import VERSION_QUERY_SCRIPT\\n\\nfrom .py_spec import PythonSpec\\n\\n\\ndef check_with_path(candidates, spec):\\n    for path in candidates:\\n        base = path\\n        if not os.path.isabs(path):\\n            path = py.path.local.sysfind(path)\\n        if path is not None:\\n            if os.path.exists(str(path)):\\n                cur_spec = exe_spec(path, base)\\n                if cur_spec is not None and cur_spec.satisfies(spec):\\n                    return cur_spec.path\\n\\n\\n_SPECS = {}\\n_SPECK_LOCK = defaultdict(Lock)\\n\\n\\ndef exe_spec(python_exe, base):\\n    if not isinstance(python_exe, str):\\n        python_exe = str(python_exe)\\n    with _SPECK_LOCK[python_exe]:\\n        if python_exe not in _SPECS:\\n            info = get_python_info(python_exe)\\n            if info is not None:\\n                found = PythonSpec(\\n                    \"pypy\" if info[\"implementation\"] == \"PyPy\" else \"python\",\\n                    info[\"version_info\"][0],\\n                    info[\"version_info\"][1],\\n                    64 if info[\"is_64\"] else 32,\\n                    info[\"executable\"],\\n                )\\n                reporter.verbosity2(\"{} ({}) is {}\".format(base, python_exe, info))\\n            else:\\n                found = None\\n            _SPECS[python_exe] = found\\n    return _SPECS[python_exe]\\n\\n\\n_python_info_cache = {}\\n\\n\\ndef get_python_info(cmd):\\n    try:\\n        return _python_info_cache[cmd].copy()\\n    except KeyError:\\n        pass\\n    proc = subprocess.Popen(\\n        [cmd] + [VERSION_QUERY_SCRIPT],\\n        stdout=subprocess.PIPE,\\n        stderr=subprocess.PIPE,\\n        universal_newlines=True,\\n    )\\n    out, err = proc.communicate()\\n    if not proc.returncode:\\n        try:\\n            result = json.loads(out)\\n        except ValueError as exception:\\n            failure = exception\\n        else:\\n            _python_info_cache[cmd] = result\\n            return result.copy()\\n    else:\\n        failure = \"exit code {}\".format(proc.returncode)\\n    reporter.verbosity1(\"{!r} cmd {!r} out {!r} err {!r} \".format(failure, cmd, out, err))\\n'"}, {"func_args": {"source": "'from __future__ import unicode_literals\\n\\nimport json\\nimport os\\nimport subprocess\\nfrom collections import defaultdict\\nfrom threading import Lock\\n\\nimport py\\n\\nfrom tox import reporter\\nfrom tox.constants import VERSION_QUERY_SCRIPT\\n\\nfrom .py_spec import PythonSpec\\n\\n\\ndef check_with_path(candidates, spec):\\n    for path in candidates:\\n        base = path\\n        if not os.path.isabs(path):\\n            path = py.path.local.sysfind(path)\\n        if path is not None:\\n            if os.path.exists(str(path)):\\n                cur_spec = exe_spec(path, base)\\n                if cur_spec is not None and cur_spec.satisfies(spec):\\n                    return cur_spec.path\\n\\n\\n_SPECS = {}\\n_SPECK_LOCK = defaultdict(Lock)\\n\\n\\ndef exe_spec(python_exe, base):\\n    if not isinstance(python_exe, str):\\n        python_exe = str(python_exe)\\n    with _SPECK_LOCK[python_exe]:\\n        if python_exe not in _SPECS:\\n            info = get_python_info(python_exe)\\n            if info is not None:\\n                found = PythonSpec(\\n                    \"pypy\" if info[\"implementation\"] == \"PyPy\" else \"python\",\\n                    info[\"version_info\"][0],\\n                    info[\"version_info\"][1],\\n                    64 if info[\"is_64\"] else 32,\\n                    info[\"executable\"],\\n                )\\n                reporter.verbosity2(\"{} ({}) is {}\".format(base, python_exe, info))\\n            else:\\n                found = None\\n            _SPECS[python_exe] = found\\n    return _SPECS[python_exe]\\n\\n\\n_python_info_cache = {}\\n\\n\\ndef get_python_info(cmd):\\n    try:\\n        return _python_info_cache[cmd].copy()\\n    except KeyError:\\n        pass\\n    proc = subprocess.Popen(\\n        [cmd] + [VERSION_QUERY_SCRIPT],\\n        stdout=subprocess.PIPE,\\n        stderr=subprocess.PIPE,\\n        universal_newlines=True,\\n    )\\n    out, err = proc.communicate()\\n    if not proc.returncode:\\n        try:\\n            result = json.loads(out)\\n        except ValueError as exception:\\n            failure = exception\\n        else:\\n            _python_info_cache[cmd] = result\\n            return result.copy()\\n    else:\\n        failure = \"exit code {}\".format(proc.returncode)\\n    reporter.verbosity1(\"{!r} cmd {!r} out {!r} err {!r} \".format(failure, cmd, out, err))\\n'"}, "return_value": "'from __future__ import unicode_literals\\n\\nimport json\\nimport os\\nimport subprocess\\nfrom collections import defaultdict\\nfrom threading import Lock\\n\\nimport py\\n\\nfrom tox import reporter\\nfrom tox.constants import VERSION_QUERY_SCRIPT\\n\\nfrom .py_spec import PythonSpec\\n\\n\\ndef check_with_path(candidates, spec):\\n    for path in candidates:\\n        base = path\\n        if not os.path.isabs(path):\\n            path = py.path.local.sysfind(path)\\n        if path is not None:\\n            if os.path.exists(str(path)):\\n                cur_spec = exe_spec(path, base)\\n                if cur_spec is not None and cur_spec.satisfies(spec):\\n                    return cur_spec.path\\n\\n\\n_SPECS = {}\\n_SPECK_LOCK = defaultdict(Lock)\\n\\n\\ndef exe_spec(python_exe, base):\\n    if not isinstance(python_exe, str):\\n        python_exe = str(python_exe)\\n    with _SPECK_LOCK[python_exe]:\\n        if python_exe not in _SPECS:\\n            info = get_python_info(python_exe)\\n            if info is not None:\\n                found = PythonSpec(\\n                    \"pypy\" if info[\"implementation\"] == \"PyPy\" else \"python\",\\n                    info[\"version_info\"][0],\\n                    info[\"version_info\"][1],\\n                    64 if info[\"is_64\"] else 32,\\n                    info[\"executable\"],\\n                )\\n                reporter.verbosity2(\"{} ({}) is {}\".format(base, python_exe, info))\\n            else:\\n                found = None\\n            _SPECS[python_exe] = found\\n    return _SPECS[python_exe]\\n\\n\\n_python_info_cache = {}\\n\\n\\ndef get_python_info(cmd):\\n    try:\\n        return _python_info_cache[cmd].copy()\\n    except KeyError:\\n        pass\\n    proc = subprocess.Popen(\\n        [cmd] + [VERSION_QUERY_SCRIPT],\\n        stdout=subprocess.PIPE,\\n        stderr=subprocess.PIPE,\\n        universal_newlines=True,\\n    )\\n    out, err = proc.communicate()\\n    if not proc.returncode:\\n        try:\\n            result = json.loads(out)\\n        except ValueError as exception:\\n            failure = exception\\n        else:\\n            _python_info_cache[cmd] = result\\n            return result.copy()\\n    else:\\n        failure = \"exit code {}\".format(proc.returncode)\\n    reporter.verbosity1(\"{!r} cmd {!r} out {!r} err {!r} \".format(failure, cmd, out, err))\\n'"}, {"func_args": {"source": "'from __future__ import unicode_literals\\n\\nfrom threading import Lock\\n\\nimport tox\\n\\nfrom ..common import base_discover\\nfrom ..py_spec import CURRENT\\nfrom ..via_path import check_with_path\\n\\n\\n@tox.hookimpl\\ndef tox_get_python_executable(envconfig):\\n    spec, path = base_discover(envconfig)\\n    if path is not None:\\n        return path\\n    # second check if the py.exe has it (only for non path specs)\\n    if spec.path is None:\\n        py_exe = locate_via_pep514(spec)\\n        if py_exe is not None:\\n            return py_exe\\n\\n    # third check if the literal base python is on PATH\\n    candidates = [envconfig.basepython]\\n    # fourth check if the name is on PATH\\n    if spec.name is not None and spec.name != envconfig.basepython:\\n        candidates.append(spec.name)\\n    # or check known locations\\n    if spec.major is not None and spec.minor is not None:\\n        if spec.name == \"python\":\\n            # The standard names are in predictable places.\\n            candidates.append(r\"c:\\\\python{}{}\\\\python.exe\".format(spec.major, spec.minor))\\n    return check_with_path(candidates, spec)\\n\\n\\n_PY_AVAILABLE = []\\n_PY_LOCK = Lock()\\n\\n\\ndef locate_via_pep514(spec):\\n    with _PY_LOCK:\\n        if not _PY_AVAILABLE:\\n            from . import pep514\\n\\n            _PY_AVAILABLE.extend(pep514.discover_pythons())\\n            _PY_AVAILABLE.append(CURRENT)\\n    for cur_spec in _PY_AVAILABLE:\\n        if cur_spec.satisfies(spec):\\n            return cur_spec.path\\n'"}, "return_value": "'from __future__ import unicode_literals\\n\\nfrom threading import Lock\\n\\nimport tox\\n\\nfrom ..common import base_discover\\nfrom ..py_spec import CURRENT\\nfrom ..via_path import check_with_path\\n\\n\\n@tox.hookimpl\\ndef tox_get_python_executable(envconfig):\\n    spec, path = base_discover(envconfig)\\n    if path is not None:\\n        return path\\n    # second check if the py.exe has it (only for non path specs)\\n    if spec.path is None:\\n        py_exe = locate_via_pep514(spec)\\n        if py_exe is not None:\\n            return py_exe\\n\\n    # third check if the literal base python is on PATH\\n    candidates = [envconfig.basepython]\\n    # fourth check if the name is on PATH\\n    if spec.name is not None and spec.name != envconfig.basepython:\\n        candidates.append(spec.name)\\n    # or check known locations\\n    if spec.major is not None and spec.minor is not None:\\n        if spec.name == \"python\":\\n            # The standard names are in predictable places.\\n            candidates.append(r\"c:\\\\python{}{}\\\\python.exe\".format(spec.major, spec.minor))\\n    return check_with_path(candidates, spec)\\n\\n\\n_PY_AVAILABLE = []\\n_PY_LOCK = Lock()\\n\\n\\ndef locate_via_pep514(spec):\\n    with _PY_LOCK:\\n        if not _PY_AVAILABLE:\\n            from . import pep514\\n\\n            _PY_AVAILABLE.extend(pep514.discover_pythons())\\n            _PY_AVAILABLE.append(CURRENT)\\n    for cur_spec in _PY_AVAILABLE:\\n        if cur_spec.satisfies(spec):\\n            return cur_spec.path\\n'"}, {"func_args": {"source": "'from __future__ import unicode_literals\\n\\nfrom threading import Lock\\n\\nimport tox\\n\\nfrom ..common import base_discover\\nfrom ..py_spec import CURRENT\\nfrom ..via_path import check_with_path\\n\\n\\n@tox.hookimpl\\ndef tox_get_python_executable(envconfig):\\n    spec, path = base_discover(envconfig)\\n    if path is not None:\\n        return path\\n    # second check if the py.exe has it (only for non path specs)\\n    if spec.path is None:\\n        py_exe = locate_via_pep514(spec)\\n        if py_exe is not None:\\n            return py_exe\\n\\n    # third check if the literal base python is on PATH\\n    candidates = [envconfig.basepython]\\n    # fourth check if the name is on PATH\\n    if spec.name is not None and spec.name != envconfig.basepython:\\n        candidates.append(spec.name)\\n    # or check known locations\\n    if spec.major is not None and spec.minor is not None:\\n        if spec.name == \"python\":\\n            # The standard names are in predictable places.\\n            candidates.append(r\"c:\\\\python{}{}\\\\python.exe\".format(spec.major, spec.minor))\\n    return check_with_path(candidates, spec)\\n\\n\\n_PY_AVAILABLE = []\\n_PY_LOCK = Lock()\\n\\n\\ndef locate_via_pep514(spec):\\n    with _PY_LOCK:\\n        if not _PY_AVAILABLE:\\n            from . import pep514\\n\\n            _PY_AVAILABLE.extend(pep514.discover_pythons())\\n            _PY_AVAILABLE.append(CURRENT)\\n    for cur_spec in _PY_AVAILABLE:\\n        if cur_spec.satisfies(spec):\\n            return cur_spec.path\\n'"}, "return_value": "'from __future__ import unicode_literals\\n\\nfrom threading import Lock\\n\\nimport tox\\n\\nfrom ..common import base_discover\\nfrom ..py_spec import CURRENT\\nfrom ..via_path import check_with_path\\n\\n\\n@tox.hookimpl\\ndef tox_get_python_executable(envconfig):\\n    spec, path = base_discover(envconfig)\\n    if path is not None:\\n        return path\\n    # second check if the py.exe has it (only for non path specs)\\n    if spec.path is None:\\n        py_exe = locate_via_pep514(spec)\\n        if py_exe is not None:\\n            return py_exe\\n\\n    # third check if the literal base python is on PATH\\n    candidates = [envconfig.basepython]\\n    # fourth check if the name is on PATH\\n    if spec.name is not None and spec.name != envconfig.basepython:\\n        candidates.append(spec.name)\\n    # or check known locations\\n    if spec.major is not None and spec.minor is not None:\\n        if spec.name == \"python\":\\n            # The standard names are in predictable places.\\n            candidates.append(r\"c:\\\\python{}{}\\\\python.exe\".format(spec.major, spec.minor))\\n    return check_with_path(candidates, spec)\\n\\n\\n_PY_AVAILABLE = []\\n_PY_LOCK = Lock()\\n\\n\\ndef locate_via_pep514(spec):\\n    with _PY_LOCK:\\n        if not _PY_AVAILABLE:\\n            from . import pep514\\n\\n            _PY_AVAILABLE.extend(pep514.discover_pythons())\\n            _PY_AVAILABLE.append(CURRENT)\\n    for cur_spec in _PY_AVAILABLE:\\n        if cur_spec.satisfies(spec):\\n            return cur_spec.path\\n'"}, {"func_args": {"source": "'\"\"\"Implement https://www.python.org/dev/peps/pep-0514/ to discover interpreters - Windows only\"\"\"\\nfrom __future__ import unicode_literals\\n\\nimport os\\nimport re\\n\\nimport six\\nfrom six.moves import winreg\\n\\nfrom tox import reporter\\nfrom tox.interpreters.py_spec import PythonSpec\\n\\n\\ndef enum_keys(key):\\n    at = 0\\n    while True:\\n        try:\\n            yield winreg.EnumKey(key, at)\\n        except OSError:\\n            break\\n        at += 1\\n\\n\\ndef get_value(key, value_name):\\n    try:\\n        return winreg.QueryValueEx(key, value_name)[0]\\n    except OSError:\\n        return None\\n\\n\\ndef discover_pythons():\\n    for hive, hive_name, key, flags, default_arch in [\\n        (winreg.HKEY_CURRENT_USER, \"HKEY_CURRENT_USER\", r\"Software\\\\Python\", 0, 64),\\n        (\\n            winreg.HKEY_LOCAL_MACHINE,\\n            \"HKEY_LOCAL_MACHINE\",\\n            r\"Software\\\\Python\",\\n            winreg.KEY_WOW64_64KEY,\\n            64,\\n        ),\\n        (\\n            winreg.HKEY_LOCAL_MACHINE,\\n            \"HKEY_LOCAL_MACHINE\",\\n            r\"Software\\\\Python\",\\n            winreg.KEY_WOW64_32KEY,\\n            32,\\n        ),\\n    ]:\\n        for spec in process_set(hive, hive_name, key, flags, default_arch):\\n            yield spec\\n\\n\\ndef process_set(hive, hive_name, key, flags, default_arch):\\n    try:\\n        with winreg.OpenKeyEx(hive, key, 0, winreg.KEY_READ | flags) as root_key:\\n            for company in enum_keys(root_key):\\n                if company == \"PyLauncher\":  # reserved\\n                    continue\\n                for spec in process_company(hive_name, company, root_key, default_arch):\\n                    yield spec\\n    except OSError:\\n        pass\\n\\n\\ndef process_company(hive_name, company, root_key, default_arch):\\n    with winreg.OpenKeyEx(root_key, company) as company_key:\\n        for tag in enum_keys(company_key):\\n            for spec in process_tag(hive_name, company, company_key, tag, default_arch):\\n                yield spec\\n\\n\\ndef process_tag(hive_name, company, company_key, tag, default_arch):\\n    with winreg.OpenKeyEx(company_key, tag) as tag_key:\\n        major, minor = load_version_data(hive_name, company, tag, tag_key)\\n        if major is None:\\n            return\\n        arch = load_arch_data(hive_name, company, tag, tag_key, default_arch)\\n    exe, args = load_exe(hive_name, company, company_key, tag)\\n    if exe is not None:\\n        name = \"python\" if company == \"PythonCore\" else company\\n        yield PythonSpec(name, major, minor, arch, exe, args)\\n\\n\\ndef load_exe(hive_name, company, company_key, tag):\\n    key_path = \"{}/{}/{}\".format(hive_name, company, tag)\\n    try:\\n        with winreg.OpenKeyEx(company_key, r\"{}\\\\InstallPath\".format(tag)) as ip_key:\\n            with ip_key:\\n                exe = get_value(ip_key, \"ExecutablePath\")\\n                if exe is None:\\n                    ip = get_value(ip_key, None)\\n                    if ip is None:\\n                        msg(key_path, \"no ExecutablePath or default for it\")\\n\\n                    else:\\n                        exe = os.path.join(ip, \"python.exe\")\\n                if os.path.exists(exe):\\n                    args = get_value(ip_key, \"ExecutableArguments\")\\n                    return exe, args\\n                else:\\n                    msg(key_path, \"exe does not exists {}\".format(exe))\\n    except OSError:\\n        msg(\"{}/{}\".format(key_path, \"InstallPath\"), \"missing\")\\n    return None, None\\n\\n\\ndef load_arch_data(hive_name, company, tag, tag_key, default_arch):\\n    arch_str = get_value(tag_key, \"SysArchitecture\")\\n    if arch_str is not None:\\n        key_path = \"{}/{}/{}/SysArchitecture\".format(hive_name, company, tag)\\n        try:\\n            return parse_arch(arch_str)\\n        except ValueError as sys_arch:\\n            msg(key_path, sys_arch)\\n    return default_arch\\n\\n\\ndef parse_arch(arch_str):\\n    if not isinstance(arch_str, six.string_types):\\n        raise ValueError(\"arch is not string\")\\n    match = re.match(r\"(\\\\d+)bit\", arch_str)\\n    if match:\\n        return int(next(iter(match.groups())))\\n    raise ValueError(\"invalid format {}\".format(arch_str))\\n\\n\\ndef load_version_data(hive_name, company, tag, tag_key):\\n    version_str = get_value(tag_key, \"SysVersion\")\\n    major, minor = None, None\\n    if version_str is not None:\\n        key_path = \"{}/{}/{}/SysVersion\".format(hive_name, company, tag)\\n        try:\\n            major, minor = parse_version(get_value(tag_key, \"SysVersion\"))\\n        except ValueError as sys_version:\\n            msg(key_path, sys_version)\\n    if major is None:\\n        key_path = \"{}/{}/{}\".format(hive_name, company, tag)\\n        try:\\n            major, minor = parse_version(tag)\\n        except ValueError as tag_version:\\n            msg(key_path, tag_version)\\n    return major, minor\\n\\n\\ndef parse_version(version_str):\\n    if not isinstance(version_str, six.string_types):\\n        raise ValueError(\"key is not string\")\\n    match = re.match(r\"(\\\\d+)\\\\.(\\\\d+).*\", version_str)\\n    if match:\\n        return tuple(int(i) for i in match.groups())\\n    raise ValueError(\"invalid format {}\".format(version_str))\\n\\n\\ndef msg(path, what):\\n    reporter.verbosity1(\"PEP-514 violation in Windows Registry at {} error: {}\".format(path, what))\\n\\n\\ndef _run():\\n    reporter.update_default_reporter(0, reporter.Verbosity.DEBUG)\\n    for spec in discover_pythons():\\n        print(repr(spec))\\n\\n\\nif __name__ == \"__main__\":\\n    _run()\\n'"}, "return_value": "'\"\"\"Implement https://www.python.org/dev/peps/pep-0514/ to discover interpreters - Windows only\"\"\"\\nfrom __future__ import unicode_literals\\n\\nimport os\\nimport re\\n\\nimport six\\nfrom six.moves import winreg\\n\\nfrom tox import reporter\\nfrom tox.interpreters.py_spec import PythonSpec\\n\\n\\ndef enum_keys(key):\\n    at = 0\\n    while True:\\n        try:\\n            yield winreg.EnumKey(key, at)\\n        except OSError:\\n            break\\n        at += 1\\n\\n\\ndef get_value(key, value_name):\\n    try:\\n        return winreg.QueryValueEx(key, value_name)[0]\\n    except OSError:\\n        return None\\n\\n\\ndef discover_pythons():\\n    for hive, hive_name, key, flags, default_arch in [\\n        (winreg.HKEY_CURRENT_USER, \"HKEY_CURRENT_USER\", r\"Software\\\\Python\", 0, 64),\\n        (\\n            winreg.HKEY_LOCAL_MACHINE,\\n            \"HKEY_LOCAL_MACHINE\",\\n            r\"Software\\\\Python\",\\n            winreg.KEY_WOW64_64KEY,\\n            64,\\n        ),\\n        (\\n            winreg.HKEY_LOCAL_MACHINE,\\n            \"HKEY_LOCAL_MACHINE\",\\n            r\"Software\\\\Python\",\\n            winreg.KEY_WOW64_32KEY,\\n            32,\\n        ),\\n    ]:\\n        for spec in process_set(hive, hive_name, key, flags, default_arch):\\n            yield spec\\n\\n\\ndef process_set(hive, hive_name, key, flags, default_arch):\\n    try:\\n        with winreg.OpenKeyEx(hive, key, 0, winreg.KEY_READ | flags) as root_key:\\n            for company in enum_keys(root_key):\\n                if company == \"PyLauncher\":  # reserved\\n                    continue\\n                for spec in process_company(hive_name, company, root_key, default_arch):\\n                    yield spec\\n    except OSError:\\n        pass\\n\\n\\ndef process_company(hive_name, company, root_key, default_arch):\\n    with winreg.OpenKeyEx(root_key, company) as company_key:\\n        for tag in enum_keys(company_key):\\n            for spec in process_tag(hive_name, company, company_key, tag, default_arch):\\n                yield spec\\n\\n\\ndef process_tag(hive_name, company, company_key, tag, default_arch):\\n    with winreg.OpenKeyEx(company_key, tag) as tag_key:\\n        major, minor = load_version_data(hive_name, company, tag, tag_key)\\n        if major is None:\\n            return\\n        arch = load_arch_data(hive_name, company, tag, tag_key, default_arch)\\n    exe, args = load_exe(hive_name, company, company_key, tag)\\n    if exe is not None:\\n        name = \"python\" if company == \"PythonCore\" else company\\n        yield PythonSpec(name, major, minor, arch, exe, args)\\n\\n\\ndef load_exe(hive_name, company, company_key, tag):\\n    key_path = \"{}/{}/{}\".format(hive_name, company, tag)\\n    try:\\n        with winreg.OpenKeyEx(company_key, r\"{}\\\\InstallPath\".format(tag)) as ip_key:\\n            with ip_key:\\n                exe = get_value(ip_key, \"ExecutablePath\")\\n                if exe is None:\\n                    ip = get_value(ip_key, None)\\n                    if ip is None:\\n                        msg(key_path, \"no ExecutablePath or default for it\")\\n\\n                    else:\\n                        exe = os.path.join(ip, \"python.exe\")\\n                if os.path.exists(exe):\\n                    args = get_value(ip_key, \"ExecutableArguments\")\\n                    return exe, args\\n                else:\\n                    msg(key_path, \"exe does not exists {}\".format(exe))\\n    except OSError:\\n        msg(\"{}/{}\".format(key_path, \"InstallPath\"), \"missing\")\\n    return None, None\\n\\n\\ndef load_arch_data(hive_name, company, tag, tag_key, default_arch):\\n    arch_str = get_value(tag_key, \"SysArchitecture\")\\n    if arch_str is not None:\\n        key_path = \"{}/{}/{}/SysArchitecture\".format(hive_name, company, tag)\\n        try:\\n            return parse_arch(arch_str)\\n        except ValueError as sys_arch:\\n            msg(key_path, sys_arch)\\n    return default_arch\\n\\n\\ndef parse_arch(arch_str):\\n    if not isinstance(arch_str, six.string_types):\\n        raise ValueError(\"arch is not string\")\\n    match = re.match(r\"(\\\\d+)bit\", arch_str)\\n    if match:\\n        return int(next(iter(match.groups())))\\n    raise ValueError(\"invalid format {}\".format(arch_str))\\n\\n\\ndef load_version_data(hive_name, company, tag, tag_key):\\n    version_str = get_value(tag_key, \"SysVersion\")\\n    major, minor = None, None\\n    if version_str is not None:\\n        key_path = \"{}/{}/{}/SysVersion\".format(hive_name, company, tag)\\n        try:\\n            major, minor = parse_version(get_value(tag_key, \"SysVersion\"))\\n        except ValueError as sys_version:\\n            msg(key_path, sys_version)\\n    if major is None:\\n        key_path = \"{}/{}/{}\".format(hive_name, company, tag)\\n        try:\\n            major, minor = parse_version(tag)\\n        except ValueError as tag_version:\\n            msg(key_path, tag_version)\\n    return major, minor\\n\\n\\ndef parse_version(version_str):\\n    if not isinstance(version_str, six.string_types):\\n        raise ValueError(\"key is not string\")\\n    match = re.match(r\"(\\\\d+)\\\\.(\\\\d+).*\", version_str)\\n    if match:\\n        return tuple(int(i) for i in match.groups())\\n    raise ValueError(\"invalid format {}\".format(version_str))\\n\\n\\ndef msg(path, what):\\n    reporter.verbosity1(\"PEP-514 violation in Windows Registry at {} error: {}\".format(path, what))\\n\\n\\ndef _run():\\n    reporter.update_default_reporter(0, reporter.Verbosity.DEBUG)\\n    for spec in discover_pythons():\\n        print(repr(spec))\\n\\n\\nif __name__ == \"__main__\":\\n    _run()\\n'"}, {"func_args": {"source": "'\"\"\"Implement https://www.python.org/dev/peps/pep-0514/ to discover interpreters - Windows only\"\"\"\\nfrom __future__ import unicode_literals\\n\\nimport os\\nimport re\\n\\nimport six\\nfrom six.moves import winreg\\n\\nfrom tox import reporter\\nfrom tox.interpreters.py_spec import PythonSpec\\n\\n\\ndef enum_keys(key):\\n    at = 0\\n    while True:\\n        try:\\n            yield winreg.EnumKey(key, at)\\n        except OSError:\\n            break\\n        at += 1\\n\\n\\ndef get_value(key, value_name):\\n    try:\\n        return winreg.QueryValueEx(key, value_name)[0]\\n    except OSError:\\n        return None\\n\\n\\ndef discover_pythons():\\n    for hive, hive_name, key, flags, default_arch in [\\n        (winreg.HKEY_CURRENT_USER, \"HKEY_CURRENT_USER\", r\"Software\\\\Python\", 0, 64),\\n        (\\n            winreg.HKEY_LOCAL_MACHINE,\\n            \"HKEY_LOCAL_MACHINE\",\\n            r\"Software\\\\Python\",\\n            winreg.KEY_WOW64_64KEY,\\n            64,\\n        ),\\n        (\\n            winreg.HKEY_LOCAL_MACHINE,\\n            \"HKEY_LOCAL_MACHINE\",\\n            r\"Software\\\\Python\",\\n            winreg.KEY_WOW64_32KEY,\\n            32,\\n        ),\\n    ]:\\n        for spec in process_set(hive, hive_name, key, flags, default_arch):\\n            yield spec\\n\\n\\ndef process_set(hive, hive_name, key, flags, default_arch):\\n    try:\\n        with winreg.OpenKeyEx(hive, key, 0, winreg.KEY_READ | flags) as root_key:\\n            for company in enum_keys(root_key):\\n                if company == \"PyLauncher\":  # reserved\\n                    continue\\n                for spec in process_company(hive_name, company, root_key, default_arch):\\n                    yield spec\\n    except OSError:\\n        pass\\n\\n\\ndef process_company(hive_name, company, root_key, default_arch):\\n    with winreg.OpenKeyEx(root_key, company) as company_key:\\n        for tag in enum_keys(company_key):\\n            for spec in process_tag(hive_name, company, company_key, tag, default_arch):\\n                yield spec\\n\\n\\ndef process_tag(hive_name, company, company_key, tag, default_arch):\\n    with winreg.OpenKeyEx(company_key, tag) as tag_key:\\n        major, minor = load_version_data(hive_name, company, tag, tag_key)\\n        if major is None:\\n            return\\n        arch = load_arch_data(hive_name, company, tag, tag_key, default_arch)\\n    exe, args = load_exe(hive_name, company, company_key, tag)\\n    if exe is not None:\\n        name = \"python\" if company == \"PythonCore\" else company\\n        yield PythonSpec(name, major, minor, arch, exe, args)\\n\\n\\ndef load_exe(hive_name, company, company_key, tag):\\n    key_path = \"{}/{}/{}\".format(hive_name, company, tag)\\n    try:\\n        with winreg.OpenKeyEx(company_key, r\"{}\\\\InstallPath\".format(tag)) as ip_key:\\n            with ip_key:\\n                exe = get_value(ip_key, \"ExecutablePath\")\\n                if exe is None:\\n                    ip = get_value(ip_key, None)\\n                    if ip is None:\\n                        msg(key_path, \"no ExecutablePath or default for it\")\\n\\n                    else:\\n                        exe = os.path.join(ip, \"python.exe\")\\n                if os.path.exists(exe):\\n                    args = get_value(ip_key, \"ExecutableArguments\")\\n                    return exe, args\\n                else:\\n                    msg(key_path, \"exe does not exists {}\".format(exe))\\n    except OSError:\\n        msg(\"{}/{}\".format(key_path, \"InstallPath\"), \"missing\")\\n    return None, None\\n\\n\\ndef load_arch_data(hive_name, company, tag, tag_key, default_arch):\\n    arch_str = get_value(tag_key, \"SysArchitecture\")\\n    if arch_str is not None:\\n        key_path = \"{}/{}/{}/SysArchitecture\".format(hive_name, company, tag)\\n        try:\\n            return parse_arch(arch_str)\\n        except ValueError as sys_arch:\\n            msg(key_path, sys_arch)\\n    return default_arch\\n\\n\\ndef parse_arch(arch_str):\\n    if not isinstance(arch_str, six.string_types):\\n        raise ValueError(\"arch is not string\")\\n    match = re.match(r\"(\\\\d+)bit\", arch_str)\\n    if match:\\n        return int(next(iter(match.groups())))\\n    raise ValueError(\"invalid format {}\".format(arch_str))\\n\\n\\ndef load_version_data(hive_name, company, tag, tag_key):\\n    version_str = get_value(tag_key, \"SysVersion\")\\n    major, minor = None, None\\n    if version_str is not None:\\n        key_path = \"{}/{}/{}/SysVersion\".format(hive_name, company, tag)\\n        try:\\n            major, minor = parse_version(get_value(tag_key, \"SysVersion\"))\\n        except ValueError as sys_version:\\n            msg(key_path, sys_version)\\n    if major is None:\\n        key_path = \"{}/{}/{}\".format(hive_name, company, tag)\\n        try:\\n            major, minor = parse_version(tag)\\n        except ValueError as tag_version:\\n            msg(key_path, tag_version)\\n    return major, minor\\n\\n\\ndef parse_version(version_str):\\n    if not isinstance(version_str, six.string_types):\\n        raise ValueError(\"key is not string\")\\n    match = re.match(r\"(\\\\d+)\\\\.(\\\\d+).*\", version_str)\\n    if match:\\n        return tuple(int(i) for i in match.groups())\\n    raise ValueError(\"invalid format {}\".format(version_str))\\n\\n\\ndef msg(path, what):\\n    reporter.verbosity1(\"PEP-514 violation in Windows Registry at {} error: {}\".format(path, what))\\n\\n\\ndef _run():\\n    reporter.update_default_reporter(0, reporter.Verbosity.DEBUG)\\n    for spec in discover_pythons():\\n        print(repr(spec))\\n\\n\\nif __name__ == \"__main__\":\\n    _run()\\n'"}, "return_value": "'\"\"\"Implement https://www.python.org/dev/peps/pep-0514/ to discover interpreters - Windows only\"\"\"\\nfrom __future__ import unicode_literals\\n\\nimport os\\nimport re\\n\\nimport six\\nfrom six.moves import winreg\\n\\nfrom tox import reporter\\nfrom tox.interpreters.py_spec import PythonSpec\\n\\n\\ndef enum_keys(key):\\n    at = 0\\n    while True:\\n        try:\\n            yield winreg.EnumKey(key, at)\\n        except OSError:\\n            break\\n        at += 1\\n\\n\\ndef get_value(key, value_name):\\n    try:\\n        return winreg.QueryValueEx(key, value_name)[0]\\n    except OSError:\\n        return None\\n\\n\\ndef discover_pythons():\\n    for hive, hive_name, key, flags, default_arch in [\\n        (winreg.HKEY_CURRENT_USER, \"HKEY_CURRENT_USER\", r\"Software\\\\Python\", 0, 64),\\n        (\\n            winreg.HKEY_LOCAL_MACHINE,\\n            \"HKEY_LOCAL_MACHINE\",\\n            r\"Software\\\\Python\",\\n            winreg.KEY_WOW64_64KEY,\\n            64,\\n        ),\\n        (\\n            winreg.HKEY_LOCAL_MACHINE,\\n            \"HKEY_LOCAL_MACHINE\",\\n            r\"Software\\\\Python\",\\n            winreg.KEY_WOW64_32KEY,\\n            32,\\n        ),\\n    ]:\\n        for spec in process_set(hive, hive_name, key, flags, default_arch):\\n            yield spec\\n\\n\\ndef process_set(hive, hive_name, key, flags, default_arch):\\n    try:\\n        with winreg.OpenKeyEx(hive, key, 0, winreg.KEY_READ | flags) as root_key:\\n            for company in enum_keys(root_key):\\n                if company == \"PyLauncher\":  # reserved\\n                    continue\\n                for spec in process_company(hive_name, company, root_key, default_arch):\\n                    yield spec\\n    except OSError:\\n        pass\\n\\n\\ndef process_company(hive_name, company, root_key, default_arch):\\n    with winreg.OpenKeyEx(root_key, company) as company_key:\\n        for tag in enum_keys(company_key):\\n            for spec in process_tag(hive_name, company, company_key, tag, default_arch):\\n                yield spec\\n\\n\\ndef process_tag(hive_name, company, company_key, tag, default_arch):\\n    with winreg.OpenKeyEx(company_key, tag) as tag_key:\\n        major, minor = load_version_data(hive_name, company, tag, tag_key)\\n        if major is None:\\n            return\\n        arch = load_arch_data(hive_name, company, tag, tag_key, default_arch)\\n    exe, args = load_exe(hive_name, company, company_key, tag)\\n    if exe is not None:\\n        name = \"python\" if company == \"PythonCore\" else company\\n        yield PythonSpec(name, major, minor, arch, exe, args)\\n\\n\\ndef load_exe(hive_name, company, company_key, tag):\\n    key_path = \"{}/{}/{}\".format(hive_name, company, tag)\\n    try:\\n        with winreg.OpenKeyEx(company_key, r\"{}\\\\InstallPath\".format(tag)) as ip_key:\\n            with ip_key:\\n                exe = get_value(ip_key, \"ExecutablePath\")\\n                if exe is None:\\n                    ip = get_value(ip_key, None)\\n                    if ip is None:\\n                        msg(key_path, \"no ExecutablePath or default for it\")\\n\\n                    else:\\n                        exe = os.path.join(ip, \"python.exe\")\\n                if os.path.exists(exe):\\n                    args = get_value(ip_key, \"ExecutableArguments\")\\n                    return exe, args\\n                else:\\n                    msg(key_path, \"exe does not exists {}\".format(exe))\\n    except OSError:\\n        msg(\"{}/{}\".format(key_path, \"InstallPath\"), \"missing\")\\n    return None, None\\n\\n\\ndef load_arch_data(hive_name, company, tag, tag_key, default_arch):\\n    arch_str = get_value(tag_key, \"SysArchitecture\")\\n    if arch_str is not None:\\n        key_path = \"{}/{}/{}/SysArchitecture\".format(hive_name, company, tag)\\n        try:\\n            return parse_arch(arch_str)\\n        except ValueError as sys_arch:\\n            msg(key_path, sys_arch)\\n    return default_arch\\n\\n\\ndef parse_arch(arch_str):\\n    if not isinstance(arch_str, six.string_types):\\n        raise ValueError(\"arch is not string\")\\n    match = re.match(r\"(\\\\d+)bit\", arch_str)\\n    if match:\\n        return int(next(iter(match.groups())))\\n    raise ValueError(\"invalid format {}\".format(arch_str))\\n\\n\\ndef load_version_data(hive_name, company, tag, tag_key):\\n    version_str = get_value(tag_key, \"SysVersion\")\\n    major, minor = None, None\\n    if version_str is not None:\\n        key_path = \"{}/{}/{}/SysVersion\".format(hive_name, company, tag)\\n        try:\\n            major, minor = parse_version(get_value(tag_key, \"SysVersion\"))\\n        except ValueError as sys_version:\\n            msg(key_path, sys_version)\\n    if major is None:\\n        key_path = \"{}/{}/{}\".format(hive_name, company, tag)\\n        try:\\n            major, minor = parse_version(tag)\\n        except ValueError as tag_version:\\n            msg(key_path, tag_version)\\n    return major, minor\\n\\n\\ndef parse_version(version_str):\\n    if not isinstance(version_str, six.string_types):\\n        raise ValueError(\"key is not string\")\\n    match = re.match(r\"(\\\\d+)\\\\.(\\\\d+).*\", version_str)\\n    if match:\\n        return tuple(int(i) for i in match.groups())\\n    raise ValueError(\"invalid format {}\".format(version_str))\\n\\n\\ndef msg(path, what):\\n    reporter.verbosity1(\"PEP-514 violation in Windows Registry at {} error: {}\".format(path, what))\\n\\n\\ndef _run():\\n    reporter.update_default_reporter(0, reporter.Verbosity.DEBUG)\\n    for spec in discover_pythons():\\n        print(repr(spec))\\n\\n\\nif __name__ == \"__main__\":\\n    _run()\\n'"}, {"func_args": {"source": "'\"\"\"This module handles collecting and persisting in json format a tox session\"\"\"\\nfrom .result import ResultLog\\n\\n__all__ = (\"ResultLog\",)\\n'"}, "return_value": "'\"\"\"This module handles collecting and persisting in json format a tox session\"\"\"\\nfrom .result import ResultLog\\n\\n__all__ = (\"ResultLog\",)\\n'"}, {"func_args": {"source": "'\"\"\"This module handles collecting and persisting in json format a tox session\"\"\"\\nfrom .result import ResultLog\\n\\n__all__ = (\"ResultLog\",)\\n'"}, "return_value": "'\"\"\"This module handles collecting and persisting in json format a tox session\"\"\"\\nfrom .result import ResultLog\\n\\n__all__ = (\"ResultLog\",)\\n'"}, {"func_args": {"source": "'from __future__ import absolute_import, unicode_literals\\n\\n\\nclass CommandLog(object):\\n    \"\"\"Report commands interacting with third party tools\"\"\"\\n\\n    def __init__(self, env_log, list):\\n        self.envlog = env_log\\n        self.list = list\\n\\n    def add_command(self, argv, output, retcode):\\n        data = {\"command\": argv, \"output\": output, \"retcode\": retcode}\\n        self.list.append(data)\\n        return data\\n'"}, "return_value": "'from __future__ import absolute_import, unicode_literals\\n\\n\\nclass CommandLog(object):\\n    \"\"\"Report commands interacting with third party tools\"\"\"\\n\\n    def __init__(self, env_log, list):\\n        self.envlog = env_log\\n        self.list = list\\n\\n    def add_command(self, argv, output, retcode):\\n        data = {\"command\": argv, \"output\": output, \"retcode\": retcode}\\n        self.list.append(data)\\n        return data\\n'"}, {"func_args": {"source": "'from __future__ import absolute_import, unicode_literals\\n\\n\\nclass CommandLog(object):\\n    \"\"\"Report commands interacting with third party tools\"\"\"\\n\\n    def __init__(self, env_log, list):\\n        self.envlog = env_log\\n        self.list = list\\n\\n    def add_command(self, argv, output, retcode):\\n        data = {\"command\": argv, \"output\": output, \"retcode\": retcode}\\n        self.list.append(data)\\n        return data\\n'"}, "return_value": "'from __future__ import absolute_import, unicode_literals\\n\\n\\nclass CommandLog(object):\\n    \"\"\"Report commands interacting with third party tools\"\"\"\\n\\n    def __init__(self, env_log, list):\\n        self.envlog = env_log\\n        self.list = list\\n\\n    def add_command(self, argv, output, retcode):\\n        data = {\"command\": argv, \"output\": output, \"retcode\": retcode}\\n        self.list.append(data)\\n        return data\\n'"}, {"func_args": {"source": "'from __future__ import absolute_import, unicode_literals\\n\\nfrom tox.interpreters.via_path import get_python_info\\n\\nfrom .command import CommandLog\\n\\n\\nclass EnvLog(object):\\n    \"\"\"Report the status of a tox environment\"\"\"\\n\\n    def __init__(self, result_log, name, dict):\\n        self.reportlog = result_log\\n        self.name = name\\n        self.dict = dict\\n\\n    def set_python_info(self, python_executable):\\n        answer = get_python_info(str(python_executable))\\n        answer[\"executable\"] = python_executable\\n        self.dict[\"python\"] = answer\\n\\n    def get_commandlog(self, name):\\n        \"\"\"get the command log for a given group name\"\"\"\\n        data = self.dict.setdefault(name, [])\\n        return CommandLog(self, data)\\n\\n    def set_installed(self, packages):\\n        self.dict[\"installed_packages\"] = packages\\n\\n    def set_header(self, installpkg):\\n        \"\"\"\\n        :param py.path.local installpkg: Path to the package.\\n        \"\"\"\\n        self.dict[\"installpkg\"] = {\\n            \"sha256\": installpkg.computehash(\"sha256\"),\\n            \"basename\": installpkg.basename,\\n        }\\n'"}, "return_value": "'from __future__ import absolute_import, unicode_literals\\n\\nfrom tox.interpreters.via_path import get_python_info\\n\\nfrom .command import CommandLog\\n\\n\\nclass EnvLog(object):\\n    \"\"\"Report the status of a tox environment\"\"\"\\n\\n    def __init__(self, result_log, name, dict):\\n        self.reportlog = result_log\\n        self.name = name\\n        self.dict = dict\\n\\n    def set_python_info(self, python_executable):\\n        answer = get_python_info(str(python_executable))\\n        answer[\"executable\"] = python_executable\\n        self.dict[\"python\"] = answer\\n\\n    def get_commandlog(self, name):\\n        \"\"\"get the command log for a given group name\"\"\"\\n        data = self.dict.setdefault(name, [])\\n        return CommandLog(self, data)\\n\\n    def set_installed(self, packages):\\n        self.dict[\"installed_packages\"] = packages\\n\\n    def set_header(self, installpkg):\\n        \"\"\"\\n        :param py.path.local installpkg: Path to the package.\\n        \"\"\"\\n        self.dict[\"installpkg\"] = {\\n            \"sha256\": installpkg.computehash(\"sha256\"),\\n            \"basename\": installpkg.basename,\\n        }\\n'"}, {"func_args": {"source": "'from __future__ import absolute_import, unicode_literals\\n\\nfrom tox.interpreters.via_path import get_python_info\\n\\nfrom .command import CommandLog\\n\\n\\nclass EnvLog(object):\\n    \"\"\"Report the status of a tox environment\"\"\"\\n\\n    def __init__(self, result_log, name, dict):\\n        self.reportlog = result_log\\n        self.name = name\\n        self.dict = dict\\n\\n    def set_python_info(self, python_executable):\\n        answer = get_python_info(str(python_executable))\\n        answer[\"executable\"] = python_executable\\n        self.dict[\"python\"] = answer\\n\\n    def get_commandlog(self, name):\\n        \"\"\"get the command log for a given group name\"\"\"\\n        data = self.dict.setdefault(name, [])\\n        return CommandLog(self, data)\\n\\n    def set_installed(self, packages):\\n        self.dict[\"installed_packages\"] = packages\\n\\n    def set_header(self, installpkg):\\n        \"\"\"\\n        :param py.path.local installpkg: Path to the package.\\n        \"\"\"\\n        self.dict[\"installpkg\"] = {\\n            \"sha256\": installpkg.computehash(\"sha256\"),\\n            \"basename\": installpkg.basename,\\n        }\\n'"}, "return_value": "'from __future__ import absolute_import, unicode_literals\\n\\nfrom tox.interpreters.via_path import get_python_info\\n\\nfrom .command import CommandLog\\n\\n\\nclass EnvLog(object):\\n    \"\"\"Report the status of a tox environment\"\"\"\\n\\n    def __init__(self, result_log, name, dict):\\n        self.reportlog = result_log\\n        self.name = name\\n        self.dict = dict\\n\\n    def set_python_info(self, python_executable):\\n        answer = get_python_info(str(python_executable))\\n        answer[\"executable\"] = python_executable\\n        self.dict[\"python\"] = answer\\n\\n    def get_commandlog(self, name):\\n        \"\"\"get the command log for a given group name\"\"\"\\n        data = self.dict.setdefault(name, [])\\n        return CommandLog(self, data)\\n\\n    def set_installed(self, packages):\\n        self.dict[\"installed_packages\"] = packages\\n\\n    def set_header(self, installpkg):\\n        \"\"\"\\n        :param py.path.local installpkg: Path to the package.\\n        \"\"\"\\n        self.dict[\"installpkg\"] = {\\n            \"sha256\": installpkg.computehash(\"sha256\"),\\n            \"basename\": installpkg.basename,\\n        }\\n'"}, {"func_args": {"source": "'\"\"\"Generate json report of a run\"\"\"\\nfrom __future__ import absolute_import, unicode_literals\\n\\nimport json\\nimport os\\nimport socket\\nimport sys\\n\\nfrom tox.version import __version__\\n\\nfrom .command import CommandLog\\nfrom .env import EnvLog\\n\\n\\nclass ResultLog(object):\\n    \"\"\"The result of a tox session\"\"\"\\n\\n    def __init__(self):\\n        command_log = []\\n        self.command_log = CommandLog(None, command_log)\\n        self.dict = {\\n            \"reportversion\": \"1\",\\n            \"toxversion\": __version__,\\n            \"platform\": sys.platform,\\n            \"host\": os.getenv(str(\"HOSTNAME\")) or socket.getfqdn(),\\n            \"commands\": command_log,\\n        }\\n\\n    @classmethod\\n    def from_json(cls, data):\\n        result = cls()\\n        result.dict = json.loads(data)\\n        result.command_log = CommandLog(None, result.dict[\"commands\"])\\n        return result\\n\\n    def get_envlog(self, name):\\n        \"\"\"Return the env log of an environment (create on first call)\"\"\"\\n        test_envs = self.dict.setdefault(\"testenvs\", {})\\n        env_data = test_envs.setdefault(name, {})\\n        return EnvLog(self, name, env_data)\\n\\n    def dumps_json(self):\\n        \"\"\"Return the json dump of the current state, indented\"\"\"\\n        return json.dumps(self.dict, indent=2)\\n'"}, "return_value": "'\"\"\"Generate json report of a run\"\"\"\\nfrom __future__ import absolute_import, unicode_literals\\n\\nimport json\\nimport os\\nimport socket\\nimport sys\\n\\nfrom tox.version import __version__\\n\\nfrom .command import CommandLog\\nfrom .env import EnvLog\\n\\n\\nclass ResultLog(object):\\n    \"\"\"The result of a tox session\"\"\"\\n\\n    def __init__(self):\\n        command_log = []\\n        self.command_log = CommandLog(None, command_log)\\n        self.dict = {\\n            \"reportversion\": \"1\",\\n            \"toxversion\": __version__,\\n            \"platform\": sys.platform,\\n            \"host\": os.getenv(str(\"HOSTNAME\")) or socket.getfqdn(),\\n            \"commands\": command_log,\\n        }\\n\\n    @classmethod\\n    def from_json(cls, data):\\n        result = cls()\\n        result.dict = json.loads(data)\\n        result.command_log = CommandLog(None, result.dict[\"commands\"])\\n        return result\\n\\n    def get_envlog(self, name):\\n        \"\"\"Return the env log of an environment (create on first call)\"\"\"\\n        test_envs = self.dict.setdefault(\"testenvs\", {})\\n        env_data = test_envs.setdefault(name, {})\\n        return EnvLog(self, name, env_data)\\n\\n    def dumps_json(self):\\n        \"\"\"Return the json dump of the current state, indented\"\"\"\\n        return json.dumps(self.dict, indent=2)\\n'"}, {"func_args": {"source": "'\"\"\"Generate json report of a run\"\"\"\\nfrom __future__ import absolute_import, unicode_literals\\n\\nimport json\\nimport os\\nimport socket\\nimport sys\\n\\nfrom tox.version import __version__\\n\\nfrom .command import CommandLog\\nfrom .env import EnvLog\\n\\n\\nclass ResultLog(object):\\n    \"\"\"The result of a tox session\"\"\"\\n\\n    def __init__(self):\\n        command_log = []\\n        self.command_log = CommandLog(None, command_log)\\n        self.dict = {\\n            \"reportversion\": \"1\",\\n            \"toxversion\": __version__,\\n            \"platform\": sys.platform,\\n            \"host\": os.getenv(str(\"HOSTNAME\")) or socket.getfqdn(),\\n            \"commands\": command_log,\\n        }\\n\\n    @classmethod\\n    def from_json(cls, data):\\n        result = cls()\\n        result.dict = json.loads(data)\\n        result.command_log = CommandLog(None, result.dict[\"commands\"])\\n        return result\\n\\n    def get_envlog(self, name):\\n        \"\"\"Return the env log of an environment (create on first call)\"\"\"\\n        test_envs = self.dict.setdefault(\"testenvs\", {})\\n        env_data = test_envs.setdefault(name, {})\\n        return EnvLog(self, name, env_data)\\n\\n    def dumps_json(self):\\n        \"\"\"Return the json dump of the current state, indented\"\"\"\\n        return json.dumps(self.dict, indent=2)\\n'"}, "return_value": "'\"\"\"Generate json report of a run\"\"\"\\nfrom __future__ import absolute_import, unicode_literals\\n\\nimport json\\nimport os\\nimport socket\\nimport sys\\n\\nfrom tox.version import __version__\\n\\nfrom .command import CommandLog\\nfrom .env import EnvLog\\n\\n\\nclass ResultLog(object):\\n    \"\"\"The result of a tox session\"\"\"\\n\\n    def __init__(self):\\n        command_log = []\\n        self.command_log = CommandLog(None, command_log)\\n        self.dict = {\\n            \"reportversion\": \"1\",\\n            \"toxversion\": __version__,\\n            \"platform\": sys.platform,\\n            \"host\": os.getenv(str(\"HOSTNAME\")) or socket.getfqdn(),\\n            \"commands\": command_log,\\n        }\\n\\n    @classmethod\\n    def from_json(cls, data):\\n        result = cls()\\n        result.dict = json.loads(data)\\n        result.command_log = CommandLog(None, result.dict[\"commands\"])\\n        return result\\n\\n    def get_envlog(self, name):\\n        \"\"\"Return the env log of an environment (create on first call)\"\"\"\\n        test_envs = self.dict.setdefault(\"testenvs\", {})\\n        env_data = test_envs.setdefault(name, {})\\n        return EnvLog(self, name, env_data)\\n\\n    def dumps_json(self):\\n        \"\"\"Return the json dump of the current state, indented\"\"\"\\n        return json.dumps(self.dict, indent=2)\\n'"}, {"func_args": {"source": "'import py\\n\\nimport tox\\nfrom tox.reporter import error, info, verbosity0, verbosity2, warning\\nfrom tox.util.lock import hold_lock\\n\\nfrom .builder import build_package\\nfrom .local import resolve_package\\nfrom .view import create_session_view\\n\\n\\n@tox.hookimpl\\ndef tox_package(session, venv):\\n    \"\"\"Build an sdist at first call return that for all calls\"\"\"\\n    if not hasattr(session, \"package\"):\\n        session.package, session.dist = get_package(session)\\n    return session.package\\n\\n\\ndef get_package(session):\\n    \"\"\"Perform the package operation\"\"\"\\n    config = session.config\\n    if config.skipsdist:\\n        info(\"skipping sdist step\")\\n        return None\\n    lock_file = session.config.toxworkdir.join(\"{}.lock\".format(session.config.isolated_build_env))\\n\\n    with hold_lock(lock_file, verbosity0):\\n        package = acquire_package(config, session)\\n        session_package = create_session_view(package, config.temp_dir)\\n        return session_package, package\\n\\n\\ndef acquire_package(config, session):\\n    \"\"\"acquire a source distribution (either by loading a local file or triggering a build)\"\"\"\\n    if not config.option.sdistonly and (config.sdistsrc or config.option.installpkg):\\n        path = get_local_package(config)\\n    else:\\n        try:\\n            path = build_package(config, session)\\n        except tox.exception.InvocationError as exception:\\n            error(\"FAIL could not package project - v = {!r}\".format(exception))\\n            return None\\n        sdist_file = config.distshare.join(path.basename)\\n        if sdist_file != path:\\n            info(\"copying new sdistfile to {!r}\".format(str(sdist_file)))\\n            try:\\n                sdist_file.dirpath().ensure(dir=1)\\n            except py.error.Error:\\n                warning(\"could not copy distfile to {}\".format(sdist_file.dirpath()))\\n            else:\\n                path.copy(sdist_file)\\n    return path\\n\\n\\ndef get_local_package(config):\\n    path = config.option.installpkg\\n    if not path:\\n        path = config.sdistsrc\\n    py_path = py.path.local(resolve_package(path))\\n    info(\"using package {!r}, skipping \\'sdist\\' activity \".format(str(py_path)))\\n    return py_path\\n\\n\\n@tox.hookimpl\\ndef tox_cleanup(session):\\n    for tox_env in session.venv_dict.values():\\n        if hasattr(tox_env, \"package\") and isinstance(tox_env.package, py.path.local):\\n            package = tox_env.package\\n            if package.exists():\\n                verbosity2(\"cleanup {}\".format(package))\\n                package.remove()\\n                py.path.local(package.dirname).remove(ignore_errors=True)\\n'"}, "return_value": "'import py\\n\\nimport tox\\nfrom tox.reporter import error, info, verbosity0, verbosity2, warning\\nfrom tox.util.lock import hold_lock\\n\\nfrom .builder import build_package\\nfrom .local import resolve_package\\nfrom .view import create_session_view\\n\\n\\n@tox.hookimpl\\ndef tox_package(session, venv):\\n    \"\"\"Build an sdist at first call return that for all calls\"\"\"\\n    if not hasattr(session, \"package\"):\\n        session.package, session.dist = get_package(session)\\n    return session.package\\n\\n\\ndef get_package(session):\\n    \"\"\"Perform the package operation\"\"\"\\n    config = session.config\\n    if config.skipsdist:\\n        info(\"skipping sdist step\")\\n        return None\\n    lock_file = session.config.toxworkdir.join(\"{}.lock\".format(session.config.isolated_build_env))\\n\\n    with hold_lock(lock_file, verbosity0):\\n        package = acquire_package(config, session)\\n        session_package = create_session_view(package, config.temp_dir)\\n        return session_package, package\\n\\n\\ndef acquire_package(config, session):\\n    \"\"\"acquire a source distribution (either by loading a local file or triggering a build)\"\"\"\\n    if not config.option.sdistonly and (config.sdistsrc or config.option.installpkg):\\n        path = get_local_package(config)\\n    else:\\n        try:\\n            path = build_package(config, session)\\n        except tox.exception.InvocationError as exception:\\n            error(\"FAIL could not package project - v = {!r}\".format(exception))\\n            return None\\n        sdist_file = config.distshare.join(path.basename)\\n        if sdist_file != path:\\n            info(\"copying new sdistfile to {!r}\".format(str(sdist_file)))\\n            try:\\n                sdist_file.dirpath().ensure(dir=1)\\n            except py.error.Error:\\n                warning(\"could not copy distfile to {}\".format(sdist_file.dirpath()))\\n            else:\\n                path.copy(sdist_file)\\n    return path\\n\\n\\ndef get_local_package(config):\\n    path = config.option.installpkg\\n    if not path:\\n        path = config.sdistsrc\\n    py_path = py.path.local(resolve_package(path))\\n    info(\"using package {!r}, skipping \\'sdist\\' activity \".format(str(py_path)))\\n    return py_path\\n\\n\\n@tox.hookimpl\\ndef tox_cleanup(session):\\n    for tox_env in session.venv_dict.values():\\n        if hasattr(tox_env, \"package\") and isinstance(tox_env.package, py.path.local):\\n            package = tox_env.package\\n            if package.exists():\\n                verbosity2(\"cleanup {}\".format(package))\\n                package.remove()\\n                py.path.local(package.dirname).remove(ignore_errors=True)\\n'"}, {"func_args": {"source": "'import py\\n\\nimport tox\\nfrom tox.reporter import error, info, verbosity0, verbosity2, warning\\nfrom tox.util.lock import hold_lock\\n\\nfrom .builder import build_package\\nfrom .local import resolve_package\\nfrom .view import create_session_view\\n\\n\\n@tox.hookimpl\\ndef tox_package(session, venv):\\n    \"\"\"Build an sdist at first call return that for all calls\"\"\"\\n    if not hasattr(session, \"package\"):\\n        session.package, session.dist = get_package(session)\\n    return session.package\\n\\n\\ndef get_package(session):\\n    \"\"\"Perform the package operation\"\"\"\\n    config = session.config\\n    if config.skipsdist:\\n        info(\"skipping sdist step\")\\n        return None\\n    lock_file = session.config.toxworkdir.join(\"{}.lock\".format(session.config.isolated_build_env))\\n\\n    with hold_lock(lock_file, verbosity0):\\n        package = acquire_package(config, session)\\n        session_package = create_session_view(package, config.temp_dir)\\n        return session_package, package\\n\\n\\ndef acquire_package(config, session):\\n    \"\"\"acquire a source distribution (either by loading a local file or triggering a build)\"\"\"\\n    if not config.option.sdistonly and (config.sdistsrc or config.option.installpkg):\\n        path = get_local_package(config)\\n    else:\\n        try:\\n            path = build_package(config, session)\\n        except tox.exception.InvocationError as exception:\\n            error(\"FAIL could not package project - v = {!r}\".format(exception))\\n            return None\\n        sdist_file = config.distshare.join(path.basename)\\n        if sdist_file != path:\\n            info(\"copying new sdistfile to {!r}\".format(str(sdist_file)))\\n            try:\\n                sdist_file.dirpath().ensure(dir=1)\\n            except py.error.Error:\\n                warning(\"could not copy distfile to {}\".format(sdist_file.dirpath()))\\n            else:\\n                path.copy(sdist_file)\\n    return path\\n\\n\\ndef get_local_package(config):\\n    path = config.option.installpkg\\n    if not path:\\n        path = config.sdistsrc\\n    py_path = py.path.local(resolve_package(path))\\n    info(\"using package {!r}, skipping \\'sdist\\' activity \".format(str(py_path)))\\n    return py_path\\n\\n\\n@tox.hookimpl\\ndef tox_cleanup(session):\\n    for tox_env in session.venv_dict.values():\\n        if hasattr(tox_env, \"package\") and isinstance(tox_env.package, py.path.local):\\n            package = tox_env.package\\n            if package.exists():\\n                verbosity2(\"cleanup {}\".format(package))\\n                package.remove()\\n                py.path.local(package.dirname).remove(ignore_errors=True)\\n'"}, "return_value": "'import py\\n\\nimport tox\\nfrom tox.reporter import error, info, verbosity0, verbosity2, warning\\nfrom tox.util.lock import hold_lock\\n\\nfrom .builder import build_package\\nfrom .local import resolve_package\\nfrom .view import create_session_view\\n\\n\\n@tox.hookimpl\\ndef tox_package(session, venv):\\n    \"\"\"Build an sdist at first call return that for all calls\"\"\"\\n    if not hasattr(session, \"package\"):\\n        session.package, session.dist = get_package(session)\\n    return session.package\\n\\n\\ndef get_package(session):\\n    \"\"\"Perform the package operation\"\"\"\\n    config = session.config\\n    if config.skipsdist:\\n        info(\"skipping sdist step\")\\n        return None\\n    lock_file = session.config.toxworkdir.join(\"{}.lock\".format(session.config.isolated_build_env))\\n\\n    with hold_lock(lock_file, verbosity0):\\n        package = acquire_package(config, session)\\n        session_package = create_session_view(package, config.temp_dir)\\n        return session_package, package\\n\\n\\ndef acquire_package(config, session):\\n    \"\"\"acquire a source distribution (either by loading a local file or triggering a build)\"\"\"\\n    if not config.option.sdistonly and (config.sdistsrc or config.option.installpkg):\\n        path = get_local_package(config)\\n    else:\\n        try:\\n            path = build_package(config, session)\\n        except tox.exception.InvocationError as exception:\\n            error(\"FAIL could not package project - v = {!r}\".format(exception))\\n            return None\\n        sdist_file = config.distshare.join(path.basename)\\n        if sdist_file != path:\\n            info(\"copying new sdistfile to {!r}\".format(str(sdist_file)))\\n            try:\\n                sdist_file.dirpath().ensure(dir=1)\\n            except py.error.Error:\\n                warning(\"could not copy distfile to {}\".format(sdist_file.dirpath()))\\n            else:\\n                path.copy(sdist_file)\\n    return path\\n\\n\\ndef get_local_package(config):\\n    path = config.option.installpkg\\n    if not path:\\n        path = config.sdistsrc\\n    py_path = py.path.local(resolve_package(path))\\n    info(\"using package {!r}, skipping \\'sdist\\' activity \".format(str(py_path)))\\n    return py_path\\n\\n\\n@tox.hookimpl\\ndef tox_cleanup(session):\\n    for tox_env in session.venv_dict.values():\\n        if hasattr(tox_env, \"package\") and isinstance(tox_env.package, py.path.local):\\n            package = tox_env.package\\n            if package.exists():\\n                verbosity2(\"cleanup {}\".format(package))\\n                package.remove()\\n                py.path.local(package.dirname).remove(ignore_errors=True)\\n'"}, {"func_args": {"source": "'from .isolated import build\\nfrom .legacy import make_sdist\\n\\n\\ndef build_package(config, session):\\n    if not config.isolated_build:\\n        return make_sdist(config, session)\\n    else:\\n        return build(config, session)\\n'"}, "return_value": "'from .isolated import build\\nfrom .legacy import make_sdist\\n\\n\\ndef build_package(config, session):\\n    if not config.isolated_build:\\n        return make_sdist(config, session)\\n    else:\\n        return build(config, session)\\n'"}, {"func_args": {"source": "'from .isolated import build\\nfrom .legacy import make_sdist\\n\\n\\ndef build_package(config, session):\\n    if not config.isolated_build:\\n        return make_sdist(config, session)\\n    else:\\n        return build(config, session)\\n'"}, "return_value": "'from .isolated import build\\nfrom .legacy import make_sdist\\n\\n\\ndef build_package(config, session):\\n    if not config.isolated_build:\\n        return make_sdist(config, session)\\n    else:\\n        return build(config, session)\\n'"}, {"func_args": {"source": "'from __future__ import unicode_literals\\n\\nimport json\\nimport os\\nfrom collections import namedtuple\\n\\nimport six\\nfrom packaging.requirements import Requirement\\nfrom packaging.utils import canonicalize_name\\n\\nfrom tox import reporter\\nfrom tox.config import DepConfig, get_py_project_toml\\nfrom tox.constants import BUILD_ISOLATED, BUILD_REQUIRE_SCRIPT\\n\\nBuildInfo = namedtuple(\\n    \"BuildInfo\",\\n    [\"requires\", \"backend_module\", \"backend_object\", \"backend_paths\"],\\n)\\n\\n\\ndef build(config, session):\\n    build_info = get_build_info(config.setupdir)\\n    package_venv = session.getvenv(config.isolated_build_env)\\n    package_venv.envconfig.deps_matches_subset = True\\n\\n    # we allow user specified dependencies so the users can write extensions to\\n    # install additional type of dependencies (e.g. binary)\\n    user_specified_deps = package_venv.envconfig.deps\\n    package_venv.envconfig.deps = [DepConfig(r, None) for r in build_info.requires]\\n    package_venv.envconfig.deps.extend(user_specified_deps)\\n\\n    if package_venv.setupenv():\\n        package_venv.finishvenv()\\n    if isinstance(package_venv.status, Exception):\\n        raise package_venv.status\\n\\n    build_requires = get_build_requires(build_info, package_venv, config.setupdir)\\n    # we need to filter out requirements already specified in pyproject.toml or user deps\\n    base_build_deps = {\\n        canonicalize_name(Requirement(r.name).name) for r in package_venv.envconfig.deps\\n    }\\n    build_requires_dep = [\\n        DepConfig(r, None)\\n        for r in build_requires\\n        if canonicalize_name(Requirement(r).name) not in base_build_deps\\n    ]\\n    if build_requires_dep:\\n        with package_venv.new_action(\"build_requires\", package_venv.envconfig.envdir) as action:\\n            package_venv.run_install_command(packages=build_requires_dep, action=action)\\n        package_venv.finishvenv()\\n    return perform_isolated_build(build_info, package_venv, config.distdir, config.setupdir)\\n\\n\\ndef get_build_info(folder):\\n    toml_file = folder.join(\"pyproject.toml\")\\n\\n    # as per https://www.python.org/dev/peps/pep-0517/\\n\\n    def abort(message):\\n        reporter.error(\"{} inside {}\".format(message, toml_file))\\n        raise SystemExit(1)\\n\\n    if not toml_file.exists():\\n        reporter.error(\"missing {}\".format(toml_file))\\n        raise SystemExit(1)\\n\\n    config_data = get_py_project_toml(toml_file)\\n\\n    if \"build-system\" not in config_data:\\n        abort(\"build-system section missing\")\\n\\n    build_system = config_data[\"build-system\"]\\n\\n    if \"requires\" not in build_system:\\n        abort(\"missing requires key at build-system section\")\\n    if \"build-backend\" not in build_system:\\n        abort(\"missing build-backend key at build-system section\")\\n\\n    requires = build_system[\"requires\"]\\n    if not isinstance(requires, list) or not all(isinstance(i, six.text_type) for i in requires):\\n        abort(\"requires key at build-system section must be a list of string\")\\n\\n    backend = build_system[\"build-backend\"]\\n    if not isinstance(backend, six.text_type):\\n        abort(\"build-backend key at build-system section must be a string\")\\n\\n    args = backend.split(\":\")\\n    module = args[0]\\n    obj = args[1] if len(args) > 1 else \"\"\\n\\n    backend_paths = build_system.get(\"backend-path\", [])\\n    if not isinstance(backend_paths, list):\\n        abort(\"backend-path key at build-system section must be a list, if specified\")\\n    backend_paths = [folder.join(p) for p in backend_paths]\\n\\n    normalized_folder = os.path.normcase(str(folder.realpath()))\\n    normalized_paths = (os.path.normcase(str(path.realpath())) for path in backend_paths)\\n\\n    if not all(\\n        os.path.commonprefix((normalized_folder, path)) == normalized_folder\\n        for path in normalized_paths\\n    ):\\n        abort(\"backend-path must exist in the project root\")\\n\\n    return BuildInfo(requires, module, obj, backend_paths)\\n\\n\\ndef perform_isolated_build(build_info, package_venv, dist_dir, setup_dir):\\n    with package_venv.new_action(\\n        \"perform-isolated-build\",\\n        package_venv.envconfig.envdir,\\n    ) as action:\\n        # need to start with an empty (but existing) source distribution folder\\n        if dist_dir.exists():\\n            dist_dir.remove(rec=1, ignore_errors=True)\\n        dist_dir.ensure_dir()\\n\\n        result = package_venv._pcall(\\n            [\\n                package_venv.envconfig.envpython,\\n                BUILD_ISOLATED,\\n                str(dist_dir),\\n                build_info.backend_module,\\n                build_info.backend_object,\\n                os.path.pathsep.join(str(p) for p in build_info.backend_paths),\\n            ],\\n            returnout=True,\\n            action=action,\\n            cwd=setup_dir,\\n        )\\n        reporter.verbosity2(result)\\n        return dist_dir.join(result.split(\"\\\\n\")[-2])\\n\\n\\ndef get_build_requires(build_info, package_venv, setup_dir):\\n    with package_venv.new_action(\"get-build-requires\", package_venv.envconfig.envdir) as action:\\n        result = package_venv._pcall(\\n            [\\n                package_venv.envconfig.envpython,\\n                BUILD_REQUIRE_SCRIPT,\\n                build_info.backend_module,\\n                build_info.backend_object,\\n                os.path.pathsep.join(str(p) for p in build_info.backend_paths),\\n            ],\\n            returnout=True,\\n            action=action,\\n            cwd=setup_dir,\\n        )\\n        return json.loads(result.split(\"\\\\n\")[-2])\\n'"}, "return_value": "'from __future__ import unicode_literals\\n\\nimport json\\nimport os\\nfrom collections import namedtuple\\n\\nimport six\\nfrom packaging.requirements import Requirement\\nfrom packaging.utils import canonicalize_name\\n\\nfrom tox import reporter\\nfrom tox.config import DepConfig, get_py_project_toml\\nfrom tox.constants import BUILD_ISOLATED, BUILD_REQUIRE_SCRIPT\\n\\nBuildInfo = namedtuple(\\n    \"BuildInfo\",\\n    [\"requires\", \"backend_module\", \"backend_object\", \"backend_paths\"],\\n)\\n\\n\\ndef build(config, session):\\n    build_info = get_build_info(config.setupdir)\\n    package_venv = session.getvenv(config.isolated_build_env)\\n    package_venv.envconfig.deps_matches_subset = True\\n\\n    # we allow user specified dependencies so the users can write extensions to\\n    # install additional type of dependencies (e.g. binary)\\n    user_specified_deps = package_venv.envconfig.deps\\n    package_venv.envconfig.deps = [DepConfig(r, None) for r in build_info.requires]\\n    package_venv.envconfig.deps.extend(user_specified_deps)\\n\\n    if package_venv.setupenv():\\n        package_venv.finishvenv()\\n    if isinstance(package_venv.status, Exception):\\n        raise package_venv.status\\n\\n    build_requires = get_build_requires(build_info, package_venv, config.setupdir)\\n    # we need to filter out requirements already specified in pyproject.toml or user deps\\n    base_build_deps = {\\n        canonicalize_name(Requirement(r.name).name) for r in package_venv.envconfig.deps\\n    }\\n    build_requires_dep = [\\n        DepConfig(r, None)\\n        for r in build_requires\\n        if canonicalize_name(Requirement(r).name) not in base_build_deps\\n    ]\\n    if build_requires_dep:\\n        with package_venv.new_action(\"build_requires\", package_venv.envconfig.envdir) as action:\\n            package_venv.run_install_command(packages=build_requires_dep, action=action)\\n        package_venv.finishvenv()\\n    return perform_isolated_build(build_info, package_venv, config.distdir, config.setupdir)\\n\\n\\ndef get_build_info(folder):\\n    toml_file = folder.join(\"pyproject.toml\")\\n\\n    # as per https://www.python.org/dev/peps/pep-0517/\\n\\n    def abort(message):\\n        reporter.error(\"{} inside {}\".format(message, toml_file))\\n        raise SystemExit(1)\\n\\n    if not toml_file.exists():\\n        reporter.error(\"missing {}\".format(toml_file))\\n        raise SystemExit(1)\\n\\n    config_data = get_py_project_toml(toml_file)\\n\\n    if \"build-system\" not in config_data:\\n        abort(\"build-system section missing\")\\n\\n    build_system = config_data[\"build-system\"]\\n\\n    if \"requires\" not in build_system:\\n        abort(\"missing requires key at build-system section\")\\n    if \"build-backend\" not in build_system:\\n        abort(\"missing build-backend key at build-system section\")\\n\\n    requires = build_system[\"requires\"]\\n    if not isinstance(requires, list) or not all(isinstance(i, six.text_type) for i in requires):\\n        abort(\"requires key at build-system section must be a list of string\")\\n\\n    backend = build_system[\"build-backend\"]\\n    if not isinstance(backend, six.text_type):\\n        abort(\"build-backend key at build-system section must be a string\")\\n\\n    args = backend.split(\":\")\\n    module = args[0]\\n    obj = args[1] if len(args) > 1 else \"\"\\n\\n    backend_paths = build_system.get(\"backend-path\", [])\\n    if not isinstance(backend_paths, list):\\n        abort(\"backend-path key at build-system section must be a list, if specified\")\\n    backend_paths = [folder.join(p) for p in backend_paths]\\n\\n    normalized_folder = os.path.normcase(str(folder.realpath()))\\n    normalized_paths = (os.path.normcase(str(path.realpath())) for path in backend_paths)\\n\\n    if not all(\\n        os.path.commonprefix((normalized_folder, path)) == normalized_folder\\n        for path in normalized_paths\\n    ):\\n        abort(\"backend-path must exist in the project root\")\\n\\n    return BuildInfo(requires, module, obj, backend_paths)\\n\\n\\ndef perform_isolated_build(build_info, package_venv, dist_dir, setup_dir):\\n    with package_venv.new_action(\\n        \"perform-isolated-build\",\\n        package_venv.envconfig.envdir,\\n    ) as action:\\n        # need to start with an empty (but existing) source distribution folder\\n        if dist_dir.exists():\\n            dist_dir.remove(rec=1, ignore_errors=True)\\n        dist_dir.ensure_dir()\\n\\n        result = package_venv._pcall(\\n            [\\n                package_venv.envconfig.envpython,\\n                BUILD_ISOLATED,\\n                str(dist_dir),\\n                build_info.backend_module,\\n                build_info.backend_object,\\n                os.path.pathsep.join(str(p) for p in build_info.backend_paths),\\n            ],\\n            returnout=True,\\n            action=action,\\n            cwd=setup_dir,\\n        )\\n        reporter.verbosity2(result)\\n        return dist_dir.join(result.split(\"\\\\n\")[-2])\\n\\n\\ndef get_build_requires(build_info, package_venv, setup_dir):\\n    with package_venv.new_action(\"get-build-requires\", package_venv.envconfig.envdir) as action:\\n        result = package_venv._pcall(\\n            [\\n                package_venv.envconfig.envpython,\\n                BUILD_REQUIRE_SCRIPT,\\n                build_info.backend_module,\\n                build_info.backend_object,\\n                os.path.pathsep.join(str(p) for p in build_info.backend_paths),\\n            ],\\n            returnout=True,\\n            action=action,\\n            cwd=setup_dir,\\n        )\\n        return json.loads(result.split(\"\\\\n\")[-2])\\n'"}, {"func_args": {"source": "'from __future__ import unicode_literals\\n\\nimport json\\nimport os\\nfrom collections import namedtuple\\n\\nimport six\\nfrom packaging.requirements import Requirement\\nfrom packaging.utils import canonicalize_name\\n\\nfrom tox import reporter\\nfrom tox.config import DepConfig, get_py_project_toml\\nfrom tox.constants import BUILD_ISOLATED, BUILD_REQUIRE_SCRIPT\\n\\nBuildInfo = namedtuple(\\n    \"BuildInfo\",\\n    [\"requires\", \"backend_module\", \"backend_object\", \"backend_paths\"],\\n)\\n\\n\\ndef build(config, session):\\n    build_info = get_build_info(config.setupdir)\\n    package_venv = session.getvenv(config.isolated_build_env)\\n    package_venv.envconfig.deps_matches_subset = True\\n\\n    # we allow user specified dependencies so the users can write extensions to\\n    # install additional type of dependencies (e.g. binary)\\n    user_specified_deps = package_venv.envconfig.deps\\n    package_venv.envconfig.deps = [DepConfig(r, None) for r in build_info.requires]\\n    package_venv.envconfig.deps.extend(user_specified_deps)\\n\\n    if package_venv.setupenv():\\n        package_venv.finishvenv()\\n    if isinstance(package_venv.status, Exception):\\n        raise package_venv.status\\n\\n    build_requires = get_build_requires(build_info, package_venv, config.setupdir)\\n    # we need to filter out requirements already specified in pyproject.toml or user deps\\n    base_build_deps = {\\n        canonicalize_name(Requirement(r.name).name) for r in package_venv.envconfig.deps\\n    }\\n    build_requires_dep = [\\n        DepConfig(r, None)\\n        for r in build_requires\\n        if canonicalize_name(Requirement(r).name) not in base_build_deps\\n    ]\\n    if build_requires_dep:\\n        with package_venv.new_action(\"build_requires\", package_venv.envconfig.envdir) as action:\\n            package_venv.run_install_command(packages=build_requires_dep, action=action)\\n        package_venv.finishvenv()\\n    return perform_isolated_build(build_info, package_venv, config.distdir, config.setupdir)\\n\\n\\ndef get_build_info(folder):\\n    toml_file = folder.join(\"pyproject.toml\")\\n\\n    # as per https://www.python.org/dev/peps/pep-0517/\\n\\n    def abort(message):\\n        reporter.error(\"{} inside {}\".format(message, toml_file))\\n        raise SystemExit(1)\\n\\n    if not toml_file.exists():\\n        reporter.error(\"missing {}\".format(toml_file))\\n        raise SystemExit(1)\\n\\n    config_data = get_py_project_toml(toml_file)\\n\\n    if \"build-system\" not in config_data:\\n        abort(\"build-system section missing\")\\n\\n    build_system = config_data[\"build-system\"]\\n\\n    if \"requires\" not in build_system:\\n        abort(\"missing requires key at build-system section\")\\n    if \"build-backend\" not in build_system:\\n        abort(\"missing build-backend key at build-system section\")\\n\\n    requires = build_system[\"requires\"]\\n    if not isinstance(requires, list) or not all(isinstance(i, six.text_type) for i in requires):\\n        abort(\"requires key at build-system section must be a list of string\")\\n\\n    backend = build_system[\"build-backend\"]\\n    if not isinstance(backend, six.text_type):\\n        abort(\"build-backend key at build-system section must be a string\")\\n\\n    args = backend.split(\":\")\\n    module = args[0]\\n    obj = args[1] if len(args) > 1 else \"\"\\n\\n    backend_paths = build_system.get(\"backend-path\", [])\\n    if not isinstance(backend_paths, list):\\n        abort(\"backend-path key at build-system section must be a list, if specified\")\\n    backend_paths = [folder.join(p) for p in backend_paths]\\n\\n    normalized_folder = os.path.normcase(str(folder.realpath()))\\n    normalized_paths = (os.path.normcase(str(path.realpath())) for path in backend_paths)\\n\\n    if not all(\\n        os.path.commonprefix((normalized_folder, path)) == normalized_folder\\n        for path in normalized_paths\\n    ):\\n        abort(\"backend-path must exist in the project root\")\\n\\n    return BuildInfo(requires, module, obj, backend_paths)\\n\\n\\ndef perform_isolated_build(build_info, package_venv, dist_dir, setup_dir):\\n    with package_venv.new_action(\\n        \"perform-isolated-build\",\\n        package_venv.envconfig.envdir,\\n    ) as action:\\n        # need to start with an empty (but existing) source distribution folder\\n        if dist_dir.exists():\\n            dist_dir.remove(rec=1, ignore_errors=True)\\n        dist_dir.ensure_dir()\\n\\n        result = package_venv._pcall(\\n            [\\n                package_venv.envconfig.envpython,\\n                BUILD_ISOLATED,\\n                str(dist_dir),\\n                build_info.backend_module,\\n                build_info.backend_object,\\n                os.path.pathsep.join(str(p) for p in build_info.backend_paths),\\n            ],\\n            returnout=True,\\n            action=action,\\n            cwd=setup_dir,\\n        )\\n        reporter.verbosity2(result)\\n        return dist_dir.join(result.split(\"\\\\n\")[-2])\\n\\n\\ndef get_build_requires(build_info, package_venv, setup_dir):\\n    with package_venv.new_action(\"get-build-requires\", package_venv.envconfig.envdir) as action:\\n        result = package_venv._pcall(\\n            [\\n                package_venv.envconfig.envpython,\\n                BUILD_REQUIRE_SCRIPT,\\n                build_info.backend_module,\\n                build_info.backend_object,\\n                os.path.pathsep.join(str(p) for p in build_info.backend_paths),\\n            ],\\n            returnout=True,\\n            action=action,\\n            cwd=setup_dir,\\n        )\\n        return json.loads(result.split(\"\\\\n\")[-2])\\n'"}, "return_value": "'from __future__ import unicode_literals\\n\\nimport json\\nimport os\\nfrom collections import namedtuple\\n\\nimport six\\nfrom packaging.requirements import Requirement\\nfrom packaging.utils import canonicalize_name\\n\\nfrom tox import reporter\\nfrom tox.config import DepConfig, get_py_project_toml\\nfrom tox.constants import BUILD_ISOLATED, BUILD_REQUIRE_SCRIPT\\n\\nBuildInfo = namedtuple(\\n    \"BuildInfo\",\\n    [\"requires\", \"backend_module\", \"backend_object\", \"backend_paths\"],\\n)\\n\\n\\ndef build(config, session):\\n    build_info = get_build_info(config.setupdir)\\n    package_venv = session.getvenv(config.isolated_build_env)\\n    package_venv.envconfig.deps_matches_subset = True\\n\\n    # we allow user specified dependencies so the users can write extensions to\\n    # install additional type of dependencies (e.g. binary)\\n    user_specified_deps = package_venv.envconfig.deps\\n    package_venv.envconfig.deps = [DepConfig(r, None) for r in build_info.requires]\\n    package_venv.envconfig.deps.extend(user_specified_deps)\\n\\n    if package_venv.setupenv():\\n        package_venv.finishvenv()\\n    if isinstance(package_venv.status, Exception):\\n        raise package_venv.status\\n\\n    build_requires = get_build_requires(build_info, package_venv, config.setupdir)\\n    # we need to filter out requirements already specified in pyproject.toml or user deps\\n    base_build_deps = {\\n        canonicalize_name(Requirement(r.name).name) for r in package_venv.envconfig.deps\\n    }\\n    build_requires_dep = [\\n        DepConfig(r, None)\\n        for r in build_requires\\n        if canonicalize_name(Requirement(r).name) not in base_build_deps\\n    ]\\n    if build_requires_dep:\\n        with package_venv.new_action(\"build_requires\", package_venv.envconfig.envdir) as action:\\n            package_venv.run_install_command(packages=build_requires_dep, action=action)\\n        package_venv.finishvenv()\\n    return perform_isolated_build(build_info, package_venv, config.distdir, config.setupdir)\\n\\n\\ndef get_build_info(folder):\\n    toml_file = folder.join(\"pyproject.toml\")\\n\\n    # as per https://www.python.org/dev/peps/pep-0517/\\n\\n    def abort(message):\\n        reporter.error(\"{} inside {}\".format(message, toml_file))\\n        raise SystemExit(1)\\n\\n    if not toml_file.exists():\\n        reporter.error(\"missing {}\".format(toml_file))\\n        raise SystemExit(1)\\n\\n    config_data = get_py_project_toml(toml_file)\\n\\n    if \"build-system\" not in config_data:\\n        abort(\"build-system section missing\")\\n\\n    build_system = config_data[\"build-system\"]\\n\\n    if \"requires\" not in build_system:\\n        abort(\"missing requires key at build-system section\")\\n    if \"build-backend\" not in build_system:\\n        abort(\"missing build-backend key at build-system section\")\\n\\n    requires = build_system[\"requires\"]\\n    if not isinstance(requires, list) or not all(isinstance(i, six.text_type) for i in requires):\\n        abort(\"requires key at build-system section must be a list of string\")\\n\\n    backend = build_system[\"build-backend\"]\\n    if not isinstance(backend, six.text_type):\\n        abort(\"build-backend key at build-system section must be a string\")\\n\\n    args = backend.split(\":\")\\n    module = args[0]\\n    obj = args[1] if len(args) > 1 else \"\"\\n\\n    backend_paths = build_system.get(\"backend-path\", [])\\n    if not isinstance(backend_paths, list):\\n        abort(\"backend-path key at build-system section must be a list, if specified\")\\n    backend_paths = [folder.join(p) for p in backend_paths]\\n\\n    normalized_folder = os.path.normcase(str(folder.realpath()))\\n    normalized_paths = (os.path.normcase(str(path.realpath())) for path in backend_paths)\\n\\n    if not all(\\n        os.path.commonprefix((normalized_folder, path)) == normalized_folder\\n        for path in normalized_paths\\n    ):\\n        abort(\"backend-path must exist in the project root\")\\n\\n    return BuildInfo(requires, module, obj, backend_paths)\\n\\n\\ndef perform_isolated_build(build_info, package_venv, dist_dir, setup_dir):\\n    with package_venv.new_action(\\n        \"perform-isolated-build\",\\n        package_venv.envconfig.envdir,\\n    ) as action:\\n        # need to start with an empty (but existing) source distribution folder\\n        if dist_dir.exists():\\n            dist_dir.remove(rec=1, ignore_errors=True)\\n        dist_dir.ensure_dir()\\n\\n        result = package_venv._pcall(\\n            [\\n                package_venv.envconfig.envpython,\\n                BUILD_ISOLATED,\\n                str(dist_dir),\\n                build_info.backend_module,\\n                build_info.backend_object,\\n                os.path.pathsep.join(str(p) for p in build_info.backend_paths),\\n            ],\\n            returnout=True,\\n            action=action,\\n            cwd=setup_dir,\\n        )\\n        reporter.verbosity2(result)\\n        return dist_dir.join(result.split(\"\\\\n\")[-2])\\n\\n\\ndef get_build_requires(build_info, package_venv, setup_dir):\\n    with package_venv.new_action(\"get-build-requires\", package_venv.envconfig.envdir) as action:\\n        result = package_venv._pcall(\\n            [\\n                package_venv.envconfig.envpython,\\n                BUILD_REQUIRE_SCRIPT,\\n                build_info.backend_module,\\n                build_info.backend_object,\\n                os.path.pathsep.join(str(p) for p in build_info.backend_paths),\\n            ],\\n            returnout=True,\\n            action=action,\\n            cwd=setup_dir,\\n        )\\n        return json.loads(result.split(\"\\\\n\")[-2])\\n'"}, {"func_args": {"source": "'import sys\\n\\nimport py\\n\\nfrom tox import reporter\\nfrom tox.util.path import ensure_empty_dir\\n\\n\\ndef make_sdist(config, session):\\n    setup = config.setupdir.join(\"setup.py\")\\n    pyproject = config.setupdir.join(\"pyproject.toml\")\\n    setup_check = setup.check()\\n    if not setup_check and not pyproject.check():\\n        reporter.error(\\n            \"No pyproject.toml or setup.py file found. The expected locations are:\\\\n\"\\n            \"  {pyproject} or {setup}\\\\n\"\\n            \"You can\\\\n\"\\n            \"  1. Create one:\\\\n\"\\n            \"     https://tox.readthedocs.io/en/latest/example/package.html\\\\n\"\\n            \"  2. Configure tox to avoid running sdist:\\\\n\"\\n            \"     https://tox.readthedocs.io/en/latest/example/general.html\\\\n\"\\n            \"  3. Configure tox to use an isolated_build\".format(pyproject=pyproject, setup=setup),\\n        )\\n        raise SystemExit(1)\\n    if not setup_check:\\n        reporter.error(\\n            \"pyproject.toml file found.\\\\n\"\\n            \"To use a PEP 517 build-backend you are required to \"\\n            \"configure tox to use an isolated_build:\\\\n\"\\n            \"https://tox.readthedocs.io/en/latest/example/package.html\\\\n\",\\n        )\\n        raise SystemExit(1)\\n    with session.newaction(\"GLOB\", \"packaging\") as action:\\n        action.setactivity(\"sdist-make\", setup)\\n        ensure_empty_dir(config.distdir)\\n        build_log = action.popen(\\n            [sys.executable, setup, \"sdist\", \"--formats=zip\", \"--dist-dir\", config.distdir],\\n            cwd=config.setupdir,\\n            returnout=True,\\n        )\\n        reporter.verbosity2(build_log)\\n        try:\\n            return config.distdir.listdir()[0]\\n        except py.error.ENOENT:\\n            # check if empty or comment only\\n            data = []\\n            with open(str(setup)) as fp:\\n                for line in fp:\\n                    if line and line[0] == \"#\":\\n                        continue\\n                    data.append(line)\\n            if not \"\".join(data).strip():\\n                reporter.error(\"setup.py is empty\")\\n                raise SystemExit(1)\\n            reporter.error(\\n                \"No dist directory found. Please check setup.py, e.g with:\\\\n\"\\n                \"     python setup.py sdist\",\\n            )\\n            raise SystemExit(1)\\n'"}, "return_value": "'import sys\\n\\nimport py\\n\\nfrom tox import reporter\\nfrom tox.util.path import ensure_empty_dir\\n\\n\\ndef make_sdist(config, session):\\n    setup = config.setupdir.join(\"setup.py\")\\n    pyproject = config.setupdir.join(\"pyproject.toml\")\\n    setup_check = setup.check()\\n    if not setup_check and not pyproject.check():\\n        reporter.error(\\n            \"No pyproject.toml or setup.py file found. The expected locations are:\\\\n\"\\n            \"  {pyproject} or {setup}\\\\n\"\\n            \"You can\\\\n\"\\n            \"  1. Create one:\\\\n\"\\n            \"     https://tox.readthedocs.io/en/latest/example/package.html\\\\n\"\\n            \"  2. Configure tox to avoid running sdist:\\\\n\"\\n            \"     https://tox.readthedocs.io/en/latest/example/general.html\\\\n\"\\n            \"  3. Configure tox to use an isolated_build\".format(pyproject=pyproject, setup=setup),\\n        )\\n        raise SystemExit(1)\\n    if not setup_check:\\n        reporter.error(\\n            \"pyproject.toml file found.\\\\n\"\\n            \"To use a PEP 517 build-backend you are required to \"\\n            \"configure tox to use an isolated_build:\\\\n\"\\n            \"https://tox.readthedocs.io/en/latest/example/package.html\\\\n\",\\n        )\\n        raise SystemExit(1)\\n    with session.newaction(\"GLOB\", \"packaging\") as action:\\n        action.setactivity(\"sdist-make\", setup)\\n        ensure_empty_dir(config.distdir)\\n        build_log = action.popen(\\n            [sys.executable, setup, \"sdist\", \"--formats=zip\", \"--dist-dir\", config.distdir],\\n            cwd=config.setupdir,\\n            returnout=True,\\n        )\\n        reporter.verbosity2(build_log)\\n        try:\\n            return config.distdir.listdir()[0]\\n        except py.error.ENOENT:\\n            # check if empty or comment only\\n            data = []\\n            with open(str(setup)) as fp:\\n                for line in fp:\\n                    if line and line[0] == \"#\":\\n                        continue\\n                    data.append(line)\\n            if not \"\".join(data).strip():\\n                reporter.error(\"setup.py is empty\")\\n                raise SystemExit(1)\\n            reporter.error(\\n                \"No dist directory found. Please check setup.py, e.g with:\\\\n\"\\n                \"     python setup.py sdist\",\\n            )\\n            raise SystemExit(1)\\n'"}, {"func_args": {"source": "'import sys\\n\\nimport py\\n\\nfrom tox import reporter\\nfrom tox.util.path import ensure_empty_dir\\n\\n\\ndef make_sdist(config, session):\\n    setup = config.setupdir.join(\"setup.py\")\\n    pyproject = config.setupdir.join(\"pyproject.toml\")\\n    setup_check = setup.check()\\n    if not setup_check and not pyproject.check():\\n        reporter.error(\\n            \"No pyproject.toml or setup.py file found. The expected locations are:\\\\n\"\\n            \"  {pyproject} or {setup}\\\\n\"\\n            \"You can\\\\n\"\\n            \"  1. Create one:\\\\n\"\\n            \"     https://tox.readthedocs.io/en/latest/example/package.html\\\\n\"\\n            \"  2. Configure tox to avoid running sdist:\\\\n\"\\n            \"     https://tox.readthedocs.io/en/latest/example/general.html\\\\n\"\\n            \"  3. Configure tox to use an isolated_build\".format(pyproject=pyproject, setup=setup),\\n        )\\n        raise SystemExit(1)\\n    if not setup_check:\\n        reporter.error(\\n            \"pyproject.toml file found.\\\\n\"\\n            \"To use a PEP 517 build-backend you are required to \"\\n            \"configure tox to use an isolated_build:\\\\n\"\\n            \"https://tox.readthedocs.io/en/latest/example/package.html\\\\n\",\\n        )\\n        raise SystemExit(1)\\n    with session.newaction(\"GLOB\", \"packaging\") as action:\\n        action.setactivity(\"sdist-make\", setup)\\n        ensure_empty_dir(config.distdir)\\n        build_log = action.popen(\\n            [sys.executable, setup, \"sdist\", \"--formats=zip\", \"--dist-dir\", config.distdir],\\n            cwd=config.setupdir,\\n            returnout=True,\\n        )\\n        reporter.verbosity2(build_log)\\n        try:\\n            return config.distdir.listdir()[0]\\n        except py.error.ENOENT:\\n            # check if empty or comment only\\n            data = []\\n            with open(str(setup)) as fp:\\n                for line in fp:\\n                    if line and line[0] == \"#\":\\n                        continue\\n                    data.append(line)\\n            if not \"\".join(data).strip():\\n                reporter.error(\"setup.py is empty\")\\n                raise SystemExit(1)\\n            reporter.error(\\n                \"No dist directory found. Please check setup.py, e.g with:\\\\n\"\\n                \"     python setup.py sdist\",\\n            )\\n            raise SystemExit(1)\\n'"}, "return_value": "'import sys\\n\\nimport py\\n\\nfrom tox import reporter\\nfrom tox.util.path import ensure_empty_dir\\n\\n\\ndef make_sdist(config, session):\\n    setup = config.setupdir.join(\"setup.py\")\\n    pyproject = config.setupdir.join(\"pyproject.toml\")\\n    setup_check = setup.check()\\n    if not setup_check and not pyproject.check():\\n        reporter.error(\\n            \"No pyproject.toml or setup.py file found. The expected locations are:\\\\n\"\\n            \"  {pyproject} or {setup}\\\\n\"\\n            \"You can\\\\n\"\\n            \"  1. Create one:\\\\n\"\\n            \"     https://tox.readthedocs.io/en/latest/example/package.html\\\\n\"\\n            \"  2. Configure tox to avoid running sdist:\\\\n\"\\n            \"     https://tox.readthedocs.io/en/latest/example/general.html\\\\n\"\\n            \"  3. Configure tox to use an isolated_build\".format(pyproject=pyproject, setup=setup),\\n        )\\n        raise SystemExit(1)\\n    if not setup_check:\\n        reporter.error(\\n            \"pyproject.toml file found.\\\\n\"\\n            \"To use a PEP 517 build-backend you are required to \"\\n            \"configure tox to use an isolated_build:\\\\n\"\\n            \"https://tox.readthedocs.io/en/latest/example/package.html\\\\n\",\\n        )\\n        raise SystemExit(1)\\n    with session.newaction(\"GLOB\", \"packaging\") as action:\\n        action.setactivity(\"sdist-make\", setup)\\n        ensure_empty_dir(config.distdir)\\n        build_log = action.popen(\\n            [sys.executable, setup, \"sdist\", \"--formats=zip\", \"--dist-dir\", config.distdir],\\n            cwd=config.setupdir,\\n            returnout=True,\\n        )\\n        reporter.verbosity2(build_log)\\n        try:\\n            return config.distdir.listdir()[0]\\n        except py.error.ENOENT:\\n            # check if empty or comment only\\n            data = []\\n            with open(str(setup)) as fp:\\n                for line in fp:\\n                    if line and line[0] == \"#\":\\n                        continue\\n                    data.append(line)\\n            if not \"\".join(data).strip():\\n                reporter.error(\"setup.py is empty\")\\n                raise SystemExit(1)\\n            reporter.error(\\n                \"No dist directory found. Please check setup.py, e.g with:\\\\n\"\\n                \"     python setup.py sdist\",\\n            )\\n            raise SystemExit(1)\\n'"}, {"func_args": {"source": "'import os\\nimport re\\n\\nimport packaging.version\\nimport py\\n\\nimport tox\\nfrom tox import reporter\\nfrom tox.exception import MissingDependency\\n\\n_SPEC_2_PACKAGE = {}\\n\\n\\ndef resolve_package(package_spec):\\n    global _SPEC_2_PACKAGE\\n    try:\\n        return _SPEC_2_PACKAGE[package_spec]\\n    except KeyError:\\n        _SPEC_2_PACKAGE[package_spec] = x = get_latest_version_of_package(package_spec)\\n        return x\\n\\n\\ndef get_latest_version_of_package(package_spec):\\n    if not os.path.isabs(str(package_spec)):\\n        return package_spec\\n    p = py.path.local(package_spec)\\n    if p.check():\\n        return p\\n    if not p.dirpath().check(dir=1):\\n        raise tox.exception.MissingDirectory(p.dirpath())\\n    reporter.info(\"determining {}\".format(p))\\n    candidates = p.dirpath().listdir(p.basename)\\n    if len(candidates) == 0:\\n        raise MissingDependency(package_spec)\\n    if len(candidates) > 1:\\n        version_package = []\\n        for filename in candidates:\\n            version = get_version_from_filename(filename.basename)\\n            if version is not None:\\n                version_package.append((version, filename))\\n            else:\\n                reporter.warning(\"could not determine version of: {}\".format(str(filename)))\\n        if not version_package:\\n            raise tox.exception.MissingDependency(package_spec)\\n        version_package.sort()\\n        _, package_with_largest_version = version_package[-1]\\n        return package_with_largest_version\\n    else:\\n        return candidates[0]\\n\\n\\n_REGEX_FILE_NAME_WITH_VERSION = re.compile(r\"[\\\\w_+.-]+-(.*)\\\\.(zip|tar\\\\.gz)\")\\n\\n\\ndef get_version_from_filename(basename):\\n    m = _REGEX_FILE_NAME_WITH_VERSION.match(basename)\\n    if m is None:\\n        return None\\n    version = m.group(1)\\n    try:\\n        return packaging.version.Version(version)\\n    except packaging.version.InvalidVersion:\\n        return None\\n'"}, "return_value": "'import os\\nimport re\\n\\nimport packaging.version\\nimport py\\n\\nimport tox\\nfrom tox import reporter\\nfrom tox.exception import MissingDependency\\n\\n_SPEC_2_PACKAGE = {}\\n\\n\\ndef resolve_package(package_spec):\\n    global _SPEC_2_PACKAGE\\n    try:\\n        return _SPEC_2_PACKAGE[package_spec]\\n    except KeyError:\\n        _SPEC_2_PACKAGE[package_spec] = x = get_latest_version_of_package(package_spec)\\n        return x\\n\\n\\ndef get_latest_version_of_package(package_spec):\\n    if not os.path.isabs(str(package_spec)):\\n        return package_spec\\n    p = py.path.local(package_spec)\\n    if p.check():\\n        return p\\n    if not p.dirpath().check(dir=1):\\n        raise tox.exception.MissingDirectory(p.dirpath())\\n    reporter.info(\"determining {}\".format(p))\\n    candidates = p.dirpath().listdir(p.basename)\\n    if len(candidates) == 0:\\n        raise MissingDependency(package_spec)\\n    if len(candidates) > 1:\\n        version_package = []\\n        for filename in candidates:\\n            version = get_version_from_filename(filename.basename)\\n            if version is not None:\\n                version_package.append((version, filename))\\n            else:\\n                reporter.warning(\"could not determine version of: {}\".format(str(filename)))\\n        if not version_package:\\n            raise tox.exception.MissingDependency(package_spec)\\n        version_package.sort()\\n        _, package_with_largest_version = version_package[-1]\\n        return package_with_largest_version\\n    else:\\n        return candidates[0]\\n\\n\\n_REGEX_FILE_NAME_WITH_VERSION = re.compile(r\"[\\\\w_+.-]+-(.*)\\\\.(zip|tar\\\\.gz)\")\\n\\n\\ndef get_version_from_filename(basename):\\n    m = _REGEX_FILE_NAME_WITH_VERSION.match(basename)\\n    if m is None:\\n        return None\\n    version = m.group(1)\\n    try:\\n        return packaging.version.Version(version)\\n    except packaging.version.InvalidVersion:\\n        return None\\n'"}, {"func_args": {"source": "'import os\\nimport re\\n\\nimport packaging.version\\nimport py\\n\\nimport tox\\nfrom tox import reporter\\nfrom tox.exception import MissingDependency\\n\\n_SPEC_2_PACKAGE = {}\\n\\n\\ndef resolve_package(package_spec):\\n    global _SPEC_2_PACKAGE\\n    try:\\n        return _SPEC_2_PACKAGE[package_spec]\\n    except KeyError:\\n        _SPEC_2_PACKAGE[package_spec] = x = get_latest_version_of_package(package_spec)\\n        return x\\n\\n\\ndef get_latest_version_of_package(package_spec):\\n    if not os.path.isabs(str(package_spec)):\\n        return package_spec\\n    p = py.path.local(package_spec)\\n    if p.check():\\n        return p\\n    if not p.dirpath().check(dir=1):\\n        raise tox.exception.MissingDirectory(p.dirpath())\\n    reporter.info(\"determining {}\".format(p))\\n    candidates = p.dirpath().listdir(p.basename)\\n    if len(candidates) == 0:\\n        raise MissingDependency(package_spec)\\n    if len(candidates) > 1:\\n        version_package = []\\n        for filename in candidates:\\n            version = get_version_from_filename(filename.basename)\\n            if version is not None:\\n                version_package.append((version, filename))\\n            else:\\n                reporter.warning(\"could not determine version of: {}\".format(str(filename)))\\n        if not version_package:\\n            raise tox.exception.MissingDependency(package_spec)\\n        version_package.sort()\\n        _, package_with_largest_version = version_package[-1]\\n        return package_with_largest_version\\n    else:\\n        return candidates[0]\\n\\n\\n_REGEX_FILE_NAME_WITH_VERSION = re.compile(r\"[\\\\w_+.-]+-(.*)\\\\.(zip|tar\\\\.gz)\")\\n\\n\\ndef get_version_from_filename(basename):\\n    m = _REGEX_FILE_NAME_WITH_VERSION.match(basename)\\n    if m is None:\\n        return None\\n    version = m.group(1)\\n    try:\\n        return packaging.version.Version(version)\\n    except packaging.version.InvalidVersion:\\n        return None\\n'"}, "return_value": "'import os\\nimport re\\n\\nimport packaging.version\\nimport py\\n\\nimport tox\\nfrom tox import reporter\\nfrom tox.exception import MissingDependency\\n\\n_SPEC_2_PACKAGE = {}\\n\\n\\ndef resolve_package(package_spec):\\n    global _SPEC_2_PACKAGE\\n    try:\\n        return _SPEC_2_PACKAGE[package_spec]\\n    except KeyError:\\n        _SPEC_2_PACKAGE[package_spec] = x = get_latest_version_of_package(package_spec)\\n        return x\\n\\n\\ndef get_latest_version_of_package(package_spec):\\n    if not os.path.isabs(str(package_spec)):\\n        return package_spec\\n    p = py.path.local(package_spec)\\n    if p.check():\\n        return p\\n    if not p.dirpath().check(dir=1):\\n        raise tox.exception.MissingDirectory(p.dirpath())\\n    reporter.info(\"determining {}\".format(p))\\n    candidates = p.dirpath().listdir(p.basename)\\n    if len(candidates) == 0:\\n        raise MissingDependency(package_spec)\\n    if len(candidates) > 1:\\n        version_package = []\\n        for filename in candidates:\\n            version = get_version_from_filename(filename.basename)\\n            if version is not None:\\n                version_package.append((version, filename))\\n            else:\\n                reporter.warning(\"could not determine version of: {}\".format(str(filename)))\\n        if not version_package:\\n            raise tox.exception.MissingDependency(package_spec)\\n        version_package.sort()\\n        _, package_with_largest_version = version_package[-1]\\n        return package_with_largest_version\\n    else:\\n        return candidates[0]\\n\\n\\n_REGEX_FILE_NAME_WITH_VERSION = re.compile(r\"[\\\\w_+.-]+-(.*)\\\\.(zip|tar\\\\.gz)\")\\n\\n\\ndef get_version_from_filename(basename):\\n    m = _REGEX_FILE_NAME_WITH_VERSION.match(basename)\\n    if m is None:\\n        return None\\n    version = m.group(1)\\n    try:\\n        return packaging.version.Version(version)\\n    except packaging.version.InvalidVersion:\\n        return None\\n'"}, {"func_args": {"source": "'import os\\nfrom itertools import chain\\n\\nimport six\\n\\nfrom tox.reporter import verbosity1\\n\\n\\ndef create_session_view(package, temp_dir):\\n    \"\"\"once we build a package we cannot return that directly, as a subsequent call\\n    might delete that package (in order to do its own build); therefore we need to\\n    return a view of the file that it\\'s not prone to deletion and can be removed when the\\n    session ends\\n    \"\"\"\\n    if not package:\\n        return package\\n    package_dir = temp_dir.join(\"package\")\\n    package_dir.ensure(dir=True)\\n\\n    # we\\'ll number the active instances, and use the max value as session folder for a new build\\n    # note we cannot change package names as PEP-491 (wheel binary format)\\n    # is strict about file name structure\\n    exists = [i.basename for i in package_dir.listdir()]\\n    file_id = max(chain((0,), (int(i) for i in exists if six.text_type(i).isnumeric())))\\n\\n    session_dir = package_dir.join(str(file_id + 1))\\n    session_dir.ensure(dir=True)\\n    session_package = session_dir.join(package.basename)\\n\\n    # if we can do hard links do that, otherwise just copy\\n    links = False\\n    if hasattr(os, \"link\"):\\n        try:\\n            os.link(str(package), str(session_package))\\n            links = True\\n        except (OSError, NotImplementedError):\\n            pass\\n    if not links:\\n        package.copy(session_package)\\n    operation = \"links\" if links else \"copied\"\\n    common = session_package.common(package)\\n    verbosity1(\\n        \"package {} {} to {} ({})\".format(\\n            common.bestrelpath(session_package),\\n            operation,\\n            common.bestrelpath(package),\\n            common,\\n        ),\\n    )\\n    return session_package\\n'"}, "return_value": "'import os\\nfrom itertools import chain\\n\\nimport six\\n\\nfrom tox.reporter import verbosity1\\n\\n\\ndef create_session_view(package, temp_dir):\\n    \"\"\"once we build a package we cannot return that directly, as a subsequent call\\n    might delete that package (in order to do its own build); therefore we need to\\n    return a view of the file that it\\'s not prone to deletion and can be removed when the\\n    session ends\\n    \"\"\"\\n    if not package:\\n        return package\\n    package_dir = temp_dir.join(\"package\")\\n    package_dir.ensure(dir=True)\\n\\n    # we\\'ll number the active instances, and use the max value as session folder for a new build\\n    # note we cannot change package names as PEP-491 (wheel binary format)\\n    # is strict about file name structure\\n    exists = [i.basename for i in package_dir.listdir()]\\n    file_id = max(chain((0,), (int(i) for i in exists if six.text_type(i).isnumeric())))\\n\\n    session_dir = package_dir.join(str(file_id + 1))\\n    session_dir.ensure(dir=True)\\n    session_package = session_dir.join(package.basename)\\n\\n    # if we can do hard links do that, otherwise just copy\\n    links = False\\n    if hasattr(os, \"link\"):\\n        try:\\n            os.link(str(package), str(session_package))\\n            links = True\\n        except (OSError, NotImplementedError):\\n            pass\\n    if not links:\\n        package.copy(session_package)\\n    operation = \"links\" if links else \"copied\"\\n    common = session_package.common(package)\\n    verbosity1(\\n        \"package {} {} to {} ({})\".format(\\n            common.bestrelpath(session_package),\\n            operation,\\n            common.bestrelpath(package),\\n            common,\\n        ),\\n    )\\n    return session_package\\n'"}, {"func_args": {"source": "'import os\\nfrom itertools import chain\\n\\nimport six\\n\\nfrom tox.reporter import verbosity1\\n\\n\\ndef create_session_view(package, temp_dir):\\n    \"\"\"once we build a package we cannot return that directly, as a subsequent call\\n    might delete that package (in order to do its own build); therefore we need to\\n    return a view of the file that it\\'s not prone to deletion and can be removed when the\\n    session ends\\n    \"\"\"\\n    if not package:\\n        return package\\n    package_dir = temp_dir.join(\"package\")\\n    package_dir.ensure(dir=True)\\n\\n    # we\\'ll number the active instances, and use the max value as session folder for a new build\\n    # note we cannot change package names as PEP-491 (wheel binary format)\\n    # is strict about file name structure\\n    exists = [i.basename for i in package_dir.listdir()]\\n    file_id = max(chain((0,), (int(i) for i in exists if six.text_type(i).isnumeric())))\\n\\n    session_dir = package_dir.join(str(file_id + 1))\\n    session_dir.ensure(dir=True)\\n    session_package = session_dir.join(package.basename)\\n\\n    # if we can do hard links do that, otherwise just copy\\n    links = False\\n    if hasattr(os, \"link\"):\\n        try:\\n            os.link(str(package), str(session_package))\\n            links = True\\n        except (OSError, NotImplementedError):\\n            pass\\n    if not links:\\n        package.copy(session_package)\\n    operation = \"links\" if links else \"copied\"\\n    common = session_package.common(package)\\n    verbosity1(\\n        \"package {} {} to {} ({})\".format(\\n            common.bestrelpath(session_package),\\n            operation,\\n            common.bestrelpath(package),\\n            common,\\n        ),\\n    )\\n    return session_package\\n'"}, "return_value": "'import os\\nfrom itertools import chain\\n\\nimport six\\n\\nfrom tox.reporter import verbosity1\\n\\n\\ndef create_session_view(package, temp_dir):\\n    \"\"\"once we build a package we cannot return that directly, as a subsequent call\\n    might delete that package (in order to do its own build); therefore we need to\\n    return a view of the file that it\\'s not prone to deletion and can be removed when the\\n    session ends\\n    \"\"\"\\n    if not package:\\n        return package\\n    package_dir = temp_dir.join(\"package\")\\n    package_dir.ensure(dir=True)\\n\\n    # we\\'ll number the active instances, and use the max value as session folder for a new build\\n    # note we cannot change package names as PEP-491 (wheel binary format)\\n    # is strict about file name structure\\n    exists = [i.basename for i in package_dir.listdir()]\\n    file_id = max(chain((0,), (int(i) for i in exists if six.text_type(i).isnumeric())))\\n\\n    session_dir = package_dir.join(str(file_id + 1))\\n    session_dir.ensure(dir=True)\\n    session_package = session_dir.join(package.basename)\\n\\n    # if we can do hard links do that, otherwise just copy\\n    links = False\\n    if hasattr(os, \"link\"):\\n        try:\\n            os.link(str(package), str(session_package))\\n            links = True\\n        except (OSError, NotImplementedError):\\n            pass\\n    if not links:\\n        package.copy(session_package)\\n    operation = \"links\" if links else \"copied\"\\n    common = session_package.common(package)\\n    verbosity1(\\n        \"package {} {} to {} ({})\".format(\\n            common.bestrelpath(session_package),\\n            operation,\\n            common.bestrelpath(package),\\n            common,\\n        ),\\n    )\\n    return session_package\\n'"}, {"func_args": {"source": "'\"\"\"A progress reporter inspired from the logging modules\"\"\"\\nfrom __future__ import absolute_import, unicode_literals\\n\\nimport os\\nimport time\\nfrom contextlib import contextmanager\\nfrom datetime import datetime\\n\\nimport py\\n\\n\\nclass Verbosity(object):\\n    DEBUG = 2\\n    INFO = 1\\n    DEFAULT = 0\\n    QUIET = -1\\n    EXTRA_QUIET = -2\\n\\n\\nREPORTER_TIMESTAMP_ON_ENV = str(\"TOX_REPORTER_TIMESTAMP\")\\nREPORTER_TIMESTAMP_ON = os.environ.get(REPORTER_TIMESTAMP_ON_ENV, False) == \"1\"\\nSTART = datetime.now()\\n\\n\\nclass Reporter(object):\\n    def __init__(self, verbose_level=None, quiet_level=None):\\n        kwargs = {}\\n        if verbose_level is not None:\\n            kwargs[\"verbose_level\"] = verbose_level\\n        if quiet_level is not None:\\n            kwargs[\"quiet_level\"] = quiet_level\\n        self._reset(**kwargs)\\n\\n    def _reset(self, verbose_level=0, quiet_level=0):\\n        self.verbose_level = verbose_level\\n        self.quiet_level = quiet_level\\n        self.reported_lines = []\\n        self.tw = py.io.TerminalWriter()\\n\\n    @property\\n    def verbosity(self):\\n        return self.verbose_level - self.quiet_level\\n\\n    def log_popen(self, cwd, outpath, cmd_args_shell, pid):\\n        \"\"\"log information about the action.popen() created process.\"\"\"\\n        msg = \"[{}] {}$ {}\".format(pid, cwd, cmd_args_shell)\\n        if outpath:\\n            if outpath.common(cwd) is not None:\\n                outpath = cwd.bestrelpath(outpath)\\n            msg = \"{} >{}\".format(msg, outpath)\\n        self.verbosity1(msg, of=\"logpopen\")\\n\\n    @property\\n    def messages(self):\\n        return [i for _, i in self.reported_lines]\\n\\n    @contextmanager\\n    def timed_operation(self, name, msg):\\n        self.verbosity2(\"{} start: {}\".format(name, msg), bold=True)\\n        start = time.time()\\n        yield\\n        duration = time.time() - start\\n        self.verbosity2(\\n            \"{} finish: {} after {:.2f} seconds\".format(name, msg, duration),\\n            bold=True,\\n        )\\n\\n    def separator(self, of, msg, level):\\n        if self.verbosity >= level:\\n            self.reported_lines.append((\"separator\", \"- summary -\"))\\n            self.tw.sep(of, msg)\\n\\n    def logline_if(self, level, of, msg, key=None, **kwargs):\\n        if self.verbosity >= level:\\n            message = str(msg) if key is None else \"{}{}\".format(key, msg)\\n            self.logline(of, message, **kwargs)\\n\\n    def logline(self, of, msg, **opts):\\n        self.reported_lines.append((of, msg))\\n        timestamp = \"\"\\n        if REPORTER_TIMESTAMP_ON:\\n            timestamp = \"{} \".format(datetime.now() - START)\\n        line_msg = \"{}{}\\\\n\".format(timestamp, msg)\\n        self.tw.write(line_msg, **opts)\\n\\n    def keyvalue(self, name, value):\\n        if name.endswith(\":\"):\\n            name += \" \"\\n        self.tw.write(name, bold=True)\\n        self.tw.write(value)\\n        self.tw.line()\\n\\n    def line(self, msg, **opts):\\n        self.logline(\"line\", msg, **opts)\\n\\n    def info(self, msg):\\n        self.logline_if(Verbosity.DEBUG, \"info\", msg)\\n\\n    def using(self, msg):\\n        self.logline_if(Verbosity.INFO, \"using\", msg, \"using \", bold=True)\\n\\n    def good(self, msg):\\n        self.logline_if(Verbosity.QUIET, \"good\", msg, green=True)\\n\\n    def warning(self, msg):\\n        self.logline_if(Verbosity.QUIET, \"warning\", msg, \"WARNING: \", red=True)\\n\\n    def error(self, msg):\\n        self.logline_if(Verbosity.QUIET, \"error\", msg, \"ERROR: \", red=True)\\n\\n    def skip(self, msg):\\n        self.logline_if(Verbosity.QUIET, \"skip\", msg, \"SKIPPED: \", yellow=True)\\n\\n    def verbosity0(self, msg, **opts):\\n        self.logline_if(Verbosity.DEFAULT, \"verbosity0\", msg, **opts)\\n\\n    def verbosity1(self, msg, of=\"verbosity1\", **opts):\\n        self.logline_if(Verbosity.INFO, of, msg, **opts)\\n\\n    def verbosity2(self, msg, **opts):\\n        self.logline_if(Verbosity.DEBUG, \"verbosity2\", msg, **opts)\\n\\n    def quiet(self, msg):\\n        self.logline_if(Verbosity.QUIET, \"quiet\", msg)\\n\\n\\n_INSTANCE = Reporter()\\n\\n\\ndef update_default_reporter(quiet_level, verbose_level):\\n    _INSTANCE.quiet_level = quiet_level\\n    _INSTANCE.verbose_level = verbose_level\\n\\n\\ndef has_level(of):\\n    return _INSTANCE.verbosity > of\\n\\n\\ndef verbosity():\\n    return _INSTANCE.verbosity\\n\\n\\nverbosity0 = _INSTANCE.verbosity0\\nverbosity1 = _INSTANCE.verbosity1\\nverbosity2 = _INSTANCE.verbosity2\\nerror = _INSTANCE.error\\nwarning = _INSTANCE.warning\\ngood = _INSTANCE.good\\nusing = _INSTANCE.using\\nskip = _INSTANCE.skip\\ninfo = _INSTANCE.info\\nline = _INSTANCE.line\\nseparator = _INSTANCE.separator\\nkeyvalue = _INSTANCE.keyvalue\\nquiet = _INSTANCE.quiet\\ntimed_operation = _INSTANCE.timed_operation\\nlog_popen = _INSTANCE.log_popen\\n'"}, "return_value": "'\"\"\"A progress reporter inspired from the logging modules\"\"\"\\nfrom __future__ import absolute_import, unicode_literals\\n\\nimport os\\nimport time\\nfrom contextlib import contextmanager\\nfrom datetime import datetime\\n\\nimport py\\n\\n\\nclass Verbosity(object):\\n    DEBUG = 2\\n    INFO = 1\\n    DEFAULT = 0\\n    QUIET = -1\\n    EXTRA_QUIET = -2\\n\\n\\nREPORTER_TIMESTAMP_ON_ENV = str(\"TOX_REPORTER_TIMESTAMP\")\\nREPORTER_TIMESTAMP_ON = os.environ.get(REPORTER_TIMESTAMP_ON_ENV, False) == \"1\"\\nSTART = datetime.now()\\n\\n\\nclass Reporter(object):\\n    def __init__(self, verbose_level=None, quiet_level=None):\\n        kwargs = {}\\n        if verbose_level is not None:\\n            kwargs[\"verbose_level\"] = verbose_level\\n        if quiet_level is not None:\\n            kwargs[\"quiet_level\"] = quiet_level\\n        self._reset(**kwargs)\\n\\n    def _reset(self, verbose_level=0, quiet_level=0):\\n        self.verbose_level = verbose_level\\n        self.quiet_level = quiet_level\\n        self.reported_lines = []\\n        self.tw = py.io.TerminalWriter()\\n\\n    @property\\n    def verbosity(self):\\n        return self.verbose_level - self.quiet_level\\n\\n    def log_popen(self, cwd, outpath, cmd_args_shell, pid):\\n        \"\"\"log information about the action.popen() created process.\"\"\"\\n        msg = \"[{}] {}$ {}\".format(pid, cwd, cmd_args_shell)\\n        if outpath:\\n            if outpath.common(cwd) is not None:\\n                outpath = cwd.bestrelpath(outpath)\\n            msg = \"{} >{}\".format(msg, outpath)\\n        self.verbosity1(msg, of=\"logpopen\")\\n\\n    @property\\n    def messages(self):\\n        return [i for _, i in self.reported_lines]\\n\\n    @contextmanager\\n    def timed_operation(self, name, msg):\\n        self.verbosity2(\"{} start: {}\".format(name, msg), bold=True)\\n        start = time.time()\\n        yield\\n        duration = time.time() - start\\n        self.verbosity2(\\n            \"{} finish: {} after {:.2f} seconds\".format(name, msg, duration),\\n            bold=True,\\n        )\\n\\n    def separator(self, of, msg, level):\\n        if self.verbosity >= level:\\n            self.reported_lines.append((\"separator\", \"- summary -\"))\\n            self.tw.sep(of, msg)\\n\\n    def logline_if(self, level, of, msg, key=None, **kwargs):\\n        if self.verbosity >= level:\\n            message = str(msg) if key is None else \"{}{}\".format(key, msg)\\n            self.logline(of, message, **kwargs)\\n\\n    def logline(self, of, msg, **opts):\\n        self.reported_lines.append((of, msg))\\n        timestamp = \"\"\\n        if REPORTER_TIMESTAMP_ON:\\n            timestamp = \"{} \".format(datetime.now() - START)\\n        line_msg = \"{}{}\\\\n\".format(timestamp, msg)\\n        self.tw.write(line_msg, **opts)\\n\\n    def keyvalue(self, name, value):\\n        if name.endswith(\":\"):\\n            name += \" \"\\n        self.tw.write(name, bold=True)\\n        self.tw.write(value)\\n        self.tw.line()\\n\\n    def line(self, msg, **opts):\\n        self.logline(\"line\", msg, **opts)\\n\\n    def info(self, msg):\\n        self.logline_if(Verbosity.DEBUG, \"info\", msg)\\n\\n    def using(self, msg):\\n        self.logline_if(Verbosity.INFO, \"using\", msg, \"using \", bold=True)\\n\\n    def good(self, msg):\\n        self.logline_if(Verbosity.QUIET, \"good\", msg, green=True)\\n\\n    def warning(self, msg):\\n        self.logline_if(Verbosity.QUIET, \"warning\", msg, \"WARNING: \", red=True)\\n\\n    def error(self, msg):\\n        self.logline_if(Verbosity.QUIET, \"error\", msg, \"ERROR: \", red=True)\\n\\n    def skip(self, msg):\\n        self.logline_if(Verbosity.QUIET, \"skip\", msg, \"SKIPPED: \", yellow=True)\\n\\n    def verbosity0(self, msg, **opts):\\n        self.logline_if(Verbosity.DEFAULT, \"verbosity0\", msg, **opts)\\n\\n    def verbosity1(self, msg, of=\"verbosity1\", **opts):\\n        self.logline_if(Verbosity.INFO, of, msg, **opts)\\n\\n    def verbosity2(self, msg, **opts):\\n        self.logline_if(Verbosity.DEBUG, \"verbosity2\", msg, **opts)\\n\\n    def quiet(self, msg):\\n        self.logline_if(Verbosity.QUIET, \"quiet\", msg)\\n\\n\\n_INSTANCE = Reporter()\\n\\n\\ndef update_default_reporter(quiet_level, verbose_level):\\n    _INSTANCE.quiet_level = quiet_level\\n    _INSTANCE.verbose_level = verbose_level\\n\\n\\ndef has_level(of):\\n    return _INSTANCE.verbosity > of\\n\\n\\ndef verbosity():\\n    return _INSTANCE.verbosity\\n\\n\\nverbosity0 = _INSTANCE.verbosity0\\nverbosity1 = _INSTANCE.verbosity1\\nverbosity2 = _INSTANCE.verbosity2\\nerror = _INSTANCE.error\\nwarning = _INSTANCE.warning\\ngood = _INSTANCE.good\\nusing = _INSTANCE.using\\nskip = _INSTANCE.skip\\ninfo = _INSTANCE.info\\nline = _INSTANCE.line\\nseparator = _INSTANCE.separator\\nkeyvalue = _INSTANCE.keyvalue\\nquiet = _INSTANCE.quiet\\ntimed_operation = _INSTANCE.timed_operation\\nlog_popen = _INSTANCE.log_popen\\n'"}, {"func_args": {"source": "'\"\"\"A progress reporter inspired from the logging modules\"\"\"\\nfrom __future__ import absolute_import, unicode_literals\\n\\nimport os\\nimport time\\nfrom contextlib import contextmanager\\nfrom datetime import datetime\\n\\nimport py\\n\\n\\nclass Verbosity(object):\\n    DEBUG = 2\\n    INFO = 1\\n    DEFAULT = 0\\n    QUIET = -1\\n    EXTRA_QUIET = -2\\n\\n\\nREPORTER_TIMESTAMP_ON_ENV = str(\"TOX_REPORTER_TIMESTAMP\")\\nREPORTER_TIMESTAMP_ON = os.environ.get(REPORTER_TIMESTAMP_ON_ENV, False) == \"1\"\\nSTART = datetime.now()\\n\\n\\nclass Reporter(object):\\n    def __init__(self, verbose_level=None, quiet_level=None):\\n        kwargs = {}\\n        if verbose_level is not None:\\n            kwargs[\"verbose_level\"] = verbose_level\\n        if quiet_level is not None:\\n            kwargs[\"quiet_level\"] = quiet_level\\n        self._reset(**kwargs)\\n\\n    def _reset(self, verbose_level=0, quiet_level=0):\\n        self.verbose_level = verbose_level\\n        self.quiet_level = quiet_level\\n        self.reported_lines = []\\n        self.tw = py.io.TerminalWriter()\\n\\n    @property\\n    def verbosity(self):\\n        return self.verbose_level - self.quiet_level\\n\\n    def log_popen(self, cwd, outpath, cmd_args_shell, pid):\\n        \"\"\"log information about the action.popen() created process.\"\"\"\\n        msg = \"[{}] {}$ {}\".format(pid, cwd, cmd_args_shell)\\n        if outpath:\\n            if outpath.common(cwd) is not None:\\n                outpath = cwd.bestrelpath(outpath)\\n            msg = \"{} >{}\".format(msg, outpath)\\n        self.verbosity1(msg, of=\"logpopen\")\\n\\n    @property\\n    def messages(self):\\n        return [i for _, i in self.reported_lines]\\n\\n    @contextmanager\\n    def timed_operation(self, name, msg):\\n        self.verbosity2(\"{} start: {}\".format(name, msg), bold=True)\\n        start = time.time()\\n        yield\\n        duration = time.time() - start\\n        self.verbosity2(\\n            \"{} finish: {} after {:.2f} seconds\".format(name, msg, duration),\\n            bold=True,\\n        )\\n\\n    def separator(self, of, msg, level):\\n        if self.verbosity >= level:\\n            self.reported_lines.append((\"separator\", \"- summary -\"))\\n            self.tw.sep(of, msg)\\n\\n    def logline_if(self, level, of, msg, key=None, **kwargs):\\n        if self.verbosity >= level:\\n            message = str(msg) if key is None else \"{}{}\".format(key, msg)\\n            self.logline(of, message, **kwargs)\\n\\n    def logline(self, of, msg, **opts):\\n        self.reported_lines.append((of, msg))\\n        timestamp = \"\"\\n        if REPORTER_TIMESTAMP_ON:\\n            timestamp = \"{} \".format(datetime.now() - START)\\n        line_msg = \"{}{}\\\\n\".format(timestamp, msg)\\n        self.tw.write(line_msg, **opts)\\n\\n    def keyvalue(self, name, value):\\n        if name.endswith(\":\"):\\n            name += \" \"\\n        self.tw.write(name, bold=True)\\n        self.tw.write(value)\\n        self.tw.line()\\n\\n    def line(self, msg, **opts):\\n        self.logline(\"line\", msg, **opts)\\n\\n    def info(self, msg):\\n        self.logline_if(Verbosity.DEBUG, \"info\", msg)\\n\\n    def using(self, msg):\\n        self.logline_if(Verbosity.INFO, \"using\", msg, \"using \", bold=True)\\n\\n    def good(self, msg):\\n        self.logline_if(Verbosity.QUIET, \"good\", msg, green=True)\\n\\n    def warning(self, msg):\\n        self.logline_if(Verbosity.QUIET, \"warning\", msg, \"WARNING: \", red=True)\\n\\n    def error(self, msg):\\n        self.logline_if(Verbosity.QUIET, \"error\", msg, \"ERROR: \", red=True)\\n\\n    def skip(self, msg):\\n        self.logline_if(Verbosity.QUIET, \"skip\", msg, \"SKIPPED: \", yellow=True)\\n\\n    def verbosity0(self, msg, **opts):\\n        self.logline_if(Verbosity.DEFAULT, \"verbosity0\", msg, **opts)\\n\\n    def verbosity1(self, msg, of=\"verbosity1\", **opts):\\n        self.logline_if(Verbosity.INFO, of, msg, **opts)\\n\\n    def verbosity2(self, msg, **opts):\\n        self.logline_if(Verbosity.DEBUG, \"verbosity2\", msg, **opts)\\n\\n    def quiet(self, msg):\\n        self.logline_if(Verbosity.QUIET, \"quiet\", msg)\\n\\n\\n_INSTANCE = Reporter()\\n\\n\\ndef update_default_reporter(quiet_level, verbose_level):\\n    _INSTANCE.quiet_level = quiet_level\\n    _INSTANCE.verbose_level = verbose_level\\n\\n\\ndef has_level(of):\\n    return _INSTANCE.verbosity > of\\n\\n\\ndef verbosity():\\n    return _INSTANCE.verbosity\\n\\n\\nverbosity0 = _INSTANCE.verbosity0\\nverbosity1 = _INSTANCE.verbosity1\\nverbosity2 = _INSTANCE.verbosity2\\nerror = _INSTANCE.error\\nwarning = _INSTANCE.warning\\ngood = _INSTANCE.good\\nusing = _INSTANCE.using\\nskip = _INSTANCE.skip\\ninfo = _INSTANCE.info\\nline = _INSTANCE.line\\nseparator = _INSTANCE.separator\\nkeyvalue = _INSTANCE.keyvalue\\nquiet = _INSTANCE.quiet\\ntimed_operation = _INSTANCE.timed_operation\\nlog_popen = _INSTANCE.log_popen\\n'"}, "return_value": "'\"\"\"A progress reporter inspired from the logging modules\"\"\"\\nfrom __future__ import absolute_import, unicode_literals\\n\\nimport os\\nimport time\\nfrom contextlib import contextmanager\\nfrom datetime import datetime\\n\\nimport py\\n\\n\\nclass Verbosity(object):\\n    DEBUG = 2\\n    INFO = 1\\n    DEFAULT = 0\\n    QUIET = -1\\n    EXTRA_QUIET = -2\\n\\n\\nREPORTER_TIMESTAMP_ON_ENV = str(\"TOX_REPORTER_TIMESTAMP\")\\nREPORTER_TIMESTAMP_ON = os.environ.get(REPORTER_TIMESTAMP_ON_ENV, False) == \"1\"\\nSTART = datetime.now()\\n\\n\\nclass Reporter(object):\\n    def __init__(self, verbose_level=None, quiet_level=None):\\n        kwargs = {}\\n        if verbose_level is not None:\\n            kwargs[\"verbose_level\"] = verbose_level\\n        if quiet_level is not None:\\n            kwargs[\"quiet_level\"] = quiet_level\\n        self._reset(**kwargs)\\n\\n    def _reset(self, verbose_level=0, quiet_level=0):\\n        self.verbose_level = verbose_level\\n        self.quiet_level = quiet_level\\n        self.reported_lines = []\\n        self.tw = py.io.TerminalWriter()\\n\\n    @property\\n    def verbosity(self):\\n        return self.verbose_level - self.quiet_level\\n\\n    def log_popen(self, cwd, outpath, cmd_args_shell, pid):\\n        \"\"\"log information about the action.popen() created process.\"\"\"\\n        msg = \"[{}] {}$ {}\".format(pid, cwd, cmd_args_shell)\\n        if outpath:\\n            if outpath.common(cwd) is not None:\\n                outpath = cwd.bestrelpath(outpath)\\n            msg = \"{} >{}\".format(msg, outpath)\\n        self.verbosity1(msg, of=\"logpopen\")\\n\\n    @property\\n    def messages(self):\\n        return [i for _, i in self.reported_lines]\\n\\n    @contextmanager\\n    def timed_operation(self, name, msg):\\n        self.verbosity2(\"{} start: {}\".format(name, msg), bold=True)\\n        start = time.time()\\n        yield\\n        duration = time.time() - start\\n        self.verbosity2(\\n            \"{} finish: {} after {:.2f} seconds\".format(name, msg, duration),\\n            bold=True,\\n        )\\n\\n    def separator(self, of, msg, level):\\n        if self.verbosity >= level:\\n            self.reported_lines.append((\"separator\", \"- summary -\"))\\n            self.tw.sep(of, msg)\\n\\n    def logline_if(self, level, of, msg, key=None, **kwargs):\\n        if self.verbosity >= level:\\n            message = str(msg) if key is None else \"{}{}\".format(key, msg)\\n            self.logline(of, message, **kwargs)\\n\\n    def logline(self, of, msg, **opts):\\n        self.reported_lines.append((of, msg))\\n        timestamp = \"\"\\n        if REPORTER_TIMESTAMP_ON:\\n            timestamp = \"{} \".format(datetime.now() - START)\\n        line_msg = \"{}{}\\\\n\".format(timestamp, msg)\\n        self.tw.write(line_msg, **opts)\\n\\n    def keyvalue(self, name, value):\\n        if name.endswith(\":\"):\\n            name += \" \"\\n        self.tw.write(name, bold=True)\\n        self.tw.write(value)\\n        self.tw.line()\\n\\n    def line(self, msg, **opts):\\n        self.logline(\"line\", msg, **opts)\\n\\n    def info(self, msg):\\n        self.logline_if(Verbosity.DEBUG, \"info\", msg)\\n\\n    def using(self, msg):\\n        self.logline_if(Verbosity.INFO, \"using\", msg, \"using \", bold=True)\\n\\n    def good(self, msg):\\n        self.logline_if(Verbosity.QUIET, \"good\", msg, green=True)\\n\\n    def warning(self, msg):\\n        self.logline_if(Verbosity.QUIET, \"warning\", msg, \"WARNING: \", red=True)\\n\\n    def error(self, msg):\\n        self.logline_if(Verbosity.QUIET, \"error\", msg, \"ERROR: \", red=True)\\n\\n    def skip(self, msg):\\n        self.logline_if(Verbosity.QUIET, \"skip\", msg, \"SKIPPED: \", yellow=True)\\n\\n    def verbosity0(self, msg, **opts):\\n        self.logline_if(Verbosity.DEFAULT, \"verbosity0\", msg, **opts)\\n\\n    def verbosity1(self, msg, of=\"verbosity1\", **opts):\\n        self.logline_if(Verbosity.INFO, of, msg, **opts)\\n\\n    def verbosity2(self, msg, **opts):\\n        self.logline_if(Verbosity.DEBUG, \"verbosity2\", msg, **opts)\\n\\n    def quiet(self, msg):\\n        self.logline_if(Verbosity.QUIET, \"quiet\", msg)\\n\\n\\n_INSTANCE = Reporter()\\n\\n\\ndef update_default_reporter(quiet_level, verbose_level):\\n    _INSTANCE.quiet_level = quiet_level\\n    _INSTANCE.verbose_level = verbose_level\\n\\n\\ndef has_level(of):\\n    return _INSTANCE.verbosity > of\\n\\n\\ndef verbosity():\\n    return _INSTANCE.verbosity\\n\\n\\nverbosity0 = _INSTANCE.verbosity0\\nverbosity1 = _INSTANCE.verbosity1\\nverbosity2 = _INSTANCE.verbosity2\\nerror = _INSTANCE.error\\nwarning = _INSTANCE.warning\\ngood = _INSTANCE.good\\nusing = _INSTANCE.using\\nskip = _INSTANCE.skip\\ninfo = _INSTANCE.info\\nline = _INSTANCE.line\\nseparator = _INSTANCE.separator\\nkeyvalue = _INSTANCE.keyvalue\\nquiet = _INSTANCE.quiet\\ntimed_operation = _INSTANCE.timed_operation\\nlog_popen = _INSTANCE.log_popen\\n'"}, {"func_args": {"source": "'\"\"\"\\nAutomatically package and test a Python project against configurable\\nPython2 and Python3 based virtual environments. Environments are\\nsetup by using virtualenv. Configuration is generally done through an\\nINI-style \"tox.ini\" file.\\n\"\"\"\\nfrom __future__ import absolute_import, unicode_literals\\n\\nimport json\\nimport os\\nimport re\\nimport subprocess\\nimport sys\\nfrom collections import OrderedDict\\nfrom contextlib import contextmanager\\n\\nimport py\\n\\nimport tox\\nfrom tox import reporter\\nfrom tox.action import Action\\nfrom tox.config import INTERRUPT_TIMEOUT, SUICIDE_TIMEOUT, TERMINATE_TIMEOUT, parseconfig\\nfrom tox.config.parallel import ENV_VAR_KEY_PRIVATE as PARALLEL_ENV_VAR_KEY_PRIVATE\\nfrom tox.config.parallel import OFF_VALUE as PARALLEL_OFF\\nfrom tox.logs.result import ResultLog\\nfrom tox.reporter import update_default_reporter\\nfrom tox.util import set_os_env_var\\nfrom tox.util.graph import stable_topological_sort\\nfrom tox.util.stdlib import suppress_output\\nfrom tox.venv import VirtualEnv\\n\\nfrom .commands.help import show_help\\nfrom .commands.help_ini import show_help_ini\\nfrom .commands.provision import provision_tox\\nfrom .commands.run.parallel import run_parallel\\nfrom .commands.run.sequential import run_sequential\\nfrom .commands.show_config import show_config\\nfrom .commands.show_env import show_envs\\n\\n\\ndef cmdline(args=None):\\n    if args is None:\\n        args = sys.argv[1:]\\n    main(args)\\n\\n\\ndef setup_reporter(args):\\n    from argparse import ArgumentParser\\n\\n    from tox.config.reporter import add_verbosity_commands\\n\\n    parser = ArgumentParser(add_help=False)\\n    add_verbosity_commands(parser)\\n    with suppress_output():\\n        try:\\n            options, _ = parser.parse_known_args(args)\\n            update_default_reporter(options.quiet_level, options.verbose_level)\\n        except SystemExit:\\n            pass\\n\\n\\ndef main(args):\\n    setup_reporter(args)\\n    try:\\n        config = load_config(args)\\n        config.logdir.ensure(dir=1)\\n        with set_os_env_var(str(\"TOX_WORK_DIR\"), config.toxworkdir):\\n            session = build_session(config)\\n            exit_code = session.runcommand()\\n        if exit_code is None:\\n            exit_code = 0\\n        raise SystemExit(exit_code)\\n    except tox.exception.BadRequirement:\\n        raise SystemExit(1)\\n    except KeyboardInterrupt:\\n        raise SystemExit(2)\\n\\n\\ndef load_config(args):\\n    try:\\n        config = parseconfig(args)\\n        if config.option.help:\\n            show_help(config)\\n            raise SystemExit(0)\\n        elif config.option.helpini:\\n            show_help_ini(config)\\n            raise SystemExit(0)\\n    except tox.exception.MissingRequirement as exception:\\n        config = exception.config\\n    return config\\n\\n\\ndef build_session(config):\\n    return Session(config)\\n\\n\\nclass Session(object):\\n    \"\"\"The session object that ties together configuration, reporting, venv creation, testing.\"\"\"\\n\\n    def __init__(self, config, popen=subprocess.Popen):\\n        self._reset(config, popen)\\n\\n    def _reset(self, config, popen=subprocess.Popen):\\n        self.config = config\\n        self.popen = popen\\n        self.resultlog = ResultLog()\\n        self.existing_venvs = OrderedDict()\\n        self.venv_dict = {} if self.config.run_provision else self._build_venvs()\\n\\n    def _build_venvs(self):\\n        try:\\n            need_to_run = OrderedDict((v, self.getvenv(v)) for v in self._evaluated_env_list)\\n            try:\\n                venv_order = stable_topological_sort(\\n                    OrderedDict((name, v.envconfig.depends) for name, v in need_to_run.items()),\\n                )\\n\\n                venvs = OrderedDict((v, need_to_run[v]) for v in venv_order)\\n                return venvs\\n            except ValueError as exception:\\n                reporter.error(\"circular dependency detected: {}\".format(exception))\\n        except LookupError:\\n            pass\\n        except tox.exception.ConfigError as exception:\\n            reporter.error(str(exception))\\n        raise SystemExit(1)\\n\\n    def getvenv(self, name):\\n        if name in self.existing_venvs:\\n            return self.existing_venvs[name]\\n        env_config = self.config.envconfigs.get(name, None)\\n        if env_config is None:\\n            reporter.error(\"unknown environment {!r}\".format(name))\\n            raise LookupError(name)\\n        elif env_config.envdir == self.config.toxinidir:\\n            reporter.error(\"venv {!r} in {} would delete project\".format(name, env_config.envdir))\\n            raise tox.exception.ConfigError(\"envdir must not equal toxinidir\")\\n        env_log = self.resultlog.get_envlog(name)\\n        venv = VirtualEnv(envconfig=env_config, popen=self.popen, env_log=env_log)\\n        self.existing_venvs[name] = venv\\n        return venv\\n\\n    @property\\n    def _evaluated_env_list(self):\\n        tox_env_filter = os.environ.get(\"TOX_SKIP_ENV\")\\n        tox_env_filter_re = re.compile(tox_env_filter) if tox_env_filter is not None else None\\n        visited = set()\\n        for name in self.config.envlist:\\n            if name in visited:\\n                continue\\n            visited.add(name)\\n            if tox_env_filter_re is not None and tox_env_filter_re.match(name):\\n                msg = \"skip environment {}, matches filter {!r}\".format(\\n                    name,\\n                    tox_env_filter_re.pattern,\\n                )\\n                reporter.verbosity1(msg)\\n                continue\\n            yield name\\n\\n    @property\\n    def hook(self):\\n        return self.config.pluginmanager.hook\\n\\n    def newaction(self, name, msg, *args):\\n        return Action(\\n            name,\\n            msg,\\n            args,\\n            self.config.logdir,\\n            self.config.option.resultjson,\\n            self.resultlog.command_log,\\n            self.popen,\\n            sys.executable,\\n            SUICIDE_TIMEOUT,\\n            INTERRUPT_TIMEOUT,\\n            TERMINATE_TIMEOUT,\\n        )\\n\\n    def runcommand(self):\\n        reporter.using(\\n            \"tox-{} from {} (pid {})\".format(tox.__version__, tox.__file__, os.getpid()),\\n        )\\n        show_description = reporter.has_level(reporter.Verbosity.DEFAULT)\\n        if self.config.run_provision:\\n            provision_tox_venv = self.getvenv(self.config.provision_tox_env)\\n            return provision_tox(provision_tox_venv, self.config.args)\\n        else:\\n            if self.config.option.showconfig:\\n                self.showconfig()\\n            elif self.config.option.listenvs:\\n                self.showenvs(all_envs=False, description=show_description)\\n            elif self.config.option.listenvs_all:\\n                self.showenvs(all_envs=True, description=show_description)\\n            else:\\n                with self.cleanup():\\n                    return self.subcommand_test()\\n\\n    @contextmanager\\n    def cleanup(self):\\n        self.config.temp_dir.ensure(dir=True)\\n        try:\\n            yield\\n        finally:\\n            self.hook.tox_cleanup(session=self)\\n\\n    def subcommand_test(self):\\n        if self.config.skipsdist:\\n            reporter.info(\"skipping sdist step\")\\n        else:\\n            for venv in self.venv_dict.values():\\n                if not venv.envconfig.skip_install:\\n                    venv.package = self.hook.tox_package(session=self, venv=venv)\\n                    if not venv.package:\\n                        return 2\\n                    venv.envconfig.setenv[str(\"TOX_PACKAGE\")] = str(venv.package)\\n        if self.config.option.sdistonly:\\n            return\\n\\n        within_parallel = PARALLEL_ENV_VAR_KEY_PRIVATE in os.environ\\n        try:\\n            if not within_parallel and self.config.option.parallel != PARALLEL_OFF:\\n                run_parallel(self.config, self.venv_dict)\\n            else:\\n                run_sequential(self.config, self.venv_dict)\\n        finally:\\n            retcode = self._summary()\\n        return retcode\\n\\n    def _add_parallel_summaries(self):\\n        if self.config.option.parallel != PARALLEL_OFF and \"testenvs\" in self.resultlog.dict:\\n            result_log = self.resultlog.dict[\"testenvs\"]\\n            for tox_env in self.venv_dict.values():\\n                data = self._load_parallel_env_report(tox_env)\\n                if data and \"testenvs\" in data and tox_env.name in data[\"testenvs\"]:\\n                    result_log[tox_env.name] = data[\"testenvs\"][tox_env.name]\\n\\n    @staticmethod\\n    def _load_parallel_env_report(tox_env):\\n        \"\"\"Load report data into memory, remove disk file\"\"\"\\n        result_json_path = tox_env.get_result_json_path()\\n        if result_json_path and result_json_path.exists():\\n            with result_json_path.open(\"r\") as file_handler:\\n                data = json.load(file_handler)\\n            result_json_path.remove()\\n            return data\\n\\n    def _summary(self):\\n        is_parallel_child = PARALLEL_ENV_VAR_KEY_PRIVATE in os.environ\\n        if not is_parallel_child:\\n            reporter.separator(\"_\", \"summary\", reporter.Verbosity.QUIET)\\n        exit_code = 0\\n        for venv in self.venv_dict.values():\\n            report = reporter.good\\n            status = getattr(venv, \"status\", \"undefined\")\\n            if isinstance(status, tox.exception.InterpreterNotFound):\\n                msg = \" {}: {}\".format(venv.envconfig.envname, str(status))\\n                if self.config.option.skip_missing_interpreters == \"true\":\\n                    report = reporter.skip\\n                else:\\n                    exit_code = 1\\n                    report = reporter.error\\n            elif status == \"platform mismatch\":\\n                msg = \" {}: {} ({!r} does not match {!r})\".format(\\n                    venv.envconfig.envname,\\n                    str(status),\\n                    sys.platform,\\n                    venv.envconfig.platform,\\n                )\\n                report = reporter.skip\\n            elif status and status == \"ignored failed command\":\\n                msg = \"  {}: {}\".format(venv.envconfig.envname, str(status))\\n            elif status and status != \"skipped tests\":\\n                msg = \"  {}: {}\".format(venv.envconfig.envname, str(status))\\n                report = reporter.error\\n                exit_code = 1\\n            else:\\n                if not status:\\n                    status = \"commands succeeded\"\\n                msg = \"  {}: {}\".format(venv.envconfig.envname, status)\\n            if not is_parallel_child:\\n                report(msg)\\n        if not exit_code and not is_parallel_child:\\n            reporter.good(\"  congratulations :)\")\\n        path = self.config.option.resultjson\\n        if path:\\n            if not is_parallel_child:\\n                self._add_parallel_summaries()\\n            path = py.path.local(path)\\n            data = self.resultlog.dumps_json()\\n            reporter.line(\"write json report at: {}\".format(path))\\n            path.write(data)\\n        return exit_code\\n\\n    def showconfig(self):\\n        show_config(self.config)\\n\\n    def showenvs(self, all_envs=False, description=False):\\n        show_envs(self.config, all_envs=all_envs, description=description)\\n'"}, "return_value": "'\"\"\"\\nAutomatically package and test a Python project against configurable\\nPython2 and Python3 based virtual environments. Environments are\\nsetup by using virtualenv. Configuration is generally done through an\\nINI-style \"tox.ini\" file.\\n\"\"\"\\nfrom __future__ import absolute_import, unicode_literals\\n\\nimport json\\nimport os\\nimport re\\nimport subprocess\\nimport sys\\nfrom collections import OrderedDict\\nfrom contextlib import contextmanager\\n\\nimport py\\n\\nimport tox\\nfrom tox import reporter\\nfrom tox.action import Action\\nfrom tox.config import INTERRUPT_TIMEOUT, SUICIDE_TIMEOUT, TERMINATE_TIMEOUT, parseconfig\\nfrom tox.config.parallel import ENV_VAR_KEY_PRIVATE as PARALLEL_ENV_VAR_KEY_PRIVATE\\nfrom tox.config.parallel import OFF_VALUE as PARALLEL_OFF\\nfrom tox.logs.result import ResultLog\\nfrom tox.reporter import update_default_reporter\\nfrom tox.util import set_os_env_var\\nfrom tox.util.graph import stable_topological_sort\\nfrom tox.util.stdlib import suppress_output\\nfrom tox.venv import VirtualEnv\\n\\nfrom .commands.help import show_help\\nfrom .commands.help_ini import show_help_ini\\nfrom .commands.provision import provision_tox\\nfrom .commands.run.parallel import run_parallel\\nfrom .commands.run.sequential import run_sequential\\nfrom .commands.show_config import show_config\\nfrom .commands.show_env import show_envs\\n\\n\\ndef cmdline(args=None):\\n    if args is None:\\n        args = sys.argv[1:]\\n    main(args)\\n\\n\\ndef setup_reporter(args):\\n    from argparse import ArgumentParser\\n\\n    from tox.config.reporter import add_verbosity_commands\\n\\n    parser = ArgumentParser(add_help=False)\\n    add_verbosity_commands(parser)\\n    with suppress_output():\\n        try:\\n            options, _ = parser.parse_known_args(args)\\n            update_default_reporter(options.quiet_level, options.verbose_level)\\n        except SystemExit:\\n            pass\\n\\n\\ndef main(args):\\n    setup_reporter(args)\\n    try:\\n        config = load_config(args)\\n        config.logdir.ensure(dir=1)\\n        with set_os_env_var(str(\"TOX_WORK_DIR\"), config.toxworkdir):\\n            session = build_session(config)\\n            exit_code = session.runcommand()\\n        if exit_code is None:\\n            exit_code = 0\\n        raise SystemExit(exit_code)\\n    except tox.exception.BadRequirement:\\n        raise SystemExit(1)\\n    except KeyboardInterrupt:\\n        raise SystemExit(2)\\n\\n\\ndef load_config(args):\\n    try:\\n        config = parseconfig(args)\\n        if config.option.help:\\n            show_help(config)\\n            raise SystemExit(0)\\n        elif config.option.helpini:\\n            show_help_ini(config)\\n            raise SystemExit(0)\\n    except tox.exception.MissingRequirement as exception:\\n        config = exception.config\\n    return config\\n\\n\\ndef build_session(config):\\n    return Session(config)\\n\\n\\nclass Session(object):\\n    \"\"\"The session object that ties together configuration, reporting, venv creation, testing.\"\"\"\\n\\n    def __init__(self, config, popen=subprocess.Popen):\\n        self._reset(config, popen)\\n\\n    def _reset(self, config, popen=subprocess.Popen):\\n        self.config = config\\n        self.popen = popen\\n        self.resultlog = ResultLog()\\n        self.existing_venvs = OrderedDict()\\n        self.venv_dict = {} if self.config.run_provision else self._build_venvs()\\n\\n    def _build_venvs(self):\\n        try:\\n            need_to_run = OrderedDict((v, self.getvenv(v)) for v in self._evaluated_env_list)\\n            try:\\n                venv_order = stable_topological_sort(\\n                    OrderedDict((name, v.envconfig.depends) for name, v in need_to_run.items()),\\n                )\\n\\n                venvs = OrderedDict((v, need_to_run[v]) for v in venv_order)\\n                return venvs\\n            except ValueError as exception:\\n                reporter.error(\"circular dependency detected: {}\".format(exception))\\n        except LookupError:\\n            pass\\n        except tox.exception.ConfigError as exception:\\n            reporter.error(str(exception))\\n        raise SystemExit(1)\\n\\n    def getvenv(self, name):\\n        if name in self.existing_venvs:\\n            return self.existing_venvs[name]\\n        env_config = self.config.envconfigs.get(name, None)\\n        if env_config is None:\\n            reporter.error(\"unknown environment {!r}\".format(name))\\n            raise LookupError(name)\\n        elif env_config.envdir == self.config.toxinidir:\\n            reporter.error(\"venv {!r} in {} would delete project\".format(name, env_config.envdir))\\n            raise tox.exception.ConfigError(\"envdir must not equal toxinidir\")\\n        env_log = self.resultlog.get_envlog(name)\\n        venv = VirtualEnv(envconfig=env_config, popen=self.popen, env_log=env_log)\\n        self.existing_venvs[name] = venv\\n        return venv\\n\\n    @property\\n    def _evaluated_env_list(self):\\n        tox_env_filter = os.environ.get(\"TOX_SKIP_ENV\")\\n        tox_env_filter_re = re.compile(tox_env_filter) if tox_env_filter is not None else None\\n        visited = set()\\n        for name in self.config.envlist:\\n            if name in visited:\\n                continue\\n            visited.add(name)\\n            if tox_env_filter_re is not None and tox_env_filter_re.match(name):\\n                msg = \"skip environment {}, matches filter {!r}\".format(\\n                    name,\\n                    tox_env_filter_re.pattern,\\n                )\\n                reporter.verbosity1(msg)\\n                continue\\n            yield name\\n\\n    @property\\n    def hook(self):\\n        return self.config.pluginmanager.hook\\n\\n    def newaction(self, name, msg, *args):\\n        return Action(\\n            name,\\n            msg,\\n            args,\\n            self.config.logdir,\\n            self.config.option.resultjson,\\n            self.resultlog.command_log,\\n            self.popen,\\n            sys.executable,\\n            SUICIDE_TIMEOUT,\\n            INTERRUPT_TIMEOUT,\\n            TERMINATE_TIMEOUT,\\n        )\\n\\n    def runcommand(self):\\n        reporter.using(\\n            \"tox-{} from {} (pid {})\".format(tox.__version__, tox.__file__, os.getpid()),\\n        )\\n        show_description = reporter.has_level(reporter.Verbosity.DEFAULT)\\n        if self.config.run_provision:\\n            provision_tox_venv = self.getvenv(self.config.provision_tox_env)\\n            return provision_tox(provision_tox_venv, self.config.args)\\n        else:\\n            if self.config.option.showconfig:\\n                self.showconfig()\\n            elif self.config.option.listenvs:\\n                self.showenvs(all_envs=False, description=show_description)\\n            elif self.config.option.listenvs_all:\\n                self.showenvs(all_envs=True, description=show_description)\\n            else:\\n                with self.cleanup():\\n                    return self.subcommand_test()\\n\\n    @contextmanager\\n    def cleanup(self):\\n        self.config.temp_dir.ensure(dir=True)\\n        try:\\n            yield\\n        finally:\\n            self.hook.tox_cleanup(session=self)\\n\\n    def subcommand_test(self):\\n        if self.config.skipsdist:\\n            reporter.info(\"skipping sdist step\")\\n        else:\\n            for venv in self.venv_dict.values():\\n                if not venv.envconfig.skip_install:\\n                    venv.package = self.hook.tox_package(session=self, venv=venv)\\n                    if not venv.package:\\n                        return 2\\n                    venv.envconfig.setenv[str(\"TOX_PACKAGE\")] = str(venv.package)\\n        if self.config.option.sdistonly:\\n            return\\n\\n        within_parallel = PARALLEL_ENV_VAR_KEY_PRIVATE in os.environ\\n        try:\\n            if not within_parallel and self.config.option.parallel != PARALLEL_OFF:\\n                run_parallel(self.config, self.venv_dict)\\n            else:\\n                run_sequential(self.config, self.venv_dict)\\n        finally:\\n            retcode = self._summary()\\n        return retcode\\n\\n    def _add_parallel_summaries(self):\\n        if self.config.option.parallel != PARALLEL_OFF and \"testenvs\" in self.resultlog.dict:\\n            result_log = self.resultlog.dict[\"testenvs\"]\\n            for tox_env in self.venv_dict.values():\\n                data = self._load_parallel_env_report(tox_env)\\n                if data and \"testenvs\" in data and tox_env.name in data[\"testenvs\"]:\\n                    result_log[tox_env.name] = data[\"testenvs\"][tox_env.name]\\n\\n    @staticmethod\\n    def _load_parallel_env_report(tox_env):\\n        \"\"\"Load report data into memory, remove disk file\"\"\"\\n        result_json_path = tox_env.get_result_json_path()\\n        if result_json_path and result_json_path.exists():\\n            with result_json_path.open(\"r\") as file_handler:\\n                data = json.load(file_handler)\\n            result_json_path.remove()\\n            return data\\n\\n    def _summary(self):\\n        is_parallel_child = PARALLEL_ENV_VAR_KEY_PRIVATE in os.environ\\n        if not is_parallel_child:\\n            reporter.separator(\"_\", \"summary\", reporter.Verbosity.QUIET)\\n        exit_code = 0\\n        for venv in self.venv_dict.values():\\n            report = reporter.good\\n            status = getattr(venv, \"status\", \"undefined\")\\n            if isinstance(status, tox.exception.InterpreterNotFound):\\n                msg = \" {}: {}\".format(venv.envconfig.envname, str(status))\\n                if self.config.option.skip_missing_interpreters == \"true\":\\n                    report = reporter.skip\\n                else:\\n                    exit_code = 1\\n                    report = reporter.error\\n            elif status == \"platform mismatch\":\\n                msg = \" {}: {} ({!r} does not match {!r})\".format(\\n                    venv.envconfig.envname,\\n                    str(status),\\n                    sys.platform,\\n                    venv.envconfig.platform,\\n                )\\n                report = reporter.skip\\n            elif status and status == \"ignored failed command\":\\n                msg = \"  {}: {}\".format(venv.envconfig.envname, str(status))\\n            elif status and status != \"skipped tests\":\\n                msg = \"  {}: {}\".format(venv.envconfig.envname, str(status))\\n                report = reporter.error\\n                exit_code = 1\\n            else:\\n                if not status:\\n                    status = \"commands succeeded\"\\n                msg = \"  {}: {}\".format(venv.envconfig.envname, status)\\n            if not is_parallel_child:\\n                report(msg)\\n        if not exit_code and not is_parallel_child:\\n            reporter.good(\"  congratulations :)\")\\n        path = self.config.option.resultjson\\n        if path:\\n            if not is_parallel_child:\\n                self._add_parallel_summaries()\\n            path = py.path.local(path)\\n            data = self.resultlog.dumps_json()\\n            reporter.line(\"write json report at: {}\".format(path))\\n            path.write(data)\\n        return exit_code\\n\\n    def showconfig(self):\\n        show_config(self.config)\\n\\n    def showenvs(self, all_envs=False, description=False):\\n        show_envs(self.config, all_envs=all_envs, description=description)\\n'"}, {"func_args": {"source": "'\"\"\"\\nAutomatically package and test a Python project against configurable\\nPython2 and Python3 based virtual environments. Environments are\\nsetup by using virtualenv. Configuration is generally done through an\\nINI-style \"tox.ini\" file.\\n\"\"\"\\nfrom __future__ import absolute_import, unicode_literals\\n\\nimport json\\nimport os\\nimport re\\nimport subprocess\\nimport sys\\nfrom collections import OrderedDict\\nfrom contextlib import contextmanager\\n\\nimport py\\n\\nimport tox\\nfrom tox import reporter\\nfrom tox.action import Action\\nfrom tox.config import INTERRUPT_TIMEOUT, SUICIDE_TIMEOUT, TERMINATE_TIMEOUT, parseconfig\\nfrom tox.config.parallel import ENV_VAR_KEY_PRIVATE as PARALLEL_ENV_VAR_KEY_PRIVATE\\nfrom tox.config.parallel import OFF_VALUE as PARALLEL_OFF\\nfrom tox.logs.result import ResultLog\\nfrom tox.reporter import update_default_reporter\\nfrom tox.util import set_os_env_var\\nfrom tox.util.graph import stable_topological_sort\\nfrom tox.util.stdlib import suppress_output\\nfrom tox.venv import VirtualEnv\\n\\nfrom .commands.help import show_help\\nfrom .commands.help_ini import show_help_ini\\nfrom .commands.provision import provision_tox\\nfrom .commands.run.parallel import run_parallel\\nfrom .commands.run.sequential import run_sequential\\nfrom .commands.show_config import show_config\\nfrom .commands.show_env import show_envs\\n\\n\\ndef cmdline(args=None):\\n    if args is None:\\n        args = sys.argv[1:]\\n    main(args)\\n\\n\\ndef setup_reporter(args):\\n    from argparse import ArgumentParser\\n\\n    from tox.config.reporter import add_verbosity_commands\\n\\n    parser = ArgumentParser(add_help=False)\\n    add_verbosity_commands(parser)\\n    with suppress_output():\\n        try:\\n            options, _ = parser.parse_known_args(args)\\n            update_default_reporter(options.quiet_level, options.verbose_level)\\n        except SystemExit:\\n            pass\\n\\n\\ndef main(args):\\n    setup_reporter(args)\\n    try:\\n        config = load_config(args)\\n        config.logdir.ensure(dir=1)\\n        with set_os_env_var(str(\"TOX_WORK_DIR\"), config.toxworkdir):\\n            session = build_session(config)\\n            exit_code = session.runcommand()\\n        if exit_code is None:\\n            exit_code = 0\\n        raise SystemExit(exit_code)\\n    except tox.exception.BadRequirement:\\n        raise SystemExit(1)\\n    except KeyboardInterrupt:\\n        raise SystemExit(2)\\n\\n\\ndef load_config(args):\\n    try:\\n        config = parseconfig(args)\\n        if config.option.help:\\n            show_help(config)\\n            raise SystemExit(0)\\n        elif config.option.helpini:\\n            show_help_ini(config)\\n            raise SystemExit(0)\\n    except tox.exception.MissingRequirement as exception:\\n        config = exception.config\\n    return config\\n\\n\\ndef build_session(config):\\n    return Session(config)\\n\\n\\nclass Session(object):\\n    \"\"\"The session object that ties together configuration, reporting, venv creation, testing.\"\"\"\\n\\n    def __init__(self, config, popen=subprocess.Popen):\\n        self._reset(config, popen)\\n\\n    def _reset(self, config, popen=subprocess.Popen):\\n        self.config = config\\n        self.popen = popen\\n        self.resultlog = ResultLog()\\n        self.existing_venvs = OrderedDict()\\n        self.venv_dict = {} if self.config.run_provision else self._build_venvs()\\n\\n    def _build_venvs(self):\\n        try:\\n            need_to_run = OrderedDict((v, self.getvenv(v)) for v in self._evaluated_env_list)\\n            try:\\n                venv_order = stable_topological_sort(\\n                    OrderedDict((name, v.envconfig.depends) for name, v in need_to_run.items()),\\n                )\\n\\n                venvs = OrderedDict((v, need_to_run[v]) for v in venv_order)\\n                return venvs\\n            except ValueError as exception:\\n                reporter.error(\"circular dependency detected: {}\".format(exception))\\n        except LookupError:\\n            pass\\n        except tox.exception.ConfigError as exception:\\n            reporter.error(str(exception))\\n        raise SystemExit(1)\\n\\n    def getvenv(self, name):\\n        if name in self.existing_venvs:\\n            return self.existing_venvs[name]\\n        env_config = self.config.envconfigs.get(name, None)\\n        if env_config is None:\\n            reporter.error(\"unknown environment {!r}\".format(name))\\n            raise LookupError(name)\\n        elif env_config.envdir == self.config.toxinidir:\\n            reporter.error(\"venv {!r} in {} would delete project\".format(name, env_config.envdir))\\n            raise tox.exception.ConfigError(\"envdir must not equal toxinidir\")\\n        env_log = self.resultlog.get_envlog(name)\\n        venv = VirtualEnv(envconfig=env_config, popen=self.popen, env_log=env_log)\\n        self.existing_venvs[name] = venv\\n        return venv\\n\\n    @property\\n    def _evaluated_env_list(self):\\n        tox_env_filter = os.environ.get(\"TOX_SKIP_ENV\")\\n        tox_env_filter_re = re.compile(tox_env_filter) if tox_env_filter is not None else None\\n        visited = set()\\n        for name in self.config.envlist:\\n            if name in visited:\\n                continue\\n            visited.add(name)\\n            if tox_env_filter_re is not None and tox_env_filter_re.match(name):\\n                msg = \"skip environment {}, matches filter {!r}\".format(\\n                    name,\\n                    tox_env_filter_re.pattern,\\n                )\\n                reporter.verbosity1(msg)\\n                continue\\n            yield name\\n\\n    @property\\n    def hook(self):\\n        return self.config.pluginmanager.hook\\n\\n    def newaction(self, name, msg, *args):\\n        return Action(\\n            name,\\n            msg,\\n            args,\\n            self.config.logdir,\\n            self.config.option.resultjson,\\n            self.resultlog.command_log,\\n            self.popen,\\n            sys.executable,\\n            SUICIDE_TIMEOUT,\\n            INTERRUPT_TIMEOUT,\\n            TERMINATE_TIMEOUT,\\n        )\\n\\n    def runcommand(self):\\n        reporter.using(\\n            \"tox-{} from {} (pid {})\".format(tox.__version__, tox.__file__, os.getpid()),\\n        )\\n        show_description = reporter.has_level(reporter.Verbosity.DEFAULT)\\n        if self.config.run_provision:\\n            provision_tox_venv = self.getvenv(self.config.provision_tox_env)\\n            return provision_tox(provision_tox_venv, self.config.args)\\n        else:\\n            if self.config.option.showconfig:\\n                self.showconfig()\\n            elif self.config.option.listenvs:\\n                self.showenvs(all_envs=False, description=show_description)\\n            elif self.config.option.listenvs_all:\\n                self.showenvs(all_envs=True, description=show_description)\\n            else:\\n                with self.cleanup():\\n                    return self.subcommand_test()\\n\\n    @contextmanager\\n    def cleanup(self):\\n        self.config.temp_dir.ensure(dir=True)\\n        try:\\n            yield\\n        finally:\\n            self.hook.tox_cleanup(session=self)\\n\\n    def subcommand_test(self):\\n        if self.config.skipsdist:\\n            reporter.info(\"skipping sdist step\")\\n        else:\\n            for venv in self.venv_dict.values():\\n                if not venv.envconfig.skip_install:\\n                    venv.package = self.hook.tox_package(session=self, venv=venv)\\n                    if not venv.package:\\n                        return 2\\n                    venv.envconfig.setenv[str(\"TOX_PACKAGE\")] = str(venv.package)\\n        if self.config.option.sdistonly:\\n            return\\n\\n        within_parallel = PARALLEL_ENV_VAR_KEY_PRIVATE in os.environ\\n        try:\\n            if not within_parallel and self.config.option.parallel != PARALLEL_OFF:\\n                run_parallel(self.config, self.venv_dict)\\n            else:\\n                run_sequential(self.config, self.venv_dict)\\n        finally:\\n            retcode = self._summary()\\n        return retcode\\n\\n    def _add_parallel_summaries(self):\\n        if self.config.option.parallel != PARALLEL_OFF and \"testenvs\" in self.resultlog.dict:\\n            result_log = self.resultlog.dict[\"testenvs\"]\\n            for tox_env in self.venv_dict.values():\\n                data = self._load_parallel_env_report(tox_env)\\n                if data and \"testenvs\" in data and tox_env.name in data[\"testenvs\"]:\\n                    result_log[tox_env.name] = data[\"testenvs\"][tox_env.name]\\n\\n    @staticmethod\\n    def _load_parallel_env_report(tox_env):\\n        \"\"\"Load report data into memory, remove disk file\"\"\"\\n        result_json_path = tox_env.get_result_json_path()\\n        if result_json_path and result_json_path.exists():\\n            with result_json_path.open(\"r\") as file_handler:\\n                data = json.load(file_handler)\\n            result_json_path.remove()\\n            return data\\n\\n    def _summary(self):\\n        is_parallel_child = PARALLEL_ENV_VAR_KEY_PRIVATE in os.environ\\n        if not is_parallel_child:\\n            reporter.separator(\"_\", \"summary\", reporter.Verbosity.QUIET)\\n        exit_code = 0\\n        for venv in self.venv_dict.values():\\n            report = reporter.good\\n            status = getattr(venv, \"status\", \"undefined\")\\n            if isinstance(status, tox.exception.InterpreterNotFound):\\n                msg = \" {}: {}\".format(venv.envconfig.envname, str(status))\\n                if self.config.option.skip_missing_interpreters == \"true\":\\n                    report = reporter.skip\\n                else:\\n                    exit_code = 1\\n                    report = reporter.error\\n            elif status == \"platform mismatch\":\\n                msg = \" {}: {} ({!r} does not match {!r})\".format(\\n                    venv.envconfig.envname,\\n                    str(status),\\n                    sys.platform,\\n                    venv.envconfig.platform,\\n                )\\n                report = reporter.skip\\n            elif status and status == \"ignored failed command\":\\n                msg = \"  {}: {}\".format(venv.envconfig.envname, str(status))\\n            elif status and status != \"skipped tests\":\\n                msg = \"  {}: {}\".format(venv.envconfig.envname, str(status))\\n                report = reporter.error\\n                exit_code = 1\\n            else:\\n                if not status:\\n                    status = \"commands succeeded\"\\n                msg = \"  {}: {}\".format(venv.envconfig.envname, status)\\n            if not is_parallel_child:\\n                report(msg)\\n        if not exit_code and not is_parallel_child:\\n            reporter.good(\"  congratulations :)\")\\n        path = self.config.option.resultjson\\n        if path:\\n            if not is_parallel_child:\\n                self._add_parallel_summaries()\\n            path = py.path.local(path)\\n            data = self.resultlog.dumps_json()\\n            reporter.line(\"write json report at: {}\".format(path))\\n            path.write(data)\\n        return exit_code\\n\\n    def showconfig(self):\\n        show_config(self.config)\\n\\n    def showenvs(self, all_envs=False, description=False):\\n        show_envs(self.config, all_envs=all_envs, description=description)\\n'"}, "return_value": "'\"\"\"\\nAutomatically package and test a Python project against configurable\\nPython2 and Python3 based virtual environments. Environments are\\nsetup by using virtualenv. Configuration is generally done through an\\nINI-style \"tox.ini\" file.\\n\"\"\"\\nfrom __future__ import absolute_import, unicode_literals\\n\\nimport json\\nimport os\\nimport re\\nimport subprocess\\nimport sys\\nfrom collections import OrderedDict\\nfrom contextlib import contextmanager\\n\\nimport py\\n\\nimport tox\\nfrom tox import reporter\\nfrom tox.action import Action\\nfrom tox.config import INTERRUPT_TIMEOUT, SUICIDE_TIMEOUT, TERMINATE_TIMEOUT, parseconfig\\nfrom tox.config.parallel import ENV_VAR_KEY_PRIVATE as PARALLEL_ENV_VAR_KEY_PRIVATE\\nfrom tox.config.parallel import OFF_VALUE as PARALLEL_OFF\\nfrom tox.logs.result import ResultLog\\nfrom tox.reporter import update_default_reporter\\nfrom tox.util import set_os_env_var\\nfrom tox.util.graph import stable_topological_sort\\nfrom tox.util.stdlib import suppress_output\\nfrom tox.venv import VirtualEnv\\n\\nfrom .commands.help import show_help\\nfrom .commands.help_ini import show_help_ini\\nfrom .commands.provision import provision_tox\\nfrom .commands.run.parallel import run_parallel\\nfrom .commands.run.sequential import run_sequential\\nfrom .commands.show_config import show_config\\nfrom .commands.show_env import show_envs\\n\\n\\ndef cmdline(args=None):\\n    if args is None:\\n        args = sys.argv[1:]\\n    main(args)\\n\\n\\ndef setup_reporter(args):\\n    from argparse import ArgumentParser\\n\\n    from tox.config.reporter import add_verbosity_commands\\n\\n    parser = ArgumentParser(add_help=False)\\n    add_verbosity_commands(parser)\\n    with suppress_output():\\n        try:\\n            options, _ = parser.parse_known_args(args)\\n            update_default_reporter(options.quiet_level, options.verbose_level)\\n        except SystemExit:\\n            pass\\n\\n\\ndef main(args):\\n    setup_reporter(args)\\n    try:\\n        config = load_config(args)\\n        config.logdir.ensure(dir=1)\\n        with set_os_env_var(str(\"TOX_WORK_DIR\"), config.toxworkdir):\\n            session = build_session(config)\\n            exit_code = session.runcommand()\\n        if exit_code is None:\\n            exit_code = 0\\n        raise SystemExit(exit_code)\\n    except tox.exception.BadRequirement:\\n        raise SystemExit(1)\\n    except KeyboardInterrupt:\\n        raise SystemExit(2)\\n\\n\\ndef load_config(args):\\n    try:\\n        config = parseconfig(args)\\n        if config.option.help:\\n            show_help(config)\\n            raise SystemExit(0)\\n        elif config.option.helpini:\\n            show_help_ini(config)\\n            raise SystemExit(0)\\n    except tox.exception.MissingRequirement as exception:\\n        config = exception.config\\n    return config\\n\\n\\ndef build_session(config):\\n    return Session(config)\\n\\n\\nclass Session(object):\\n    \"\"\"The session object that ties together configuration, reporting, venv creation, testing.\"\"\"\\n\\n    def __init__(self, config, popen=subprocess.Popen):\\n        self._reset(config, popen)\\n\\n    def _reset(self, config, popen=subprocess.Popen):\\n        self.config = config\\n        self.popen = popen\\n        self.resultlog = ResultLog()\\n        self.existing_venvs = OrderedDict()\\n        self.venv_dict = {} if self.config.run_provision else self._build_venvs()\\n\\n    def _build_venvs(self):\\n        try:\\n            need_to_run = OrderedDict((v, self.getvenv(v)) for v in self._evaluated_env_list)\\n            try:\\n                venv_order = stable_topological_sort(\\n                    OrderedDict((name, v.envconfig.depends) for name, v in need_to_run.items()),\\n                )\\n\\n                venvs = OrderedDict((v, need_to_run[v]) for v in venv_order)\\n                return venvs\\n            except ValueError as exception:\\n                reporter.error(\"circular dependency detected: {}\".format(exception))\\n        except LookupError:\\n            pass\\n        except tox.exception.ConfigError as exception:\\n            reporter.error(str(exception))\\n        raise SystemExit(1)\\n\\n    def getvenv(self, name):\\n        if name in self.existing_venvs:\\n            return self.existing_venvs[name]\\n        env_config = self.config.envconfigs.get(name, None)\\n        if env_config is None:\\n            reporter.error(\"unknown environment {!r}\".format(name))\\n            raise LookupError(name)\\n        elif env_config.envdir == self.config.toxinidir:\\n            reporter.error(\"venv {!r} in {} would delete project\".format(name, env_config.envdir))\\n            raise tox.exception.ConfigError(\"envdir must not equal toxinidir\")\\n        env_log = self.resultlog.get_envlog(name)\\n        venv = VirtualEnv(envconfig=env_config, popen=self.popen, env_log=env_log)\\n        self.existing_venvs[name] = venv\\n        return venv\\n\\n    @property\\n    def _evaluated_env_list(self):\\n        tox_env_filter = os.environ.get(\"TOX_SKIP_ENV\")\\n        tox_env_filter_re = re.compile(tox_env_filter) if tox_env_filter is not None else None\\n        visited = set()\\n        for name in self.config.envlist:\\n            if name in visited:\\n                continue\\n            visited.add(name)\\n            if tox_env_filter_re is not None and tox_env_filter_re.match(name):\\n                msg = \"skip environment {}, matches filter {!r}\".format(\\n                    name,\\n                    tox_env_filter_re.pattern,\\n                )\\n                reporter.verbosity1(msg)\\n                continue\\n            yield name\\n\\n    @property\\n    def hook(self):\\n        return self.config.pluginmanager.hook\\n\\n    def newaction(self, name, msg, *args):\\n        return Action(\\n            name,\\n            msg,\\n            args,\\n            self.config.logdir,\\n            self.config.option.resultjson,\\n            self.resultlog.command_log,\\n            self.popen,\\n            sys.executable,\\n            SUICIDE_TIMEOUT,\\n            INTERRUPT_TIMEOUT,\\n            TERMINATE_TIMEOUT,\\n        )\\n\\n    def runcommand(self):\\n        reporter.using(\\n            \"tox-{} from {} (pid {})\".format(tox.__version__, tox.__file__, os.getpid()),\\n        )\\n        show_description = reporter.has_level(reporter.Verbosity.DEFAULT)\\n        if self.config.run_provision:\\n            provision_tox_venv = self.getvenv(self.config.provision_tox_env)\\n            return provision_tox(provision_tox_venv, self.config.args)\\n        else:\\n            if self.config.option.showconfig:\\n                self.showconfig()\\n            elif self.config.option.listenvs:\\n                self.showenvs(all_envs=False, description=show_description)\\n            elif self.config.option.listenvs_all:\\n                self.showenvs(all_envs=True, description=show_description)\\n            else:\\n                with self.cleanup():\\n                    return self.subcommand_test()\\n\\n    @contextmanager\\n    def cleanup(self):\\n        self.config.temp_dir.ensure(dir=True)\\n        try:\\n            yield\\n        finally:\\n            self.hook.tox_cleanup(session=self)\\n\\n    def subcommand_test(self):\\n        if self.config.skipsdist:\\n            reporter.info(\"skipping sdist step\")\\n        else:\\n            for venv in self.venv_dict.values():\\n                if not venv.envconfig.skip_install:\\n                    venv.package = self.hook.tox_package(session=self, venv=venv)\\n                    if not venv.package:\\n                        return 2\\n                    venv.envconfig.setenv[str(\"TOX_PACKAGE\")] = str(venv.package)\\n        if self.config.option.sdistonly:\\n            return\\n\\n        within_parallel = PARALLEL_ENV_VAR_KEY_PRIVATE in os.environ\\n        try:\\n            if not within_parallel and self.config.option.parallel != PARALLEL_OFF:\\n                run_parallel(self.config, self.venv_dict)\\n            else:\\n                run_sequential(self.config, self.venv_dict)\\n        finally:\\n            retcode = self._summary()\\n        return retcode\\n\\n    def _add_parallel_summaries(self):\\n        if self.config.option.parallel != PARALLEL_OFF and \"testenvs\" in self.resultlog.dict:\\n            result_log = self.resultlog.dict[\"testenvs\"]\\n            for tox_env in self.venv_dict.values():\\n                data = self._load_parallel_env_report(tox_env)\\n                if data and \"testenvs\" in data and tox_env.name in data[\"testenvs\"]:\\n                    result_log[tox_env.name] = data[\"testenvs\"][tox_env.name]\\n\\n    @staticmethod\\n    def _load_parallel_env_report(tox_env):\\n        \"\"\"Load report data into memory, remove disk file\"\"\"\\n        result_json_path = tox_env.get_result_json_path()\\n        if result_json_path and result_json_path.exists():\\n            with result_json_path.open(\"r\") as file_handler:\\n                data = json.load(file_handler)\\n            result_json_path.remove()\\n            return data\\n\\n    def _summary(self):\\n        is_parallel_child = PARALLEL_ENV_VAR_KEY_PRIVATE in os.environ\\n        if not is_parallel_child:\\n            reporter.separator(\"_\", \"summary\", reporter.Verbosity.QUIET)\\n        exit_code = 0\\n        for venv in self.venv_dict.values():\\n            report = reporter.good\\n            status = getattr(venv, \"status\", \"undefined\")\\n            if isinstance(status, tox.exception.InterpreterNotFound):\\n                msg = \" {}: {}\".format(venv.envconfig.envname, str(status))\\n                if self.config.option.skip_missing_interpreters == \"true\":\\n                    report = reporter.skip\\n                else:\\n                    exit_code = 1\\n                    report = reporter.error\\n            elif status == \"platform mismatch\":\\n                msg = \" {}: {} ({!r} does not match {!r})\".format(\\n                    venv.envconfig.envname,\\n                    str(status),\\n                    sys.platform,\\n                    venv.envconfig.platform,\\n                )\\n                report = reporter.skip\\n            elif status and status == \"ignored failed command\":\\n                msg = \"  {}: {}\".format(venv.envconfig.envname, str(status))\\n            elif status and status != \"skipped tests\":\\n                msg = \"  {}: {}\".format(venv.envconfig.envname, str(status))\\n                report = reporter.error\\n                exit_code = 1\\n            else:\\n                if not status:\\n                    status = \"commands succeeded\"\\n                msg = \"  {}: {}\".format(venv.envconfig.envname, status)\\n            if not is_parallel_child:\\n                report(msg)\\n        if not exit_code and not is_parallel_child:\\n            reporter.good(\"  congratulations :)\")\\n        path = self.config.option.resultjson\\n        if path:\\n            if not is_parallel_child:\\n                self._add_parallel_summaries()\\n            path = py.path.local(path)\\n            data = self.resultlog.dumps_json()\\n            reporter.line(\"write json report at: {}\".format(path))\\n            path.write(data)\\n        return exit_code\\n\\n    def showconfig(self):\\n        show_config(self.config)\\n\\n    def showenvs(self, all_envs=False, description=False):\\n        show_envs(self.config, all_envs=all_envs, description=description)\\n'"}, {"func_args": {"source": "''"}, "return_value": "''"}, {"func_args": {"source": "'from tox import reporter\\n\\n\\ndef show_help(config):\\n    reporter.line(config._parser._format_help())\\n    reporter.line(\"Environment variables\", bold=True)\\n    reporter.line(\"TOXENV: comma separated list of environments (overridable by \\'-e\\')\")\\n    reporter.line(\"TOX_SKIP_ENV: regular expression to filter down from running tox environments\")\\n    reporter.line(\\n        \"TOX_TESTENV_PASSENV: space-separated list of extra environment variables to be \"\\n        \"passed into test command environments\",\\n    )\\n    reporter.line(\"PY_COLORS: 0 disable colorized output, 1 enable (default)\")\\n    reporter.line(\"TOX_PARALLEL_NO_SPINNER: 1 disable spinner for CI, 0 enable (default)\")\\n'"}, "return_value": "'from tox import reporter\\n\\n\\ndef show_help(config):\\n    reporter.line(config._parser._format_help())\\n    reporter.line(\"Environment variables\", bold=True)\\n    reporter.line(\"TOXENV: comma separated list of environments (overridable by \\'-e\\')\")\\n    reporter.line(\"TOX_SKIP_ENV: regular expression to filter down from running tox environments\")\\n    reporter.line(\\n        \"TOX_TESTENV_PASSENV: space-separated list of extra environment variables to be \"\\n        \"passed into test command environments\",\\n    )\\n    reporter.line(\"PY_COLORS: 0 disable colorized output, 1 enable (default)\")\\n    reporter.line(\"TOX_PARALLEL_NO_SPINNER: 1 disable spinner for CI, 0 enable (default)\")\\n'"}, {"func_args": {"source": "'from tox import reporter\\n\\n\\ndef show_help(config):\\n    reporter.line(config._parser._format_help())\\n    reporter.line(\"Environment variables\", bold=True)\\n    reporter.line(\"TOXENV: comma separated list of environments (overridable by \\'-e\\')\")\\n    reporter.line(\"TOX_SKIP_ENV: regular expression to filter down from running tox environments\")\\n    reporter.line(\\n        \"TOX_TESTENV_PASSENV: space-separated list of extra environment variables to be \"\\n        \"passed into test command environments\",\\n    )\\n    reporter.line(\"PY_COLORS: 0 disable colorized output, 1 enable (default)\")\\n    reporter.line(\"TOX_PARALLEL_NO_SPINNER: 1 disable spinner for CI, 0 enable (default)\")\\n'"}, "return_value": "'from tox import reporter\\n\\n\\ndef show_help(config):\\n    reporter.line(config._parser._format_help())\\n    reporter.line(\"Environment variables\", bold=True)\\n    reporter.line(\"TOXENV: comma separated list of environments (overridable by \\'-e\\')\")\\n    reporter.line(\"TOX_SKIP_ENV: regular expression to filter down from running tox environments\")\\n    reporter.line(\\n        \"TOX_TESTENV_PASSENV: space-separated list of extra environment variables to be \"\\n        \"passed into test command environments\",\\n    )\\n    reporter.line(\"PY_COLORS: 0 disable colorized output, 1 enable (default)\")\\n    reporter.line(\"TOX_PARALLEL_NO_SPINNER: 1 disable spinner for CI, 0 enable (default)\")\\n'"}, {"func_args": {"source": "'from tox import reporter\\n\\n\\ndef show_help_ini(config):\\n    reporter.separator(\"-\", \"per-testenv attributes\", reporter.Verbosity.INFO)\\n    for env_attr in config._testenv_attr:\\n        reporter.line(\\n            \"{:<15} {:<8} default: {}\".format(\\n                env_attr.name,\\n                \"<{}>\".format(env_attr.type),\\n                env_attr.default,\\n            ),\\n            bold=True,\\n        )\\n        reporter.line(env_attr.help)\\n        reporter.line(\"\")\\n'"}, "return_value": "'from tox import reporter\\n\\n\\ndef show_help_ini(config):\\n    reporter.separator(\"-\", \"per-testenv attributes\", reporter.Verbosity.INFO)\\n    for env_attr in config._testenv_attr:\\n        reporter.line(\\n            \"{:<15} {:<8} default: {}\".format(\\n                env_attr.name,\\n                \"<{}>\".format(env_attr.type),\\n                env_attr.default,\\n            ),\\n            bold=True,\\n        )\\n        reporter.line(env_attr.help)\\n        reporter.line(\"\")\\n'"}, {"func_args": {"source": "'from tox import reporter\\n\\n\\ndef show_help_ini(config):\\n    reporter.separator(\"-\", \"per-testenv attributes\", reporter.Verbosity.INFO)\\n    for env_attr in config._testenv_attr:\\n        reporter.line(\\n            \"{:<15} {:<8} default: {}\".format(\\n                env_attr.name,\\n                \"<{}>\".format(env_attr.type),\\n                env_attr.default,\\n            ),\\n            bold=True,\\n        )\\n        reporter.line(env_attr.help)\\n        reporter.line(\"\")\\n'"}, "return_value": "'from tox import reporter\\n\\n\\ndef show_help_ini(config):\\n    reporter.separator(\"-\", \"per-testenv attributes\", reporter.Verbosity.INFO)\\n    for env_attr in config._testenv_attr:\\n        reporter.line(\\n            \"{:<15} {:<8} default: {}\".format(\\n                env_attr.name,\\n                \"<{}>\".format(env_attr.type),\\n                env_attr.default,\\n            ),\\n            bold=True,\\n        )\\n        reporter.line(env_attr.help)\\n        reporter.line(\"\")\\n'"}, {"func_args": {"source": "'\"\"\"In case the tox environment is not correctly setup provision it and delegate execution\"\"\"\\nfrom __future__ import absolute_import, unicode_literals\\n\\nimport os\\n\\nfrom tox.exception import InvocationError\\n\\n\\ndef provision_tox(provision_venv, args):\\n    ensure_meta_env_up_to_date(provision_venv)\\n    with provision_venv.new_action(\"provision\") as action:\\n        provision_args = [str(provision_venv.envconfig.envpython), \"-m\", \"tox\"] + args\\n        try:\\n            env = os.environ.copy()\\n            env[str(\"TOX_PROVISION\")] = str(\"1\")\\n            env.pop(\"__PYVENV_LAUNCHER__\", None)\\n            action.popen(provision_args, redirect=False, report_fail=False, env=env)\\n            return 0\\n        except InvocationError as exception:\\n            return exception.exit_code\\n\\n\\ndef ensure_meta_env_up_to_date(provision_venv):\\n    if provision_venv.setupenv():\\n        provision_venv.finishvenv()\\n'"}, "return_value": "'\"\"\"In case the tox environment is not correctly setup provision it and delegate execution\"\"\"\\nfrom __future__ import absolute_import, unicode_literals\\n\\nimport os\\n\\nfrom tox.exception import InvocationError\\n\\n\\ndef provision_tox(provision_venv, args):\\n    ensure_meta_env_up_to_date(provision_venv)\\n    with provision_venv.new_action(\"provision\") as action:\\n        provision_args = [str(provision_venv.envconfig.envpython), \"-m\", \"tox\"] + args\\n        try:\\n            env = os.environ.copy()\\n            env[str(\"TOX_PROVISION\")] = str(\"1\")\\n            env.pop(\"__PYVENV_LAUNCHER__\", None)\\n            action.popen(provision_args, redirect=False, report_fail=False, env=env)\\n            return 0\\n        except InvocationError as exception:\\n            return exception.exit_code\\n\\n\\ndef ensure_meta_env_up_to_date(provision_venv):\\n    if provision_venv.setupenv():\\n        provision_venv.finishvenv()\\n'"}, {"func_args": {"source": "'\"\"\"In case the tox environment is not correctly setup provision it and delegate execution\"\"\"\\nfrom __future__ import absolute_import, unicode_literals\\n\\nimport os\\n\\nfrom tox.exception import InvocationError\\n\\n\\ndef provision_tox(provision_venv, args):\\n    ensure_meta_env_up_to_date(provision_venv)\\n    with provision_venv.new_action(\"provision\") as action:\\n        provision_args = [str(provision_venv.envconfig.envpython), \"-m\", \"tox\"] + args\\n        try:\\n            env = os.environ.copy()\\n            env[str(\"TOX_PROVISION\")] = str(\"1\")\\n            env.pop(\"__PYVENV_LAUNCHER__\", None)\\n            action.popen(provision_args, redirect=False, report_fail=False, env=env)\\n            return 0\\n        except InvocationError as exception:\\n            return exception.exit_code\\n\\n\\ndef ensure_meta_env_up_to_date(provision_venv):\\n    if provision_venv.setupenv():\\n        provision_venv.finishvenv()\\n'"}, "return_value": "'\"\"\"In case the tox environment is not correctly setup provision it and delegate execution\"\"\"\\nfrom __future__ import absolute_import, unicode_literals\\n\\nimport os\\n\\nfrom tox.exception import InvocationError\\n\\n\\ndef provision_tox(provision_venv, args):\\n    ensure_meta_env_up_to_date(provision_venv)\\n    with provision_venv.new_action(\"provision\") as action:\\n        provision_args = [str(provision_venv.envconfig.envpython), \"-m\", \"tox\"] + args\\n        try:\\n            env = os.environ.copy()\\n            env[str(\"TOX_PROVISION\")] = str(\"1\")\\n            env.pop(\"__PYVENV_LAUNCHER__\", None)\\n            action.popen(provision_args, redirect=False, report_fail=False, env=env)\\n            return 0\\n        except InvocationError as exception:\\n            return exception.exit_code\\n\\n\\ndef ensure_meta_env_up_to_date(provision_venv):\\n    if provision_venv.setupenv():\\n        provision_venv.finishvenv()\\n'"}, {"func_args": {"source": "''"}, "return_value": "''"}, {"func_args": {"source": "'import os\\nimport sys\\nfrom collections import OrderedDict, deque\\nfrom threading import Event, Semaphore, Thread\\n\\nfrom tox import reporter\\nfrom tox.config.parallel import ENV_VAR_KEY_PRIVATE as PARALLEL_ENV_VAR_KEY_PRIVATE\\nfrom tox.config.parallel import ENV_VAR_KEY_PUBLIC as PARALLEL_ENV_VAR_KEY_PUBLIC\\nfrom tox.exception import InvocationError\\nfrom tox.util.main import MAIN_FILE\\nfrom tox.util.spinner import Spinner\\n\\n\\ndef run_parallel(config, venv_dict):\\n    \"\"\"here we\\'ll just start parallel sub-processes\"\"\"\\n    live_out = config.option.parallel_live\\n    disable_spinner = bool(os.environ.get(\"TOX_PARALLEL_NO_SPINNER\") == \"1\")\\n    args = [sys.executable, MAIN_FILE] + config.args\\n    try:\\n        position = args.index(\"--\")\\n    except ValueError:\\n        position = len(args)\\n\\n    max_parallel = config.option.parallel\\n    if max_parallel is None:\\n        max_parallel = len(venv_dict)\\n    semaphore = Semaphore(max_parallel)\\n    finished = Event()\\n\\n    show_progress = (\\n        not disable_spinner and not live_out and reporter.verbosity() > reporter.Verbosity.QUIET\\n    )\\n\\n    with Spinner(enabled=show_progress) as spinner:\\n\\n        def run_in_thread(tox_env, os_env, processes):\\n            output = None\\n            print_out = None\\n            env_name = tox_env.envconfig.envname\\n            status = \"skipped tests\" if config.option.notest else None\\n            try:\\n                os_env[str(PARALLEL_ENV_VAR_KEY_PRIVATE)] = str(env_name)\\n                os_env[str(PARALLEL_ENV_VAR_KEY_PUBLIC)] = str(env_name)\\n                args_sub = list(args)\\n                if hasattr(tox_env, \"package\"):\\n                    args_sub.insert(position, str(tox_env.package))\\n                    args_sub.insert(position, \"--installpkg\")\\n                if tox_env.get_result_json_path():\\n                    result_json_index = args_sub.index(\"--result-json\")\\n                    args_sub[result_json_index + 1] = \"{}\".format(tox_env.get_result_json_path())\\n                with tox_env.new_action(\"parallel {}\".format(tox_env.name)) as action:\\n\\n                    def collect_process(process):\\n                        processes[tox_env] = (action, process)\\n\\n                    print_out = not live_out and tox_env.envconfig.parallel_show_output\\n                    output = action.popen(\\n                        args=args_sub,\\n                        env=os_env,\\n                        redirect=not live_out,\\n                        capture_err=print_out,\\n                        callback=collect_process,\\n                        returnout=print_out,\\n                    )\\n\\n            except InvocationError as err:\\n                status = \"parallel child exit code {}\".format(err.exit_code)\\n            finally:\\n                semaphore.release()\\n                finished.set()\\n                tox_env.status = status\\n                done.add(env_name)\\n                outcome = spinner.succeed\\n                if config.option.notest:\\n                    outcome = spinner.skip\\n                elif status is not None:\\n                    outcome = spinner.fail\\n                outcome(env_name)\\n                if print_out and output is not None:\\n                    reporter.verbosity0(output)\\n\\n        threads = deque()\\n        processes = {}\\n        todo_keys = set(venv_dict.keys())\\n        todo = OrderedDict((n, todo_keys & set(v.envconfig.depends)) for n, v in venv_dict.items())\\n        done = set()\\n        try:\\n            while todo:\\n                for name, depends in list(todo.items()):\\n                    if depends - done:\\n                        # skip if has unfinished dependencies\\n                        continue\\n                    del todo[name]\\n                    venv = venv_dict[name]\\n                    semaphore.acquire(blocking=True)\\n                    spinner.add(name)\\n                    thread = Thread(\\n                        target=run_in_thread,\\n                        args=(venv, os.environ.copy(), processes),\\n                    )\\n                    thread.daemon = True\\n                    thread.start()\\n                    threads.append(thread)\\n                if todo:\\n                    # wait until someone finishes and retry queuing jobs\\n                    finished.wait()\\n                    finished.clear()\\n            while threads:\\n                threads = [\\n                    thread for thread in threads if not thread.join(0.1) and thread.is_alive()\\n                ]\\n        except KeyboardInterrupt:\\n            reporter.verbosity0(\\n                \"[{}] KeyboardInterrupt parallel - stopping children\".format(os.getpid()),\\n            )\\n            while True:\\n                # do not allow to interrupt until children interrupt\\n                try:\\n                    # putting it inside a thread so it\\'s not interrupted\\n                    stopper = Thread(target=_stop_child_processes, args=(processes, threads))\\n                    stopper.start()\\n                    stopper.join()\\n                except KeyboardInterrupt:\\n                    continue\\n                raise KeyboardInterrupt\\n\\n\\ndef _stop_child_processes(processes, main_threads):\\n    \"\"\"A three level stop mechanism for children - INT (250ms) -> TERM (100ms) -> KILL\"\"\"\\n\\n    # first stop children\\n    def shutdown(tox_env, action, process):\\n        action.handle_interrupt(process)\\n\\n    threads = [Thread(target=shutdown, args=(n, a, p)) for n, (a, p) in processes.items()]\\n    for thread in threads:\\n        thread.start()\\n    for thread in threads:\\n        thread.join()\\n\\n    # then its threads\\n    for thread in main_threads:\\n        thread.join()\\n'"}, "return_value": "'import os\\nimport sys\\nfrom collections import OrderedDict, deque\\nfrom threading import Event, Semaphore, Thread\\n\\nfrom tox import reporter\\nfrom tox.config.parallel import ENV_VAR_KEY_PRIVATE as PARALLEL_ENV_VAR_KEY_PRIVATE\\nfrom tox.config.parallel import ENV_VAR_KEY_PUBLIC as PARALLEL_ENV_VAR_KEY_PUBLIC\\nfrom tox.exception import InvocationError\\nfrom tox.util.main import MAIN_FILE\\nfrom tox.util.spinner import Spinner\\n\\n\\ndef run_parallel(config, venv_dict):\\n    \"\"\"here we\\'ll just start parallel sub-processes\"\"\"\\n    live_out = config.option.parallel_live\\n    disable_spinner = bool(os.environ.get(\"TOX_PARALLEL_NO_SPINNER\") == \"1\")\\n    args = [sys.executable, MAIN_FILE] + config.args\\n    try:\\n        position = args.index(\"--\")\\n    except ValueError:\\n        position = len(args)\\n\\n    max_parallel = config.option.parallel\\n    if max_parallel is None:\\n        max_parallel = len(venv_dict)\\n    semaphore = Semaphore(max_parallel)\\n    finished = Event()\\n\\n    show_progress = (\\n        not disable_spinner and not live_out and reporter.verbosity() > reporter.Verbosity.QUIET\\n    )\\n\\n    with Spinner(enabled=show_progress) as spinner:\\n\\n        def run_in_thread(tox_env, os_env, processes):\\n            output = None\\n            print_out = None\\n            env_name = tox_env.envconfig.envname\\n            status = \"skipped tests\" if config.option.notest else None\\n            try:\\n                os_env[str(PARALLEL_ENV_VAR_KEY_PRIVATE)] = str(env_name)\\n                os_env[str(PARALLEL_ENV_VAR_KEY_PUBLIC)] = str(env_name)\\n                args_sub = list(args)\\n                if hasattr(tox_env, \"package\"):\\n                    args_sub.insert(position, str(tox_env.package))\\n                    args_sub.insert(position, \"--installpkg\")\\n                if tox_env.get_result_json_path():\\n                    result_json_index = args_sub.index(\"--result-json\")\\n                    args_sub[result_json_index + 1] = \"{}\".format(tox_env.get_result_json_path())\\n                with tox_env.new_action(\"parallel {}\".format(tox_env.name)) as action:\\n\\n                    def collect_process(process):\\n                        processes[tox_env] = (action, process)\\n\\n                    print_out = not live_out and tox_env.envconfig.parallel_show_output\\n                    output = action.popen(\\n                        args=args_sub,\\n                        env=os_env,\\n                        redirect=not live_out,\\n                        capture_err=print_out,\\n                        callback=collect_process,\\n                        returnout=print_out,\\n                    )\\n\\n            except InvocationError as err:\\n                status = \"parallel child exit code {}\".format(err.exit_code)\\n            finally:\\n                semaphore.release()\\n                finished.set()\\n                tox_env.status = status\\n                done.add(env_name)\\n                outcome = spinner.succeed\\n                if config.option.notest:\\n                    outcome = spinner.skip\\n                elif status is not None:\\n                    outcome = spinner.fail\\n                outcome(env_name)\\n                if print_out and output is not None:\\n                    reporter.verbosity0(output)\\n\\n        threads = deque()\\n        processes = {}\\n        todo_keys = set(venv_dict.keys())\\n        todo = OrderedDict((n, todo_keys & set(v.envconfig.depends)) for n, v in venv_dict.items())\\n        done = set()\\n        try:\\n            while todo:\\n                for name, depends in list(todo.items()):\\n                    if depends - done:\\n                        # skip if has unfinished dependencies\\n                        continue\\n                    del todo[name]\\n                    venv = venv_dict[name]\\n                    semaphore.acquire(blocking=True)\\n                    spinner.add(name)\\n                    thread = Thread(\\n                        target=run_in_thread,\\n                        args=(venv, os.environ.copy(), processes),\\n                    )\\n                    thread.daemon = True\\n                    thread.start()\\n                    threads.append(thread)\\n                if todo:\\n                    # wait until someone finishes and retry queuing jobs\\n                    finished.wait()\\n                    finished.clear()\\n            while threads:\\n                threads = [\\n                    thread for thread in threads if not thread.join(0.1) and thread.is_alive()\\n                ]\\n        except KeyboardInterrupt:\\n            reporter.verbosity0(\\n                \"[{}] KeyboardInterrupt parallel - stopping children\".format(os.getpid()),\\n            )\\n            while True:\\n                # do not allow to interrupt until children interrupt\\n                try:\\n                    # putting it inside a thread so it\\'s not interrupted\\n                    stopper = Thread(target=_stop_child_processes, args=(processes, threads))\\n                    stopper.start()\\n                    stopper.join()\\n                except KeyboardInterrupt:\\n                    continue\\n                raise KeyboardInterrupt\\n\\n\\ndef _stop_child_processes(processes, main_threads):\\n    \"\"\"A three level stop mechanism for children - INT (250ms) -> TERM (100ms) -> KILL\"\"\"\\n\\n    # first stop children\\n    def shutdown(tox_env, action, process):\\n        action.handle_interrupt(process)\\n\\n    threads = [Thread(target=shutdown, args=(n, a, p)) for n, (a, p) in processes.items()]\\n    for thread in threads:\\n        thread.start()\\n    for thread in threads:\\n        thread.join()\\n\\n    # then its threads\\n    for thread in main_threads:\\n        thread.join()\\n'"}, {"func_args": {"source": "'import os\\nimport sys\\nfrom collections import OrderedDict, deque\\nfrom threading import Event, Semaphore, Thread\\n\\nfrom tox import reporter\\nfrom tox.config.parallel import ENV_VAR_KEY_PRIVATE as PARALLEL_ENV_VAR_KEY_PRIVATE\\nfrom tox.config.parallel import ENV_VAR_KEY_PUBLIC as PARALLEL_ENV_VAR_KEY_PUBLIC\\nfrom tox.exception import InvocationError\\nfrom tox.util.main import MAIN_FILE\\nfrom tox.util.spinner import Spinner\\n\\n\\ndef run_parallel(config, venv_dict):\\n    \"\"\"here we\\'ll just start parallel sub-processes\"\"\"\\n    live_out = config.option.parallel_live\\n    disable_spinner = bool(os.environ.get(\"TOX_PARALLEL_NO_SPINNER\") == \"1\")\\n    args = [sys.executable, MAIN_FILE] + config.args\\n    try:\\n        position = args.index(\"--\")\\n    except ValueError:\\n        position = len(args)\\n\\n    max_parallel = config.option.parallel\\n    if max_parallel is None:\\n        max_parallel = len(venv_dict)\\n    semaphore = Semaphore(max_parallel)\\n    finished = Event()\\n\\n    show_progress = (\\n        not disable_spinner and not live_out and reporter.verbosity() > reporter.Verbosity.QUIET\\n    )\\n\\n    with Spinner(enabled=show_progress) as spinner:\\n\\n        def run_in_thread(tox_env, os_env, processes):\\n            output = None\\n            print_out = None\\n            env_name = tox_env.envconfig.envname\\n            status = \"skipped tests\" if config.option.notest else None\\n            try:\\n                os_env[str(PARALLEL_ENV_VAR_KEY_PRIVATE)] = str(env_name)\\n                os_env[str(PARALLEL_ENV_VAR_KEY_PUBLIC)] = str(env_name)\\n                args_sub = list(args)\\n                if hasattr(tox_env, \"package\"):\\n                    args_sub.insert(position, str(tox_env.package))\\n                    args_sub.insert(position, \"--installpkg\")\\n                if tox_env.get_result_json_path():\\n                    result_json_index = args_sub.index(\"--result-json\")\\n                    args_sub[result_json_index + 1] = \"{}\".format(tox_env.get_result_json_path())\\n                with tox_env.new_action(\"parallel {}\".format(tox_env.name)) as action:\\n\\n                    def collect_process(process):\\n                        processes[tox_env] = (action, process)\\n\\n                    print_out = not live_out and tox_env.envconfig.parallel_show_output\\n                    output = action.popen(\\n                        args=args_sub,\\n                        env=os_env,\\n                        redirect=not live_out,\\n                        capture_err=print_out,\\n                        callback=collect_process,\\n                        returnout=print_out,\\n                    )\\n\\n            except InvocationError as err:\\n                status = \"parallel child exit code {}\".format(err.exit_code)\\n            finally:\\n                semaphore.release()\\n                finished.set()\\n                tox_env.status = status\\n                done.add(env_name)\\n                outcome = spinner.succeed\\n                if config.option.notest:\\n                    outcome = spinner.skip\\n                elif status is not None:\\n                    outcome = spinner.fail\\n                outcome(env_name)\\n                if print_out and output is not None:\\n                    reporter.verbosity0(output)\\n\\n        threads = deque()\\n        processes = {}\\n        todo_keys = set(venv_dict.keys())\\n        todo = OrderedDict((n, todo_keys & set(v.envconfig.depends)) for n, v in venv_dict.items())\\n        done = set()\\n        try:\\n            while todo:\\n                for name, depends in list(todo.items()):\\n                    if depends - done:\\n                        # skip if has unfinished dependencies\\n                        continue\\n                    del todo[name]\\n                    venv = venv_dict[name]\\n                    semaphore.acquire(blocking=True)\\n                    spinner.add(name)\\n                    thread = Thread(\\n                        target=run_in_thread,\\n                        args=(venv, os.environ.copy(), processes),\\n                    )\\n                    thread.daemon = True\\n                    thread.start()\\n                    threads.append(thread)\\n                if todo:\\n                    # wait until someone finishes and retry queuing jobs\\n                    finished.wait()\\n                    finished.clear()\\n            while threads:\\n                threads = [\\n                    thread for thread in threads if not thread.join(0.1) and thread.is_alive()\\n                ]\\n        except KeyboardInterrupt:\\n            reporter.verbosity0(\\n                \"[{}] KeyboardInterrupt parallel - stopping children\".format(os.getpid()),\\n            )\\n            while True:\\n                # do not allow to interrupt until children interrupt\\n                try:\\n                    # putting it inside a thread so it\\'s not interrupted\\n                    stopper = Thread(target=_stop_child_processes, args=(processes, threads))\\n                    stopper.start()\\n                    stopper.join()\\n                except KeyboardInterrupt:\\n                    continue\\n                raise KeyboardInterrupt\\n\\n\\ndef _stop_child_processes(processes, main_threads):\\n    \"\"\"A three level stop mechanism for children - INT (250ms) -> TERM (100ms) -> KILL\"\"\"\\n\\n    # first stop children\\n    def shutdown(tox_env, action, process):\\n        action.handle_interrupt(process)\\n\\n    threads = [Thread(target=shutdown, args=(n, a, p)) for n, (a, p) in processes.items()]\\n    for thread in threads:\\n        thread.start()\\n    for thread in threads:\\n        thread.join()\\n\\n    # then its threads\\n    for thread in main_threads:\\n        thread.join()\\n'"}, "return_value": "'import os\\nimport sys\\nfrom collections import OrderedDict, deque\\nfrom threading import Event, Semaphore, Thread\\n\\nfrom tox import reporter\\nfrom tox.config.parallel import ENV_VAR_KEY_PRIVATE as PARALLEL_ENV_VAR_KEY_PRIVATE\\nfrom tox.config.parallel import ENV_VAR_KEY_PUBLIC as PARALLEL_ENV_VAR_KEY_PUBLIC\\nfrom tox.exception import InvocationError\\nfrom tox.util.main import MAIN_FILE\\nfrom tox.util.spinner import Spinner\\n\\n\\ndef run_parallel(config, venv_dict):\\n    \"\"\"here we\\'ll just start parallel sub-processes\"\"\"\\n    live_out = config.option.parallel_live\\n    disable_spinner = bool(os.environ.get(\"TOX_PARALLEL_NO_SPINNER\") == \"1\")\\n    args = [sys.executable, MAIN_FILE] + config.args\\n    try:\\n        position = args.index(\"--\")\\n    except ValueError:\\n        position = len(args)\\n\\n    max_parallel = config.option.parallel\\n    if max_parallel is None:\\n        max_parallel = len(venv_dict)\\n    semaphore = Semaphore(max_parallel)\\n    finished = Event()\\n\\n    show_progress = (\\n        not disable_spinner and not live_out and reporter.verbosity() > reporter.Verbosity.QUIET\\n    )\\n\\n    with Spinner(enabled=show_progress) as spinner:\\n\\n        def run_in_thread(tox_env, os_env, processes):\\n            output = None\\n            print_out = None\\n            env_name = tox_env.envconfig.envname\\n            status = \"skipped tests\" if config.option.notest else None\\n            try:\\n                os_env[str(PARALLEL_ENV_VAR_KEY_PRIVATE)] = str(env_name)\\n                os_env[str(PARALLEL_ENV_VAR_KEY_PUBLIC)] = str(env_name)\\n                args_sub = list(args)\\n                if hasattr(tox_env, \"package\"):\\n                    args_sub.insert(position, str(tox_env.package))\\n                    args_sub.insert(position, \"--installpkg\")\\n                if tox_env.get_result_json_path():\\n                    result_json_index = args_sub.index(\"--result-json\")\\n                    args_sub[result_json_index + 1] = \"{}\".format(tox_env.get_result_json_path())\\n                with tox_env.new_action(\"parallel {}\".format(tox_env.name)) as action:\\n\\n                    def collect_process(process):\\n                        processes[tox_env] = (action, process)\\n\\n                    print_out = not live_out and tox_env.envconfig.parallel_show_output\\n                    output = action.popen(\\n                        args=args_sub,\\n                        env=os_env,\\n                        redirect=not live_out,\\n                        capture_err=print_out,\\n                        callback=collect_process,\\n                        returnout=print_out,\\n                    )\\n\\n            except InvocationError as err:\\n                status = \"parallel child exit code {}\".format(err.exit_code)\\n            finally:\\n                semaphore.release()\\n                finished.set()\\n                tox_env.status = status\\n                done.add(env_name)\\n                outcome = spinner.succeed\\n                if config.option.notest:\\n                    outcome = spinner.skip\\n                elif status is not None:\\n                    outcome = spinner.fail\\n                outcome(env_name)\\n                if print_out and output is not None:\\n                    reporter.verbosity0(output)\\n\\n        threads = deque()\\n        processes = {}\\n        todo_keys = set(venv_dict.keys())\\n        todo = OrderedDict((n, todo_keys & set(v.envconfig.depends)) for n, v in venv_dict.items())\\n        done = set()\\n        try:\\n            while todo:\\n                for name, depends in list(todo.items()):\\n                    if depends - done:\\n                        # skip if has unfinished dependencies\\n                        continue\\n                    del todo[name]\\n                    venv = venv_dict[name]\\n                    semaphore.acquire(blocking=True)\\n                    spinner.add(name)\\n                    thread = Thread(\\n                        target=run_in_thread,\\n                        args=(venv, os.environ.copy(), processes),\\n                    )\\n                    thread.daemon = True\\n                    thread.start()\\n                    threads.append(thread)\\n                if todo:\\n                    # wait until someone finishes and retry queuing jobs\\n                    finished.wait()\\n                    finished.clear()\\n            while threads:\\n                threads = [\\n                    thread for thread in threads if not thread.join(0.1) and thread.is_alive()\\n                ]\\n        except KeyboardInterrupt:\\n            reporter.verbosity0(\\n                \"[{}] KeyboardInterrupt parallel - stopping children\".format(os.getpid()),\\n            )\\n            while True:\\n                # do not allow to interrupt until children interrupt\\n                try:\\n                    # putting it inside a thread so it\\'s not interrupted\\n                    stopper = Thread(target=_stop_child_processes, args=(processes, threads))\\n                    stopper.start()\\n                    stopper.join()\\n                except KeyboardInterrupt:\\n                    continue\\n                raise KeyboardInterrupt\\n\\n\\ndef _stop_child_processes(processes, main_threads):\\n    \"\"\"A three level stop mechanism for children - INT (250ms) -> TERM (100ms) -> KILL\"\"\"\\n\\n    # first stop children\\n    def shutdown(tox_env, action, process):\\n        action.handle_interrupt(process)\\n\\n    threads = [Thread(target=shutdown, args=(n, a, p)) for n, (a, p) in processes.items()]\\n    for thread in threads:\\n        thread.start()\\n    for thread in threads:\\n        thread.join()\\n\\n    # then its threads\\n    for thread in main_threads:\\n        thread.join()\\n'"}, {"func_args": {"source": "'import py\\n\\nimport tox\\nfrom tox.exception import InvocationError\\n\\n\\ndef run_sequential(config, venv_dict):\\n    for venv in venv_dict.values():\\n        if venv.setupenv():\\n            if venv.envconfig.skip_install:\\n                venv.finishvenv()\\n            else:\\n                if venv.envconfig.usedevelop:\\n                    develop_pkg(venv, config.setupdir)\\n                elif config.skipsdist:\\n                    venv.finishvenv()\\n                else:\\n                    installpkg(venv, venv.package)\\n            if venv.status == 0:\\n                runenvreport(venv, config)\\n        if venv.status == 0:\\n            runtestenv(venv, config)\\n\\n\\ndef develop_pkg(venv, setupdir):\\n    with venv.new_action(\"developpkg\", setupdir) as action:\\n        try:\\n            venv.developpkg(setupdir, action)\\n            return True\\n        except InvocationError as exception:\\n            venv.status = exception\\n            return False\\n\\n\\ndef installpkg(venv, path):\\n    \"\"\"Install package in the specified virtual environment.\\n\\n    :param VenvConfig venv: Destination environment\\n    :param str path: Path to the distribution package.\\n    :return: True if package installed otherwise False.\\n    :rtype: bool\\n    \"\"\"\\n    venv.env_log.set_header(installpkg=py.path.local(path))\\n    with venv.new_action(\"installpkg\", path) as action:\\n        try:\\n            venv.installpkg(path, action)\\n            return True\\n        except tox.exception.InvocationError as exception:\\n            venv.status = exception\\n            return False\\n\\n\\ndef runenvreport(venv, config):\\n    \"\"\"\\n    Run an environment report to show which package\\n    versions are installed in the venv\\n    \"\"\"\\n    try:\\n        with venv.new_action(\"envreport\") as action:\\n            packages = config.pluginmanager.hook.tox_runenvreport(venv=venv, action=action)\\n        action.setactivity(\"installed\", \",\".join(packages))\\n        venv.env_log.set_installed(packages)\\n    except InvocationError as exception:\\n        venv.status = exception\\n\\n\\ndef runtestenv(venv, config, redirect=False):\\n    if venv.status == 0 and config.option.notest:\\n        venv.status = \"skipped tests\"\\n    else:\\n        if venv.status:\\n            return\\n        config.pluginmanager.hook.tox_runtest_pre(venv=venv)\\n        if venv.status == 0:\\n            config.pluginmanager.hook.tox_runtest(venv=venv, redirect=redirect)\\n        config.pluginmanager.hook.tox_runtest_post(venv=venv)\\n'"}, "return_value": "'import py\\n\\nimport tox\\nfrom tox.exception import InvocationError\\n\\n\\ndef run_sequential(config, venv_dict):\\n    for venv in venv_dict.values():\\n        if venv.setupenv():\\n            if venv.envconfig.skip_install:\\n                venv.finishvenv()\\n            else:\\n                if venv.envconfig.usedevelop:\\n                    develop_pkg(venv, config.setupdir)\\n                elif config.skipsdist:\\n                    venv.finishvenv()\\n                else:\\n                    installpkg(venv, venv.package)\\n            if venv.status == 0:\\n                runenvreport(venv, config)\\n        if venv.status == 0:\\n            runtestenv(venv, config)\\n\\n\\ndef develop_pkg(venv, setupdir):\\n    with venv.new_action(\"developpkg\", setupdir) as action:\\n        try:\\n            venv.developpkg(setupdir, action)\\n            return True\\n        except InvocationError as exception:\\n            venv.status = exception\\n            return False\\n\\n\\ndef installpkg(venv, path):\\n    \"\"\"Install package in the specified virtual environment.\\n\\n    :param VenvConfig venv: Destination environment\\n    :param str path: Path to the distribution package.\\n    :return: True if package installed otherwise False.\\n    :rtype: bool\\n    \"\"\"\\n    venv.env_log.set_header(installpkg=py.path.local(path))\\n    with venv.new_action(\"installpkg\", path) as action:\\n        try:\\n            venv.installpkg(path, action)\\n            return True\\n        except tox.exception.InvocationError as exception:\\n            venv.status = exception\\n            return False\\n\\n\\ndef runenvreport(venv, config):\\n    \"\"\"\\n    Run an environment report to show which package\\n    versions are installed in the venv\\n    \"\"\"\\n    try:\\n        with venv.new_action(\"envreport\") as action:\\n            packages = config.pluginmanager.hook.tox_runenvreport(venv=venv, action=action)\\n        action.setactivity(\"installed\", \",\".join(packages))\\n        venv.env_log.set_installed(packages)\\n    except InvocationError as exception:\\n        venv.status = exception\\n\\n\\ndef runtestenv(venv, config, redirect=False):\\n    if venv.status == 0 and config.option.notest:\\n        venv.status = \"skipped tests\"\\n    else:\\n        if venv.status:\\n            return\\n        config.pluginmanager.hook.tox_runtest_pre(venv=venv)\\n        if venv.status == 0:\\n            config.pluginmanager.hook.tox_runtest(venv=venv, redirect=redirect)\\n        config.pluginmanager.hook.tox_runtest_post(venv=venv)\\n'"}, {"func_args": {"source": "'import py\\n\\nimport tox\\nfrom tox.exception import InvocationError\\n\\n\\ndef run_sequential(config, venv_dict):\\n    for venv in venv_dict.values():\\n        if venv.setupenv():\\n            if venv.envconfig.skip_install:\\n                venv.finishvenv()\\n            else:\\n                if venv.envconfig.usedevelop:\\n                    develop_pkg(venv, config.setupdir)\\n                elif config.skipsdist:\\n                    venv.finishvenv()\\n                else:\\n                    installpkg(venv, venv.package)\\n            if venv.status == 0:\\n                runenvreport(venv, config)\\n        if venv.status == 0:\\n            runtestenv(venv, config)\\n\\n\\ndef develop_pkg(venv, setupdir):\\n    with venv.new_action(\"developpkg\", setupdir) as action:\\n        try:\\n            venv.developpkg(setupdir, action)\\n            return True\\n        except InvocationError as exception:\\n            venv.status = exception\\n            return False\\n\\n\\ndef installpkg(venv, path):\\n    \"\"\"Install package in the specified virtual environment.\\n\\n    :param VenvConfig venv: Destination environment\\n    :param str path: Path to the distribution package.\\n    :return: True if package installed otherwise False.\\n    :rtype: bool\\n    \"\"\"\\n    venv.env_log.set_header(installpkg=py.path.local(path))\\n    with venv.new_action(\"installpkg\", path) as action:\\n        try:\\n            venv.installpkg(path, action)\\n            return True\\n        except tox.exception.InvocationError as exception:\\n            venv.status = exception\\n            return False\\n\\n\\ndef runenvreport(venv, config):\\n    \"\"\"\\n    Run an environment report to show which package\\n    versions are installed in the venv\\n    \"\"\"\\n    try:\\n        with venv.new_action(\"envreport\") as action:\\n            packages = config.pluginmanager.hook.tox_runenvreport(venv=venv, action=action)\\n        action.setactivity(\"installed\", \",\".join(packages))\\n        venv.env_log.set_installed(packages)\\n    except InvocationError as exception:\\n        venv.status = exception\\n\\n\\ndef runtestenv(venv, config, redirect=False):\\n    if venv.status == 0 and config.option.notest:\\n        venv.status = \"skipped tests\"\\n    else:\\n        if venv.status:\\n            return\\n        config.pluginmanager.hook.tox_runtest_pre(venv=venv)\\n        if venv.status == 0:\\n            config.pluginmanager.hook.tox_runtest(venv=venv, redirect=redirect)\\n        config.pluginmanager.hook.tox_runtest_post(venv=venv)\\n'"}, "return_value": "'import py\\n\\nimport tox\\nfrom tox.exception import InvocationError\\n\\n\\ndef run_sequential(config, venv_dict):\\n    for venv in venv_dict.values():\\n        if venv.setupenv():\\n            if venv.envconfig.skip_install:\\n                venv.finishvenv()\\n            else:\\n                if venv.envconfig.usedevelop:\\n                    develop_pkg(venv, config.setupdir)\\n                elif config.skipsdist:\\n                    venv.finishvenv()\\n                else:\\n                    installpkg(venv, venv.package)\\n            if venv.status == 0:\\n                runenvreport(venv, config)\\n        if venv.status == 0:\\n            runtestenv(venv, config)\\n\\n\\ndef develop_pkg(venv, setupdir):\\n    with venv.new_action(\"developpkg\", setupdir) as action:\\n        try:\\n            venv.developpkg(setupdir, action)\\n            return True\\n        except InvocationError as exception:\\n            venv.status = exception\\n            return False\\n\\n\\ndef installpkg(venv, path):\\n    \"\"\"Install package in the specified virtual environment.\\n\\n    :param VenvConfig venv: Destination environment\\n    :param str path: Path to the distribution package.\\n    :return: True if package installed otherwise False.\\n    :rtype: bool\\n    \"\"\"\\n    venv.env_log.set_header(installpkg=py.path.local(path))\\n    with venv.new_action(\"installpkg\", path) as action:\\n        try:\\n            venv.installpkg(path, action)\\n            return True\\n        except tox.exception.InvocationError as exception:\\n            venv.status = exception\\n            return False\\n\\n\\ndef runenvreport(venv, config):\\n    \"\"\"\\n    Run an environment report to show which package\\n    versions are installed in the venv\\n    \"\"\"\\n    try:\\n        with venv.new_action(\"envreport\") as action:\\n            packages = config.pluginmanager.hook.tox_runenvreport(venv=venv, action=action)\\n        action.setactivity(\"installed\", \",\".join(packages))\\n        venv.env_log.set_installed(packages)\\n    except InvocationError as exception:\\n        venv.status = exception\\n\\n\\ndef runtestenv(venv, config, redirect=False):\\n    if venv.status == 0 and config.option.notest:\\n        venv.status = \"skipped tests\"\\n    else:\\n        if venv.status:\\n            return\\n        config.pluginmanager.hook.tox_runtest_pre(venv=venv)\\n        if venv.status == 0:\\n            config.pluginmanager.hook.tox_runtest(venv=venv, redirect=redirect)\\n        config.pluginmanager.hook.tox_runtest_post(venv=venv)\\n'"}, {"func_args": {"source": "'import sys\\nfrom collections import OrderedDict\\n\\nfrom packaging.requirements import Requirement\\nfrom six import StringIO\\nfrom six.moves import configparser\\n\\nfrom tox import reporter\\nfrom tox.util.stdlib import importlib_metadata\\n\\nDO_NOT_SHOW_CONFIG_ATTRIBUTES = (\\n    \"interpreters\",\\n    \"envconfigs\",\\n    \"envlist\",\\n    \"pluginmanager\",\\n    \"envlist_explicit\",\\n)\\n\\n\\ndef show_config(config):\\n    parser = configparser.RawConfigParser()\\n\\n    if not config.envlist_explicit or reporter.verbosity() >= reporter.Verbosity.INFO:\\n        tox_info(config, parser)\\n        version_info(parser)\\n    tox_envs_info(config, parser)\\n\\n    content = StringIO()\\n    parser.write(content)\\n    value = content.getvalue().rstrip()\\n    reporter.verbosity0(value)\\n\\n\\ndef tox_envs_info(config, parser):\\n    if config.envlist_explicit:\\n        env_list = config.envlist\\n    elif config.option.listenvs:\\n        env_list = config.envlist_default\\n    else:\\n        env_list = list(config.envconfigs.keys())\\n    for name in env_list:\\n        env_config = config.envconfigs[name]\\n        values = OrderedDict(\\n            (attr.name, str(getattr(env_config, attr.name)))\\n            for attr in config._parser._testenv_attr\\n        )\\n        section = \"testenv:{}\".format(name)\\n        set_section(parser, section, values)\\n\\n\\ndef tox_info(config, parser):\\n    info = OrderedDict(\\n        (i, str(getattr(config, i)))\\n        for i in sorted(dir(config))\\n        if not i.startswith(\"_\") and i not in DO_NOT_SHOW_CONFIG_ATTRIBUTES\\n    )\\n    info[\"host_python\"] = sys.executable\\n    set_section(parser, \"tox\", info)\\n\\n\\ndef version_info(parser):\\n    versions = OrderedDict()\\n    to_visit = {\"tox\"}\\n    while to_visit:\\n        current = to_visit.pop()\\n        current_dist = importlib_metadata.distribution(current)\\n        current_name = current_dist.metadata[\"name\"]\\n        versions[current_name] = current_dist.version\\n        if current_dist.requires is not None:\\n            for require in current_dist.requires:\\n                pkg = Requirement(require)\\n                if (\\n                    pkg.marker is None or pkg.marker.evaluate({\"extra\": \"\"})\\n                ) and pkg.name not in versions:\\n                    to_visit.add(pkg.name)\\n    set_section(parser, \"tox:versions\", versions)\\n\\n\\ndef set_section(parser, section, values):\\n    parser.add_section(section)\\n    for key, value in values.items():\\n        parser.set(section, key, value)\\n'"}, "return_value": "'import sys\\nfrom collections import OrderedDict\\n\\nfrom packaging.requirements import Requirement\\nfrom six import StringIO\\nfrom six.moves import configparser\\n\\nfrom tox import reporter\\nfrom tox.util.stdlib import importlib_metadata\\n\\nDO_NOT_SHOW_CONFIG_ATTRIBUTES = (\\n    \"interpreters\",\\n    \"envconfigs\",\\n    \"envlist\",\\n    \"pluginmanager\",\\n    \"envlist_explicit\",\\n)\\n\\n\\ndef show_config(config):\\n    parser = configparser.RawConfigParser()\\n\\n    if not config.envlist_explicit or reporter.verbosity() >= reporter.Verbosity.INFO:\\n        tox_info(config, parser)\\n        version_info(parser)\\n    tox_envs_info(config, parser)\\n\\n    content = StringIO()\\n    parser.write(content)\\n    value = content.getvalue().rstrip()\\n    reporter.verbosity0(value)\\n\\n\\ndef tox_envs_info(config, parser):\\n    if config.envlist_explicit:\\n        env_list = config.envlist\\n    elif config.option.listenvs:\\n        env_list = config.envlist_default\\n    else:\\n        env_list = list(config.envconfigs.keys())\\n    for name in env_list:\\n        env_config = config.envconfigs[name]\\n        values = OrderedDict(\\n            (attr.name, str(getattr(env_config, attr.name)))\\n            for attr in config._parser._testenv_attr\\n        )\\n        section = \"testenv:{}\".format(name)\\n        set_section(parser, section, values)\\n\\n\\ndef tox_info(config, parser):\\n    info = OrderedDict(\\n        (i, str(getattr(config, i)))\\n        for i in sorted(dir(config))\\n        if not i.startswith(\"_\") and i not in DO_NOT_SHOW_CONFIG_ATTRIBUTES\\n    )\\n    info[\"host_python\"] = sys.executable\\n    set_section(parser, \"tox\", info)\\n\\n\\ndef version_info(parser):\\n    versions = OrderedDict()\\n    to_visit = {\"tox\"}\\n    while to_visit:\\n        current = to_visit.pop()\\n        current_dist = importlib_metadata.distribution(current)\\n        current_name = current_dist.metadata[\"name\"]\\n        versions[current_name] = current_dist.version\\n        if current_dist.requires is not None:\\n            for require in current_dist.requires:\\n                pkg = Requirement(require)\\n                if (\\n                    pkg.marker is None or pkg.marker.evaluate({\"extra\": \"\"})\\n                ) and pkg.name not in versions:\\n                    to_visit.add(pkg.name)\\n    set_section(parser, \"tox:versions\", versions)\\n\\n\\ndef set_section(parser, section, values):\\n    parser.add_section(section)\\n    for key, value in values.items():\\n        parser.set(section, key, value)\\n'"}, {"func_args": {"source": "'import sys\\nfrom collections import OrderedDict\\n\\nfrom packaging.requirements import Requirement\\nfrom six import StringIO\\nfrom six.moves import configparser\\n\\nfrom tox import reporter\\nfrom tox.util.stdlib import importlib_metadata\\n\\nDO_NOT_SHOW_CONFIG_ATTRIBUTES = (\\n    \"interpreters\",\\n    \"envconfigs\",\\n    \"envlist\",\\n    \"pluginmanager\",\\n    \"envlist_explicit\",\\n)\\n\\n\\ndef show_config(config):\\n    parser = configparser.RawConfigParser()\\n\\n    if not config.envlist_explicit or reporter.verbosity() >= reporter.Verbosity.INFO:\\n        tox_info(config, parser)\\n        version_info(parser)\\n    tox_envs_info(config, parser)\\n\\n    content = StringIO()\\n    parser.write(content)\\n    value = content.getvalue().rstrip()\\n    reporter.verbosity0(value)\\n\\n\\ndef tox_envs_info(config, parser):\\n    if config.envlist_explicit:\\n        env_list = config.envlist\\n    elif config.option.listenvs:\\n        env_list = config.envlist_default\\n    else:\\n        env_list = list(config.envconfigs.keys())\\n    for name in env_list:\\n        env_config = config.envconfigs[name]\\n        values = OrderedDict(\\n            (attr.name, str(getattr(env_config, attr.name)))\\n            for attr in config._parser._testenv_attr\\n        )\\n        section = \"testenv:{}\".format(name)\\n        set_section(parser, section, values)\\n\\n\\ndef tox_info(config, parser):\\n    info = OrderedDict(\\n        (i, str(getattr(config, i)))\\n        for i in sorted(dir(config))\\n        if not i.startswith(\"_\") and i not in DO_NOT_SHOW_CONFIG_ATTRIBUTES\\n    )\\n    info[\"host_python\"] = sys.executable\\n    set_section(parser, \"tox\", info)\\n\\n\\ndef version_info(parser):\\n    versions = OrderedDict()\\n    to_visit = {\"tox\"}\\n    while to_visit:\\n        current = to_visit.pop()\\n        current_dist = importlib_metadata.distribution(current)\\n        current_name = current_dist.metadata[\"name\"]\\n        versions[current_name] = current_dist.version\\n        if current_dist.requires is not None:\\n            for require in current_dist.requires:\\n                pkg = Requirement(require)\\n                if (\\n                    pkg.marker is None or pkg.marker.evaluate({\"extra\": \"\"})\\n                ) and pkg.name not in versions:\\n                    to_visit.add(pkg.name)\\n    set_section(parser, \"tox:versions\", versions)\\n\\n\\ndef set_section(parser, section, values):\\n    parser.add_section(section)\\n    for key, value in values.items():\\n        parser.set(section, key, value)\\n'"}, "return_value": "'import sys\\nfrom collections import OrderedDict\\n\\nfrom packaging.requirements import Requirement\\nfrom six import StringIO\\nfrom six.moves import configparser\\n\\nfrom tox import reporter\\nfrom tox.util.stdlib import importlib_metadata\\n\\nDO_NOT_SHOW_CONFIG_ATTRIBUTES = (\\n    \"interpreters\",\\n    \"envconfigs\",\\n    \"envlist\",\\n    \"pluginmanager\",\\n    \"envlist_explicit\",\\n)\\n\\n\\ndef show_config(config):\\n    parser = configparser.RawConfigParser()\\n\\n    if not config.envlist_explicit or reporter.verbosity() >= reporter.Verbosity.INFO:\\n        tox_info(config, parser)\\n        version_info(parser)\\n    tox_envs_info(config, parser)\\n\\n    content = StringIO()\\n    parser.write(content)\\n    value = content.getvalue().rstrip()\\n    reporter.verbosity0(value)\\n\\n\\ndef tox_envs_info(config, parser):\\n    if config.envlist_explicit:\\n        env_list = config.envlist\\n    elif config.option.listenvs:\\n        env_list = config.envlist_default\\n    else:\\n        env_list = list(config.envconfigs.keys())\\n    for name in env_list:\\n        env_config = config.envconfigs[name]\\n        values = OrderedDict(\\n            (attr.name, str(getattr(env_config, attr.name)))\\n            for attr in config._parser._testenv_attr\\n        )\\n        section = \"testenv:{}\".format(name)\\n        set_section(parser, section, values)\\n\\n\\ndef tox_info(config, parser):\\n    info = OrderedDict(\\n        (i, str(getattr(config, i)))\\n        for i in sorted(dir(config))\\n        if not i.startswith(\"_\") and i not in DO_NOT_SHOW_CONFIG_ATTRIBUTES\\n    )\\n    info[\"host_python\"] = sys.executable\\n    set_section(parser, \"tox\", info)\\n\\n\\ndef version_info(parser):\\n    versions = OrderedDict()\\n    to_visit = {\"tox\"}\\n    while to_visit:\\n        current = to_visit.pop()\\n        current_dist = importlib_metadata.distribution(current)\\n        current_name = current_dist.metadata[\"name\"]\\n        versions[current_name] = current_dist.version\\n        if current_dist.requires is not None:\\n            for require in current_dist.requires:\\n                pkg = Requirement(require)\\n                if (\\n                    pkg.marker is None or pkg.marker.evaluate({\"extra\": \"\"})\\n                ) and pkg.name not in versions:\\n                    to_visit.add(pkg.name)\\n    set_section(parser, \"tox:versions\", versions)\\n\\n\\ndef set_section(parser, section, values):\\n    parser.add_section(section)\\n    for key, value in values.items():\\n        parser.set(section, key, value)\\n'"}, {"func_args": {"source": "'from __future__ import absolute_import, unicode_literals\\n\\nfrom tox import reporter as report\\n\\n\\ndef show_envs(config, all_envs=False, description=False):\\n    env_conf = config.envconfigs  # this contains all environments\\n    default = config.envlist_default  # this only the defaults\\n    ignore = {config.isolated_build_env, config.provision_tox_env}.union(default)\\n    extra = [e for e in env_conf if e not in ignore] if all_envs else []\\n\\n    if description and default:\\n        report.line(\"default environments:\")\\n    max_length = max(len(env) for env in (default + extra) or [\"\"])\\n\\n    def report_env(e):\\n        if description:\\n            text = env_conf[e].description or \"[no description]\"\\n            msg = \"{} -> {}\".format(e.ljust(max_length), text).strip()\\n        else:\\n            msg = e\\n        report.line(msg)\\n\\n    for e in default:\\n        report_env(e)\\n    if all_envs and extra:\\n        if description:\\n            if default:\\n                report.line(\"\")\\n            report.line(\"additional environments:\")\\n        for e in extra:\\n            report_env(e)\\n'"}, "return_value": "'from __future__ import absolute_import, unicode_literals\\n\\nfrom tox import reporter as report\\n\\n\\ndef show_envs(config, all_envs=False, description=False):\\n    env_conf = config.envconfigs  # this contains all environments\\n    default = config.envlist_default  # this only the defaults\\n    ignore = {config.isolated_build_env, config.provision_tox_env}.union(default)\\n    extra = [e for e in env_conf if e not in ignore] if all_envs else []\\n\\n    if description and default:\\n        report.line(\"default environments:\")\\n    max_length = max(len(env) for env in (default + extra) or [\"\"])\\n\\n    def report_env(e):\\n        if description:\\n            text = env_conf[e].description or \"[no description]\"\\n            msg = \"{} -> {}\".format(e.ljust(max_length), text).strip()\\n        else:\\n            msg = e\\n        report.line(msg)\\n\\n    for e in default:\\n        report_env(e)\\n    if all_envs and extra:\\n        if description:\\n            if default:\\n                report.line(\"\")\\n            report.line(\"additional environments:\")\\n        for e in extra:\\n            report_env(e)\\n'"}, {"func_args": {"source": "'from __future__ import absolute_import, unicode_literals\\n\\nfrom tox import reporter as report\\n\\n\\ndef show_envs(config, all_envs=False, description=False):\\n    env_conf = config.envconfigs  # this contains all environments\\n    default = config.envlist_default  # this only the defaults\\n    ignore = {config.isolated_build_env, config.provision_tox_env}.union(default)\\n    extra = [e for e in env_conf if e not in ignore] if all_envs else []\\n\\n    if description and default:\\n        report.line(\"default environments:\")\\n    max_length = max(len(env) for env in (default + extra) or [\"\"])\\n\\n    def report_env(e):\\n        if description:\\n            text = env_conf[e].description or \"[no description]\"\\n            msg = \"{} -> {}\".format(e.ljust(max_length), text).strip()\\n        else:\\n            msg = e\\n        report.line(msg)\\n\\n    for e in default:\\n        report_env(e)\\n    if all_envs and extra:\\n        if description:\\n            if default:\\n                report.line(\"\")\\n            report.line(\"additional environments:\")\\n        for e in extra:\\n            report_env(e)\\n'"}, "return_value": "'from __future__ import absolute_import, unicode_literals\\n\\nfrom tox import reporter as report\\n\\n\\ndef show_envs(config, all_envs=False, description=False):\\n    env_conf = config.envconfigs  # this contains all environments\\n    default = config.envlist_default  # this only the defaults\\n    ignore = {config.isolated_build_env, config.provision_tox_env}.union(default)\\n    extra = [e for e in env_conf if e not in ignore] if all_envs else []\\n\\n    if description and default:\\n        report.line(\"default environments:\")\\n    max_length = max(len(env) for env in (default + extra) or [\"\"])\\n\\n    def report_env(e):\\n        if description:\\n            text = env_conf[e].description or \"[no description]\"\\n            msg = \"{} -> {}\".format(e.ljust(max_length), text).strip()\\n        else:\\n            msg = e\\n        report.line(msg)\\n\\n    for e in default:\\n        report_env(e)\\n    if all_envs and extra:\\n        if description:\\n            if default:\\n                report.line(\"\")\\n            report.line(\"additional environments:\")\\n        for e in extra:\\n            report_env(e)\\n'"}, {"func_args": {"source": "'from __future__ import absolute_import, unicode_literals\\n\\nimport os\\nfrom contextlib import contextmanager\\n\\n\\n@contextmanager\\ndef set_os_env_var(env_var_name, value):\\n    \"\"\"Set an environment variable with unrolling once the context exists\"\"\"\\n    prev_value = os.environ.get(env_var_name)\\n    try:\\n        os.environ[env_var_name] = str(value)\\n        yield\\n    finally:\\n        if prev_value is None:\\n            del os.environ[env_var_name]\\n        else:\\n            os.environ[env_var_name] = prev_value\\n'"}, "return_value": "'from __future__ import absolute_import, unicode_literals\\n\\nimport os\\nfrom contextlib import contextmanager\\n\\n\\n@contextmanager\\ndef set_os_env_var(env_var_name, value):\\n    \"\"\"Set an environment variable with unrolling once the context exists\"\"\"\\n    prev_value = os.environ.get(env_var_name)\\n    try:\\n        os.environ[env_var_name] = str(value)\\n        yield\\n    finally:\\n        if prev_value is None:\\n            del os.environ[env_var_name]\\n        else:\\n            os.environ[env_var_name] = prev_value\\n'"}, {"func_args": {"source": "'from __future__ import absolute_import, unicode_literals\\n\\nimport os\\nfrom contextlib import contextmanager\\n\\n\\n@contextmanager\\ndef set_os_env_var(env_var_name, value):\\n    \"\"\"Set an environment variable with unrolling once the context exists\"\"\"\\n    prev_value = os.environ.get(env_var_name)\\n    try:\\n        os.environ[env_var_name] = str(value)\\n        yield\\n    finally:\\n        if prev_value is None:\\n            del os.environ[env_var_name]\\n        else:\\n            os.environ[env_var_name] = prev_value\\n'"}, "return_value": "'from __future__ import absolute_import, unicode_literals\\n\\nimport os\\nfrom contextlib import contextmanager\\n\\n\\n@contextmanager\\ndef set_os_env_var(env_var_name, value):\\n    \"\"\"Set an environment variable with unrolling once the context exists\"\"\"\\n    prev_value = os.environ.get(env_var_name)\\n    try:\\n        os.environ[env_var_name] = str(value)\\n        yield\\n    finally:\\n        if prev_value is None:\\n            del os.environ[env_var_name]\\n        else:\\n            os.environ[env_var_name] = prev_value\\n'"}, {"func_args": {"source": "'from __future__ import absolute_import, unicode_literals\\n\\nfrom collections import OrderedDict, defaultdict\\n\\n\\ndef stable_topological_sort(graph):\\n    to_order = set(graph.keys())  # keep a log of what  we need to order\\n\\n    # normalize graph - fill missing nodes (assume no dependency)\\n    for values in list(graph.values()):\\n        for value in values:\\n            if value not in graph:\\n                graph[value] = ()\\n\\n    inverse_graph = defaultdict(set)\\n    for key, depends in graph.items():\\n        for depend in depends:\\n            inverse_graph[depend].add(key)\\n\\n    topology = []\\n    degree = {k: len(v) for k, v in graph.items()}\\n    ready_to_visit = {n for n, d in degree.items() if not d}\\n    need_to_visit = OrderedDict((i, None) for i in graph.keys())\\n    while need_to_visit:\\n        # to keep stable, pick the first node ready to visit in the original order\\n        for node in need_to_visit:\\n            if node in ready_to_visit:\\n                break\\n        else:\\n            break\\n        del need_to_visit[node]\\n\\n        topology.append(node)\\n\\n        # decrease degree for nodes we\\'re going too\\n        for to_node in inverse_graph[node]:\\n            degree[to_node] -= 1\\n            if not degree[to_node]:  # if a node has no more incoming node it\\'s ready to visit\\n                ready_to_visit.add(to_node)\\n\\n    result = [n for n in topology if n in to_order]  # filter out missing nodes we extended\\n\\n    if len(result) < len(to_order):\\n        identify_cycle(graph)\\n        msg = \"could not order tox environments and failed to detect circle\"  # pragma: no cover\\n        raise ValueError(msg)  # pragma: no cover\\n    return result\\n\\n\\ndef identify_cycle(graph):\\n    path = OrderedDict()\\n    visited = set()\\n\\n    def visit(vertex):\\n        if vertex in visited:\\n            return None\\n        visited.add(vertex)\\n        path[vertex] = None\\n        for neighbour in graph.get(vertex, ()):\\n            if neighbour in path or visit(neighbour):\\n                return path\\n        del path[vertex]\\n        return None\\n\\n    for node in graph:\\n        result = visit(node)\\n        if result is not None:\\n            raise ValueError(\"{}\".format(\" | \".join(result.keys())))\\n'"}, "return_value": "'from __future__ import absolute_import, unicode_literals\\n\\nfrom collections import OrderedDict, defaultdict\\n\\n\\ndef stable_topological_sort(graph):\\n    to_order = set(graph.keys())  # keep a log of what  we need to order\\n\\n    # normalize graph - fill missing nodes (assume no dependency)\\n    for values in list(graph.values()):\\n        for value in values:\\n            if value not in graph:\\n                graph[value] = ()\\n\\n    inverse_graph = defaultdict(set)\\n    for key, depends in graph.items():\\n        for depend in depends:\\n            inverse_graph[depend].add(key)\\n\\n    topology = []\\n    degree = {k: len(v) for k, v in graph.items()}\\n    ready_to_visit = {n for n, d in degree.items() if not d}\\n    need_to_visit = OrderedDict((i, None) for i in graph.keys())\\n    while need_to_visit:\\n        # to keep stable, pick the first node ready to visit in the original order\\n        for node in need_to_visit:\\n            if node in ready_to_visit:\\n                break\\n        else:\\n            break\\n        del need_to_visit[node]\\n\\n        topology.append(node)\\n\\n        # decrease degree for nodes we\\'re going too\\n        for to_node in inverse_graph[node]:\\n            degree[to_node] -= 1\\n            if not degree[to_node]:  # if a node has no more incoming node it\\'s ready to visit\\n                ready_to_visit.add(to_node)\\n\\n    result = [n for n in topology if n in to_order]  # filter out missing nodes we extended\\n\\n    if len(result) < len(to_order):\\n        identify_cycle(graph)\\n        msg = \"could not order tox environments and failed to detect circle\"  # pragma: no cover\\n        raise ValueError(msg)  # pragma: no cover\\n    return result\\n\\n\\ndef identify_cycle(graph):\\n    path = OrderedDict()\\n    visited = set()\\n\\n    def visit(vertex):\\n        if vertex in visited:\\n            return None\\n        visited.add(vertex)\\n        path[vertex] = None\\n        for neighbour in graph.get(vertex, ()):\\n            if neighbour in path or visit(neighbour):\\n                return path\\n        del path[vertex]\\n        return None\\n\\n    for node in graph:\\n        result = visit(node)\\n        if result is not None:\\n            raise ValueError(\"{}\".format(\" | \".join(result.keys())))\\n'"}, {"func_args": {"source": "'from __future__ import absolute_import, unicode_literals\\n\\nfrom collections import OrderedDict, defaultdict\\n\\n\\ndef stable_topological_sort(graph):\\n    to_order = set(graph.keys())  # keep a log of what  we need to order\\n\\n    # normalize graph - fill missing nodes (assume no dependency)\\n    for values in list(graph.values()):\\n        for value in values:\\n            if value not in graph:\\n                graph[value] = ()\\n\\n    inverse_graph = defaultdict(set)\\n    for key, depends in graph.items():\\n        for depend in depends:\\n            inverse_graph[depend].add(key)\\n\\n    topology = []\\n    degree = {k: len(v) for k, v in graph.items()}\\n    ready_to_visit = {n for n, d in degree.items() if not d}\\n    need_to_visit = OrderedDict((i, None) for i in graph.keys())\\n    while need_to_visit:\\n        # to keep stable, pick the first node ready to visit in the original order\\n        for node in need_to_visit:\\n            if node in ready_to_visit:\\n                break\\n        else:\\n            break\\n        del need_to_visit[node]\\n\\n        topology.append(node)\\n\\n        # decrease degree for nodes we\\'re going too\\n        for to_node in inverse_graph[node]:\\n            degree[to_node] -= 1\\n            if not degree[to_node]:  # if a node has no more incoming node it\\'s ready to visit\\n                ready_to_visit.add(to_node)\\n\\n    result = [n for n in topology if n in to_order]  # filter out missing nodes we extended\\n\\n    if len(result) < len(to_order):\\n        identify_cycle(graph)\\n        msg = \"could not order tox environments and failed to detect circle\"  # pragma: no cover\\n        raise ValueError(msg)  # pragma: no cover\\n    return result\\n\\n\\ndef identify_cycle(graph):\\n    path = OrderedDict()\\n    visited = set()\\n\\n    def visit(vertex):\\n        if vertex in visited:\\n            return None\\n        visited.add(vertex)\\n        path[vertex] = None\\n        for neighbour in graph.get(vertex, ()):\\n            if neighbour in path or visit(neighbour):\\n                return path\\n        del path[vertex]\\n        return None\\n\\n    for node in graph:\\n        result = visit(node)\\n        if result is not None:\\n            raise ValueError(\"{}\".format(\" | \".join(result.keys())))\\n'"}, "return_value": "'from __future__ import absolute_import, unicode_literals\\n\\nfrom collections import OrderedDict, defaultdict\\n\\n\\ndef stable_topological_sort(graph):\\n    to_order = set(graph.keys())  # keep a log of what  we need to order\\n\\n    # normalize graph - fill missing nodes (assume no dependency)\\n    for values in list(graph.values()):\\n        for value in values:\\n            if value not in graph:\\n                graph[value] = ()\\n\\n    inverse_graph = defaultdict(set)\\n    for key, depends in graph.items():\\n        for depend in depends:\\n            inverse_graph[depend].add(key)\\n\\n    topology = []\\n    degree = {k: len(v) for k, v in graph.items()}\\n    ready_to_visit = {n for n, d in degree.items() if not d}\\n    need_to_visit = OrderedDict((i, None) for i in graph.keys())\\n    while need_to_visit:\\n        # to keep stable, pick the first node ready to visit in the original order\\n        for node in need_to_visit:\\n            if node in ready_to_visit:\\n                break\\n        else:\\n            break\\n        del need_to_visit[node]\\n\\n        topology.append(node)\\n\\n        # decrease degree for nodes we\\'re going too\\n        for to_node in inverse_graph[node]:\\n            degree[to_node] -= 1\\n            if not degree[to_node]:  # if a node has no more incoming node it\\'s ready to visit\\n                ready_to_visit.add(to_node)\\n\\n    result = [n for n in topology if n in to_order]  # filter out missing nodes we extended\\n\\n    if len(result) < len(to_order):\\n        identify_cycle(graph)\\n        msg = \"could not order tox environments and failed to detect circle\"  # pragma: no cover\\n        raise ValueError(msg)  # pragma: no cover\\n    return result\\n\\n\\ndef identify_cycle(graph):\\n    path = OrderedDict()\\n    visited = set()\\n\\n    def visit(vertex):\\n        if vertex in visited:\\n            return None\\n        visited.add(vertex)\\n        path[vertex] = None\\n        for neighbour in graph.get(vertex, ()):\\n            if neighbour in path or visit(neighbour):\\n                return path\\n        del path[vertex]\\n        return None\\n\\n    for node in graph:\\n        result = visit(node)\\n        if result is not None:\\n            raise ValueError(\"{}\".format(\" | \".join(result.keys())))\\n'"}, {"func_args": {"source": "'\"\"\"holds locking functionality that works across processes\"\"\"\\nfrom __future__ import absolute_import, unicode_literals\\n\\nfrom contextlib import contextmanager\\n\\nimport py\\nfrom filelock import FileLock, Timeout\\n\\nfrom tox.reporter import verbosity1\\n\\n\\n@contextmanager\\ndef hold_lock(lock_file, reporter=verbosity1):\\n    py.path.local(lock_file.dirname).ensure(dir=1)\\n    lock = FileLock(str(lock_file))\\n    try:\\n        try:\\n            lock.acquire(0.0001)\\n        except Timeout:\\n            reporter(\"lock file {} present, will block until released\".format(lock_file))\\n            lock.acquire()\\n        yield\\n    finally:\\n        lock.release(force=True)\\n\\n\\ndef get_unique_file(path, prefix, suffix):\\n    \"\"\"get a unique file in a folder having a given prefix and suffix,\\n    with unique number in between\"\"\"\\n    lock_file = path.join(\".lock\")\\n    prefix = \"{}-\".format(prefix)\\n    with hold_lock(lock_file):\\n        max_value = -1\\n        for candidate in path.listdir(\"{}*{}\".format(prefix, suffix)):\\n            try:\\n                max_value = max(max_value, int(candidate.basename[len(prefix) : -len(suffix)]))\\n            except ValueError:\\n                continue\\n        winner = path.join(\"{}{}{}\".format(prefix, max_value + 1, suffix))\\n        winner.ensure(dir=0)\\n        return winner\\n'"}, "return_value": "'\"\"\"holds locking functionality that works across processes\"\"\"\\nfrom __future__ import absolute_import, unicode_literals\\n\\nfrom contextlib import contextmanager\\n\\nimport py\\nfrom filelock import FileLock, Timeout\\n\\nfrom tox.reporter import verbosity1\\n\\n\\n@contextmanager\\ndef hold_lock(lock_file, reporter=verbosity1):\\n    py.path.local(lock_file.dirname).ensure(dir=1)\\n    lock = FileLock(str(lock_file))\\n    try:\\n        try:\\n            lock.acquire(0.0001)\\n        except Timeout:\\n            reporter(\"lock file {} present, will block until released\".format(lock_file))\\n            lock.acquire()\\n        yield\\n    finally:\\n        lock.release(force=True)\\n\\n\\ndef get_unique_file(path, prefix, suffix):\\n    \"\"\"get a unique file in a folder having a given prefix and suffix,\\n    with unique number in between\"\"\"\\n    lock_file = path.join(\".lock\")\\n    prefix = \"{}-\".format(prefix)\\n    with hold_lock(lock_file):\\n        max_value = -1\\n        for candidate in path.listdir(\"{}*{}\".format(prefix, suffix)):\\n            try:\\n                max_value = max(max_value, int(candidate.basename[len(prefix) : -len(suffix)]))\\n            except ValueError:\\n                continue\\n        winner = path.join(\"{}{}{}\".format(prefix, max_value + 1, suffix))\\n        winner.ensure(dir=0)\\n        return winner\\n'"}, {"func_args": {"source": "'\"\"\"holds locking functionality that works across processes\"\"\"\\nfrom __future__ import absolute_import, unicode_literals\\n\\nfrom contextlib import contextmanager\\n\\nimport py\\nfrom filelock import FileLock, Timeout\\n\\nfrom tox.reporter import verbosity1\\n\\n\\n@contextmanager\\ndef hold_lock(lock_file, reporter=verbosity1):\\n    py.path.local(lock_file.dirname).ensure(dir=1)\\n    lock = FileLock(str(lock_file))\\n    try:\\n        try:\\n            lock.acquire(0.0001)\\n        except Timeout:\\n            reporter(\"lock file {} present, will block until released\".format(lock_file))\\n            lock.acquire()\\n        yield\\n    finally:\\n        lock.release(force=True)\\n\\n\\ndef get_unique_file(path, prefix, suffix):\\n    \"\"\"get a unique file in a folder having a given prefix and suffix,\\n    with unique number in between\"\"\"\\n    lock_file = path.join(\".lock\")\\n    prefix = \"{}-\".format(prefix)\\n    with hold_lock(lock_file):\\n        max_value = -1\\n        for candidate in path.listdir(\"{}*{}\".format(prefix, suffix)):\\n            try:\\n                max_value = max(max_value, int(candidate.basename[len(prefix) : -len(suffix)]))\\n            except ValueError:\\n                continue\\n        winner = path.join(\"{}{}{}\".format(prefix, max_value + 1, suffix))\\n        winner.ensure(dir=0)\\n        return winner\\n'"}, "return_value": "'\"\"\"holds locking functionality that works across processes\"\"\"\\nfrom __future__ import absolute_import, unicode_literals\\n\\nfrom contextlib import contextmanager\\n\\nimport py\\nfrom filelock import FileLock, Timeout\\n\\nfrom tox.reporter import verbosity1\\n\\n\\n@contextmanager\\ndef hold_lock(lock_file, reporter=verbosity1):\\n    py.path.local(lock_file.dirname).ensure(dir=1)\\n    lock = FileLock(str(lock_file))\\n    try:\\n        try:\\n            lock.acquire(0.0001)\\n        except Timeout:\\n            reporter(\"lock file {} present, will block until released\".format(lock_file))\\n            lock.acquire()\\n        yield\\n    finally:\\n        lock.release(force=True)\\n\\n\\ndef get_unique_file(path, prefix, suffix):\\n    \"\"\"get a unique file in a folder having a given prefix and suffix,\\n    with unique number in between\"\"\"\\n    lock_file = path.join(\".lock\")\\n    prefix = \"{}-\".format(prefix)\\n    with hold_lock(lock_file):\\n        max_value = -1\\n        for candidate in path.listdir(\"{}*{}\".format(prefix, suffix)):\\n            try:\\n                max_value = max(max_value, int(candidate.basename[len(prefix) : -len(suffix)]))\\n            except ValueError:\\n                continue\\n        winner = path.join(\"{}{}{}\".format(prefix, max_value + 1, suffix))\\n        winner.ensure(dir=0)\\n        return winner\\n'"}, {"func_args": {"source": "'import inspect\\nimport os\\n\\nimport tox\\n\\nMAIN_FILE = os.path.join(os.path.dirname(inspect.getfile(tox)), \"__main__.py\")\\n'"}, "return_value": "'import inspect\\nimport os\\n\\nimport tox\\n\\nMAIN_FILE = os.path.join(os.path.dirname(inspect.getfile(tox)), \"__main__.py\")\\n'"}, {"func_args": {"source": "'import inspect\\nimport os\\n\\nimport tox\\n\\nMAIN_FILE = os.path.join(os.path.dirname(inspect.getfile(tox)), \"__main__.py\")\\n'"}, "return_value": "'import inspect\\nimport os\\n\\nimport tox\\n\\nMAIN_FILE = os.path.join(os.path.dirname(inspect.getfile(tox)), \"__main__.py\")\\n'"}, {"func_args": {"source": "'import shutil\\n\\nfrom tox import reporter\\n\\n\\ndef ensure_empty_dir(path):\\n    if path.check():\\n        reporter.info(\"  removing {}\".format(path))\\n        shutil.rmtree(str(path), ignore_errors=True)\\n        path.ensure(dir=1)\\n'"}, "return_value": "'import shutil\\n\\nfrom tox import reporter\\n\\n\\ndef ensure_empty_dir(path):\\n    if path.check():\\n        reporter.info(\"  removing {}\".format(path))\\n        shutil.rmtree(str(path), ignore_errors=True)\\n        path.ensure(dir=1)\\n'"}, {"func_args": {"source": "'import shutil\\n\\nfrom tox import reporter\\n\\n\\ndef ensure_empty_dir(path):\\n    if path.check():\\n        reporter.info(\"  removing {}\".format(path))\\n        shutil.rmtree(str(path), ignore_errors=True)\\n        path.ensure(dir=1)\\n'"}, "return_value": "'import shutil\\n\\nfrom tox import reporter\\n\\n\\ndef ensure_empty_dir(path):\\n    if path.check():\\n        reporter.info(\"  removing {}\".format(path))\\n        shutil.rmtree(str(path), ignore_errors=True)\\n        path.ensure(dir=1)\\n'"}, {"func_args": {"source": "'# -*- coding: utf-8 -*-\\n\"\"\"A minimal non-colored version of https://pypi.org/project/halo, to track list progress\"\"\"\\nfrom __future__ import absolute_import, unicode_literals\\n\\nimport os\\nimport sys\\nimport threading\\nfrom collections import OrderedDict, namedtuple\\nfrom datetime import datetime\\n\\nimport py\\n\\nthreads = []\\n\\nif os.name == \"nt\":\\n    import ctypes\\n\\n    class _CursorInfo(ctypes.Structure):\\n        _fields_ = [(\"size\", ctypes.c_int), (\"visible\", ctypes.c_byte)]\\n\\n\\n_BaseMessage = namedtuple(\"_BaseMessage\", [\"unicode_msg\", \"ascii_msg\"])\\n\\n\\nclass SpinnerMessage(_BaseMessage):\\n    def for_file(self, file):\\n        try:\\n            self.unicode_msg.encode(file.encoding)\\n        except (AttributeError, TypeError, UnicodeEncodeError):\\n            return self.ascii_msg\\n        else:\\n            return self.unicode_msg\\n\\n\\nclass Spinner(object):\\n    CLEAR_LINE = \"\\\\033[K\"\\n    max_width = 120\\n    FRAMES = SpinnerMessage(\"\u280b\u2819\u2839\u2838\u283c\u2834\u2826\u2827\u2807\u280f\", \"|-+x*\")\\n    OK_FLAG = SpinnerMessage(\"\u2714 OK\", \"[ OK ]\")\\n    FAIL_FLAG = SpinnerMessage(\"\u2716 FAIL\", \"[FAIL]\")\\n    SKIP_FLAG = SpinnerMessage(\"\u26a0 SKIP\", \"[SKIP]\")\\n\\n    def __init__(self, enabled=True, refresh_rate=0.1):\\n        self.refresh_rate = refresh_rate\\n        self.enabled = enabled\\n        self._file = sys.stdout\\n        self.frames = self.FRAMES.for_file(self._file)\\n        self.stream = py.io.TerminalWriter(file=self._file)\\n        self._envs = OrderedDict()\\n        self._frame_index = 0\\n\\n    def clear(self):\\n        if self.enabled:\\n            self.stream.write(\"\\\\r\")\\n            self.stream.write(self.CLEAR_LINE)\\n\\n    def render(self):\\n        while True:\\n            self._stop_spinner.wait(self.refresh_rate)\\n            if self._stop_spinner.is_set():\\n                break\\n            self.render_frame()\\n        return self\\n\\n    def render_frame(self):\\n        if self.enabled:\\n            self.clear()\\n            self.stream.write(\"\\\\r{}\".format(self.frame()))\\n\\n    def frame(self):\\n        frame = self.frames[self._frame_index]\\n        self._frame_index += 1\\n        self._frame_index = self._frame_index % len(self.frames)\\n        text_frame = \"[{}] {}\".format(len(self._envs), \" | \".join(self._envs))\\n        if len(text_frame) > self.max_width - 1:\\n            text_frame = \"{}...\".format(text_frame[: self.max_width - 1 - 3])\\n        return \"{} {}\".format(*[(frame, text_frame)][0])\\n\\n    def __enter__(self):\\n        if self.enabled:\\n            self.disable_cursor()\\n        self.render_frame()\\n        self._stop_spinner = threading.Event()\\n        self._spinner_thread = threading.Thread(target=self.render)\\n        self._spinner_thread.daemon = True\\n        self._spinner_thread.start()\\n        return self\\n\\n    def __exit__(self, exc_type, exc_val, exc_tb):\\n        if not self._stop_spinner.is_set():\\n            if self._spinner_thread:\\n                self._stop_spinner.set()\\n                self._spinner_thread.join()\\n\\n            self._frame_index = 0\\n            if self.enabled:\\n                self.clear()\\n                self.enable_cursor()\\n\\n        return self\\n\\n    def add(self, name):\\n        self._envs[name] = datetime.now()\\n\\n    def succeed(self, key):\\n        self.finalize(key, self.OK_FLAG.for_file(self._file), green=True)\\n\\n    def fail(self, key):\\n        self.finalize(key, self.FAIL_FLAG.for_file(self._file), red=True)\\n\\n    def skip(self, key):\\n        self.finalize(key, self.SKIP_FLAG.for_file(self._file), white=True)\\n\\n    def finalize(self, key, status, **kwargs):\\n        start_at = self._envs[key]\\n        del self._envs[key]\\n        if self.enabled:\\n            self.clear()\\n        self.stream.write(\\n            \"{} {} in {}{}\".format(\\n                status,\\n                key,\\n                td_human_readable(datetime.now() - start_at),\\n                os.linesep,\\n            ),\\n            **kwargs\\n        )\\n        if not self._envs:\\n            self.__exit__(None, None, None)\\n\\n    def disable_cursor(self):\\n        if self._file.isatty():\\n            if os.name == \"nt\":\\n                ci = _CursorInfo()\\n                handle = ctypes.windll.kernel32.GetStdHandle(-11)\\n                ctypes.windll.kernel32.GetConsoleCursorInfo(handle, ctypes.byref(ci))\\n                ci.visible = False\\n                ctypes.windll.kernel32.SetConsoleCursorInfo(handle, ctypes.byref(ci))\\n            elif os.name == \"posix\":\\n                self.stream.write(\"\\\\033[?25l\")\\n\\n    def enable_cursor(self):\\n        if self._file.isatty():\\n            if os.name == \"nt\":\\n                ci = _CursorInfo()\\n                handle = ctypes.windll.kernel32.GetStdHandle(-11)\\n                ctypes.windll.kernel32.GetConsoleCursorInfo(handle, ctypes.byref(ci))\\n                ci.visible = True\\n                ctypes.windll.kernel32.SetConsoleCursorInfo(handle, ctypes.byref(ci))\\n            elif os.name == \"posix\":\\n                self.stream.write(\"\\\\033[?25h\")\\n\\n\\ndef td_human_readable(delta):\\n    seconds = int(delta.total_seconds())\\n    periods = [\\n        (\"year\", 60 * 60 * 24 * 365),\\n        (\"month\", 60 * 60 * 24 * 30),\\n        (\"day\", 60 * 60 * 24),\\n        (\"hour\", 60 * 60),\\n        (\"minute\", 60),\\n        (\"second\", 1),\\n    ]\\n\\n    texts = []\\n    for period_name, period_seconds in periods:\\n        if seconds > period_seconds or period_seconds == 1:\\n            period_value, seconds = divmod(seconds, period_seconds)\\n            if period_name == \"second\":\\n                ms = delta.total_seconds() - int(delta.total_seconds())\\n                period_value = round(period_value + ms, 3)\\n            has_s = \"s\" if period_value != 1 else \"\"\\n            texts.append(\"{} {}{}\".format(period_value, period_name, has_s))\\n    return \", \".join(texts)\\n'"}, "return_value": "'# (deleted declaration) -*-\\n\"\"\"A minimal non-colored version of https://pypi.org/project/halo, to track list progress\"\"\"\\nfrom __future__ import absolute_import, unicode_literals\\n\\nimport os\\nimport sys\\nimport threading\\nfrom collections import OrderedDict, namedtuple\\nfrom datetime import datetime\\n\\nimport py\\n\\nthreads = []\\n\\nif os.name == \"nt\":\\n    import ctypes\\n\\n    class _CursorInfo(ctypes.Structure):\\n        _fields_ = [(\"size\", ctypes.c_int), (\"visible\", ctypes.c_byte)]\\n\\n\\n_BaseMessage = namedtuple(\"_BaseMessage\", [\"unicode_msg\", \"ascii_msg\"])\\n\\n\\nclass SpinnerMessage(_BaseMessage):\\n    def for_file(self, file):\\n        try:\\n            self.unicode_msg.encode(file.encoding)\\n        except (AttributeError, TypeError, UnicodeEncodeError):\\n            return self.ascii_msg\\n        else:\\n            return self.unicode_msg\\n\\n\\nclass Spinner(object):\\n    CLEAR_LINE = \"\\\\033[K\"\\n    max_width = 120\\n    FRAMES = SpinnerMessage(\"\u280b\u2819\u2839\u2838\u283c\u2834\u2826\u2827\u2807\u280f\", \"|-+x*\")\\n    OK_FLAG = SpinnerMessage(\"\u2714 OK\", \"[ OK ]\")\\n    FAIL_FLAG = SpinnerMessage(\"\u2716 FAIL\", \"[FAIL]\")\\n    SKIP_FLAG = SpinnerMessage(\"\u26a0 SKIP\", \"[SKIP]\")\\n\\n    def __init__(self, enabled=True, refresh_rate=0.1):\\n        self.refresh_rate = refresh_rate\\n        self.enabled = enabled\\n        self._file = sys.stdout\\n        self.frames = self.FRAMES.for_file(self._file)\\n        self.stream = py.io.TerminalWriter(file=self._file)\\n        self._envs = OrderedDict()\\n        self._frame_index = 0\\n\\n    def clear(self):\\n        if self.enabled:\\n            self.stream.write(\"\\\\r\")\\n            self.stream.write(self.CLEAR_LINE)\\n\\n    def render(self):\\n        while True:\\n            self._stop_spinner.wait(self.refresh_rate)\\n            if self._stop_spinner.is_set():\\n                break\\n            self.render_frame()\\n        return self\\n\\n    def render_frame(self):\\n        if self.enabled:\\n            self.clear()\\n            self.stream.write(\"\\\\r{}\".format(self.frame()))\\n\\n    def frame(self):\\n        frame = self.frames[self._frame_index]\\n        self._frame_index += 1\\n        self._frame_index = self._frame_index % len(self.frames)\\n        text_frame = \"[{}] {}\".format(len(self._envs), \" | \".join(self._envs))\\n        if len(text_frame) > self.max_width - 1:\\n            text_frame = \"{}...\".format(text_frame[: self.max_width - 1 - 3])\\n        return \"{} {}\".format(*[(frame, text_frame)][0])\\n\\n    def __enter__(self):\\n        if self.enabled:\\n            self.disable_cursor()\\n        self.render_frame()\\n        self._stop_spinner = threading.Event()\\n        self._spinner_thread = threading.Thread(target=self.render)\\n        self._spinner_thread.daemon = True\\n        self._spinner_thread.start()\\n        return self\\n\\n    def __exit__(self, exc_type, exc_val, exc_tb):\\n        if not self._stop_spinner.is_set():\\n            if self._spinner_thread:\\n                self._stop_spinner.set()\\n                self._spinner_thread.join()\\n\\n            self._frame_index = 0\\n            if self.enabled:\\n                self.clear()\\n                self.enable_cursor()\\n\\n        return self\\n\\n    def add(self, name):\\n        self._envs[name] = datetime.now()\\n\\n    def succeed(self, key):\\n        self.finalize(key, self.OK_FLAG.for_file(self._file), green=True)\\n\\n    def fail(self, key):\\n        self.finalize(key, self.FAIL_FLAG.for_file(self._file), red=True)\\n\\n    def skip(self, key):\\n        self.finalize(key, self.SKIP_FLAG.for_file(self._file), white=True)\\n\\n    def finalize(self, key, status, **kwargs):\\n        start_at = self._envs[key]\\n        del self._envs[key]\\n        if self.enabled:\\n            self.clear()\\n        self.stream.write(\\n            \"{} {} in {}{}\".format(\\n                status,\\n                key,\\n                td_human_readable(datetime.now() - start_at),\\n                os.linesep,\\n            ),\\n            **kwargs\\n        )\\n        if not self._envs:\\n            self.__exit__(None, None, None)\\n\\n    def disable_cursor(self):\\n        if self._file.isatty():\\n            if os.name == \"nt\":\\n                ci = _CursorInfo()\\n                handle = ctypes.windll.kernel32.GetStdHandle(-11)\\n                ctypes.windll.kernel32.GetConsoleCursorInfo(handle, ctypes.byref(ci))\\n                ci.visible = False\\n                ctypes.windll.kernel32.SetConsoleCursorInfo(handle, ctypes.byref(ci))\\n            elif os.name == \"posix\":\\n                self.stream.write(\"\\\\033[?25l\")\\n\\n    def enable_cursor(self):\\n        if self._file.isatty():\\n            if os.name == \"nt\":\\n                ci = _CursorInfo()\\n                handle = ctypes.windll.kernel32.GetStdHandle(-11)\\n                ctypes.windll.kernel32.GetConsoleCursorInfo(handle, ctypes.byref(ci))\\n                ci.visible = True\\n                ctypes.windll.kernel32.SetConsoleCursorInfo(handle, ctypes.byref(ci))\\n            elif os.name == \"posix\":\\n                self.stream.write(\"\\\\033[?25h\")\\n\\n\\ndef td_human_readable(delta):\\n    seconds = int(delta.total_seconds())\\n    periods = [\\n        (\"year\", 60 * 60 * 24 * 365),\\n        (\"month\", 60 * 60 * 24 * 30),\\n        (\"day\", 60 * 60 * 24),\\n        (\"hour\", 60 * 60),\\n        (\"minute\", 60),\\n        (\"second\", 1),\\n    ]\\n\\n    texts = []\\n    for period_name, period_seconds in periods:\\n        if seconds > period_seconds or period_seconds == 1:\\n            period_value, seconds = divmod(seconds, period_seconds)\\n            if period_name == \"second\":\\n                ms = delta.total_seconds() - int(delta.total_seconds())\\n                period_value = round(period_value + ms, 3)\\n            has_s = \"s\" if period_value != 1 else \"\"\\n            texts.append(\"{} {}{}\".format(period_value, period_name, has_s))\\n    return \", \".join(texts)\\n'"}, {"func_args": {"source": "'# -*- coding: utf-8 -*-\\n\"\"\"A minimal non-colored version of https://pypi.org/project/halo, to track list progress\"\"\"\\nfrom __future__ import absolute_import, unicode_literals\\n\\nimport os\\nimport sys\\nimport threading\\nfrom collections import OrderedDict, namedtuple\\nfrom datetime import datetime\\n\\nimport py\\n\\nthreads = []\\n\\nif os.name == \"nt\":\\n    import ctypes\\n\\n    class _CursorInfo(ctypes.Structure):\\n        _fields_ = [(\"size\", ctypes.c_int), (\"visible\", ctypes.c_byte)]\\n\\n\\n_BaseMessage = namedtuple(\"_BaseMessage\", [\"unicode_msg\", \"ascii_msg\"])\\n\\n\\nclass SpinnerMessage(_BaseMessage):\\n    def for_file(self, file):\\n        try:\\n            self.unicode_msg.encode(file.encoding)\\n        except (AttributeError, TypeError, UnicodeEncodeError):\\n            return self.ascii_msg\\n        else:\\n            return self.unicode_msg\\n\\n\\nclass Spinner(object):\\n    CLEAR_LINE = \"\\\\033[K\"\\n    max_width = 120\\n    FRAMES = SpinnerMessage(\"\u280b\u2819\u2839\u2838\u283c\u2834\u2826\u2827\u2807\u280f\", \"|-+x*\")\\n    OK_FLAG = SpinnerMessage(\"\u2714 OK\", \"[ OK ]\")\\n    FAIL_FLAG = SpinnerMessage(\"\u2716 FAIL\", \"[FAIL]\")\\n    SKIP_FLAG = SpinnerMessage(\"\u26a0 SKIP\", \"[SKIP]\")\\n\\n    def __init__(self, enabled=True, refresh_rate=0.1):\\n        self.refresh_rate = refresh_rate\\n        self.enabled = enabled\\n        self._file = sys.stdout\\n        self.frames = self.FRAMES.for_file(self._file)\\n        self.stream = py.io.TerminalWriter(file=self._file)\\n        self._envs = OrderedDict()\\n        self._frame_index = 0\\n\\n    def clear(self):\\n        if self.enabled:\\n            self.stream.write(\"\\\\r\")\\n            self.stream.write(self.CLEAR_LINE)\\n\\n    def render(self):\\n        while True:\\n            self._stop_spinner.wait(self.refresh_rate)\\n            if self._stop_spinner.is_set():\\n                break\\n            self.render_frame()\\n        return self\\n\\n    def render_frame(self):\\n        if self.enabled:\\n            self.clear()\\n            self.stream.write(\"\\\\r{}\".format(self.frame()))\\n\\n    def frame(self):\\n        frame = self.frames[self._frame_index]\\n        self._frame_index += 1\\n        self._frame_index = self._frame_index % len(self.frames)\\n        text_frame = \"[{}] {}\".format(len(self._envs), \" | \".join(self._envs))\\n        if len(text_frame) > self.max_width - 1:\\n            text_frame = \"{}...\".format(text_frame[: self.max_width - 1 - 3])\\n        return \"{} {}\".format(*[(frame, text_frame)][0])\\n\\n    def __enter__(self):\\n        if self.enabled:\\n            self.disable_cursor()\\n        self.render_frame()\\n        self._stop_spinner = threading.Event()\\n        self._spinner_thread = threading.Thread(target=self.render)\\n        self._spinner_thread.daemon = True\\n        self._spinner_thread.start()\\n        return self\\n\\n    def __exit__(self, exc_type, exc_val, exc_tb):\\n        if not self._stop_spinner.is_set():\\n            if self._spinner_thread:\\n                self._stop_spinner.set()\\n                self._spinner_thread.join()\\n\\n            self._frame_index = 0\\n            if self.enabled:\\n                self.clear()\\n                self.enable_cursor()\\n\\n        return self\\n\\n    def add(self, name):\\n        self._envs[name] = datetime.now()\\n\\n    def succeed(self, key):\\n        self.finalize(key, self.OK_FLAG.for_file(self._file), green=True)\\n\\n    def fail(self, key):\\n        self.finalize(key, self.FAIL_FLAG.for_file(self._file), red=True)\\n\\n    def skip(self, key):\\n        self.finalize(key, self.SKIP_FLAG.for_file(self._file), white=True)\\n\\n    def finalize(self, key, status, **kwargs):\\n        start_at = self._envs[key]\\n        del self._envs[key]\\n        if self.enabled:\\n            self.clear()\\n        self.stream.write(\\n            \"{} {} in {}{}\".format(\\n                status,\\n                key,\\n                td_human_readable(datetime.now() - start_at),\\n                os.linesep,\\n            ),\\n            **kwargs\\n        )\\n        if not self._envs:\\n            self.__exit__(None, None, None)\\n\\n    def disable_cursor(self):\\n        if self._file.isatty():\\n            if os.name == \"nt\":\\n                ci = _CursorInfo()\\n                handle = ctypes.windll.kernel32.GetStdHandle(-11)\\n                ctypes.windll.kernel32.GetConsoleCursorInfo(handle, ctypes.byref(ci))\\n                ci.visible = False\\n                ctypes.windll.kernel32.SetConsoleCursorInfo(handle, ctypes.byref(ci))\\n            elif os.name == \"posix\":\\n                self.stream.write(\"\\\\033[?25l\")\\n\\n    def enable_cursor(self):\\n        if self._file.isatty():\\n            if os.name == \"nt\":\\n                ci = _CursorInfo()\\n                handle = ctypes.windll.kernel32.GetStdHandle(-11)\\n                ctypes.windll.kernel32.GetConsoleCursorInfo(handle, ctypes.byref(ci))\\n                ci.visible = True\\n                ctypes.windll.kernel32.SetConsoleCursorInfo(handle, ctypes.byref(ci))\\n            elif os.name == \"posix\":\\n                self.stream.write(\"\\\\033[?25h\")\\n\\n\\ndef td_human_readable(delta):\\n    seconds = int(delta.total_seconds())\\n    periods = [\\n        (\"year\", 60 * 60 * 24 * 365),\\n        (\"month\", 60 * 60 * 24 * 30),\\n        (\"day\", 60 * 60 * 24),\\n        (\"hour\", 60 * 60),\\n        (\"minute\", 60),\\n        (\"second\", 1),\\n    ]\\n\\n    texts = []\\n    for period_name, period_seconds in periods:\\n        if seconds > period_seconds or period_seconds == 1:\\n            period_value, seconds = divmod(seconds, period_seconds)\\n            if period_name == \"second\":\\n                ms = delta.total_seconds() - int(delta.total_seconds())\\n                period_value = round(period_value + ms, 3)\\n            has_s = \"s\" if period_value != 1 else \"\"\\n            texts.append(\"{} {}{}\".format(period_value, period_name, has_s))\\n    return \", \".join(texts)\\n'"}, "return_value": "'# (deleted declaration) -*-\\n\"\"\"A minimal non-colored version of https://pypi.org/project/halo, to track list progress\"\"\"\\nfrom __future__ import absolute_import, unicode_literals\\n\\nimport os\\nimport sys\\nimport threading\\nfrom collections import OrderedDict, namedtuple\\nfrom datetime import datetime\\n\\nimport py\\n\\nthreads = []\\n\\nif os.name == \"nt\":\\n    import ctypes\\n\\n    class _CursorInfo(ctypes.Structure):\\n        _fields_ = [(\"size\", ctypes.c_int), (\"visible\", ctypes.c_byte)]\\n\\n\\n_BaseMessage = namedtuple(\"_BaseMessage\", [\"unicode_msg\", \"ascii_msg\"])\\n\\n\\nclass SpinnerMessage(_BaseMessage):\\n    def for_file(self, file):\\n        try:\\n            self.unicode_msg.encode(file.encoding)\\n        except (AttributeError, TypeError, UnicodeEncodeError):\\n            return self.ascii_msg\\n        else:\\n            return self.unicode_msg\\n\\n\\nclass Spinner(object):\\n    CLEAR_LINE = \"\\\\033[K\"\\n    max_width = 120\\n    FRAMES = SpinnerMessage(\"\u280b\u2819\u2839\u2838\u283c\u2834\u2826\u2827\u2807\u280f\", \"|-+x*\")\\n    OK_FLAG = SpinnerMessage(\"\u2714 OK\", \"[ OK ]\")\\n    FAIL_FLAG = SpinnerMessage(\"\u2716 FAIL\", \"[FAIL]\")\\n    SKIP_FLAG = SpinnerMessage(\"\u26a0 SKIP\", \"[SKIP]\")\\n\\n    def __init__(self, enabled=True, refresh_rate=0.1):\\n        self.refresh_rate = refresh_rate\\n        self.enabled = enabled\\n        self._file = sys.stdout\\n        self.frames = self.FRAMES.for_file(self._file)\\n        self.stream = py.io.TerminalWriter(file=self._file)\\n        self._envs = OrderedDict()\\n        self._frame_index = 0\\n\\n    def clear(self):\\n        if self.enabled:\\n            self.stream.write(\"\\\\r\")\\n            self.stream.write(self.CLEAR_LINE)\\n\\n    def render(self):\\n        while True:\\n            self._stop_spinner.wait(self.refresh_rate)\\n            if self._stop_spinner.is_set():\\n                break\\n            self.render_frame()\\n        return self\\n\\n    def render_frame(self):\\n        if self.enabled:\\n            self.clear()\\n            self.stream.write(\"\\\\r{}\".format(self.frame()))\\n\\n    def frame(self):\\n        frame = self.frames[self._frame_index]\\n        self._frame_index += 1\\n        self._frame_index = self._frame_index % len(self.frames)\\n        text_frame = \"[{}] {}\".format(len(self._envs), \" | \".join(self._envs))\\n        if len(text_frame) > self.max_width - 1:\\n            text_frame = \"{}...\".format(text_frame[: self.max_width - 1 - 3])\\n        return \"{} {}\".format(*[(frame, text_frame)][0])\\n\\n    def __enter__(self):\\n        if self.enabled:\\n            self.disable_cursor()\\n        self.render_frame()\\n        self._stop_spinner = threading.Event()\\n        self._spinner_thread = threading.Thread(target=self.render)\\n        self._spinner_thread.daemon = True\\n        self._spinner_thread.start()\\n        return self\\n\\n    def __exit__(self, exc_type, exc_val, exc_tb):\\n        if not self._stop_spinner.is_set():\\n            if self._spinner_thread:\\n                self._stop_spinner.set()\\n                self._spinner_thread.join()\\n\\n            self._frame_index = 0\\n            if self.enabled:\\n                self.clear()\\n                self.enable_cursor()\\n\\n        return self\\n\\n    def add(self, name):\\n        self._envs[name] = datetime.now()\\n\\n    def succeed(self, key):\\n        self.finalize(key, self.OK_FLAG.for_file(self._file), green=True)\\n\\n    def fail(self, key):\\n        self.finalize(key, self.FAIL_FLAG.for_file(self._file), red=True)\\n\\n    def skip(self, key):\\n        self.finalize(key, self.SKIP_FLAG.for_file(self._file), white=True)\\n\\n    def finalize(self, key, status, **kwargs):\\n        start_at = self._envs[key]\\n        del self._envs[key]\\n        if self.enabled:\\n            self.clear()\\n        self.stream.write(\\n            \"{} {} in {}{}\".format(\\n                status,\\n                key,\\n                td_human_readable(datetime.now() - start_at),\\n                os.linesep,\\n            ),\\n            **kwargs\\n        )\\n        if not self._envs:\\n            self.__exit__(None, None, None)\\n\\n    def disable_cursor(self):\\n        if self._file.isatty():\\n            if os.name == \"nt\":\\n                ci = _CursorInfo()\\n                handle = ctypes.windll.kernel32.GetStdHandle(-11)\\n                ctypes.windll.kernel32.GetConsoleCursorInfo(handle, ctypes.byref(ci))\\n                ci.visible = False\\n                ctypes.windll.kernel32.SetConsoleCursorInfo(handle, ctypes.byref(ci))\\n            elif os.name == \"posix\":\\n                self.stream.write(\"\\\\033[?25l\")\\n\\n    def enable_cursor(self):\\n        if self._file.isatty():\\n            if os.name == \"nt\":\\n                ci = _CursorInfo()\\n                handle = ctypes.windll.kernel32.GetStdHandle(-11)\\n                ctypes.windll.kernel32.GetConsoleCursorInfo(handle, ctypes.byref(ci))\\n                ci.visible = True\\n                ctypes.windll.kernel32.SetConsoleCursorInfo(handle, ctypes.byref(ci))\\n            elif os.name == \"posix\":\\n                self.stream.write(\"\\\\033[?25h\")\\n\\n\\ndef td_human_readable(delta):\\n    seconds = int(delta.total_seconds())\\n    periods = [\\n        (\"year\", 60 * 60 * 24 * 365),\\n        (\"month\", 60 * 60 * 24 * 30),\\n        (\"day\", 60 * 60 * 24),\\n        (\"hour\", 60 * 60),\\n        (\"minute\", 60),\\n        (\"second\", 1),\\n    ]\\n\\n    texts = []\\n    for period_name, period_seconds in periods:\\n        if seconds > period_seconds or period_seconds == 1:\\n            period_value, seconds = divmod(seconds, period_seconds)\\n            if period_name == \"second\":\\n                ms = delta.total_seconds() - int(delta.total_seconds())\\n                period_value = round(period_value + ms, 3)\\n            has_s = \"s\" if period_value != 1 else \"\"\\n            texts.append(\"{} {}{}\".format(period_value, period_name, has_s))\\n    return \", \".join(texts)\\n'"}, {"func_args": {"source": "'import sys\\nimport threading\\nfrom contextlib import contextmanager\\nfrom tempfile import TemporaryFile\\n\\nif sys.version_info >= (3, 8):\\n    from importlib import metadata as importlib_metadata  # noqa\\nelse:\\n    import importlib_metadata  # noqa\\n\\n\\ndef is_main_thread():\\n    \"\"\"returns true if we are within the main thread\"\"\"\\n    cur_thread = threading.current_thread()\\n    if sys.version_info >= (3, 4):\\n        return cur_thread is threading.main_thread()\\n    else:\\n        # noinspection PyUnresolvedReferences\\n        return isinstance(cur_thread, threading._MainThread)\\n\\n\\n# noinspection PyPep8Naming\\n@contextmanager\\ndef suppress_output():\\n    \"\"\"suppress both stdout and stderr outputs\"\"\"\\n    if sys.version_info >= (3, 5):\\n        from contextlib import redirect_stderr, redirect_stdout\\n    else:\\n\\n        class _RedirectStream(object):\\n\\n            _stream = None\\n\\n            def __init__(self, new_target):\\n                self._new_target = new_target\\n                self._old_targets = []\\n\\n            def __enter__(self):\\n                self._old_targets.append(getattr(sys, self._stream))\\n                setattr(sys, self._stream, self._new_target)\\n                return self._new_target\\n\\n            def __exit__(self, exctype, excinst, exctb):\\n                setattr(sys, self._stream, self._old_targets.pop())\\n\\n        class redirect_stdout(_RedirectStream):\\n            _stream = \"stdout\"\\n\\n        class redirect_stderr(_RedirectStream):\\n            _stream = \"stderr\"\\n\\n    with TemporaryFile(\"wt\") as file:\\n        with redirect_stdout(file):\\n            with redirect_stderr(file):\\n                yield\\n'"}, "return_value": "'import sys\\nimport threading\\nfrom contextlib import contextmanager\\nfrom tempfile import TemporaryFile\\n\\nif sys.version_info >= (3, 8):\\n    from importlib import metadata as importlib_metadata  # noqa\\nelse:\\n    import importlib_metadata  # noqa\\n\\n\\ndef is_main_thread():\\n    \"\"\"returns true if we are within the main thread\"\"\"\\n    cur_thread = threading.current_thread()\\n    if sys.version_info >= (3, 4):\\n        return cur_thread is threading.main_thread()\\n    else:\\n        # noinspection PyUnresolvedReferences\\n        return isinstance(cur_thread, threading._MainThread)\\n\\n\\n# noinspection PyPep8Naming\\n@contextmanager\\ndef suppress_output():\\n    \"\"\"suppress both stdout and stderr outputs\"\"\"\\n    if sys.version_info >= (3, 5):\\n        from contextlib import redirect_stderr, redirect_stdout\\n    else:\\n\\n        class _RedirectStream(object):\\n\\n            _stream = None\\n\\n            def __init__(self, new_target):\\n                self._new_target = new_target\\n                self._old_targets = []\\n\\n            def __enter__(self):\\n                self._old_targets.append(getattr(sys, self._stream))\\n                setattr(sys, self._stream, self._new_target)\\n                return self._new_target\\n\\n            def __exit__(self, exctype, excinst, exctb):\\n                setattr(sys, self._stream, self._old_targets.pop())\\n\\n        class redirect_stdout(_RedirectStream):\\n            _stream = \"stdout\"\\n\\n        class redirect_stderr(_RedirectStream):\\n            _stream = \"stderr\"\\n\\n    with TemporaryFile(\"wt\") as file:\\n        with redirect_stdout(file):\\n            with redirect_stderr(file):\\n                yield\\n'"}, {"func_args": {"source": "'import sys\\nimport threading\\nfrom contextlib import contextmanager\\nfrom tempfile import TemporaryFile\\n\\nif sys.version_info >= (3, 8):\\n    from importlib import metadata as importlib_metadata  # noqa\\nelse:\\n    import importlib_metadata  # noqa\\n\\n\\ndef is_main_thread():\\n    \"\"\"returns true if we are within the main thread\"\"\"\\n    cur_thread = threading.current_thread()\\n    if sys.version_info >= (3, 4):\\n        return cur_thread is threading.main_thread()\\n    else:\\n        # noinspection PyUnresolvedReferences\\n        return isinstance(cur_thread, threading._MainThread)\\n\\n\\n# noinspection PyPep8Naming\\n@contextmanager\\ndef suppress_output():\\n    \"\"\"suppress both stdout and stderr outputs\"\"\"\\n    if sys.version_info >= (3, 5):\\n        from contextlib import redirect_stderr, redirect_stdout\\n    else:\\n\\n        class _RedirectStream(object):\\n\\n            _stream = None\\n\\n            def __init__(self, new_target):\\n                self._new_target = new_target\\n                self._old_targets = []\\n\\n            def __enter__(self):\\n                self._old_targets.append(getattr(sys, self._stream))\\n                setattr(sys, self._stream, self._new_target)\\n                return self._new_target\\n\\n            def __exit__(self, exctype, excinst, exctb):\\n                setattr(sys, self._stream, self._old_targets.pop())\\n\\n        class redirect_stdout(_RedirectStream):\\n            _stream = \"stdout\"\\n\\n        class redirect_stderr(_RedirectStream):\\n            _stream = \"stderr\"\\n\\n    with TemporaryFile(\"wt\") as file:\\n        with redirect_stdout(file):\\n            with redirect_stderr(file):\\n                yield\\n'"}, "return_value": "'import sys\\nimport threading\\nfrom contextlib import contextmanager\\nfrom tempfile import TemporaryFile\\n\\nif sys.version_info >= (3, 8):\\n    from importlib import metadata as importlib_metadata  # noqa\\nelse:\\n    import importlib_metadata  # noqa\\n\\n\\ndef is_main_thread():\\n    \"\"\"returns true if we are within the main thread\"\"\"\\n    cur_thread = threading.current_thread()\\n    if sys.version_info >= (3, 4):\\n        return cur_thread is threading.main_thread()\\n    else:\\n        # noinspection PyUnresolvedReferences\\n        return isinstance(cur_thread, threading._MainThread)\\n\\n\\n# noinspection PyPep8Naming\\n@contextmanager\\ndef suppress_output():\\n    \"\"\"suppress both stdout and stderr outputs\"\"\"\\n    if sys.version_info >= (3, 5):\\n        from contextlib import redirect_stderr, redirect_stdout\\n    else:\\n\\n        class _RedirectStream(object):\\n\\n            _stream = None\\n\\n            def __init__(self, new_target):\\n                self._new_target = new_target\\n                self._old_targets = []\\n\\n            def __enter__(self):\\n                self._old_targets.append(getattr(sys, self._stream))\\n                setattr(sys, self._stream, self._new_target)\\n                return self._new_target\\n\\n            def __exit__(self, exctype, excinst, exctb):\\n                setattr(sys, self._stream, self._old_targets.pop())\\n\\n        class redirect_stdout(_RedirectStream):\\n            _stream = \"stdout\"\\n\\n        class redirect_stderr(_RedirectStream):\\n            _stream = \"stderr\"\\n\\n    with TemporaryFile(\"wt\") as file:\\n        with redirect_stdout(file):\\n            with redirect_stderr(file):\\n                yield\\n'"}, {"func_args": {"source": "'import codecs\\nimport json\\nimport os\\nimport pipes\\nimport re\\nimport sys\\nfrom itertools import chain\\n\\nimport py\\n\\nimport tox\\nfrom tox import reporter\\nfrom tox.action import Action\\nfrom tox.config.parallel import ENV_VAR_KEY_PRIVATE as PARALLEL_ENV_VAR_KEY_PRIVATE\\nfrom tox.constants import INFO, PARALLEL_RESULT_JSON_PREFIX, PARALLEL_RESULT_JSON_SUFFIX\\nfrom tox.package.local import resolve_package\\nfrom tox.util.lock import get_unique_file\\nfrom tox.util.path import ensure_empty_dir\\n\\nfrom .config import DepConfig\\n\\n#: maximum parsed shebang interpreter length (see: prepend_shebang_interpreter)\\nMAXINTERP = 2048\\n\\n\\nclass CreationConfig:\\n    def __init__(\\n        self,\\n        base_resolved_python_sha256,\\n        base_resolved_python_path,\\n        tox_version,\\n        sitepackages,\\n        usedevelop,\\n        deps,\\n        alwayscopy,\\n    ):\\n        self.base_resolved_python_sha256 = base_resolved_python_sha256\\n        self.base_resolved_python_path = base_resolved_python_path\\n        self.tox_version = tox_version\\n        self.sitepackages = sitepackages\\n        self.usedevelop = usedevelop\\n        self.alwayscopy = alwayscopy\\n        self.deps = deps\\n\\n    def writeconfig(self, path):\\n        lines = [\\n            \"{} {}\".format(self.base_resolved_python_sha256, self.base_resolved_python_path),\\n            \"{} {:d} {:d} {:d}\".format(\\n                self.tox_version,\\n                self.sitepackages,\\n                self.usedevelop,\\n                self.alwayscopy,\\n            ),\\n        ]\\n        for dep in self.deps:\\n            lines.append(\"{} {}\".format(*dep))\\n        content = \"\\\\n\".join(lines)\\n        path.ensure()\\n        path.write(content)\\n        return content\\n\\n    @classmethod\\n    def readconfig(cls, path):\\n        try:\\n            lines = path.readlines(cr=0)\\n            base_resolved_python_info = lines.pop(0).split(None, 1)\\n            tox_version, sitepackages, usedevelop, alwayscopy = lines.pop(0).split(None, 4)\\n            sitepackages = bool(int(sitepackages))\\n            usedevelop = bool(int(usedevelop))\\n            alwayscopy = bool(int(alwayscopy))\\n            deps = []\\n            for line in lines:\\n                base_resolved_python_sha256, depstring = line.split(None, 1)\\n                deps.append((base_resolved_python_sha256, depstring))\\n            base_resolved_python_sha256, base_resolved_python_path = base_resolved_python_info\\n            return CreationConfig(\\n                base_resolved_python_sha256,\\n                base_resolved_python_path,\\n                tox_version,\\n                sitepackages,\\n                usedevelop,\\n                deps,\\n                alwayscopy,\\n            )\\n        except Exception:\\n            return None\\n\\n    def matches_with_reason(self, other, deps_matches_subset=False):\\n        for attr in (\\n            \"base_resolved_python_sha256\",\\n            \"base_resolved_python_path\",\\n            \"tox_version\",\\n            \"sitepackages\",\\n            \"usedevelop\",\\n            \"alwayscopy\",\\n        ):\\n            left = getattr(self, attr)\\n            right = getattr(other, attr)\\n            if left != right:\\n                return False, \"attr {} {!r}!={!r}\".format(attr, left, right)\\n        self_deps = set(self.deps)\\n        other_deps = set(other.deps)\\n        if self_deps != other_deps:\\n            if deps_matches_subset:\\n                diff = other_deps - self_deps\\n                if diff:\\n                    return False, \"missing in previous {!r}\".format(diff)\\n            else:\\n                return False, \"{!r}!={!r}\".format(self_deps, other_deps)\\n        return True, None\\n\\n    def matches(self, other, deps_matches_subset=False):\\n        outcome, _ = self.matches_with_reason(other, deps_matches_subset)\\n        return outcome\\n\\n\\nclass VirtualEnv(object):\\n    def __init__(self, envconfig=None, popen=None, env_log=None):\\n        self.envconfig = envconfig\\n        self.popen = popen\\n        self._actions = []\\n        self.env_log = env_log\\n        self._result_json_path = None\\n\\n    def new_action(self, msg, *args):\\n        config = self.envconfig.config\\n        command_log = self.env_log.get_commandlog(\\n            \"test\" if msg in (\"run-test\", \"run-test-pre\", \"run-test-post\") else \"setup\",\\n        )\\n        return Action(\\n            self.name,\\n            msg,\\n            args,\\n            self.envconfig.envlogdir,\\n            config.option.resultjson,\\n            command_log,\\n            self.popen,\\n            self.envconfig.envpython,\\n            self.envconfig.suicide_timeout,\\n            self.envconfig.interrupt_timeout,\\n            self.envconfig.terminate_timeout,\\n        )\\n\\n    def get_result_json_path(self):\\n        if self._result_json_path is None:\\n            if self.envconfig.config.option.resultjson:\\n                self._result_json_path = get_unique_file(\\n                    self.path,\\n                    PARALLEL_RESULT_JSON_PREFIX,\\n                    PARALLEL_RESULT_JSON_SUFFIX,\\n                )\\n        return self._result_json_path\\n\\n    @property\\n    def hook(self):\\n        return self.envconfig.config.pluginmanager.hook\\n\\n    @property\\n    def path(self):\\n        \"\"\"Path to environment base dir.\"\"\"\\n        return self.envconfig.envdir\\n\\n    @property\\n    def path_config(self):\\n        return self.path.join(\".tox-config1\")\\n\\n    @property\\n    def name(self):\\n        \"\"\"test environment name.\"\"\"\\n        return self.envconfig.envname\\n\\n    def __repr__(self):\\n        return \"<VirtualEnv at {!r}>\".format(self.path)\\n\\n    def getcommandpath(self, name, venv=True, cwd=None):\\n        \"\"\"Return absolute path (str or localpath) for specified command name.\\n\\n        - If it\\'s a local path we will rewrite it as as a relative path.\\n        - If venv is True we will check if the command is coming from the venv\\n          or is allowed to come from external.\\n        \"\"\"\\n        name = str(name)\\n        if os.path.isabs(name):\\n            return name\\n        if os.path.split(name)[0] == \".\":\\n            path = cwd.join(name)\\n            if path.check():\\n                return str(path)\\n\\n        if venv:\\n            path = self._venv_lookup_and_check_external_allowlist(name)\\n        else:\\n            path = self._normal_lookup(name)\\n\\n        if path is None:\\n            raise tox.exception.InvocationError(\\n                \"could not find executable {}\".format(pipes.quote(name)),\\n            )\\n\\n        return str(path)  # will not be rewritten for reporting\\n\\n    def _venv_lookup_and_check_external_allowlist(self, name):\\n        path = self._venv_lookup(name)\\n        if path is None:\\n            path = self._normal_lookup(name)\\n            if path is not None:\\n                self._check_external_allowed_and_warn(path)\\n        return path\\n\\n    def _venv_lookup(self, name):\\n        return py.path.local.sysfind(name, paths=[self.envconfig.envbindir])\\n\\n    def _normal_lookup(self, name):\\n        return py.path.local.sysfind(name)\\n\\n    def _check_external_allowed_and_warn(self, path):\\n        if not self.is_allowed_external(path):\\n            reporter.warning(\\n                \"test command found but not installed in testenv\\\\n\"\\n                \"  cmd: {}\\\\n\"\\n                \"  env: {}\\\\n\"\\n                \"Maybe you forgot to specify a dependency? \"\\n                \"See also the allowlist_externals envconfig setting.\\\\n\\\\n\"\\n                \"DEPRECATION WARNING: this will be an error in tox 4 and above!\".format(\\n                    path,\\n                    self.envconfig.envdir,\\n                ),\\n            )\\n\\n    def is_allowed_external(self, p):\\n        tryadd = [\"\"]\\n        if tox.INFO.IS_WIN:\\n            tryadd += [os.path.normcase(x) for x in os.environ[\"PATHEXT\"].split(os.pathsep)]\\n            p = py.path.local(os.path.normcase(str(p)))\\n\\n        if self.envconfig.allowlist_externals and self.envconfig.whitelist_externals:\\n            raise tox.exception.ConfigError(\\n                \"Either whitelist_externals or allowlist_externals might be specified, not both\",\\n            )\\n\\n        allowed_externals = (\\n            self.envconfig.whitelist_externals or self.envconfig.allowlist_externals\\n        )\\n        for x in allowed_externals:\\n            for add in tryadd:\\n                if p.fnmatch(x + add):\\n                    return True\\n        return False\\n\\n    def update(self, action):\\n        \"\"\"return status string for updating actual venv to match configuration.\\n        if status string is empty, all is ok.\\n        \"\"\"\\n        rconfig = CreationConfig.readconfig(self.path_config)\\n        if self.envconfig.recreate:\\n            reason = \"-r flag\"\\n        else:\\n            if rconfig is None:\\n                reason = \"no previous config {}\".format(self.path_config)\\n            else:\\n                live_config = self._getliveconfig()\\n                deps_subset_match = getattr(self.envconfig, \"deps_matches_subset\", False)\\n                outcome, reason = rconfig.matches_with_reason(live_config, deps_subset_match)\\n        if reason is None:\\n            action.info(\"reusing\", self.envconfig.envdir)\\n            return\\n        action.info(\"cannot reuse\", reason)\\n        if rconfig is None:\\n            action.setactivity(\"create\", self.envconfig.envdir)\\n        else:\\n            action.setactivity(\"recreate\", self.envconfig.envdir)\\n        try:\\n            self.hook.tox_testenv_create(action=action, venv=self)\\n            self.just_created = True\\n        except tox.exception.UnsupportedInterpreter as exception:\\n            return exception\\n        try:\\n            self.hook.tox_testenv_install_deps(action=action, venv=self)\\n        except tox.exception.InvocationError as exception:\\n            return \"could not install deps {}; v = {!r}\".format(self.envconfig.deps, exception)\\n\\n    def _getliveconfig(self):\\n        base_resolved_python_path = self.envconfig.python_info.executable\\n        version = tox.__version__\\n        sitepackages = self.envconfig.sitepackages\\n        develop = self.envconfig.usedevelop\\n        alwayscopy = self.envconfig.alwayscopy\\n        deps = []\\n        for dep in self.get_resolved_dependencies():\\n            dep_name_sha256 = getdigest(dep.name)\\n            deps.append((dep_name_sha256, dep.name))\\n        base_resolved_python_sha256 = getdigest(base_resolved_python_path)\\n        return CreationConfig(\\n            base_resolved_python_sha256,\\n            base_resolved_python_path,\\n            version,\\n            sitepackages,\\n            develop,\\n            deps,\\n            alwayscopy,\\n        )\\n\\n    def get_resolved_dependencies(self):\\n        dependencies = []\\n        for dependency in self.envconfig.deps:\\n            if dependency.indexserver is None:\\n                package = resolve_package(package_spec=dependency.name)\\n                if package != dependency.name:\\n                    dependency = dependency.__class__(package)\\n            dependencies.append(dependency)\\n        return dependencies\\n\\n    def getsupportedinterpreter(self):\\n        return self.envconfig.getsupportedinterpreter()\\n\\n    def matching_platform(self):\\n        return re.match(self.envconfig.platform, sys.platform)\\n\\n    def finish(self):\\n        previous_config = CreationConfig.readconfig(self.path_config)\\n        live_config = self._getliveconfig()\\n        if previous_config is None or not previous_config.matches(live_config):\\n            content = live_config.writeconfig(self.path_config)\\n            reporter.verbosity1(\"write config to {} as {!r}\".format(self.path_config, content))\\n\\n    def _needs_reinstall(self, setupdir, action):\\n        setup_py = setupdir.join(\"setup.py\")\\n\\n        if not setup_py.exists():\\n            return False\\n\\n        setup_cfg = setupdir.join(\"setup.cfg\")\\n        args = [self.envconfig.envpython, str(setup_py), \"--name\"]\\n        env = self._get_os_environ()\\n        output = action.popen(\\n            args,\\n            cwd=setupdir,\\n            redirect=False,\\n            returnout=True,\\n            env=env,\\n            capture_err=False,\\n        )\\n        name = next(\\n            (i for i in output.split(\"\\\\n\") if i and not i.startswith(\"pydev debugger:\")),\\n            \"\",\\n        )\\n        args = [\\n            self.envconfig.envpython,\\n            \"-c\",\\n            \"import sys;  import json; print(json.dumps(sys.path))\",\\n        ]\\n        out = action.popen(args, redirect=False, returnout=True, env=env)\\n        try:\\n            sys_path = json.loads(out)\\n        except ValueError:\\n            sys_path = []\\n        egg_info_fname = \".\".join((name.replace(\"-\", \"_\"), \"egg-info\"))\\n        for d in reversed(sys_path):\\n            egg_info = py.path.local(d).join(egg_info_fname)\\n            if egg_info.check():\\n                break\\n        else:\\n            return True\\n        needs_reinstall = any(\\n            conf_file.check() and conf_file.mtime() > egg_info.mtime()\\n            for conf_file in (setup_py, setup_cfg)\\n        )\\n\\n        # Ensure the modification time of the egg-info folder is updated so we\\n        # won\\'t need to do this again.\\n        # TODO(stephenfin): Remove once the minimum version of setuptools is\\n        # high enough to include https://github.com/pypa/setuptools/pull/1427/\\n        if needs_reinstall:\\n            egg_info.setmtime()\\n\\n        return needs_reinstall\\n\\n    def install_pkg(self, dir, action, name, is_develop=False):\\n        assert action is not None\\n\\n        if getattr(self, \"just_created\", False):\\n            action.setactivity(name, dir)\\n            self.finish()\\n            pip_flags = [\"--exists-action\", \"w\"]\\n        else:\\n            if is_develop and not self._needs_reinstall(dir, action):\\n                action.setactivity(\"{}-noop\".format(name), dir)\\n                return\\n            action.setactivity(\"{}-nodeps\".format(name), dir)\\n            pip_flags = [\"--no-deps\"] + ([] if is_develop else [\"-U\"])\\n        pip_flags.extend([\"-v\"] * min(3, reporter.verbosity() - 2))\\n        if self.envconfig.extras:\\n            dir += \"[{}]\".format(\",\".join(self.envconfig.extras))\\n        target = [dir]\\n        if is_develop:\\n            target.insert(0, \"-e\")\\n        self._install(target, extraopts=pip_flags, action=action)\\n\\n    def developpkg(self, setupdir, action):\\n        self.install_pkg(setupdir, action, \"develop-inst\", is_develop=True)\\n\\n    def installpkg(self, sdistpath, action):\\n        self.install_pkg(sdistpath, action, \"inst\")\\n\\n    def _installopts(self, indexserver):\\n        options = []\\n        if indexserver:\\n            options += [\"-i\", indexserver]\\n        if self.envconfig.pip_pre:\\n            options.append(\"--pre\")\\n        return options\\n\\n    def run_install_command(self, packages, action, options=()):\\n        def expand(val):\\n            # expand an install command\\n            if val == \"{packages}\":\\n                for package in packages:\\n                    yield package\\n            elif val == \"{opts}\":\\n                for opt in options:\\n                    yield opt\\n            else:\\n                yield val\\n\\n        cmd = list(chain.from_iterable(expand(val) for val in self.envconfig.install_command))\\n\\n        env = self._get_os_environ()\\n        self.ensure_pip_os_environ_ok(env)\\n\\n        old_stdout = sys.stdout\\n        sys.stdout = codecs.getwriter(\"utf8\")(sys.stdout)\\n        try:\\n            self._pcall(\\n                cmd,\\n                cwd=self.envconfig.config.toxinidir,\\n                action=action,\\n                redirect=reporter.verbosity() < reporter.Verbosity.DEBUG,\\n                env=env,\\n            )\\n        except KeyboardInterrupt:\\n            self.status = \"keyboardinterrupt\"\\n            raise\\n        finally:\\n            sys.stdout = old_stdout\\n\\n    def ensure_pip_os_environ_ok(self, env):\\n        for key in (\"PIP_RESPECT_VIRTUALENV\", \"PIP_REQUIRE_VIRTUALENV\", \"__PYVENV_LAUNCHER__\"):\\n            env.pop(key, None)\\n        if all(\"PYTHONPATH\" not in i for i in (self.envconfig.passenv, self.envconfig.setenv)):\\n            # If PYTHONPATH not explicitly asked for, remove it.\\n            if \"PYTHONPATH\" in env:\\n                if sys.version_info < (3, 4) or bool(env[\"PYTHONPATH\"]):\\n                    # https://docs.python.org/3/whatsnew/3.4.html#changes-in-python-command-behavior\\n                    # In a posix shell, setting the PATH environment variable to an empty value is\\n                    # equivalent to not setting it at all.\\n                    reporter.warning(\\n                        \"Discarding $PYTHONPATH from environment, to override \"\\n                        \"specify PYTHONPATH in \\'passenv\\' in your configuration.\",\\n                    )\\n                env.pop(\"PYTHONPATH\")\\n\\n        # installing packages at user level may mean we\\'re not installing inside the venv\\n        env[\"PIP_USER\"] = \"0\"\\n\\n        # installing without dependencies may lead to broken packages\\n        env[\"PIP_NO_DEPS\"] = \"0\"\\n\\n    def _install(self, deps, extraopts=None, action=None):\\n        if not deps:\\n            return\\n        d = {}\\n        ixservers = []\\n        for dep in deps:\\n            if isinstance(dep, (str, py.path.local)):\\n                dep = DepConfig(str(dep), None)\\n            assert isinstance(dep, DepConfig), dep\\n            if dep.indexserver is None:\\n                ixserver = self.envconfig.config.indexserver[\"default\"]\\n            else:\\n                ixserver = dep.indexserver\\n            d.setdefault(ixserver, []).append(dep.name)\\n            if ixserver not in ixservers:\\n                ixservers.append(ixserver)\\n            assert ixserver.url is None or isinstance(ixserver.url, str)\\n\\n        for ixserver in ixservers:\\n            packages = d[ixserver]\\n            options = self._installopts(ixserver.url)\\n            if extraopts:\\n                options.extend(extraopts)\\n            self.run_install_command(packages=packages, options=options, action=action)\\n\\n    def _get_os_environ(self, is_test_command=False):\\n        if is_test_command:\\n            # for executing tests we construct a clean environment\\n            env = {}\\n            for env_key in self.envconfig.passenv:\\n                if env_key in os.environ:\\n                    env[env_key] = os.environ[env_key]\\n        else:\\n            # for executing non-test commands we use the full\\n            # invocation environment\\n            env = os.environ.copy()\\n\\n        # in any case we honor per-testenv setenv configuration\\n        env.update(self.envconfig.setenv.export())\\n\\n        env[\"VIRTUAL_ENV\"] = str(self.path)\\n        return env\\n\\n    def test(\\n        self,\\n        redirect=False,\\n        name=\"run-test\",\\n        commands=None,\\n        ignore_outcome=None,\\n        ignore_errors=None,\\n        display_hash_seed=False,\\n    ):\\n        if commands is None:\\n            commands = self.envconfig.commands\\n        if ignore_outcome is None:\\n            ignore_outcome = self.envconfig.ignore_outcome\\n        if ignore_errors is None:\\n            ignore_errors = self.envconfig.ignore_errors\\n        with self.new_action(name) as action:\\n            cwd = self.envconfig.changedir\\n            if display_hash_seed:\\n                env = self._get_os_environ(is_test_command=True)\\n                # Display PYTHONHASHSEED to assist with reproducibility.\\n                action.setactivity(name, \"PYTHONHASHSEED={!r}\".format(env.get(\"PYTHONHASHSEED\")))\\n            for i, argv in enumerate(filter(bool, commands)):\\n                # have to make strings as _pcall changes argv[0] to a local()\\n                # happens if the same environment is invoked twice\\n                message = \"commands[{}] | {}\".format(\\n                    i,\\n                    \" \".join(pipes.quote(str(x)) for x in argv),\\n                )\\n                action.setactivity(name, message)\\n                # check to see if we need to ignore the return code\\n                # if so, we need to alter the command line arguments\\n                if argv[0].startswith(\"-\"):\\n                    ignore_ret = True\\n                    if argv[0] == \"-\":\\n                        del argv[0]\\n                    else:\\n                        argv[0] = argv[0].lstrip(\"-\")\\n                else:\\n                    ignore_ret = False\\n\\n                try:\\n                    self._pcall(\\n                        argv,\\n                        cwd=cwd,\\n                        action=action,\\n                        redirect=redirect,\\n                        ignore_ret=ignore_ret,\\n                        is_test_command=True,\\n                    )\\n                except tox.exception.InvocationError as err:\\n                    if ignore_outcome:\\n                        msg = \"command failed but result from testenv is ignored\\\\ncmd:\"\\n                        reporter.warning(\"{} {}\".format(msg, err))\\n                        self.status = \"ignored failed command\"\\n                        continue  # keep processing commands\\n\\n                    reporter.error(str(err))\\n                    self.status = \"commands failed\"\\n                    if not ignore_errors:\\n                        break  # Don\\'t process remaining commands\\n                except KeyboardInterrupt:\\n                    self.status = \"keyboardinterrupt\"\\n                    raise\\n\\n    def _pcall(\\n        self,\\n        args,\\n        cwd,\\n        venv=True,\\n        is_test_command=False,\\n        action=None,\\n        redirect=True,\\n        ignore_ret=False,\\n        returnout=False,\\n        env=None,\\n    ):\\n        if env is None:\\n            env = self._get_os_environ(is_test_command=is_test_command)\\n\\n        # construct environment variables\\n        env.pop(\"VIRTUALENV_PYTHON\", None)\\n        bin_dir = str(self.envconfig.envbindir)\\n        path = self.envconfig.setenv.get(\"PATH\") or os.environ[\"PATH\"]\\n        env[\"PATH\"] = os.pathsep.join([bin_dir, path])\\n        reporter.verbosity2(\"setting PATH={}\".format(env[\"PATH\"]))\\n\\n        # get command\\n        args[0] = self.getcommandpath(args[0], venv, cwd)\\n        if sys.platform != \"win32\" and \"TOX_LIMITED_SHEBANG\" in os.environ:\\n            args = prepend_shebang_interpreter(args)\\n\\n        cwd.ensure(dir=1)  # ensure the cwd exists\\n        return action.popen(\\n            args,\\n            cwd=cwd,\\n            env=env,\\n            redirect=redirect,\\n            ignore_ret=ignore_ret,\\n            returnout=returnout,\\n            report_fail=not is_test_command,\\n        )\\n\\n    def setupenv(self):\\n        if self.envconfig._missing_subs:\\n            self.status = (\\n                \"unresolvable substitution(s):\\\\n    {}\\\\n\"\\n                \"Environment variables are missing or defined recursively.\".format(\\n                    \"\\\\n    \".join(\\n                        \"{}: \\'{}\\'\".format(section_key, exc.name)\\n                        for section_key, exc in sorted(self.envconfig._missing_subs.items())\\n                    ),\\n                )\\n            )\\n            return\\n        if not self.matching_platform():\\n            self.status = \"platform mismatch\"\\n            return  # we simply omit non-matching platforms\\n        with self.new_action(\"getenv\", self.envconfig.envdir) as action:\\n            self.status = 0\\n            default_ret_code = 1\\n            envlog = self.env_log\\n            try:\\n                status = self.update(action=action)\\n            except IOError as e:\\n                if e.args[0] != 2:\\n                    raise\\n                status = (\\n                    \"Error creating virtualenv. Note that spaces in paths are \"\\n                    \"not supported by virtualenv. Error details: {!r}\".format(e)\\n                )\\n            except tox.exception.InvocationError as e:\\n                status = e\\n            except tox.exception.InterpreterNotFound as e:\\n                status = e\\n                if self.envconfig.config.option.skip_missing_interpreters == \"true\":\\n                    default_ret_code = 0\\n            except KeyboardInterrupt:\\n                self.status = \"keyboardinterrupt\"\\n                raise\\n            if status:\\n                str_status = str(status)\\n                command_log = envlog.get_commandlog(\"setup\")\\n                command_log.add_command([\"setup virtualenv\"], str_status, default_ret_code)\\n                self.status = status\\n                if default_ret_code == 0:\\n                    reporter.skip(str_status)\\n                else:\\n                    reporter.error(str_status)\\n                return False\\n            command_path = self.getcommandpath(\"python\")\\n            envlog.set_python_info(command_path)\\n            return True\\n\\n    def finishvenv(self):\\n        with self.new_action(\"finishvenv\"):\\n            self.finish()\\n            return True\\n\\n\\ndef getdigest(path):\\n    path = py.path.local(path)\\n    if not path.check(file=1):\\n        return \"0\" * 32\\n    return path.computehash(\"sha256\")\\n\\n\\ndef prepend_shebang_interpreter(args):\\n    # prepend interpreter directive (if any) to argument list\\n    #\\n    # When preparing virtual environments in a file container which has large\\n    # length, the system might not be able to invoke shebang scripts which\\n    # define interpreters beyond system limits (e.g. Linux has a limit of 128;\\n    # BINPRM_BUF_SIZE). This method can be used to check if the executable is\\n    # a script containing a shebang line. If so, extract the interpreter (and\\n    # possible optional argument) and prepend the values to the provided\\n    # argument list. tox will only attempt to read an interpreter directive of\\n    # a maximum size of 2048 bytes to limit excessive reading and support UNIX\\n    # systems which may support a longer interpret length.\\n    try:\\n        with open(args[0], \"rb\") as f:\\n            if f.read(1) == b\"#\" and f.read(1) == b\"!\":\\n                interp = f.readline(MAXINTERP + 1).rstrip().decode(\"UTF-8\")\\n                if len(interp) > MAXINTERP:  # avoid a truncated interpreter\\n                    return args\\n                interp_args = interp.split(None, 1)[:2]\\n                return interp_args + args\\n    except (UnicodeDecodeError, IOError):\\n        pass\\n    return args\\n\\n\\n_SKIP_VENV_CREATION = os.environ.get(\"_TOX_SKIP_ENV_CREATION_TEST\", False) == \"1\"\\n\\n\\n@tox.hookimpl\\ndef tox_testenv_create(venv, action):\\n    config_interpreter = venv.getsupportedinterpreter()\\n    args = [sys.executable, \"-m\", \"virtualenv\"]\\n    if venv.envconfig.sitepackages:\\n        args.append(\"--system-site-packages\")\\n    if venv.envconfig.alwayscopy:\\n        args.append(\"--always-copy\")\\n    if not venv.envconfig.download:\\n        args.append(\"--no-download\")\\n    else:\\n        args.append(\"--download\")\\n    # add interpreter explicitly, to prevent using default (virtualenv.ini)\\n    args.extend([\"--python\", str(config_interpreter)])\\n\\n    cleanup_for_venv(venv)\\n\\n    base_path = venv.path.dirpath()\\n    base_path.ensure(dir=1)\\n    args.append(venv.path.basename)\\n    if not _SKIP_VENV_CREATION:\\n        try:\\n            venv._pcall(\\n                args,\\n                venv=False,\\n                action=action,\\n                cwd=base_path,\\n                redirect=reporter.verbosity() < reporter.Verbosity.DEBUG,\\n            )\\n        except KeyboardInterrupt:\\n            venv.status = \"keyboardinterrupt\"\\n            raise\\n    return True  # Return non-None to indicate plugin has completed\\n\\n\\ndef cleanup_for_venv(venv):\\n    within_parallel = PARALLEL_ENV_VAR_KEY_PRIVATE in os.environ\\n    # if the directory exists and it doesn\\'t look like a virtualenv, produce\\n    # an error\\n    if venv.path.exists():\\n        dir_items = set(os.listdir(str(venv.path))) - {\".lock\", \"log\"}\\n        dir_items = {p for p in dir_items if not p.startswith(\".tox-\") or p == \".tox-config1\"}\\n    else:\\n        dir_items = set()\\n\\n    if not (\\n        # doesn\\'t exist => OK\\n        not venv.path.exists()\\n        # does exist, but it\\'s empty => OK\\n        or not dir_items\\n        # tox has marked this as an environment it has created in the past\\n        or \".tox-config1\" in dir_items\\n        # it exists and we\\'re on windows with Lib and Scripts => OK\\n        or (INFO.IS_WIN and dir_items > {\"Scripts\", \"Lib\"})\\n        # non-windows, with lib and bin => OK\\n        or dir_items > {\"bin\", \"lib\"}\\n        # pypy has a different lib folder => OK\\n        or dir_items > {\"bin\", \"lib_pypy\"}\\n    ):\\n        venv.status = \"error\"\\n        reporter.error(\\n            \"cowardly refusing to delete `envdir` (it does not look like a virtualenv): \"\\n            \"{}\".format(venv.path),\\n        )\\n        raise SystemExit(2)\\n\\n    if within_parallel:\\n        if venv.path.exists():\\n            # do not delete the log folder as that\\'s used by parent\\n            for content in venv.path.listdir():\\n                if not content.basename == \"log\":\\n                    content.remove(rec=1, ignore_errors=True)\\n    else:\\n        ensure_empty_dir(venv.path)\\n\\n\\n@tox.hookimpl\\ndef tox_testenv_install_deps(venv, action):\\n    deps = venv.get_resolved_dependencies()\\n    if deps:\\n        depinfo = \", \".join(map(str, deps))\\n        action.setactivity(\"installdeps\", depinfo)\\n        venv._install(deps, action=action)\\n    return True  # Return non-None to indicate plugin has completed\\n\\n\\n@tox.hookimpl\\ndef tox_runtest(venv, redirect):\\n    venv.test(redirect=redirect)\\n    return True  # Return non-None to indicate plugin has completed\\n\\n\\n@tox.hookimpl\\ndef tox_runtest_pre(venv):\\n    venv.status = 0\\n    ensure_empty_dir(venv.envconfig.envtmpdir)\\n    venv.envconfig.envtmpdir.ensure(dir=1)\\n    venv.test(\\n        name=\"run-test-pre\",\\n        commands=venv.envconfig.commands_pre,\\n        redirect=False,\\n        ignore_outcome=False,\\n        ignore_errors=False,\\n        display_hash_seed=True,\\n    )\\n\\n\\n@tox.hookimpl\\ndef tox_runtest_post(venv):\\n    venv.test(\\n        name=\"run-test-post\",\\n        commands=venv.envconfig.commands_post,\\n        redirect=False,\\n        ignore_outcome=False,\\n        ignore_errors=False,\\n    )\\n\\n\\n@tox.hookimpl\\ndef tox_runenvreport(venv, action):\\n    # write out version dependency information\\n    args = venv.envconfig.list_dependencies_command\\n    output = venv._pcall(args, cwd=venv.envconfig.config.toxinidir, action=action, returnout=True)\\n    # the output contains a mime-header, skip it\\n    output = output.split(\"\\\\n\\\\n\")[-1]\\n    packages = output.strip().split(\"\\\\n\")\\n    return packages  # Return non-None to indicate plugin has completed\\n'"}, "return_value": "'import codecs\\nimport json\\nimport os\\nimport pipes\\nimport re\\nimport sys\\nfrom itertools import chain\\n\\nimport py\\n\\nimport tox\\nfrom tox import reporter\\nfrom tox.action import Action\\nfrom tox.config.parallel import ENV_VAR_KEY_PRIVATE as PARALLEL_ENV_VAR_KEY_PRIVATE\\nfrom tox.constants import INFO, PARALLEL_RESULT_JSON_PREFIX, PARALLEL_RESULT_JSON_SUFFIX\\nfrom tox.package.local import resolve_package\\nfrom tox.util.lock import get_unique_file\\nfrom tox.util.path import ensure_empty_dir\\n\\nfrom .config import DepConfig\\n\\n#: maximum parsed shebang interpreter length (see: prepend_shebang_interpreter)\\nMAXINTERP = 2048\\n\\n\\nclass CreationConfig:\\n    def __init__(\\n        self,\\n        base_resolved_python_sha256,\\n        base_resolved_python_path,\\n        tox_version,\\n        sitepackages,\\n        usedevelop,\\n        deps,\\n        alwayscopy,\\n    ):\\n        self.base_resolved_python_sha256 = base_resolved_python_sha256\\n        self.base_resolved_python_path = base_resolved_python_path\\n        self.tox_version = tox_version\\n        self.sitepackages = sitepackages\\n        self.usedevelop = usedevelop\\n        self.alwayscopy = alwayscopy\\n        self.deps = deps\\n\\n    def writeconfig(self, path):\\n        lines = [\\n            \"{} {}\".format(self.base_resolved_python_sha256, self.base_resolved_python_path),\\n            \"{} {:d} {:d} {:d}\".format(\\n                self.tox_version,\\n                self.sitepackages,\\n                self.usedevelop,\\n                self.alwayscopy,\\n            ),\\n        ]\\n        for dep in self.deps:\\n            lines.append(\"{} {}\".format(*dep))\\n        content = \"\\\\n\".join(lines)\\n        path.ensure()\\n        path.write(content)\\n        return content\\n\\n    @classmethod\\n    def readconfig(cls, path):\\n        try:\\n            lines = path.readlines(cr=0)\\n            base_resolved_python_info = lines.pop(0).split(None, 1)\\n            tox_version, sitepackages, usedevelop, alwayscopy = lines.pop(0).split(None, 4)\\n            sitepackages = bool(int(sitepackages))\\n            usedevelop = bool(int(usedevelop))\\n            alwayscopy = bool(int(alwayscopy))\\n            deps = []\\n            for line in lines:\\n                base_resolved_python_sha256, depstring = line.split(None, 1)\\n                deps.append((base_resolved_python_sha256, depstring))\\n            base_resolved_python_sha256, base_resolved_python_path = base_resolved_python_info\\n            return CreationConfig(\\n                base_resolved_python_sha256,\\n                base_resolved_python_path,\\n                tox_version,\\n                sitepackages,\\n                usedevelop,\\n                deps,\\n                alwayscopy,\\n            )\\n        except Exception:\\n            return None\\n\\n    def matches_with_reason(self, other, deps_matches_subset=False):\\n        for attr in (\\n            \"base_resolved_python_sha256\",\\n            \"base_resolved_python_path\",\\n            \"tox_version\",\\n            \"sitepackages\",\\n            \"usedevelop\",\\n            \"alwayscopy\",\\n        ):\\n            left = getattr(self, attr)\\n            right = getattr(other, attr)\\n            if left != right:\\n                return False, \"attr {} {!r}!={!r}\".format(attr, left, right)\\n        self_deps = set(self.deps)\\n        other_deps = set(other.deps)\\n        if self_deps != other_deps:\\n            if deps_matches_subset:\\n                diff = other_deps - self_deps\\n                if diff:\\n                    return False, \"missing in previous {!r}\".format(diff)\\n            else:\\n                return False, \"{!r}!={!r}\".format(self_deps, other_deps)\\n        return True, None\\n\\n    def matches(self, other, deps_matches_subset=False):\\n        outcome, _ = self.matches_with_reason(other, deps_matches_subset)\\n        return outcome\\n\\n\\nclass VirtualEnv(object):\\n    def __init__(self, envconfig=None, popen=None, env_log=None):\\n        self.envconfig = envconfig\\n        self.popen = popen\\n        self._actions = []\\n        self.env_log = env_log\\n        self._result_json_path = None\\n\\n    def new_action(self, msg, *args):\\n        config = self.envconfig.config\\n        command_log = self.env_log.get_commandlog(\\n            \"test\" if msg in (\"run-test\", \"run-test-pre\", \"run-test-post\") else \"setup\",\\n        )\\n        return Action(\\n            self.name,\\n            msg,\\n            args,\\n            self.envconfig.envlogdir,\\n            config.option.resultjson,\\n            command_log,\\n            self.popen,\\n            self.envconfig.envpython,\\n            self.envconfig.suicide_timeout,\\n            self.envconfig.interrupt_timeout,\\n            self.envconfig.terminate_timeout,\\n        )\\n\\n    def get_result_json_path(self):\\n        if self._result_json_path is None:\\n            if self.envconfig.config.option.resultjson:\\n                self._result_json_path = get_unique_file(\\n                    self.path,\\n                    PARALLEL_RESULT_JSON_PREFIX,\\n                    PARALLEL_RESULT_JSON_SUFFIX,\\n                )\\n        return self._result_json_path\\n\\n    @property\\n    def hook(self):\\n        return self.envconfig.config.pluginmanager.hook\\n\\n    @property\\n    def path(self):\\n        \"\"\"Path to environment base dir.\"\"\"\\n        return self.envconfig.envdir\\n\\n    @property\\n    def path_config(self):\\n        return self.path.join(\".tox-config1\")\\n\\n    @property\\n    def name(self):\\n        \"\"\"test environment name.\"\"\"\\n        return self.envconfig.envname\\n\\n    def __repr__(self):\\n        return \"<VirtualEnv at {!r}>\".format(self.path)\\n\\n    def getcommandpath(self, name, venv=True, cwd=None):\\n        \"\"\"Return absolute path (str or localpath) for specified command name.\\n\\n        - If it\\'s a local path we will rewrite it as as a relative path.\\n        - If venv is True we will check if the command is coming from the venv\\n          or is allowed to come from external.\\n        \"\"\"\\n        name = str(name)\\n        if os.path.isabs(name):\\n            return name\\n        if os.path.split(name)[0] == \".\":\\n            path = cwd.join(name)\\n            if path.check():\\n                return str(path)\\n\\n        if venv:\\n            path = self._venv_lookup_and_check_external_allowlist(name)\\n        else:\\n            path = self._normal_lookup(name)\\n\\n        if path is None:\\n            raise tox.exception.InvocationError(\\n                \"could not find executable {}\".format(pipes.quote(name)),\\n            )\\n\\n        return str(path)  # will not be rewritten for reporting\\n\\n    def _venv_lookup_and_check_external_allowlist(self, name):\\n        path = self._venv_lookup(name)\\n        if path is None:\\n            path = self._normal_lookup(name)\\n            if path is not None:\\n                self._check_external_allowed_and_warn(path)\\n        return path\\n\\n    def _venv_lookup(self, name):\\n        return py.path.local.sysfind(name, paths=[self.envconfig.envbindir])\\n\\n    def _normal_lookup(self, name):\\n        return py.path.local.sysfind(name)\\n\\n    def _check_external_allowed_and_warn(self, path):\\n        if not self.is_allowed_external(path):\\n            reporter.warning(\\n                \"test command found but not installed in testenv\\\\n\"\\n                \"  cmd: {}\\\\n\"\\n                \"  env: {}\\\\n\"\\n                \"Maybe you forgot to specify a dependency? \"\\n                \"See also the allowlist_externals envconfig setting.\\\\n\\\\n\"\\n                \"DEPRECATION WARNING: this will be an error in tox 4 and above!\".format(\\n                    path,\\n                    self.envconfig.envdir,\\n                ),\\n            )\\n\\n    def is_allowed_external(self, p):\\n        tryadd = [\"\"]\\n        if tox.INFO.IS_WIN:\\n            tryadd += [os.path.normcase(x) for x in os.environ[\"PATHEXT\"].split(os.pathsep)]\\n            p = py.path.local(os.path.normcase(str(p)))\\n\\n        if self.envconfig.allowlist_externals and self.envconfig.whitelist_externals:\\n            raise tox.exception.ConfigError(\\n                \"Either whitelist_externals or allowlist_externals might be specified, not both\",\\n            )\\n\\n        allowed_externals = (\\n            self.envconfig.whitelist_externals or self.envconfig.allowlist_externals\\n        )\\n        for x in allowed_externals:\\n            for add in tryadd:\\n                if p.fnmatch(x + add):\\n                    return True\\n        return False\\n\\n    def update(self, action):\\n        \"\"\"return status string for updating actual venv to match configuration.\\n        if status string is empty, all is ok.\\n        \"\"\"\\n        rconfig = CreationConfig.readconfig(self.path_config)\\n        if self.envconfig.recreate:\\n            reason = \"-r flag\"\\n        else:\\n            if rconfig is None:\\n                reason = \"no previous config {}\".format(self.path_config)\\n            else:\\n                live_config = self._getliveconfig()\\n                deps_subset_match = getattr(self.envconfig, \"deps_matches_subset\", False)\\n                outcome, reason = rconfig.matches_with_reason(live_config, deps_subset_match)\\n        if reason is None:\\n            action.info(\"reusing\", self.envconfig.envdir)\\n            return\\n        action.info(\"cannot reuse\", reason)\\n        if rconfig is None:\\n            action.setactivity(\"create\", self.envconfig.envdir)\\n        else:\\n            action.setactivity(\"recreate\", self.envconfig.envdir)\\n        try:\\n            self.hook.tox_testenv_create(action=action, venv=self)\\n            self.just_created = True\\n        except tox.exception.UnsupportedInterpreter as exception:\\n            return exception\\n        try:\\n            self.hook.tox_testenv_install_deps(action=action, venv=self)\\n        except tox.exception.InvocationError as exception:\\n            return \"could not install deps {}; v = {!r}\".format(self.envconfig.deps, exception)\\n\\n    def _getliveconfig(self):\\n        base_resolved_python_path = self.envconfig.python_info.executable\\n        version = tox.__version__\\n        sitepackages = self.envconfig.sitepackages\\n        develop = self.envconfig.usedevelop\\n        alwayscopy = self.envconfig.alwayscopy\\n        deps = []\\n        for dep in self.get_resolved_dependencies():\\n            dep_name_sha256 = getdigest(dep.name)\\n            deps.append((dep_name_sha256, dep.name))\\n        base_resolved_python_sha256 = getdigest(base_resolved_python_path)\\n        return CreationConfig(\\n            base_resolved_python_sha256,\\n            base_resolved_python_path,\\n            version,\\n            sitepackages,\\n            develop,\\n            deps,\\n            alwayscopy,\\n        )\\n\\n    def get_resolved_dependencies(self):\\n        dependencies = []\\n        for dependency in self.envconfig.deps:\\n            if dependency.indexserver is None:\\n                package = resolve_package(package_spec=dependency.name)\\n                if package != dependency.name:\\n                    dependency = dependency.__class__(package)\\n            dependencies.append(dependency)\\n        return dependencies\\n\\n    def getsupportedinterpreter(self):\\n        return self.envconfig.getsupportedinterpreter()\\n\\n    def matching_platform(self):\\n        return re.match(self.envconfig.platform, sys.platform)\\n\\n    def finish(self):\\n        previous_config = CreationConfig.readconfig(self.path_config)\\n        live_config = self._getliveconfig()\\n        if previous_config is None or not previous_config.matches(live_config):\\n            content = live_config.writeconfig(self.path_config)\\n            reporter.verbosity1(\"write config to {} as {!r}\".format(self.path_config, content))\\n\\n    def _needs_reinstall(self, setupdir, action):\\n        setup_py = setupdir.join(\"setup.py\")\\n\\n        if not setup_py.exists():\\n            return False\\n\\n        setup_cfg = setupdir.join(\"setup.cfg\")\\n        args = [self.envconfig.envpython, str(setup_py), \"--name\"]\\n        env = self._get_os_environ()\\n        output = action.popen(\\n            args,\\n            cwd=setupdir,\\n            redirect=False,\\n            returnout=True,\\n            env=env,\\n            capture_err=False,\\n        )\\n        name = next(\\n            (i for i in output.split(\"\\\\n\") if i and not i.startswith(\"pydev debugger:\")),\\n            \"\",\\n        )\\n        args = [\\n            self.envconfig.envpython,\\n            \"-c\",\\n            \"import sys;  import json; print(json.dumps(sys.path))\",\\n        ]\\n        out = action.popen(args, redirect=False, returnout=True, env=env)\\n        try:\\n            sys_path = json.loads(out)\\n        except ValueError:\\n            sys_path = []\\n        egg_info_fname = \".\".join((name.replace(\"-\", \"_\"), \"egg-info\"))\\n        for d in reversed(sys_path):\\n            egg_info = py.path.local(d).join(egg_info_fname)\\n            if egg_info.check():\\n                break\\n        else:\\n            return True\\n        needs_reinstall = any(\\n            conf_file.check() and conf_file.mtime() > egg_info.mtime()\\n            for conf_file in (setup_py, setup_cfg)\\n        )\\n\\n        # Ensure the modification time of the egg-info folder is updated so we\\n        # won\\'t need to do this again.\\n        # TODO(stephenfin): Remove once the minimum version of setuptools is\\n        # high enough to include https://github.com/pypa/setuptools/pull/1427/\\n        if needs_reinstall:\\n            egg_info.setmtime()\\n\\n        return needs_reinstall\\n\\n    def install_pkg(self, dir, action, name, is_develop=False):\\n        assert action is not None\\n\\n        if getattr(self, \"just_created\", False):\\n            action.setactivity(name, dir)\\n            self.finish()\\n            pip_flags = [\"--exists-action\", \"w\"]\\n        else:\\n            if is_develop and not self._needs_reinstall(dir, action):\\n                action.setactivity(\"{}-noop\".format(name), dir)\\n                return\\n            action.setactivity(\"{}-nodeps\".format(name), dir)\\n            pip_flags = [\"--no-deps\"] + ([] if is_develop else [\"-U\"])\\n        pip_flags.extend([\"-v\"] * min(3, reporter.verbosity() - 2))\\n        if self.envconfig.extras:\\n            dir += \"[{}]\".format(\",\".join(self.envconfig.extras))\\n        target = [dir]\\n        if is_develop:\\n            target.insert(0, \"-e\")\\n        self._install(target, extraopts=pip_flags, action=action)\\n\\n    def developpkg(self, setupdir, action):\\n        self.install_pkg(setupdir, action, \"develop-inst\", is_develop=True)\\n\\n    def installpkg(self, sdistpath, action):\\n        self.install_pkg(sdistpath, action, \"inst\")\\n\\n    def _installopts(self, indexserver):\\n        options = []\\n        if indexserver:\\n            options += [\"-i\", indexserver]\\n        if self.envconfig.pip_pre:\\n            options.append(\"--pre\")\\n        return options\\n\\n    def run_install_command(self, packages, action, options=()):\\n        def expand(val):\\n            # expand an install command\\n            if val == \"{packages}\":\\n                for package in packages:\\n                    yield package\\n            elif val == \"{opts}\":\\n                for opt in options:\\n                    yield opt\\n            else:\\n                yield val\\n\\n        cmd = list(chain.from_iterable(expand(val) for val in self.envconfig.install_command))\\n\\n        env = self._get_os_environ()\\n        self.ensure_pip_os_environ_ok(env)\\n\\n        old_stdout = sys.stdout\\n        sys.stdout = codecs.getwriter(\"utf8\")(sys.stdout)\\n        try:\\n            self._pcall(\\n                cmd,\\n                cwd=self.envconfig.config.toxinidir,\\n                action=action,\\n                redirect=reporter.verbosity() < reporter.Verbosity.DEBUG,\\n                env=env,\\n            )\\n        except KeyboardInterrupt:\\n            self.status = \"keyboardinterrupt\"\\n            raise\\n        finally:\\n            sys.stdout = old_stdout\\n\\n    def ensure_pip_os_environ_ok(self, env):\\n        for key in (\"PIP_RESPECT_VIRTUALENV\", \"PIP_REQUIRE_VIRTUALENV\", \"__PYVENV_LAUNCHER__\"):\\n            env.pop(key, None)\\n        if all(\"PYTHONPATH\" not in i for i in (self.envconfig.passenv, self.envconfig.setenv)):\\n            # If PYTHONPATH not explicitly asked for, remove it.\\n            if \"PYTHONPATH\" in env:\\n                if sys.version_info < (3, 4) or bool(env[\"PYTHONPATH\"]):\\n                    # https://docs.python.org/3/whatsnew/3.4.html#changes-in-python-command-behavior\\n                    # In a posix shell, setting the PATH environment variable to an empty value is\\n                    # equivalent to not setting it at all.\\n                    reporter.warning(\\n                        \"Discarding $PYTHONPATH from environment, to override \"\\n                        \"specify PYTHONPATH in \\'passenv\\' in your configuration.\",\\n                    )\\n                env.pop(\"PYTHONPATH\")\\n\\n        # installing packages at user level may mean we\\'re not installing inside the venv\\n        env[\"PIP_USER\"] = \"0\"\\n\\n        # installing without dependencies may lead to broken packages\\n        env[\"PIP_NO_DEPS\"] = \"0\"\\n\\n    def _install(self, deps, extraopts=None, action=None):\\n        if not deps:\\n            return\\n        d = {}\\n        ixservers = []\\n        for dep in deps:\\n            if isinstance(dep, (str, py.path.local)):\\n                dep = DepConfig(str(dep), None)\\n            assert isinstance(dep, DepConfig), dep\\n            if dep.indexserver is None:\\n                ixserver = self.envconfig.config.indexserver[\"default\"]\\n            else:\\n                ixserver = dep.indexserver\\n            d.setdefault(ixserver, []).append(dep.name)\\n            if ixserver not in ixservers:\\n                ixservers.append(ixserver)\\n            assert ixserver.url is None or isinstance(ixserver.url, str)\\n\\n        for ixserver in ixservers:\\n            packages = d[ixserver]\\n            options = self._installopts(ixserver.url)\\n            if extraopts:\\n                options.extend(extraopts)\\n            self.run_install_command(packages=packages, options=options, action=action)\\n\\n    def _get_os_environ(self, is_test_command=False):\\n        if is_test_command:\\n            # for executing tests we construct a clean environment\\n            env = {}\\n            for env_key in self.envconfig.passenv:\\n                if env_key in os.environ:\\n                    env[env_key] = os.environ[env_key]\\n        else:\\n            # for executing non-test commands we use the full\\n            # invocation environment\\n            env = os.environ.copy()\\n\\n        # in any case we honor per-testenv setenv configuration\\n        env.update(self.envconfig.setenv.export())\\n\\n        env[\"VIRTUAL_ENV\"] = str(self.path)\\n        return env\\n\\n    def test(\\n        self,\\n        redirect=False,\\n        name=\"run-test\",\\n        commands=None,\\n        ignore_outcome=None,\\n        ignore_errors=None,\\n        display_hash_seed=False,\\n    ):\\n        if commands is None:\\n            commands = self.envconfig.commands\\n        if ignore_outcome is None:\\n            ignore_outcome = self.envconfig.ignore_outcome\\n        if ignore_errors is None:\\n            ignore_errors = self.envconfig.ignore_errors\\n        with self.new_action(name) as action:\\n            cwd = self.envconfig.changedir\\n            if display_hash_seed:\\n                env = self._get_os_environ(is_test_command=True)\\n                # Display PYTHONHASHSEED to assist with reproducibility.\\n                action.setactivity(name, \"PYTHONHASHSEED={!r}\".format(env.get(\"PYTHONHASHSEED\")))\\n            for i, argv in enumerate(filter(bool, commands)):\\n                # have to make strings as _pcall changes argv[0] to a local()\\n                # happens if the same environment is invoked twice\\n                message = \"commands[{}] | {}\".format(\\n                    i,\\n                    \" \".join(pipes.quote(str(x)) for x in argv),\\n                )\\n                action.setactivity(name, message)\\n                # check to see if we need to ignore the return code\\n                # if so, we need to alter the command line arguments\\n                if argv[0].startswith(\"-\"):\\n                    ignore_ret = True\\n                    if argv[0] == \"-\":\\n                        del argv[0]\\n                    else:\\n                        argv[0] = argv[0].lstrip(\"-\")\\n                else:\\n                    ignore_ret = False\\n\\n                try:\\n                    self._pcall(\\n                        argv,\\n                        cwd=cwd,\\n                        action=action,\\n                        redirect=redirect,\\n                        ignore_ret=ignore_ret,\\n                        is_test_command=True,\\n                    )\\n                except tox.exception.InvocationError as err:\\n                    if ignore_outcome:\\n                        msg = \"command failed but result from testenv is ignored\\\\ncmd:\"\\n                        reporter.warning(\"{} {}\".format(msg, err))\\n                        self.status = \"ignored failed command\"\\n                        continue  # keep processing commands\\n\\n                    reporter.error(str(err))\\n                    self.status = \"commands failed\"\\n                    if not ignore_errors:\\n                        break  # Don\\'t process remaining commands\\n                except KeyboardInterrupt:\\n                    self.status = \"keyboardinterrupt\"\\n                    raise\\n\\n    def _pcall(\\n        self,\\n        args,\\n        cwd,\\n        venv=True,\\n        is_test_command=False,\\n        action=None,\\n        redirect=True,\\n        ignore_ret=False,\\n        returnout=False,\\n        env=None,\\n    ):\\n        if env is None:\\n            env = self._get_os_environ(is_test_command=is_test_command)\\n\\n        # construct environment variables\\n        env.pop(\"VIRTUALENV_PYTHON\", None)\\n        bin_dir = str(self.envconfig.envbindir)\\n        path = self.envconfig.setenv.get(\"PATH\") or os.environ[\"PATH\"]\\n        env[\"PATH\"] = os.pathsep.join([bin_dir, path])\\n        reporter.verbosity2(\"setting PATH={}\".format(env[\"PATH\"]))\\n\\n        # get command\\n        args[0] = self.getcommandpath(args[0], venv, cwd)\\n        if sys.platform != \"win32\" and \"TOX_LIMITED_SHEBANG\" in os.environ:\\n            args = prepend_shebang_interpreter(args)\\n\\n        cwd.ensure(dir=1)  # ensure the cwd exists\\n        return action.popen(\\n            args,\\n            cwd=cwd,\\n            env=env,\\n            redirect=redirect,\\n            ignore_ret=ignore_ret,\\n            returnout=returnout,\\n            report_fail=not is_test_command,\\n        )\\n\\n    def setupenv(self):\\n        if self.envconfig._missing_subs:\\n            self.status = (\\n                \"unresolvable substitution(s):\\\\n    {}\\\\n\"\\n                \"Environment variables are missing or defined recursively.\".format(\\n                    \"\\\\n    \".join(\\n                        \"{}: \\'{}\\'\".format(section_key, exc.name)\\n                        for section_key, exc in sorted(self.envconfig._missing_subs.items())\\n                    ),\\n                )\\n            )\\n            return\\n        if not self.matching_platform():\\n            self.status = \"platform mismatch\"\\n            return  # we simply omit non-matching platforms\\n        with self.new_action(\"getenv\", self.envconfig.envdir) as action:\\n            self.status = 0\\n            default_ret_code = 1\\n            envlog = self.env_log\\n            try:\\n                status = self.update(action=action)\\n            except IOError as e:\\n                if e.args[0] != 2:\\n                    raise\\n                status = (\\n                    \"Error creating virtualenv. Note that spaces in paths are \"\\n                    \"not supported by virtualenv. Error details: {!r}\".format(e)\\n                )\\n            except tox.exception.InvocationError as e:\\n                status = e\\n            except tox.exception.InterpreterNotFound as e:\\n                status = e\\n                if self.envconfig.config.option.skip_missing_interpreters == \"true\":\\n                    default_ret_code = 0\\n            except KeyboardInterrupt:\\n                self.status = \"keyboardinterrupt\"\\n                raise\\n            if status:\\n                str_status = str(status)\\n                command_log = envlog.get_commandlog(\"setup\")\\n                command_log.add_command([\"setup virtualenv\"], str_status, default_ret_code)\\n                self.status = status\\n                if default_ret_code == 0:\\n                    reporter.skip(str_status)\\n                else:\\n                    reporter.error(str_status)\\n                return False\\n            command_path = self.getcommandpath(\"python\")\\n            envlog.set_python_info(command_path)\\n            return True\\n\\n    def finishvenv(self):\\n        with self.new_action(\"finishvenv\"):\\n            self.finish()\\n            return True\\n\\n\\ndef getdigest(path):\\n    path = py.path.local(path)\\n    if not path.check(file=1):\\n        return \"0\" * 32\\n    return path.computehash(\"sha256\")\\n\\n\\ndef prepend_shebang_interpreter(args):\\n    # prepend interpreter directive (if any) to argument list\\n    #\\n    # When preparing virtual environments in a file container which has large\\n    # length, the system might not be able to invoke shebang scripts which\\n    # define interpreters beyond system limits (e.g. Linux has a limit of 128;\\n    # BINPRM_BUF_SIZE). This method can be used to check if the executable is\\n    # a script containing a shebang line. If so, extract the interpreter (and\\n    # possible optional argument) and prepend the values to the provided\\n    # argument list. tox will only attempt to read an interpreter directive of\\n    # a maximum size of 2048 bytes to limit excessive reading and support UNIX\\n    # systems which may support a longer interpret length.\\n    try:\\n        with open(args[0], \"rb\") as f:\\n            if f.read(1) == b\"#\" and f.read(1) == b\"!\":\\n                interp = f.readline(MAXINTERP + 1).rstrip().decode(\"UTF-8\")\\n                if len(interp) > MAXINTERP:  # avoid a truncated interpreter\\n                    return args\\n                interp_args = interp.split(None, 1)[:2]\\n                return interp_args + args\\n    except (UnicodeDecodeError, IOError):\\n        pass\\n    return args\\n\\n\\n_SKIP_VENV_CREATION = os.environ.get(\"_TOX_SKIP_ENV_CREATION_TEST\", False) == \"1\"\\n\\n\\n@tox.hookimpl\\ndef tox_testenv_create(venv, action):\\n    config_interpreter = venv.getsupportedinterpreter()\\n    args = [sys.executable, \"-m\", \"virtualenv\"]\\n    if venv.envconfig.sitepackages:\\n        args.append(\"--system-site-packages\")\\n    if venv.envconfig.alwayscopy:\\n        args.append(\"--always-copy\")\\n    if not venv.envconfig.download:\\n        args.append(\"--no-download\")\\n    else:\\n        args.append(\"--download\")\\n    # add interpreter explicitly, to prevent using default (virtualenv.ini)\\n    args.extend([\"--python\", str(config_interpreter)])\\n\\n    cleanup_for_venv(venv)\\n\\n    base_path = venv.path.dirpath()\\n    base_path.ensure(dir=1)\\n    args.append(venv.path.basename)\\n    if not _SKIP_VENV_CREATION:\\n        try:\\n            venv._pcall(\\n                args,\\n                venv=False,\\n                action=action,\\n                cwd=base_path,\\n                redirect=reporter.verbosity() < reporter.Verbosity.DEBUG,\\n            )\\n        except KeyboardInterrupt:\\n            venv.status = \"keyboardinterrupt\"\\n            raise\\n    return True  # Return non-None to indicate plugin has completed\\n\\n\\ndef cleanup_for_venv(venv):\\n    within_parallel = PARALLEL_ENV_VAR_KEY_PRIVATE in os.environ\\n    # if the directory exists and it doesn\\'t look like a virtualenv, produce\\n    # an error\\n    if venv.path.exists():\\n        dir_items = set(os.listdir(str(venv.path))) - {\".lock\", \"log\"}\\n        dir_items = {p for p in dir_items if not p.startswith(\".tox-\") or p == \".tox-config1\"}\\n    else:\\n        dir_items = set()\\n\\n    if not (\\n        # doesn\\'t exist => OK\\n        not venv.path.exists()\\n        # does exist, but it\\'s empty => OK\\n        or not dir_items\\n        # tox has marked this as an environment it has created in the past\\n        or \".tox-config1\" in dir_items\\n        # it exists and we\\'re on windows with Lib and Scripts => OK\\n        or (INFO.IS_WIN and dir_items > {\"Scripts\", \"Lib\"})\\n        # non-windows, with lib and bin => OK\\n        or dir_items > {\"bin\", \"lib\"}\\n        # pypy has a different lib folder => OK\\n        or dir_items > {\"bin\", \"lib_pypy\"}\\n    ):\\n        venv.status = \"error\"\\n        reporter.error(\\n            \"cowardly refusing to delete `envdir` (it does not look like a virtualenv): \"\\n            \"{}\".format(venv.path),\\n        )\\n        raise SystemExit(2)\\n\\n    if within_parallel:\\n        if venv.path.exists():\\n            # do not delete the log folder as that\\'s used by parent\\n            for content in venv.path.listdir():\\n                if not content.basename == \"log\":\\n                    content.remove(rec=1, ignore_errors=True)\\n    else:\\n        ensure_empty_dir(venv.path)\\n\\n\\n@tox.hookimpl\\ndef tox_testenv_install_deps(venv, action):\\n    deps = venv.get_resolved_dependencies()\\n    if deps:\\n        depinfo = \", \".join(map(str, deps))\\n        action.setactivity(\"installdeps\", depinfo)\\n        venv._install(deps, action=action)\\n    return True  # Return non-None to indicate plugin has completed\\n\\n\\n@tox.hookimpl\\ndef tox_runtest(venv, redirect):\\n    venv.test(redirect=redirect)\\n    return True  # Return non-None to indicate plugin has completed\\n\\n\\n@tox.hookimpl\\ndef tox_runtest_pre(venv):\\n    venv.status = 0\\n    ensure_empty_dir(venv.envconfig.envtmpdir)\\n    venv.envconfig.envtmpdir.ensure(dir=1)\\n    venv.test(\\n        name=\"run-test-pre\",\\n        commands=venv.envconfig.commands_pre,\\n        redirect=False,\\n        ignore_outcome=False,\\n        ignore_errors=False,\\n        display_hash_seed=True,\\n    )\\n\\n\\n@tox.hookimpl\\ndef tox_runtest_post(venv):\\n    venv.test(\\n        name=\"run-test-post\",\\n        commands=venv.envconfig.commands_post,\\n        redirect=False,\\n        ignore_outcome=False,\\n        ignore_errors=False,\\n    )\\n\\n\\n@tox.hookimpl\\ndef tox_runenvreport(venv, action):\\n    # write out version dependency information\\n    args = venv.envconfig.list_dependencies_command\\n    output = venv._pcall(args, cwd=venv.envconfig.config.toxinidir, action=action, returnout=True)\\n    # the output contains a mime-header, skip it\\n    output = output.split(\"\\\\n\\\\n\")[-1]\\n    packages = output.strip().split(\"\\\\n\")\\n    return packages  # Return non-None to indicate plugin has completed\\n'"}, {"func_args": {"source": "'import codecs\\nimport json\\nimport os\\nimport pipes\\nimport re\\nimport sys\\nfrom itertools import chain\\n\\nimport py\\n\\nimport tox\\nfrom tox import reporter\\nfrom tox.action import Action\\nfrom tox.config.parallel import ENV_VAR_KEY_PRIVATE as PARALLEL_ENV_VAR_KEY_PRIVATE\\nfrom tox.constants import INFO, PARALLEL_RESULT_JSON_PREFIX, PARALLEL_RESULT_JSON_SUFFIX\\nfrom tox.package.local import resolve_package\\nfrom tox.util.lock import get_unique_file\\nfrom tox.util.path import ensure_empty_dir\\n\\nfrom .config import DepConfig\\n\\n#: maximum parsed shebang interpreter length (see: prepend_shebang_interpreter)\\nMAXINTERP = 2048\\n\\n\\nclass CreationConfig:\\n    def __init__(\\n        self,\\n        base_resolved_python_sha256,\\n        base_resolved_python_path,\\n        tox_version,\\n        sitepackages,\\n        usedevelop,\\n        deps,\\n        alwayscopy,\\n    ):\\n        self.base_resolved_python_sha256 = base_resolved_python_sha256\\n        self.base_resolved_python_path = base_resolved_python_path\\n        self.tox_version = tox_version\\n        self.sitepackages = sitepackages\\n        self.usedevelop = usedevelop\\n        self.alwayscopy = alwayscopy\\n        self.deps = deps\\n\\n    def writeconfig(self, path):\\n        lines = [\\n            \"{} {}\".format(self.base_resolved_python_sha256, self.base_resolved_python_path),\\n            \"{} {:d} {:d} {:d}\".format(\\n                self.tox_version,\\n                self.sitepackages,\\n                self.usedevelop,\\n                self.alwayscopy,\\n            ),\\n        ]\\n        for dep in self.deps:\\n            lines.append(\"{} {}\".format(*dep))\\n        content = \"\\\\n\".join(lines)\\n        path.ensure()\\n        path.write(content)\\n        return content\\n\\n    @classmethod\\n    def readconfig(cls, path):\\n        try:\\n            lines = path.readlines(cr=0)\\n            base_resolved_python_info = lines.pop(0).split(None, 1)\\n            tox_version, sitepackages, usedevelop, alwayscopy = lines.pop(0).split(None, 4)\\n            sitepackages = bool(int(sitepackages))\\n            usedevelop = bool(int(usedevelop))\\n            alwayscopy = bool(int(alwayscopy))\\n            deps = []\\n            for line in lines:\\n                base_resolved_python_sha256, depstring = line.split(None, 1)\\n                deps.append((base_resolved_python_sha256, depstring))\\n            base_resolved_python_sha256, base_resolved_python_path = base_resolved_python_info\\n            return CreationConfig(\\n                base_resolved_python_sha256,\\n                base_resolved_python_path,\\n                tox_version,\\n                sitepackages,\\n                usedevelop,\\n                deps,\\n                alwayscopy,\\n            )\\n        except Exception:\\n            return None\\n\\n    def matches_with_reason(self, other, deps_matches_subset=False):\\n        for attr in (\\n            \"base_resolved_python_sha256\",\\n            \"base_resolved_python_path\",\\n            \"tox_version\",\\n            \"sitepackages\",\\n            \"usedevelop\",\\n            \"alwayscopy\",\\n        ):\\n            left = getattr(self, attr)\\n            right = getattr(other, attr)\\n            if left != right:\\n                return False, \"attr {} {!r}!={!r}\".format(attr, left, right)\\n        self_deps = set(self.deps)\\n        other_deps = set(other.deps)\\n        if self_deps != other_deps:\\n            if deps_matches_subset:\\n                diff = other_deps - self_deps\\n                if diff:\\n                    return False, \"missing in previous {!r}\".format(diff)\\n            else:\\n                return False, \"{!r}!={!r}\".format(self_deps, other_deps)\\n        return True, None\\n\\n    def matches(self, other, deps_matches_subset=False):\\n        outcome, _ = self.matches_with_reason(other, deps_matches_subset)\\n        return outcome\\n\\n\\nclass VirtualEnv(object):\\n    def __init__(self, envconfig=None, popen=None, env_log=None):\\n        self.envconfig = envconfig\\n        self.popen = popen\\n        self._actions = []\\n        self.env_log = env_log\\n        self._result_json_path = None\\n\\n    def new_action(self, msg, *args):\\n        config = self.envconfig.config\\n        command_log = self.env_log.get_commandlog(\\n            \"test\" if msg in (\"run-test\", \"run-test-pre\", \"run-test-post\") else \"setup\",\\n        )\\n        return Action(\\n            self.name,\\n            msg,\\n            args,\\n            self.envconfig.envlogdir,\\n            config.option.resultjson,\\n            command_log,\\n            self.popen,\\n            self.envconfig.envpython,\\n            self.envconfig.suicide_timeout,\\n            self.envconfig.interrupt_timeout,\\n            self.envconfig.terminate_timeout,\\n        )\\n\\n    def get_result_json_path(self):\\n        if self._result_json_path is None:\\n            if self.envconfig.config.option.resultjson:\\n                self._result_json_path = get_unique_file(\\n                    self.path,\\n                    PARALLEL_RESULT_JSON_PREFIX,\\n                    PARALLEL_RESULT_JSON_SUFFIX,\\n                )\\n        return self._result_json_path\\n\\n    @property\\n    def hook(self):\\n        return self.envconfig.config.pluginmanager.hook\\n\\n    @property\\n    def path(self):\\n        \"\"\"Path to environment base dir.\"\"\"\\n        return self.envconfig.envdir\\n\\n    @property\\n    def path_config(self):\\n        return self.path.join(\".tox-config1\")\\n\\n    @property\\n    def name(self):\\n        \"\"\"test environment name.\"\"\"\\n        return self.envconfig.envname\\n\\n    def __repr__(self):\\n        return \"<VirtualEnv at {!r}>\".format(self.path)\\n\\n    def getcommandpath(self, name, venv=True, cwd=None):\\n        \"\"\"Return absolute path (str or localpath) for specified command name.\\n\\n        - If it\\'s a local path we will rewrite it as as a relative path.\\n        - If venv is True we will check if the command is coming from the venv\\n          or is allowed to come from external.\\n        \"\"\"\\n        name = str(name)\\n        if os.path.isabs(name):\\n            return name\\n        if os.path.split(name)[0] == \".\":\\n            path = cwd.join(name)\\n            if path.check():\\n                return str(path)\\n\\n        if venv:\\n            path = self._venv_lookup_and_check_external_allowlist(name)\\n        else:\\n            path = self._normal_lookup(name)\\n\\n        if path is None:\\n            raise tox.exception.InvocationError(\\n                \"could not find executable {}\".format(pipes.quote(name)),\\n            )\\n\\n        return str(path)  # will not be rewritten for reporting\\n\\n    def _venv_lookup_and_check_external_allowlist(self, name):\\n        path = self._venv_lookup(name)\\n        if path is None:\\n            path = self._normal_lookup(name)\\n            if path is not None:\\n                self._check_external_allowed_and_warn(path)\\n        return path\\n\\n    def _venv_lookup(self, name):\\n        return py.path.local.sysfind(name, paths=[self.envconfig.envbindir])\\n\\n    def _normal_lookup(self, name):\\n        return py.path.local.sysfind(name)\\n\\n    def _check_external_allowed_and_warn(self, path):\\n        if not self.is_allowed_external(path):\\n            reporter.warning(\\n                \"test command found but not installed in testenv\\\\n\"\\n                \"  cmd: {}\\\\n\"\\n                \"  env: {}\\\\n\"\\n                \"Maybe you forgot to specify a dependency? \"\\n                \"See also the allowlist_externals envconfig setting.\\\\n\\\\n\"\\n                \"DEPRECATION WARNING: this will be an error in tox 4 and above!\".format(\\n                    path,\\n                    self.envconfig.envdir,\\n                ),\\n            )\\n\\n    def is_allowed_external(self, p):\\n        tryadd = [\"\"]\\n        if tox.INFO.IS_WIN:\\n            tryadd += [os.path.normcase(x) for x in os.environ[\"PATHEXT\"].split(os.pathsep)]\\n            p = py.path.local(os.path.normcase(str(p)))\\n\\n        if self.envconfig.allowlist_externals and self.envconfig.whitelist_externals:\\n            raise tox.exception.ConfigError(\\n                \"Either whitelist_externals or allowlist_externals might be specified, not both\",\\n            )\\n\\n        allowed_externals = (\\n            self.envconfig.whitelist_externals or self.envconfig.allowlist_externals\\n        )\\n        for x in allowed_externals:\\n            for add in tryadd:\\n                if p.fnmatch(x + add):\\n                    return True\\n        return False\\n\\n    def update(self, action):\\n        \"\"\"return status string for updating actual venv to match configuration.\\n        if status string is empty, all is ok.\\n        \"\"\"\\n        rconfig = CreationConfig.readconfig(self.path_config)\\n        if self.envconfig.recreate:\\n            reason = \"-r flag\"\\n        else:\\n            if rconfig is None:\\n                reason = \"no previous config {}\".format(self.path_config)\\n            else:\\n                live_config = self._getliveconfig()\\n                deps_subset_match = getattr(self.envconfig, \"deps_matches_subset\", False)\\n                outcome, reason = rconfig.matches_with_reason(live_config, deps_subset_match)\\n        if reason is None:\\n            action.info(\"reusing\", self.envconfig.envdir)\\n            return\\n        action.info(\"cannot reuse\", reason)\\n        if rconfig is None:\\n            action.setactivity(\"create\", self.envconfig.envdir)\\n        else:\\n            action.setactivity(\"recreate\", self.envconfig.envdir)\\n        try:\\n            self.hook.tox_testenv_create(action=action, venv=self)\\n            self.just_created = True\\n        except tox.exception.UnsupportedInterpreter as exception:\\n            return exception\\n        try:\\n            self.hook.tox_testenv_install_deps(action=action, venv=self)\\n        except tox.exception.InvocationError as exception:\\n            return \"could not install deps {}; v = {!r}\".format(self.envconfig.deps, exception)\\n\\n    def _getliveconfig(self):\\n        base_resolved_python_path = self.envconfig.python_info.executable\\n        version = tox.__version__\\n        sitepackages = self.envconfig.sitepackages\\n        develop = self.envconfig.usedevelop\\n        alwayscopy = self.envconfig.alwayscopy\\n        deps = []\\n        for dep in self.get_resolved_dependencies():\\n            dep_name_sha256 = getdigest(dep.name)\\n            deps.append((dep_name_sha256, dep.name))\\n        base_resolved_python_sha256 = getdigest(base_resolved_python_path)\\n        return CreationConfig(\\n            base_resolved_python_sha256,\\n            base_resolved_python_path,\\n            version,\\n            sitepackages,\\n            develop,\\n            deps,\\n            alwayscopy,\\n        )\\n\\n    def get_resolved_dependencies(self):\\n        dependencies = []\\n        for dependency in self.envconfig.deps:\\n            if dependency.indexserver is None:\\n                package = resolve_package(package_spec=dependency.name)\\n                if package != dependency.name:\\n                    dependency = dependency.__class__(package)\\n            dependencies.append(dependency)\\n        return dependencies\\n\\n    def getsupportedinterpreter(self):\\n        return self.envconfig.getsupportedinterpreter()\\n\\n    def matching_platform(self):\\n        return re.match(self.envconfig.platform, sys.platform)\\n\\n    def finish(self):\\n        previous_config = CreationConfig.readconfig(self.path_config)\\n        live_config = self._getliveconfig()\\n        if previous_config is None or not previous_config.matches(live_config):\\n            content = live_config.writeconfig(self.path_config)\\n            reporter.verbosity1(\"write config to {} as {!r}\".format(self.path_config, content))\\n\\n    def _needs_reinstall(self, setupdir, action):\\n        setup_py = setupdir.join(\"setup.py\")\\n\\n        if not setup_py.exists():\\n            return False\\n\\n        setup_cfg = setupdir.join(\"setup.cfg\")\\n        args = [self.envconfig.envpython, str(setup_py), \"--name\"]\\n        env = self._get_os_environ()\\n        output = action.popen(\\n            args,\\n            cwd=setupdir,\\n            redirect=False,\\n            returnout=True,\\n            env=env,\\n            capture_err=False,\\n        )\\n        name = next(\\n            (i for i in output.split(\"\\\\n\") if i and not i.startswith(\"pydev debugger:\")),\\n            \"\",\\n        )\\n        args = [\\n            self.envconfig.envpython,\\n            \"-c\",\\n            \"import sys;  import json; print(json.dumps(sys.path))\",\\n        ]\\n        out = action.popen(args, redirect=False, returnout=True, env=env)\\n        try:\\n            sys_path = json.loads(out)\\n        except ValueError:\\n            sys_path = []\\n        egg_info_fname = \".\".join((name.replace(\"-\", \"_\"), \"egg-info\"))\\n        for d in reversed(sys_path):\\n            egg_info = py.path.local(d).join(egg_info_fname)\\n            if egg_info.check():\\n                break\\n        else:\\n            return True\\n        needs_reinstall = any(\\n            conf_file.check() and conf_file.mtime() > egg_info.mtime()\\n            for conf_file in (setup_py, setup_cfg)\\n        )\\n\\n        # Ensure the modification time of the egg-info folder is updated so we\\n        # won\\'t need to do this again.\\n        # TODO(stephenfin): Remove once the minimum version of setuptools is\\n        # high enough to include https://github.com/pypa/setuptools/pull/1427/\\n        if needs_reinstall:\\n            egg_info.setmtime()\\n\\n        return needs_reinstall\\n\\n    def install_pkg(self, dir, action, name, is_develop=False):\\n        assert action is not None\\n\\n        if getattr(self, \"just_created\", False):\\n            action.setactivity(name, dir)\\n            self.finish()\\n            pip_flags = [\"--exists-action\", \"w\"]\\n        else:\\n            if is_develop and not self._needs_reinstall(dir, action):\\n                action.setactivity(\"{}-noop\".format(name), dir)\\n                return\\n            action.setactivity(\"{}-nodeps\".format(name), dir)\\n            pip_flags = [\"--no-deps\"] + ([] if is_develop else [\"-U\"])\\n        pip_flags.extend([\"-v\"] * min(3, reporter.verbosity() - 2))\\n        if self.envconfig.extras:\\n            dir += \"[{}]\".format(\",\".join(self.envconfig.extras))\\n        target = [dir]\\n        if is_develop:\\n            target.insert(0, \"-e\")\\n        self._install(target, extraopts=pip_flags, action=action)\\n\\n    def developpkg(self, setupdir, action):\\n        self.install_pkg(setupdir, action, \"develop-inst\", is_develop=True)\\n\\n    def installpkg(self, sdistpath, action):\\n        self.install_pkg(sdistpath, action, \"inst\")\\n\\n    def _installopts(self, indexserver):\\n        options = []\\n        if indexserver:\\n            options += [\"-i\", indexserver]\\n        if self.envconfig.pip_pre:\\n            options.append(\"--pre\")\\n        return options\\n\\n    def run_install_command(self, packages, action, options=()):\\n        def expand(val):\\n            # expand an install command\\n            if val == \"{packages}\":\\n                for package in packages:\\n                    yield package\\n            elif val == \"{opts}\":\\n                for opt in options:\\n                    yield opt\\n            else:\\n                yield val\\n\\n        cmd = list(chain.from_iterable(expand(val) for val in self.envconfig.install_command))\\n\\n        env = self._get_os_environ()\\n        self.ensure_pip_os_environ_ok(env)\\n\\n        old_stdout = sys.stdout\\n        sys.stdout = codecs.getwriter(\"utf8\")(sys.stdout)\\n        try:\\n            self._pcall(\\n                cmd,\\n                cwd=self.envconfig.config.toxinidir,\\n                action=action,\\n                redirect=reporter.verbosity() < reporter.Verbosity.DEBUG,\\n                env=env,\\n            )\\n        except KeyboardInterrupt:\\n            self.status = \"keyboardinterrupt\"\\n            raise\\n        finally:\\n            sys.stdout = old_stdout\\n\\n    def ensure_pip_os_environ_ok(self, env):\\n        for key in (\"PIP_RESPECT_VIRTUALENV\", \"PIP_REQUIRE_VIRTUALENV\", \"__PYVENV_LAUNCHER__\"):\\n            env.pop(key, None)\\n        if all(\"PYTHONPATH\" not in i for i in (self.envconfig.passenv, self.envconfig.setenv)):\\n            # If PYTHONPATH not explicitly asked for, remove it.\\n            if \"PYTHONPATH\" in env:\\n                if sys.version_info < (3, 4) or bool(env[\"PYTHONPATH\"]):\\n                    # https://docs.python.org/3/whatsnew/3.4.html#changes-in-python-command-behavior\\n                    # In a posix shell, setting the PATH environment variable to an empty value is\\n                    # equivalent to not setting it at all.\\n                    reporter.warning(\\n                        \"Discarding $PYTHONPATH from environment, to override \"\\n                        \"specify PYTHONPATH in \\'passenv\\' in your configuration.\",\\n                    )\\n                env.pop(\"PYTHONPATH\")\\n\\n        # installing packages at user level may mean we\\'re not installing inside the venv\\n        env[\"PIP_USER\"] = \"0\"\\n\\n        # installing without dependencies may lead to broken packages\\n        env[\"PIP_NO_DEPS\"] = \"0\"\\n\\n    def _install(self, deps, extraopts=None, action=None):\\n        if not deps:\\n            return\\n        d = {}\\n        ixservers = []\\n        for dep in deps:\\n            if isinstance(dep, (str, py.path.local)):\\n                dep = DepConfig(str(dep), None)\\n            assert isinstance(dep, DepConfig), dep\\n            if dep.indexserver is None:\\n                ixserver = self.envconfig.config.indexserver[\"default\"]\\n            else:\\n                ixserver = dep.indexserver\\n            d.setdefault(ixserver, []).append(dep.name)\\n            if ixserver not in ixservers:\\n                ixservers.append(ixserver)\\n            assert ixserver.url is None or isinstance(ixserver.url, str)\\n\\n        for ixserver in ixservers:\\n            packages = d[ixserver]\\n            options = self._installopts(ixserver.url)\\n            if extraopts:\\n                options.extend(extraopts)\\n            self.run_install_command(packages=packages, options=options, action=action)\\n\\n    def _get_os_environ(self, is_test_command=False):\\n        if is_test_command:\\n            # for executing tests we construct a clean environment\\n            env = {}\\n            for env_key in self.envconfig.passenv:\\n                if env_key in os.environ:\\n                    env[env_key] = os.environ[env_key]\\n        else:\\n            # for executing non-test commands we use the full\\n            # invocation environment\\n            env = os.environ.copy()\\n\\n        # in any case we honor per-testenv setenv configuration\\n        env.update(self.envconfig.setenv.export())\\n\\n        env[\"VIRTUAL_ENV\"] = str(self.path)\\n        return env\\n\\n    def test(\\n        self,\\n        redirect=False,\\n        name=\"run-test\",\\n        commands=None,\\n        ignore_outcome=None,\\n        ignore_errors=None,\\n        display_hash_seed=False,\\n    ):\\n        if commands is None:\\n            commands = self.envconfig.commands\\n        if ignore_outcome is None:\\n            ignore_outcome = self.envconfig.ignore_outcome\\n        if ignore_errors is None:\\n            ignore_errors = self.envconfig.ignore_errors\\n        with self.new_action(name) as action:\\n            cwd = self.envconfig.changedir\\n            if display_hash_seed:\\n                env = self._get_os_environ(is_test_command=True)\\n                # Display PYTHONHASHSEED to assist with reproducibility.\\n                action.setactivity(name, \"PYTHONHASHSEED={!r}\".format(env.get(\"PYTHONHASHSEED\")))\\n            for i, argv in enumerate(filter(bool, commands)):\\n                # have to make strings as _pcall changes argv[0] to a local()\\n                # happens if the same environment is invoked twice\\n                message = \"commands[{}] | {}\".format(\\n                    i,\\n                    \" \".join(pipes.quote(str(x)) for x in argv),\\n                )\\n                action.setactivity(name, message)\\n                # check to see if we need to ignore the return code\\n                # if so, we need to alter the command line arguments\\n                if argv[0].startswith(\"-\"):\\n                    ignore_ret = True\\n                    if argv[0] == \"-\":\\n                        del argv[0]\\n                    else:\\n                        argv[0] = argv[0].lstrip(\"-\")\\n                else:\\n                    ignore_ret = False\\n\\n                try:\\n                    self._pcall(\\n                        argv,\\n                        cwd=cwd,\\n                        action=action,\\n                        redirect=redirect,\\n                        ignore_ret=ignore_ret,\\n                        is_test_command=True,\\n                    )\\n                except tox.exception.InvocationError as err:\\n                    if ignore_outcome:\\n                        msg = \"command failed but result from testenv is ignored\\\\ncmd:\"\\n                        reporter.warning(\"{} {}\".format(msg, err))\\n                        self.status = \"ignored failed command\"\\n                        continue  # keep processing commands\\n\\n                    reporter.error(str(err))\\n                    self.status = \"commands failed\"\\n                    if not ignore_errors:\\n                        break  # Don\\'t process remaining commands\\n                except KeyboardInterrupt:\\n                    self.status = \"keyboardinterrupt\"\\n                    raise\\n\\n    def _pcall(\\n        self,\\n        args,\\n        cwd,\\n        venv=True,\\n        is_test_command=False,\\n        action=None,\\n        redirect=True,\\n        ignore_ret=False,\\n        returnout=False,\\n        env=None,\\n    ):\\n        if env is None:\\n            env = self._get_os_environ(is_test_command=is_test_command)\\n\\n        # construct environment variables\\n        env.pop(\"VIRTUALENV_PYTHON\", None)\\n        bin_dir = str(self.envconfig.envbindir)\\n        path = self.envconfig.setenv.get(\"PATH\") or os.environ[\"PATH\"]\\n        env[\"PATH\"] = os.pathsep.join([bin_dir, path])\\n        reporter.verbosity2(\"setting PATH={}\".format(env[\"PATH\"]))\\n\\n        # get command\\n        args[0] = self.getcommandpath(args[0], venv, cwd)\\n        if sys.platform != \"win32\" and \"TOX_LIMITED_SHEBANG\" in os.environ:\\n            args = prepend_shebang_interpreter(args)\\n\\n        cwd.ensure(dir=1)  # ensure the cwd exists\\n        return action.popen(\\n            args,\\n            cwd=cwd,\\n            env=env,\\n            redirect=redirect,\\n            ignore_ret=ignore_ret,\\n            returnout=returnout,\\n            report_fail=not is_test_command,\\n        )\\n\\n    def setupenv(self):\\n        if self.envconfig._missing_subs:\\n            self.status = (\\n                \"unresolvable substitution(s):\\\\n    {}\\\\n\"\\n                \"Environment variables are missing or defined recursively.\".format(\\n                    \"\\\\n    \".join(\\n                        \"{}: \\'{}\\'\".format(section_key, exc.name)\\n                        for section_key, exc in sorted(self.envconfig._missing_subs.items())\\n                    ),\\n                )\\n            )\\n            return\\n        if not self.matching_platform():\\n            self.status = \"platform mismatch\"\\n            return  # we simply omit non-matching platforms\\n        with self.new_action(\"getenv\", self.envconfig.envdir) as action:\\n            self.status = 0\\n            default_ret_code = 1\\n            envlog = self.env_log\\n            try:\\n                status = self.update(action=action)\\n            except IOError as e:\\n                if e.args[0] != 2:\\n                    raise\\n                status = (\\n                    \"Error creating virtualenv. Note that spaces in paths are \"\\n                    \"not supported by virtualenv. Error details: {!r}\".format(e)\\n                )\\n            except tox.exception.InvocationError as e:\\n                status = e\\n            except tox.exception.InterpreterNotFound as e:\\n                status = e\\n                if self.envconfig.config.option.skip_missing_interpreters == \"true\":\\n                    default_ret_code = 0\\n            except KeyboardInterrupt:\\n                self.status = \"keyboardinterrupt\"\\n                raise\\n            if status:\\n                str_status = str(status)\\n                command_log = envlog.get_commandlog(\"setup\")\\n                command_log.add_command([\"setup virtualenv\"], str_status, default_ret_code)\\n                self.status = status\\n                if default_ret_code == 0:\\n                    reporter.skip(str_status)\\n                else:\\n                    reporter.error(str_status)\\n                return False\\n            command_path = self.getcommandpath(\"python\")\\n            envlog.set_python_info(command_path)\\n            return True\\n\\n    def finishvenv(self):\\n        with self.new_action(\"finishvenv\"):\\n            self.finish()\\n            return True\\n\\n\\ndef getdigest(path):\\n    path = py.path.local(path)\\n    if not path.check(file=1):\\n        return \"0\" * 32\\n    return path.computehash(\"sha256\")\\n\\n\\ndef prepend_shebang_interpreter(args):\\n    # prepend interpreter directive (if any) to argument list\\n    #\\n    # When preparing virtual environments in a file container which has large\\n    # length, the system might not be able to invoke shebang scripts which\\n    # define interpreters beyond system limits (e.g. Linux has a limit of 128;\\n    # BINPRM_BUF_SIZE). This method can be used to check if the executable is\\n    # a script containing a shebang line. If so, extract the interpreter (and\\n    # possible optional argument) and prepend the values to the provided\\n    # argument list. tox will only attempt to read an interpreter directive of\\n    # a maximum size of 2048 bytes to limit excessive reading and support UNIX\\n    # systems which may support a longer interpret length.\\n    try:\\n        with open(args[0], \"rb\") as f:\\n            if f.read(1) == b\"#\" and f.read(1) == b\"!\":\\n                interp = f.readline(MAXINTERP + 1).rstrip().decode(\"UTF-8\")\\n                if len(interp) > MAXINTERP:  # avoid a truncated interpreter\\n                    return args\\n                interp_args = interp.split(None, 1)[:2]\\n                return interp_args + args\\n    except (UnicodeDecodeError, IOError):\\n        pass\\n    return args\\n\\n\\n_SKIP_VENV_CREATION = os.environ.get(\"_TOX_SKIP_ENV_CREATION_TEST\", False) == \"1\"\\n\\n\\n@tox.hookimpl\\ndef tox_testenv_create(venv, action):\\n    config_interpreter = venv.getsupportedinterpreter()\\n    args = [sys.executable, \"-m\", \"virtualenv\"]\\n    if venv.envconfig.sitepackages:\\n        args.append(\"--system-site-packages\")\\n    if venv.envconfig.alwayscopy:\\n        args.append(\"--always-copy\")\\n    if not venv.envconfig.download:\\n        args.append(\"--no-download\")\\n    else:\\n        args.append(\"--download\")\\n    # add interpreter explicitly, to prevent using default (virtualenv.ini)\\n    args.extend([\"--python\", str(config_interpreter)])\\n\\n    cleanup_for_venv(venv)\\n\\n    base_path = venv.path.dirpath()\\n    base_path.ensure(dir=1)\\n    args.append(venv.path.basename)\\n    if not _SKIP_VENV_CREATION:\\n        try:\\n            venv._pcall(\\n                args,\\n                venv=False,\\n                action=action,\\n                cwd=base_path,\\n                redirect=reporter.verbosity() < reporter.Verbosity.DEBUG,\\n            )\\n        except KeyboardInterrupt:\\n            venv.status = \"keyboardinterrupt\"\\n            raise\\n    return True  # Return non-None to indicate plugin has completed\\n\\n\\ndef cleanup_for_venv(venv):\\n    within_parallel = PARALLEL_ENV_VAR_KEY_PRIVATE in os.environ\\n    # if the directory exists and it doesn\\'t look like a virtualenv, produce\\n    # an error\\n    if venv.path.exists():\\n        dir_items = set(os.listdir(str(venv.path))) - {\".lock\", \"log\"}\\n        dir_items = {p for p in dir_items if not p.startswith(\".tox-\") or p == \".tox-config1\"}\\n    else:\\n        dir_items = set()\\n\\n    if not (\\n        # doesn\\'t exist => OK\\n        not venv.path.exists()\\n        # does exist, but it\\'s empty => OK\\n        or not dir_items\\n        # tox has marked this as an environment it has created in the past\\n        or \".tox-config1\" in dir_items\\n        # it exists and we\\'re on windows with Lib and Scripts => OK\\n        or (INFO.IS_WIN and dir_items > {\"Scripts\", \"Lib\"})\\n        # non-windows, with lib and bin => OK\\n        or dir_items > {\"bin\", \"lib\"}\\n        # pypy has a different lib folder => OK\\n        or dir_items > {\"bin\", \"lib_pypy\"}\\n    ):\\n        venv.status = \"error\"\\n        reporter.error(\\n            \"cowardly refusing to delete `envdir` (it does not look like a virtualenv): \"\\n            \"{}\".format(venv.path),\\n        )\\n        raise SystemExit(2)\\n\\n    if within_parallel:\\n        if venv.path.exists():\\n            # do not delete the log folder as that\\'s used by parent\\n            for content in venv.path.listdir():\\n                if not content.basename == \"log\":\\n                    content.remove(rec=1, ignore_errors=True)\\n    else:\\n        ensure_empty_dir(venv.path)\\n\\n\\n@tox.hookimpl\\ndef tox_testenv_install_deps(venv, action):\\n    deps = venv.get_resolved_dependencies()\\n    if deps:\\n        depinfo = \", \".join(map(str, deps))\\n        action.setactivity(\"installdeps\", depinfo)\\n        venv._install(deps, action=action)\\n    return True  # Return non-None to indicate plugin has completed\\n\\n\\n@tox.hookimpl\\ndef tox_runtest(venv, redirect):\\n    venv.test(redirect=redirect)\\n    return True  # Return non-None to indicate plugin has completed\\n\\n\\n@tox.hookimpl\\ndef tox_runtest_pre(venv):\\n    venv.status = 0\\n    ensure_empty_dir(venv.envconfig.envtmpdir)\\n    venv.envconfig.envtmpdir.ensure(dir=1)\\n    venv.test(\\n        name=\"run-test-pre\",\\n        commands=venv.envconfig.commands_pre,\\n        redirect=False,\\n        ignore_outcome=False,\\n        ignore_errors=False,\\n        display_hash_seed=True,\\n    )\\n\\n\\n@tox.hookimpl\\ndef tox_runtest_post(venv):\\n    venv.test(\\n        name=\"run-test-post\",\\n        commands=venv.envconfig.commands_post,\\n        redirect=False,\\n        ignore_outcome=False,\\n        ignore_errors=False,\\n    )\\n\\n\\n@tox.hookimpl\\ndef tox_runenvreport(venv, action):\\n    # write out version dependency information\\n    args = venv.envconfig.list_dependencies_command\\n    output = venv._pcall(args, cwd=venv.envconfig.config.toxinidir, action=action, returnout=True)\\n    # the output contains a mime-header, skip it\\n    output = output.split(\"\\\\n\\\\n\")[-1]\\n    packages = output.strip().split(\"\\\\n\")\\n    return packages  # Return non-None to indicate plugin has completed\\n'"}, "return_value": "'import codecs\\nimport json\\nimport os\\nimport pipes\\nimport re\\nimport sys\\nfrom itertools import chain\\n\\nimport py\\n\\nimport tox\\nfrom tox import reporter\\nfrom tox.action import Action\\nfrom tox.config.parallel import ENV_VAR_KEY_PRIVATE as PARALLEL_ENV_VAR_KEY_PRIVATE\\nfrom tox.constants import INFO, PARALLEL_RESULT_JSON_PREFIX, PARALLEL_RESULT_JSON_SUFFIX\\nfrom tox.package.local import resolve_package\\nfrom tox.util.lock import get_unique_file\\nfrom tox.util.path import ensure_empty_dir\\n\\nfrom .config import DepConfig\\n\\n#: maximum parsed shebang interpreter length (see: prepend_shebang_interpreter)\\nMAXINTERP = 2048\\n\\n\\nclass CreationConfig:\\n    def __init__(\\n        self,\\n        base_resolved_python_sha256,\\n        base_resolved_python_path,\\n        tox_version,\\n        sitepackages,\\n        usedevelop,\\n        deps,\\n        alwayscopy,\\n    ):\\n        self.base_resolved_python_sha256 = base_resolved_python_sha256\\n        self.base_resolved_python_path = base_resolved_python_path\\n        self.tox_version = tox_version\\n        self.sitepackages = sitepackages\\n        self.usedevelop = usedevelop\\n        self.alwayscopy = alwayscopy\\n        self.deps = deps\\n\\n    def writeconfig(self, path):\\n        lines = [\\n            \"{} {}\".format(self.base_resolved_python_sha256, self.base_resolved_python_path),\\n            \"{} {:d} {:d} {:d}\".format(\\n                self.tox_version,\\n                self.sitepackages,\\n                self.usedevelop,\\n                self.alwayscopy,\\n            ),\\n        ]\\n        for dep in self.deps:\\n            lines.append(\"{} {}\".format(*dep))\\n        content = \"\\\\n\".join(lines)\\n        path.ensure()\\n        path.write(content)\\n        return content\\n\\n    @classmethod\\n    def readconfig(cls, path):\\n        try:\\n            lines = path.readlines(cr=0)\\n            base_resolved_python_info = lines.pop(0).split(None, 1)\\n            tox_version, sitepackages, usedevelop, alwayscopy = lines.pop(0).split(None, 4)\\n            sitepackages = bool(int(sitepackages))\\n            usedevelop = bool(int(usedevelop))\\n            alwayscopy = bool(int(alwayscopy))\\n            deps = []\\n            for line in lines:\\n                base_resolved_python_sha256, depstring = line.split(None, 1)\\n                deps.append((base_resolved_python_sha256, depstring))\\n            base_resolved_python_sha256, base_resolved_python_path = base_resolved_python_info\\n            return CreationConfig(\\n                base_resolved_python_sha256,\\n                base_resolved_python_path,\\n                tox_version,\\n                sitepackages,\\n                usedevelop,\\n                deps,\\n                alwayscopy,\\n            )\\n        except Exception:\\n            return None\\n\\n    def matches_with_reason(self, other, deps_matches_subset=False):\\n        for attr in (\\n            \"base_resolved_python_sha256\",\\n            \"base_resolved_python_path\",\\n            \"tox_version\",\\n            \"sitepackages\",\\n            \"usedevelop\",\\n            \"alwayscopy\",\\n        ):\\n            left = getattr(self, attr)\\n            right = getattr(other, attr)\\n            if left != right:\\n                return False, \"attr {} {!r}!={!r}\".format(attr, left, right)\\n        self_deps = set(self.deps)\\n        other_deps = set(other.deps)\\n        if self_deps != other_deps:\\n            if deps_matches_subset:\\n                diff = other_deps - self_deps\\n                if diff:\\n                    return False, \"missing in previous {!r}\".format(diff)\\n            else:\\n                return False, \"{!r}!={!r}\".format(self_deps, other_deps)\\n        return True, None\\n\\n    def matches(self, other, deps_matches_subset=False):\\n        outcome, _ = self.matches_with_reason(other, deps_matches_subset)\\n        return outcome\\n\\n\\nclass VirtualEnv(object):\\n    def __init__(self, envconfig=None, popen=None, env_log=None):\\n        self.envconfig = envconfig\\n        self.popen = popen\\n        self._actions = []\\n        self.env_log = env_log\\n        self._result_json_path = None\\n\\n    def new_action(self, msg, *args):\\n        config = self.envconfig.config\\n        command_log = self.env_log.get_commandlog(\\n            \"test\" if msg in (\"run-test\", \"run-test-pre\", \"run-test-post\") else \"setup\",\\n        )\\n        return Action(\\n            self.name,\\n            msg,\\n            args,\\n            self.envconfig.envlogdir,\\n            config.option.resultjson,\\n            command_log,\\n            self.popen,\\n            self.envconfig.envpython,\\n            self.envconfig.suicide_timeout,\\n            self.envconfig.interrupt_timeout,\\n            self.envconfig.terminate_timeout,\\n        )\\n\\n    def get_result_json_path(self):\\n        if self._result_json_path is None:\\n            if self.envconfig.config.option.resultjson:\\n                self._result_json_path = get_unique_file(\\n                    self.path,\\n                    PARALLEL_RESULT_JSON_PREFIX,\\n                    PARALLEL_RESULT_JSON_SUFFIX,\\n                )\\n        return self._result_json_path\\n\\n    @property\\n    def hook(self):\\n        return self.envconfig.config.pluginmanager.hook\\n\\n    @property\\n    def path(self):\\n        \"\"\"Path to environment base dir.\"\"\"\\n        return self.envconfig.envdir\\n\\n    @property\\n    def path_config(self):\\n        return self.path.join(\".tox-config1\")\\n\\n    @property\\n    def name(self):\\n        \"\"\"test environment name.\"\"\"\\n        return self.envconfig.envname\\n\\n    def __repr__(self):\\n        return \"<VirtualEnv at {!r}>\".format(self.path)\\n\\n    def getcommandpath(self, name, venv=True, cwd=None):\\n        \"\"\"Return absolute path (str or localpath) for specified command name.\\n\\n        - If it\\'s a local path we will rewrite it as as a relative path.\\n        - If venv is True we will check if the command is coming from the venv\\n          or is allowed to come from external.\\n        \"\"\"\\n        name = str(name)\\n        if os.path.isabs(name):\\n            return name\\n        if os.path.split(name)[0] == \".\":\\n            path = cwd.join(name)\\n            if path.check():\\n                return str(path)\\n\\n        if venv:\\n            path = self._venv_lookup_and_check_external_allowlist(name)\\n        else:\\n            path = self._normal_lookup(name)\\n\\n        if path is None:\\n            raise tox.exception.InvocationError(\\n                \"could not find executable {}\".format(pipes.quote(name)),\\n            )\\n\\n        return str(path)  # will not be rewritten for reporting\\n\\n    def _venv_lookup_and_check_external_allowlist(self, name):\\n        path = self._venv_lookup(name)\\n        if path is None:\\n            path = self._normal_lookup(name)\\n            if path is not None:\\n                self._check_external_allowed_and_warn(path)\\n        return path\\n\\n    def _venv_lookup(self, name):\\n        return py.path.local.sysfind(name, paths=[self.envconfig.envbindir])\\n\\n    def _normal_lookup(self, name):\\n        return py.path.local.sysfind(name)\\n\\n    def _check_external_allowed_and_warn(self, path):\\n        if not self.is_allowed_external(path):\\n            reporter.warning(\\n                \"test command found but not installed in testenv\\\\n\"\\n                \"  cmd: {}\\\\n\"\\n                \"  env: {}\\\\n\"\\n                \"Maybe you forgot to specify a dependency? \"\\n                \"See also the allowlist_externals envconfig setting.\\\\n\\\\n\"\\n                \"DEPRECATION WARNING: this will be an error in tox 4 and above!\".format(\\n                    path,\\n                    self.envconfig.envdir,\\n                ),\\n            )\\n\\n    def is_allowed_external(self, p):\\n        tryadd = [\"\"]\\n        if tox.INFO.IS_WIN:\\n            tryadd += [os.path.normcase(x) for x in os.environ[\"PATHEXT\"].split(os.pathsep)]\\n            p = py.path.local(os.path.normcase(str(p)))\\n\\n        if self.envconfig.allowlist_externals and self.envconfig.whitelist_externals:\\n            raise tox.exception.ConfigError(\\n                \"Either whitelist_externals or allowlist_externals might be specified, not both\",\\n            )\\n\\n        allowed_externals = (\\n            self.envconfig.whitelist_externals or self.envconfig.allowlist_externals\\n        )\\n        for x in allowed_externals:\\n            for add in tryadd:\\n                if p.fnmatch(x + add):\\n                    return True\\n        return False\\n\\n    def update(self, action):\\n        \"\"\"return status string for updating actual venv to match configuration.\\n        if status string is empty, all is ok.\\n        \"\"\"\\n        rconfig = CreationConfig.readconfig(self.path_config)\\n        if self.envconfig.recreate:\\n            reason = \"-r flag\"\\n        else:\\n            if rconfig is None:\\n                reason = \"no previous config {}\".format(self.path_config)\\n            else:\\n                live_config = self._getliveconfig()\\n                deps_subset_match = getattr(self.envconfig, \"deps_matches_subset\", False)\\n                outcome, reason = rconfig.matches_with_reason(live_config, deps_subset_match)\\n        if reason is None:\\n            action.info(\"reusing\", self.envconfig.envdir)\\n            return\\n        action.info(\"cannot reuse\", reason)\\n        if rconfig is None:\\n            action.setactivity(\"create\", self.envconfig.envdir)\\n        else:\\n            action.setactivity(\"recreate\", self.envconfig.envdir)\\n        try:\\n            self.hook.tox_testenv_create(action=action, venv=self)\\n            self.just_created = True\\n        except tox.exception.UnsupportedInterpreter as exception:\\n            return exception\\n        try:\\n            self.hook.tox_testenv_install_deps(action=action, venv=self)\\n        except tox.exception.InvocationError as exception:\\n            return \"could not install deps {}; v = {!r}\".format(self.envconfig.deps, exception)\\n\\n    def _getliveconfig(self):\\n        base_resolved_python_path = self.envconfig.python_info.executable\\n        version = tox.__version__\\n        sitepackages = self.envconfig.sitepackages\\n        develop = self.envconfig.usedevelop\\n        alwayscopy = self.envconfig.alwayscopy\\n        deps = []\\n        for dep in self.get_resolved_dependencies():\\n            dep_name_sha256 = getdigest(dep.name)\\n            deps.append((dep_name_sha256, dep.name))\\n        base_resolved_python_sha256 = getdigest(base_resolved_python_path)\\n        return CreationConfig(\\n            base_resolved_python_sha256,\\n            base_resolved_python_path,\\n            version,\\n            sitepackages,\\n            develop,\\n            deps,\\n            alwayscopy,\\n        )\\n\\n    def get_resolved_dependencies(self):\\n        dependencies = []\\n        for dependency in self.envconfig.deps:\\n            if dependency.indexserver is None:\\n                package = resolve_package(package_spec=dependency.name)\\n                if package != dependency.name:\\n                    dependency = dependency.__class__(package)\\n            dependencies.append(dependency)\\n        return dependencies\\n\\n    def getsupportedinterpreter(self):\\n        return self.envconfig.getsupportedinterpreter()\\n\\n    def matching_platform(self):\\n        return re.match(self.envconfig.platform, sys.platform)\\n\\n    def finish(self):\\n        previous_config = CreationConfig.readconfig(self.path_config)\\n        live_config = self._getliveconfig()\\n        if previous_config is None or not previous_config.matches(live_config):\\n            content = live_config.writeconfig(self.path_config)\\n            reporter.verbosity1(\"write config to {} as {!r}\".format(self.path_config, content))\\n\\n    def _needs_reinstall(self, setupdir, action):\\n        setup_py = setupdir.join(\"setup.py\")\\n\\n        if not setup_py.exists():\\n            return False\\n\\n        setup_cfg = setupdir.join(\"setup.cfg\")\\n        args = [self.envconfig.envpython, str(setup_py), \"--name\"]\\n        env = self._get_os_environ()\\n        output = action.popen(\\n            args,\\n            cwd=setupdir,\\n            redirect=False,\\n            returnout=True,\\n            env=env,\\n            capture_err=False,\\n        )\\n        name = next(\\n            (i for i in output.split(\"\\\\n\") if i and not i.startswith(\"pydev debugger:\")),\\n            \"\",\\n        )\\n        args = [\\n            self.envconfig.envpython,\\n            \"-c\",\\n            \"import sys;  import json; print(json.dumps(sys.path))\",\\n        ]\\n        out = action.popen(args, redirect=False, returnout=True, env=env)\\n        try:\\n            sys_path = json.loads(out)\\n        except ValueError:\\n            sys_path = []\\n        egg_info_fname = \".\".join((name.replace(\"-\", \"_\"), \"egg-info\"))\\n        for d in reversed(sys_path):\\n            egg_info = py.path.local(d).join(egg_info_fname)\\n            if egg_info.check():\\n                break\\n        else:\\n            return True\\n        needs_reinstall = any(\\n            conf_file.check() and conf_file.mtime() > egg_info.mtime()\\n            for conf_file in (setup_py, setup_cfg)\\n        )\\n\\n        # Ensure the modification time of the egg-info folder is updated so we\\n        # won\\'t need to do this again.\\n        # TODO(stephenfin): Remove once the minimum version of setuptools is\\n        # high enough to include https://github.com/pypa/setuptools/pull/1427/\\n        if needs_reinstall:\\n            egg_info.setmtime()\\n\\n        return needs_reinstall\\n\\n    def install_pkg(self, dir, action, name, is_develop=False):\\n        assert action is not None\\n\\n        if getattr(self, \"just_created\", False):\\n            action.setactivity(name, dir)\\n            self.finish()\\n            pip_flags = [\"--exists-action\", \"w\"]\\n        else:\\n            if is_develop and not self._needs_reinstall(dir, action):\\n                action.setactivity(\"{}-noop\".format(name), dir)\\n                return\\n            action.setactivity(\"{}-nodeps\".format(name), dir)\\n            pip_flags = [\"--no-deps\"] + ([] if is_develop else [\"-U\"])\\n        pip_flags.extend([\"-v\"] * min(3, reporter.verbosity() - 2))\\n        if self.envconfig.extras:\\n            dir += \"[{}]\".format(\",\".join(self.envconfig.extras))\\n        target = [dir]\\n        if is_develop:\\n            target.insert(0, \"-e\")\\n        self._install(target, extraopts=pip_flags, action=action)\\n\\n    def developpkg(self, setupdir, action):\\n        self.install_pkg(setupdir, action, \"develop-inst\", is_develop=True)\\n\\n    def installpkg(self, sdistpath, action):\\n        self.install_pkg(sdistpath, action, \"inst\")\\n\\n    def _installopts(self, indexserver):\\n        options = []\\n        if indexserver:\\n            options += [\"-i\", indexserver]\\n        if self.envconfig.pip_pre:\\n            options.append(\"--pre\")\\n        return options\\n\\n    def run_install_command(self, packages, action, options=()):\\n        def expand(val):\\n            # expand an install command\\n            if val == \"{packages}\":\\n                for package in packages:\\n                    yield package\\n            elif val == \"{opts}\":\\n                for opt in options:\\n                    yield opt\\n            else:\\n                yield val\\n\\n        cmd = list(chain.from_iterable(expand(val) for val in self.envconfig.install_command))\\n\\n        env = self._get_os_environ()\\n        self.ensure_pip_os_environ_ok(env)\\n\\n        old_stdout = sys.stdout\\n        sys.stdout = codecs.getwriter(\"utf8\")(sys.stdout)\\n        try:\\n            self._pcall(\\n                cmd,\\n                cwd=self.envconfig.config.toxinidir,\\n                action=action,\\n                redirect=reporter.verbosity() < reporter.Verbosity.DEBUG,\\n                env=env,\\n            )\\n        except KeyboardInterrupt:\\n            self.status = \"keyboardinterrupt\"\\n            raise\\n        finally:\\n            sys.stdout = old_stdout\\n\\n    def ensure_pip_os_environ_ok(self, env):\\n        for key in (\"PIP_RESPECT_VIRTUALENV\", \"PIP_REQUIRE_VIRTUALENV\", \"__PYVENV_LAUNCHER__\"):\\n            env.pop(key, None)\\n        if all(\"PYTHONPATH\" not in i for i in (self.envconfig.passenv, self.envconfig.setenv)):\\n            # If PYTHONPATH not explicitly asked for, remove it.\\n            if \"PYTHONPATH\" in env:\\n                if sys.version_info < (3, 4) or bool(env[\"PYTHONPATH\"]):\\n                    # https://docs.python.org/3/whatsnew/3.4.html#changes-in-python-command-behavior\\n                    # In a posix shell, setting the PATH environment variable to an empty value is\\n                    # equivalent to not setting it at all.\\n                    reporter.warning(\\n                        \"Discarding $PYTHONPATH from environment, to override \"\\n                        \"specify PYTHONPATH in \\'passenv\\' in your configuration.\",\\n                    )\\n                env.pop(\"PYTHONPATH\")\\n\\n        # installing packages at user level may mean we\\'re not installing inside the venv\\n        env[\"PIP_USER\"] = \"0\"\\n\\n        # installing without dependencies may lead to broken packages\\n        env[\"PIP_NO_DEPS\"] = \"0\"\\n\\n    def _install(self, deps, extraopts=None, action=None):\\n        if not deps:\\n            return\\n        d = {}\\n        ixservers = []\\n        for dep in deps:\\n            if isinstance(dep, (str, py.path.local)):\\n                dep = DepConfig(str(dep), None)\\n            assert isinstance(dep, DepConfig), dep\\n            if dep.indexserver is None:\\n                ixserver = self.envconfig.config.indexserver[\"default\"]\\n            else:\\n                ixserver = dep.indexserver\\n            d.setdefault(ixserver, []).append(dep.name)\\n            if ixserver not in ixservers:\\n                ixservers.append(ixserver)\\n            assert ixserver.url is None or isinstance(ixserver.url, str)\\n\\n        for ixserver in ixservers:\\n            packages = d[ixserver]\\n            options = self._installopts(ixserver.url)\\n            if extraopts:\\n                options.extend(extraopts)\\n            self.run_install_command(packages=packages, options=options, action=action)\\n\\n    def _get_os_environ(self, is_test_command=False):\\n        if is_test_command:\\n            # for executing tests we construct a clean environment\\n            env = {}\\n            for env_key in self.envconfig.passenv:\\n                if env_key in os.environ:\\n                    env[env_key] = os.environ[env_key]\\n        else:\\n            # for executing non-test commands we use the full\\n            # invocation environment\\n            env = os.environ.copy()\\n\\n        # in any case we honor per-testenv setenv configuration\\n        env.update(self.envconfig.setenv.export())\\n\\n        env[\"VIRTUAL_ENV\"] = str(self.path)\\n        return env\\n\\n    def test(\\n        self,\\n        redirect=False,\\n        name=\"run-test\",\\n        commands=None,\\n        ignore_outcome=None,\\n        ignore_errors=None,\\n        display_hash_seed=False,\\n    ):\\n        if commands is None:\\n            commands = self.envconfig.commands\\n        if ignore_outcome is None:\\n            ignore_outcome = self.envconfig.ignore_outcome\\n        if ignore_errors is None:\\n            ignore_errors = self.envconfig.ignore_errors\\n        with self.new_action(name) as action:\\n            cwd = self.envconfig.changedir\\n            if display_hash_seed:\\n                env = self._get_os_environ(is_test_command=True)\\n                # Display PYTHONHASHSEED to assist with reproducibility.\\n                action.setactivity(name, \"PYTHONHASHSEED={!r}\".format(env.get(\"PYTHONHASHSEED\")))\\n            for i, argv in enumerate(filter(bool, commands)):\\n                # have to make strings as _pcall changes argv[0] to a local()\\n                # happens if the same environment is invoked twice\\n                message = \"commands[{}] | {}\".format(\\n                    i,\\n                    \" \".join(pipes.quote(str(x)) for x in argv),\\n                )\\n                action.setactivity(name, message)\\n                # check to see if we need to ignore the return code\\n                # if so, we need to alter the command line arguments\\n                if argv[0].startswith(\"-\"):\\n                    ignore_ret = True\\n                    if argv[0] == \"-\":\\n                        del argv[0]\\n                    else:\\n                        argv[0] = argv[0].lstrip(\"-\")\\n                else:\\n                    ignore_ret = False\\n\\n                try:\\n                    self._pcall(\\n                        argv,\\n                        cwd=cwd,\\n                        action=action,\\n                        redirect=redirect,\\n                        ignore_ret=ignore_ret,\\n                        is_test_command=True,\\n                    )\\n                except tox.exception.InvocationError as err:\\n                    if ignore_outcome:\\n                        msg = \"command failed but result from testenv is ignored\\\\ncmd:\"\\n                        reporter.warning(\"{} {}\".format(msg, err))\\n                        self.status = \"ignored failed command\"\\n                        continue  # keep processing commands\\n\\n                    reporter.error(str(err))\\n                    self.status = \"commands failed\"\\n                    if not ignore_errors:\\n                        break  # Don\\'t process remaining commands\\n                except KeyboardInterrupt:\\n                    self.status = \"keyboardinterrupt\"\\n                    raise\\n\\n    def _pcall(\\n        self,\\n        args,\\n        cwd,\\n        venv=True,\\n        is_test_command=False,\\n        action=None,\\n        redirect=True,\\n        ignore_ret=False,\\n        returnout=False,\\n        env=None,\\n    ):\\n        if env is None:\\n            env = self._get_os_environ(is_test_command=is_test_command)\\n\\n        # construct environment variables\\n        env.pop(\"VIRTUALENV_PYTHON\", None)\\n        bin_dir = str(self.envconfig.envbindir)\\n        path = self.envconfig.setenv.get(\"PATH\") or os.environ[\"PATH\"]\\n        env[\"PATH\"] = os.pathsep.join([bin_dir, path])\\n        reporter.verbosity2(\"setting PATH={}\".format(env[\"PATH\"]))\\n\\n        # get command\\n        args[0] = self.getcommandpath(args[0], venv, cwd)\\n        if sys.platform != \"win32\" and \"TOX_LIMITED_SHEBANG\" in os.environ:\\n            args = prepend_shebang_interpreter(args)\\n\\n        cwd.ensure(dir=1)  # ensure the cwd exists\\n        return action.popen(\\n            args,\\n            cwd=cwd,\\n            env=env,\\n            redirect=redirect,\\n            ignore_ret=ignore_ret,\\n            returnout=returnout,\\n            report_fail=not is_test_command,\\n        )\\n\\n    def setupenv(self):\\n        if self.envconfig._missing_subs:\\n            self.status = (\\n                \"unresolvable substitution(s):\\\\n    {}\\\\n\"\\n                \"Environment variables are missing or defined recursively.\".format(\\n                    \"\\\\n    \".join(\\n                        \"{}: \\'{}\\'\".format(section_key, exc.name)\\n                        for section_key, exc in sorted(self.envconfig._missing_subs.items())\\n                    ),\\n                )\\n            )\\n            return\\n        if not self.matching_platform():\\n            self.status = \"platform mismatch\"\\n            return  # we simply omit non-matching platforms\\n        with self.new_action(\"getenv\", self.envconfig.envdir) as action:\\n            self.status = 0\\n            default_ret_code = 1\\n            envlog = self.env_log\\n            try:\\n                status = self.update(action=action)\\n            except IOError as e:\\n                if e.args[0] != 2:\\n                    raise\\n                status = (\\n                    \"Error creating virtualenv. Note that spaces in paths are \"\\n                    \"not supported by virtualenv. Error details: {!r}\".format(e)\\n                )\\n            except tox.exception.InvocationError as e:\\n                status = e\\n            except tox.exception.InterpreterNotFound as e:\\n                status = e\\n                if self.envconfig.config.option.skip_missing_interpreters == \"true\":\\n                    default_ret_code = 0\\n            except KeyboardInterrupt:\\n                self.status = \"keyboardinterrupt\"\\n                raise\\n            if status:\\n                str_status = str(status)\\n                command_log = envlog.get_commandlog(\"setup\")\\n                command_log.add_command([\"setup virtualenv\"], str_status, default_ret_code)\\n                self.status = status\\n                if default_ret_code == 0:\\n                    reporter.skip(str_status)\\n                else:\\n                    reporter.error(str_status)\\n                return False\\n            command_path = self.getcommandpath(\"python\")\\n            envlog.set_python_info(command_path)\\n            return True\\n\\n    def finishvenv(self):\\n        with self.new_action(\"finishvenv\"):\\n            self.finish()\\n            return True\\n\\n\\ndef getdigest(path):\\n    path = py.path.local(path)\\n    if not path.check(file=1):\\n        return \"0\" * 32\\n    return path.computehash(\"sha256\")\\n\\n\\ndef prepend_shebang_interpreter(args):\\n    # prepend interpreter directive (if any) to argument list\\n    #\\n    # When preparing virtual environments in a file container which has large\\n    # length, the system might not be able to invoke shebang scripts which\\n    # define interpreters beyond system limits (e.g. Linux has a limit of 128;\\n    # BINPRM_BUF_SIZE). This method can be used to check if the executable is\\n    # a script containing a shebang line. If so, extract the interpreter (and\\n    # possible optional argument) and prepend the values to the provided\\n    # argument list. tox will only attempt to read an interpreter directive of\\n    # a maximum size of 2048 bytes to limit excessive reading and support UNIX\\n    # systems which may support a longer interpret length.\\n    try:\\n        with open(args[0], \"rb\") as f:\\n            if f.read(1) == b\"#\" and f.read(1) == b\"!\":\\n                interp = f.readline(MAXINTERP + 1).rstrip().decode(\"UTF-8\")\\n                if len(interp) > MAXINTERP:  # avoid a truncated interpreter\\n                    return args\\n                interp_args = interp.split(None, 1)[:2]\\n                return interp_args + args\\n    except (UnicodeDecodeError, IOError):\\n        pass\\n    return args\\n\\n\\n_SKIP_VENV_CREATION = os.environ.get(\"_TOX_SKIP_ENV_CREATION_TEST\", False) == \"1\"\\n\\n\\n@tox.hookimpl\\ndef tox_testenv_create(venv, action):\\n    config_interpreter = venv.getsupportedinterpreter()\\n    args = [sys.executable, \"-m\", \"virtualenv\"]\\n    if venv.envconfig.sitepackages:\\n        args.append(\"--system-site-packages\")\\n    if venv.envconfig.alwayscopy:\\n        args.append(\"--always-copy\")\\n    if not venv.envconfig.download:\\n        args.append(\"--no-download\")\\n    else:\\n        args.append(\"--download\")\\n    # add interpreter explicitly, to prevent using default (virtualenv.ini)\\n    args.extend([\"--python\", str(config_interpreter)])\\n\\n    cleanup_for_venv(venv)\\n\\n    base_path = venv.path.dirpath()\\n    base_path.ensure(dir=1)\\n    args.append(venv.path.basename)\\n    if not _SKIP_VENV_CREATION:\\n        try:\\n            venv._pcall(\\n                args,\\n                venv=False,\\n                action=action,\\n                cwd=base_path,\\n                redirect=reporter.verbosity() < reporter.Verbosity.DEBUG,\\n            )\\n        except KeyboardInterrupt:\\n            venv.status = \"keyboardinterrupt\"\\n            raise\\n    return True  # Return non-None to indicate plugin has completed\\n\\n\\ndef cleanup_for_venv(venv):\\n    within_parallel = PARALLEL_ENV_VAR_KEY_PRIVATE in os.environ\\n    # if the directory exists and it doesn\\'t look like a virtualenv, produce\\n    # an error\\n    if venv.path.exists():\\n        dir_items = set(os.listdir(str(venv.path))) - {\".lock\", \"log\"}\\n        dir_items = {p for p in dir_items if not p.startswith(\".tox-\") or p == \".tox-config1\"}\\n    else:\\n        dir_items = set()\\n\\n    if not (\\n        # doesn\\'t exist => OK\\n        not venv.path.exists()\\n        # does exist, but it\\'s empty => OK\\n        or not dir_items\\n        # tox has marked this as an environment it has created in the past\\n        or \".tox-config1\" in dir_items\\n        # it exists and we\\'re on windows with Lib and Scripts => OK\\n        or (INFO.IS_WIN and dir_items > {\"Scripts\", \"Lib\"})\\n        # non-windows, with lib and bin => OK\\n        or dir_items > {\"bin\", \"lib\"}\\n        # pypy has a different lib folder => OK\\n        or dir_items > {\"bin\", \"lib_pypy\"}\\n    ):\\n        venv.status = \"error\"\\n        reporter.error(\\n            \"cowardly refusing to delete `envdir` (it does not look like a virtualenv): \"\\n            \"{}\".format(venv.path),\\n        )\\n        raise SystemExit(2)\\n\\n    if within_parallel:\\n        if venv.path.exists():\\n            # do not delete the log folder as that\\'s used by parent\\n            for content in venv.path.listdir():\\n                if not content.basename == \"log\":\\n                    content.remove(rec=1, ignore_errors=True)\\n    else:\\n        ensure_empty_dir(venv.path)\\n\\n\\n@tox.hookimpl\\ndef tox_testenv_install_deps(venv, action):\\n    deps = venv.get_resolved_dependencies()\\n    if deps:\\n        depinfo = \", \".join(map(str, deps))\\n        action.setactivity(\"installdeps\", depinfo)\\n        venv._install(deps, action=action)\\n    return True  # Return non-None to indicate plugin has completed\\n\\n\\n@tox.hookimpl\\ndef tox_runtest(venv, redirect):\\n    venv.test(redirect=redirect)\\n    return True  # Return non-None to indicate plugin has completed\\n\\n\\n@tox.hookimpl\\ndef tox_runtest_pre(venv):\\n    venv.status = 0\\n    ensure_empty_dir(venv.envconfig.envtmpdir)\\n    venv.envconfig.envtmpdir.ensure(dir=1)\\n    venv.test(\\n        name=\"run-test-pre\",\\n        commands=venv.envconfig.commands_pre,\\n        redirect=False,\\n        ignore_outcome=False,\\n        ignore_errors=False,\\n        display_hash_seed=True,\\n    )\\n\\n\\n@tox.hookimpl\\ndef tox_runtest_post(venv):\\n    venv.test(\\n        name=\"run-test-post\",\\n        commands=venv.envconfig.commands_post,\\n        redirect=False,\\n        ignore_outcome=False,\\n        ignore_errors=False,\\n    )\\n\\n\\n@tox.hookimpl\\ndef tox_runenvreport(venv, action):\\n    # write out version dependency information\\n    args = venv.envconfig.list_dependencies_command\\n    output = venv._pcall(args, cwd=venv.envconfig.config.toxinidir, action=action, returnout=True)\\n    # the output contains a mime-header, skip it\\n    output = output.split(\"\\\\n\\\\n\")[-1]\\n    packages = output.strip().split(\"\\\\n\")\\n    return packages  # Return non-None to indicate plugin has completed\\n'"}, {"func_args": {"source": "\"# coding: utf-8\\nfrom __future__ import unicode_literals\\n\\n__version__ = '3.24.6.dev3+g86a0383c.d20220119'\\n\""}, "return_value": "\"# (deleted declaration)\\nfrom __future__ import unicode_literals\\n\\n__version__ = '3.24.6.dev3+g86a0383c.d20220119'\\n\""}, {"func_args": {"source": "\"# coding: utf-8\\nfrom __future__ import unicode_literals\\n\\n__version__ = '3.24.6.dev3+g86a0383c.d20220119'\\n\""}, "return_value": "\"# (deleted declaration)\\nfrom __future__ import unicode_literals\\n\\n__version__ = '3.24.6.dev3+g86a0383c.d20220119'\\n\""}]}, "source_encoding": {"line": 184, "args": [{"func_args": {"source": "b'import os\\nimport pipes\\nimport signal\\n\\n\\ndef exit_code_str(exception_name, command, exit_code):\\n    \"\"\"String representation for an InvocationError, with exit code\\n\\n    NOTE: this might also be used by plugin tests (tox-venv at the time of writing),\\n    so some coordination is needed if this is ever moved or a different solution for this hack\\n    is found.\\n\\n    NOTE: this is a separate function because pytest-mock `spy` does not work on Exceptions\\n    We can use neither a class method nor a static because of https://bugs.python.org/issue23078.\\n    Even a normal method failed with \"TypeError: descriptor \\'__getattribute__\\' requires a\\n    \\'BaseException\\' object but received a \\'type\\'\".\\n    \"\"\"\\n    str_ = \"{} for command {}\".format(exception_name, command)\\n    if exit_code is not None:\\n        if exit_code < 0 or (os.name == \"posix\" and exit_code > 128):\\n            signals = {\\n                number: name for name, number in vars(signal).items() if name.startswith(\"SIG\")\\n            }\\n            if exit_code < 0:\\n                # Signal reported via subprocess.Popen.\\n                sig_name = signals.get(-exit_code)\\n                str_ += \" (exited with code {:d} ({}))\".format(exit_code, sig_name)\\n            else:\\n                str_ += \" (exited with code {:d})\".format(exit_code)\\n                number = exit_code - 128\\n                name = signals.get(number)\\n                if name:\\n                    str_ += (\\n                        \")\\\\nNote: this might indicate a fatal error signal \"\\n                        \"({:d} - 128 = {:d}: {})\".format(exit_code, number, name)\\n                    )\\n        str_ += \" (exited with code {:d})\".format(exit_code)\\n    return str_\\n\\n\\nclass Error(Exception):\\n    def __str__(self):\\n        return \"{}: {}\".format(self.__class__.__name__, self.args[0])\\n\\n\\nclass MissingSubstitution(Error):\\n    FLAG = \"TOX_MISSING_SUBSTITUTION\"\\n    \"\"\"placeholder for debugging configurations\"\"\"\\n\\n    def __init__(self, name):\\n        self.name = name\\n        super(Error, self).__init__(name)\\n\\n\\nclass ConfigError(Error):\\n    \"\"\"Error in tox configuration.\"\"\"\\n\\n\\nclass SubstitutionStackError(ConfigError, ValueError):\\n    \"\"\"Error in tox configuration recursive substitution.\"\"\"\\n\\n\\nclass UnsupportedInterpreter(Error):\\n    \"\"\"Signals an unsupported Interpreter.\"\"\"\\n\\n\\nclass InterpreterNotFound(Error):\\n    \"\"\"Signals that an interpreter could not be found.\"\"\"\\n\\n\\nclass InvocationError(Error):\\n    \"\"\"An error while invoking a script.\"\"\"\\n\\n    def __init__(self, command, exit_code=None, out=None):\\n        super(Error, self).__init__(command, exit_code)\\n        self.command = command\\n        self.exit_code = exit_code\\n        self.out = out\\n\\n    def __str__(self):\\n        return exit_code_str(self.__class__.__name__, self.command, self.exit_code)\\n\\n\\nclass MissingDirectory(Error):\\n    \"\"\"A directory did not exist.\"\"\"\\n\\n\\nclass MissingDependency(Error):\\n    \"\"\"A dependency could not be found or determined.\"\"\"\\n\\n\\nclass MissingRequirement(Error):\\n    \"\"\"A requirement defined in :config:`require` is not met.\"\"\"\\n\\n    def __init__(self, config):\\n        self.config = config\\n\\n    def __str__(self):\\n        return \" \".join(pipes.quote(i) for i in self.config.requires)\\n\\n\\nclass BadRequirement(Error):\\n    \"\"\"A requirement defined in :config:`require` cannot be parsed.\"\"\"\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b''"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'\"\"\"PEP 517 build backend invocation script.\\n\\nIt accepts externally parsed build configuration from `[build-system]`\\nin `pyproject.toml` and invokes an API endpoint for building an sdist\\ntarball.\\n\"\"\"\\n\\nimport os\\nimport sys\\n\\n\\ndef _ensure_module_in_paths(module, paths):\\n    \"\"\"Verify that the imported backend belongs in-tree.\"\"\"\\n    if not paths:\\n        return\\n\\n    module_path = os.path.normcase(os.path.abspath(module.__file__))\\n    normalized_paths = (os.path.normcase(os.path.abspath(path)) for path in paths)\\n\\n    if any(os.path.commonprefix((module_path, path)) == path for path in normalized_paths):\\n        return\\n\\n    raise SystemExit(\\n        \"build-backend ({!r}) must exist in one of the paths \"\\n        \"specified by backend-path ({!r})\".format(module, paths),\\n    )\\n\\n\\ndist_folder = sys.argv[1]\\nbackend_spec = sys.argv[2]\\nbackend_obj = sys.argv[3] if len(sys.argv) >= 4 else None\\nbackend_paths = sys.argv[4].split(os.path.pathsep) if (len(sys.argv) >= 5 and sys.argv[4]) else []\\n\\nsys.path[:0] = backend_paths\\n\\nbackend = __import__(backend_spec, fromlist=[\"_trash\"])\\n_ensure_module_in_paths(backend, backend_paths)\\nif backend_obj:\\n    backend = getattr(backend, backend_obj)\\n\\nbasename = backend.build_sdist(dist_folder, {\"--global-option\": [\"--formats=gztar\"]})\\nprint(basename)\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'import json\\nimport os\\nimport sys\\n\\nbackend_spec = sys.argv[1]\\nbackend_obj = sys.argv[2] if len(sys.argv) >= 3 else None\\nbackend_paths = sys.argv[3].split(os.path.pathsep) if len(sys.argv) >= 4 else []\\n\\nsys.path[:0] = backend_paths\\n\\nbackend = __import__(backend_spec, fromlist=[\"_trash\"])\\nif backend_obj:\\n    backend = getattr(backend, backend_obj)\\n\\ntry:\\n    for_build_requires = backend.get_requires_for_build_sdist(None)\\nexcept AttributeError:\\n    # PEP 517 states that get_requires_for_build_sdist is optional for a build\\n    # backend object. When the backend object omits it, the default\\n    # implementation must be equivalent to return []\\n    for_build_requires = []\\n\\noutput = json.dumps(for_build_requires)\\nprint(output)\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'from __future__ import unicode_literals\\n\\nimport json\\nimport sys\\nimport sysconfig\\nimport warnings\\n\\ndest_prefix = sys.argv[1]\\nwith warnings.catch_warnings():  # disable warning for PEP-632\\n    warnings.simplefilter(\"ignore\")\\n    try:\\n        import distutils.sysconfig\\n\\n        data = distutils.sysconfig.get_python_lib(prefix=dest_prefix)\\n    except ImportError:  # if removed or not installed ignore\\n        config_vars = {\\n            k: dest_prefix if any(v == p for p in (sys.prefix, sys.base_prefix)) else v\\n            for k, v in sysconfig.get_config_vars().items()\\n        }\\n        data = sysconfig.get_path(\"purelib\", vars=config_vars)\\n\\nprint(json.dumps({\"dir\": data}))\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'from __future__ import unicode_literals\\n\\nimport json\\nimport os\\nimport platform\\nimport sys\\n\\ninfo = {\\n    \"executable\": sys.executable,\\n    \"implementation\": platform.python_implementation(),\\n    \"version_info\": list(sys.version_info),\\n    \"version\": sys.version,\\n    \"is_64\": sys.maxsize > 2 ** 32,\\n    \"sysplatform\": sys.platform,\\n    \"os_sep\": os.sep,\\n    \"extra_version_info\": getattr(sys, \"pypy_version_info\", None),\\n}\\ninfo_as_dump = json.dumps(info)\\nprint(info_as_dump)\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'\"\"\"Hook specifications for tox - see https://pluggy.readthedocs.io/\"\"\"\\nimport pluggy\\n\\nhookspec = pluggy.HookspecMarker(\"tox\")\\n\\n\\n@hookspec\\ndef tox_addoption(parser):\\n    \"\"\"add command line options to the argparse-style parser object.\"\"\"\\n\\n\\n@hookspec\\ndef tox_configure(config):\\n    \"\"\"Called after command line options are parsed and ini-file has been read.\\n\\n    Please be aware that the config object layout may change between major tox versions.\\n    \"\"\"\\n\\n\\n@hookspec(firstresult=True)\\ndef tox_package(session, venv):\\n    \"\"\"Return the package to be installed for the given venv.\\n\\n    Called once for every environment.\"\"\"\\n\\n\\n@hookspec(firstresult=True)\\ndef tox_get_python_executable(envconfig):\\n    \"\"\"Return a python executable for the given python base name.\\n\\n    The first plugin/hook which returns an executable path will determine it.\\n\\n    ``envconfig`` is the testenv configuration which contains\\n    per-testenv configuration, notably the ``.envname`` and ``.basepython``\\n    setting.\\n    \"\"\"\\n\\n\\n@hookspec(firstresult=True)\\ndef tox_testenv_create(venv, action):\\n    \"\"\"Perform creation action for this venv.\\n\\n    Some example usage:\\n\\n    - To *add* behavior but still use tox\\'s implementation to set up a\\n      virtualenv, implement this hook but do not return a value (or explicitly\\n      return ``None``).\\n    - To *override* tox\\'s virtualenv creation, implement this hook and return\\n      a non-``None`` value.\\n\\n    .. note:: This api is experimental due to the unstable api of\\n        :class:`tox.venv.VirtualEnv`.\\n\\n    .. note:: This hook uses ``firstresult=True`` (see `pluggy first result only`_) -- hooks\\n        implementing this will be run until one returns non-``None``.\\n\\n    .. _`pluggy first result only`: https://pluggy.readthedocs.io/en/latest/#first-result-only\\n    \"\"\"\\n\\n\\n@hookspec(firstresult=True)\\ndef tox_testenv_install_deps(venv, action):\\n    \"\"\"Perform install dependencies action for this venv.\\n\\n    Some example usage:\\n\\n    - To *add* behavior but still use tox\\'s implementation to install\\n      dependencies, implement this hook but do not return a value (or\\n      explicitly return ``None``).  One use-case may be to install (or ensure)\\n      non-python dependencies such as debian packages.\\n    - To *override* tox\\'s installation of dependencies, implement this hook\\n      and return a non-``None`` value.  One use-case may be to install via\\n      a different installation tool such as `pip-accel`_ or `pip-faster`_.\\n\\n    .. note:: This api is experimental due to the unstable api of\\n        :class:`tox.venv.VirtualEnv`.\\n\\n    .. note:: This hook uses ``firstresult=True`` (see `pluggy first result only`_) -- hooks\\n        implementing this will be run until one returns non-``None``.\\n\\n    .. _pip-accel: https://github.com/paylogic/pip-accel\\n    .. _pip-faster: https://github.com/Yelp/venv-update\\n    \"\"\"\\n\\n\\n@hookspec\\ndef tox_runtest_pre(venv):\\n    \"\"\"Perform arbitrary action before running tests for this venv.\\n\\n    This could be used to indicate that tests for a given venv have started, for instance.\\n    \"\"\"\\n\\n\\n@hookspec(firstresult=True)\\ndef tox_runtest(venv, redirect):\\n    \"\"\"Run the tests for this venv.\\n\\n    .. note:: This hook uses ``firstresult=True`` (see `pluggy first result only`_) -- hooks\\n        implementing this will be run until one returns non-``None``.\\n    \"\"\"\\n\\n\\n@hookspec\\ndef tox_runtest_post(venv):\\n    \"\"\"Perform arbitrary action after running tests for this venv.\\n\\n    This could be used to have per-venv test reporting of pass/fail status.\\n    \"\"\"\\n\\n\\n@hookspec(firstresult=True)\\ndef tox_runenvreport(venv, action):\\n    \"\"\"Get the installed packages and versions in this venv.\\n\\n    This could be used for alternative (ie non-pip) package managers, this\\n    plugin should return a ``list`` of type ``str``\\n    \"\"\"\\n\\n\\n@hookspec\\ndef tox_cleanup(session):\\n    \"\"\"Called just before the session is destroyed, allowing any final cleanup operation\"\"\"\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'from __future__ import unicode_literals\\n\\nimport json\\nimport sys\\n\\nimport tox\\nfrom tox import reporter\\nfrom tox.constants import SITE_PACKAGE_QUERY_SCRIPT\\nfrom tox.interpreters.via_path import get_python_info\\n\\n\\nclass Interpreters:\\n    def __init__(self, hook):\\n        self.name2executable = {}\\n        self.executable2info = {}\\n        self.hook = hook\\n\\n    def get_executable(self, envconfig):\\n        \"\"\"return path object to the executable for the given\\n        name (e.g. python2.7, python3.6, python etc.)\\n        if name is already an existing path, return name.\\n        If an interpreter cannot be found, return None.\\n        \"\"\"\\n        try:\\n            return self.name2executable[envconfig.envname]\\n        except KeyError:\\n            exe = self.hook.tox_get_python_executable(envconfig=envconfig)\\n            reporter.verbosity2(\"{} uses {}\".format(envconfig.envname, exe))\\n            self.name2executable[envconfig.envname] = exe\\n            return exe\\n\\n    def get_info(self, envconfig):\\n        executable = self.get_executable(envconfig)\\n        name = envconfig.basepython\\n        if not executable:\\n            return NoInterpreterInfo(name=name)\\n        try:\\n            return self.executable2info[executable]\\n        except KeyError:\\n            info = run_and_get_interpreter_info(name, executable)\\n            self.executable2info[executable] = info\\n            return info\\n\\n    def get_sitepackagesdir(self, info, envdir):\\n        if not info.executable:\\n            return \"\"\\n        envdir = str(envdir)\\n        try:\\n            res = exec_on_interpreter(str(info.executable), SITE_PACKAGE_QUERY_SCRIPT, str(envdir))\\n        except ExecFailed as e:\\n            reporter.verbosity1(\"execution failed: {} -- {}\".format(e.out, e.err))\\n            return \"\"\\n        else:\\n            return res[\"dir\"]\\n\\n\\ndef run_and_get_interpreter_info(name, executable):\\n    assert executable\\n    try:\\n        result = get_python_info(str(executable))\\n        result[\"version_info\"] = tuple(result[\"version_info\"])  # fix json dump transformation\\n        if result[\"extra_version_info\"] is not None:\\n            result[\"extra_version_info\"] = tuple(\\n                result[\"extra_version_info\"],\\n            )  # fix json dump transformation\\n        del result[\"version\"]\\n        result[\"executable\"] = str(executable)\\n    except ExecFailed as e:\\n        return NoInterpreterInfo(name, executable=e.executable, out=e.out, err=e.err)\\n    else:\\n        return InterpreterInfo(**result)\\n\\n\\ndef exec_on_interpreter(*args):\\n    from subprocess import PIPE, Popen\\n\\n    popen = Popen(args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\\n    out, err = popen.communicate()\\n    if popen.returncode:\\n        raise ExecFailed(args[0], args[1:], out, err)\\n    if err:\\n        sys.stderr.write(err)\\n    try:\\n        result = json.loads(out)\\n    except Exception:\\n        raise ExecFailed(args[0], args[1:], out, \"could not decode {!r}\".format(out))\\n    return result\\n\\n\\nclass ExecFailed(Exception):\\n    def __init__(self, executable, source, out, err):\\n        self.executable = executable\\n        self.source = source\\n        self.out = out\\n        self.err = err\\n\\n\\nclass InterpreterInfo:\\n    def __init__(\\n        self,\\n        implementation,\\n        executable,\\n        version_info,\\n        sysplatform,\\n        is_64,\\n        os_sep,\\n        extra_version_info,\\n    ):\\n        self.implementation = implementation\\n        self.executable = executable\\n\\n        self.version_info = version_info\\n        self.sysplatform = sysplatform\\n        self.is_64 = is_64\\n        self.os_sep = os_sep\\n        self.extra_version_info = extra_version_info\\n\\n    def __str__(self):\\n        return \"<executable at {}, version_info {}>\".format(self.executable, self.version_info)\\n\\n\\nclass NoInterpreterInfo:\\n    def __init__(self, name, executable=None, out=None, err=\"not found\"):\\n        self.name = name\\n        self.executable = executable\\n        self.version_info = None\\n        self.out = out\\n        self.err = err\\n\\n    def __str__(self):\\n        if self.executable:\\n            return \"<executable at {}, not runnable>\".format(self.executable)\\n        else:\\n            return \"<executable not found for: {}>\".format(self.name)\\n\\n\\nif tox.INFO.IS_WIN:\\n    from .windows import tox_get_python_executable\\nelse:\\n    from .unix import tox_get_python_executable\\nassert tox_get_python_executable\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'import os\\n\\nfrom tox.interpreters.py_spec import CURRENT, PythonSpec\\nfrom tox.interpreters.via_path import exe_spec\\n\\n\\ndef base_discover(envconfig):\\n    base_python = envconfig.basepython\\n    spec = PythonSpec.from_name(base_python)\\n\\n    # 1. check passed in discover elements\\n    discovers = envconfig.config.option.discover\\n    if not discovers:\\n        discovers = os.environ.get(str(\"TOX_DISCOVER\"), \"\").split(os.pathsep)\\n    for discover in discovers:\\n        if os.path.exists(discover):\\n            cur_spec = exe_spec(discover, envconfig.basepython)\\n            if cur_spec is not None and cur_spec.satisfies(spec):\\n                return spec, cur_spec.path\\n\\n    # 2. check current\\n    if spec.name is not None and CURRENT.satisfies(spec):\\n        return spec, CURRENT.path\\n\\n    return spec, None\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'from __future__ import unicode_literals\\n\\nimport os\\nimport re\\nimport sys\\n\\nimport six\\n\\nimport tox\\n\\n\\nclass PythonSpec(object):\\n    def __init__(self, name, major, minor, architecture, path, args=None):\\n        self.name = name\\n        self.major = major\\n        self.minor = minor\\n        self.architecture = architecture\\n        self.path = path\\n        self.args = args\\n\\n    def __repr__(self):\\n        return (\\n            \"{0.__class__.__name__}(name={0.name!r}, major={0.major!r}, minor={0.minor!r}, \"\\n            \"architecture={0.architecture!r}, path={0.path!r}, args={0.args!r})\"\\n        ).format(self)\\n\\n    def __str__(self):\\n        msg = repr(self)\\n        return msg.encode(\"utf-8\") if six.PY2 else msg\\n\\n    def satisfies(self, req):\\n        if req.is_abs and self.is_abs and self.path != req.path:\\n            return False\\n        if req.name is not None and req.name != self.name:\\n            return False\\n        if req.architecture is not None and req.architecture != self.architecture:\\n            return False\\n        if req.major is not None and req.major != self.major:\\n            return False\\n        if req.minor is not None and req.minor != self.minor:\\n            return False\\n        if req.major is None and req.minor is not None:\\n            return False\\n        return True\\n\\n    @property\\n    def is_abs(self):\\n        return self.path is not None and os.path.isabs(self.path)\\n\\n    @classmethod\\n    def from_name(cls, base_python):\\n        name, major, minor, architecture, path = None, None, None, None, None\\n        if os.path.isabs(base_python):\\n            path = base_python\\n        else:\\n            match = re.match(r\"(python|pypy|jython)(\\\\d)?(?:\\\\.(\\\\d+))?(?:-(32|64))?$\", base_python)\\n            if match:\\n                groups = match.groups()\\n                name = groups[0]\\n                major = int(groups[1]) if len(groups) >= 2 and groups[1] is not None else None\\n                minor = int(groups[2]) if len(groups) >= 3 and groups[2] is not None else None\\n                architecture = (\\n                    int(groups[3]) if len(groups) >= 4 and groups[3] is not None else None\\n                )\\n            else:\\n                path = base_python\\n        return cls(name, major, minor, architecture, path)\\n\\n\\nCURRENT = PythonSpec(\\n    \"pypy\" if tox.constants.INFO.IS_PYPY else \"python\",\\n    sys.version_info[0],\\n    sys.version_info[1],\\n    64 if sys.maxsize > 2 ** 32 else 32,\\n    sys.executable,\\n)\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'from __future__ import unicode_literals\\n\\nimport tox\\n\\nfrom .common import base_discover\\nfrom .via_path import check_with_path\\n\\n\\n@tox.hookimpl\\ndef tox_get_python_executable(envconfig):\\n    spec, path = base_discover(envconfig)\\n    if path is not None:\\n        return path\\n    # 3. check if the literal base python\\n    candidates = [envconfig.basepython]\\n    # 4. check if the un-versioned name is good\\n    if spec.name is not None and spec.name != envconfig.basepython:\\n        candidates.append(spec.name)\\n    return check_with_path(candidates, spec)\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'from __future__ import unicode_literals\\n\\nimport json\\nimport os\\nimport subprocess\\nfrom collections import defaultdict\\nfrom threading import Lock\\n\\nimport py\\n\\nfrom tox import reporter\\nfrom tox.constants import VERSION_QUERY_SCRIPT\\n\\nfrom .py_spec import PythonSpec\\n\\n\\ndef check_with_path(candidates, spec):\\n    for path in candidates:\\n        base = path\\n        if not os.path.isabs(path):\\n            path = py.path.local.sysfind(path)\\n        if path is not None:\\n            if os.path.exists(str(path)):\\n                cur_spec = exe_spec(path, base)\\n                if cur_spec is not None and cur_spec.satisfies(spec):\\n                    return cur_spec.path\\n\\n\\n_SPECS = {}\\n_SPECK_LOCK = defaultdict(Lock)\\n\\n\\ndef exe_spec(python_exe, base):\\n    if not isinstance(python_exe, str):\\n        python_exe = str(python_exe)\\n    with _SPECK_LOCK[python_exe]:\\n        if python_exe not in _SPECS:\\n            info = get_python_info(python_exe)\\n            if info is not None:\\n                found = PythonSpec(\\n                    \"pypy\" if info[\"implementation\"] == \"PyPy\" else \"python\",\\n                    info[\"version_info\"][0],\\n                    info[\"version_info\"][1],\\n                    64 if info[\"is_64\"] else 32,\\n                    info[\"executable\"],\\n                )\\n                reporter.verbosity2(\"{} ({}) is {}\".format(base, python_exe, info))\\n            else:\\n                found = None\\n            _SPECS[python_exe] = found\\n    return _SPECS[python_exe]\\n\\n\\n_python_info_cache = {}\\n\\n\\ndef get_python_info(cmd):\\n    try:\\n        return _python_info_cache[cmd].copy()\\n    except KeyError:\\n        pass\\n    proc = subprocess.Popen(\\n        [cmd] + [VERSION_QUERY_SCRIPT],\\n        stdout=subprocess.PIPE,\\n        stderr=subprocess.PIPE,\\n        universal_newlines=True,\\n    )\\n    out, err = proc.communicate()\\n    if not proc.returncode:\\n        try:\\n            result = json.loads(out)\\n        except ValueError as exception:\\n            failure = exception\\n        else:\\n            _python_info_cache[cmd] = result\\n            return result.copy()\\n    else:\\n        failure = \"exit code {}\".format(proc.returncode)\\n    reporter.verbosity1(\"{!r} cmd {!r} out {!r} err {!r} \".format(failure, cmd, out, err))\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'from __future__ import unicode_literals\\n\\nfrom threading import Lock\\n\\nimport tox\\n\\nfrom ..common import base_discover\\nfrom ..py_spec import CURRENT\\nfrom ..via_path import check_with_path\\n\\n\\n@tox.hookimpl\\ndef tox_get_python_executable(envconfig):\\n    spec, path = base_discover(envconfig)\\n    if path is not None:\\n        return path\\n    # second check if the py.exe has it (only for non path specs)\\n    if spec.path is None:\\n        py_exe = locate_via_pep514(spec)\\n        if py_exe is not None:\\n            return py_exe\\n\\n    # third check if the literal base python is on PATH\\n    candidates = [envconfig.basepython]\\n    # fourth check if the name is on PATH\\n    if spec.name is not None and spec.name != envconfig.basepython:\\n        candidates.append(spec.name)\\n    # or check known locations\\n    if spec.major is not None and spec.minor is not None:\\n        if spec.name == \"python\":\\n            # The standard names are in predictable places.\\n            candidates.append(r\"c:\\\\python{}{}\\\\python.exe\".format(spec.major, spec.minor))\\n    return check_with_path(candidates, spec)\\n\\n\\n_PY_AVAILABLE = []\\n_PY_LOCK = Lock()\\n\\n\\ndef locate_via_pep514(spec):\\n    with _PY_LOCK:\\n        if not _PY_AVAILABLE:\\n            from . import pep514\\n\\n            _PY_AVAILABLE.extend(pep514.discover_pythons())\\n            _PY_AVAILABLE.append(CURRENT)\\n    for cur_spec in _PY_AVAILABLE:\\n        if cur_spec.satisfies(spec):\\n            return cur_spec.path\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'\"\"\"Implement https://www.python.org/dev/peps/pep-0514/ to discover interpreters - Windows only\"\"\"\\nfrom __future__ import unicode_literals\\n\\nimport os\\nimport re\\n\\nimport six\\nfrom six.moves import winreg\\n\\nfrom tox import reporter\\nfrom tox.interpreters.py_spec import PythonSpec\\n\\n\\ndef enum_keys(key):\\n    at = 0\\n    while True:\\n        try:\\n            yield winreg.EnumKey(key, at)\\n        except OSError:\\n            break\\n        at += 1\\n\\n\\ndef get_value(key, value_name):\\n    try:\\n        return winreg.QueryValueEx(key, value_name)[0]\\n    except OSError:\\n        return None\\n\\n\\ndef discover_pythons():\\n    for hive, hive_name, key, flags, default_arch in [\\n        (winreg.HKEY_CURRENT_USER, \"HKEY_CURRENT_USER\", r\"Software\\\\Python\", 0, 64),\\n        (\\n            winreg.HKEY_LOCAL_MACHINE,\\n            \"HKEY_LOCAL_MACHINE\",\\n            r\"Software\\\\Python\",\\n            winreg.KEY_WOW64_64KEY,\\n            64,\\n        ),\\n        (\\n            winreg.HKEY_LOCAL_MACHINE,\\n            \"HKEY_LOCAL_MACHINE\",\\n            r\"Software\\\\Python\",\\n            winreg.KEY_WOW64_32KEY,\\n            32,\\n        ),\\n    ]:\\n        for spec in process_set(hive, hive_name, key, flags, default_arch):\\n            yield spec\\n\\n\\ndef process_set(hive, hive_name, key, flags, default_arch):\\n    try:\\n        with winreg.OpenKeyEx(hive, key, 0, winreg.KEY_READ | flags) as root_key:\\n            for company in enum_keys(root_key):\\n                if company == \"PyLauncher\":  # reserved\\n                    continue\\n                for spec in process_company(hive_name, company, root_key, default_arch):\\n                    yield spec\\n    except OSError:\\n        pass\\n\\n\\ndef process_company(hive_name, company, root_key, default_arch):\\n    with winreg.OpenKeyEx(root_key, company) as company_key:\\n        for tag in enum_keys(company_key):\\n            for spec in process_tag(hive_name, company, company_key, tag, default_arch):\\n                yield spec\\n\\n\\ndef process_tag(hive_name, company, company_key, tag, default_arch):\\n    with winreg.OpenKeyEx(company_key, tag) as tag_key:\\n        major, minor = load_version_data(hive_name, company, tag, tag_key)\\n        if major is None:\\n            return\\n        arch = load_arch_data(hive_name, company, tag, tag_key, default_arch)\\n    exe, args = load_exe(hive_name, company, company_key, tag)\\n    if exe is not None:\\n        name = \"python\" if company == \"PythonCore\" else company\\n        yield PythonSpec(name, major, minor, arch, exe, args)\\n\\n\\ndef load_exe(hive_name, company, company_key, tag):\\n    key_path = \"{}/{}/{}\".format(hive_name, company, tag)\\n    try:\\n        with winreg.OpenKeyEx(company_key, r\"{}\\\\InstallPath\".format(tag)) as ip_key:\\n            with ip_key:\\n                exe = get_value(ip_key, \"ExecutablePath\")\\n                if exe is None:\\n                    ip = get_value(ip_key, None)\\n                    if ip is None:\\n                        msg(key_path, \"no ExecutablePath or default for it\")\\n\\n                    else:\\n                        exe = os.path.join(ip, \"python.exe\")\\n                if os.path.exists(exe):\\n                    args = get_value(ip_key, \"ExecutableArguments\")\\n                    return exe, args\\n                else:\\n                    msg(key_path, \"exe does not exists {}\".format(exe))\\n    except OSError:\\n        msg(\"{}/{}\".format(key_path, \"InstallPath\"), \"missing\")\\n    return None, None\\n\\n\\ndef load_arch_data(hive_name, company, tag, tag_key, default_arch):\\n    arch_str = get_value(tag_key, \"SysArchitecture\")\\n    if arch_str is not None:\\n        key_path = \"{}/{}/{}/SysArchitecture\".format(hive_name, company, tag)\\n        try:\\n            return parse_arch(arch_str)\\n        except ValueError as sys_arch:\\n            msg(key_path, sys_arch)\\n    return default_arch\\n\\n\\ndef parse_arch(arch_str):\\n    if not isinstance(arch_str, six.string_types):\\n        raise ValueError(\"arch is not string\")\\n    match = re.match(r\"(\\\\d+)bit\", arch_str)\\n    if match:\\n        return int(next(iter(match.groups())))\\n    raise ValueError(\"invalid format {}\".format(arch_str))\\n\\n\\ndef load_version_data(hive_name, company, tag, tag_key):\\n    version_str = get_value(tag_key, \"SysVersion\")\\n    major, minor = None, None\\n    if version_str is not None:\\n        key_path = \"{}/{}/{}/SysVersion\".format(hive_name, company, tag)\\n        try:\\n            major, minor = parse_version(get_value(tag_key, \"SysVersion\"))\\n        except ValueError as sys_version:\\n            msg(key_path, sys_version)\\n    if major is None:\\n        key_path = \"{}/{}/{}\".format(hive_name, company, tag)\\n        try:\\n            major, minor = parse_version(tag)\\n        except ValueError as tag_version:\\n            msg(key_path, tag_version)\\n    return major, minor\\n\\n\\ndef parse_version(version_str):\\n    if not isinstance(version_str, six.string_types):\\n        raise ValueError(\"key is not string\")\\n    match = re.match(r\"(\\\\d+)\\\\.(\\\\d+).*\", version_str)\\n    if match:\\n        return tuple(int(i) for i in match.groups())\\n    raise ValueError(\"invalid format {}\".format(version_str))\\n\\n\\ndef msg(path, what):\\n    reporter.verbosity1(\"PEP-514 violation in Windows Registry at {} error: {}\".format(path, what))\\n\\n\\ndef _run():\\n    reporter.update_default_reporter(0, reporter.Verbosity.DEBUG)\\n    for spec in discover_pythons():\\n        print(repr(spec))\\n\\n\\nif __name__ == \"__main__\":\\n    _run()\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'\"\"\"This module handles collecting and persisting in json format a tox session\"\"\"\\nfrom .result import ResultLog\\n\\n__all__ = (\"ResultLog\",)\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'from __future__ import absolute_import, unicode_literals\\n\\n\\nclass CommandLog(object):\\n    \"\"\"Report commands interacting with third party tools\"\"\"\\n\\n    def __init__(self, env_log, list):\\n        self.envlog = env_log\\n        self.list = list\\n\\n    def add_command(self, argv, output, retcode):\\n        data = {\"command\": argv, \"output\": output, \"retcode\": retcode}\\n        self.list.append(data)\\n        return data\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'from __future__ import absolute_import, unicode_literals\\n\\nfrom tox.interpreters.via_path import get_python_info\\n\\nfrom .command import CommandLog\\n\\n\\nclass EnvLog(object):\\n    \"\"\"Report the status of a tox environment\"\"\"\\n\\n    def __init__(self, result_log, name, dict):\\n        self.reportlog = result_log\\n        self.name = name\\n        self.dict = dict\\n\\n    def set_python_info(self, python_executable):\\n        answer = get_python_info(str(python_executable))\\n        answer[\"executable\"] = python_executable\\n        self.dict[\"python\"] = answer\\n\\n    def get_commandlog(self, name):\\n        \"\"\"get the command log for a given group name\"\"\"\\n        data = self.dict.setdefault(name, [])\\n        return CommandLog(self, data)\\n\\n    def set_installed(self, packages):\\n        self.dict[\"installed_packages\"] = packages\\n\\n    def set_header(self, installpkg):\\n        \"\"\"\\n        :param py.path.local installpkg: Path to the package.\\n        \"\"\"\\n        self.dict[\"installpkg\"] = {\\n            \"sha256\": installpkg.computehash(\"sha256\"),\\n            \"basename\": installpkg.basename,\\n        }\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'\"\"\"Generate json report of a run\"\"\"\\nfrom __future__ import absolute_import, unicode_literals\\n\\nimport json\\nimport os\\nimport socket\\nimport sys\\n\\nfrom tox.version import __version__\\n\\nfrom .command import CommandLog\\nfrom .env import EnvLog\\n\\n\\nclass ResultLog(object):\\n    \"\"\"The result of a tox session\"\"\"\\n\\n    def __init__(self):\\n        command_log = []\\n        self.command_log = CommandLog(None, command_log)\\n        self.dict = {\\n            \"reportversion\": \"1\",\\n            \"toxversion\": __version__,\\n            \"platform\": sys.platform,\\n            \"host\": os.getenv(str(\"HOSTNAME\")) or socket.getfqdn(),\\n            \"commands\": command_log,\\n        }\\n\\n    @classmethod\\n    def from_json(cls, data):\\n        result = cls()\\n        result.dict = json.loads(data)\\n        result.command_log = CommandLog(None, result.dict[\"commands\"])\\n        return result\\n\\n    def get_envlog(self, name):\\n        \"\"\"Return the env log of an environment (create on first call)\"\"\"\\n        test_envs = self.dict.setdefault(\"testenvs\", {})\\n        env_data = test_envs.setdefault(name, {})\\n        return EnvLog(self, name, env_data)\\n\\n    def dumps_json(self):\\n        \"\"\"Return the json dump of the current state, indented\"\"\"\\n        return json.dumps(self.dict, indent=2)\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'import py\\n\\nimport tox\\nfrom tox.reporter import error, info, verbosity0, verbosity2, warning\\nfrom tox.util.lock import hold_lock\\n\\nfrom .builder import build_package\\nfrom .local import resolve_package\\nfrom .view import create_session_view\\n\\n\\n@tox.hookimpl\\ndef tox_package(session, venv):\\n    \"\"\"Build an sdist at first call return that for all calls\"\"\"\\n    if not hasattr(session, \"package\"):\\n        session.package, session.dist = get_package(session)\\n    return session.package\\n\\n\\ndef get_package(session):\\n    \"\"\"Perform the package operation\"\"\"\\n    config = session.config\\n    if config.skipsdist:\\n        info(\"skipping sdist step\")\\n        return None\\n    lock_file = session.config.toxworkdir.join(\"{}.lock\".format(session.config.isolated_build_env))\\n\\n    with hold_lock(lock_file, verbosity0):\\n        package = acquire_package(config, session)\\n        session_package = create_session_view(package, config.temp_dir)\\n        return session_package, package\\n\\n\\ndef acquire_package(config, session):\\n    \"\"\"acquire a source distribution (either by loading a local file or triggering a build)\"\"\"\\n    if not config.option.sdistonly and (config.sdistsrc or config.option.installpkg):\\n        path = get_local_package(config)\\n    else:\\n        try:\\n            path = build_package(config, session)\\n        except tox.exception.InvocationError as exception:\\n            error(\"FAIL could not package project - v = {!r}\".format(exception))\\n            return None\\n        sdist_file = config.distshare.join(path.basename)\\n        if sdist_file != path:\\n            info(\"copying new sdistfile to {!r}\".format(str(sdist_file)))\\n            try:\\n                sdist_file.dirpath().ensure(dir=1)\\n            except py.error.Error:\\n                warning(\"could not copy distfile to {}\".format(sdist_file.dirpath()))\\n            else:\\n                path.copy(sdist_file)\\n    return path\\n\\n\\ndef get_local_package(config):\\n    path = config.option.installpkg\\n    if not path:\\n        path = config.sdistsrc\\n    py_path = py.path.local(resolve_package(path))\\n    info(\"using package {!r}, skipping \\'sdist\\' activity \".format(str(py_path)))\\n    return py_path\\n\\n\\n@tox.hookimpl\\ndef tox_cleanup(session):\\n    for tox_env in session.venv_dict.values():\\n        if hasattr(tox_env, \"package\") and isinstance(tox_env.package, py.path.local):\\n            package = tox_env.package\\n            if package.exists():\\n                verbosity2(\"cleanup {}\".format(package))\\n                package.remove()\\n                py.path.local(package.dirname).remove(ignore_errors=True)\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'from .isolated import build\\nfrom .legacy import make_sdist\\n\\n\\ndef build_package(config, session):\\n    if not config.isolated_build:\\n        return make_sdist(config, session)\\n    else:\\n        return build(config, session)\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'from __future__ import unicode_literals\\n\\nimport json\\nimport os\\nfrom collections import namedtuple\\n\\nimport six\\nfrom packaging.requirements import Requirement\\nfrom packaging.utils import canonicalize_name\\n\\nfrom tox import reporter\\nfrom tox.config import DepConfig, get_py_project_toml\\nfrom tox.constants import BUILD_ISOLATED, BUILD_REQUIRE_SCRIPT\\n\\nBuildInfo = namedtuple(\\n    \"BuildInfo\",\\n    [\"requires\", \"backend_module\", \"backend_object\", \"backend_paths\"],\\n)\\n\\n\\ndef build(config, session):\\n    build_info = get_build_info(config.setupdir)\\n    package_venv = session.getvenv(config.isolated_build_env)\\n    package_venv.envconfig.deps_matches_subset = True\\n\\n    # we allow user specified dependencies so the users can write extensions to\\n    # install additional type of dependencies (e.g. binary)\\n    user_specified_deps = package_venv.envconfig.deps\\n    package_venv.envconfig.deps = [DepConfig(r, None) for r in build_info.requires]\\n    package_venv.envconfig.deps.extend(user_specified_deps)\\n\\n    if package_venv.setupenv():\\n        package_venv.finishvenv()\\n    if isinstance(package_venv.status, Exception):\\n        raise package_venv.status\\n\\n    build_requires = get_build_requires(build_info, package_venv, config.setupdir)\\n    # we need to filter out requirements already specified in pyproject.toml or user deps\\n    base_build_deps = {\\n        canonicalize_name(Requirement(r.name).name) for r in package_venv.envconfig.deps\\n    }\\n    build_requires_dep = [\\n        DepConfig(r, None)\\n        for r in build_requires\\n        if canonicalize_name(Requirement(r).name) not in base_build_deps\\n    ]\\n    if build_requires_dep:\\n        with package_venv.new_action(\"build_requires\", package_venv.envconfig.envdir) as action:\\n            package_venv.run_install_command(packages=build_requires_dep, action=action)\\n        package_venv.finishvenv()\\n    return perform_isolated_build(build_info, package_venv, config.distdir, config.setupdir)\\n\\n\\ndef get_build_info(folder):\\n    toml_file = folder.join(\"pyproject.toml\")\\n\\n    # as per https://www.python.org/dev/peps/pep-0517/\\n\\n    def abort(message):\\n        reporter.error(\"{} inside {}\".format(message, toml_file))\\n        raise SystemExit(1)\\n\\n    if not toml_file.exists():\\n        reporter.error(\"missing {}\".format(toml_file))\\n        raise SystemExit(1)\\n\\n    config_data = get_py_project_toml(toml_file)\\n\\n    if \"build-system\" not in config_data:\\n        abort(\"build-system section missing\")\\n\\n    build_system = config_data[\"build-system\"]\\n\\n    if \"requires\" not in build_system:\\n        abort(\"missing requires key at build-system section\")\\n    if \"build-backend\" not in build_system:\\n        abort(\"missing build-backend key at build-system section\")\\n\\n    requires = build_system[\"requires\"]\\n    if not isinstance(requires, list) or not all(isinstance(i, six.text_type) for i in requires):\\n        abort(\"requires key at build-system section must be a list of string\")\\n\\n    backend = build_system[\"build-backend\"]\\n    if not isinstance(backend, six.text_type):\\n        abort(\"build-backend key at build-system section must be a string\")\\n\\n    args = backend.split(\":\")\\n    module = args[0]\\n    obj = args[1] if len(args) > 1 else \"\"\\n\\n    backend_paths = build_system.get(\"backend-path\", [])\\n    if not isinstance(backend_paths, list):\\n        abort(\"backend-path key at build-system section must be a list, if specified\")\\n    backend_paths = [folder.join(p) for p in backend_paths]\\n\\n    normalized_folder = os.path.normcase(str(folder.realpath()))\\n    normalized_paths = (os.path.normcase(str(path.realpath())) for path in backend_paths)\\n\\n    if not all(\\n        os.path.commonprefix((normalized_folder, path)) == normalized_folder\\n        for path in normalized_paths\\n    ):\\n        abort(\"backend-path must exist in the project root\")\\n\\n    return BuildInfo(requires, module, obj, backend_paths)\\n\\n\\ndef perform_isolated_build(build_info, package_venv, dist_dir, setup_dir):\\n    with package_venv.new_action(\\n        \"perform-isolated-build\",\\n        package_venv.envconfig.envdir,\\n    ) as action:\\n        # need to start with an empty (but existing) source distribution folder\\n        if dist_dir.exists():\\n            dist_dir.remove(rec=1, ignore_errors=True)\\n        dist_dir.ensure_dir()\\n\\n        result = package_venv._pcall(\\n            [\\n                package_venv.envconfig.envpython,\\n                BUILD_ISOLATED,\\n                str(dist_dir),\\n                build_info.backend_module,\\n                build_info.backend_object,\\n                os.path.pathsep.join(str(p) for p in build_info.backend_paths),\\n            ],\\n            returnout=True,\\n            action=action,\\n            cwd=setup_dir,\\n        )\\n        reporter.verbosity2(result)\\n        return dist_dir.join(result.split(\"\\\\n\")[-2])\\n\\n\\ndef get_build_requires(build_info, package_venv, setup_dir):\\n    with package_venv.new_action(\"get-build-requires\", package_venv.envconfig.envdir) as action:\\n        result = package_venv._pcall(\\n            [\\n                package_venv.envconfig.envpython,\\n                BUILD_REQUIRE_SCRIPT,\\n                build_info.backend_module,\\n                build_info.backend_object,\\n                os.path.pathsep.join(str(p) for p in build_info.backend_paths),\\n            ],\\n            returnout=True,\\n            action=action,\\n            cwd=setup_dir,\\n        )\\n        return json.loads(result.split(\"\\\\n\")[-2])\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'import sys\\n\\nimport py\\n\\nfrom tox import reporter\\nfrom tox.util.path import ensure_empty_dir\\n\\n\\ndef make_sdist(config, session):\\n    setup = config.setupdir.join(\"setup.py\")\\n    pyproject = config.setupdir.join(\"pyproject.toml\")\\n    setup_check = setup.check()\\n    if not setup_check and not pyproject.check():\\n        reporter.error(\\n            \"No pyproject.toml or setup.py file found. The expected locations are:\\\\n\"\\n            \"  {pyproject} or {setup}\\\\n\"\\n            \"You can\\\\n\"\\n            \"  1. Create one:\\\\n\"\\n            \"     https://tox.readthedocs.io/en/latest/example/package.html\\\\n\"\\n            \"  2. Configure tox to avoid running sdist:\\\\n\"\\n            \"     https://tox.readthedocs.io/en/latest/example/general.html\\\\n\"\\n            \"  3. Configure tox to use an isolated_build\".format(pyproject=pyproject, setup=setup),\\n        )\\n        raise SystemExit(1)\\n    if not setup_check:\\n        reporter.error(\\n            \"pyproject.toml file found.\\\\n\"\\n            \"To use a PEP 517 build-backend you are required to \"\\n            \"configure tox to use an isolated_build:\\\\n\"\\n            \"https://tox.readthedocs.io/en/latest/example/package.html\\\\n\",\\n        )\\n        raise SystemExit(1)\\n    with session.newaction(\"GLOB\", \"packaging\") as action:\\n        action.setactivity(\"sdist-make\", setup)\\n        ensure_empty_dir(config.distdir)\\n        build_log = action.popen(\\n            [sys.executable, setup, \"sdist\", \"--formats=zip\", \"--dist-dir\", config.distdir],\\n            cwd=config.setupdir,\\n            returnout=True,\\n        )\\n        reporter.verbosity2(build_log)\\n        try:\\n            return config.distdir.listdir()[0]\\n        except py.error.ENOENT:\\n            # check if empty or comment only\\n            data = []\\n            with open(str(setup)) as fp:\\n                for line in fp:\\n                    if line and line[0] == \"#\":\\n                        continue\\n                    data.append(line)\\n            if not \"\".join(data).strip():\\n                reporter.error(\"setup.py is empty\")\\n                raise SystemExit(1)\\n            reporter.error(\\n                \"No dist directory found. Please check setup.py, e.g with:\\\\n\"\\n                \"     python setup.py sdist\",\\n            )\\n            raise SystemExit(1)\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'import os\\nimport re\\n\\nimport packaging.version\\nimport py\\n\\nimport tox\\nfrom tox import reporter\\nfrom tox.exception import MissingDependency\\n\\n_SPEC_2_PACKAGE = {}\\n\\n\\ndef resolve_package(package_spec):\\n    global _SPEC_2_PACKAGE\\n    try:\\n        return _SPEC_2_PACKAGE[package_spec]\\n    except KeyError:\\n        _SPEC_2_PACKAGE[package_spec] = x = get_latest_version_of_package(package_spec)\\n        return x\\n\\n\\ndef get_latest_version_of_package(package_spec):\\n    if not os.path.isabs(str(package_spec)):\\n        return package_spec\\n    p = py.path.local(package_spec)\\n    if p.check():\\n        return p\\n    if not p.dirpath().check(dir=1):\\n        raise tox.exception.MissingDirectory(p.dirpath())\\n    reporter.info(\"determining {}\".format(p))\\n    candidates = p.dirpath().listdir(p.basename)\\n    if len(candidates) == 0:\\n        raise MissingDependency(package_spec)\\n    if len(candidates) > 1:\\n        version_package = []\\n        for filename in candidates:\\n            version = get_version_from_filename(filename.basename)\\n            if version is not None:\\n                version_package.append((version, filename))\\n            else:\\n                reporter.warning(\"could not determine version of: {}\".format(str(filename)))\\n        if not version_package:\\n            raise tox.exception.MissingDependency(package_spec)\\n        version_package.sort()\\n        _, package_with_largest_version = version_package[-1]\\n        return package_with_largest_version\\n    else:\\n        return candidates[0]\\n\\n\\n_REGEX_FILE_NAME_WITH_VERSION = re.compile(r\"[\\\\w_+.-]+-(.*)\\\\.(zip|tar\\\\.gz)\")\\n\\n\\ndef get_version_from_filename(basename):\\n    m = _REGEX_FILE_NAME_WITH_VERSION.match(basename)\\n    if m is None:\\n        return None\\n    version = m.group(1)\\n    try:\\n        return packaging.version.Version(version)\\n    except packaging.version.InvalidVersion:\\n        return None\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'import os\\nfrom itertools import chain\\n\\nimport six\\n\\nfrom tox.reporter import verbosity1\\n\\n\\ndef create_session_view(package, temp_dir):\\n    \"\"\"once we build a package we cannot return that directly, as a subsequent call\\n    might delete that package (in order to do its own build); therefore we need to\\n    return a view of the file that it\\'s not prone to deletion and can be removed when the\\n    session ends\\n    \"\"\"\\n    if not package:\\n        return package\\n    package_dir = temp_dir.join(\"package\")\\n    package_dir.ensure(dir=True)\\n\\n    # we\\'ll number the active instances, and use the max value as session folder for a new build\\n    # note we cannot change package names as PEP-491 (wheel binary format)\\n    # is strict about file name structure\\n    exists = [i.basename for i in package_dir.listdir()]\\n    file_id = max(chain((0,), (int(i) for i in exists if six.text_type(i).isnumeric())))\\n\\n    session_dir = package_dir.join(str(file_id + 1))\\n    session_dir.ensure(dir=True)\\n    session_package = session_dir.join(package.basename)\\n\\n    # if we can do hard links do that, otherwise just copy\\n    links = False\\n    if hasattr(os, \"link\"):\\n        try:\\n            os.link(str(package), str(session_package))\\n            links = True\\n        except (OSError, NotImplementedError):\\n            pass\\n    if not links:\\n        package.copy(session_package)\\n    operation = \"links\" if links else \"copied\"\\n    common = session_package.common(package)\\n    verbosity1(\\n        \"package {} {} to {} ({})\".format(\\n            common.bestrelpath(session_package),\\n            operation,\\n            common.bestrelpath(package),\\n            common,\\n        ),\\n    )\\n    return session_package\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'\"\"\"A progress reporter inspired from the logging modules\"\"\"\\nfrom __future__ import absolute_import, unicode_literals\\n\\nimport os\\nimport time\\nfrom contextlib import contextmanager\\nfrom datetime import datetime\\n\\nimport py\\n\\n\\nclass Verbosity(object):\\n    DEBUG = 2\\n    INFO = 1\\n    DEFAULT = 0\\n    QUIET = -1\\n    EXTRA_QUIET = -2\\n\\n\\nREPORTER_TIMESTAMP_ON_ENV = str(\"TOX_REPORTER_TIMESTAMP\")\\nREPORTER_TIMESTAMP_ON = os.environ.get(REPORTER_TIMESTAMP_ON_ENV, False) == \"1\"\\nSTART = datetime.now()\\n\\n\\nclass Reporter(object):\\n    def __init__(self, verbose_level=None, quiet_level=None):\\n        kwargs = {}\\n        if verbose_level is not None:\\n            kwargs[\"verbose_level\"] = verbose_level\\n        if quiet_level is not None:\\n            kwargs[\"quiet_level\"] = quiet_level\\n        self._reset(**kwargs)\\n\\n    def _reset(self, verbose_level=0, quiet_level=0):\\n        self.verbose_level = verbose_level\\n        self.quiet_level = quiet_level\\n        self.reported_lines = []\\n        self.tw = py.io.TerminalWriter()\\n\\n    @property\\n    def verbosity(self):\\n        return self.verbose_level - self.quiet_level\\n\\n    def log_popen(self, cwd, outpath, cmd_args_shell, pid):\\n        \"\"\"log information about the action.popen() created process.\"\"\"\\n        msg = \"[{}] {}$ {}\".format(pid, cwd, cmd_args_shell)\\n        if outpath:\\n            if outpath.common(cwd) is not None:\\n                outpath = cwd.bestrelpath(outpath)\\n            msg = \"{} >{}\".format(msg, outpath)\\n        self.verbosity1(msg, of=\"logpopen\")\\n\\n    @property\\n    def messages(self):\\n        return [i for _, i in self.reported_lines]\\n\\n    @contextmanager\\n    def timed_operation(self, name, msg):\\n        self.verbosity2(\"{} start: {}\".format(name, msg), bold=True)\\n        start = time.time()\\n        yield\\n        duration = time.time() - start\\n        self.verbosity2(\\n            \"{} finish: {} after {:.2f} seconds\".format(name, msg, duration),\\n            bold=True,\\n        )\\n\\n    def separator(self, of, msg, level):\\n        if self.verbosity >= level:\\n            self.reported_lines.append((\"separator\", \"- summary -\"))\\n            self.tw.sep(of, msg)\\n\\n    def logline_if(self, level, of, msg, key=None, **kwargs):\\n        if self.verbosity >= level:\\n            message = str(msg) if key is None else \"{}{}\".format(key, msg)\\n            self.logline(of, message, **kwargs)\\n\\n    def logline(self, of, msg, **opts):\\n        self.reported_lines.append((of, msg))\\n        timestamp = \"\"\\n        if REPORTER_TIMESTAMP_ON:\\n            timestamp = \"{} \".format(datetime.now() - START)\\n        line_msg = \"{}{}\\\\n\".format(timestamp, msg)\\n        self.tw.write(line_msg, **opts)\\n\\n    def keyvalue(self, name, value):\\n        if name.endswith(\":\"):\\n            name += \" \"\\n        self.tw.write(name, bold=True)\\n        self.tw.write(value)\\n        self.tw.line()\\n\\n    def line(self, msg, **opts):\\n        self.logline(\"line\", msg, **opts)\\n\\n    def info(self, msg):\\n        self.logline_if(Verbosity.DEBUG, \"info\", msg)\\n\\n    def using(self, msg):\\n        self.logline_if(Verbosity.INFO, \"using\", msg, \"using \", bold=True)\\n\\n    def good(self, msg):\\n        self.logline_if(Verbosity.QUIET, \"good\", msg, green=True)\\n\\n    def warning(self, msg):\\n        self.logline_if(Verbosity.QUIET, \"warning\", msg, \"WARNING: \", red=True)\\n\\n    def error(self, msg):\\n        self.logline_if(Verbosity.QUIET, \"error\", msg, \"ERROR: \", red=True)\\n\\n    def skip(self, msg):\\n        self.logline_if(Verbosity.QUIET, \"skip\", msg, \"SKIPPED: \", yellow=True)\\n\\n    def verbosity0(self, msg, **opts):\\n        self.logline_if(Verbosity.DEFAULT, \"verbosity0\", msg, **opts)\\n\\n    def verbosity1(self, msg, of=\"verbosity1\", **opts):\\n        self.logline_if(Verbosity.INFO, of, msg, **opts)\\n\\n    def verbosity2(self, msg, **opts):\\n        self.logline_if(Verbosity.DEBUG, \"verbosity2\", msg, **opts)\\n\\n    def quiet(self, msg):\\n        self.logline_if(Verbosity.QUIET, \"quiet\", msg)\\n\\n\\n_INSTANCE = Reporter()\\n\\n\\ndef update_default_reporter(quiet_level, verbose_level):\\n    _INSTANCE.quiet_level = quiet_level\\n    _INSTANCE.verbose_level = verbose_level\\n\\n\\ndef has_level(of):\\n    return _INSTANCE.verbosity > of\\n\\n\\ndef verbosity():\\n    return _INSTANCE.verbosity\\n\\n\\nverbosity0 = _INSTANCE.verbosity0\\nverbosity1 = _INSTANCE.verbosity1\\nverbosity2 = _INSTANCE.verbosity2\\nerror = _INSTANCE.error\\nwarning = _INSTANCE.warning\\ngood = _INSTANCE.good\\nusing = _INSTANCE.using\\nskip = _INSTANCE.skip\\ninfo = _INSTANCE.info\\nline = _INSTANCE.line\\nseparator = _INSTANCE.separator\\nkeyvalue = _INSTANCE.keyvalue\\nquiet = _INSTANCE.quiet\\ntimed_operation = _INSTANCE.timed_operation\\nlog_popen = _INSTANCE.log_popen\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'\"\"\"\\nAutomatically package and test a Python project against configurable\\nPython2 and Python3 based virtual environments. Environments are\\nsetup by using virtualenv. Configuration is generally done through an\\nINI-style \"tox.ini\" file.\\n\"\"\"\\nfrom __future__ import absolute_import, unicode_literals\\n\\nimport json\\nimport os\\nimport re\\nimport subprocess\\nimport sys\\nfrom collections import OrderedDict\\nfrom contextlib import contextmanager\\n\\nimport py\\n\\nimport tox\\nfrom tox import reporter\\nfrom tox.action import Action\\nfrom tox.config import INTERRUPT_TIMEOUT, SUICIDE_TIMEOUT, TERMINATE_TIMEOUT, parseconfig\\nfrom tox.config.parallel import ENV_VAR_KEY_PRIVATE as PARALLEL_ENV_VAR_KEY_PRIVATE\\nfrom tox.config.parallel import OFF_VALUE as PARALLEL_OFF\\nfrom tox.logs.result import ResultLog\\nfrom tox.reporter import update_default_reporter\\nfrom tox.util import set_os_env_var\\nfrom tox.util.graph import stable_topological_sort\\nfrom tox.util.stdlib import suppress_output\\nfrom tox.venv import VirtualEnv\\n\\nfrom .commands.help import show_help\\nfrom .commands.help_ini import show_help_ini\\nfrom .commands.provision import provision_tox\\nfrom .commands.run.parallel import run_parallel\\nfrom .commands.run.sequential import run_sequential\\nfrom .commands.show_config import show_config\\nfrom .commands.show_env import show_envs\\n\\n\\ndef cmdline(args=None):\\n    if args is None:\\n        args = sys.argv[1:]\\n    main(args)\\n\\n\\ndef setup_reporter(args):\\n    from argparse import ArgumentParser\\n\\n    from tox.config.reporter import add_verbosity_commands\\n\\n    parser = ArgumentParser(add_help=False)\\n    add_verbosity_commands(parser)\\n    with suppress_output():\\n        try:\\n            options, _ = parser.parse_known_args(args)\\n            update_default_reporter(options.quiet_level, options.verbose_level)\\n        except SystemExit:\\n            pass\\n\\n\\ndef main(args):\\n    setup_reporter(args)\\n    try:\\n        config = load_config(args)\\n        config.logdir.ensure(dir=1)\\n        with set_os_env_var(str(\"TOX_WORK_DIR\"), config.toxworkdir):\\n            session = build_session(config)\\n            exit_code = session.runcommand()\\n        if exit_code is None:\\n            exit_code = 0\\n        raise SystemExit(exit_code)\\n    except tox.exception.BadRequirement:\\n        raise SystemExit(1)\\n    except KeyboardInterrupt:\\n        raise SystemExit(2)\\n\\n\\ndef load_config(args):\\n    try:\\n        config = parseconfig(args)\\n        if config.option.help:\\n            show_help(config)\\n            raise SystemExit(0)\\n        elif config.option.helpini:\\n            show_help_ini(config)\\n            raise SystemExit(0)\\n    except tox.exception.MissingRequirement as exception:\\n        config = exception.config\\n    return config\\n\\n\\ndef build_session(config):\\n    return Session(config)\\n\\n\\nclass Session(object):\\n    \"\"\"The session object that ties together configuration, reporting, venv creation, testing.\"\"\"\\n\\n    def __init__(self, config, popen=subprocess.Popen):\\n        self._reset(config, popen)\\n\\n    def _reset(self, config, popen=subprocess.Popen):\\n        self.config = config\\n        self.popen = popen\\n        self.resultlog = ResultLog()\\n        self.existing_venvs = OrderedDict()\\n        self.venv_dict = {} if self.config.run_provision else self._build_venvs()\\n\\n    def _build_venvs(self):\\n        try:\\n            need_to_run = OrderedDict((v, self.getvenv(v)) for v in self._evaluated_env_list)\\n            try:\\n                venv_order = stable_topological_sort(\\n                    OrderedDict((name, v.envconfig.depends) for name, v in need_to_run.items()),\\n                )\\n\\n                venvs = OrderedDict((v, need_to_run[v]) for v in venv_order)\\n                return venvs\\n            except ValueError as exception:\\n                reporter.error(\"circular dependency detected: {}\".format(exception))\\n        except LookupError:\\n            pass\\n        except tox.exception.ConfigError as exception:\\n            reporter.error(str(exception))\\n        raise SystemExit(1)\\n\\n    def getvenv(self, name):\\n        if name in self.existing_venvs:\\n            return self.existing_venvs[name]\\n        env_config = self.config.envconfigs.get(name, None)\\n        if env_config is None:\\n            reporter.error(\"unknown environment {!r}\".format(name))\\n            raise LookupError(name)\\n        elif env_config.envdir == self.config.toxinidir:\\n            reporter.error(\"venv {!r} in {} would delete project\".format(name, env_config.envdir))\\n            raise tox.exception.ConfigError(\"envdir must not equal toxinidir\")\\n        env_log = self.resultlog.get_envlog(name)\\n        venv = VirtualEnv(envconfig=env_config, popen=self.popen, env_log=env_log)\\n        self.existing_venvs[name] = venv\\n        return venv\\n\\n    @property\\n    def _evaluated_env_list(self):\\n        tox_env_filter = os.environ.get(\"TOX_SKIP_ENV\")\\n        tox_env_filter_re = re.compile(tox_env_filter) if tox_env_filter is not None else None\\n        visited = set()\\n        for name in self.config.envlist:\\n            if name in visited:\\n                continue\\n            visited.add(name)\\n            if tox_env_filter_re is not None and tox_env_filter_re.match(name):\\n                msg = \"skip environment {}, matches filter {!r}\".format(\\n                    name,\\n                    tox_env_filter_re.pattern,\\n                )\\n                reporter.verbosity1(msg)\\n                continue\\n            yield name\\n\\n    @property\\n    def hook(self):\\n        return self.config.pluginmanager.hook\\n\\n    def newaction(self, name, msg, *args):\\n        return Action(\\n            name,\\n            msg,\\n            args,\\n            self.config.logdir,\\n            self.config.option.resultjson,\\n            self.resultlog.command_log,\\n            self.popen,\\n            sys.executable,\\n            SUICIDE_TIMEOUT,\\n            INTERRUPT_TIMEOUT,\\n            TERMINATE_TIMEOUT,\\n        )\\n\\n    def runcommand(self):\\n        reporter.using(\\n            \"tox-{} from {} (pid {})\".format(tox.__version__, tox.__file__, os.getpid()),\\n        )\\n        show_description = reporter.has_level(reporter.Verbosity.DEFAULT)\\n        if self.config.run_provision:\\n            provision_tox_venv = self.getvenv(self.config.provision_tox_env)\\n            return provision_tox(provision_tox_venv, self.config.args)\\n        else:\\n            if self.config.option.showconfig:\\n                self.showconfig()\\n            elif self.config.option.listenvs:\\n                self.showenvs(all_envs=False, description=show_description)\\n            elif self.config.option.listenvs_all:\\n                self.showenvs(all_envs=True, description=show_description)\\n            else:\\n                with self.cleanup():\\n                    return self.subcommand_test()\\n\\n    @contextmanager\\n    def cleanup(self):\\n        self.config.temp_dir.ensure(dir=True)\\n        try:\\n            yield\\n        finally:\\n            self.hook.tox_cleanup(session=self)\\n\\n    def subcommand_test(self):\\n        if self.config.skipsdist:\\n            reporter.info(\"skipping sdist step\")\\n        else:\\n            for venv in self.venv_dict.values():\\n                if not venv.envconfig.skip_install:\\n                    venv.package = self.hook.tox_package(session=self, venv=venv)\\n                    if not venv.package:\\n                        return 2\\n                    venv.envconfig.setenv[str(\"TOX_PACKAGE\")] = str(venv.package)\\n        if self.config.option.sdistonly:\\n            return\\n\\n        within_parallel = PARALLEL_ENV_VAR_KEY_PRIVATE in os.environ\\n        try:\\n            if not within_parallel and self.config.option.parallel != PARALLEL_OFF:\\n                run_parallel(self.config, self.venv_dict)\\n            else:\\n                run_sequential(self.config, self.venv_dict)\\n        finally:\\n            retcode = self._summary()\\n        return retcode\\n\\n    def _add_parallel_summaries(self):\\n        if self.config.option.parallel != PARALLEL_OFF and \"testenvs\" in self.resultlog.dict:\\n            result_log = self.resultlog.dict[\"testenvs\"]\\n            for tox_env in self.venv_dict.values():\\n                data = self._load_parallel_env_report(tox_env)\\n                if data and \"testenvs\" in data and tox_env.name in data[\"testenvs\"]:\\n                    result_log[tox_env.name] = data[\"testenvs\"][tox_env.name]\\n\\n    @staticmethod\\n    def _load_parallel_env_report(tox_env):\\n        \"\"\"Load report data into memory, remove disk file\"\"\"\\n        result_json_path = tox_env.get_result_json_path()\\n        if result_json_path and result_json_path.exists():\\n            with result_json_path.open(\"r\") as file_handler:\\n                data = json.load(file_handler)\\n            result_json_path.remove()\\n            return data\\n\\n    def _summary(self):\\n        is_parallel_child = PARALLEL_ENV_VAR_KEY_PRIVATE in os.environ\\n        if not is_parallel_child:\\n            reporter.separator(\"_\", \"summary\", reporter.Verbosity.QUIET)\\n        exit_code = 0\\n        for venv in self.venv_dict.values():\\n            report = reporter.good\\n            status = getattr(venv, \"status\", \"undefined\")\\n            if isinstance(status, tox.exception.InterpreterNotFound):\\n                msg = \" {}: {}\".format(venv.envconfig.envname, str(status))\\n                if self.config.option.skip_missing_interpreters == \"true\":\\n                    report = reporter.skip\\n                else:\\n                    exit_code = 1\\n                    report = reporter.error\\n            elif status == \"platform mismatch\":\\n                msg = \" {}: {} ({!r} does not match {!r})\".format(\\n                    venv.envconfig.envname,\\n                    str(status),\\n                    sys.platform,\\n                    venv.envconfig.platform,\\n                )\\n                report = reporter.skip\\n            elif status and status == \"ignored failed command\":\\n                msg = \"  {}: {}\".format(venv.envconfig.envname, str(status))\\n            elif status and status != \"skipped tests\":\\n                msg = \"  {}: {}\".format(venv.envconfig.envname, str(status))\\n                report = reporter.error\\n                exit_code = 1\\n            else:\\n                if not status:\\n                    status = \"commands succeeded\"\\n                msg = \"  {}: {}\".format(venv.envconfig.envname, status)\\n            if not is_parallel_child:\\n                report(msg)\\n        if not exit_code and not is_parallel_child:\\n            reporter.good(\"  congratulations :)\")\\n        path = self.config.option.resultjson\\n        if path:\\n            if not is_parallel_child:\\n                self._add_parallel_summaries()\\n            path = py.path.local(path)\\n            data = self.resultlog.dumps_json()\\n            reporter.line(\"write json report at: {}\".format(path))\\n            path.write(data)\\n        return exit_code\\n\\n    def showconfig(self):\\n        show_config(self.config)\\n\\n    def showenvs(self, all_envs=False, description=False):\\n        show_envs(self.config, all_envs=all_envs, description=description)\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b''"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'from tox import reporter\\n\\n\\ndef show_help(config):\\n    reporter.line(config._parser._format_help())\\n    reporter.line(\"Environment variables\", bold=True)\\n    reporter.line(\"TOXENV: comma separated list of environments (overridable by \\'-e\\')\")\\n    reporter.line(\"TOX_SKIP_ENV: regular expression to filter down from running tox environments\")\\n    reporter.line(\\n        \"TOX_TESTENV_PASSENV: space-separated list of extra environment variables to be \"\\n        \"passed into test command environments\",\\n    )\\n    reporter.line(\"PY_COLORS: 0 disable colorized output, 1 enable (default)\")\\n    reporter.line(\"TOX_PARALLEL_NO_SPINNER: 1 disable spinner for CI, 0 enable (default)\")\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'from tox import reporter\\n\\n\\ndef show_help_ini(config):\\n    reporter.separator(\"-\", \"per-testenv attributes\", reporter.Verbosity.INFO)\\n    for env_attr in config._testenv_attr:\\n        reporter.line(\\n            \"{:<15} {:<8} default: {}\".format(\\n                env_attr.name,\\n                \"<{}>\".format(env_attr.type),\\n                env_attr.default,\\n            ),\\n            bold=True,\\n        )\\n        reporter.line(env_attr.help)\\n        reporter.line(\"\")\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'\"\"\"In case the tox environment is not correctly setup provision it and delegate execution\"\"\"\\nfrom __future__ import absolute_import, unicode_literals\\n\\nimport os\\n\\nfrom tox.exception import InvocationError\\n\\n\\ndef provision_tox(provision_venv, args):\\n    ensure_meta_env_up_to_date(provision_venv)\\n    with provision_venv.new_action(\"provision\") as action:\\n        provision_args = [str(provision_venv.envconfig.envpython), \"-m\", \"tox\"] + args\\n        try:\\n            env = os.environ.copy()\\n            env[str(\"TOX_PROVISION\")] = str(\"1\")\\n            env.pop(\"__PYVENV_LAUNCHER__\", None)\\n            action.popen(provision_args, redirect=False, report_fail=False, env=env)\\n            return 0\\n        except InvocationError as exception:\\n            return exception.exit_code\\n\\n\\ndef ensure_meta_env_up_to_date(provision_venv):\\n    if provision_venv.setupenv():\\n        provision_venv.finishvenv()\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b''"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'import os\\nimport sys\\nfrom collections import OrderedDict, deque\\nfrom threading import Event, Semaphore, Thread\\n\\nfrom tox import reporter\\nfrom tox.config.parallel import ENV_VAR_KEY_PRIVATE as PARALLEL_ENV_VAR_KEY_PRIVATE\\nfrom tox.config.parallel import ENV_VAR_KEY_PUBLIC as PARALLEL_ENV_VAR_KEY_PUBLIC\\nfrom tox.exception import InvocationError\\nfrom tox.util.main import MAIN_FILE\\nfrom tox.util.spinner import Spinner\\n\\n\\ndef run_parallel(config, venv_dict):\\n    \"\"\"here we\\'ll just start parallel sub-processes\"\"\"\\n    live_out = config.option.parallel_live\\n    disable_spinner = bool(os.environ.get(\"TOX_PARALLEL_NO_SPINNER\") == \"1\")\\n    args = [sys.executable, MAIN_FILE] + config.args\\n    try:\\n        position = args.index(\"--\")\\n    except ValueError:\\n        position = len(args)\\n\\n    max_parallel = config.option.parallel\\n    if max_parallel is None:\\n        max_parallel = len(venv_dict)\\n    semaphore = Semaphore(max_parallel)\\n    finished = Event()\\n\\n    show_progress = (\\n        not disable_spinner and not live_out and reporter.verbosity() > reporter.Verbosity.QUIET\\n    )\\n\\n    with Spinner(enabled=show_progress) as spinner:\\n\\n        def run_in_thread(tox_env, os_env, processes):\\n            output = None\\n            print_out = None\\n            env_name = tox_env.envconfig.envname\\n            status = \"skipped tests\" if config.option.notest else None\\n            try:\\n                os_env[str(PARALLEL_ENV_VAR_KEY_PRIVATE)] = str(env_name)\\n                os_env[str(PARALLEL_ENV_VAR_KEY_PUBLIC)] = str(env_name)\\n                args_sub = list(args)\\n                if hasattr(tox_env, \"package\"):\\n                    args_sub.insert(position, str(tox_env.package))\\n                    args_sub.insert(position, \"--installpkg\")\\n                if tox_env.get_result_json_path():\\n                    result_json_index = args_sub.index(\"--result-json\")\\n                    args_sub[result_json_index + 1] = \"{}\".format(tox_env.get_result_json_path())\\n                with tox_env.new_action(\"parallel {}\".format(tox_env.name)) as action:\\n\\n                    def collect_process(process):\\n                        processes[tox_env] = (action, process)\\n\\n                    print_out = not live_out and tox_env.envconfig.parallel_show_output\\n                    output = action.popen(\\n                        args=args_sub,\\n                        env=os_env,\\n                        redirect=not live_out,\\n                        capture_err=print_out,\\n                        callback=collect_process,\\n                        returnout=print_out,\\n                    )\\n\\n            except InvocationError as err:\\n                status = \"parallel child exit code {}\".format(err.exit_code)\\n            finally:\\n                semaphore.release()\\n                finished.set()\\n                tox_env.status = status\\n                done.add(env_name)\\n                outcome = spinner.succeed\\n                if config.option.notest:\\n                    outcome = spinner.skip\\n                elif status is not None:\\n                    outcome = spinner.fail\\n                outcome(env_name)\\n                if print_out and output is not None:\\n                    reporter.verbosity0(output)\\n\\n        threads = deque()\\n        processes = {}\\n        todo_keys = set(venv_dict.keys())\\n        todo = OrderedDict((n, todo_keys & set(v.envconfig.depends)) for n, v in venv_dict.items())\\n        done = set()\\n        try:\\n            while todo:\\n                for name, depends in list(todo.items()):\\n                    if depends - done:\\n                        # skip if has unfinished dependencies\\n                        continue\\n                    del todo[name]\\n                    venv = venv_dict[name]\\n                    semaphore.acquire(blocking=True)\\n                    spinner.add(name)\\n                    thread = Thread(\\n                        target=run_in_thread,\\n                        args=(venv, os.environ.copy(), processes),\\n                    )\\n                    thread.daemon = True\\n                    thread.start()\\n                    threads.append(thread)\\n                if todo:\\n                    # wait until someone finishes and retry queuing jobs\\n                    finished.wait()\\n                    finished.clear()\\n            while threads:\\n                threads = [\\n                    thread for thread in threads if not thread.join(0.1) and thread.is_alive()\\n                ]\\n        except KeyboardInterrupt:\\n            reporter.verbosity0(\\n                \"[{}] KeyboardInterrupt parallel - stopping children\".format(os.getpid()),\\n            )\\n            while True:\\n                # do not allow to interrupt until children interrupt\\n                try:\\n                    # putting it inside a thread so it\\'s not interrupted\\n                    stopper = Thread(target=_stop_child_processes, args=(processes, threads))\\n                    stopper.start()\\n                    stopper.join()\\n                except KeyboardInterrupt:\\n                    continue\\n                raise KeyboardInterrupt\\n\\n\\ndef _stop_child_processes(processes, main_threads):\\n    \"\"\"A three level stop mechanism for children - INT (250ms) -> TERM (100ms) -> KILL\"\"\"\\n\\n    # first stop children\\n    def shutdown(tox_env, action, process):\\n        action.handle_interrupt(process)\\n\\n    threads = [Thread(target=shutdown, args=(n, a, p)) for n, (a, p) in processes.items()]\\n    for thread in threads:\\n        thread.start()\\n    for thread in threads:\\n        thread.join()\\n\\n    # then its threads\\n    for thread in main_threads:\\n        thread.join()\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'import py\\n\\nimport tox\\nfrom tox.exception import InvocationError\\n\\n\\ndef run_sequential(config, venv_dict):\\n    for venv in venv_dict.values():\\n        if venv.setupenv():\\n            if venv.envconfig.skip_install:\\n                venv.finishvenv()\\n            else:\\n                if venv.envconfig.usedevelop:\\n                    develop_pkg(venv, config.setupdir)\\n                elif config.skipsdist:\\n                    venv.finishvenv()\\n                else:\\n                    installpkg(venv, venv.package)\\n            if venv.status == 0:\\n                runenvreport(venv, config)\\n        if venv.status == 0:\\n            runtestenv(venv, config)\\n\\n\\ndef develop_pkg(venv, setupdir):\\n    with venv.new_action(\"developpkg\", setupdir) as action:\\n        try:\\n            venv.developpkg(setupdir, action)\\n            return True\\n        except InvocationError as exception:\\n            venv.status = exception\\n            return False\\n\\n\\ndef installpkg(venv, path):\\n    \"\"\"Install package in the specified virtual environment.\\n\\n    :param VenvConfig venv: Destination environment\\n    :param str path: Path to the distribution package.\\n    :return: True if package installed otherwise False.\\n    :rtype: bool\\n    \"\"\"\\n    venv.env_log.set_header(installpkg=py.path.local(path))\\n    with venv.new_action(\"installpkg\", path) as action:\\n        try:\\n            venv.installpkg(path, action)\\n            return True\\n        except tox.exception.InvocationError as exception:\\n            venv.status = exception\\n            return False\\n\\n\\ndef runenvreport(venv, config):\\n    \"\"\"\\n    Run an environment report to show which package\\n    versions are installed in the venv\\n    \"\"\"\\n    try:\\n        with venv.new_action(\"envreport\") as action:\\n            packages = config.pluginmanager.hook.tox_runenvreport(venv=venv, action=action)\\n        action.setactivity(\"installed\", \",\".join(packages))\\n        venv.env_log.set_installed(packages)\\n    except InvocationError as exception:\\n        venv.status = exception\\n\\n\\ndef runtestenv(venv, config, redirect=False):\\n    if venv.status == 0 and config.option.notest:\\n        venv.status = \"skipped tests\"\\n    else:\\n        if venv.status:\\n            return\\n        config.pluginmanager.hook.tox_runtest_pre(venv=venv)\\n        if venv.status == 0:\\n            config.pluginmanager.hook.tox_runtest(venv=venv, redirect=redirect)\\n        config.pluginmanager.hook.tox_runtest_post(venv=venv)\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'import sys\\nfrom collections import OrderedDict\\n\\nfrom packaging.requirements import Requirement\\nfrom six import StringIO\\nfrom six.moves import configparser\\n\\nfrom tox import reporter\\nfrom tox.util.stdlib import importlib_metadata\\n\\nDO_NOT_SHOW_CONFIG_ATTRIBUTES = (\\n    \"interpreters\",\\n    \"envconfigs\",\\n    \"envlist\",\\n    \"pluginmanager\",\\n    \"envlist_explicit\",\\n)\\n\\n\\ndef show_config(config):\\n    parser = configparser.RawConfigParser()\\n\\n    if not config.envlist_explicit or reporter.verbosity() >= reporter.Verbosity.INFO:\\n        tox_info(config, parser)\\n        version_info(parser)\\n    tox_envs_info(config, parser)\\n\\n    content = StringIO()\\n    parser.write(content)\\n    value = content.getvalue().rstrip()\\n    reporter.verbosity0(value)\\n\\n\\ndef tox_envs_info(config, parser):\\n    if config.envlist_explicit:\\n        env_list = config.envlist\\n    elif config.option.listenvs:\\n        env_list = config.envlist_default\\n    else:\\n        env_list = list(config.envconfigs.keys())\\n    for name in env_list:\\n        env_config = config.envconfigs[name]\\n        values = OrderedDict(\\n            (attr.name, str(getattr(env_config, attr.name)))\\n            for attr in config._parser._testenv_attr\\n        )\\n        section = \"testenv:{}\".format(name)\\n        set_section(parser, section, values)\\n\\n\\ndef tox_info(config, parser):\\n    info = OrderedDict(\\n        (i, str(getattr(config, i)))\\n        for i in sorted(dir(config))\\n        if not i.startswith(\"_\") and i not in DO_NOT_SHOW_CONFIG_ATTRIBUTES\\n    )\\n    info[\"host_python\"] = sys.executable\\n    set_section(parser, \"tox\", info)\\n\\n\\ndef version_info(parser):\\n    versions = OrderedDict()\\n    to_visit = {\"tox\"}\\n    while to_visit:\\n        current = to_visit.pop()\\n        current_dist = importlib_metadata.distribution(current)\\n        current_name = current_dist.metadata[\"name\"]\\n        versions[current_name] = current_dist.version\\n        if current_dist.requires is not None:\\n            for require in current_dist.requires:\\n                pkg = Requirement(require)\\n                if (\\n                    pkg.marker is None or pkg.marker.evaluate({\"extra\": \"\"})\\n                ) and pkg.name not in versions:\\n                    to_visit.add(pkg.name)\\n    set_section(parser, \"tox:versions\", versions)\\n\\n\\ndef set_section(parser, section, values):\\n    parser.add_section(section)\\n    for key, value in values.items():\\n        parser.set(section, key, value)\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'from __future__ import absolute_import, unicode_literals\\n\\nfrom tox import reporter as report\\n\\n\\ndef show_envs(config, all_envs=False, description=False):\\n    env_conf = config.envconfigs  # this contains all environments\\n    default = config.envlist_default  # this only the defaults\\n    ignore = {config.isolated_build_env, config.provision_tox_env}.union(default)\\n    extra = [e for e in env_conf if e not in ignore] if all_envs else []\\n\\n    if description and default:\\n        report.line(\"default environments:\")\\n    max_length = max(len(env) for env in (default + extra) or [\"\"])\\n\\n    def report_env(e):\\n        if description:\\n            text = env_conf[e].description or \"[no description]\"\\n            msg = \"{} -> {}\".format(e.ljust(max_length), text).strip()\\n        else:\\n            msg = e\\n        report.line(msg)\\n\\n    for e in default:\\n        report_env(e)\\n    if all_envs and extra:\\n        if description:\\n            if default:\\n                report.line(\"\")\\n            report.line(\"additional environments:\")\\n        for e in extra:\\n            report_env(e)\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'from __future__ import absolute_import, unicode_literals\\n\\nimport os\\nfrom contextlib import contextmanager\\n\\n\\n@contextmanager\\ndef set_os_env_var(env_var_name, value):\\n    \"\"\"Set an environment variable with unrolling once the context exists\"\"\"\\n    prev_value = os.environ.get(env_var_name)\\n    try:\\n        os.environ[env_var_name] = str(value)\\n        yield\\n    finally:\\n        if prev_value is None:\\n            del os.environ[env_var_name]\\n        else:\\n            os.environ[env_var_name] = prev_value\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'from __future__ import absolute_import, unicode_literals\\n\\nfrom collections import OrderedDict, defaultdict\\n\\n\\ndef stable_topological_sort(graph):\\n    to_order = set(graph.keys())  # keep a log of what  we need to order\\n\\n    # normalize graph - fill missing nodes (assume no dependency)\\n    for values in list(graph.values()):\\n        for value in values:\\n            if value not in graph:\\n                graph[value] = ()\\n\\n    inverse_graph = defaultdict(set)\\n    for key, depends in graph.items():\\n        for depend in depends:\\n            inverse_graph[depend].add(key)\\n\\n    topology = []\\n    degree = {k: len(v) for k, v in graph.items()}\\n    ready_to_visit = {n for n, d in degree.items() if not d}\\n    need_to_visit = OrderedDict((i, None) for i in graph.keys())\\n    while need_to_visit:\\n        # to keep stable, pick the first node ready to visit in the original order\\n        for node in need_to_visit:\\n            if node in ready_to_visit:\\n                break\\n        else:\\n            break\\n        del need_to_visit[node]\\n\\n        topology.append(node)\\n\\n        # decrease degree for nodes we\\'re going too\\n        for to_node in inverse_graph[node]:\\n            degree[to_node] -= 1\\n            if not degree[to_node]:  # if a node has no more incoming node it\\'s ready to visit\\n                ready_to_visit.add(to_node)\\n\\n    result = [n for n in topology if n in to_order]  # filter out missing nodes we extended\\n\\n    if len(result) < len(to_order):\\n        identify_cycle(graph)\\n        msg = \"could not order tox environments and failed to detect circle\"  # pragma: no cover\\n        raise ValueError(msg)  # pragma: no cover\\n    return result\\n\\n\\ndef identify_cycle(graph):\\n    path = OrderedDict()\\n    visited = set()\\n\\n    def visit(vertex):\\n        if vertex in visited:\\n            return None\\n        visited.add(vertex)\\n        path[vertex] = None\\n        for neighbour in graph.get(vertex, ()):\\n            if neighbour in path or visit(neighbour):\\n                return path\\n        del path[vertex]\\n        return None\\n\\n    for node in graph:\\n        result = visit(node)\\n        if result is not None:\\n            raise ValueError(\"{}\".format(\" | \".join(result.keys())))\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'\"\"\"holds locking functionality that works across processes\"\"\"\\nfrom __future__ import absolute_import, unicode_literals\\n\\nfrom contextlib import contextmanager\\n\\nimport py\\nfrom filelock import FileLock, Timeout\\n\\nfrom tox.reporter import verbosity1\\n\\n\\n@contextmanager\\ndef hold_lock(lock_file, reporter=verbosity1):\\n    py.path.local(lock_file.dirname).ensure(dir=1)\\n    lock = FileLock(str(lock_file))\\n    try:\\n        try:\\n            lock.acquire(0.0001)\\n        except Timeout:\\n            reporter(\"lock file {} present, will block until released\".format(lock_file))\\n            lock.acquire()\\n        yield\\n    finally:\\n        lock.release(force=True)\\n\\n\\ndef get_unique_file(path, prefix, suffix):\\n    \"\"\"get a unique file in a folder having a given prefix and suffix,\\n    with unique number in between\"\"\"\\n    lock_file = path.join(\".lock\")\\n    prefix = \"{}-\".format(prefix)\\n    with hold_lock(lock_file):\\n        max_value = -1\\n        for candidate in path.listdir(\"{}*{}\".format(prefix, suffix)):\\n            try:\\n                max_value = max(max_value, int(candidate.basename[len(prefix) : -len(suffix)]))\\n            except ValueError:\\n                continue\\n        winner = path.join(\"{}{}{}\".format(prefix, max_value + 1, suffix))\\n        winner.ensure(dir=0)\\n        return winner\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'import inspect\\nimport os\\n\\nimport tox\\n\\nMAIN_FILE = os.path.join(os.path.dirname(inspect.getfile(tox)), \"__main__.py\")\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'import shutil\\n\\nfrom tox import reporter\\n\\n\\ndef ensure_empty_dir(path):\\n    if path.check():\\n        reporter.info(\"  removing {}\".format(path))\\n        shutil.rmtree(str(path), ignore_errors=True)\\n        path.ensure(dir=1)\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'# -*- coding: utf-8 -*-\\n\"\"\"A minimal non-colored version of https://pypi.org/project/halo, to track list progress\"\"\"\\nfrom __future__ import absolute_import, unicode_literals\\n\\nimport os\\nimport sys\\nimport threading\\nfrom collections import OrderedDict, namedtuple\\nfrom datetime import datetime\\n\\nimport py\\n\\nthreads = []\\n\\nif os.name == \"nt\":\\n    import ctypes\\n\\n    class _CursorInfo(ctypes.Structure):\\n        _fields_ = [(\"size\", ctypes.c_int), (\"visible\", ctypes.c_byte)]\\n\\n\\n_BaseMessage = namedtuple(\"_BaseMessage\", [\"unicode_msg\", \"ascii_msg\"])\\n\\n\\nclass SpinnerMessage(_BaseMessage):\\n    def for_file(self, file):\\n        try:\\n            self.unicode_msg.encode(file.encoding)\\n        except (AttributeError, TypeError, UnicodeEncodeError):\\n            return self.ascii_msg\\n        else:\\n            return self.unicode_msg\\n\\n\\nclass Spinner(object):\\n    CLEAR_LINE = \"\\\\033[K\"\\n    max_width = 120\\n    FRAMES = SpinnerMessage(\"\\xe2\\xa0\\x8b\\xe2\\xa0\\x99\\xe2\\xa0\\xb9\\xe2\\xa0\\xb8\\xe2\\xa0\\xbc\\xe2\\xa0\\xb4\\xe2\\xa0\\xa6\\xe2\\xa0\\xa7\\xe2\\xa0\\x87\\xe2\\xa0\\x8f\", \"|-+x*\")\\n    OK_FLAG = SpinnerMessage(\"\\xe2\\x9c\\x94 OK\", \"[ OK ]\")\\n    FAIL_FLAG = SpinnerMessage(\"\\xe2\\x9c\\x96 FAIL\", \"[FAIL]\")\\n    SKIP_FLAG = SpinnerMessage(\"\\xe2\\x9a\\xa0 SKIP\", \"[SKIP]\")\\n\\n    def __init__(self, enabled=True, refresh_rate=0.1):\\n        self.refresh_rate = refresh_rate\\n        self.enabled = enabled\\n        self._file = sys.stdout\\n        self.frames = self.FRAMES.for_file(self._file)\\n        self.stream = py.io.TerminalWriter(file=self._file)\\n        self._envs = OrderedDict()\\n        self._frame_index = 0\\n\\n    def clear(self):\\n        if self.enabled:\\n            self.stream.write(\"\\\\r\")\\n            self.stream.write(self.CLEAR_LINE)\\n\\n    def render(self):\\n        while True:\\n            self._stop_spinner.wait(self.refresh_rate)\\n            if self._stop_spinner.is_set():\\n                break\\n            self.render_frame()\\n        return self\\n\\n    def render_frame(self):\\n        if self.enabled:\\n            self.clear()\\n            self.stream.write(\"\\\\r{}\".format(self.frame()))\\n\\n    def frame(self):\\n        frame = self.frames[self._frame_index]\\n        self._frame_index += 1\\n        self._frame_index = self._frame_index % len(self.frames)\\n        text_frame = \"[{}] {}\".format(len(self._envs), \" | \".join(self._envs))\\n        if len(text_frame) > self.max_width - 1:\\n            text_frame = \"{}...\".format(text_frame[: self.max_width - 1 - 3])\\n        return \"{} {}\".format(*[(frame, text_frame)][0])\\n\\n    def __enter__(self):\\n        if self.enabled:\\n            self.disable_cursor()\\n        self.render_frame()\\n        self._stop_spinner = threading.Event()\\n        self._spinner_thread = threading.Thread(target=self.render)\\n        self._spinner_thread.daemon = True\\n        self._spinner_thread.start()\\n        return self\\n\\n    def __exit__(self, exc_type, exc_val, exc_tb):\\n        if not self._stop_spinner.is_set():\\n            if self._spinner_thread:\\n                self._stop_spinner.set()\\n                self._spinner_thread.join()\\n\\n            self._frame_index = 0\\n            if self.enabled:\\n                self.clear()\\n                self.enable_cursor()\\n\\n        return self\\n\\n    def add(self, name):\\n        self._envs[name] = datetime.now()\\n\\n    def succeed(self, key):\\n        self.finalize(key, self.OK_FLAG.for_file(self._file), green=True)\\n\\n    def fail(self, key):\\n        self.finalize(key, self.FAIL_FLAG.for_file(self._file), red=True)\\n\\n    def skip(self, key):\\n        self.finalize(key, self.SKIP_FLAG.for_file(self._file), white=True)\\n\\n    def finalize(self, key, status, **kwargs):\\n        start_at = self._envs[key]\\n        del self._envs[key]\\n        if self.enabled:\\n            self.clear()\\n        self.stream.write(\\n            \"{} {} in {}{}\".format(\\n                status,\\n                key,\\n                td_human_readable(datetime.now() - start_at),\\n                os.linesep,\\n            ),\\n            **kwargs\\n        )\\n        if not self._envs:\\n            self.__exit__(None, None, None)\\n\\n    def disable_cursor(self):\\n        if self._file.isatty():\\n            if os.name == \"nt\":\\n                ci = _CursorInfo()\\n                handle = ctypes.windll.kernel32.GetStdHandle(-11)\\n                ctypes.windll.kernel32.GetConsoleCursorInfo(handle, ctypes.byref(ci))\\n                ci.visible = False\\n                ctypes.windll.kernel32.SetConsoleCursorInfo(handle, ctypes.byref(ci))\\n            elif os.name == \"posix\":\\n                self.stream.write(\"\\\\033[?25l\")\\n\\n    def enable_cursor(self):\\n        if self._file.isatty():\\n            if os.name == \"nt\":\\n                ci = _CursorInfo()\\n                handle = ctypes.windll.kernel32.GetStdHandle(-11)\\n                ctypes.windll.kernel32.GetConsoleCursorInfo(handle, ctypes.byref(ci))\\n                ci.visible = True\\n                ctypes.windll.kernel32.SetConsoleCursorInfo(handle, ctypes.byref(ci))\\n            elif os.name == \"posix\":\\n                self.stream.write(\"\\\\033[?25h\")\\n\\n\\ndef td_human_readable(delta):\\n    seconds = int(delta.total_seconds())\\n    periods = [\\n        (\"year\", 60 * 60 * 24 * 365),\\n        (\"month\", 60 * 60 * 24 * 30),\\n        (\"day\", 60 * 60 * 24),\\n        (\"hour\", 60 * 60),\\n        (\"minute\", 60),\\n        (\"second\", 1),\\n    ]\\n\\n    texts = []\\n    for period_name, period_seconds in periods:\\n        if seconds > period_seconds or period_seconds == 1:\\n            period_value, seconds = divmod(seconds, period_seconds)\\n            if period_name == \"second\":\\n                ms = delta.total_seconds() - int(delta.total_seconds())\\n                period_value = round(period_value + ms, 3)\\n            has_s = \"s\" if period_value != 1 else \"\"\\n            texts.append(\"{} {}{}\".format(period_value, period_name, has_s))\\n    return \", \".join(texts)\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'import sys\\nimport threading\\nfrom contextlib import contextmanager\\nfrom tempfile import TemporaryFile\\n\\nif sys.version_info >= (3, 8):\\n    from importlib import metadata as importlib_metadata  # noqa\\nelse:\\n    import importlib_metadata  # noqa\\n\\n\\ndef is_main_thread():\\n    \"\"\"returns true if we are within the main thread\"\"\"\\n    cur_thread = threading.current_thread()\\n    if sys.version_info >= (3, 4):\\n        return cur_thread is threading.main_thread()\\n    else:\\n        # noinspection PyUnresolvedReferences\\n        return isinstance(cur_thread, threading._MainThread)\\n\\n\\n# noinspection PyPep8Naming\\n@contextmanager\\ndef suppress_output():\\n    \"\"\"suppress both stdout and stderr outputs\"\"\"\\n    if sys.version_info >= (3, 5):\\n        from contextlib import redirect_stderr, redirect_stdout\\n    else:\\n\\n        class _RedirectStream(object):\\n\\n            _stream = None\\n\\n            def __init__(self, new_target):\\n                self._new_target = new_target\\n                self._old_targets = []\\n\\n            def __enter__(self):\\n                self._old_targets.append(getattr(sys, self._stream))\\n                setattr(sys, self._stream, self._new_target)\\n                return self._new_target\\n\\n            def __exit__(self, exctype, excinst, exctb):\\n                setattr(sys, self._stream, self._old_targets.pop())\\n\\n        class redirect_stdout(_RedirectStream):\\n            _stream = \"stdout\"\\n\\n        class redirect_stderr(_RedirectStream):\\n            _stream = \"stderr\"\\n\\n    with TemporaryFile(\"wt\") as file:\\n        with redirect_stdout(file):\\n            with redirect_stderr(file):\\n                yield\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'import codecs\\nimport json\\nimport os\\nimport pipes\\nimport re\\nimport sys\\nfrom itertools import chain\\n\\nimport py\\n\\nimport tox\\nfrom tox import reporter\\nfrom tox.action import Action\\nfrom tox.config.parallel import ENV_VAR_KEY_PRIVATE as PARALLEL_ENV_VAR_KEY_PRIVATE\\nfrom tox.constants import INFO, PARALLEL_RESULT_JSON_PREFIX, PARALLEL_RESULT_JSON_SUFFIX\\nfrom tox.package.local import resolve_package\\nfrom tox.util.lock import get_unique_file\\nfrom tox.util.path import ensure_empty_dir\\n\\nfrom .config import DepConfig\\n\\n#: maximum parsed shebang interpreter length (see: prepend_shebang_interpreter)\\nMAXINTERP = 2048\\n\\n\\nclass CreationConfig:\\n    def __init__(\\n        self,\\n        base_resolved_python_sha256,\\n        base_resolved_python_path,\\n        tox_version,\\n        sitepackages,\\n        usedevelop,\\n        deps,\\n        alwayscopy,\\n    ):\\n        self.base_resolved_python_sha256 = base_resolved_python_sha256\\n        self.base_resolved_python_path = base_resolved_python_path\\n        self.tox_version = tox_version\\n        self.sitepackages = sitepackages\\n        self.usedevelop = usedevelop\\n        self.alwayscopy = alwayscopy\\n        self.deps = deps\\n\\n    def writeconfig(self, path):\\n        lines = [\\n            \"{} {}\".format(self.base_resolved_python_sha256, self.base_resolved_python_path),\\n            \"{} {:d} {:d} {:d}\".format(\\n                self.tox_version,\\n                self.sitepackages,\\n                self.usedevelop,\\n                self.alwayscopy,\\n            ),\\n        ]\\n        for dep in self.deps:\\n            lines.append(\"{} {}\".format(*dep))\\n        content = \"\\\\n\".join(lines)\\n        path.ensure()\\n        path.write(content)\\n        return content\\n\\n    @classmethod\\n    def readconfig(cls, path):\\n        try:\\n            lines = path.readlines(cr=0)\\n            base_resolved_python_info = lines.pop(0).split(None, 1)\\n            tox_version, sitepackages, usedevelop, alwayscopy = lines.pop(0).split(None, 4)\\n            sitepackages = bool(int(sitepackages))\\n            usedevelop = bool(int(usedevelop))\\n            alwayscopy = bool(int(alwayscopy))\\n            deps = []\\n            for line in lines:\\n                base_resolved_python_sha256, depstring = line.split(None, 1)\\n                deps.append((base_resolved_python_sha256, depstring))\\n            base_resolved_python_sha256, base_resolved_python_path = base_resolved_python_info\\n            return CreationConfig(\\n                base_resolved_python_sha256,\\n                base_resolved_python_path,\\n                tox_version,\\n                sitepackages,\\n                usedevelop,\\n                deps,\\n                alwayscopy,\\n            )\\n        except Exception:\\n            return None\\n\\n    def matches_with_reason(self, other, deps_matches_subset=False):\\n        for attr in (\\n            \"base_resolved_python_sha256\",\\n            \"base_resolved_python_path\",\\n            \"tox_version\",\\n            \"sitepackages\",\\n            \"usedevelop\",\\n            \"alwayscopy\",\\n        ):\\n            left = getattr(self, attr)\\n            right = getattr(other, attr)\\n            if left != right:\\n                return False, \"attr {} {!r}!={!r}\".format(attr, left, right)\\n        self_deps = set(self.deps)\\n        other_deps = set(other.deps)\\n        if self_deps != other_deps:\\n            if deps_matches_subset:\\n                diff = other_deps - self_deps\\n                if diff:\\n                    return False, \"missing in previous {!r}\".format(diff)\\n            else:\\n                return False, \"{!r}!={!r}\".format(self_deps, other_deps)\\n        return True, None\\n\\n    def matches(self, other, deps_matches_subset=False):\\n        outcome, _ = self.matches_with_reason(other, deps_matches_subset)\\n        return outcome\\n\\n\\nclass VirtualEnv(object):\\n    def __init__(self, envconfig=None, popen=None, env_log=None):\\n        self.envconfig = envconfig\\n        self.popen = popen\\n        self._actions = []\\n        self.env_log = env_log\\n        self._result_json_path = None\\n\\n    def new_action(self, msg, *args):\\n        config = self.envconfig.config\\n        command_log = self.env_log.get_commandlog(\\n            \"test\" if msg in (\"run-test\", \"run-test-pre\", \"run-test-post\") else \"setup\",\\n        )\\n        return Action(\\n            self.name,\\n            msg,\\n            args,\\n            self.envconfig.envlogdir,\\n            config.option.resultjson,\\n            command_log,\\n            self.popen,\\n            self.envconfig.envpython,\\n            self.envconfig.suicide_timeout,\\n            self.envconfig.interrupt_timeout,\\n            self.envconfig.terminate_timeout,\\n        )\\n\\n    def get_result_json_path(self):\\n        if self._result_json_path is None:\\n            if self.envconfig.config.option.resultjson:\\n                self._result_json_path = get_unique_file(\\n                    self.path,\\n                    PARALLEL_RESULT_JSON_PREFIX,\\n                    PARALLEL_RESULT_JSON_SUFFIX,\\n                )\\n        return self._result_json_path\\n\\n    @property\\n    def hook(self):\\n        return self.envconfig.config.pluginmanager.hook\\n\\n    @property\\n    def path(self):\\n        \"\"\"Path to environment base dir.\"\"\"\\n        return self.envconfig.envdir\\n\\n    @property\\n    def path_config(self):\\n        return self.path.join(\".tox-config1\")\\n\\n    @property\\n    def name(self):\\n        \"\"\"test environment name.\"\"\"\\n        return self.envconfig.envname\\n\\n    def __repr__(self):\\n        return \"<VirtualEnv at {!r}>\".format(self.path)\\n\\n    def getcommandpath(self, name, venv=True, cwd=None):\\n        \"\"\"Return absolute path (str or localpath) for specified command name.\\n\\n        - If it\\'s a local path we will rewrite it as as a relative path.\\n        - If venv is True we will check if the command is coming from the venv\\n          or is allowed to come from external.\\n        \"\"\"\\n        name = str(name)\\n        if os.path.isabs(name):\\n            return name\\n        if os.path.split(name)[0] == \".\":\\n            path = cwd.join(name)\\n            if path.check():\\n                return str(path)\\n\\n        if venv:\\n            path = self._venv_lookup_and_check_external_allowlist(name)\\n        else:\\n            path = self._normal_lookup(name)\\n\\n        if path is None:\\n            raise tox.exception.InvocationError(\\n                \"could not find executable {}\".format(pipes.quote(name)),\\n            )\\n\\n        return str(path)  # will not be rewritten for reporting\\n\\n    def _venv_lookup_and_check_external_allowlist(self, name):\\n        path = self._venv_lookup(name)\\n        if path is None:\\n            path = self._normal_lookup(name)\\n            if path is not None:\\n                self._check_external_allowed_and_warn(path)\\n        return path\\n\\n    def _venv_lookup(self, name):\\n        return py.path.local.sysfind(name, paths=[self.envconfig.envbindir])\\n\\n    def _normal_lookup(self, name):\\n        return py.path.local.sysfind(name)\\n\\n    def _check_external_allowed_and_warn(self, path):\\n        if not self.is_allowed_external(path):\\n            reporter.warning(\\n                \"test command found but not installed in testenv\\\\n\"\\n                \"  cmd: {}\\\\n\"\\n                \"  env: {}\\\\n\"\\n                \"Maybe you forgot to specify a dependency? \"\\n                \"See also the allowlist_externals envconfig setting.\\\\n\\\\n\"\\n                \"DEPRECATION WARNING: this will be an error in tox 4 and above!\".format(\\n                    path,\\n                    self.envconfig.envdir,\\n                ),\\n            )\\n\\n    def is_allowed_external(self, p):\\n        tryadd = [\"\"]\\n        if tox.INFO.IS_WIN:\\n            tryadd += [os.path.normcase(x) for x in os.environ[\"PATHEXT\"].split(os.pathsep)]\\n            p = py.path.local(os.path.normcase(str(p)))\\n\\n        if self.envconfig.allowlist_externals and self.envconfig.whitelist_externals:\\n            raise tox.exception.ConfigError(\\n                \"Either whitelist_externals or allowlist_externals might be specified, not both\",\\n            )\\n\\n        allowed_externals = (\\n            self.envconfig.whitelist_externals or self.envconfig.allowlist_externals\\n        )\\n        for x in allowed_externals:\\n            for add in tryadd:\\n                if p.fnmatch(x + add):\\n                    return True\\n        return False\\n\\n    def update(self, action):\\n        \"\"\"return status string for updating actual venv to match configuration.\\n        if status string is empty, all is ok.\\n        \"\"\"\\n        rconfig = CreationConfig.readconfig(self.path_config)\\n        if self.envconfig.recreate:\\n            reason = \"-r flag\"\\n        else:\\n            if rconfig is None:\\n                reason = \"no previous config {}\".format(self.path_config)\\n            else:\\n                live_config = self._getliveconfig()\\n                deps_subset_match = getattr(self.envconfig, \"deps_matches_subset\", False)\\n                outcome, reason = rconfig.matches_with_reason(live_config, deps_subset_match)\\n        if reason is None:\\n            action.info(\"reusing\", self.envconfig.envdir)\\n            return\\n        action.info(\"cannot reuse\", reason)\\n        if rconfig is None:\\n            action.setactivity(\"create\", self.envconfig.envdir)\\n        else:\\n            action.setactivity(\"recreate\", self.envconfig.envdir)\\n        try:\\n            self.hook.tox_testenv_create(action=action, venv=self)\\n            self.just_created = True\\n        except tox.exception.UnsupportedInterpreter as exception:\\n            return exception\\n        try:\\n            self.hook.tox_testenv_install_deps(action=action, venv=self)\\n        except tox.exception.InvocationError as exception:\\n            return \"could not install deps {}; v = {!r}\".format(self.envconfig.deps, exception)\\n\\n    def _getliveconfig(self):\\n        base_resolved_python_path = self.envconfig.python_info.executable\\n        version = tox.__version__\\n        sitepackages = self.envconfig.sitepackages\\n        develop = self.envconfig.usedevelop\\n        alwayscopy = self.envconfig.alwayscopy\\n        deps = []\\n        for dep in self.get_resolved_dependencies():\\n            dep_name_sha256 = getdigest(dep.name)\\n            deps.append((dep_name_sha256, dep.name))\\n        base_resolved_python_sha256 = getdigest(base_resolved_python_path)\\n        return CreationConfig(\\n            base_resolved_python_sha256,\\n            base_resolved_python_path,\\n            version,\\n            sitepackages,\\n            develop,\\n            deps,\\n            alwayscopy,\\n        )\\n\\n    def get_resolved_dependencies(self):\\n        dependencies = []\\n        for dependency in self.envconfig.deps:\\n            if dependency.indexserver is None:\\n                package = resolve_package(package_spec=dependency.name)\\n                if package != dependency.name:\\n                    dependency = dependency.__class__(package)\\n            dependencies.append(dependency)\\n        return dependencies\\n\\n    def getsupportedinterpreter(self):\\n        return self.envconfig.getsupportedinterpreter()\\n\\n    def matching_platform(self):\\n        return re.match(self.envconfig.platform, sys.platform)\\n\\n    def finish(self):\\n        previous_config = CreationConfig.readconfig(self.path_config)\\n        live_config = self._getliveconfig()\\n        if previous_config is None or not previous_config.matches(live_config):\\n            content = live_config.writeconfig(self.path_config)\\n            reporter.verbosity1(\"write config to {} as {!r}\".format(self.path_config, content))\\n\\n    def _needs_reinstall(self, setupdir, action):\\n        setup_py = setupdir.join(\"setup.py\")\\n\\n        if not setup_py.exists():\\n            return False\\n\\n        setup_cfg = setupdir.join(\"setup.cfg\")\\n        args = [self.envconfig.envpython, str(setup_py), \"--name\"]\\n        env = self._get_os_environ()\\n        output = action.popen(\\n            args,\\n            cwd=setupdir,\\n            redirect=False,\\n            returnout=True,\\n            env=env,\\n            capture_err=False,\\n        )\\n        name = next(\\n            (i for i in output.split(\"\\\\n\") if i and not i.startswith(\"pydev debugger:\")),\\n            \"\",\\n        )\\n        args = [\\n            self.envconfig.envpython,\\n            \"-c\",\\n            \"import sys;  import json; print(json.dumps(sys.path))\",\\n        ]\\n        out = action.popen(args, redirect=False, returnout=True, env=env)\\n        try:\\n            sys_path = json.loads(out)\\n        except ValueError:\\n            sys_path = []\\n        egg_info_fname = \".\".join((name.replace(\"-\", \"_\"), \"egg-info\"))\\n        for d in reversed(sys_path):\\n            egg_info = py.path.local(d).join(egg_info_fname)\\n            if egg_info.check():\\n                break\\n        else:\\n            return True\\n        needs_reinstall = any(\\n            conf_file.check() and conf_file.mtime() > egg_info.mtime()\\n            for conf_file in (setup_py, setup_cfg)\\n        )\\n\\n        # Ensure the modification time of the egg-info folder is updated so we\\n        # won\\'t need to do this again.\\n        # TODO(stephenfin): Remove once the minimum version of setuptools is\\n        # high enough to include https://github.com/pypa/setuptools/pull/1427/\\n        if needs_reinstall:\\n            egg_info.setmtime()\\n\\n        return needs_reinstall\\n\\n    def install_pkg(self, dir, action, name, is_develop=False):\\n        assert action is not None\\n\\n        if getattr(self, \"just_created\", False):\\n            action.setactivity(name, dir)\\n            self.finish()\\n            pip_flags = [\"--exists-action\", \"w\"]\\n        else:\\n            if is_develop and not self._needs_reinstall(dir, action):\\n                action.setactivity(\"{}-noop\".format(name), dir)\\n                return\\n            action.setactivity(\"{}-nodeps\".format(name), dir)\\n            pip_flags = [\"--no-deps\"] + ([] if is_develop else [\"-U\"])\\n        pip_flags.extend([\"-v\"] * min(3, reporter.verbosity() - 2))\\n        if self.envconfig.extras:\\n            dir += \"[{}]\".format(\",\".join(self.envconfig.extras))\\n        target = [dir]\\n        if is_develop:\\n            target.insert(0, \"-e\")\\n        self._install(target, extraopts=pip_flags, action=action)\\n\\n    def developpkg(self, setupdir, action):\\n        self.install_pkg(setupdir, action, \"develop-inst\", is_develop=True)\\n\\n    def installpkg(self, sdistpath, action):\\n        self.install_pkg(sdistpath, action, \"inst\")\\n\\n    def _installopts(self, indexserver):\\n        options = []\\n        if indexserver:\\n            options += [\"-i\", indexserver]\\n        if self.envconfig.pip_pre:\\n            options.append(\"--pre\")\\n        return options\\n\\n    def run_install_command(self, packages, action, options=()):\\n        def expand(val):\\n            # expand an install command\\n            if val == \"{packages}\":\\n                for package in packages:\\n                    yield package\\n            elif val == \"{opts}\":\\n                for opt in options:\\n                    yield opt\\n            else:\\n                yield val\\n\\n        cmd = list(chain.from_iterable(expand(val) for val in self.envconfig.install_command))\\n\\n        env = self._get_os_environ()\\n        self.ensure_pip_os_environ_ok(env)\\n\\n        old_stdout = sys.stdout\\n        sys.stdout = codecs.getwriter(\"utf8\")(sys.stdout)\\n        try:\\n            self._pcall(\\n                cmd,\\n                cwd=self.envconfig.config.toxinidir,\\n                action=action,\\n                redirect=reporter.verbosity() < reporter.Verbosity.DEBUG,\\n                env=env,\\n            )\\n        except KeyboardInterrupt:\\n            self.status = \"keyboardinterrupt\"\\n            raise\\n        finally:\\n            sys.stdout = old_stdout\\n\\n    def ensure_pip_os_environ_ok(self, env):\\n        for key in (\"PIP_RESPECT_VIRTUALENV\", \"PIP_REQUIRE_VIRTUALENV\", \"__PYVENV_LAUNCHER__\"):\\n            env.pop(key, None)\\n        if all(\"PYTHONPATH\" not in i for i in (self.envconfig.passenv, self.envconfig.setenv)):\\n            # If PYTHONPATH not explicitly asked for, remove it.\\n            if \"PYTHONPATH\" in env:\\n                if sys.version_info < (3, 4) or bool(env[\"PYTHONPATH\"]):\\n                    # https://docs.python.org/3/whatsnew/3.4.html#changes-in-python-command-behavior\\n                    # In a posix shell, setting the PATH environment variable to an empty value is\\n                    # equivalent to not setting it at all.\\n                    reporter.warning(\\n                        \"Discarding $PYTHONPATH from environment, to override \"\\n                        \"specify PYTHONPATH in \\'passenv\\' in your configuration.\",\\n                    )\\n                env.pop(\"PYTHONPATH\")\\n\\n        # installing packages at user level may mean we\\'re not installing inside the venv\\n        env[\"PIP_USER\"] = \"0\"\\n\\n        # installing without dependencies may lead to broken packages\\n        env[\"PIP_NO_DEPS\"] = \"0\"\\n\\n    def _install(self, deps, extraopts=None, action=None):\\n        if not deps:\\n            return\\n        d = {}\\n        ixservers = []\\n        for dep in deps:\\n            if isinstance(dep, (str, py.path.local)):\\n                dep = DepConfig(str(dep), None)\\n            assert isinstance(dep, DepConfig), dep\\n            if dep.indexserver is None:\\n                ixserver = self.envconfig.config.indexserver[\"default\"]\\n            else:\\n                ixserver = dep.indexserver\\n            d.setdefault(ixserver, []).append(dep.name)\\n            if ixserver not in ixservers:\\n                ixservers.append(ixserver)\\n            assert ixserver.url is None or isinstance(ixserver.url, str)\\n\\n        for ixserver in ixservers:\\n            packages = d[ixserver]\\n            options = self._installopts(ixserver.url)\\n            if extraopts:\\n                options.extend(extraopts)\\n            self.run_install_command(packages=packages, options=options, action=action)\\n\\n    def _get_os_environ(self, is_test_command=False):\\n        if is_test_command:\\n            # for executing tests we construct a clean environment\\n            env = {}\\n            for env_key in self.envconfig.passenv:\\n                if env_key in os.environ:\\n                    env[env_key] = os.environ[env_key]\\n        else:\\n            # for executing non-test commands we use the full\\n            # invocation environment\\n            env = os.environ.copy()\\n\\n        # in any case we honor per-testenv setenv configuration\\n        env.update(self.envconfig.setenv.export())\\n\\n        env[\"VIRTUAL_ENV\"] = str(self.path)\\n        return env\\n\\n    def test(\\n        self,\\n        redirect=False,\\n        name=\"run-test\",\\n        commands=None,\\n        ignore_outcome=None,\\n        ignore_errors=None,\\n        display_hash_seed=False,\\n    ):\\n        if commands is None:\\n            commands = self.envconfig.commands\\n        if ignore_outcome is None:\\n            ignore_outcome = self.envconfig.ignore_outcome\\n        if ignore_errors is None:\\n            ignore_errors = self.envconfig.ignore_errors\\n        with self.new_action(name) as action:\\n            cwd = self.envconfig.changedir\\n            if display_hash_seed:\\n                env = self._get_os_environ(is_test_command=True)\\n                # Display PYTHONHASHSEED to assist with reproducibility.\\n                action.setactivity(name, \"PYTHONHASHSEED={!r}\".format(env.get(\"PYTHONHASHSEED\")))\\n            for i, argv in enumerate(filter(bool, commands)):\\n                # have to make strings as _pcall changes argv[0] to a local()\\n                # happens if the same environment is invoked twice\\n                message = \"commands[{}] | {}\".format(\\n                    i,\\n                    \" \".join(pipes.quote(str(x)) for x in argv),\\n                )\\n                action.setactivity(name, message)\\n                # check to see if we need to ignore the return code\\n                # if so, we need to alter the command line arguments\\n                if argv[0].startswith(\"-\"):\\n                    ignore_ret = True\\n                    if argv[0] == \"-\":\\n                        del argv[0]\\n                    else:\\n                        argv[0] = argv[0].lstrip(\"-\")\\n                else:\\n                    ignore_ret = False\\n\\n                try:\\n                    self._pcall(\\n                        argv,\\n                        cwd=cwd,\\n                        action=action,\\n                        redirect=redirect,\\n                        ignore_ret=ignore_ret,\\n                        is_test_command=True,\\n                    )\\n                except tox.exception.InvocationError as err:\\n                    if ignore_outcome:\\n                        msg = \"command failed but result from testenv is ignored\\\\ncmd:\"\\n                        reporter.warning(\"{} {}\".format(msg, err))\\n                        self.status = \"ignored failed command\"\\n                        continue  # keep processing commands\\n\\n                    reporter.error(str(err))\\n                    self.status = \"commands failed\"\\n                    if not ignore_errors:\\n                        break  # Don\\'t process remaining commands\\n                except KeyboardInterrupt:\\n                    self.status = \"keyboardinterrupt\"\\n                    raise\\n\\n    def _pcall(\\n        self,\\n        args,\\n        cwd,\\n        venv=True,\\n        is_test_command=False,\\n        action=None,\\n        redirect=True,\\n        ignore_ret=False,\\n        returnout=False,\\n        env=None,\\n    ):\\n        if env is None:\\n            env = self._get_os_environ(is_test_command=is_test_command)\\n\\n        # construct environment variables\\n        env.pop(\"VIRTUALENV_PYTHON\", None)\\n        bin_dir = str(self.envconfig.envbindir)\\n        path = self.envconfig.setenv.get(\"PATH\") or os.environ[\"PATH\"]\\n        env[\"PATH\"] = os.pathsep.join([bin_dir, path])\\n        reporter.verbosity2(\"setting PATH={}\".format(env[\"PATH\"]))\\n\\n        # get command\\n        args[0] = self.getcommandpath(args[0], venv, cwd)\\n        if sys.platform != \"win32\" and \"TOX_LIMITED_SHEBANG\" in os.environ:\\n            args = prepend_shebang_interpreter(args)\\n\\n        cwd.ensure(dir=1)  # ensure the cwd exists\\n        return action.popen(\\n            args,\\n            cwd=cwd,\\n            env=env,\\n            redirect=redirect,\\n            ignore_ret=ignore_ret,\\n            returnout=returnout,\\n            report_fail=not is_test_command,\\n        )\\n\\n    def setupenv(self):\\n        if self.envconfig._missing_subs:\\n            self.status = (\\n                \"unresolvable substitution(s):\\\\n    {}\\\\n\"\\n                \"Environment variables are missing or defined recursively.\".format(\\n                    \"\\\\n    \".join(\\n                        \"{}: \\'{}\\'\".format(section_key, exc.name)\\n                        for section_key, exc in sorted(self.envconfig._missing_subs.items())\\n                    ),\\n                )\\n            )\\n            return\\n        if not self.matching_platform():\\n            self.status = \"platform mismatch\"\\n            return  # we simply omit non-matching platforms\\n        with self.new_action(\"getenv\", self.envconfig.envdir) as action:\\n            self.status = 0\\n            default_ret_code = 1\\n            envlog = self.env_log\\n            try:\\n                status = self.update(action=action)\\n            except IOError as e:\\n                if e.args[0] != 2:\\n                    raise\\n                status = (\\n                    \"Error creating virtualenv. Note that spaces in paths are \"\\n                    \"not supported by virtualenv. Error details: {!r}\".format(e)\\n                )\\n            except tox.exception.InvocationError as e:\\n                status = e\\n            except tox.exception.InterpreterNotFound as e:\\n                status = e\\n                if self.envconfig.config.option.skip_missing_interpreters == \"true\":\\n                    default_ret_code = 0\\n            except KeyboardInterrupt:\\n                self.status = \"keyboardinterrupt\"\\n                raise\\n            if status:\\n                str_status = str(status)\\n                command_log = envlog.get_commandlog(\"setup\")\\n                command_log.add_command([\"setup virtualenv\"], str_status, default_ret_code)\\n                self.status = status\\n                if default_ret_code == 0:\\n                    reporter.skip(str_status)\\n                else:\\n                    reporter.error(str_status)\\n                return False\\n            command_path = self.getcommandpath(\"python\")\\n            envlog.set_python_info(command_path)\\n            return True\\n\\n    def finishvenv(self):\\n        with self.new_action(\"finishvenv\"):\\n            self.finish()\\n            return True\\n\\n\\ndef getdigest(path):\\n    path = py.path.local(path)\\n    if not path.check(file=1):\\n        return \"0\" * 32\\n    return path.computehash(\"sha256\")\\n\\n\\ndef prepend_shebang_interpreter(args):\\n    # prepend interpreter directive (if any) to argument list\\n    #\\n    # When preparing virtual environments in a file container which has large\\n    # length, the system might not be able to invoke shebang scripts which\\n    # define interpreters beyond system limits (e.g. Linux has a limit of 128;\\n    # BINPRM_BUF_SIZE). This method can be used to check if the executable is\\n    # a script containing a shebang line. If so, extract the interpreter (and\\n    # possible optional argument) and prepend the values to the provided\\n    # argument list. tox will only attempt to read an interpreter directive of\\n    # a maximum size of 2048 bytes to limit excessive reading and support UNIX\\n    # systems which may support a longer interpret length.\\n    try:\\n        with open(args[0], \"rb\") as f:\\n            if f.read(1) == b\"#\" and f.read(1) == b\"!\":\\n                interp = f.readline(MAXINTERP + 1).rstrip().decode(\"UTF-8\")\\n                if len(interp) > MAXINTERP:  # avoid a truncated interpreter\\n                    return args\\n                interp_args = interp.split(None, 1)[:2]\\n                return interp_args + args\\n    except (UnicodeDecodeError, IOError):\\n        pass\\n    return args\\n\\n\\n_SKIP_VENV_CREATION = os.environ.get(\"_TOX_SKIP_ENV_CREATION_TEST\", False) == \"1\"\\n\\n\\n@tox.hookimpl\\ndef tox_testenv_create(venv, action):\\n    config_interpreter = venv.getsupportedinterpreter()\\n    args = [sys.executable, \"-m\", \"virtualenv\"]\\n    if venv.envconfig.sitepackages:\\n        args.append(\"--system-site-packages\")\\n    if venv.envconfig.alwayscopy:\\n        args.append(\"--always-copy\")\\n    if not venv.envconfig.download:\\n        args.append(\"--no-download\")\\n    else:\\n        args.append(\"--download\")\\n    # add interpreter explicitly, to prevent using default (virtualenv.ini)\\n    args.extend([\"--python\", str(config_interpreter)])\\n\\n    cleanup_for_venv(venv)\\n\\n    base_path = venv.path.dirpath()\\n    base_path.ensure(dir=1)\\n    args.append(venv.path.basename)\\n    if not _SKIP_VENV_CREATION:\\n        try:\\n            venv._pcall(\\n                args,\\n                venv=False,\\n                action=action,\\n                cwd=base_path,\\n                redirect=reporter.verbosity() < reporter.Verbosity.DEBUG,\\n            )\\n        except KeyboardInterrupt:\\n            venv.status = \"keyboardinterrupt\"\\n            raise\\n    return True  # Return non-None to indicate plugin has completed\\n\\n\\ndef cleanup_for_venv(venv):\\n    within_parallel = PARALLEL_ENV_VAR_KEY_PRIVATE in os.environ\\n    # if the directory exists and it doesn\\'t look like a virtualenv, produce\\n    # an error\\n    if venv.path.exists():\\n        dir_items = set(os.listdir(str(venv.path))) - {\".lock\", \"log\"}\\n        dir_items = {p for p in dir_items if not p.startswith(\".tox-\") or p == \".tox-config1\"}\\n    else:\\n        dir_items = set()\\n\\n    if not (\\n        # doesn\\'t exist => OK\\n        not venv.path.exists()\\n        # does exist, but it\\'s empty => OK\\n        or not dir_items\\n        # tox has marked this as an environment it has created in the past\\n        or \".tox-config1\" in dir_items\\n        # it exists and we\\'re on windows with Lib and Scripts => OK\\n        or (INFO.IS_WIN and dir_items > {\"Scripts\", \"Lib\"})\\n        # non-windows, with lib and bin => OK\\n        or dir_items > {\"bin\", \"lib\"}\\n        # pypy has a different lib folder => OK\\n        or dir_items > {\"bin\", \"lib_pypy\"}\\n    ):\\n        venv.status = \"error\"\\n        reporter.error(\\n            \"cowardly refusing to delete `envdir` (it does not look like a virtualenv): \"\\n            \"{}\".format(venv.path),\\n        )\\n        raise SystemExit(2)\\n\\n    if within_parallel:\\n        if venv.path.exists():\\n            # do not delete the log folder as that\\'s used by parent\\n            for content in venv.path.listdir():\\n                if not content.basename == \"log\":\\n                    content.remove(rec=1, ignore_errors=True)\\n    else:\\n        ensure_empty_dir(venv.path)\\n\\n\\n@tox.hookimpl\\ndef tox_testenv_install_deps(venv, action):\\n    deps = venv.get_resolved_dependencies()\\n    if deps:\\n        depinfo = \", \".join(map(str, deps))\\n        action.setactivity(\"installdeps\", depinfo)\\n        venv._install(deps, action=action)\\n    return True  # Return non-None to indicate plugin has completed\\n\\n\\n@tox.hookimpl\\ndef tox_runtest(venv, redirect):\\n    venv.test(redirect=redirect)\\n    return True  # Return non-None to indicate plugin has completed\\n\\n\\n@tox.hookimpl\\ndef tox_runtest_pre(venv):\\n    venv.status = 0\\n    ensure_empty_dir(venv.envconfig.envtmpdir)\\n    venv.envconfig.envtmpdir.ensure(dir=1)\\n    venv.test(\\n        name=\"run-test-pre\",\\n        commands=venv.envconfig.commands_pre,\\n        redirect=False,\\n        ignore_outcome=False,\\n        ignore_errors=False,\\n        display_hash_seed=True,\\n    )\\n\\n\\n@tox.hookimpl\\ndef tox_runtest_post(venv):\\n    venv.test(\\n        name=\"run-test-post\",\\n        commands=venv.envconfig.commands_post,\\n        redirect=False,\\n        ignore_outcome=False,\\n        ignore_errors=False,\\n    )\\n\\n\\n@tox.hookimpl\\ndef tox_runenvreport(venv, action):\\n    # write out version dependency information\\n    args = venv.envconfig.list_dependencies_command\\n    output = venv._pcall(args, cwd=venv.envconfig.config.toxinidir, action=action, returnout=True)\\n    # the output contains a mime-header, skip it\\n    output = output.split(\"\\\\n\\\\n\")[-1]\\n    packages = output.strip().split(\"\\\\n\")\\n    return packages  # Return non-None to indicate plugin has completed\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b\"# coding: utf-8\\nfrom __future__ import unicode_literals\\n\\n__version__ = '3.24.6.dev3+g86a0383c.d20220119'\\n\""}, "return_value": "'utf-8'"}]}, "read_python_source": {"line": 20, "args": [{"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/exception.py'"}, "return_value": "b'import os\\nimport pipes\\nimport signal\\n\\n\\ndef exit_code_str(exception_name, command, exit_code):\\n    \"\"\"String representation for an InvocationError, with exit code\\n\\n    NOTE: this might also be used by plugin tests (tox-venv at the time of writing),\\n    so some coordination is needed if this is ever moved or a different solution for this hack\\n    is found.\\n\\n    NOTE: this is a separate function because pytest-mock `spy` does not work on Exceptions\\n    We can use neither a class method nor a static because of https://bugs.python.org/issue23078.\\n    Even a normal method failed with \"TypeError: descriptor \\'__getattribute__\\' requires a\\n    \\'BaseException\\' object but received a \\'type\\'\".\\n    \"\"\"\\n    str_ = \"{} for command {}\".format(exception_name, command)\\n    if exit_code is not None:\\n        if exit_code < 0 or (os.name == \"posix\" and exit_code > 128):\\n            signals = {\\n                number: name for name, number in vars(signal).items() if name.startswith(\"SIG\")\\n            }\\n            if exit_code < 0:\\n                # Signal reported via subprocess.Popen.\\n                sig_name = signals.get(-exit_code)\\n                str_ += \" (exited with code {:d} ({}))\".format(exit_code, sig_name)\\n            else:\\n                str_ += \" (exited with code {:d})\".format(exit_code)\\n                number = exit_code - 128\\n                name = signals.get(number)\\n                if name:\\n                    str_ += (\\n                        \")\\\\nNote: this might indicate a fatal error signal \"\\n                        \"({:d} - 128 = {:d}: {})\".format(exit_code, number, name)\\n                    )\\n        str_ += \" (exited with code {:d})\".format(exit_code)\\n    return str_\\n\\n\\nclass Error(Exception):\\n    def __str__(self):\\n        return \"{}: {}\".format(self.__class__.__name__, self.args[0])\\n\\n\\nclass MissingSubstitution(Error):\\n    FLAG = \"TOX_MISSING_SUBSTITUTION\"\\n    \"\"\"placeholder for debugging configurations\"\"\"\\n\\n    def __init__(self, name):\\n        self.name = name\\n        super(Error, self).__init__(name)\\n\\n\\nclass ConfigError(Error):\\n    \"\"\"Error in tox configuration.\"\"\"\\n\\n\\nclass SubstitutionStackError(ConfigError, ValueError):\\n    \"\"\"Error in tox configuration recursive substitution.\"\"\"\\n\\n\\nclass UnsupportedInterpreter(Error):\\n    \"\"\"Signals an unsupported Interpreter.\"\"\"\\n\\n\\nclass InterpreterNotFound(Error):\\n    \"\"\"Signals that an interpreter could not be found.\"\"\"\\n\\n\\nclass InvocationError(Error):\\n    \"\"\"An error while invoking a script.\"\"\"\\n\\n    def __init__(self, command, exit_code=None, out=None):\\n        super(Error, self).__init__(command, exit_code)\\n        self.command = command\\n        self.exit_code = exit_code\\n        self.out = out\\n\\n    def __str__(self):\\n        return exit_code_str(self.__class__.__name__, self.command, self.exit_code)\\n\\n\\nclass MissingDirectory(Error):\\n    \"\"\"A directory did not exist.\"\"\"\\n\\n\\nclass MissingDependency(Error):\\n    \"\"\"A dependency could not be found or determined.\"\"\"\\n\\n\\nclass MissingRequirement(Error):\\n    \"\"\"A requirement defined in :config:`require` is not met.\"\"\"\\n\\n    def __init__(self, config):\\n        self.config = config\\n\\n    def __str__(self):\\n        return \" \".join(pipes.quote(i) for i in self.config.requires)\\n\\n\\nclass BadRequirement(Error):\\n    \"\"\"A requirement defined in :config:`require` cannot be parsed.\"\"\"\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/helper/__init__.py'"}, "return_value": "b''"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/helper/build_isolated.py'"}, "return_value": "b'\"\"\"PEP 517 build backend invocation script.\\n\\nIt accepts externally parsed build configuration from `[build-system]`\\nin `pyproject.toml` and invokes an API endpoint for building an sdist\\ntarball.\\n\"\"\"\\n\\nimport os\\nimport sys\\n\\n\\ndef _ensure_module_in_paths(module, paths):\\n    \"\"\"Verify that the imported backend belongs in-tree.\"\"\"\\n    if not paths:\\n        return\\n\\n    module_path = os.path.normcase(os.path.abspath(module.__file__))\\n    normalized_paths = (os.path.normcase(os.path.abspath(path)) for path in paths)\\n\\n    if any(os.path.commonprefix((module_path, path)) == path for path in normalized_paths):\\n        return\\n\\n    raise SystemExit(\\n        \"build-backend ({!r}) must exist in one of the paths \"\\n        \"specified by backend-path ({!r})\".format(module, paths),\\n    )\\n\\n\\ndist_folder = sys.argv[1]\\nbackend_spec = sys.argv[2]\\nbackend_obj = sys.argv[3] if len(sys.argv) >= 4 else None\\nbackend_paths = sys.argv[4].split(os.path.pathsep) if (len(sys.argv) >= 5 and sys.argv[4]) else []\\n\\nsys.path[:0] = backend_paths\\n\\nbackend = __import__(backend_spec, fromlist=[\"_trash\"])\\n_ensure_module_in_paths(backend, backend_paths)\\nif backend_obj:\\n    backend = getattr(backend, backend_obj)\\n\\nbasename = backend.build_sdist(dist_folder, {\"--global-option\": [\"--formats=gztar\"]})\\nprint(basename)\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/helper/build_requires.py'"}, "return_value": "b'import json\\nimport os\\nimport sys\\n\\nbackend_spec = sys.argv[1]\\nbackend_obj = sys.argv[2] if len(sys.argv) >= 3 else None\\nbackend_paths = sys.argv[3].split(os.path.pathsep) if len(sys.argv) >= 4 else []\\n\\nsys.path[:0] = backend_paths\\n\\nbackend = __import__(backend_spec, fromlist=[\"_trash\"])\\nif backend_obj:\\n    backend = getattr(backend, backend_obj)\\n\\ntry:\\n    for_build_requires = backend.get_requires_for_build_sdist(None)\\nexcept AttributeError:\\n    # PEP 517 states that get_requires_for_build_sdist is optional for a build\\n    # backend object. When the backend object omits it, the default\\n    # implementation must be equivalent to return []\\n    for_build_requires = []\\n\\noutput = json.dumps(for_build_requires)\\nprint(output)\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/helper/get_site_package_dir.py'"}, "return_value": "b'from __future__ import unicode_literals\\n\\nimport json\\nimport sys\\nimport sysconfig\\nimport warnings\\n\\ndest_prefix = sys.argv[1]\\nwith warnings.catch_warnings():  # disable warning for PEP-632\\n    warnings.simplefilter(\"ignore\")\\n    try:\\n        import distutils.sysconfig\\n\\n        data = distutils.sysconfig.get_python_lib(prefix=dest_prefix)\\n    except ImportError:  # if removed or not installed ignore\\n        config_vars = {\\n            k: dest_prefix if any(v == p for p in (sys.prefix, sys.base_prefix)) else v\\n            for k, v in sysconfig.get_config_vars().items()\\n        }\\n        data = sysconfig.get_path(\"purelib\", vars=config_vars)\\n\\nprint(json.dumps({\"dir\": data}))\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/helper/get_version.py'"}, "return_value": "b'from __future__ import unicode_literals\\n\\nimport json\\nimport os\\nimport platform\\nimport sys\\n\\ninfo = {\\n    \"executable\": sys.executable,\\n    \"implementation\": platform.python_implementation(),\\n    \"version_info\": list(sys.version_info),\\n    \"version\": sys.version,\\n    \"is_64\": sys.maxsize > 2 ** 32,\\n    \"sysplatform\": sys.platform,\\n    \"os_sep\": os.sep,\\n    \"extra_version_info\": getattr(sys, \"pypy_version_info\", None),\\n}\\ninfo_as_dump = json.dumps(info)\\nprint(info_as_dump)\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/hookspecs.py'"}, "return_value": "b'\"\"\"Hook specifications for tox - see https://pluggy.readthedocs.io/\"\"\"\\nimport pluggy\\n\\nhookspec = pluggy.HookspecMarker(\"tox\")\\n\\n\\n@hookspec\\ndef tox_addoption(parser):\\n    \"\"\"add command line options to the argparse-style parser object.\"\"\"\\n\\n\\n@hookspec\\ndef tox_configure(config):\\n    \"\"\"Called after command line options are parsed and ini-file has been read.\\n\\n    Please be aware that the config object layout may change between major tox versions.\\n    \"\"\"\\n\\n\\n@hookspec(firstresult=True)\\ndef tox_package(session, venv):\\n    \"\"\"Return the package to be installed for the given venv.\\n\\n    Called once for every environment.\"\"\"\\n\\n\\n@hookspec(firstresult=True)\\ndef tox_get_python_executable(envconfig):\\n    \"\"\"Return a python executable for the given python base name.\\n\\n    The first plugin/hook which returns an executable path will determine it.\\n\\n    ``envconfig`` is the testenv configuration which contains\\n    per-testenv configuration, notably the ``.envname`` and ``.basepython``\\n    setting.\\n    \"\"\"\\n\\n\\n@hookspec(firstresult=True)\\ndef tox_testenv_create(venv, action):\\n    \"\"\"Perform creation action for this venv.\\n\\n    Some example usage:\\n\\n    - To *add* behavior but still use tox\\'s implementation to set up a\\n      virtualenv, implement this hook but do not return a value (or explicitly\\n      return ``None``).\\n    - To *override* tox\\'s virtualenv creation, implement this hook and return\\n      a non-``None`` value.\\n\\n    .. note:: This api is experimental due to the unstable api of\\n        :class:`tox.venv.VirtualEnv`.\\n\\n    .. note:: This hook uses ``firstresult=True`` (see `pluggy first result only`_) -- hooks\\n        implementing this will be run until one returns non-``None``.\\n\\n    .. _`pluggy first result only`: https://pluggy.readthedocs.io/en/latest/#first-result-only\\n    \"\"\"\\n\\n\\n@hookspec(firstresult=True)\\ndef tox_testenv_install_deps(venv, action):\\n    \"\"\"Perform install dependencies action for this venv.\\n\\n    Some example usage:\\n\\n    - To *add* behavior but still use tox\\'s implementation to install\\n      dependencies, implement this hook but do not return a value (or\\n      explicitly return ``None``).  One use-case may be to install (or ensure)\\n      non-python dependencies such as debian packages.\\n    - To *override* tox\\'s installation of dependencies, implement this hook\\n      and return a non-``None`` value.  One use-case may be to install via\\n      a different installation tool such as `pip-accel`_ or `pip-faster`_.\\n\\n    .. note:: This api is experimental due to the unstable api of\\n        :class:`tox.venv.VirtualEnv`.\\n\\n    .. note:: This hook uses ``firstresult=True`` (see `pluggy first result only`_) -- hooks\\n        implementing this will be run until one returns non-``None``.\\n\\n    .. _pip-accel: https://github.com/paylogic/pip-accel\\n    .. _pip-faster: https://github.com/Yelp/venv-update\\n    \"\"\"\\n\\n\\n@hookspec\\ndef tox_runtest_pre(venv):\\n    \"\"\"Perform arbitrary action before running tests for this venv.\\n\\n    This could be used to indicate that tests for a given venv have started, for instance.\\n    \"\"\"\\n\\n\\n@hookspec(firstresult=True)\\ndef tox_runtest(venv, redirect):\\n    \"\"\"Run the tests for this venv.\\n\\n    .. note:: This hook uses ``firstresult=True`` (see `pluggy first result only`_) -- hooks\\n        implementing this will be run until one returns non-``None``.\\n    \"\"\"\\n\\n\\n@hookspec\\ndef tox_runtest_post(venv):\\n    \"\"\"Perform arbitrary action after running tests for this venv.\\n\\n    This could be used to have per-venv test reporting of pass/fail status.\\n    \"\"\"\\n\\n\\n@hookspec(firstresult=True)\\ndef tox_runenvreport(venv, action):\\n    \"\"\"Get the installed packages and versions in this venv.\\n\\n    This could be used for alternative (ie non-pip) package managers, this\\n    plugin should return a ``list`` of type ``str``\\n    \"\"\"\\n\\n\\n@hookspec\\ndef tox_cleanup(session):\\n    \"\"\"Called just before the session is destroyed, allowing any final cleanup operation\"\"\"\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/interpreters/__init__.py'"}, "return_value": "b'from __future__ import unicode_literals\\n\\nimport json\\nimport sys\\n\\nimport tox\\nfrom tox import reporter\\nfrom tox.constants import SITE_PACKAGE_QUERY_SCRIPT\\nfrom tox.interpreters.via_path import get_python_info\\n\\n\\nclass Interpreters:\\n    def __init__(self, hook):\\n        self.name2executable = {}\\n        self.executable2info = {}\\n        self.hook = hook\\n\\n    def get_executable(self, envconfig):\\n        \"\"\"return path object to the executable for the given\\n        name (e.g. python2.7, python3.6, python etc.)\\n        if name is already an existing path, return name.\\n        If an interpreter cannot be found, return None.\\n        \"\"\"\\n        try:\\n            return self.name2executable[envconfig.envname]\\n        except KeyError:\\n            exe = self.hook.tox_get_python_executable(envconfig=envconfig)\\n            reporter.verbosity2(\"{} uses {}\".format(envconfig.envname, exe))\\n            self.name2executable[envconfig.envname] = exe\\n            return exe\\n\\n    def get_info(self, envconfig):\\n        executable = self.get_executable(envconfig)\\n        name = envconfig.basepython\\n        if not executable:\\n            return NoInterpreterInfo(name=name)\\n        try:\\n            return self.executable2info[executable]\\n        except KeyError:\\n            info = run_and_get_interpreter_info(name, executable)\\n            self.executable2info[executable] = info\\n            return info\\n\\n    def get_sitepackagesdir(self, info, envdir):\\n        if not info.executable:\\n            return \"\"\\n        envdir = str(envdir)\\n        try:\\n            res = exec_on_interpreter(str(info.executable), SITE_PACKAGE_QUERY_SCRIPT, str(envdir))\\n        except ExecFailed as e:\\n            reporter.verbosity1(\"execution failed: {} -- {}\".format(e.out, e.err))\\n            return \"\"\\n        else:\\n            return res[\"dir\"]\\n\\n\\ndef run_and_get_interpreter_info(name, executable):\\n    assert executable\\n    try:\\n        result = get_python_info(str(executable))\\n        result[\"version_info\"] = tuple(result[\"version_info\"])  # fix json dump transformation\\n        if result[\"extra_version_info\"] is not None:\\n            result[\"extra_version_info\"] = tuple(\\n                result[\"extra_version_info\"],\\n            )  # fix json dump transformation\\n        del result[\"version\"]\\n        result[\"executable\"] = str(executable)\\n    except ExecFailed as e:\\n        return NoInterpreterInfo(name, executable=e.executable, out=e.out, err=e.err)\\n    else:\\n        return InterpreterInfo(**result)\\n\\n\\ndef exec_on_interpreter(*args):\\n    from subprocess import PIPE, Popen\\n\\n    popen = Popen(args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\\n    out, err = popen.communicate()\\n    if popen.returncode:\\n        raise ExecFailed(args[0], args[1:], out, err)\\n    if err:\\n        sys.stderr.write(err)\\n    try:\\n        result = json.loads(out)\\n    except Exception:\\n        raise ExecFailed(args[0], args[1:], out, \"could not decode {!r}\".format(out))\\n    return result\\n\\n\\nclass ExecFailed(Exception):\\n    def __init__(self, executable, source, out, err):\\n        self.executable = executable\\n        self.source = source\\n        self.out = out\\n        self.err = err\\n\\n\\nclass InterpreterInfo:\\n    def __init__(\\n        self,\\n        implementation,\\n        executable,\\n        version_info,\\n        sysplatform,\\n        is_64,\\n        os_sep,\\n        extra_version_info,\\n    ):\\n        self.implementation = implementation\\n        self.executable = executable\\n\\n        self.version_info = version_info\\n        self.sysplatform = sysplatform\\n        self.is_64 = is_64\\n        self.os_sep = os_sep\\n        self.extra_version_info = extra_version_info\\n\\n    def __str__(self):\\n        return \"<executable at {}, version_info {}>\".format(self.executable, self.version_info)\\n\\n\\nclass NoInterpreterInfo:\\n    def __init__(self, name, executable=None, out=None, err=\"not found\"):\\n        self.name = name\\n        self.executable = executable\\n        self.version_info = None\\n        self.out = out\\n        self.err = err\\n\\n    def __str__(self):\\n        if self.executable:\\n            return \"<executable at {}, not runnable>\".format(self.executable)\\n        else:\\n            return \"<executable not found for: {}>\".format(self.name)\\n\\n\\nif tox.INFO.IS_WIN:\\n    from .windows import tox_get_python_executable\\nelse:\\n    from .unix import tox_get_python_executable\\nassert tox_get_python_executable\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/interpreters/common.py'"}, "return_value": "b'import os\\n\\nfrom tox.interpreters.py_spec import CURRENT, PythonSpec\\nfrom tox.interpreters.via_path import exe_spec\\n\\n\\ndef base_discover(envconfig):\\n    base_python = envconfig.basepython\\n    spec = PythonSpec.from_name(base_python)\\n\\n    # 1. check passed in discover elements\\n    discovers = envconfig.config.option.discover\\n    if not discovers:\\n        discovers = os.environ.get(str(\"TOX_DISCOVER\"), \"\").split(os.pathsep)\\n    for discover in discovers:\\n        if os.path.exists(discover):\\n            cur_spec = exe_spec(discover, envconfig.basepython)\\n            if cur_spec is not None and cur_spec.satisfies(spec):\\n                return spec, cur_spec.path\\n\\n    # 2. check current\\n    if spec.name is not None and CURRENT.satisfies(spec):\\n        return spec, CURRENT.path\\n\\n    return spec, None\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/interpreters/py_spec.py'"}, "return_value": "b'from __future__ import unicode_literals\\n\\nimport os\\nimport re\\nimport sys\\n\\nimport six\\n\\nimport tox\\n\\n\\nclass PythonSpec(object):\\n    def __init__(self, name, major, minor, architecture, path, args=None):\\n        self.name = name\\n        self.major = major\\n        self.minor = minor\\n        self.architecture = architecture\\n        self.path = path\\n        self.args = args\\n\\n    def __repr__(self):\\n        return (\\n            \"{0.__class__.__name__}(name={0.name!r}, major={0.major!r}, minor={0.minor!r}, \"\\n            \"architecture={0.architecture!r}, path={0.path!r}, args={0.args!r})\"\\n        ).format(self)\\n\\n    def __str__(self):\\n        msg = repr(self)\\n        return msg.encode(\"utf-8\") if six.PY2 else msg\\n\\n    def satisfies(self, req):\\n        if req.is_abs and self.is_abs and self.path != req.path:\\n            return False\\n        if req.name is not None and req.name != self.name:\\n            return False\\n        if req.architecture is not None and req.architecture != self.architecture:\\n            return False\\n        if req.major is not None and req.major != self.major:\\n            return False\\n        if req.minor is not None and req.minor != self.minor:\\n            return False\\n        if req.major is None and req.minor is not None:\\n            return False\\n        return True\\n\\n    @property\\n    def is_abs(self):\\n        return self.path is not None and os.path.isabs(self.path)\\n\\n    @classmethod\\n    def from_name(cls, base_python):\\n        name, major, minor, architecture, path = None, None, None, None, None\\n        if os.path.isabs(base_python):\\n            path = base_python\\n        else:\\n            match = re.match(r\"(python|pypy|jython)(\\\\d)?(?:\\\\.(\\\\d+))?(?:-(32|64))?$\", base_python)\\n            if match:\\n                groups = match.groups()\\n                name = groups[0]\\n                major = int(groups[1]) if len(groups) >= 2 and groups[1] is not None else None\\n                minor = int(groups[2]) if len(groups) >= 3 and groups[2] is not None else None\\n                architecture = (\\n                    int(groups[3]) if len(groups) >= 4 and groups[3] is not None else None\\n                )\\n            else:\\n                path = base_python\\n        return cls(name, major, minor, architecture, path)\\n\\n\\nCURRENT = PythonSpec(\\n    \"pypy\" if tox.constants.INFO.IS_PYPY else \"python\",\\n    sys.version_info[0],\\n    sys.version_info[1],\\n    64 if sys.maxsize > 2 ** 32 else 32,\\n    sys.executable,\\n)\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/interpreters/unix.py'"}, "return_value": "b'from __future__ import unicode_literals\\n\\nimport tox\\n\\nfrom .common import base_discover\\nfrom .via_path import check_with_path\\n\\n\\n@tox.hookimpl\\ndef tox_get_python_executable(envconfig):\\n    spec, path = base_discover(envconfig)\\n    if path is not None:\\n        return path\\n    # 3. check if the literal base python\\n    candidates = [envconfig.basepython]\\n    # 4. check if the un-versioned name is good\\n    if spec.name is not None and spec.name != envconfig.basepython:\\n        candidates.append(spec.name)\\n    return check_with_path(candidates, spec)\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/interpreters/via_path.py'"}, "return_value": "b'from __future__ import unicode_literals\\n\\nimport json\\nimport os\\nimport subprocess\\nfrom collections import defaultdict\\nfrom threading import Lock\\n\\nimport py\\n\\nfrom tox import reporter\\nfrom tox.constants import VERSION_QUERY_SCRIPT\\n\\nfrom .py_spec import PythonSpec\\n\\n\\ndef check_with_path(candidates, spec):\\n    for path in candidates:\\n        base = path\\n        if not os.path.isabs(path):\\n            path = py.path.local.sysfind(path)\\n        if path is not None:\\n            if os.path.exists(str(path)):\\n                cur_spec = exe_spec(path, base)\\n                if cur_spec is not None and cur_spec.satisfies(spec):\\n                    return cur_spec.path\\n\\n\\n_SPECS = {}\\n_SPECK_LOCK = defaultdict(Lock)\\n\\n\\ndef exe_spec(python_exe, base):\\n    if not isinstance(python_exe, str):\\n        python_exe = str(python_exe)\\n    with _SPECK_LOCK[python_exe]:\\n        if python_exe not in _SPECS:\\n            info = get_python_info(python_exe)\\n            if info is not None:\\n                found = PythonSpec(\\n                    \"pypy\" if info[\"implementation\"] == \"PyPy\" else \"python\",\\n                    info[\"version_info\"][0],\\n                    info[\"version_info\"][1],\\n                    64 if info[\"is_64\"] else 32,\\n                    info[\"executable\"],\\n                )\\n                reporter.verbosity2(\"{} ({}) is {}\".format(base, python_exe, info))\\n            else:\\n                found = None\\n            _SPECS[python_exe] = found\\n    return _SPECS[python_exe]\\n\\n\\n_python_info_cache = {}\\n\\n\\ndef get_python_info(cmd):\\n    try:\\n        return _python_info_cache[cmd].copy()\\n    except KeyError:\\n        pass\\n    proc = subprocess.Popen(\\n        [cmd] + [VERSION_QUERY_SCRIPT],\\n        stdout=subprocess.PIPE,\\n        stderr=subprocess.PIPE,\\n        universal_newlines=True,\\n    )\\n    out, err = proc.communicate()\\n    if not proc.returncode:\\n        try:\\n            result = json.loads(out)\\n        except ValueError as exception:\\n            failure = exception\\n        else:\\n            _python_info_cache[cmd] = result\\n            return result.copy()\\n    else:\\n        failure = \"exit code {}\".format(proc.returncode)\\n    reporter.verbosity1(\"{!r} cmd {!r} out {!r} err {!r} \".format(failure, cmd, out, err))\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/interpreters/windows/__init__.py'"}, "return_value": "b'from __future__ import unicode_literals\\n\\nfrom threading import Lock\\n\\nimport tox\\n\\nfrom ..common import base_discover\\nfrom ..py_spec import CURRENT\\nfrom ..via_path import check_with_path\\n\\n\\n@tox.hookimpl\\ndef tox_get_python_executable(envconfig):\\n    spec, path = base_discover(envconfig)\\n    if path is not None:\\n        return path\\n    # second check if the py.exe has it (only for non path specs)\\n    if spec.path is None:\\n        py_exe = locate_via_pep514(spec)\\n        if py_exe is not None:\\n            return py_exe\\n\\n    # third check if the literal base python is on PATH\\n    candidates = [envconfig.basepython]\\n    # fourth check if the name is on PATH\\n    if spec.name is not None and spec.name != envconfig.basepython:\\n        candidates.append(spec.name)\\n    # or check known locations\\n    if spec.major is not None and spec.minor is not None:\\n        if spec.name == \"python\":\\n            # The standard names are in predictable places.\\n            candidates.append(r\"c:\\\\python{}{}\\\\python.exe\".format(spec.major, spec.minor))\\n    return check_with_path(candidates, spec)\\n\\n\\n_PY_AVAILABLE = []\\n_PY_LOCK = Lock()\\n\\n\\ndef locate_via_pep514(spec):\\n    with _PY_LOCK:\\n        if not _PY_AVAILABLE:\\n            from . import pep514\\n\\n            _PY_AVAILABLE.extend(pep514.discover_pythons())\\n            _PY_AVAILABLE.append(CURRENT)\\n    for cur_spec in _PY_AVAILABLE:\\n        if cur_spec.satisfies(spec):\\n            return cur_spec.path\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/interpreters/windows/pep514.py'"}, "return_value": "b'\"\"\"Implement https://www.python.org/dev/peps/pep-0514/ to discover interpreters - Windows only\"\"\"\\nfrom __future__ import unicode_literals\\n\\nimport os\\nimport re\\n\\nimport six\\nfrom six.moves import winreg\\n\\nfrom tox import reporter\\nfrom tox.interpreters.py_spec import PythonSpec\\n\\n\\ndef enum_keys(key):\\n    at = 0\\n    while True:\\n        try:\\n            yield winreg.EnumKey(key, at)\\n        except OSError:\\n            break\\n        at += 1\\n\\n\\ndef get_value(key, value_name):\\n    try:\\n        return winreg.QueryValueEx(key, value_name)[0]\\n    except OSError:\\n        return None\\n\\n\\ndef discover_pythons():\\n    for hive, hive_name, key, flags, default_arch in [\\n        (winreg.HKEY_CURRENT_USER, \"HKEY_CURRENT_USER\", r\"Software\\\\Python\", 0, 64),\\n        (\\n            winreg.HKEY_LOCAL_MACHINE,\\n            \"HKEY_LOCAL_MACHINE\",\\n            r\"Software\\\\Python\",\\n            winreg.KEY_WOW64_64KEY,\\n            64,\\n        ),\\n        (\\n            winreg.HKEY_LOCAL_MACHINE,\\n            \"HKEY_LOCAL_MACHINE\",\\n            r\"Software\\\\Python\",\\n            winreg.KEY_WOW64_32KEY,\\n            32,\\n        ),\\n    ]:\\n        for spec in process_set(hive, hive_name, key, flags, default_arch):\\n            yield spec\\n\\n\\ndef process_set(hive, hive_name, key, flags, default_arch):\\n    try:\\n        with winreg.OpenKeyEx(hive, key, 0, winreg.KEY_READ | flags) as root_key:\\n            for company in enum_keys(root_key):\\n                if company == \"PyLauncher\":  # reserved\\n                    continue\\n                for spec in process_company(hive_name, company, root_key, default_arch):\\n                    yield spec\\n    except OSError:\\n        pass\\n\\n\\ndef process_company(hive_name, company, root_key, default_arch):\\n    with winreg.OpenKeyEx(root_key, company) as company_key:\\n        for tag in enum_keys(company_key):\\n            for spec in process_tag(hive_name, company, company_key, tag, default_arch):\\n                yield spec\\n\\n\\ndef process_tag(hive_name, company, company_key, tag, default_arch):\\n    with winreg.OpenKeyEx(company_key, tag) as tag_key:\\n        major, minor = load_version_data(hive_name, company, tag, tag_key)\\n        if major is None:\\n            return\\n        arch = load_arch_data(hive_name, company, tag, tag_key, default_arch)\\n    exe, args = load_exe(hive_name, company, company_key, tag)\\n    if exe is not None:\\n        name = \"python\" if company == \"PythonCore\" else company\\n        yield PythonSpec(name, major, minor, arch, exe, args)\\n\\n\\ndef load_exe(hive_name, company, company_key, tag):\\n    key_path = \"{}/{}/{}\".format(hive_name, company, tag)\\n    try:\\n        with winreg.OpenKeyEx(company_key, r\"{}\\\\InstallPath\".format(tag)) as ip_key:\\n            with ip_key:\\n                exe = get_value(ip_key, \"ExecutablePath\")\\n                if exe is None:\\n                    ip = get_value(ip_key, None)\\n                    if ip is None:\\n                        msg(key_path, \"no ExecutablePath or default for it\")\\n\\n                    else:\\n                        exe = os.path.join(ip, \"python.exe\")\\n                if os.path.exists(exe):\\n                    args = get_value(ip_key, \"ExecutableArguments\")\\n                    return exe, args\\n                else:\\n                    msg(key_path, \"exe does not exists {}\".format(exe))\\n    except OSError:\\n        msg(\"{}/{}\".format(key_path, \"InstallPath\"), \"missing\")\\n    return None, None\\n\\n\\ndef load_arch_data(hive_name, company, tag, tag_key, default_arch):\\n    arch_str = get_value(tag_key, \"SysArchitecture\")\\n    if arch_str is not None:\\n        key_path = \"{}/{}/{}/SysArchitecture\".format(hive_name, company, tag)\\n        try:\\n            return parse_arch(arch_str)\\n        except ValueError as sys_arch:\\n            msg(key_path, sys_arch)\\n    return default_arch\\n\\n\\ndef parse_arch(arch_str):\\n    if not isinstance(arch_str, six.string_types):\\n        raise ValueError(\"arch is not string\")\\n    match = re.match(r\"(\\\\d+)bit\", arch_str)\\n    if match:\\n        return int(next(iter(match.groups())))\\n    raise ValueError(\"invalid format {}\".format(arch_str))\\n\\n\\ndef load_version_data(hive_name, company, tag, tag_key):\\n    version_str = get_value(tag_key, \"SysVersion\")\\n    major, minor = None, None\\n    if version_str is not None:\\n        key_path = \"{}/{}/{}/SysVersion\".format(hive_name, company, tag)\\n        try:\\n            major, minor = parse_version(get_value(tag_key, \"SysVersion\"))\\n        except ValueError as sys_version:\\n            msg(key_path, sys_version)\\n    if major is None:\\n        key_path = \"{}/{}/{}\".format(hive_name, company, tag)\\n        try:\\n            major, minor = parse_version(tag)\\n        except ValueError as tag_version:\\n            msg(key_path, tag_version)\\n    return major, minor\\n\\n\\ndef parse_version(version_str):\\n    if not isinstance(version_str, six.string_types):\\n        raise ValueError(\"key is not string\")\\n    match = re.match(r\"(\\\\d+)\\\\.(\\\\d+).*\", version_str)\\n    if match:\\n        return tuple(int(i) for i in match.groups())\\n    raise ValueError(\"invalid format {}\".format(version_str))\\n\\n\\ndef msg(path, what):\\n    reporter.verbosity1(\"PEP-514 violation in Windows Registry at {} error: {}\".format(path, what))\\n\\n\\ndef _run():\\n    reporter.update_default_reporter(0, reporter.Verbosity.DEBUG)\\n    for spec in discover_pythons():\\n        print(repr(spec))\\n\\n\\nif __name__ == \"__main__\":\\n    _run()\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/logs/__init__.py'"}, "return_value": "b'\"\"\"This module handles collecting and persisting in json format a tox session\"\"\"\\nfrom .result import ResultLog\\n\\n__all__ = (\"ResultLog\",)\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/logs/command.py'"}, "return_value": "b'from __future__ import absolute_import, unicode_literals\\n\\n\\nclass CommandLog(object):\\n    \"\"\"Report commands interacting with third party tools\"\"\"\\n\\n    def __init__(self, env_log, list):\\n        self.envlog = env_log\\n        self.list = list\\n\\n    def add_command(self, argv, output, retcode):\\n        data = {\"command\": argv, \"output\": output, \"retcode\": retcode}\\n        self.list.append(data)\\n        return data\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/logs/env.py'"}, "return_value": "b'from __future__ import absolute_import, unicode_literals\\n\\nfrom tox.interpreters.via_path import get_python_info\\n\\nfrom .command import CommandLog\\n\\n\\nclass EnvLog(object):\\n    \"\"\"Report the status of a tox environment\"\"\"\\n\\n    def __init__(self, result_log, name, dict):\\n        self.reportlog = result_log\\n        self.name = name\\n        self.dict = dict\\n\\n    def set_python_info(self, python_executable):\\n        answer = get_python_info(str(python_executable))\\n        answer[\"executable\"] = python_executable\\n        self.dict[\"python\"] = answer\\n\\n    def get_commandlog(self, name):\\n        \"\"\"get the command log for a given group name\"\"\"\\n        data = self.dict.setdefault(name, [])\\n        return CommandLog(self, data)\\n\\n    def set_installed(self, packages):\\n        self.dict[\"installed_packages\"] = packages\\n\\n    def set_header(self, installpkg):\\n        \"\"\"\\n        :param py.path.local installpkg: Path to the package.\\n        \"\"\"\\n        self.dict[\"installpkg\"] = {\\n            \"sha256\": installpkg.computehash(\"sha256\"),\\n            \"basename\": installpkg.basename,\\n        }\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/logs/result.py'"}, "return_value": "b'\"\"\"Generate json report of a run\"\"\"\\nfrom __future__ import absolute_import, unicode_literals\\n\\nimport json\\nimport os\\nimport socket\\nimport sys\\n\\nfrom tox.version import __version__\\n\\nfrom .command import CommandLog\\nfrom .env import EnvLog\\n\\n\\nclass ResultLog(object):\\n    \"\"\"The result of a tox session\"\"\"\\n\\n    def __init__(self):\\n        command_log = []\\n        self.command_log = CommandLog(None, command_log)\\n        self.dict = {\\n            \"reportversion\": \"1\",\\n            \"toxversion\": __version__,\\n            \"platform\": sys.platform,\\n            \"host\": os.getenv(str(\"HOSTNAME\")) or socket.getfqdn(),\\n            \"commands\": command_log,\\n        }\\n\\n    @classmethod\\n    def from_json(cls, data):\\n        result = cls()\\n        result.dict = json.loads(data)\\n        result.command_log = CommandLog(None, result.dict[\"commands\"])\\n        return result\\n\\n    def get_envlog(self, name):\\n        \"\"\"Return the env log of an environment (create on first call)\"\"\"\\n        test_envs = self.dict.setdefault(\"testenvs\", {})\\n        env_data = test_envs.setdefault(name, {})\\n        return EnvLog(self, name, env_data)\\n\\n    def dumps_json(self):\\n        \"\"\"Return the json dump of the current state, indented\"\"\"\\n        return json.dumps(self.dict, indent=2)\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/package/__init__.py'"}, "return_value": "b'import py\\n\\nimport tox\\nfrom tox.reporter import error, info, verbosity0, verbosity2, warning\\nfrom tox.util.lock import hold_lock\\n\\nfrom .builder import build_package\\nfrom .local import resolve_package\\nfrom .view import create_session_view\\n\\n\\n@tox.hookimpl\\ndef tox_package(session, venv):\\n    \"\"\"Build an sdist at first call return that for all calls\"\"\"\\n    if not hasattr(session, \"package\"):\\n        session.package, session.dist = get_package(session)\\n    return session.package\\n\\n\\ndef get_package(session):\\n    \"\"\"Perform the package operation\"\"\"\\n    config = session.config\\n    if config.skipsdist:\\n        info(\"skipping sdist step\")\\n        return None\\n    lock_file = session.config.toxworkdir.join(\"{}.lock\".format(session.config.isolated_build_env))\\n\\n    with hold_lock(lock_file, verbosity0):\\n        package = acquire_package(config, session)\\n        session_package = create_session_view(package, config.temp_dir)\\n        return session_package, package\\n\\n\\ndef acquire_package(config, session):\\n    \"\"\"acquire a source distribution (either by loading a local file or triggering a build)\"\"\"\\n    if not config.option.sdistonly and (config.sdistsrc or config.option.installpkg):\\n        path = get_local_package(config)\\n    else:\\n        try:\\n            path = build_package(config, session)\\n        except tox.exception.InvocationError as exception:\\n            error(\"FAIL could not package project - v = {!r}\".format(exception))\\n            return None\\n        sdist_file = config.distshare.join(path.basename)\\n        if sdist_file != path:\\n            info(\"copying new sdistfile to {!r}\".format(str(sdist_file)))\\n            try:\\n                sdist_file.dirpath().ensure(dir=1)\\n            except py.error.Error:\\n                warning(\"could not copy distfile to {}\".format(sdist_file.dirpath()))\\n            else:\\n                path.copy(sdist_file)\\n    return path\\n\\n\\ndef get_local_package(config):\\n    path = config.option.installpkg\\n    if not path:\\n        path = config.sdistsrc\\n    py_path = py.path.local(resolve_package(path))\\n    info(\"using package {!r}, skipping \\'sdist\\' activity \".format(str(py_path)))\\n    return py_path\\n\\n\\n@tox.hookimpl\\ndef tox_cleanup(session):\\n    for tox_env in session.venv_dict.values():\\n        if hasattr(tox_env, \"package\") and isinstance(tox_env.package, py.path.local):\\n            package = tox_env.package\\n            if package.exists():\\n                verbosity2(\"cleanup {}\".format(package))\\n                package.remove()\\n                py.path.local(package.dirname).remove(ignore_errors=True)\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/package/builder/__init__.py'"}, "return_value": "b'from .isolated import build\\nfrom .legacy import make_sdist\\n\\n\\ndef build_package(config, session):\\n    if not config.isolated_build:\\n        return make_sdist(config, session)\\n    else:\\n        return build(config, session)\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/package/builder/isolated.py'"}, "return_value": "b'from __future__ import unicode_literals\\n\\nimport json\\nimport os\\nfrom collections import namedtuple\\n\\nimport six\\nfrom packaging.requirements import Requirement\\nfrom packaging.utils import canonicalize_name\\n\\nfrom tox import reporter\\nfrom tox.config import DepConfig, get_py_project_toml\\nfrom tox.constants import BUILD_ISOLATED, BUILD_REQUIRE_SCRIPT\\n\\nBuildInfo = namedtuple(\\n    \"BuildInfo\",\\n    [\"requires\", \"backend_module\", \"backend_object\", \"backend_paths\"],\\n)\\n\\n\\ndef build(config, session):\\n    build_info = get_build_info(config.setupdir)\\n    package_venv = session.getvenv(config.isolated_build_env)\\n    package_venv.envconfig.deps_matches_subset = True\\n\\n    # we allow user specified dependencies so the users can write extensions to\\n    # install additional type of dependencies (e.g. binary)\\n    user_specified_deps = package_venv.envconfig.deps\\n    package_venv.envconfig.deps = [DepConfig(r, None) for r in build_info.requires]\\n    package_venv.envconfig.deps.extend(user_specified_deps)\\n\\n    if package_venv.setupenv():\\n        package_venv.finishvenv()\\n    if isinstance(package_venv.status, Exception):\\n        raise package_venv.status\\n\\n    build_requires = get_build_requires(build_info, package_venv, config.setupdir)\\n    # we need to filter out requirements already specified in pyproject.toml or user deps\\n    base_build_deps = {\\n        canonicalize_name(Requirement(r.name).name) for r in package_venv.envconfig.deps\\n    }\\n    build_requires_dep = [\\n        DepConfig(r, None)\\n        for r in build_requires\\n        if canonicalize_name(Requirement(r).name) not in base_build_deps\\n    ]\\n    if build_requires_dep:\\n        with package_venv.new_action(\"build_requires\", package_venv.envconfig.envdir) as action:\\n            package_venv.run_install_command(packages=build_requires_dep, action=action)\\n        package_venv.finishvenv()\\n    return perform_isolated_build(build_info, package_venv, config.distdir, config.setupdir)\\n\\n\\ndef get_build_info(folder):\\n    toml_file = folder.join(\"pyproject.toml\")\\n\\n    # as per https://www.python.org/dev/peps/pep-0517/\\n\\n    def abort(message):\\n        reporter.error(\"{} inside {}\".format(message, toml_file))\\n        raise SystemExit(1)\\n\\n    if not toml_file.exists():\\n        reporter.error(\"missing {}\".format(toml_file))\\n        raise SystemExit(1)\\n\\n    config_data = get_py_project_toml(toml_file)\\n\\n    if \"build-system\" not in config_data:\\n        abort(\"build-system section missing\")\\n\\n    build_system = config_data[\"build-system\"]\\n\\n    if \"requires\" not in build_system:\\n        abort(\"missing requires key at build-system section\")\\n    if \"build-backend\" not in build_system:\\n        abort(\"missing build-backend key at build-system section\")\\n\\n    requires = build_system[\"requires\"]\\n    if not isinstance(requires, list) or not all(isinstance(i, six.text_type) for i in requires):\\n        abort(\"requires key at build-system section must be a list of string\")\\n\\n    backend = build_system[\"build-backend\"]\\n    if not isinstance(backend, six.text_type):\\n        abort(\"build-backend key at build-system section must be a string\")\\n\\n    args = backend.split(\":\")\\n    module = args[0]\\n    obj = args[1] if len(args) > 1 else \"\"\\n\\n    backend_paths = build_system.get(\"backend-path\", [])\\n    if not isinstance(backend_paths, list):\\n        abort(\"backend-path key at build-system section must be a list, if specified\")\\n    backend_paths = [folder.join(p) for p in backend_paths]\\n\\n    normalized_folder = os.path.normcase(str(folder.realpath()))\\n    normalized_paths = (os.path.normcase(str(path.realpath())) for path in backend_paths)\\n\\n    if not all(\\n        os.path.commonprefix((normalized_folder, path)) == normalized_folder\\n        for path in normalized_paths\\n    ):\\n        abort(\"backend-path must exist in the project root\")\\n\\n    return BuildInfo(requires, module, obj, backend_paths)\\n\\n\\ndef perform_isolated_build(build_info, package_venv, dist_dir, setup_dir):\\n    with package_venv.new_action(\\n        \"perform-isolated-build\",\\n        package_venv.envconfig.envdir,\\n    ) as action:\\n        # need to start with an empty (but existing) source distribution folder\\n        if dist_dir.exists():\\n            dist_dir.remove(rec=1, ignore_errors=True)\\n        dist_dir.ensure_dir()\\n\\n        result = package_venv._pcall(\\n            [\\n                package_venv.envconfig.envpython,\\n                BUILD_ISOLATED,\\n                str(dist_dir),\\n                build_info.backend_module,\\n                build_info.backend_object,\\n                os.path.pathsep.join(str(p) for p in build_info.backend_paths),\\n            ],\\n            returnout=True,\\n            action=action,\\n            cwd=setup_dir,\\n        )\\n        reporter.verbosity2(result)\\n        return dist_dir.join(result.split(\"\\\\n\")[-2])\\n\\n\\ndef get_build_requires(build_info, package_venv, setup_dir):\\n    with package_venv.new_action(\"get-build-requires\", package_venv.envconfig.envdir) as action:\\n        result = package_venv._pcall(\\n            [\\n                package_venv.envconfig.envpython,\\n                BUILD_REQUIRE_SCRIPT,\\n                build_info.backend_module,\\n                build_info.backend_object,\\n                os.path.pathsep.join(str(p) for p in build_info.backend_paths),\\n            ],\\n            returnout=True,\\n            action=action,\\n            cwd=setup_dir,\\n        )\\n        return json.loads(result.split(\"\\\\n\")[-2])\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/package/builder/legacy.py'"}, "return_value": "b'import sys\\n\\nimport py\\n\\nfrom tox import reporter\\nfrom tox.util.path import ensure_empty_dir\\n\\n\\ndef make_sdist(config, session):\\n    setup = config.setupdir.join(\"setup.py\")\\n    pyproject = config.setupdir.join(\"pyproject.toml\")\\n    setup_check = setup.check()\\n    if not setup_check and not pyproject.check():\\n        reporter.error(\\n            \"No pyproject.toml or setup.py file found. The expected locations are:\\\\n\"\\n            \"  {pyproject} or {setup}\\\\n\"\\n            \"You can\\\\n\"\\n            \"  1. Create one:\\\\n\"\\n            \"     https://tox.readthedocs.io/en/latest/example/package.html\\\\n\"\\n            \"  2. Configure tox to avoid running sdist:\\\\n\"\\n            \"     https://tox.readthedocs.io/en/latest/example/general.html\\\\n\"\\n            \"  3. Configure tox to use an isolated_build\".format(pyproject=pyproject, setup=setup),\\n        )\\n        raise SystemExit(1)\\n    if not setup_check:\\n        reporter.error(\\n            \"pyproject.toml file found.\\\\n\"\\n            \"To use a PEP 517 build-backend you are required to \"\\n            \"configure tox to use an isolated_build:\\\\n\"\\n            \"https://tox.readthedocs.io/en/latest/example/package.html\\\\n\",\\n        )\\n        raise SystemExit(1)\\n    with session.newaction(\"GLOB\", \"packaging\") as action:\\n        action.setactivity(\"sdist-make\", setup)\\n        ensure_empty_dir(config.distdir)\\n        build_log = action.popen(\\n            [sys.executable, setup, \"sdist\", \"--formats=zip\", \"--dist-dir\", config.distdir],\\n            cwd=config.setupdir,\\n            returnout=True,\\n        )\\n        reporter.verbosity2(build_log)\\n        try:\\n            return config.distdir.listdir()[0]\\n        except py.error.ENOENT:\\n            # check if empty or comment only\\n            data = []\\n            with open(str(setup)) as fp:\\n                for line in fp:\\n                    if line and line[0] == \"#\":\\n                        continue\\n                    data.append(line)\\n            if not \"\".join(data).strip():\\n                reporter.error(\"setup.py is empty\")\\n                raise SystemExit(1)\\n            reporter.error(\\n                \"No dist directory found. Please check setup.py, e.g with:\\\\n\"\\n                \"     python setup.py sdist\",\\n            )\\n            raise SystemExit(1)\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/package/local.py'"}, "return_value": "b'import os\\nimport re\\n\\nimport packaging.version\\nimport py\\n\\nimport tox\\nfrom tox import reporter\\nfrom tox.exception import MissingDependency\\n\\n_SPEC_2_PACKAGE = {}\\n\\n\\ndef resolve_package(package_spec):\\n    global _SPEC_2_PACKAGE\\n    try:\\n        return _SPEC_2_PACKAGE[package_spec]\\n    except KeyError:\\n        _SPEC_2_PACKAGE[package_spec] = x = get_latest_version_of_package(package_spec)\\n        return x\\n\\n\\ndef get_latest_version_of_package(package_spec):\\n    if not os.path.isabs(str(package_spec)):\\n        return package_spec\\n    p = py.path.local(package_spec)\\n    if p.check():\\n        return p\\n    if not p.dirpath().check(dir=1):\\n        raise tox.exception.MissingDirectory(p.dirpath())\\n    reporter.info(\"determining {}\".format(p))\\n    candidates = p.dirpath().listdir(p.basename)\\n    if len(candidates) == 0:\\n        raise MissingDependency(package_spec)\\n    if len(candidates) > 1:\\n        version_package = []\\n        for filename in candidates:\\n            version = get_version_from_filename(filename.basename)\\n            if version is not None:\\n                version_package.append((version, filename))\\n            else:\\n                reporter.warning(\"could not determine version of: {}\".format(str(filename)))\\n        if not version_package:\\n            raise tox.exception.MissingDependency(package_spec)\\n        version_package.sort()\\n        _, package_with_largest_version = version_package[-1]\\n        return package_with_largest_version\\n    else:\\n        return candidates[0]\\n\\n\\n_REGEX_FILE_NAME_WITH_VERSION = re.compile(r\"[\\\\w_+.-]+-(.*)\\\\.(zip|tar\\\\.gz)\")\\n\\n\\ndef get_version_from_filename(basename):\\n    m = _REGEX_FILE_NAME_WITH_VERSION.match(basename)\\n    if m is None:\\n        return None\\n    version = m.group(1)\\n    try:\\n        return packaging.version.Version(version)\\n    except packaging.version.InvalidVersion:\\n        return None\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/package/view.py'"}, "return_value": "b'import os\\nfrom itertools import chain\\n\\nimport six\\n\\nfrom tox.reporter import verbosity1\\n\\n\\ndef create_session_view(package, temp_dir):\\n    \"\"\"once we build a package we cannot return that directly, as a subsequent call\\n    might delete that package (in order to do its own build); therefore we need to\\n    return a view of the file that it\\'s not prone to deletion and can be removed when the\\n    session ends\\n    \"\"\"\\n    if not package:\\n        return package\\n    package_dir = temp_dir.join(\"package\")\\n    package_dir.ensure(dir=True)\\n\\n    # we\\'ll number the active instances, and use the max value as session folder for a new build\\n    # note we cannot change package names as PEP-491 (wheel binary format)\\n    # is strict about file name structure\\n    exists = [i.basename for i in package_dir.listdir()]\\n    file_id = max(chain((0,), (int(i) for i in exists if six.text_type(i).isnumeric())))\\n\\n    session_dir = package_dir.join(str(file_id + 1))\\n    session_dir.ensure(dir=True)\\n    session_package = session_dir.join(package.basename)\\n\\n    # if we can do hard links do that, otherwise just copy\\n    links = False\\n    if hasattr(os, \"link\"):\\n        try:\\n            os.link(str(package), str(session_package))\\n            links = True\\n        except (OSError, NotImplementedError):\\n            pass\\n    if not links:\\n        package.copy(session_package)\\n    operation = \"links\" if links else \"copied\"\\n    common = session_package.common(package)\\n    verbosity1(\\n        \"package {} {} to {} ({})\".format(\\n            common.bestrelpath(session_package),\\n            operation,\\n            common.bestrelpath(package),\\n            common,\\n        ),\\n    )\\n    return session_package\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/reporter.py'"}, "return_value": "b'\"\"\"A progress reporter inspired from the logging modules\"\"\"\\nfrom __future__ import absolute_import, unicode_literals\\n\\nimport os\\nimport time\\nfrom contextlib import contextmanager\\nfrom datetime import datetime\\n\\nimport py\\n\\n\\nclass Verbosity(object):\\n    DEBUG = 2\\n    INFO = 1\\n    DEFAULT = 0\\n    QUIET = -1\\n    EXTRA_QUIET = -2\\n\\n\\nREPORTER_TIMESTAMP_ON_ENV = str(\"TOX_REPORTER_TIMESTAMP\")\\nREPORTER_TIMESTAMP_ON = os.environ.get(REPORTER_TIMESTAMP_ON_ENV, False) == \"1\"\\nSTART = datetime.now()\\n\\n\\nclass Reporter(object):\\n    def __init__(self, verbose_level=None, quiet_level=None):\\n        kwargs = {}\\n        if verbose_level is not None:\\n            kwargs[\"verbose_level\"] = verbose_level\\n        if quiet_level is not None:\\n            kwargs[\"quiet_level\"] = quiet_level\\n        self._reset(**kwargs)\\n\\n    def _reset(self, verbose_level=0, quiet_level=0):\\n        self.verbose_level = verbose_level\\n        self.quiet_level = quiet_level\\n        self.reported_lines = []\\n        self.tw = py.io.TerminalWriter()\\n\\n    @property\\n    def verbosity(self):\\n        return self.verbose_level - self.quiet_level\\n\\n    def log_popen(self, cwd, outpath, cmd_args_shell, pid):\\n        \"\"\"log information about the action.popen() created process.\"\"\"\\n        msg = \"[{}] {}$ {}\".format(pid, cwd, cmd_args_shell)\\n        if outpath:\\n            if outpath.common(cwd) is not None:\\n                outpath = cwd.bestrelpath(outpath)\\n            msg = \"{} >{}\".format(msg, outpath)\\n        self.verbosity1(msg, of=\"logpopen\")\\n\\n    @property\\n    def messages(self):\\n        return [i for _, i in self.reported_lines]\\n\\n    @contextmanager\\n    def timed_operation(self, name, msg):\\n        self.verbosity2(\"{} start: {}\".format(name, msg), bold=True)\\n        start = time.time()\\n        yield\\n        duration = time.time() - start\\n        self.verbosity2(\\n            \"{} finish: {} after {:.2f} seconds\".format(name, msg, duration),\\n            bold=True,\\n        )\\n\\n    def separator(self, of, msg, level):\\n        if self.verbosity >= level:\\n            self.reported_lines.append((\"separator\", \"- summary -\"))\\n            self.tw.sep(of, msg)\\n\\n    def logline_if(self, level, of, msg, key=None, **kwargs):\\n        if self.verbosity >= level:\\n            message = str(msg) if key is None else \"{}{}\".format(key, msg)\\n            self.logline(of, message, **kwargs)\\n\\n    def logline(self, of, msg, **opts):\\n        self.reported_lines.append((of, msg))\\n        timestamp = \"\"\\n        if REPORTER_TIMESTAMP_ON:\\n            timestamp = \"{} \".format(datetime.now() - START)\\n        line_msg = \"{}{}\\\\n\".format(timestamp, msg)\\n        self.tw.write(line_msg, **opts)\\n\\n    def keyvalue(self, name, value):\\n        if name.endswith(\":\"):\\n            name += \" \"\\n        self.tw.write(name, bold=True)\\n        self.tw.write(value)\\n        self.tw.line()\\n\\n    def line(self, msg, **opts):\\n        self.logline(\"line\", msg, **opts)\\n\\n    def info(self, msg):\\n        self.logline_if(Verbosity.DEBUG, \"info\", msg)\\n\\n    def using(self, msg):\\n        self.logline_if(Verbosity.INFO, \"using\", msg, \"using \", bold=True)\\n\\n    def good(self, msg):\\n        self.logline_if(Verbosity.QUIET, \"good\", msg, green=True)\\n\\n    def warning(self, msg):\\n        self.logline_if(Verbosity.QUIET, \"warning\", msg, \"WARNING: \", red=True)\\n\\n    def error(self, msg):\\n        self.logline_if(Verbosity.QUIET, \"error\", msg, \"ERROR: \", red=True)\\n\\n    def skip(self, msg):\\n        self.logline_if(Verbosity.QUIET, \"skip\", msg, \"SKIPPED: \", yellow=True)\\n\\n    def verbosity0(self, msg, **opts):\\n        self.logline_if(Verbosity.DEFAULT, \"verbosity0\", msg, **opts)\\n\\n    def verbosity1(self, msg, of=\"verbosity1\", **opts):\\n        self.logline_if(Verbosity.INFO, of, msg, **opts)\\n\\n    def verbosity2(self, msg, **opts):\\n        self.logline_if(Verbosity.DEBUG, \"verbosity2\", msg, **opts)\\n\\n    def quiet(self, msg):\\n        self.logline_if(Verbosity.QUIET, \"quiet\", msg)\\n\\n\\n_INSTANCE = Reporter()\\n\\n\\ndef update_default_reporter(quiet_level, verbose_level):\\n    _INSTANCE.quiet_level = quiet_level\\n    _INSTANCE.verbose_level = verbose_level\\n\\n\\ndef has_level(of):\\n    return _INSTANCE.verbosity > of\\n\\n\\ndef verbosity():\\n    return _INSTANCE.verbosity\\n\\n\\nverbosity0 = _INSTANCE.verbosity0\\nverbosity1 = _INSTANCE.verbosity1\\nverbosity2 = _INSTANCE.verbosity2\\nerror = _INSTANCE.error\\nwarning = _INSTANCE.warning\\ngood = _INSTANCE.good\\nusing = _INSTANCE.using\\nskip = _INSTANCE.skip\\ninfo = _INSTANCE.info\\nline = _INSTANCE.line\\nseparator = _INSTANCE.separator\\nkeyvalue = _INSTANCE.keyvalue\\nquiet = _INSTANCE.quiet\\ntimed_operation = _INSTANCE.timed_operation\\nlog_popen = _INSTANCE.log_popen\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/__init__.py'"}, "return_value": "b'\"\"\"\\nAutomatically package and test a Python project against configurable\\nPython2 and Python3 based virtual environments. Environments are\\nsetup by using virtualenv. Configuration is generally done through an\\nINI-style \"tox.ini\" file.\\n\"\"\"\\nfrom __future__ import absolute_import, unicode_literals\\n\\nimport json\\nimport os\\nimport re\\nimport subprocess\\nimport sys\\nfrom collections import OrderedDict\\nfrom contextlib import contextmanager\\n\\nimport py\\n\\nimport tox\\nfrom tox import reporter\\nfrom tox.action import Action\\nfrom tox.config import INTERRUPT_TIMEOUT, SUICIDE_TIMEOUT, TERMINATE_TIMEOUT, parseconfig\\nfrom tox.config.parallel import ENV_VAR_KEY_PRIVATE as PARALLEL_ENV_VAR_KEY_PRIVATE\\nfrom tox.config.parallel import OFF_VALUE as PARALLEL_OFF\\nfrom tox.logs.result import ResultLog\\nfrom tox.reporter import update_default_reporter\\nfrom tox.util import set_os_env_var\\nfrom tox.util.graph import stable_topological_sort\\nfrom tox.util.stdlib import suppress_output\\nfrom tox.venv import VirtualEnv\\n\\nfrom .commands.help import show_help\\nfrom .commands.help_ini import show_help_ini\\nfrom .commands.provision import provision_tox\\nfrom .commands.run.parallel import run_parallel\\nfrom .commands.run.sequential import run_sequential\\nfrom .commands.show_config import show_config\\nfrom .commands.show_env import show_envs\\n\\n\\ndef cmdline(args=None):\\n    if args is None:\\n        args = sys.argv[1:]\\n    main(args)\\n\\n\\ndef setup_reporter(args):\\n    from argparse import ArgumentParser\\n\\n    from tox.config.reporter import add_verbosity_commands\\n\\n    parser = ArgumentParser(add_help=False)\\n    add_verbosity_commands(parser)\\n    with suppress_output():\\n        try:\\n            options, _ = parser.parse_known_args(args)\\n            update_default_reporter(options.quiet_level, options.verbose_level)\\n        except SystemExit:\\n            pass\\n\\n\\ndef main(args):\\n    setup_reporter(args)\\n    try:\\n        config = load_config(args)\\n        config.logdir.ensure(dir=1)\\n        with set_os_env_var(str(\"TOX_WORK_DIR\"), config.toxworkdir):\\n            session = build_session(config)\\n            exit_code = session.runcommand()\\n        if exit_code is None:\\n            exit_code = 0\\n        raise SystemExit(exit_code)\\n    except tox.exception.BadRequirement:\\n        raise SystemExit(1)\\n    except KeyboardInterrupt:\\n        raise SystemExit(2)\\n\\n\\ndef load_config(args):\\n    try:\\n        config = parseconfig(args)\\n        if config.option.help:\\n            show_help(config)\\n            raise SystemExit(0)\\n        elif config.option.helpini:\\n            show_help_ini(config)\\n            raise SystemExit(0)\\n    except tox.exception.MissingRequirement as exception:\\n        config = exception.config\\n    return config\\n\\n\\ndef build_session(config):\\n    return Session(config)\\n\\n\\nclass Session(object):\\n    \"\"\"The session object that ties together configuration, reporting, venv creation, testing.\"\"\"\\n\\n    def __init__(self, config, popen=subprocess.Popen):\\n        self._reset(config, popen)\\n\\n    def _reset(self, config, popen=subprocess.Popen):\\n        self.config = config\\n        self.popen = popen\\n        self.resultlog = ResultLog()\\n        self.existing_venvs = OrderedDict()\\n        self.venv_dict = {} if self.config.run_provision else self._build_venvs()\\n\\n    def _build_venvs(self):\\n        try:\\n            need_to_run = OrderedDict((v, self.getvenv(v)) for v in self._evaluated_env_list)\\n            try:\\n                venv_order = stable_topological_sort(\\n                    OrderedDict((name, v.envconfig.depends) for name, v in need_to_run.items()),\\n                )\\n\\n                venvs = OrderedDict((v, need_to_run[v]) for v in venv_order)\\n                return venvs\\n            except ValueError as exception:\\n                reporter.error(\"circular dependency detected: {}\".format(exception))\\n        except LookupError:\\n            pass\\n        except tox.exception.ConfigError as exception:\\n            reporter.error(str(exception))\\n        raise SystemExit(1)\\n\\n    def getvenv(self, name):\\n        if name in self.existing_venvs:\\n            return self.existing_venvs[name]\\n        env_config = self.config.envconfigs.get(name, None)\\n        if env_config is None:\\n            reporter.error(\"unknown environment {!r}\".format(name))\\n            raise LookupError(name)\\n        elif env_config.envdir == self.config.toxinidir:\\n            reporter.error(\"venv {!r} in {} would delete project\".format(name, env_config.envdir))\\n            raise tox.exception.ConfigError(\"envdir must not equal toxinidir\")\\n        env_log = self.resultlog.get_envlog(name)\\n        venv = VirtualEnv(envconfig=env_config, popen=self.popen, env_log=env_log)\\n        self.existing_venvs[name] = venv\\n        return venv\\n\\n    @property\\n    def _evaluated_env_list(self):\\n        tox_env_filter = os.environ.get(\"TOX_SKIP_ENV\")\\n        tox_env_filter_re = re.compile(tox_env_filter) if tox_env_filter is not None else None\\n        visited = set()\\n        for name in self.config.envlist:\\n            if name in visited:\\n                continue\\n            visited.add(name)\\n            if tox_env_filter_re is not None and tox_env_filter_re.match(name):\\n                msg = \"skip environment {}, matches filter {!r}\".format(\\n                    name,\\n                    tox_env_filter_re.pattern,\\n                )\\n                reporter.verbosity1(msg)\\n                continue\\n            yield name\\n\\n    @property\\n    def hook(self):\\n        return self.config.pluginmanager.hook\\n\\n    def newaction(self, name, msg, *args):\\n        return Action(\\n            name,\\n            msg,\\n            args,\\n            self.config.logdir,\\n            self.config.option.resultjson,\\n            self.resultlog.command_log,\\n            self.popen,\\n            sys.executable,\\n            SUICIDE_TIMEOUT,\\n            INTERRUPT_TIMEOUT,\\n            TERMINATE_TIMEOUT,\\n        )\\n\\n    def runcommand(self):\\n        reporter.using(\\n            \"tox-{} from {} (pid {})\".format(tox.__version__, tox.__file__, os.getpid()),\\n        )\\n        show_description = reporter.has_level(reporter.Verbosity.DEFAULT)\\n        if self.config.run_provision:\\n            provision_tox_venv = self.getvenv(self.config.provision_tox_env)\\n            return provision_tox(provision_tox_venv, self.config.args)\\n        else:\\n            if self.config.option.showconfig:\\n                self.showconfig()\\n            elif self.config.option.listenvs:\\n                self.showenvs(all_envs=False, description=show_description)\\n            elif self.config.option.listenvs_all:\\n                self.showenvs(all_envs=True, description=show_description)\\n            else:\\n                with self.cleanup():\\n                    return self.subcommand_test()\\n\\n    @contextmanager\\n    def cleanup(self):\\n        self.config.temp_dir.ensure(dir=True)\\n        try:\\n            yield\\n        finally:\\n            self.hook.tox_cleanup(session=self)\\n\\n    def subcommand_test(self):\\n        if self.config.skipsdist:\\n            reporter.info(\"skipping sdist step\")\\n        else:\\n            for venv in self.venv_dict.values():\\n                if not venv.envconfig.skip_install:\\n                    venv.package = self.hook.tox_package(session=self, venv=venv)\\n                    if not venv.package:\\n                        return 2\\n                    venv.envconfig.setenv[str(\"TOX_PACKAGE\")] = str(venv.package)\\n        if self.config.option.sdistonly:\\n            return\\n\\n        within_parallel = PARALLEL_ENV_VAR_KEY_PRIVATE in os.environ\\n        try:\\n            if not within_parallel and self.config.option.parallel != PARALLEL_OFF:\\n                run_parallel(self.config, self.venv_dict)\\n            else:\\n                run_sequential(self.config, self.venv_dict)\\n        finally:\\n            retcode = self._summary()\\n        return retcode\\n\\n    def _add_parallel_summaries(self):\\n        if self.config.option.parallel != PARALLEL_OFF and \"testenvs\" in self.resultlog.dict:\\n            result_log = self.resultlog.dict[\"testenvs\"]\\n            for tox_env in self.venv_dict.values():\\n                data = self._load_parallel_env_report(tox_env)\\n                if data and \"testenvs\" in data and tox_env.name in data[\"testenvs\"]:\\n                    result_log[tox_env.name] = data[\"testenvs\"][tox_env.name]\\n\\n    @staticmethod\\n    def _load_parallel_env_report(tox_env):\\n        \"\"\"Load report data into memory, remove disk file\"\"\"\\n        result_json_path = tox_env.get_result_json_path()\\n        if result_json_path and result_json_path.exists():\\n            with result_json_path.open(\"r\") as file_handler:\\n                data = json.load(file_handler)\\n            result_json_path.remove()\\n            return data\\n\\n    def _summary(self):\\n        is_parallel_child = PARALLEL_ENV_VAR_KEY_PRIVATE in os.environ\\n        if not is_parallel_child:\\n            reporter.separator(\"_\", \"summary\", reporter.Verbosity.QUIET)\\n        exit_code = 0\\n        for venv in self.venv_dict.values():\\n            report = reporter.good\\n            status = getattr(venv, \"status\", \"undefined\")\\n            if isinstance(status, tox.exception.InterpreterNotFound):\\n                msg = \" {}: {}\".format(venv.envconfig.envname, str(status))\\n                if self.config.option.skip_missing_interpreters == \"true\":\\n                    report = reporter.skip\\n                else:\\n                    exit_code = 1\\n                    report = reporter.error\\n            elif status == \"platform mismatch\":\\n                msg = \" {}: {} ({!r} does not match {!r})\".format(\\n                    venv.envconfig.envname,\\n                    str(status),\\n                    sys.platform,\\n                    venv.envconfig.platform,\\n                )\\n                report = reporter.skip\\n            elif status and status == \"ignored failed command\":\\n                msg = \"  {}: {}\".format(venv.envconfig.envname, str(status))\\n            elif status and status != \"skipped tests\":\\n                msg = \"  {}: {}\".format(venv.envconfig.envname, str(status))\\n                report = reporter.error\\n                exit_code = 1\\n            else:\\n                if not status:\\n                    status = \"commands succeeded\"\\n                msg = \"  {}: {}\".format(venv.envconfig.envname, status)\\n            if not is_parallel_child:\\n                report(msg)\\n        if not exit_code and not is_parallel_child:\\n            reporter.good(\"  congratulations :)\")\\n        path = self.config.option.resultjson\\n        if path:\\n            if not is_parallel_child:\\n                self._add_parallel_summaries()\\n            path = py.path.local(path)\\n            data = self.resultlog.dumps_json()\\n            reporter.line(\"write json report at: {}\".format(path))\\n            path.write(data)\\n        return exit_code\\n\\n    def showconfig(self):\\n        show_config(self.config)\\n\\n    def showenvs(self, all_envs=False, description=False):\\n        show_envs(self.config, all_envs=all_envs, description=description)\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/__init__.py'"}, "return_value": "b''"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/help.py'"}, "return_value": "b'from tox import reporter\\n\\n\\ndef show_help(config):\\n    reporter.line(config._parser._format_help())\\n    reporter.line(\"Environment variables\", bold=True)\\n    reporter.line(\"TOXENV: comma separated list of environments (overridable by \\'-e\\')\")\\n    reporter.line(\"TOX_SKIP_ENV: regular expression to filter down from running tox environments\")\\n    reporter.line(\\n        \"TOX_TESTENV_PASSENV: space-separated list of extra environment variables to be \"\\n        \"passed into test command environments\",\\n    )\\n    reporter.line(\"PY_COLORS: 0 disable colorized output, 1 enable (default)\")\\n    reporter.line(\"TOX_PARALLEL_NO_SPINNER: 1 disable spinner for CI, 0 enable (default)\")\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/help_ini.py'"}, "return_value": "b'from tox import reporter\\n\\n\\ndef show_help_ini(config):\\n    reporter.separator(\"-\", \"per-testenv attributes\", reporter.Verbosity.INFO)\\n    for env_attr in config._testenv_attr:\\n        reporter.line(\\n            \"{:<15} {:<8} default: {}\".format(\\n                env_attr.name,\\n                \"<{}>\".format(env_attr.type),\\n                env_attr.default,\\n            ),\\n            bold=True,\\n        )\\n        reporter.line(env_attr.help)\\n        reporter.line(\"\")\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/provision.py'"}, "return_value": "b'\"\"\"In case the tox environment is not correctly setup provision it and delegate execution\"\"\"\\nfrom __future__ import absolute_import, unicode_literals\\n\\nimport os\\n\\nfrom tox.exception import InvocationError\\n\\n\\ndef provision_tox(provision_venv, args):\\n    ensure_meta_env_up_to_date(provision_venv)\\n    with provision_venv.new_action(\"provision\") as action:\\n        provision_args = [str(provision_venv.envconfig.envpython), \"-m\", \"tox\"] + args\\n        try:\\n            env = os.environ.copy()\\n            env[str(\"TOX_PROVISION\")] = str(\"1\")\\n            env.pop(\"__PYVENV_LAUNCHER__\", None)\\n            action.popen(provision_args, redirect=False, report_fail=False, env=env)\\n            return 0\\n        except InvocationError as exception:\\n            return exception.exit_code\\n\\n\\ndef ensure_meta_env_up_to_date(provision_venv):\\n    if provision_venv.setupenv():\\n        provision_venv.finishvenv()\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/run/__init__.py'"}, "return_value": "b''"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/run/parallel.py'"}, "return_value": "b'import os\\nimport sys\\nfrom collections import OrderedDict, deque\\nfrom threading import Event, Semaphore, Thread\\n\\nfrom tox import reporter\\nfrom tox.config.parallel import ENV_VAR_KEY_PRIVATE as PARALLEL_ENV_VAR_KEY_PRIVATE\\nfrom tox.config.parallel import ENV_VAR_KEY_PUBLIC as PARALLEL_ENV_VAR_KEY_PUBLIC\\nfrom tox.exception import InvocationError\\nfrom tox.util.main import MAIN_FILE\\nfrom tox.util.spinner import Spinner\\n\\n\\ndef run_parallel(config, venv_dict):\\n    \"\"\"here we\\'ll just start parallel sub-processes\"\"\"\\n    live_out = config.option.parallel_live\\n    disable_spinner = bool(os.environ.get(\"TOX_PARALLEL_NO_SPINNER\") == \"1\")\\n    args = [sys.executable, MAIN_FILE] + config.args\\n    try:\\n        position = args.index(\"--\")\\n    except ValueError:\\n        position = len(args)\\n\\n    max_parallel = config.option.parallel\\n    if max_parallel is None:\\n        max_parallel = len(venv_dict)\\n    semaphore = Semaphore(max_parallel)\\n    finished = Event()\\n\\n    show_progress = (\\n        not disable_spinner and not live_out and reporter.verbosity() > reporter.Verbosity.QUIET\\n    )\\n\\n    with Spinner(enabled=show_progress) as spinner:\\n\\n        def run_in_thread(tox_env, os_env, processes):\\n            output = None\\n            print_out = None\\n            env_name = tox_env.envconfig.envname\\n            status = \"skipped tests\" if config.option.notest else None\\n            try:\\n                os_env[str(PARALLEL_ENV_VAR_KEY_PRIVATE)] = str(env_name)\\n                os_env[str(PARALLEL_ENV_VAR_KEY_PUBLIC)] = str(env_name)\\n                args_sub = list(args)\\n                if hasattr(tox_env, \"package\"):\\n                    args_sub.insert(position, str(tox_env.package))\\n                    args_sub.insert(position, \"--installpkg\")\\n                if tox_env.get_result_json_path():\\n                    result_json_index = args_sub.index(\"--result-json\")\\n                    args_sub[result_json_index + 1] = \"{}\".format(tox_env.get_result_json_path())\\n                with tox_env.new_action(\"parallel {}\".format(tox_env.name)) as action:\\n\\n                    def collect_process(process):\\n                        processes[tox_env] = (action, process)\\n\\n                    print_out = not live_out and tox_env.envconfig.parallel_show_output\\n                    output = action.popen(\\n                        args=args_sub,\\n                        env=os_env,\\n                        redirect=not live_out,\\n                        capture_err=print_out,\\n                        callback=collect_process,\\n                        returnout=print_out,\\n                    )\\n\\n            except InvocationError as err:\\n                status = \"parallel child exit code {}\".format(err.exit_code)\\n            finally:\\n                semaphore.release()\\n                finished.set()\\n                tox_env.status = status\\n                done.add(env_name)\\n                outcome = spinner.succeed\\n                if config.option.notest:\\n                    outcome = spinner.skip\\n                elif status is not None:\\n                    outcome = spinner.fail\\n                outcome(env_name)\\n                if print_out and output is not None:\\n                    reporter.verbosity0(output)\\n\\n        threads = deque()\\n        processes = {}\\n        todo_keys = set(venv_dict.keys())\\n        todo = OrderedDict((n, todo_keys & set(v.envconfig.depends)) for n, v in venv_dict.items())\\n        done = set()\\n        try:\\n            while todo:\\n                for name, depends in list(todo.items()):\\n                    if depends - done:\\n                        # skip if has unfinished dependencies\\n                        continue\\n                    del todo[name]\\n                    venv = venv_dict[name]\\n                    semaphore.acquire(blocking=True)\\n                    spinner.add(name)\\n                    thread = Thread(\\n                        target=run_in_thread,\\n                        args=(venv, os.environ.copy(), processes),\\n                    )\\n                    thread.daemon = True\\n                    thread.start()\\n                    threads.append(thread)\\n                if todo:\\n                    # wait until someone finishes and retry queuing jobs\\n                    finished.wait()\\n                    finished.clear()\\n            while threads:\\n                threads = [\\n                    thread for thread in threads if not thread.join(0.1) and thread.is_alive()\\n                ]\\n        except KeyboardInterrupt:\\n            reporter.verbosity0(\\n                \"[{}] KeyboardInterrupt parallel - stopping children\".format(os.getpid()),\\n            )\\n            while True:\\n                # do not allow to interrupt until children interrupt\\n                try:\\n                    # putting it inside a thread so it\\'s not interrupted\\n                    stopper = Thread(target=_stop_child_processes, args=(processes, threads))\\n                    stopper.start()\\n                    stopper.join()\\n                except KeyboardInterrupt:\\n                    continue\\n                raise KeyboardInterrupt\\n\\n\\ndef _stop_child_processes(processes, main_threads):\\n    \"\"\"A three level stop mechanism for children - INT (250ms) -> TERM (100ms) -> KILL\"\"\"\\n\\n    # first stop children\\n    def shutdown(tox_env, action, process):\\n        action.handle_interrupt(process)\\n\\n    threads = [Thread(target=shutdown, args=(n, a, p)) for n, (a, p) in processes.items()]\\n    for thread in threads:\\n        thread.start()\\n    for thread in threads:\\n        thread.join()\\n\\n    # then its threads\\n    for thread in main_threads:\\n        thread.join()\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/run/sequential.py'"}, "return_value": "b'import py\\n\\nimport tox\\nfrom tox.exception import InvocationError\\n\\n\\ndef run_sequential(config, venv_dict):\\n    for venv in venv_dict.values():\\n        if venv.setupenv():\\n            if venv.envconfig.skip_install:\\n                venv.finishvenv()\\n            else:\\n                if venv.envconfig.usedevelop:\\n                    develop_pkg(venv, config.setupdir)\\n                elif config.skipsdist:\\n                    venv.finishvenv()\\n                else:\\n                    installpkg(venv, venv.package)\\n            if venv.status == 0:\\n                runenvreport(venv, config)\\n        if venv.status == 0:\\n            runtestenv(venv, config)\\n\\n\\ndef develop_pkg(venv, setupdir):\\n    with venv.new_action(\"developpkg\", setupdir) as action:\\n        try:\\n            venv.developpkg(setupdir, action)\\n            return True\\n        except InvocationError as exception:\\n            venv.status = exception\\n            return False\\n\\n\\ndef installpkg(venv, path):\\n    \"\"\"Install package in the specified virtual environment.\\n\\n    :param VenvConfig venv: Destination environment\\n    :param str path: Path to the distribution package.\\n    :return: True if package installed otherwise False.\\n    :rtype: bool\\n    \"\"\"\\n    venv.env_log.set_header(installpkg=py.path.local(path))\\n    with venv.new_action(\"installpkg\", path) as action:\\n        try:\\n            venv.installpkg(path, action)\\n            return True\\n        except tox.exception.InvocationError as exception:\\n            venv.status = exception\\n            return False\\n\\n\\ndef runenvreport(venv, config):\\n    \"\"\"\\n    Run an environment report to show which package\\n    versions are installed in the venv\\n    \"\"\"\\n    try:\\n        with venv.new_action(\"envreport\") as action:\\n            packages = config.pluginmanager.hook.tox_runenvreport(venv=venv, action=action)\\n        action.setactivity(\"installed\", \",\".join(packages))\\n        venv.env_log.set_installed(packages)\\n    except InvocationError as exception:\\n        venv.status = exception\\n\\n\\ndef runtestenv(venv, config, redirect=False):\\n    if venv.status == 0 and config.option.notest:\\n        venv.status = \"skipped tests\"\\n    else:\\n        if venv.status:\\n            return\\n        config.pluginmanager.hook.tox_runtest_pre(venv=venv)\\n        if venv.status == 0:\\n            config.pluginmanager.hook.tox_runtest(venv=venv, redirect=redirect)\\n        config.pluginmanager.hook.tox_runtest_post(venv=venv)\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/show_config.py'"}, "return_value": "b'import sys\\nfrom collections import OrderedDict\\n\\nfrom packaging.requirements import Requirement\\nfrom six import StringIO\\nfrom six.moves import configparser\\n\\nfrom tox import reporter\\nfrom tox.util.stdlib import importlib_metadata\\n\\nDO_NOT_SHOW_CONFIG_ATTRIBUTES = (\\n    \"interpreters\",\\n    \"envconfigs\",\\n    \"envlist\",\\n    \"pluginmanager\",\\n    \"envlist_explicit\",\\n)\\n\\n\\ndef show_config(config):\\n    parser = configparser.RawConfigParser()\\n\\n    if not config.envlist_explicit or reporter.verbosity() >= reporter.Verbosity.INFO:\\n        tox_info(config, parser)\\n        version_info(parser)\\n    tox_envs_info(config, parser)\\n\\n    content = StringIO()\\n    parser.write(content)\\n    value = content.getvalue().rstrip()\\n    reporter.verbosity0(value)\\n\\n\\ndef tox_envs_info(config, parser):\\n    if config.envlist_explicit:\\n        env_list = config.envlist\\n    elif config.option.listenvs:\\n        env_list = config.envlist_default\\n    else:\\n        env_list = list(config.envconfigs.keys())\\n    for name in env_list:\\n        env_config = config.envconfigs[name]\\n        values = OrderedDict(\\n            (attr.name, str(getattr(env_config, attr.name)))\\n            for attr in config._parser._testenv_attr\\n        )\\n        section = \"testenv:{}\".format(name)\\n        set_section(parser, section, values)\\n\\n\\ndef tox_info(config, parser):\\n    info = OrderedDict(\\n        (i, str(getattr(config, i)))\\n        for i in sorted(dir(config))\\n        if not i.startswith(\"_\") and i not in DO_NOT_SHOW_CONFIG_ATTRIBUTES\\n    )\\n    info[\"host_python\"] = sys.executable\\n    set_section(parser, \"tox\", info)\\n\\n\\ndef version_info(parser):\\n    versions = OrderedDict()\\n    to_visit = {\"tox\"}\\n    while to_visit:\\n        current = to_visit.pop()\\n        current_dist = importlib_metadata.distribution(current)\\n        current_name = current_dist.metadata[\"name\"]\\n        versions[current_name] = current_dist.version\\n        if current_dist.requires is not None:\\n            for require in current_dist.requires:\\n                pkg = Requirement(require)\\n                if (\\n                    pkg.marker is None or pkg.marker.evaluate({\"extra\": \"\"})\\n                ) and pkg.name not in versions:\\n                    to_visit.add(pkg.name)\\n    set_section(parser, \"tox:versions\", versions)\\n\\n\\ndef set_section(parser, section, values):\\n    parser.add_section(section)\\n    for key, value in values.items():\\n        parser.set(section, key, value)\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/show_env.py'"}, "return_value": "b'from __future__ import absolute_import, unicode_literals\\n\\nfrom tox import reporter as report\\n\\n\\ndef show_envs(config, all_envs=False, description=False):\\n    env_conf = config.envconfigs  # this contains all environments\\n    default = config.envlist_default  # this only the defaults\\n    ignore = {config.isolated_build_env, config.provision_tox_env}.union(default)\\n    extra = [e for e in env_conf if e not in ignore] if all_envs else []\\n\\n    if description and default:\\n        report.line(\"default environments:\")\\n    max_length = max(len(env) for env in (default + extra) or [\"\"])\\n\\n    def report_env(e):\\n        if description:\\n            text = env_conf[e].description or \"[no description]\"\\n            msg = \"{} -> {}\".format(e.ljust(max_length), text).strip()\\n        else:\\n            msg = e\\n        report.line(msg)\\n\\n    for e in default:\\n        report_env(e)\\n    if all_envs and extra:\\n        if description:\\n            if default:\\n                report.line(\"\")\\n            report.line(\"additional environments:\")\\n        for e in extra:\\n            report_env(e)\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/util/__init__.py'"}, "return_value": "b'from __future__ import absolute_import, unicode_literals\\n\\nimport os\\nfrom contextlib import contextmanager\\n\\n\\n@contextmanager\\ndef set_os_env_var(env_var_name, value):\\n    \"\"\"Set an environment variable with unrolling once the context exists\"\"\"\\n    prev_value = os.environ.get(env_var_name)\\n    try:\\n        os.environ[env_var_name] = str(value)\\n        yield\\n    finally:\\n        if prev_value is None:\\n            del os.environ[env_var_name]\\n        else:\\n            os.environ[env_var_name] = prev_value\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/util/graph.py'"}, "return_value": "b'from __future__ import absolute_import, unicode_literals\\n\\nfrom collections import OrderedDict, defaultdict\\n\\n\\ndef stable_topological_sort(graph):\\n    to_order = set(graph.keys())  # keep a log of what  we need to order\\n\\n    # normalize graph - fill missing nodes (assume no dependency)\\n    for values in list(graph.values()):\\n        for value in values:\\n            if value not in graph:\\n                graph[value] = ()\\n\\n    inverse_graph = defaultdict(set)\\n    for key, depends in graph.items():\\n        for depend in depends:\\n            inverse_graph[depend].add(key)\\n\\n    topology = []\\n    degree = {k: len(v) for k, v in graph.items()}\\n    ready_to_visit = {n for n, d in degree.items() if not d}\\n    need_to_visit = OrderedDict((i, None) for i in graph.keys())\\n    while need_to_visit:\\n        # to keep stable, pick the first node ready to visit in the original order\\n        for node in need_to_visit:\\n            if node in ready_to_visit:\\n                break\\n        else:\\n            break\\n        del need_to_visit[node]\\n\\n        topology.append(node)\\n\\n        # decrease degree for nodes we\\'re going too\\n        for to_node in inverse_graph[node]:\\n            degree[to_node] -= 1\\n            if not degree[to_node]:  # if a node has no more incoming node it\\'s ready to visit\\n                ready_to_visit.add(to_node)\\n\\n    result = [n for n in topology if n in to_order]  # filter out missing nodes we extended\\n\\n    if len(result) < len(to_order):\\n        identify_cycle(graph)\\n        msg = \"could not order tox environments and failed to detect circle\"  # pragma: no cover\\n        raise ValueError(msg)  # pragma: no cover\\n    return result\\n\\n\\ndef identify_cycle(graph):\\n    path = OrderedDict()\\n    visited = set()\\n\\n    def visit(vertex):\\n        if vertex in visited:\\n            return None\\n        visited.add(vertex)\\n        path[vertex] = None\\n        for neighbour in graph.get(vertex, ()):\\n            if neighbour in path or visit(neighbour):\\n                return path\\n        del path[vertex]\\n        return None\\n\\n    for node in graph:\\n        result = visit(node)\\n        if result is not None:\\n            raise ValueError(\"{}\".format(\" | \".join(result.keys())))\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/util/lock.py'"}, "return_value": "b'\"\"\"holds locking functionality that works across processes\"\"\"\\nfrom __future__ import absolute_import, unicode_literals\\n\\nfrom contextlib import contextmanager\\n\\nimport py\\nfrom filelock import FileLock, Timeout\\n\\nfrom tox.reporter import verbosity1\\n\\n\\n@contextmanager\\ndef hold_lock(lock_file, reporter=verbosity1):\\n    py.path.local(lock_file.dirname).ensure(dir=1)\\n    lock = FileLock(str(lock_file))\\n    try:\\n        try:\\n            lock.acquire(0.0001)\\n        except Timeout:\\n            reporter(\"lock file {} present, will block until released\".format(lock_file))\\n            lock.acquire()\\n        yield\\n    finally:\\n        lock.release(force=True)\\n\\n\\ndef get_unique_file(path, prefix, suffix):\\n    \"\"\"get a unique file in a folder having a given prefix and suffix,\\n    with unique number in between\"\"\"\\n    lock_file = path.join(\".lock\")\\n    prefix = \"{}-\".format(prefix)\\n    with hold_lock(lock_file):\\n        max_value = -1\\n        for candidate in path.listdir(\"{}*{}\".format(prefix, suffix)):\\n            try:\\n                max_value = max(max_value, int(candidate.basename[len(prefix) : -len(suffix)]))\\n            except ValueError:\\n                continue\\n        winner = path.join(\"{}{}{}\".format(prefix, max_value + 1, suffix))\\n        winner.ensure(dir=0)\\n        return winner\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/util/main.py'"}, "return_value": "b'import inspect\\nimport os\\n\\nimport tox\\n\\nMAIN_FILE = os.path.join(os.path.dirname(inspect.getfile(tox)), \"__main__.py\")\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/util/path.py'"}, "return_value": "b'import shutil\\n\\nfrom tox import reporter\\n\\n\\ndef ensure_empty_dir(path):\\n    if path.check():\\n        reporter.info(\"  removing {}\".format(path))\\n        shutil.rmtree(str(path), ignore_errors=True)\\n        path.ensure(dir=1)\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/util/spinner.py'"}, "return_value": "b'# -*- coding: utf-8 -*-\\n\"\"\"A minimal non-colored version of https://pypi.org/project/halo, to track list progress\"\"\"\\nfrom __future__ import absolute_import, unicode_literals\\n\\nimport os\\nimport sys\\nimport threading\\nfrom collections import OrderedDict, namedtuple\\nfrom datetime import datetime\\n\\nimport py\\n\\nthreads = []\\n\\nif os.name == \"nt\":\\n    import ctypes\\n\\n    class _CursorInfo(ctypes.Structure):\\n        _fields_ = [(\"size\", ctypes.c_int), (\"visible\", ctypes.c_byte)]\\n\\n\\n_BaseMessage = namedtuple(\"_BaseMessage\", [\"unicode_msg\", \"ascii_msg\"])\\n\\n\\nclass SpinnerMessage(_BaseMessage):\\n    def for_file(self, file):\\n        try:\\n            self.unicode_msg.encode(file.encoding)\\n        except (AttributeError, TypeError, UnicodeEncodeError):\\n            return self.ascii_msg\\n        else:\\n            return self.unicode_msg\\n\\n\\nclass Spinner(object):\\n    CLEAR_LINE = \"\\\\033[K\"\\n    max_width = 120\\n    FRAMES = SpinnerMessage(\"\\xe2\\xa0\\x8b\\xe2\\xa0\\x99\\xe2\\xa0\\xb9\\xe2\\xa0\\xb8\\xe2\\xa0\\xbc\\xe2\\xa0\\xb4\\xe2\\xa0\\xa6\\xe2\\xa0\\xa7\\xe2\\xa0\\x87\\xe2\\xa0\\x8f\", \"|-+x*\")\\n    OK_FLAG = SpinnerMessage(\"\\xe2\\x9c\\x94 OK\", \"[ OK ]\")\\n    FAIL_FLAG = SpinnerMessage(\"\\xe2\\x9c\\x96 FAIL\", \"[FAIL]\")\\n    SKIP_FLAG = SpinnerMessage(\"\\xe2\\x9a\\xa0 SKIP\", \"[SKIP]\")\\n\\n    def __init__(self, enabled=True, refresh_rate=0.1):\\n        self.refresh_rate = refresh_rate\\n        self.enabled = enabled\\n        self._file = sys.stdout\\n        self.frames = self.FRAMES.for_file(self._file)\\n        self.stream = py.io.TerminalWriter(file=self._file)\\n        self._envs = OrderedDict()\\n        self._frame_index = 0\\n\\n    def clear(self):\\n        if self.enabled:\\n            self.stream.write(\"\\\\r\")\\n            self.stream.write(self.CLEAR_LINE)\\n\\n    def render(self):\\n        while True:\\n            self._stop_spinner.wait(self.refresh_rate)\\n            if self._stop_spinner.is_set():\\n                break\\n            self.render_frame()\\n        return self\\n\\n    def render_frame(self):\\n        if self.enabled:\\n            self.clear()\\n            self.stream.write(\"\\\\r{}\".format(self.frame()))\\n\\n    def frame(self):\\n        frame = self.frames[self._frame_index]\\n        self._frame_index += 1\\n        self._frame_index = self._frame_index % len(self.frames)\\n        text_frame = \"[{}] {}\".format(len(self._envs), \" | \".join(self._envs))\\n        if len(text_frame) > self.max_width - 1:\\n            text_frame = \"{}...\".format(text_frame[: self.max_width - 1 - 3])\\n        return \"{} {}\".format(*[(frame, text_frame)][0])\\n\\n    def __enter__(self):\\n        if self.enabled:\\n            self.disable_cursor()\\n        self.render_frame()\\n        self._stop_spinner = threading.Event()\\n        self._spinner_thread = threading.Thread(target=self.render)\\n        self._spinner_thread.daemon = True\\n        self._spinner_thread.start()\\n        return self\\n\\n    def __exit__(self, exc_type, exc_val, exc_tb):\\n        if not self._stop_spinner.is_set():\\n            if self._spinner_thread:\\n                self._stop_spinner.set()\\n                self._spinner_thread.join()\\n\\n            self._frame_index = 0\\n            if self.enabled:\\n                self.clear()\\n                self.enable_cursor()\\n\\n        return self\\n\\n    def add(self, name):\\n        self._envs[name] = datetime.now()\\n\\n    def succeed(self, key):\\n        self.finalize(key, self.OK_FLAG.for_file(self._file), green=True)\\n\\n    def fail(self, key):\\n        self.finalize(key, self.FAIL_FLAG.for_file(self._file), red=True)\\n\\n    def skip(self, key):\\n        self.finalize(key, self.SKIP_FLAG.for_file(self._file), white=True)\\n\\n    def finalize(self, key, status, **kwargs):\\n        start_at = self._envs[key]\\n        del self._envs[key]\\n        if self.enabled:\\n            self.clear()\\n        self.stream.write(\\n            \"{} {} in {}{}\".format(\\n                status,\\n                key,\\n                td_human_readable(datetime.now() - start_at),\\n                os.linesep,\\n            ),\\n            **kwargs\\n        )\\n        if not self._envs:\\n            self.__exit__(None, None, None)\\n\\n    def disable_cursor(self):\\n        if self._file.isatty():\\n            if os.name == \"nt\":\\n                ci = _CursorInfo()\\n                handle = ctypes.windll.kernel32.GetStdHandle(-11)\\n                ctypes.windll.kernel32.GetConsoleCursorInfo(handle, ctypes.byref(ci))\\n                ci.visible = False\\n                ctypes.windll.kernel32.SetConsoleCursorInfo(handle, ctypes.byref(ci))\\n            elif os.name == \"posix\":\\n                self.stream.write(\"\\\\033[?25l\")\\n\\n    def enable_cursor(self):\\n        if self._file.isatty():\\n            if os.name == \"nt\":\\n                ci = _CursorInfo()\\n                handle = ctypes.windll.kernel32.GetStdHandle(-11)\\n                ctypes.windll.kernel32.GetConsoleCursorInfo(handle, ctypes.byref(ci))\\n                ci.visible = True\\n                ctypes.windll.kernel32.SetConsoleCursorInfo(handle, ctypes.byref(ci))\\n            elif os.name == \"posix\":\\n                self.stream.write(\"\\\\033[?25h\")\\n\\n\\ndef td_human_readable(delta):\\n    seconds = int(delta.total_seconds())\\n    periods = [\\n        (\"year\", 60 * 60 * 24 * 365),\\n        (\"month\", 60 * 60 * 24 * 30),\\n        (\"day\", 60 * 60 * 24),\\n        (\"hour\", 60 * 60),\\n        (\"minute\", 60),\\n        (\"second\", 1),\\n    ]\\n\\n    texts = []\\n    for period_name, period_seconds in periods:\\n        if seconds > period_seconds or period_seconds == 1:\\n            period_value, seconds = divmod(seconds, period_seconds)\\n            if period_name == \"second\":\\n                ms = delta.total_seconds() - int(delta.total_seconds())\\n                period_value = round(period_value + ms, 3)\\n            has_s = \"s\" if period_value != 1 else \"\"\\n            texts.append(\"{} {}{}\".format(period_value, period_name, has_s))\\n    return \", \".join(texts)\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/util/stdlib.py'"}, "return_value": "b'import sys\\nimport threading\\nfrom contextlib import contextmanager\\nfrom tempfile import TemporaryFile\\n\\nif sys.version_info >= (3, 8):\\n    from importlib import metadata as importlib_metadata  # noqa\\nelse:\\n    import importlib_metadata  # noqa\\n\\n\\ndef is_main_thread():\\n    \"\"\"returns true if we are within the main thread\"\"\"\\n    cur_thread = threading.current_thread()\\n    if sys.version_info >= (3, 4):\\n        return cur_thread is threading.main_thread()\\n    else:\\n        # noinspection PyUnresolvedReferences\\n        return isinstance(cur_thread, threading._MainThread)\\n\\n\\n# noinspection PyPep8Naming\\n@contextmanager\\ndef suppress_output():\\n    \"\"\"suppress both stdout and stderr outputs\"\"\"\\n    if sys.version_info >= (3, 5):\\n        from contextlib import redirect_stderr, redirect_stdout\\n    else:\\n\\n        class _RedirectStream(object):\\n\\n            _stream = None\\n\\n            def __init__(self, new_target):\\n                self._new_target = new_target\\n                self._old_targets = []\\n\\n            def __enter__(self):\\n                self._old_targets.append(getattr(sys, self._stream))\\n                setattr(sys, self._stream, self._new_target)\\n                return self._new_target\\n\\n            def __exit__(self, exctype, excinst, exctb):\\n                setattr(sys, self._stream, self._old_targets.pop())\\n\\n        class redirect_stdout(_RedirectStream):\\n            _stream = \"stdout\"\\n\\n        class redirect_stderr(_RedirectStream):\\n            _stream = \"stderr\"\\n\\n    with TemporaryFile(\"wt\") as file:\\n        with redirect_stdout(file):\\n            with redirect_stderr(file):\\n                yield\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/venv.py'"}, "return_value": "b'import codecs\\nimport json\\nimport os\\nimport pipes\\nimport re\\nimport sys\\nfrom itertools import chain\\n\\nimport py\\n\\nimport tox\\nfrom tox import reporter\\nfrom tox.action import Action\\nfrom tox.config.parallel import ENV_VAR_KEY_PRIVATE as PARALLEL_ENV_VAR_KEY_PRIVATE\\nfrom tox.constants import INFO, PARALLEL_RESULT_JSON_PREFIX, PARALLEL_RESULT_JSON_SUFFIX\\nfrom tox.package.local import resolve_package\\nfrom tox.util.lock import get_unique_file\\nfrom tox.util.path import ensure_empty_dir\\n\\nfrom .config import DepConfig\\n\\n#: maximum parsed shebang interpreter length (see: prepend_shebang_interpreter)\\nMAXINTERP = 2048\\n\\n\\nclass CreationConfig:\\n    def __init__(\\n        self,\\n        base_resolved_python_sha256,\\n        base_resolved_python_path,\\n        tox_version,\\n        sitepackages,\\n        usedevelop,\\n        deps,\\n        alwayscopy,\\n    ):\\n        self.base_resolved_python_sha256 = base_resolved_python_sha256\\n        self.base_resolved_python_path = base_resolved_python_path\\n        self.tox_version = tox_version\\n        self.sitepackages = sitepackages\\n        self.usedevelop = usedevelop\\n        self.alwayscopy = alwayscopy\\n        self.deps = deps\\n\\n    def writeconfig(self, path):\\n        lines = [\\n            \"{} {}\".format(self.base_resolved_python_sha256, self.base_resolved_python_path),\\n            \"{} {:d} {:d} {:d}\".format(\\n                self.tox_version,\\n                self.sitepackages,\\n                self.usedevelop,\\n                self.alwayscopy,\\n            ),\\n        ]\\n        for dep in self.deps:\\n            lines.append(\"{} {}\".format(*dep))\\n        content = \"\\\\n\".join(lines)\\n        path.ensure()\\n        path.write(content)\\n        return content\\n\\n    @classmethod\\n    def readconfig(cls, path):\\n        try:\\n            lines = path.readlines(cr=0)\\n            base_resolved_python_info = lines.pop(0).split(None, 1)\\n            tox_version, sitepackages, usedevelop, alwayscopy = lines.pop(0).split(None, 4)\\n            sitepackages = bool(int(sitepackages))\\n            usedevelop = bool(int(usedevelop))\\n            alwayscopy = bool(int(alwayscopy))\\n            deps = []\\n            for line in lines:\\n                base_resolved_python_sha256, depstring = line.split(None, 1)\\n                deps.append((base_resolved_python_sha256, depstring))\\n            base_resolved_python_sha256, base_resolved_python_path = base_resolved_python_info\\n            return CreationConfig(\\n                base_resolved_python_sha256,\\n                base_resolved_python_path,\\n                tox_version,\\n                sitepackages,\\n                usedevelop,\\n                deps,\\n                alwayscopy,\\n            )\\n        except Exception:\\n            return None\\n\\n    def matches_with_reason(self, other, deps_matches_subset=False):\\n        for attr in (\\n            \"base_resolved_python_sha256\",\\n            \"base_resolved_python_path\",\\n            \"tox_version\",\\n            \"sitepackages\",\\n            \"usedevelop\",\\n            \"alwayscopy\",\\n        ):\\n            left = getattr(self, attr)\\n            right = getattr(other, attr)\\n            if left != right:\\n                return False, \"attr {} {!r}!={!r}\".format(attr, left, right)\\n        self_deps = set(self.deps)\\n        other_deps = set(other.deps)\\n        if self_deps != other_deps:\\n            if deps_matches_subset:\\n                diff = other_deps - self_deps\\n                if diff:\\n                    return False, \"missing in previous {!r}\".format(diff)\\n            else:\\n                return False, \"{!r}!={!r}\".format(self_deps, other_deps)\\n        return True, None\\n\\n    def matches(self, other, deps_matches_subset=False):\\n        outcome, _ = self.matches_with_reason(other, deps_matches_subset)\\n        return outcome\\n\\n\\nclass VirtualEnv(object):\\n    def __init__(self, envconfig=None, popen=None, env_log=None):\\n        self.envconfig = envconfig\\n        self.popen = popen\\n        self._actions = []\\n        self.env_log = env_log\\n        self._result_json_path = None\\n\\n    def new_action(self, msg, *args):\\n        config = self.envconfig.config\\n        command_log = self.env_log.get_commandlog(\\n            \"test\" if msg in (\"run-test\", \"run-test-pre\", \"run-test-post\") else \"setup\",\\n        )\\n        return Action(\\n            self.name,\\n            msg,\\n            args,\\n            self.envconfig.envlogdir,\\n            config.option.resultjson,\\n            command_log,\\n            self.popen,\\n            self.envconfig.envpython,\\n            self.envconfig.suicide_timeout,\\n            self.envconfig.interrupt_timeout,\\n            self.envconfig.terminate_timeout,\\n        )\\n\\n    def get_result_json_path(self):\\n        if self._result_json_path is None:\\n            if self.envconfig.config.option.resultjson:\\n                self._result_json_path = get_unique_file(\\n                    self.path,\\n                    PARALLEL_RESULT_JSON_PREFIX,\\n                    PARALLEL_RESULT_JSON_SUFFIX,\\n                )\\n        return self._result_json_path\\n\\n    @property\\n    def hook(self):\\n        return self.envconfig.config.pluginmanager.hook\\n\\n    @property\\n    def path(self):\\n        \"\"\"Path to environment base dir.\"\"\"\\n        return self.envconfig.envdir\\n\\n    @property\\n    def path_config(self):\\n        return self.path.join(\".tox-config1\")\\n\\n    @property\\n    def name(self):\\n        \"\"\"test environment name.\"\"\"\\n        return self.envconfig.envname\\n\\n    def __repr__(self):\\n        return \"<VirtualEnv at {!r}>\".format(self.path)\\n\\n    def getcommandpath(self, name, venv=True, cwd=None):\\n        \"\"\"Return absolute path (str or localpath) for specified command name.\\n\\n        - If it\\'s a local path we will rewrite it as as a relative path.\\n        - If venv is True we will check if the command is coming from the venv\\n          or is allowed to come from external.\\n        \"\"\"\\n        name = str(name)\\n        if os.path.isabs(name):\\n            return name\\n        if os.path.split(name)[0] == \".\":\\n            path = cwd.join(name)\\n            if path.check():\\n                return str(path)\\n\\n        if venv:\\n            path = self._venv_lookup_and_check_external_allowlist(name)\\n        else:\\n            path = self._normal_lookup(name)\\n\\n        if path is None:\\n            raise tox.exception.InvocationError(\\n                \"could not find executable {}\".format(pipes.quote(name)),\\n            )\\n\\n        return str(path)  # will not be rewritten for reporting\\n\\n    def _venv_lookup_and_check_external_allowlist(self, name):\\n        path = self._venv_lookup(name)\\n        if path is None:\\n            path = self._normal_lookup(name)\\n            if path is not None:\\n                self._check_external_allowed_and_warn(path)\\n        return path\\n\\n    def _venv_lookup(self, name):\\n        return py.path.local.sysfind(name, paths=[self.envconfig.envbindir])\\n\\n    def _normal_lookup(self, name):\\n        return py.path.local.sysfind(name)\\n\\n    def _check_external_allowed_and_warn(self, path):\\n        if not self.is_allowed_external(path):\\n            reporter.warning(\\n                \"test command found but not installed in testenv\\\\n\"\\n                \"  cmd: {}\\\\n\"\\n                \"  env: {}\\\\n\"\\n                \"Maybe you forgot to specify a dependency? \"\\n                \"See also the allowlist_externals envconfig setting.\\\\n\\\\n\"\\n                \"DEPRECATION WARNING: this will be an error in tox 4 and above!\".format(\\n                    path,\\n                    self.envconfig.envdir,\\n                ),\\n            )\\n\\n    def is_allowed_external(self, p):\\n        tryadd = [\"\"]\\n        if tox.INFO.IS_WIN:\\n            tryadd += [os.path.normcase(x) for x in os.environ[\"PATHEXT\"].split(os.pathsep)]\\n            p = py.path.local(os.path.normcase(str(p)))\\n\\n        if self.envconfig.allowlist_externals and self.envconfig.whitelist_externals:\\n            raise tox.exception.ConfigError(\\n                \"Either whitelist_externals or allowlist_externals might be specified, not both\",\\n            )\\n\\n        allowed_externals = (\\n            self.envconfig.whitelist_externals or self.envconfig.allowlist_externals\\n        )\\n        for x in allowed_externals:\\n            for add in tryadd:\\n                if p.fnmatch(x + add):\\n                    return True\\n        return False\\n\\n    def update(self, action):\\n        \"\"\"return status string for updating actual venv to match configuration.\\n        if status string is empty, all is ok.\\n        \"\"\"\\n        rconfig = CreationConfig.readconfig(self.path_config)\\n        if self.envconfig.recreate:\\n            reason = \"-r flag\"\\n        else:\\n            if rconfig is None:\\n                reason = \"no previous config {}\".format(self.path_config)\\n            else:\\n                live_config = self._getliveconfig()\\n                deps_subset_match = getattr(self.envconfig, \"deps_matches_subset\", False)\\n                outcome, reason = rconfig.matches_with_reason(live_config, deps_subset_match)\\n        if reason is None:\\n            action.info(\"reusing\", self.envconfig.envdir)\\n            return\\n        action.info(\"cannot reuse\", reason)\\n        if rconfig is None:\\n            action.setactivity(\"create\", self.envconfig.envdir)\\n        else:\\n            action.setactivity(\"recreate\", self.envconfig.envdir)\\n        try:\\n            self.hook.tox_testenv_create(action=action, venv=self)\\n            self.just_created = True\\n        except tox.exception.UnsupportedInterpreter as exception:\\n            return exception\\n        try:\\n            self.hook.tox_testenv_install_deps(action=action, venv=self)\\n        except tox.exception.InvocationError as exception:\\n            return \"could not install deps {}; v = {!r}\".format(self.envconfig.deps, exception)\\n\\n    def _getliveconfig(self):\\n        base_resolved_python_path = self.envconfig.python_info.executable\\n        version = tox.__version__\\n        sitepackages = self.envconfig.sitepackages\\n        develop = self.envconfig.usedevelop\\n        alwayscopy = self.envconfig.alwayscopy\\n        deps = []\\n        for dep in self.get_resolved_dependencies():\\n            dep_name_sha256 = getdigest(dep.name)\\n            deps.append((dep_name_sha256, dep.name))\\n        base_resolved_python_sha256 = getdigest(base_resolved_python_path)\\n        return CreationConfig(\\n            base_resolved_python_sha256,\\n            base_resolved_python_path,\\n            version,\\n            sitepackages,\\n            develop,\\n            deps,\\n            alwayscopy,\\n        )\\n\\n    def get_resolved_dependencies(self):\\n        dependencies = []\\n        for dependency in self.envconfig.deps:\\n            if dependency.indexserver is None:\\n                package = resolve_package(package_spec=dependency.name)\\n                if package != dependency.name:\\n                    dependency = dependency.__class__(package)\\n            dependencies.append(dependency)\\n        return dependencies\\n\\n    def getsupportedinterpreter(self):\\n        return self.envconfig.getsupportedinterpreter()\\n\\n    def matching_platform(self):\\n        return re.match(self.envconfig.platform, sys.platform)\\n\\n    def finish(self):\\n        previous_config = CreationConfig.readconfig(self.path_config)\\n        live_config = self._getliveconfig()\\n        if previous_config is None or not previous_config.matches(live_config):\\n            content = live_config.writeconfig(self.path_config)\\n            reporter.verbosity1(\"write config to {} as {!r}\".format(self.path_config, content))\\n\\n    def _needs_reinstall(self, setupdir, action):\\n        setup_py = setupdir.join(\"setup.py\")\\n\\n        if not setup_py.exists():\\n            return False\\n\\n        setup_cfg = setupdir.join(\"setup.cfg\")\\n        args = [self.envconfig.envpython, str(setup_py), \"--name\"]\\n        env = self._get_os_environ()\\n        output = action.popen(\\n            args,\\n            cwd=setupdir,\\n            redirect=False,\\n            returnout=True,\\n            env=env,\\n            capture_err=False,\\n        )\\n        name = next(\\n            (i for i in output.split(\"\\\\n\") if i and not i.startswith(\"pydev debugger:\")),\\n            \"\",\\n        )\\n        args = [\\n            self.envconfig.envpython,\\n            \"-c\",\\n            \"import sys;  import json; print(json.dumps(sys.path))\",\\n        ]\\n        out = action.popen(args, redirect=False, returnout=True, env=env)\\n        try:\\n            sys_path = json.loads(out)\\n        except ValueError:\\n            sys_path = []\\n        egg_info_fname = \".\".join((name.replace(\"-\", \"_\"), \"egg-info\"))\\n        for d in reversed(sys_path):\\n            egg_info = py.path.local(d).join(egg_info_fname)\\n            if egg_info.check():\\n                break\\n        else:\\n            return True\\n        needs_reinstall = any(\\n            conf_file.check() and conf_file.mtime() > egg_info.mtime()\\n            for conf_file in (setup_py, setup_cfg)\\n        )\\n\\n        # Ensure the modification time of the egg-info folder is updated so we\\n        # won\\'t need to do this again.\\n        # TODO(stephenfin): Remove once the minimum version of setuptools is\\n        # high enough to include https://github.com/pypa/setuptools/pull/1427/\\n        if needs_reinstall:\\n            egg_info.setmtime()\\n\\n        return needs_reinstall\\n\\n    def install_pkg(self, dir, action, name, is_develop=False):\\n        assert action is not None\\n\\n        if getattr(self, \"just_created\", False):\\n            action.setactivity(name, dir)\\n            self.finish()\\n            pip_flags = [\"--exists-action\", \"w\"]\\n        else:\\n            if is_develop and not self._needs_reinstall(dir, action):\\n                action.setactivity(\"{}-noop\".format(name), dir)\\n                return\\n            action.setactivity(\"{}-nodeps\".format(name), dir)\\n            pip_flags = [\"--no-deps\"] + ([] if is_develop else [\"-U\"])\\n        pip_flags.extend([\"-v\"] * min(3, reporter.verbosity() - 2))\\n        if self.envconfig.extras:\\n            dir += \"[{}]\".format(\",\".join(self.envconfig.extras))\\n        target = [dir]\\n        if is_develop:\\n            target.insert(0, \"-e\")\\n        self._install(target, extraopts=pip_flags, action=action)\\n\\n    def developpkg(self, setupdir, action):\\n        self.install_pkg(setupdir, action, \"develop-inst\", is_develop=True)\\n\\n    def installpkg(self, sdistpath, action):\\n        self.install_pkg(sdistpath, action, \"inst\")\\n\\n    def _installopts(self, indexserver):\\n        options = []\\n        if indexserver:\\n            options += [\"-i\", indexserver]\\n        if self.envconfig.pip_pre:\\n            options.append(\"--pre\")\\n        return options\\n\\n    def run_install_command(self, packages, action, options=()):\\n        def expand(val):\\n            # expand an install command\\n            if val == \"{packages}\":\\n                for package in packages:\\n                    yield package\\n            elif val == \"{opts}\":\\n                for opt in options:\\n                    yield opt\\n            else:\\n                yield val\\n\\n        cmd = list(chain.from_iterable(expand(val) for val in self.envconfig.install_command))\\n\\n        env = self._get_os_environ()\\n        self.ensure_pip_os_environ_ok(env)\\n\\n        old_stdout = sys.stdout\\n        sys.stdout = codecs.getwriter(\"utf8\")(sys.stdout)\\n        try:\\n            self._pcall(\\n                cmd,\\n                cwd=self.envconfig.config.toxinidir,\\n                action=action,\\n                redirect=reporter.verbosity() < reporter.Verbosity.DEBUG,\\n                env=env,\\n            )\\n        except KeyboardInterrupt:\\n            self.status = \"keyboardinterrupt\"\\n            raise\\n        finally:\\n            sys.stdout = old_stdout\\n\\n    def ensure_pip_os_environ_ok(self, env):\\n        for key in (\"PIP_RESPECT_VIRTUALENV\", \"PIP_REQUIRE_VIRTUALENV\", \"__PYVENV_LAUNCHER__\"):\\n            env.pop(key, None)\\n        if all(\"PYTHONPATH\" not in i for i in (self.envconfig.passenv, self.envconfig.setenv)):\\n            # If PYTHONPATH not explicitly asked for, remove it.\\n            if \"PYTHONPATH\" in env:\\n                if sys.version_info < (3, 4) or bool(env[\"PYTHONPATH\"]):\\n                    # https://docs.python.org/3/whatsnew/3.4.html#changes-in-python-command-behavior\\n                    # In a posix shell, setting the PATH environment variable to an empty value is\\n                    # equivalent to not setting it at all.\\n                    reporter.warning(\\n                        \"Discarding $PYTHONPATH from environment, to override \"\\n                        \"specify PYTHONPATH in \\'passenv\\' in your configuration.\",\\n                    )\\n                env.pop(\"PYTHONPATH\")\\n\\n        # installing packages at user level may mean we\\'re not installing inside the venv\\n        env[\"PIP_USER\"] = \"0\"\\n\\n        # installing without dependencies may lead to broken packages\\n        env[\"PIP_NO_DEPS\"] = \"0\"\\n\\n    def _install(self, deps, extraopts=None, action=None):\\n        if not deps:\\n            return\\n        d = {}\\n        ixservers = []\\n        for dep in deps:\\n            if isinstance(dep, (str, py.path.local)):\\n                dep = DepConfig(str(dep), None)\\n            assert isinstance(dep, DepConfig), dep\\n            if dep.indexserver is None:\\n                ixserver = self.envconfig.config.indexserver[\"default\"]\\n            else:\\n                ixserver = dep.indexserver\\n            d.setdefault(ixserver, []).append(dep.name)\\n            if ixserver not in ixservers:\\n                ixservers.append(ixserver)\\n            assert ixserver.url is None or isinstance(ixserver.url, str)\\n\\n        for ixserver in ixservers:\\n            packages = d[ixserver]\\n            options = self._installopts(ixserver.url)\\n            if extraopts:\\n                options.extend(extraopts)\\n            self.run_install_command(packages=packages, options=options, action=action)\\n\\n    def _get_os_environ(self, is_test_command=False):\\n        if is_test_command:\\n            # for executing tests we construct a clean environment\\n            env = {}\\n            for env_key in self.envconfig.passenv:\\n                if env_key in os.environ:\\n                    env[env_key] = os.environ[env_key]\\n        else:\\n            # for executing non-test commands we use the full\\n            # invocation environment\\n            env = os.environ.copy()\\n\\n        # in any case we honor per-testenv setenv configuration\\n        env.update(self.envconfig.setenv.export())\\n\\n        env[\"VIRTUAL_ENV\"] = str(self.path)\\n        return env\\n\\n    def test(\\n        self,\\n        redirect=False,\\n        name=\"run-test\",\\n        commands=None,\\n        ignore_outcome=None,\\n        ignore_errors=None,\\n        display_hash_seed=False,\\n    ):\\n        if commands is None:\\n            commands = self.envconfig.commands\\n        if ignore_outcome is None:\\n            ignore_outcome = self.envconfig.ignore_outcome\\n        if ignore_errors is None:\\n            ignore_errors = self.envconfig.ignore_errors\\n        with self.new_action(name) as action:\\n            cwd = self.envconfig.changedir\\n            if display_hash_seed:\\n                env = self._get_os_environ(is_test_command=True)\\n                # Display PYTHONHASHSEED to assist with reproducibility.\\n                action.setactivity(name, \"PYTHONHASHSEED={!r}\".format(env.get(\"PYTHONHASHSEED\")))\\n            for i, argv in enumerate(filter(bool, commands)):\\n                # have to make strings as _pcall changes argv[0] to a local()\\n                # happens if the same environment is invoked twice\\n                message = \"commands[{}] | {}\".format(\\n                    i,\\n                    \" \".join(pipes.quote(str(x)) for x in argv),\\n                )\\n                action.setactivity(name, message)\\n                # check to see if we need to ignore the return code\\n                # if so, we need to alter the command line arguments\\n                if argv[0].startswith(\"-\"):\\n                    ignore_ret = True\\n                    if argv[0] == \"-\":\\n                        del argv[0]\\n                    else:\\n                        argv[0] = argv[0].lstrip(\"-\")\\n                else:\\n                    ignore_ret = False\\n\\n                try:\\n                    self._pcall(\\n                        argv,\\n                        cwd=cwd,\\n                        action=action,\\n                        redirect=redirect,\\n                        ignore_ret=ignore_ret,\\n                        is_test_command=True,\\n                    )\\n                except tox.exception.InvocationError as err:\\n                    if ignore_outcome:\\n                        msg = \"command failed but result from testenv is ignored\\\\ncmd:\"\\n                        reporter.warning(\"{} {}\".format(msg, err))\\n                        self.status = \"ignored failed command\"\\n                        continue  # keep processing commands\\n\\n                    reporter.error(str(err))\\n                    self.status = \"commands failed\"\\n                    if not ignore_errors:\\n                        break  # Don\\'t process remaining commands\\n                except KeyboardInterrupt:\\n                    self.status = \"keyboardinterrupt\"\\n                    raise\\n\\n    def _pcall(\\n        self,\\n        args,\\n        cwd,\\n        venv=True,\\n        is_test_command=False,\\n        action=None,\\n        redirect=True,\\n        ignore_ret=False,\\n        returnout=False,\\n        env=None,\\n    ):\\n        if env is None:\\n            env = self._get_os_environ(is_test_command=is_test_command)\\n\\n        # construct environment variables\\n        env.pop(\"VIRTUALENV_PYTHON\", None)\\n        bin_dir = str(self.envconfig.envbindir)\\n        path = self.envconfig.setenv.get(\"PATH\") or os.environ[\"PATH\"]\\n        env[\"PATH\"] = os.pathsep.join([bin_dir, path])\\n        reporter.verbosity2(\"setting PATH={}\".format(env[\"PATH\"]))\\n\\n        # get command\\n        args[0] = self.getcommandpath(args[0], venv, cwd)\\n        if sys.platform != \"win32\" and \"TOX_LIMITED_SHEBANG\" in os.environ:\\n            args = prepend_shebang_interpreter(args)\\n\\n        cwd.ensure(dir=1)  # ensure the cwd exists\\n        return action.popen(\\n            args,\\n            cwd=cwd,\\n            env=env,\\n            redirect=redirect,\\n            ignore_ret=ignore_ret,\\n            returnout=returnout,\\n            report_fail=not is_test_command,\\n        )\\n\\n    def setupenv(self):\\n        if self.envconfig._missing_subs:\\n            self.status = (\\n                \"unresolvable substitution(s):\\\\n    {}\\\\n\"\\n                \"Environment variables are missing or defined recursively.\".format(\\n                    \"\\\\n    \".join(\\n                        \"{}: \\'{}\\'\".format(section_key, exc.name)\\n                        for section_key, exc in sorted(self.envconfig._missing_subs.items())\\n                    ),\\n                )\\n            )\\n            return\\n        if not self.matching_platform():\\n            self.status = \"platform mismatch\"\\n            return  # we simply omit non-matching platforms\\n        with self.new_action(\"getenv\", self.envconfig.envdir) as action:\\n            self.status = 0\\n            default_ret_code = 1\\n            envlog = self.env_log\\n            try:\\n                status = self.update(action=action)\\n            except IOError as e:\\n                if e.args[0] != 2:\\n                    raise\\n                status = (\\n                    \"Error creating virtualenv. Note that spaces in paths are \"\\n                    \"not supported by virtualenv. Error details: {!r}\".format(e)\\n                )\\n            except tox.exception.InvocationError as e:\\n                status = e\\n            except tox.exception.InterpreterNotFound as e:\\n                status = e\\n                if self.envconfig.config.option.skip_missing_interpreters == \"true\":\\n                    default_ret_code = 0\\n            except KeyboardInterrupt:\\n                self.status = \"keyboardinterrupt\"\\n                raise\\n            if status:\\n                str_status = str(status)\\n                command_log = envlog.get_commandlog(\"setup\")\\n                command_log.add_command([\"setup virtualenv\"], str_status, default_ret_code)\\n                self.status = status\\n                if default_ret_code == 0:\\n                    reporter.skip(str_status)\\n                else:\\n                    reporter.error(str_status)\\n                return False\\n            command_path = self.getcommandpath(\"python\")\\n            envlog.set_python_info(command_path)\\n            return True\\n\\n    def finishvenv(self):\\n        with self.new_action(\"finishvenv\"):\\n            self.finish()\\n            return True\\n\\n\\ndef getdigest(path):\\n    path = py.path.local(path)\\n    if not path.check(file=1):\\n        return \"0\" * 32\\n    return path.computehash(\"sha256\")\\n\\n\\ndef prepend_shebang_interpreter(args):\\n    # prepend interpreter directive (if any) to argument list\\n    #\\n    # When preparing virtual environments in a file container which has large\\n    # length, the system might not be able to invoke shebang scripts which\\n    # define interpreters beyond system limits (e.g. Linux has a limit of 128;\\n    # BINPRM_BUF_SIZE). This method can be used to check if the executable is\\n    # a script containing a shebang line. If so, extract the interpreter (and\\n    # possible optional argument) and prepend the values to the provided\\n    # argument list. tox will only attempt to read an interpreter directive of\\n    # a maximum size of 2048 bytes to limit excessive reading and support UNIX\\n    # systems which may support a longer interpret length.\\n    try:\\n        with open(args[0], \"rb\") as f:\\n            if f.read(1) == b\"#\" and f.read(1) == b\"!\":\\n                interp = f.readline(MAXINTERP + 1).rstrip().decode(\"UTF-8\")\\n                if len(interp) > MAXINTERP:  # avoid a truncated interpreter\\n                    return args\\n                interp_args = interp.split(None, 1)[:2]\\n                return interp_args + args\\n    except (UnicodeDecodeError, IOError):\\n        pass\\n    return args\\n\\n\\n_SKIP_VENV_CREATION = os.environ.get(\"_TOX_SKIP_ENV_CREATION_TEST\", False) == \"1\"\\n\\n\\n@tox.hookimpl\\ndef tox_testenv_create(venv, action):\\n    config_interpreter = venv.getsupportedinterpreter()\\n    args = [sys.executable, \"-m\", \"virtualenv\"]\\n    if venv.envconfig.sitepackages:\\n        args.append(\"--system-site-packages\")\\n    if venv.envconfig.alwayscopy:\\n        args.append(\"--always-copy\")\\n    if not venv.envconfig.download:\\n        args.append(\"--no-download\")\\n    else:\\n        args.append(\"--download\")\\n    # add interpreter explicitly, to prevent using default (virtualenv.ini)\\n    args.extend([\"--python\", str(config_interpreter)])\\n\\n    cleanup_for_venv(venv)\\n\\n    base_path = venv.path.dirpath()\\n    base_path.ensure(dir=1)\\n    args.append(venv.path.basename)\\n    if not _SKIP_VENV_CREATION:\\n        try:\\n            venv._pcall(\\n                args,\\n                venv=False,\\n                action=action,\\n                cwd=base_path,\\n                redirect=reporter.verbosity() < reporter.Verbosity.DEBUG,\\n            )\\n        except KeyboardInterrupt:\\n            venv.status = \"keyboardinterrupt\"\\n            raise\\n    return True  # Return non-None to indicate plugin has completed\\n\\n\\ndef cleanup_for_venv(venv):\\n    within_parallel = PARALLEL_ENV_VAR_KEY_PRIVATE in os.environ\\n    # if the directory exists and it doesn\\'t look like a virtualenv, produce\\n    # an error\\n    if venv.path.exists():\\n        dir_items = set(os.listdir(str(venv.path))) - {\".lock\", \"log\"}\\n        dir_items = {p for p in dir_items if not p.startswith(\".tox-\") or p == \".tox-config1\"}\\n    else:\\n        dir_items = set()\\n\\n    if not (\\n        # doesn\\'t exist => OK\\n        not venv.path.exists()\\n        # does exist, but it\\'s empty => OK\\n        or not dir_items\\n        # tox has marked this as an environment it has created in the past\\n        or \".tox-config1\" in dir_items\\n        # it exists and we\\'re on windows with Lib and Scripts => OK\\n        or (INFO.IS_WIN and dir_items > {\"Scripts\", \"Lib\"})\\n        # non-windows, with lib and bin => OK\\n        or dir_items > {\"bin\", \"lib\"}\\n        # pypy has a different lib folder => OK\\n        or dir_items > {\"bin\", \"lib_pypy\"}\\n    ):\\n        venv.status = \"error\"\\n        reporter.error(\\n            \"cowardly refusing to delete `envdir` (it does not look like a virtualenv): \"\\n            \"{}\".format(venv.path),\\n        )\\n        raise SystemExit(2)\\n\\n    if within_parallel:\\n        if venv.path.exists():\\n            # do not delete the log folder as that\\'s used by parent\\n            for content in venv.path.listdir():\\n                if not content.basename == \"log\":\\n                    content.remove(rec=1, ignore_errors=True)\\n    else:\\n        ensure_empty_dir(venv.path)\\n\\n\\n@tox.hookimpl\\ndef tox_testenv_install_deps(venv, action):\\n    deps = venv.get_resolved_dependencies()\\n    if deps:\\n        depinfo = \", \".join(map(str, deps))\\n        action.setactivity(\"installdeps\", depinfo)\\n        venv._install(deps, action=action)\\n    return True  # Return non-None to indicate plugin has completed\\n\\n\\n@tox.hookimpl\\ndef tox_runtest(venv, redirect):\\n    venv.test(redirect=redirect)\\n    return True  # Return non-None to indicate plugin has completed\\n\\n\\n@tox.hookimpl\\ndef tox_runtest_pre(venv):\\n    venv.status = 0\\n    ensure_empty_dir(venv.envconfig.envtmpdir)\\n    venv.envconfig.envtmpdir.ensure(dir=1)\\n    venv.test(\\n        name=\"run-test-pre\",\\n        commands=venv.envconfig.commands_pre,\\n        redirect=False,\\n        ignore_outcome=False,\\n        ignore_errors=False,\\n        display_hash_seed=True,\\n    )\\n\\n\\n@tox.hookimpl\\ndef tox_runtest_post(venv):\\n    venv.test(\\n        name=\"run-test-post\",\\n        commands=venv.envconfig.commands_post,\\n        redirect=False,\\n        ignore_outcome=False,\\n        ignore_errors=False,\\n    )\\n\\n\\n@tox.hookimpl\\ndef tox_runenvreport(venv, action):\\n    # write out version dependency information\\n    args = venv.envconfig.list_dependencies_command\\n    output = venv._pcall(args, cwd=venv.envconfig.config.toxinidir, action=action, returnout=True)\\n    # the output contains a mime-header, skip it\\n    output = output.split(\"\\\\n\\\\n\")[-1]\\n    packages = output.strip().split(\"\\\\n\")\\n    return packages  # Return non-None to indicate plugin has completed\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/version.py'"}, "return_value": "b\"# coding: utf-8\\nfrom __future__ import unicode_literals\\n\\n__version__ = '3.24.6.dev3+g86a0383c.d20220119'\\n\""}]}, "get_python_source": {"line": 37, "args": [{"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/exception.py'"}, "return_value": "'import os\\nimport pipes\\nimport signal\\n\\n\\ndef exit_code_str(exception_name, command, exit_code):\\n    \"\"\"String representation for an InvocationError, with exit code\\n\\n    NOTE: this might also be used by plugin tests (tox-venv at the time of writing),\\n    so some coordination is needed if this is ever moved or a different solution for this hack\\n    is found.\\n\\n    NOTE: this is a separate function because pytest-mock `spy` does not work on Exceptions\\n    We can use neither a class method nor a static because of https://bugs.python.org/issue23078.\\n    Even a normal method failed with \"TypeError: descriptor \\'__getattribute__\\' requires a\\n    \\'BaseException\\' object but received a \\'type\\'\".\\n    \"\"\"\\n    str_ = \"{} for command {}\".format(exception_name, command)\\n    if exit_code is not None:\\n        if exit_code < 0 or (os.name == \"posix\" and exit_code > 128):\\n            signals = {\\n                number: name for name, number in vars(signal).items() if name.startswith(\"SIG\")\\n            }\\n            if exit_code < 0:\\n                # Signal reported via subprocess.Popen.\\n                sig_name = signals.get(-exit_code)\\n                str_ += \" (exited with code {:d} ({}))\".format(exit_code, sig_name)\\n            else:\\n                str_ += \" (exited with code {:d})\".format(exit_code)\\n                number = exit_code - 128\\n                name = signals.get(number)\\n                if name:\\n                    str_ += (\\n                        \")\\\\nNote: this might indicate a fatal error signal \"\\n                        \"({:d} - 128 = {:d}: {})\".format(exit_code, number, name)\\n                    )\\n        str_ += \" (exited with code {:d})\".format(exit_code)\\n    return str_\\n\\n\\nclass Error(Exception):\\n    def __str__(self):\\n        return \"{}: {}\".format(self.__class__.__name__, self.args[0])\\n\\n\\nclass MissingSubstitution(Error):\\n    FLAG = \"TOX_MISSING_SUBSTITUTION\"\\n    \"\"\"placeholder for debugging configurations\"\"\"\\n\\n    def __init__(self, name):\\n        self.name = name\\n        super(Error, self).__init__(name)\\n\\n\\nclass ConfigError(Error):\\n    \"\"\"Error in tox configuration.\"\"\"\\n\\n\\nclass SubstitutionStackError(ConfigError, ValueError):\\n    \"\"\"Error in tox configuration recursive substitution.\"\"\"\\n\\n\\nclass UnsupportedInterpreter(Error):\\n    \"\"\"Signals an unsupported Interpreter.\"\"\"\\n\\n\\nclass InterpreterNotFound(Error):\\n    \"\"\"Signals that an interpreter could not be found.\"\"\"\\n\\n\\nclass InvocationError(Error):\\n    \"\"\"An error while invoking a script.\"\"\"\\n\\n    def __init__(self, command, exit_code=None, out=None):\\n        super(Error, self).__init__(command, exit_code)\\n        self.command = command\\n        self.exit_code = exit_code\\n        self.out = out\\n\\n    def __str__(self):\\n        return exit_code_str(self.__class__.__name__, self.command, self.exit_code)\\n\\n\\nclass MissingDirectory(Error):\\n    \"\"\"A directory did not exist.\"\"\"\\n\\n\\nclass MissingDependency(Error):\\n    \"\"\"A dependency could not be found or determined.\"\"\"\\n\\n\\nclass MissingRequirement(Error):\\n    \"\"\"A requirement defined in :config:`require` is not met.\"\"\"\\n\\n    def __init__(self, config):\\n        self.config = config\\n\\n    def __str__(self):\\n        return \" \".join(pipes.quote(i) for i in self.config.requires)\\n\\n\\nclass BadRequirement(Error):\\n    \"\"\"A requirement defined in :config:`require` cannot be parsed.\"\"\"\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/helper/__init__.py'"}, "return_value": "''"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/helper/build_isolated.py'"}, "return_value": "'\"\"\"PEP 517 build backend invocation script.\\n\\nIt accepts externally parsed build configuration from `[build-system]`\\nin `pyproject.toml` and invokes an API endpoint for building an sdist\\ntarball.\\n\"\"\"\\n\\nimport os\\nimport sys\\n\\n\\ndef _ensure_module_in_paths(module, paths):\\n    \"\"\"Verify that the imported backend belongs in-tree.\"\"\"\\n    if not paths:\\n        return\\n\\n    module_path = os.path.normcase(os.path.abspath(module.__file__))\\n    normalized_paths = (os.path.normcase(os.path.abspath(path)) for path in paths)\\n\\n    if any(os.path.commonprefix((module_path, path)) == path for path in normalized_paths):\\n        return\\n\\n    raise SystemExit(\\n        \"build-backend ({!r}) must exist in one of the paths \"\\n        \"specified by backend-path ({!r})\".format(module, paths),\\n    )\\n\\n\\ndist_folder = sys.argv[1]\\nbackend_spec = sys.argv[2]\\nbackend_obj = sys.argv[3] if len(sys.argv) >= 4 else None\\nbackend_paths = sys.argv[4].split(os.path.pathsep) if (len(sys.argv) >= 5 and sys.argv[4]) else []\\n\\nsys.path[:0] = backend_paths\\n\\nbackend = __import__(backend_spec, fromlist=[\"_trash\"])\\n_ensure_module_in_paths(backend, backend_paths)\\nif backend_obj:\\n    backend = getattr(backend, backend_obj)\\n\\nbasename = backend.build_sdist(dist_folder, {\"--global-option\": [\"--formats=gztar\"]})\\nprint(basename)\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/helper/build_requires.py'"}, "return_value": "'import json\\nimport os\\nimport sys\\n\\nbackend_spec = sys.argv[1]\\nbackend_obj = sys.argv[2] if len(sys.argv) >= 3 else None\\nbackend_paths = sys.argv[3].split(os.path.pathsep) if len(sys.argv) >= 4 else []\\n\\nsys.path[:0] = backend_paths\\n\\nbackend = __import__(backend_spec, fromlist=[\"_trash\"])\\nif backend_obj:\\n    backend = getattr(backend, backend_obj)\\n\\ntry:\\n    for_build_requires = backend.get_requires_for_build_sdist(None)\\nexcept AttributeError:\\n    # PEP 517 states that get_requires_for_build_sdist is optional for a build\\n    # backend object. When the backend object omits it, the default\\n    # implementation must be equivalent to return []\\n    for_build_requires = []\\n\\noutput = json.dumps(for_build_requires)\\nprint(output)\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/helper/get_site_package_dir.py'"}, "return_value": "'from __future__ import unicode_literals\\n\\nimport json\\nimport sys\\nimport sysconfig\\nimport warnings\\n\\ndest_prefix = sys.argv[1]\\nwith warnings.catch_warnings():  # disable warning for PEP-632\\n    warnings.simplefilter(\"ignore\")\\n    try:\\n        import distutils.sysconfig\\n\\n        data = distutils.sysconfig.get_python_lib(prefix=dest_prefix)\\n    except ImportError:  # if removed or not installed ignore\\n        config_vars = {\\n            k: dest_prefix if any(v == p for p in (sys.prefix, sys.base_prefix)) else v\\n            for k, v in sysconfig.get_config_vars().items()\\n        }\\n        data = sysconfig.get_path(\"purelib\", vars=config_vars)\\n\\nprint(json.dumps({\"dir\": data}))\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/helper/get_version.py'"}, "return_value": "'from __future__ import unicode_literals\\n\\nimport json\\nimport os\\nimport platform\\nimport sys\\n\\ninfo = {\\n    \"executable\": sys.executable,\\n    \"implementation\": platform.python_implementation(),\\n    \"version_info\": list(sys.version_info),\\n    \"version\": sys.version,\\n    \"is_64\": sys.maxsize > 2 ** 32,\\n    \"sysplatform\": sys.platform,\\n    \"os_sep\": os.sep,\\n    \"extra_version_info\": getattr(sys, \"pypy_version_info\", None),\\n}\\ninfo_as_dump = json.dumps(info)\\nprint(info_as_dump)\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/hookspecs.py'"}, "return_value": "'\"\"\"Hook specifications for tox - see https://pluggy.readthedocs.io/\"\"\"\\nimport pluggy\\n\\nhookspec = pluggy.HookspecMarker(\"tox\")\\n\\n\\n@hookspec\\ndef tox_addoption(parser):\\n    \"\"\"add command line options to the argparse-style parser object.\"\"\"\\n\\n\\n@hookspec\\ndef tox_configure(config):\\n    \"\"\"Called after command line options are parsed and ini-file has been read.\\n\\n    Please be aware that the config object layout may change between major tox versions.\\n    \"\"\"\\n\\n\\n@hookspec(firstresult=True)\\ndef tox_package(session, venv):\\n    \"\"\"Return the package to be installed for the given venv.\\n\\n    Called once for every environment.\"\"\"\\n\\n\\n@hookspec(firstresult=True)\\ndef tox_get_python_executable(envconfig):\\n    \"\"\"Return a python executable for the given python base name.\\n\\n    The first plugin/hook which returns an executable path will determine it.\\n\\n    ``envconfig`` is the testenv configuration which contains\\n    per-testenv configuration, notably the ``.envname`` and ``.basepython``\\n    setting.\\n    \"\"\"\\n\\n\\n@hookspec(firstresult=True)\\ndef tox_testenv_create(venv, action):\\n    \"\"\"Perform creation action for this venv.\\n\\n    Some example usage:\\n\\n    - To *add* behavior but still use tox\\'s implementation to set up a\\n      virtualenv, implement this hook but do not return a value (or explicitly\\n      return ``None``).\\n    - To *override* tox\\'s virtualenv creation, implement this hook and return\\n      a non-``None`` value.\\n\\n    .. note:: This api is experimental due to the unstable api of\\n        :class:`tox.venv.VirtualEnv`.\\n\\n    .. note:: This hook uses ``firstresult=True`` (see `pluggy first result only`_) -- hooks\\n        implementing this will be run until one returns non-``None``.\\n\\n    .. _`pluggy first result only`: https://pluggy.readthedocs.io/en/latest/#first-result-only\\n    \"\"\"\\n\\n\\n@hookspec(firstresult=True)\\ndef tox_testenv_install_deps(venv, action):\\n    \"\"\"Perform install dependencies action for this venv.\\n\\n    Some example usage:\\n\\n    - To *add* behavior but still use tox\\'s implementation to install\\n      dependencies, implement this hook but do not return a value (or\\n      explicitly return ``None``).  One use-case may be to install (or ensure)\\n      non-python dependencies such as debian packages.\\n    - To *override* tox\\'s installation of dependencies, implement this hook\\n      and return a non-``None`` value.  One use-case may be to install via\\n      a different installation tool such as `pip-accel`_ or `pip-faster`_.\\n\\n    .. note:: This api is experimental due to the unstable api of\\n        :class:`tox.venv.VirtualEnv`.\\n\\n    .. note:: This hook uses ``firstresult=True`` (see `pluggy first result only`_) -- hooks\\n        implementing this will be run until one returns non-``None``.\\n\\n    .. _pip-accel: https://github.com/paylogic/pip-accel\\n    .. _pip-faster: https://github.com/Yelp/venv-update\\n    \"\"\"\\n\\n\\n@hookspec\\ndef tox_runtest_pre(venv):\\n    \"\"\"Perform arbitrary action before running tests for this venv.\\n\\n    This could be used to indicate that tests for a given venv have started, for instance.\\n    \"\"\"\\n\\n\\n@hookspec(firstresult=True)\\ndef tox_runtest(venv, redirect):\\n    \"\"\"Run the tests for this venv.\\n\\n    .. note:: This hook uses ``firstresult=True`` (see `pluggy first result only`_) -- hooks\\n        implementing this will be run until one returns non-``None``.\\n    \"\"\"\\n\\n\\n@hookspec\\ndef tox_runtest_post(venv):\\n    \"\"\"Perform arbitrary action after running tests for this venv.\\n\\n    This could be used to have per-venv test reporting of pass/fail status.\\n    \"\"\"\\n\\n\\n@hookspec(firstresult=True)\\ndef tox_runenvreport(venv, action):\\n    \"\"\"Get the installed packages and versions in this venv.\\n\\n    This could be used for alternative (ie non-pip) package managers, this\\n    plugin should return a ``list`` of type ``str``\\n    \"\"\"\\n\\n\\n@hookspec\\ndef tox_cleanup(session):\\n    \"\"\"Called just before the session is destroyed, allowing any final cleanup operation\"\"\"\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/interpreters/__init__.py'"}, "return_value": "'from __future__ import unicode_literals\\n\\nimport json\\nimport sys\\n\\nimport tox\\nfrom tox import reporter\\nfrom tox.constants import SITE_PACKAGE_QUERY_SCRIPT\\nfrom tox.interpreters.via_path import get_python_info\\n\\n\\nclass Interpreters:\\n    def __init__(self, hook):\\n        self.name2executable = {}\\n        self.executable2info = {}\\n        self.hook = hook\\n\\n    def get_executable(self, envconfig):\\n        \"\"\"return path object to the executable for the given\\n        name (e.g. python2.7, python3.6, python etc.)\\n        if name is already an existing path, return name.\\n        If an interpreter cannot be found, return None.\\n        \"\"\"\\n        try:\\n            return self.name2executable[envconfig.envname]\\n        except KeyError:\\n            exe = self.hook.tox_get_python_executable(envconfig=envconfig)\\n            reporter.verbosity2(\"{} uses {}\".format(envconfig.envname, exe))\\n            self.name2executable[envconfig.envname] = exe\\n            return exe\\n\\n    def get_info(self, envconfig):\\n        executable = self.get_executable(envconfig)\\n        name = envconfig.basepython\\n        if not executable:\\n            return NoInterpreterInfo(name=name)\\n        try:\\n            return self.executable2info[executable]\\n        except KeyError:\\n            info = run_and_get_interpreter_info(name, executable)\\n            self.executable2info[executable] = info\\n            return info\\n\\n    def get_sitepackagesdir(self, info, envdir):\\n        if not info.executable:\\n            return \"\"\\n        envdir = str(envdir)\\n        try:\\n            res = exec_on_interpreter(str(info.executable), SITE_PACKAGE_QUERY_SCRIPT, str(envdir))\\n        except ExecFailed as e:\\n            reporter.verbosity1(\"execution failed: {} -- {}\".format(e.out, e.err))\\n            return \"\"\\n        else:\\n            return res[\"dir\"]\\n\\n\\ndef run_and_get_interpreter_info(name, executable):\\n    assert executable\\n    try:\\n        result = get_python_info(str(executable))\\n        result[\"version_info\"] = tuple(result[\"version_info\"])  # fix json dump transformation\\n        if result[\"extra_version_info\"] is not None:\\n            result[\"extra_version_info\"] = tuple(\\n                result[\"extra_version_info\"],\\n            )  # fix json dump transformation\\n        del result[\"version\"]\\n        result[\"executable\"] = str(executable)\\n    except ExecFailed as e:\\n        return NoInterpreterInfo(name, executable=e.executable, out=e.out, err=e.err)\\n    else:\\n        return InterpreterInfo(**result)\\n\\n\\ndef exec_on_interpreter(*args):\\n    from subprocess import PIPE, Popen\\n\\n    popen = Popen(args, stdout=PIPE, stderr=PIPE, universal_newlines=True)\\n    out, err = popen.communicate()\\n    if popen.returncode:\\n        raise ExecFailed(args[0], args[1:], out, err)\\n    if err:\\n        sys.stderr.write(err)\\n    try:\\n        result = json.loads(out)\\n    except Exception:\\n        raise ExecFailed(args[0], args[1:], out, \"could not decode {!r}\".format(out))\\n    return result\\n\\n\\nclass ExecFailed(Exception):\\n    def __init__(self, executable, source, out, err):\\n        self.executable = executable\\n        self.source = source\\n        self.out = out\\n        self.err = err\\n\\n\\nclass InterpreterInfo:\\n    def __init__(\\n        self,\\n        implementation,\\n        executable,\\n        version_info,\\n        sysplatform,\\n        is_64,\\n        os_sep,\\n        extra_version_info,\\n    ):\\n        self.implementation = implementation\\n        self.executable = executable\\n\\n        self.version_info = version_info\\n        self.sysplatform = sysplatform\\n        self.is_64 = is_64\\n        self.os_sep = os_sep\\n        self.extra_version_info = extra_version_info\\n\\n    def __str__(self):\\n        return \"<executable at {}, version_info {}>\".format(self.executable, self.version_info)\\n\\n\\nclass NoInterpreterInfo:\\n    def __init__(self, name, executable=None, out=None, err=\"not found\"):\\n        self.name = name\\n        self.executable = executable\\n        self.version_info = None\\n        self.out = out\\n        self.err = err\\n\\n    def __str__(self):\\n        if self.executable:\\n            return \"<executable at {}, not runnable>\".format(self.executable)\\n        else:\\n            return \"<executable not found for: {}>\".format(self.name)\\n\\n\\nif tox.INFO.IS_WIN:\\n    from .windows import tox_get_python_executable\\nelse:\\n    from .unix import tox_get_python_executable\\nassert tox_get_python_executable\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/interpreters/common.py'"}, "return_value": "'import os\\n\\nfrom tox.interpreters.py_spec import CURRENT, PythonSpec\\nfrom tox.interpreters.via_path import exe_spec\\n\\n\\ndef base_discover(envconfig):\\n    base_python = envconfig.basepython\\n    spec = PythonSpec.from_name(base_python)\\n\\n    # 1. check passed in discover elements\\n    discovers = envconfig.config.option.discover\\n    if not discovers:\\n        discovers = os.environ.get(str(\"TOX_DISCOVER\"), \"\").split(os.pathsep)\\n    for discover in discovers:\\n        if os.path.exists(discover):\\n            cur_spec = exe_spec(discover, envconfig.basepython)\\n            if cur_spec is not None and cur_spec.satisfies(spec):\\n                return spec, cur_spec.path\\n\\n    # 2. check current\\n    if spec.name is not None and CURRENT.satisfies(spec):\\n        return spec, CURRENT.path\\n\\n    return spec, None\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/interpreters/py_spec.py'"}, "return_value": "'from __future__ import unicode_literals\\n\\nimport os\\nimport re\\nimport sys\\n\\nimport six\\n\\nimport tox\\n\\n\\nclass PythonSpec(object):\\n    def __init__(self, name, major, minor, architecture, path, args=None):\\n        self.name = name\\n        self.major = major\\n        self.minor = minor\\n        self.architecture = architecture\\n        self.path = path\\n        self.args = args\\n\\n    def __repr__(self):\\n        return (\\n            \"{0.__class__.__name__}(name={0.name!r}, major={0.major!r}, minor={0.minor!r}, \"\\n            \"architecture={0.architecture!r}, path={0.path!r}, args={0.args!r})\"\\n        ).format(self)\\n\\n    def __str__(self):\\n        msg = repr(self)\\n        return msg.encode(\"utf-8\") if six.PY2 else msg\\n\\n    def satisfies(self, req):\\n        if req.is_abs and self.is_abs and self.path != req.path:\\n            return False\\n        if req.name is not None and req.name != self.name:\\n            return False\\n        if req.architecture is not None and req.architecture != self.architecture:\\n            return False\\n        if req.major is not None and req.major != self.major:\\n            return False\\n        if req.minor is not None and req.minor != self.minor:\\n            return False\\n        if req.major is None and req.minor is not None:\\n            return False\\n        return True\\n\\n    @property\\n    def is_abs(self):\\n        return self.path is not None and os.path.isabs(self.path)\\n\\n    @classmethod\\n    def from_name(cls, base_python):\\n        name, major, minor, architecture, path = None, None, None, None, None\\n        if os.path.isabs(base_python):\\n            path = base_python\\n        else:\\n            match = re.match(r\"(python|pypy|jython)(\\\\d)?(?:\\\\.(\\\\d+))?(?:-(32|64))?$\", base_python)\\n            if match:\\n                groups = match.groups()\\n                name = groups[0]\\n                major = int(groups[1]) if len(groups) >= 2 and groups[1] is not None else None\\n                minor = int(groups[2]) if len(groups) >= 3 and groups[2] is not None else None\\n                architecture = (\\n                    int(groups[3]) if len(groups) >= 4 and groups[3] is not None else None\\n                )\\n            else:\\n                path = base_python\\n        return cls(name, major, minor, architecture, path)\\n\\n\\nCURRENT = PythonSpec(\\n    \"pypy\" if tox.constants.INFO.IS_PYPY else \"python\",\\n    sys.version_info[0],\\n    sys.version_info[1],\\n    64 if sys.maxsize > 2 ** 32 else 32,\\n    sys.executable,\\n)\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/interpreters/unix.py'"}, "return_value": "'from __future__ import unicode_literals\\n\\nimport tox\\n\\nfrom .common import base_discover\\nfrom .via_path import check_with_path\\n\\n\\n@tox.hookimpl\\ndef tox_get_python_executable(envconfig):\\n    spec, path = base_discover(envconfig)\\n    if path is not None:\\n        return path\\n    # 3. check if the literal base python\\n    candidates = [envconfig.basepython]\\n    # 4. check if the un-versioned name is good\\n    if spec.name is not None and spec.name != envconfig.basepython:\\n        candidates.append(spec.name)\\n    return check_with_path(candidates, spec)\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/interpreters/via_path.py'"}, "return_value": "'from __future__ import unicode_literals\\n\\nimport json\\nimport os\\nimport subprocess\\nfrom collections import defaultdict\\nfrom threading import Lock\\n\\nimport py\\n\\nfrom tox import reporter\\nfrom tox.constants import VERSION_QUERY_SCRIPT\\n\\nfrom .py_spec import PythonSpec\\n\\n\\ndef check_with_path(candidates, spec):\\n    for path in candidates:\\n        base = path\\n        if not os.path.isabs(path):\\n            path = py.path.local.sysfind(path)\\n        if path is not None:\\n            if os.path.exists(str(path)):\\n                cur_spec = exe_spec(path, base)\\n                if cur_spec is not None and cur_spec.satisfies(spec):\\n                    return cur_spec.path\\n\\n\\n_SPECS = {}\\n_SPECK_LOCK = defaultdict(Lock)\\n\\n\\ndef exe_spec(python_exe, base):\\n    if not isinstance(python_exe, str):\\n        python_exe = str(python_exe)\\n    with _SPECK_LOCK[python_exe]:\\n        if python_exe not in _SPECS:\\n            info = get_python_info(python_exe)\\n            if info is not None:\\n                found = PythonSpec(\\n                    \"pypy\" if info[\"implementation\"] == \"PyPy\" else \"python\",\\n                    info[\"version_info\"][0],\\n                    info[\"version_info\"][1],\\n                    64 if info[\"is_64\"] else 32,\\n                    info[\"executable\"],\\n                )\\n                reporter.verbosity2(\"{} ({}) is {}\".format(base, python_exe, info))\\n            else:\\n                found = None\\n            _SPECS[python_exe] = found\\n    return _SPECS[python_exe]\\n\\n\\n_python_info_cache = {}\\n\\n\\ndef get_python_info(cmd):\\n    try:\\n        return _python_info_cache[cmd].copy()\\n    except KeyError:\\n        pass\\n    proc = subprocess.Popen(\\n        [cmd] + [VERSION_QUERY_SCRIPT],\\n        stdout=subprocess.PIPE,\\n        stderr=subprocess.PIPE,\\n        universal_newlines=True,\\n    )\\n    out, err = proc.communicate()\\n    if not proc.returncode:\\n        try:\\n            result = json.loads(out)\\n        except ValueError as exception:\\n            failure = exception\\n        else:\\n            _python_info_cache[cmd] = result\\n            return result.copy()\\n    else:\\n        failure = \"exit code {}\".format(proc.returncode)\\n    reporter.verbosity1(\"{!r} cmd {!r} out {!r} err {!r} \".format(failure, cmd, out, err))\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/interpreters/windows/__init__.py'"}, "return_value": "'from __future__ import unicode_literals\\n\\nfrom threading import Lock\\n\\nimport tox\\n\\nfrom ..common import base_discover\\nfrom ..py_spec import CURRENT\\nfrom ..via_path import check_with_path\\n\\n\\n@tox.hookimpl\\ndef tox_get_python_executable(envconfig):\\n    spec, path = base_discover(envconfig)\\n    if path is not None:\\n        return path\\n    # second check if the py.exe has it (only for non path specs)\\n    if spec.path is None:\\n        py_exe = locate_via_pep514(spec)\\n        if py_exe is not None:\\n            return py_exe\\n\\n    # third check if the literal base python is on PATH\\n    candidates = [envconfig.basepython]\\n    # fourth check if the name is on PATH\\n    if spec.name is not None and spec.name != envconfig.basepython:\\n        candidates.append(spec.name)\\n    # or check known locations\\n    if spec.major is not None and spec.minor is not None:\\n        if spec.name == \"python\":\\n            # The standard names are in predictable places.\\n            candidates.append(r\"c:\\\\python{}{}\\\\python.exe\".format(spec.major, spec.minor))\\n    return check_with_path(candidates, spec)\\n\\n\\n_PY_AVAILABLE = []\\n_PY_LOCK = Lock()\\n\\n\\ndef locate_via_pep514(spec):\\n    with _PY_LOCK:\\n        if not _PY_AVAILABLE:\\n            from . import pep514\\n\\n            _PY_AVAILABLE.extend(pep514.discover_pythons())\\n            _PY_AVAILABLE.append(CURRENT)\\n    for cur_spec in _PY_AVAILABLE:\\n        if cur_spec.satisfies(spec):\\n            return cur_spec.path\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/interpreters/windows/pep514.py'"}, "return_value": "'\"\"\"Implement https://www.python.org/dev/peps/pep-0514/ to discover interpreters - Windows only\"\"\"\\nfrom __future__ import unicode_literals\\n\\nimport os\\nimport re\\n\\nimport six\\nfrom six.moves import winreg\\n\\nfrom tox import reporter\\nfrom tox.interpreters.py_spec import PythonSpec\\n\\n\\ndef enum_keys(key):\\n    at = 0\\n    while True:\\n        try:\\n            yield winreg.EnumKey(key, at)\\n        except OSError:\\n            break\\n        at += 1\\n\\n\\ndef get_value(key, value_name):\\n    try:\\n        return winreg.QueryValueEx(key, value_name)[0]\\n    except OSError:\\n        return None\\n\\n\\ndef discover_pythons():\\n    for hive, hive_name, key, flags, default_arch in [\\n        (winreg.HKEY_CURRENT_USER, \"HKEY_CURRENT_USER\", r\"Software\\\\Python\", 0, 64),\\n        (\\n            winreg.HKEY_LOCAL_MACHINE,\\n            \"HKEY_LOCAL_MACHINE\",\\n            r\"Software\\\\Python\",\\n            winreg.KEY_WOW64_64KEY,\\n            64,\\n        ),\\n        (\\n            winreg.HKEY_LOCAL_MACHINE,\\n            \"HKEY_LOCAL_MACHINE\",\\n            r\"Software\\\\Python\",\\n            winreg.KEY_WOW64_32KEY,\\n            32,\\n        ),\\n    ]:\\n        for spec in process_set(hive, hive_name, key, flags, default_arch):\\n            yield spec\\n\\n\\ndef process_set(hive, hive_name, key, flags, default_arch):\\n    try:\\n        with winreg.OpenKeyEx(hive, key, 0, winreg.KEY_READ | flags) as root_key:\\n            for company in enum_keys(root_key):\\n                if company == \"PyLauncher\":  # reserved\\n                    continue\\n                for spec in process_company(hive_name, company, root_key, default_arch):\\n                    yield spec\\n    except OSError:\\n        pass\\n\\n\\ndef process_company(hive_name, company, root_key, default_arch):\\n    with winreg.OpenKeyEx(root_key, company) as company_key:\\n        for tag in enum_keys(company_key):\\n            for spec in process_tag(hive_name, company, company_key, tag, default_arch):\\n                yield spec\\n\\n\\ndef process_tag(hive_name, company, company_key, tag, default_arch):\\n    with winreg.OpenKeyEx(company_key, tag) as tag_key:\\n        major, minor = load_version_data(hive_name, company, tag, tag_key)\\n        if major is None:\\n            return\\n        arch = load_arch_data(hive_name, company, tag, tag_key, default_arch)\\n    exe, args = load_exe(hive_name, company, company_key, tag)\\n    if exe is not None:\\n        name = \"python\" if company == \"PythonCore\" else company\\n        yield PythonSpec(name, major, minor, arch, exe, args)\\n\\n\\ndef load_exe(hive_name, company, company_key, tag):\\n    key_path = \"{}/{}/{}\".format(hive_name, company, tag)\\n    try:\\n        with winreg.OpenKeyEx(company_key, r\"{}\\\\InstallPath\".format(tag)) as ip_key:\\n            with ip_key:\\n                exe = get_value(ip_key, \"ExecutablePath\")\\n                if exe is None:\\n                    ip = get_value(ip_key, None)\\n                    if ip is None:\\n                        msg(key_path, \"no ExecutablePath or default for it\")\\n\\n                    else:\\n                        exe = os.path.join(ip, \"python.exe\")\\n                if os.path.exists(exe):\\n                    args = get_value(ip_key, \"ExecutableArguments\")\\n                    return exe, args\\n                else:\\n                    msg(key_path, \"exe does not exists {}\".format(exe))\\n    except OSError:\\n        msg(\"{}/{}\".format(key_path, \"InstallPath\"), \"missing\")\\n    return None, None\\n\\n\\ndef load_arch_data(hive_name, company, tag, tag_key, default_arch):\\n    arch_str = get_value(tag_key, \"SysArchitecture\")\\n    if arch_str is not None:\\n        key_path = \"{}/{}/{}/SysArchitecture\".format(hive_name, company, tag)\\n        try:\\n            return parse_arch(arch_str)\\n        except ValueError as sys_arch:\\n            msg(key_path, sys_arch)\\n    return default_arch\\n\\n\\ndef parse_arch(arch_str):\\n    if not isinstance(arch_str, six.string_types):\\n        raise ValueError(\"arch is not string\")\\n    match = re.match(r\"(\\\\d+)bit\", arch_str)\\n    if match:\\n        return int(next(iter(match.groups())))\\n    raise ValueError(\"invalid format {}\".format(arch_str))\\n\\n\\ndef load_version_data(hive_name, company, tag, tag_key):\\n    version_str = get_value(tag_key, \"SysVersion\")\\n    major, minor = None, None\\n    if version_str is not None:\\n        key_path = \"{}/{}/{}/SysVersion\".format(hive_name, company, tag)\\n        try:\\n            major, minor = parse_version(get_value(tag_key, \"SysVersion\"))\\n        except ValueError as sys_version:\\n            msg(key_path, sys_version)\\n    if major is None:\\n        key_path = \"{}/{}/{}\".format(hive_name, company, tag)\\n        try:\\n            major, minor = parse_version(tag)\\n        except ValueError as tag_version:\\n            msg(key_path, tag_version)\\n    return major, minor\\n\\n\\ndef parse_version(version_str):\\n    if not isinstance(version_str, six.string_types):\\n        raise ValueError(\"key is not string\")\\n    match = re.match(r\"(\\\\d+)\\\\.(\\\\d+).*\", version_str)\\n    if match:\\n        return tuple(int(i) for i in match.groups())\\n    raise ValueError(\"invalid format {}\".format(version_str))\\n\\n\\ndef msg(path, what):\\n    reporter.verbosity1(\"PEP-514 violation in Windows Registry at {} error: {}\".format(path, what))\\n\\n\\ndef _run():\\n    reporter.update_default_reporter(0, reporter.Verbosity.DEBUG)\\n    for spec in discover_pythons():\\n        print(repr(spec))\\n\\n\\nif __name__ == \"__main__\":\\n    _run()\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/logs/__init__.py'"}, "return_value": "'\"\"\"This module handles collecting and persisting in json format a tox session\"\"\"\\nfrom .result import ResultLog\\n\\n__all__ = (\"ResultLog\",)\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/logs/command.py'"}, "return_value": "'from __future__ import absolute_import, unicode_literals\\n\\n\\nclass CommandLog(object):\\n    \"\"\"Report commands interacting with third party tools\"\"\"\\n\\n    def __init__(self, env_log, list):\\n        self.envlog = env_log\\n        self.list = list\\n\\n    def add_command(self, argv, output, retcode):\\n        data = {\"command\": argv, \"output\": output, \"retcode\": retcode}\\n        self.list.append(data)\\n        return data\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/logs/env.py'"}, "return_value": "'from __future__ import absolute_import, unicode_literals\\n\\nfrom tox.interpreters.via_path import get_python_info\\n\\nfrom .command import CommandLog\\n\\n\\nclass EnvLog(object):\\n    \"\"\"Report the status of a tox environment\"\"\"\\n\\n    def __init__(self, result_log, name, dict):\\n        self.reportlog = result_log\\n        self.name = name\\n        self.dict = dict\\n\\n    def set_python_info(self, python_executable):\\n        answer = get_python_info(str(python_executable))\\n        answer[\"executable\"] = python_executable\\n        self.dict[\"python\"] = answer\\n\\n    def get_commandlog(self, name):\\n        \"\"\"get the command log for a given group name\"\"\"\\n        data = self.dict.setdefault(name, [])\\n        return CommandLog(self, data)\\n\\n    def set_installed(self, packages):\\n        self.dict[\"installed_packages\"] = packages\\n\\n    def set_header(self, installpkg):\\n        \"\"\"\\n        :param py.path.local installpkg: Path to the package.\\n        \"\"\"\\n        self.dict[\"installpkg\"] = {\\n            \"sha256\": installpkg.computehash(\"sha256\"),\\n            \"basename\": installpkg.basename,\\n        }\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/logs/result.py'"}, "return_value": "'\"\"\"Generate json report of a run\"\"\"\\nfrom __future__ import absolute_import, unicode_literals\\n\\nimport json\\nimport os\\nimport socket\\nimport sys\\n\\nfrom tox.version import __version__\\n\\nfrom .command import CommandLog\\nfrom .env import EnvLog\\n\\n\\nclass ResultLog(object):\\n    \"\"\"The result of a tox session\"\"\"\\n\\n    def __init__(self):\\n        command_log = []\\n        self.command_log = CommandLog(None, command_log)\\n        self.dict = {\\n            \"reportversion\": \"1\",\\n            \"toxversion\": __version__,\\n            \"platform\": sys.platform,\\n            \"host\": os.getenv(str(\"HOSTNAME\")) or socket.getfqdn(),\\n            \"commands\": command_log,\\n        }\\n\\n    @classmethod\\n    def from_json(cls, data):\\n        result = cls()\\n        result.dict = json.loads(data)\\n        result.command_log = CommandLog(None, result.dict[\"commands\"])\\n        return result\\n\\n    def get_envlog(self, name):\\n        \"\"\"Return the env log of an environment (create on first call)\"\"\"\\n        test_envs = self.dict.setdefault(\"testenvs\", {})\\n        env_data = test_envs.setdefault(name, {})\\n        return EnvLog(self, name, env_data)\\n\\n    def dumps_json(self):\\n        \"\"\"Return the json dump of the current state, indented\"\"\"\\n        return json.dumps(self.dict, indent=2)\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/package/__init__.py'"}, "return_value": "'import py\\n\\nimport tox\\nfrom tox.reporter import error, info, verbosity0, verbosity2, warning\\nfrom tox.util.lock import hold_lock\\n\\nfrom .builder import build_package\\nfrom .local import resolve_package\\nfrom .view import create_session_view\\n\\n\\n@tox.hookimpl\\ndef tox_package(session, venv):\\n    \"\"\"Build an sdist at first call return that for all calls\"\"\"\\n    if not hasattr(session, \"package\"):\\n        session.package, session.dist = get_package(session)\\n    return session.package\\n\\n\\ndef get_package(session):\\n    \"\"\"Perform the package operation\"\"\"\\n    config = session.config\\n    if config.skipsdist:\\n        info(\"skipping sdist step\")\\n        return None\\n    lock_file = session.config.toxworkdir.join(\"{}.lock\".format(session.config.isolated_build_env))\\n\\n    with hold_lock(lock_file, verbosity0):\\n        package = acquire_package(config, session)\\n        session_package = create_session_view(package, config.temp_dir)\\n        return session_package, package\\n\\n\\ndef acquire_package(config, session):\\n    \"\"\"acquire a source distribution (either by loading a local file or triggering a build)\"\"\"\\n    if not config.option.sdistonly and (config.sdistsrc or config.option.installpkg):\\n        path = get_local_package(config)\\n    else:\\n        try:\\n            path = build_package(config, session)\\n        except tox.exception.InvocationError as exception:\\n            error(\"FAIL could not package project - v = {!r}\".format(exception))\\n            return None\\n        sdist_file = config.distshare.join(path.basename)\\n        if sdist_file != path:\\n            info(\"copying new sdistfile to {!r}\".format(str(sdist_file)))\\n            try:\\n                sdist_file.dirpath().ensure(dir=1)\\n            except py.error.Error:\\n                warning(\"could not copy distfile to {}\".format(sdist_file.dirpath()))\\n            else:\\n                path.copy(sdist_file)\\n    return path\\n\\n\\ndef get_local_package(config):\\n    path = config.option.installpkg\\n    if not path:\\n        path = config.sdistsrc\\n    py_path = py.path.local(resolve_package(path))\\n    info(\"using package {!r}, skipping \\'sdist\\' activity \".format(str(py_path)))\\n    return py_path\\n\\n\\n@tox.hookimpl\\ndef tox_cleanup(session):\\n    for tox_env in session.venv_dict.values():\\n        if hasattr(tox_env, \"package\") and isinstance(tox_env.package, py.path.local):\\n            package = tox_env.package\\n            if package.exists():\\n                verbosity2(\"cleanup {}\".format(package))\\n                package.remove()\\n                py.path.local(package.dirname).remove(ignore_errors=True)\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/package/builder/__init__.py'"}, "return_value": "'from .isolated import build\\nfrom .legacy import make_sdist\\n\\n\\ndef build_package(config, session):\\n    if not config.isolated_build:\\n        return make_sdist(config, session)\\n    else:\\n        return build(config, session)\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/package/builder/isolated.py'"}, "return_value": "'from __future__ import unicode_literals\\n\\nimport json\\nimport os\\nfrom collections import namedtuple\\n\\nimport six\\nfrom packaging.requirements import Requirement\\nfrom packaging.utils import canonicalize_name\\n\\nfrom tox import reporter\\nfrom tox.config import DepConfig, get_py_project_toml\\nfrom tox.constants import BUILD_ISOLATED, BUILD_REQUIRE_SCRIPT\\n\\nBuildInfo = namedtuple(\\n    \"BuildInfo\",\\n    [\"requires\", \"backend_module\", \"backend_object\", \"backend_paths\"],\\n)\\n\\n\\ndef build(config, session):\\n    build_info = get_build_info(config.setupdir)\\n    package_venv = session.getvenv(config.isolated_build_env)\\n    package_venv.envconfig.deps_matches_subset = True\\n\\n    # we allow user specified dependencies so the users can write extensions to\\n    # install additional type of dependencies (e.g. binary)\\n    user_specified_deps = package_venv.envconfig.deps\\n    package_venv.envconfig.deps = [DepConfig(r, None) for r in build_info.requires]\\n    package_venv.envconfig.deps.extend(user_specified_deps)\\n\\n    if package_venv.setupenv():\\n        package_venv.finishvenv()\\n    if isinstance(package_venv.status, Exception):\\n        raise package_venv.status\\n\\n    build_requires = get_build_requires(build_info, package_venv, config.setupdir)\\n    # we need to filter out requirements already specified in pyproject.toml or user deps\\n    base_build_deps = {\\n        canonicalize_name(Requirement(r.name).name) for r in package_venv.envconfig.deps\\n    }\\n    build_requires_dep = [\\n        DepConfig(r, None)\\n        for r in build_requires\\n        if canonicalize_name(Requirement(r).name) not in base_build_deps\\n    ]\\n    if build_requires_dep:\\n        with package_venv.new_action(\"build_requires\", package_venv.envconfig.envdir) as action:\\n            package_venv.run_install_command(packages=build_requires_dep, action=action)\\n        package_venv.finishvenv()\\n    return perform_isolated_build(build_info, package_venv, config.distdir, config.setupdir)\\n\\n\\ndef get_build_info(folder):\\n    toml_file = folder.join(\"pyproject.toml\")\\n\\n    # as per https://www.python.org/dev/peps/pep-0517/\\n\\n    def abort(message):\\n        reporter.error(\"{} inside {}\".format(message, toml_file))\\n        raise SystemExit(1)\\n\\n    if not toml_file.exists():\\n        reporter.error(\"missing {}\".format(toml_file))\\n        raise SystemExit(1)\\n\\n    config_data = get_py_project_toml(toml_file)\\n\\n    if \"build-system\" not in config_data:\\n        abort(\"build-system section missing\")\\n\\n    build_system = config_data[\"build-system\"]\\n\\n    if \"requires\" not in build_system:\\n        abort(\"missing requires key at build-system section\")\\n    if \"build-backend\" not in build_system:\\n        abort(\"missing build-backend key at build-system section\")\\n\\n    requires = build_system[\"requires\"]\\n    if not isinstance(requires, list) or not all(isinstance(i, six.text_type) for i in requires):\\n        abort(\"requires key at build-system section must be a list of string\")\\n\\n    backend = build_system[\"build-backend\"]\\n    if not isinstance(backend, six.text_type):\\n        abort(\"build-backend key at build-system section must be a string\")\\n\\n    args = backend.split(\":\")\\n    module = args[0]\\n    obj = args[1] if len(args) > 1 else \"\"\\n\\n    backend_paths = build_system.get(\"backend-path\", [])\\n    if not isinstance(backend_paths, list):\\n        abort(\"backend-path key at build-system section must be a list, if specified\")\\n    backend_paths = [folder.join(p) for p in backend_paths]\\n\\n    normalized_folder = os.path.normcase(str(folder.realpath()))\\n    normalized_paths = (os.path.normcase(str(path.realpath())) for path in backend_paths)\\n\\n    if not all(\\n        os.path.commonprefix((normalized_folder, path)) == normalized_folder\\n        for path in normalized_paths\\n    ):\\n        abort(\"backend-path must exist in the project root\")\\n\\n    return BuildInfo(requires, module, obj, backend_paths)\\n\\n\\ndef perform_isolated_build(build_info, package_venv, dist_dir, setup_dir):\\n    with package_venv.new_action(\\n        \"perform-isolated-build\",\\n        package_venv.envconfig.envdir,\\n    ) as action:\\n        # need to start with an empty (but existing) source distribution folder\\n        if dist_dir.exists():\\n            dist_dir.remove(rec=1, ignore_errors=True)\\n        dist_dir.ensure_dir()\\n\\n        result = package_venv._pcall(\\n            [\\n                package_venv.envconfig.envpython,\\n                BUILD_ISOLATED,\\n                str(dist_dir),\\n                build_info.backend_module,\\n                build_info.backend_object,\\n                os.path.pathsep.join(str(p) for p in build_info.backend_paths),\\n            ],\\n            returnout=True,\\n            action=action,\\n            cwd=setup_dir,\\n        )\\n        reporter.verbosity2(result)\\n        return dist_dir.join(result.split(\"\\\\n\")[-2])\\n\\n\\ndef get_build_requires(build_info, package_venv, setup_dir):\\n    with package_venv.new_action(\"get-build-requires\", package_venv.envconfig.envdir) as action:\\n        result = package_venv._pcall(\\n            [\\n                package_venv.envconfig.envpython,\\n                BUILD_REQUIRE_SCRIPT,\\n                build_info.backend_module,\\n                build_info.backend_object,\\n                os.path.pathsep.join(str(p) for p in build_info.backend_paths),\\n            ],\\n            returnout=True,\\n            action=action,\\n            cwd=setup_dir,\\n        )\\n        return json.loads(result.split(\"\\\\n\")[-2])\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/package/builder/legacy.py'"}, "return_value": "'import sys\\n\\nimport py\\n\\nfrom tox import reporter\\nfrom tox.util.path import ensure_empty_dir\\n\\n\\ndef make_sdist(config, session):\\n    setup = config.setupdir.join(\"setup.py\")\\n    pyproject = config.setupdir.join(\"pyproject.toml\")\\n    setup_check = setup.check()\\n    if not setup_check and not pyproject.check():\\n        reporter.error(\\n            \"No pyproject.toml or setup.py file found. The expected locations are:\\\\n\"\\n            \"  {pyproject} or {setup}\\\\n\"\\n            \"You can\\\\n\"\\n            \"  1. Create one:\\\\n\"\\n            \"     https://tox.readthedocs.io/en/latest/example/package.html\\\\n\"\\n            \"  2. Configure tox to avoid running sdist:\\\\n\"\\n            \"     https://tox.readthedocs.io/en/latest/example/general.html\\\\n\"\\n            \"  3. Configure tox to use an isolated_build\".format(pyproject=pyproject, setup=setup),\\n        )\\n        raise SystemExit(1)\\n    if not setup_check:\\n        reporter.error(\\n            \"pyproject.toml file found.\\\\n\"\\n            \"To use a PEP 517 build-backend you are required to \"\\n            \"configure tox to use an isolated_build:\\\\n\"\\n            \"https://tox.readthedocs.io/en/latest/example/package.html\\\\n\",\\n        )\\n        raise SystemExit(1)\\n    with session.newaction(\"GLOB\", \"packaging\") as action:\\n        action.setactivity(\"sdist-make\", setup)\\n        ensure_empty_dir(config.distdir)\\n        build_log = action.popen(\\n            [sys.executable, setup, \"sdist\", \"--formats=zip\", \"--dist-dir\", config.distdir],\\n            cwd=config.setupdir,\\n            returnout=True,\\n        )\\n        reporter.verbosity2(build_log)\\n        try:\\n            return config.distdir.listdir()[0]\\n        except py.error.ENOENT:\\n            # check if empty or comment only\\n            data = []\\n            with open(str(setup)) as fp:\\n                for line in fp:\\n                    if line and line[0] == \"#\":\\n                        continue\\n                    data.append(line)\\n            if not \"\".join(data).strip():\\n                reporter.error(\"setup.py is empty\")\\n                raise SystemExit(1)\\n            reporter.error(\\n                \"No dist directory found. Please check setup.py, e.g with:\\\\n\"\\n                \"     python setup.py sdist\",\\n            )\\n            raise SystemExit(1)\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/package/local.py'"}, "return_value": "'import os\\nimport re\\n\\nimport packaging.version\\nimport py\\n\\nimport tox\\nfrom tox import reporter\\nfrom tox.exception import MissingDependency\\n\\n_SPEC_2_PACKAGE = {}\\n\\n\\ndef resolve_package(package_spec):\\n    global _SPEC_2_PACKAGE\\n    try:\\n        return _SPEC_2_PACKAGE[package_spec]\\n    except KeyError:\\n        _SPEC_2_PACKAGE[package_spec] = x = get_latest_version_of_package(package_spec)\\n        return x\\n\\n\\ndef get_latest_version_of_package(package_spec):\\n    if not os.path.isabs(str(package_spec)):\\n        return package_spec\\n    p = py.path.local(package_spec)\\n    if p.check():\\n        return p\\n    if not p.dirpath().check(dir=1):\\n        raise tox.exception.MissingDirectory(p.dirpath())\\n    reporter.info(\"determining {}\".format(p))\\n    candidates = p.dirpath().listdir(p.basename)\\n    if len(candidates) == 0:\\n        raise MissingDependency(package_spec)\\n    if len(candidates) > 1:\\n        version_package = []\\n        for filename in candidates:\\n            version = get_version_from_filename(filename.basename)\\n            if version is not None:\\n                version_package.append((version, filename))\\n            else:\\n                reporter.warning(\"could not determine version of: {}\".format(str(filename)))\\n        if not version_package:\\n            raise tox.exception.MissingDependency(package_spec)\\n        version_package.sort()\\n        _, package_with_largest_version = version_package[-1]\\n        return package_with_largest_version\\n    else:\\n        return candidates[0]\\n\\n\\n_REGEX_FILE_NAME_WITH_VERSION = re.compile(r\"[\\\\w_+.-]+-(.*)\\\\.(zip|tar\\\\.gz)\")\\n\\n\\ndef get_version_from_filename(basename):\\n    m = _REGEX_FILE_NAME_WITH_VERSION.match(basename)\\n    if m is None:\\n        return None\\n    version = m.group(1)\\n    try:\\n        return packaging.version.Version(version)\\n    except packaging.version.InvalidVersion:\\n        return None\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/package/view.py'"}, "return_value": "'import os\\nfrom itertools import chain\\n\\nimport six\\n\\nfrom tox.reporter import verbosity1\\n\\n\\ndef create_session_view(package, temp_dir):\\n    \"\"\"once we build a package we cannot return that directly, as a subsequent call\\n    might delete that package (in order to do its own build); therefore we need to\\n    return a view of the file that it\\'s not prone to deletion and can be removed when the\\n    session ends\\n    \"\"\"\\n    if not package:\\n        return package\\n    package_dir = temp_dir.join(\"package\")\\n    package_dir.ensure(dir=True)\\n\\n    # we\\'ll number the active instances, and use the max value as session folder for a new build\\n    # note we cannot change package names as PEP-491 (wheel binary format)\\n    # is strict about file name structure\\n    exists = [i.basename for i in package_dir.listdir()]\\n    file_id = max(chain((0,), (int(i) for i in exists if six.text_type(i).isnumeric())))\\n\\n    session_dir = package_dir.join(str(file_id + 1))\\n    session_dir.ensure(dir=True)\\n    session_package = session_dir.join(package.basename)\\n\\n    # if we can do hard links do that, otherwise just copy\\n    links = False\\n    if hasattr(os, \"link\"):\\n        try:\\n            os.link(str(package), str(session_package))\\n            links = True\\n        except (OSError, NotImplementedError):\\n            pass\\n    if not links:\\n        package.copy(session_package)\\n    operation = \"links\" if links else \"copied\"\\n    common = session_package.common(package)\\n    verbosity1(\\n        \"package {} {} to {} ({})\".format(\\n            common.bestrelpath(session_package),\\n            operation,\\n            common.bestrelpath(package),\\n            common,\\n        ),\\n    )\\n    return session_package\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/reporter.py'"}, "return_value": "'\"\"\"A progress reporter inspired from the logging modules\"\"\"\\nfrom __future__ import absolute_import, unicode_literals\\n\\nimport os\\nimport time\\nfrom contextlib import contextmanager\\nfrom datetime import datetime\\n\\nimport py\\n\\n\\nclass Verbosity(object):\\n    DEBUG = 2\\n    INFO = 1\\n    DEFAULT = 0\\n    QUIET = -1\\n    EXTRA_QUIET = -2\\n\\n\\nREPORTER_TIMESTAMP_ON_ENV = str(\"TOX_REPORTER_TIMESTAMP\")\\nREPORTER_TIMESTAMP_ON = os.environ.get(REPORTER_TIMESTAMP_ON_ENV, False) == \"1\"\\nSTART = datetime.now()\\n\\n\\nclass Reporter(object):\\n    def __init__(self, verbose_level=None, quiet_level=None):\\n        kwargs = {}\\n        if verbose_level is not None:\\n            kwargs[\"verbose_level\"] = verbose_level\\n        if quiet_level is not None:\\n            kwargs[\"quiet_level\"] = quiet_level\\n        self._reset(**kwargs)\\n\\n    def _reset(self, verbose_level=0, quiet_level=0):\\n        self.verbose_level = verbose_level\\n        self.quiet_level = quiet_level\\n        self.reported_lines = []\\n        self.tw = py.io.TerminalWriter()\\n\\n    @property\\n    def verbosity(self):\\n        return self.verbose_level - self.quiet_level\\n\\n    def log_popen(self, cwd, outpath, cmd_args_shell, pid):\\n        \"\"\"log information about the action.popen() created process.\"\"\"\\n        msg = \"[{}] {}$ {}\".format(pid, cwd, cmd_args_shell)\\n        if outpath:\\n            if outpath.common(cwd) is not None:\\n                outpath = cwd.bestrelpath(outpath)\\n            msg = \"{} >{}\".format(msg, outpath)\\n        self.verbosity1(msg, of=\"logpopen\")\\n\\n    @property\\n    def messages(self):\\n        return [i for _, i in self.reported_lines]\\n\\n    @contextmanager\\n    def timed_operation(self, name, msg):\\n        self.verbosity2(\"{} start: {}\".format(name, msg), bold=True)\\n        start = time.time()\\n        yield\\n        duration = time.time() - start\\n        self.verbosity2(\\n            \"{} finish: {} after {:.2f} seconds\".format(name, msg, duration),\\n            bold=True,\\n        )\\n\\n    def separator(self, of, msg, level):\\n        if self.verbosity >= level:\\n            self.reported_lines.append((\"separator\", \"- summary -\"))\\n            self.tw.sep(of, msg)\\n\\n    def logline_if(self, level, of, msg, key=None, **kwargs):\\n        if self.verbosity >= level:\\n            message = str(msg) if key is None else \"{}{}\".format(key, msg)\\n            self.logline(of, message, **kwargs)\\n\\n    def logline(self, of, msg, **opts):\\n        self.reported_lines.append((of, msg))\\n        timestamp = \"\"\\n        if REPORTER_TIMESTAMP_ON:\\n            timestamp = \"{} \".format(datetime.now() - START)\\n        line_msg = \"{}{}\\\\n\".format(timestamp, msg)\\n        self.tw.write(line_msg, **opts)\\n\\n    def keyvalue(self, name, value):\\n        if name.endswith(\":\"):\\n            name += \" \"\\n        self.tw.write(name, bold=True)\\n        self.tw.write(value)\\n        self.tw.line()\\n\\n    def line(self, msg, **opts):\\n        self.logline(\"line\", msg, **opts)\\n\\n    def info(self, msg):\\n        self.logline_if(Verbosity.DEBUG, \"info\", msg)\\n\\n    def using(self, msg):\\n        self.logline_if(Verbosity.INFO, \"using\", msg, \"using \", bold=True)\\n\\n    def good(self, msg):\\n        self.logline_if(Verbosity.QUIET, \"good\", msg, green=True)\\n\\n    def warning(self, msg):\\n        self.logline_if(Verbosity.QUIET, \"warning\", msg, \"WARNING: \", red=True)\\n\\n    def error(self, msg):\\n        self.logline_if(Verbosity.QUIET, \"error\", msg, \"ERROR: \", red=True)\\n\\n    def skip(self, msg):\\n        self.logline_if(Verbosity.QUIET, \"skip\", msg, \"SKIPPED: \", yellow=True)\\n\\n    def verbosity0(self, msg, **opts):\\n        self.logline_if(Verbosity.DEFAULT, \"verbosity0\", msg, **opts)\\n\\n    def verbosity1(self, msg, of=\"verbosity1\", **opts):\\n        self.logline_if(Verbosity.INFO, of, msg, **opts)\\n\\n    def verbosity2(self, msg, **opts):\\n        self.logline_if(Verbosity.DEBUG, \"verbosity2\", msg, **opts)\\n\\n    def quiet(self, msg):\\n        self.logline_if(Verbosity.QUIET, \"quiet\", msg)\\n\\n\\n_INSTANCE = Reporter()\\n\\n\\ndef update_default_reporter(quiet_level, verbose_level):\\n    _INSTANCE.quiet_level = quiet_level\\n    _INSTANCE.verbose_level = verbose_level\\n\\n\\ndef has_level(of):\\n    return _INSTANCE.verbosity > of\\n\\n\\ndef verbosity():\\n    return _INSTANCE.verbosity\\n\\n\\nverbosity0 = _INSTANCE.verbosity0\\nverbosity1 = _INSTANCE.verbosity1\\nverbosity2 = _INSTANCE.verbosity2\\nerror = _INSTANCE.error\\nwarning = _INSTANCE.warning\\ngood = _INSTANCE.good\\nusing = _INSTANCE.using\\nskip = _INSTANCE.skip\\ninfo = _INSTANCE.info\\nline = _INSTANCE.line\\nseparator = _INSTANCE.separator\\nkeyvalue = _INSTANCE.keyvalue\\nquiet = _INSTANCE.quiet\\ntimed_operation = _INSTANCE.timed_operation\\nlog_popen = _INSTANCE.log_popen\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/__init__.py'"}, "return_value": "'\"\"\"\\nAutomatically package and test a Python project against configurable\\nPython2 and Python3 based virtual environments. Environments are\\nsetup by using virtualenv. Configuration is generally done through an\\nINI-style \"tox.ini\" file.\\n\"\"\"\\nfrom __future__ import absolute_import, unicode_literals\\n\\nimport json\\nimport os\\nimport re\\nimport subprocess\\nimport sys\\nfrom collections import OrderedDict\\nfrom contextlib import contextmanager\\n\\nimport py\\n\\nimport tox\\nfrom tox import reporter\\nfrom tox.action import Action\\nfrom tox.config import INTERRUPT_TIMEOUT, SUICIDE_TIMEOUT, TERMINATE_TIMEOUT, parseconfig\\nfrom tox.config.parallel import ENV_VAR_KEY_PRIVATE as PARALLEL_ENV_VAR_KEY_PRIVATE\\nfrom tox.config.parallel import OFF_VALUE as PARALLEL_OFF\\nfrom tox.logs.result import ResultLog\\nfrom tox.reporter import update_default_reporter\\nfrom tox.util import set_os_env_var\\nfrom tox.util.graph import stable_topological_sort\\nfrom tox.util.stdlib import suppress_output\\nfrom tox.venv import VirtualEnv\\n\\nfrom .commands.help import show_help\\nfrom .commands.help_ini import show_help_ini\\nfrom .commands.provision import provision_tox\\nfrom .commands.run.parallel import run_parallel\\nfrom .commands.run.sequential import run_sequential\\nfrom .commands.show_config import show_config\\nfrom .commands.show_env import show_envs\\n\\n\\ndef cmdline(args=None):\\n    if args is None:\\n        args = sys.argv[1:]\\n    main(args)\\n\\n\\ndef setup_reporter(args):\\n    from argparse import ArgumentParser\\n\\n    from tox.config.reporter import add_verbosity_commands\\n\\n    parser = ArgumentParser(add_help=False)\\n    add_verbosity_commands(parser)\\n    with suppress_output():\\n        try:\\n            options, _ = parser.parse_known_args(args)\\n            update_default_reporter(options.quiet_level, options.verbose_level)\\n        except SystemExit:\\n            pass\\n\\n\\ndef main(args):\\n    setup_reporter(args)\\n    try:\\n        config = load_config(args)\\n        config.logdir.ensure(dir=1)\\n        with set_os_env_var(str(\"TOX_WORK_DIR\"), config.toxworkdir):\\n            session = build_session(config)\\n            exit_code = session.runcommand()\\n        if exit_code is None:\\n            exit_code = 0\\n        raise SystemExit(exit_code)\\n    except tox.exception.BadRequirement:\\n        raise SystemExit(1)\\n    except KeyboardInterrupt:\\n        raise SystemExit(2)\\n\\n\\ndef load_config(args):\\n    try:\\n        config = parseconfig(args)\\n        if config.option.help:\\n            show_help(config)\\n            raise SystemExit(0)\\n        elif config.option.helpini:\\n            show_help_ini(config)\\n            raise SystemExit(0)\\n    except tox.exception.MissingRequirement as exception:\\n        config = exception.config\\n    return config\\n\\n\\ndef build_session(config):\\n    return Session(config)\\n\\n\\nclass Session(object):\\n    \"\"\"The session object that ties together configuration, reporting, venv creation, testing.\"\"\"\\n\\n    def __init__(self, config, popen=subprocess.Popen):\\n        self._reset(config, popen)\\n\\n    def _reset(self, config, popen=subprocess.Popen):\\n        self.config = config\\n        self.popen = popen\\n        self.resultlog = ResultLog()\\n        self.existing_venvs = OrderedDict()\\n        self.venv_dict = {} if self.config.run_provision else self._build_venvs()\\n\\n    def _build_venvs(self):\\n        try:\\n            need_to_run = OrderedDict((v, self.getvenv(v)) for v in self._evaluated_env_list)\\n            try:\\n                venv_order = stable_topological_sort(\\n                    OrderedDict((name, v.envconfig.depends) for name, v in need_to_run.items()),\\n                )\\n\\n                venvs = OrderedDict((v, need_to_run[v]) for v in venv_order)\\n                return venvs\\n            except ValueError as exception:\\n                reporter.error(\"circular dependency detected: {}\".format(exception))\\n        except LookupError:\\n            pass\\n        except tox.exception.ConfigError as exception:\\n            reporter.error(str(exception))\\n        raise SystemExit(1)\\n\\n    def getvenv(self, name):\\n        if name in self.existing_venvs:\\n            return self.existing_venvs[name]\\n        env_config = self.config.envconfigs.get(name, None)\\n        if env_config is None:\\n            reporter.error(\"unknown environment {!r}\".format(name))\\n            raise LookupError(name)\\n        elif env_config.envdir == self.config.toxinidir:\\n            reporter.error(\"venv {!r} in {} would delete project\".format(name, env_config.envdir))\\n            raise tox.exception.ConfigError(\"envdir must not equal toxinidir\")\\n        env_log = self.resultlog.get_envlog(name)\\n        venv = VirtualEnv(envconfig=env_config, popen=self.popen, env_log=env_log)\\n        self.existing_venvs[name] = venv\\n        return venv\\n\\n    @property\\n    def _evaluated_env_list(self):\\n        tox_env_filter = os.environ.get(\"TOX_SKIP_ENV\")\\n        tox_env_filter_re = re.compile(tox_env_filter) if tox_env_filter is not None else None\\n        visited = set()\\n        for name in self.config.envlist:\\n            if name in visited:\\n                continue\\n            visited.add(name)\\n            if tox_env_filter_re is not None and tox_env_filter_re.match(name):\\n                msg = \"skip environment {}, matches filter {!r}\".format(\\n                    name,\\n                    tox_env_filter_re.pattern,\\n                )\\n                reporter.verbosity1(msg)\\n                continue\\n            yield name\\n\\n    @property\\n    def hook(self):\\n        return self.config.pluginmanager.hook\\n\\n    def newaction(self, name, msg, *args):\\n        return Action(\\n            name,\\n            msg,\\n            args,\\n            self.config.logdir,\\n            self.config.option.resultjson,\\n            self.resultlog.command_log,\\n            self.popen,\\n            sys.executable,\\n            SUICIDE_TIMEOUT,\\n            INTERRUPT_TIMEOUT,\\n            TERMINATE_TIMEOUT,\\n        )\\n\\n    def runcommand(self):\\n        reporter.using(\\n            \"tox-{} from {} (pid {})\".format(tox.__version__, tox.__file__, os.getpid()),\\n        )\\n        show_description = reporter.has_level(reporter.Verbosity.DEFAULT)\\n        if self.config.run_provision:\\n            provision_tox_venv = self.getvenv(self.config.provision_tox_env)\\n            return provision_tox(provision_tox_venv, self.config.args)\\n        else:\\n            if self.config.option.showconfig:\\n                self.showconfig()\\n            elif self.config.option.listenvs:\\n                self.showenvs(all_envs=False, description=show_description)\\n            elif self.config.option.listenvs_all:\\n                self.showenvs(all_envs=True, description=show_description)\\n            else:\\n                with self.cleanup():\\n                    return self.subcommand_test()\\n\\n    @contextmanager\\n    def cleanup(self):\\n        self.config.temp_dir.ensure(dir=True)\\n        try:\\n            yield\\n        finally:\\n            self.hook.tox_cleanup(session=self)\\n\\n    def subcommand_test(self):\\n        if self.config.skipsdist:\\n            reporter.info(\"skipping sdist step\")\\n        else:\\n            for venv in self.venv_dict.values():\\n                if not venv.envconfig.skip_install:\\n                    venv.package = self.hook.tox_package(session=self, venv=venv)\\n                    if not venv.package:\\n                        return 2\\n                    venv.envconfig.setenv[str(\"TOX_PACKAGE\")] = str(venv.package)\\n        if self.config.option.sdistonly:\\n            return\\n\\n        within_parallel = PARALLEL_ENV_VAR_KEY_PRIVATE in os.environ\\n        try:\\n            if not within_parallel and self.config.option.parallel != PARALLEL_OFF:\\n                run_parallel(self.config, self.venv_dict)\\n            else:\\n                run_sequential(self.config, self.venv_dict)\\n        finally:\\n            retcode = self._summary()\\n        return retcode\\n\\n    def _add_parallel_summaries(self):\\n        if self.config.option.parallel != PARALLEL_OFF and \"testenvs\" in self.resultlog.dict:\\n            result_log = self.resultlog.dict[\"testenvs\"]\\n            for tox_env in self.venv_dict.values():\\n                data = self._load_parallel_env_report(tox_env)\\n                if data and \"testenvs\" in data and tox_env.name in data[\"testenvs\"]:\\n                    result_log[tox_env.name] = data[\"testenvs\"][tox_env.name]\\n\\n    @staticmethod\\n    def _load_parallel_env_report(tox_env):\\n        \"\"\"Load report data into memory, remove disk file\"\"\"\\n        result_json_path = tox_env.get_result_json_path()\\n        if result_json_path and result_json_path.exists():\\n            with result_json_path.open(\"r\") as file_handler:\\n                data = json.load(file_handler)\\n            result_json_path.remove()\\n            return data\\n\\n    def _summary(self):\\n        is_parallel_child = PARALLEL_ENV_VAR_KEY_PRIVATE in os.environ\\n        if not is_parallel_child:\\n            reporter.separator(\"_\", \"summary\", reporter.Verbosity.QUIET)\\n        exit_code = 0\\n        for venv in self.venv_dict.values():\\n            report = reporter.good\\n            status = getattr(venv, \"status\", \"undefined\")\\n            if isinstance(status, tox.exception.InterpreterNotFound):\\n                msg = \" {}: {}\".format(venv.envconfig.envname, str(status))\\n                if self.config.option.skip_missing_interpreters == \"true\":\\n                    report = reporter.skip\\n                else:\\n                    exit_code = 1\\n                    report = reporter.error\\n            elif status == \"platform mismatch\":\\n                msg = \" {}: {} ({!r} does not match {!r})\".format(\\n                    venv.envconfig.envname,\\n                    str(status),\\n                    sys.platform,\\n                    venv.envconfig.platform,\\n                )\\n                report = reporter.skip\\n            elif status and status == \"ignored failed command\":\\n                msg = \"  {}: {}\".format(venv.envconfig.envname, str(status))\\n            elif status and status != \"skipped tests\":\\n                msg = \"  {}: {}\".format(venv.envconfig.envname, str(status))\\n                report = reporter.error\\n                exit_code = 1\\n            else:\\n                if not status:\\n                    status = \"commands succeeded\"\\n                msg = \"  {}: {}\".format(venv.envconfig.envname, status)\\n            if not is_parallel_child:\\n                report(msg)\\n        if not exit_code and not is_parallel_child:\\n            reporter.good(\"  congratulations :)\")\\n        path = self.config.option.resultjson\\n        if path:\\n            if not is_parallel_child:\\n                self._add_parallel_summaries()\\n            path = py.path.local(path)\\n            data = self.resultlog.dumps_json()\\n            reporter.line(\"write json report at: {}\".format(path))\\n            path.write(data)\\n        return exit_code\\n\\n    def showconfig(self):\\n        show_config(self.config)\\n\\n    def showenvs(self, all_envs=False, description=False):\\n        show_envs(self.config, all_envs=all_envs, description=description)\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/__init__.py'"}, "return_value": "''"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/help.py'"}, "return_value": "'from tox import reporter\\n\\n\\ndef show_help(config):\\n    reporter.line(config._parser._format_help())\\n    reporter.line(\"Environment variables\", bold=True)\\n    reporter.line(\"TOXENV: comma separated list of environments (overridable by \\'-e\\')\")\\n    reporter.line(\"TOX_SKIP_ENV: regular expression to filter down from running tox environments\")\\n    reporter.line(\\n        \"TOX_TESTENV_PASSENV: space-separated list of extra environment variables to be \"\\n        \"passed into test command environments\",\\n    )\\n    reporter.line(\"PY_COLORS: 0 disable colorized output, 1 enable (default)\")\\n    reporter.line(\"TOX_PARALLEL_NO_SPINNER: 1 disable spinner for CI, 0 enable (default)\")\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/help_ini.py'"}, "return_value": "'from tox import reporter\\n\\n\\ndef show_help_ini(config):\\n    reporter.separator(\"-\", \"per-testenv attributes\", reporter.Verbosity.INFO)\\n    for env_attr in config._testenv_attr:\\n        reporter.line(\\n            \"{:<15} {:<8} default: {}\".format(\\n                env_attr.name,\\n                \"<{}>\".format(env_attr.type),\\n                env_attr.default,\\n            ),\\n            bold=True,\\n        )\\n        reporter.line(env_attr.help)\\n        reporter.line(\"\")\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/provision.py'"}, "return_value": "'\"\"\"In case the tox environment is not correctly setup provision it and delegate execution\"\"\"\\nfrom __future__ import absolute_import, unicode_literals\\n\\nimport os\\n\\nfrom tox.exception import InvocationError\\n\\n\\ndef provision_tox(provision_venv, args):\\n    ensure_meta_env_up_to_date(provision_venv)\\n    with provision_venv.new_action(\"provision\") as action:\\n        provision_args = [str(provision_venv.envconfig.envpython), \"-m\", \"tox\"] + args\\n        try:\\n            env = os.environ.copy()\\n            env[str(\"TOX_PROVISION\")] = str(\"1\")\\n            env.pop(\"__PYVENV_LAUNCHER__\", None)\\n            action.popen(provision_args, redirect=False, report_fail=False, env=env)\\n            return 0\\n        except InvocationError as exception:\\n            return exception.exit_code\\n\\n\\ndef ensure_meta_env_up_to_date(provision_venv):\\n    if provision_venv.setupenv():\\n        provision_venv.finishvenv()\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/run/__init__.py'"}, "return_value": "''"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/run/parallel.py'"}, "return_value": "'import os\\nimport sys\\nfrom collections import OrderedDict, deque\\nfrom threading import Event, Semaphore, Thread\\n\\nfrom tox import reporter\\nfrom tox.config.parallel import ENV_VAR_KEY_PRIVATE as PARALLEL_ENV_VAR_KEY_PRIVATE\\nfrom tox.config.parallel import ENV_VAR_KEY_PUBLIC as PARALLEL_ENV_VAR_KEY_PUBLIC\\nfrom tox.exception import InvocationError\\nfrom tox.util.main import MAIN_FILE\\nfrom tox.util.spinner import Spinner\\n\\n\\ndef run_parallel(config, venv_dict):\\n    \"\"\"here we\\'ll just start parallel sub-processes\"\"\"\\n    live_out = config.option.parallel_live\\n    disable_spinner = bool(os.environ.get(\"TOX_PARALLEL_NO_SPINNER\") == \"1\")\\n    args = [sys.executable, MAIN_FILE] + config.args\\n    try:\\n        position = args.index(\"--\")\\n    except ValueError:\\n        position = len(args)\\n\\n    max_parallel = config.option.parallel\\n    if max_parallel is None:\\n        max_parallel = len(venv_dict)\\n    semaphore = Semaphore(max_parallel)\\n    finished = Event()\\n\\n    show_progress = (\\n        not disable_spinner and not live_out and reporter.verbosity() > reporter.Verbosity.QUIET\\n    )\\n\\n    with Spinner(enabled=show_progress) as spinner:\\n\\n        def run_in_thread(tox_env, os_env, processes):\\n            output = None\\n            print_out = None\\n            env_name = tox_env.envconfig.envname\\n            status = \"skipped tests\" if config.option.notest else None\\n            try:\\n                os_env[str(PARALLEL_ENV_VAR_KEY_PRIVATE)] = str(env_name)\\n                os_env[str(PARALLEL_ENV_VAR_KEY_PUBLIC)] = str(env_name)\\n                args_sub = list(args)\\n                if hasattr(tox_env, \"package\"):\\n                    args_sub.insert(position, str(tox_env.package))\\n                    args_sub.insert(position, \"--installpkg\")\\n                if tox_env.get_result_json_path():\\n                    result_json_index = args_sub.index(\"--result-json\")\\n                    args_sub[result_json_index + 1] = \"{}\".format(tox_env.get_result_json_path())\\n                with tox_env.new_action(\"parallel {}\".format(tox_env.name)) as action:\\n\\n                    def collect_process(process):\\n                        processes[tox_env] = (action, process)\\n\\n                    print_out = not live_out and tox_env.envconfig.parallel_show_output\\n                    output = action.popen(\\n                        args=args_sub,\\n                        env=os_env,\\n                        redirect=not live_out,\\n                        capture_err=print_out,\\n                        callback=collect_process,\\n                        returnout=print_out,\\n                    )\\n\\n            except InvocationError as err:\\n                status = \"parallel child exit code {}\".format(err.exit_code)\\n            finally:\\n                semaphore.release()\\n                finished.set()\\n                tox_env.status = status\\n                done.add(env_name)\\n                outcome = spinner.succeed\\n                if config.option.notest:\\n                    outcome = spinner.skip\\n                elif status is not None:\\n                    outcome = spinner.fail\\n                outcome(env_name)\\n                if print_out and output is not None:\\n                    reporter.verbosity0(output)\\n\\n        threads = deque()\\n        processes = {}\\n        todo_keys = set(venv_dict.keys())\\n        todo = OrderedDict((n, todo_keys & set(v.envconfig.depends)) for n, v in venv_dict.items())\\n        done = set()\\n        try:\\n            while todo:\\n                for name, depends in list(todo.items()):\\n                    if depends - done:\\n                        # skip if has unfinished dependencies\\n                        continue\\n                    del todo[name]\\n                    venv = venv_dict[name]\\n                    semaphore.acquire(blocking=True)\\n                    spinner.add(name)\\n                    thread = Thread(\\n                        target=run_in_thread,\\n                        args=(venv, os.environ.copy(), processes),\\n                    )\\n                    thread.daemon = True\\n                    thread.start()\\n                    threads.append(thread)\\n                if todo:\\n                    # wait until someone finishes and retry queuing jobs\\n                    finished.wait()\\n                    finished.clear()\\n            while threads:\\n                threads = [\\n                    thread for thread in threads if not thread.join(0.1) and thread.is_alive()\\n                ]\\n        except KeyboardInterrupt:\\n            reporter.verbosity0(\\n                \"[{}] KeyboardInterrupt parallel - stopping children\".format(os.getpid()),\\n            )\\n            while True:\\n                # do not allow to interrupt until children interrupt\\n                try:\\n                    # putting it inside a thread so it\\'s not interrupted\\n                    stopper = Thread(target=_stop_child_processes, args=(processes, threads))\\n                    stopper.start()\\n                    stopper.join()\\n                except KeyboardInterrupt:\\n                    continue\\n                raise KeyboardInterrupt\\n\\n\\ndef _stop_child_processes(processes, main_threads):\\n    \"\"\"A three level stop mechanism for children - INT (250ms) -> TERM (100ms) -> KILL\"\"\"\\n\\n    # first stop children\\n    def shutdown(tox_env, action, process):\\n        action.handle_interrupt(process)\\n\\n    threads = [Thread(target=shutdown, args=(n, a, p)) for n, (a, p) in processes.items()]\\n    for thread in threads:\\n        thread.start()\\n    for thread in threads:\\n        thread.join()\\n\\n    # then its threads\\n    for thread in main_threads:\\n        thread.join()\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/run/sequential.py'"}, "return_value": "'import py\\n\\nimport tox\\nfrom tox.exception import InvocationError\\n\\n\\ndef run_sequential(config, venv_dict):\\n    for venv in venv_dict.values():\\n        if venv.setupenv():\\n            if venv.envconfig.skip_install:\\n                venv.finishvenv()\\n            else:\\n                if venv.envconfig.usedevelop:\\n                    develop_pkg(venv, config.setupdir)\\n                elif config.skipsdist:\\n                    venv.finishvenv()\\n                else:\\n                    installpkg(venv, venv.package)\\n            if venv.status == 0:\\n                runenvreport(venv, config)\\n        if venv.status == 0:\\n            runtestenv(venv, config)\\n\\n\\ndef develop_pkg(venv, setupdir):\\n    with venv.new_action(\"developpkg\", setupdir) as action:\\n        try:\\n            venv.developpkg(setupdir, action)\\n            return True\\n        except InvocationError as exception:\\n            venv.status = exception\\n            return False\\n\\n\\ndef installpkg(venv, path):\\n    \"\"\"Install package in the specified virtual environment.\\n\\n    :param VenvConfig venv: Destination environment\\n    :param str path: Path to the distribution package.\\n    :return: True if package installed otherwise False.\\n    :rtype: bool\\n    \"\"\"\\n    venv.env_log.set_header(installpkg=py.path.local(path))\\n    with venv.new_action(\"installpkg\", path) as action:\\n        try:\\n            venv.installpkg(path, action)\\n            return True\\n        except tox.exception.InvocationError as exception:\\n            venv.status = exception\\n            return False\\n\\n\\ndef runenvreport(venv, config):\\n    \"\"\"\\n    Run an environment report to show which package\\n    versions are installed in the venv\\n    \"\"\"\\n    try:\\n        with venv.new_action(\"envreport\") as action:\\n            packages = config.pluginmanager.hook.tox_runenvreport(venv=venv, action=action)\\n        action.setactivity(\"installed\", \",\".join(packages))\\n        venv.env_log.set_installed(packages)\\n    except InvocationError as exception:\\n        venv.status = exception\\n\\n\\ndef runtestenv(venv, config, redirect=False):\\n    if venv.status == 0 and config.option.notest:\\n        venv.status = \"skipped tests\"\\n    else:\\n        if venv.status:\\n            return\\n        config.pluginmanager.hook.tox_runtest_pre(venv=venv)\\n        if venv.status == 0:\\n            config.pluginmanager.hook.tox_runtest(venv=venv, redirect=redirect)\\n        config.pluginmanager.hook.tox_runtest_post(venv=venv)\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/show_config.py'"}, "return_value": "'import sys\\nfrom collections import OrderedDict\\n\\nfrom packaging.requirements import Requirement\\nfrom six import StringIO\\nfrom six.moves import configparser\\n\\nfrom tox import reporter\\nfrom tox.util.stdlib import importlib_metadata\\n\\nDO_NOT_SHOW_CONFIG_ATTRIBUTES = (\\n    \"interpreters\",\\n    \"envconfigs\",\\n    \"envlist\",\\n    \"pluginmanager\",\\n    \"envlist_explicit\",\\n)\\n\\n\\ndef show_config(config):\\n    parser = configparser.RawConfigParser()\\n\\n    if not config.envlist_explicit or reporter.verbosity() >= reporter.Verbosity.INFO:\\n        tox_info(config, parser)\\n        version_info(parser)\\n    tox_envs_info(config, parser)\\n\\n    content = StringIO()\\n    parser.write(content)\\n    value = content.getvalue().rstrip()\\n    reporter.verbosity0(value)\\n\\n\\ndef tox_envs_info(config, parser):\\n    if config.envlist_explicit:\\n        env_list = config.envlist\\n    elif config.option.listenvs:\\n        env_list = config.envlist_default\\n    else:\\n        env_list = list(config.envconfigs.keys())\\n    for name in env_list:\\n        env_config = config.envconfigs[name]\\n        values = OrderedDict(\\n            (attr.name, str(getattr(env_config, attr.name)))\\n            for attr in config._parser._testenv_attr\\n        )\\n        section = \"testenv:{}\".format(name)\\n        set_section(parser, section, values)\\n\\n\\ndef tox_info(config, parser):\\n    info = OrderedDict(\\n        (i, str(getattr(config, i)))\\n        for i in sorted(dir(config))\\n        if not i.startswith(\"_\") and i not in DO_NOT_SHOW_CONFIG_ATTRIBUTES\\n    )\\n    info[\"host_python\"] = sys.executable\\n    set_section(parser, \"tox\", info)\\n\\n\\ndef version_info(parser):\\n    versions = OrderedDict()\\n    to_visit = {\"tox\"}\\n    while to_visit:\\n        current = to_visit.pop()\\n        current_dist = importlib_metadata.distribution(current)\\n        current_name = current_dist.metadata[\"name\"]\\n        versions[current_name] = current_dist.version\\n        if current_dist.requires is not None:\\n            for require in current_dist.requires:\\n                pkg = Requirement(require)\\n                if (\\n                    pkg.marker is None or pkg.marker.evaluate({\"extra\": \"\"})\\n                ) and pkg.name not in versions:\\n                    to_visit.add(pkg.name)\\n    set_section(parser, \"tox:versions\", versions)\\n\\n\\ndef set_section(parser, section, values):\\n    parser.add_section(section)\\n    for key, value in values.items():\\n        parser.set(section, key, value)\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/show_env.py'"}, "return_value": "'from __future__ import absolute_import, unicode_literals\\n\\nfrom tox import reporter as report\\n\\n\\ndef show_envs(config, all_envs=False, description=False):\\n    env_conf = config.envconfigs  # this contains all environments\\n    default = config.envlist_default  # this only the defaults\\n    ignore = {config.isolated_build_env, config.provision_tox_env}.union(default)\\n    extra = [e for e in env_conf if e not in ignore] if all_envs else []\\n\\n    if description and default:\\n        report.line(\"default environments:\")\\n    max_length = max(len(env) for env in (default + extra) or [\"\"])\\n\\n    def report_env(e):\\n        if description:\\n            text = env_conf[e].description or \"[no description]\"\\n            msg = \"{} -> {}\".format(e.ljust(max_length), text).strip()\\n        else:\\n            msg = e\\n        report.line(msg)\\n\\n    for e in default:\\n        report_env(e)\\n    if all_envs and extra:\\n        if description:\\n            if default:\\n                report.line(\"\")\\n            report.line(\"additional environments:\")\\n        for e in extra:\\n            report_env(e)\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/util/__init__.py'"}, "return_value": "'from __future__ import absolute_import, unicode_literals\\n\\nimport os\\nfrom contextlib import contextmanager\\n\\n\\n@contextmanager\\ndef set_os_env_var(env_var_name, value):\\n    \"\"\"Set an environment variable with unrolling once the context exists\"\"\"\\n    prev_value = os.environ.get(env_var_name)\\n    try:\\n        os.environ[env_var_name] = str(value)\\n        yield\\n    finally:\\n        if prev_value is None:\\n            del os.environ[env_var_name]\\n        else:\\n            os.environ[env_var_name] = prev_value\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/util/graph.py'"}, "return_value": "'from __future__ import absolute_import, unicode_literals\\n\\nfrom collections import OrderedDict, defaultdict\\n\\n\\ndef stable_topological_sort(graph):\\n    to_order = set(graph.keys())  # keep a log of what  we need to order\\n\\n    # normalize graph - fill missing nodes (assume no dependency)\\n    for values in list(graph.values()):\\n        for value in values:\\n            if value not in graph:\\n                graph[value] = ()\\n\\n    inverse_graph = defaultdict(set)\\n    for key, depends in graph.items():\\n        for depend in depends:\\n            inverse_graph[depend].add(key)\\n\\n    topology = []\\n    degree = {k: len(v) for k, v in graph.items()}\\n    ready_to_visit = {n for n, d in degree.items() if not d}\\n    need_to_visit = OrderedDict((i, None) for i in graph.keys())\\n    while need_to_visit:\\n        # to keep stable, pick the first node ready to visit in the original order\\n        for node in need_to_visit:\\n            if node in ready_to_visit:\\n                break\\n        else:\\n            break\\n        del need_to_visit[node]\\n\\n        topology.append(node)\\n\\n        # decrease degree for nodes we\\'re going too\\n        for to_node in inverse_graph[node]:\\n            degree[to_node] -= 1\\n            if not degree[to_node]:  # if a node has no more incoming node it\\'s ready to visit\\n                ready_to_visit.add(to_node)\\n\\n    result = [n for n in topology if n in to_order]  # filter out missing nodes we extended\\n\\n    if len(result) < len(to_order):\\n        identify_cycle(graph)\\n        msg = \"could not order tox environments and failed to detect circle\"  # pragma: no cover\\n        raise ValueError(msg)  # pragma: no cover\\n    return result\\n\\n\\ndef identify_cycle(graph):\\n    path = OrderedDict()\\n    visited = set()\\n\\n    def visit(vertex):\\n        if vertex in visited:\\n            return None\\n        visited.add(vertex)\\n        path[vertex] = None\\n        for neighbour in graph.get(vertex, ()):\\n            if neighbour in path or visit(neighbour):\\n                return path\\n        del path[vertex]\\n        return None\\n\\n    for node in graph:\\n        result = visit(node)\\n        if result is not None:\\n            raise ValueError(\"{}\".format(\" | \".join(result.keys())))\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/util/lock.py'"}, "return_value": "'\"\"\"holds locking functionality that works across processes\"\"\"\\nfrom __future__ import absolute_import, unicode_literals\\n\\nfrom contextlib import contextmanager\\n\\nimport py\\nfrom filelock import FileLock, Timeout\\n\\nfrom tox.reporter import verbosity1\\n\\n\\n@contextmanager\\ndef hold_lock(lock_file, reporter=verbosity1):\\n    py.path.local(lock_file.dirname).ensure(dir=1)\\n    lock = FileLock(str(lock_file))\\n    try:\\n        try:\\n            lock.acquire(0.0001)\\n        except Timeout:\\n            reporter(\"lock file {} present, will block until released\".format(lock_file))\\n            lock.acquire()\\n        yield\\n    finally:\\n        lock.release(force=True)\\n\\n\\ndef get_unique_file(path, prefix, suffix):\\n    \"\"\"get a unique file in a folder having a given prefix and suffix,\\n    with unique number in between\"\"\"\\n    lock_file = path.join(\".lock\")\\n    prefix = \"{}-\".format(prefix)\\n    with hold_lock(lock_file):\\n        max_value = -1\\n        for candidate in path.listdir(\"{}*{}\".format(prefix, suffix)):\\n            try:\\n                max_value = max(max_value, int(candidate.basename[len(prefix) : -len(suffix)]))\\n            except ValueError:\\n                continue\\n        winner = path.join(\"{}{}{}\".format(prefix, max_value + 1, suffix))\\n        winner.ensure(dir=0)\\n        return winner\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/util/main.py'"}, "return_value": "'import inspect\\nimport os\\n\\nimport tox\\n\\nMAIN_FILE = os.path.join(os.path.dirname(inspect.getfile(tox)), \"__main__.py\")\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/util/path.py'"}, "return_value": "'import shutil\\n\\nfrom tox import reporter\\n\\n\\ndef ensure_empty_dir(path):\\n    if path.check():\\n        reporter.info(\"  removing {}\".format(path))\\n        shutil.rmtree(str(path), ignore_errors=True)\\n        path.ensure(dir=1)\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/util/spinner.py'"}, "return_value": "'# -*- coding: utf-8 -*-\\n\"\"\"A minimal non-colored version of https://pypi.org/project/halo, to track list progress\"\"\"\\nfrom __future__ import absolute_import, unicode_literals\\n\\nimport os\\nimport sys\\nimport threading\\nfrom collections import OrderedDict, namedtuple\\nfrom datetime import datetime\\n\\nimport py\\n\\nthreads = []\\n\\nif os.name == \"nt\":\\n    import ctypes\\n\\n    class _CursorInfo(ctypes.Structure):\\n        _fields_ = [(\"size\", ctypes.c_int), (\"visible\", ctypes.c_byte)]\\n\\n\\n_BaseMessage = namedtuple(\"_BaseMessage\", [\"unicode_msg\", \"ascii_msg\"])\\n\\n\\nclass SpinnerMessage(_BaseMessage):\\n    def for_file(self, file):\\n        try:\\n            self.unicode_msg.encode(file.encoding)\\n        except (AttributeError, TypeError, UnicodeEncodeError):\\n            return self.ascii_msg\\n        else:\\n            return self.unicode_msg\\n\\n\\nclass Spinner(object):\\n    CLEAR_LINE = \"\\\\033[K\"\\n    max_width = 120\\n    FRAMES = SpinnerMessage(\"\u280b\u2819\u2839\u2838\u283c\u2834\u2826\u2827\u2807\u280f\", \"|-+x*\")\\n    OK_FLAG = SpinnerMessage(\"\u2714 OK\", \"[ OK ]\")\\n    FAIL_FLAG = SpinnerMessage(\"\u2716 FAIL\", \"[FAIL]\")\\n    SKIP_FLAG = SpinnerMessage(\"\u26a0 SKIP\", \"[SKIP]\")\\n\\n    def __init__(self, enabled=True, refresh_rate=0.1):\\n        self.refresh_rate = refresh_rate\\n        self.enabled = enabled\\n        self._file = sys.stdout\\n        self.frames = self.FRAMES.for_file(self._file)\\n        self.stream = py.io.TerminalWriter(file=self._file)\\n        self._envs = OrderedDict()\\n        self._frame_index = 0\\n\\n    def clear(self):\\n        if self.enabled:\\n            self.stream.write(\"\\\\r\")\\n            self.stream.write(self.CLEAR_LINE)\\n\\n    def render(self):\\n        while True:\\n            self._stop_spinner.wait(self.refresh_rate)\\n            if self._stop_spinner.is_set():\\n                break\\n            self.render_frame()\\n        return self\\n\\n    def render_frame(self):\\n        if self.enabled:\\n            self.clear()\\n            self.stream.write(\"\\\\r{}\".format(self.frame()))\\n\\n    def frame(self):\\n        frame = self.frames[self._frame_index]\\n        self._frame_index += 1\\n        self._frame_index = self._frame_index % len(self.frames)\\n        text_frame = \"[{}] {}\".format(len(self._envs), \" | \".join(self._envs))\\n        if len(text_frame) > self.max_width - 1:\\n            text_frame = \"{}...\".format(text_frame[: self.max_width - 1 - 3])\\n        return \"{} {}\".format(*[(frame, text_frame)][0])\\n\\n    def __enter__(self):\\n        if self.enabled:\\n            self.disable_cursor()\\n        self.render_frame()\\n        self._stop_spinner = threading.Event()\\n        self._spinner_thread = threading.Thread(target=self.render)\\n        self._spinner_thread.daemon = True\\n        self._spinner_thread.start()\\n        return self\\n\\n    def __exit__(self, exc_type, exc_val, exc_tb):\\n        if not self._stop_spinner.is_set():\\n            if self._spinner_thread:\\n                self._stop_spinner.set()\\n                self._spinner_thread.join()\\n\\n            self._frame_index = 0\\n            if self.enabled:\\n                self.clear()\\n                self.enable_cursor()\\n\\n        return self\\n\\n    def add(self, name):\\n        self._envs[name] = datetime.now()\\n\\n    def succeed(self, key):\\n        self.finalize(key, self.OK_FLAG.for_file(self._file), green=True)\\n\\n    def fail(self, key):\\n        self.finalize(key, self.FAIL_FLAG.for_file(self._file), red=True)\\n\\n    def skip(self, key):\\n        self.finalize(key, self.SKIP_FLAG.for_file(self._file), white=True)\\n\\n    def finalize(self, key, status, **kwargs):\\n        start_at = self._envs[key]\\n        del self._envs[key]\\n        if self.enabled:\\n            self.clear()\\n        self.stream.write(\\n            \"{} {} in {}{}\".format(\\n                status,\\n                key,\\n                td_human_readable(datetime.now() - start_at),\\n                os.linesep,\\n            ),\\n            **kwargs\\n        )\\n        if not self._envs:\\n            self.__exit__(None, None, None)\\n\\n    def disable_cursor(self):\\n        if self._file.isatty():\\n            if os.name == \"nt\":\\n                ci = _CursorInfo()\\n                handle = ctypes.windll.kernel32.GetStdHandle(-11)\\n                ctypes.windll.kernel32.GetConsoleCursorInfo(handle, ctypes.byref(ci))\\n                ci.visible = False\\n                ctypes.windll.kernel32.SetConsoleCursorInfo(handle, ctypes.byref(ci))\\n            elif os.name == \"posix\":\\n                self.stream.write(\"\\\\033[?25l\")\\n\\n    def enable_cursor(self):\\n        if self._file.isatty():\\n            if os.name == \"nt\":\\n                ci = _CursorInfo()\\n                handle = ctypes.windll.kernel32.GetStdHandle(-11)\\n                ctypes.windll.kernel32.GetConsoleCursorInfo(handle, ctypes.byref(ci))\\n                ci.visible = True\\n                ctypes.windll.kernel32.SetConsoleCursorInfo(handle, ctypes.byref(ci))\\n            elif os.name == \"posix\":\\n                self.stream.write(\"\\\\033[?25h\")\\n\\n\\ndef td_human_readable(delta):\\n    seconds = int(delta.total_seconds())\\n    periods = [\\n        (\"year\", 60 * 60 * 24 * 365),\\n        (\"month\", 60 * 60 * 24 * 30),\\n        (\"day\", 60 * 60 * 24),\\n        (\"hour\", 60 * 60),\\n        (\"minute\", 60),\\n        (\"second\", 1),\\n    ]\\n\\n    texts = []\\n    for period_name, period_seconds in periods:\\n        if seconds > period_seconds or period_seconds == 1:\\n            period_value, seconds = divmod(seconds, period_seconds)\\n            if period_name == \"second\":\\n                ms = delta.total_seconds() - int(delta.total_seconds())\\n                period_value = round(period_value + ms, 3)\\n            has_s = \"s\" if period_value != 1 else \"\"\\n            texts.append(\"{} {}{}\".format(period_value, period_name, has_s))\\n    return \", \".join(texts)\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/util/stdlib.py'"}, "return_value": "'import sys\\nimport threading\\nfrom contextlib import contextmanager\\nfrom tempfile import TemporaryFile\\n\\nif sys.version_info >= (3, 8):\\n    from importlib import metadata as importlib_metadata  # noqa\\nelse:\\n    import importlib_metadata  # noqa\\n\\n\\ndef is_main_thread():\\n    \"\"\"returns true if we are within the main thread\"\"\"\\n    cur_thread = threading.current_thread()\\n    if sys.version_info >= (3, 4):\\n        return cur_thread is threading.main_thread()\\n    else:\\n        # noinspection PyUnresolvedReferences\\n        return isinstance(cur_thread, threading._MainThread)\\n\\n\\n# noinspection PyPep8Naming\\n@contextmanager\\ndef suppress_output():\\n    \"\"\"suppress both stdout and stderr outputs\"\"\"\\n    if sys.version_info >= (3, 5):\\n        from contextlib import redirect_stderr, redirect_stdout\\n    else:\\n\\n        class _RedirectStream(object):\\n\\n            _stream = None\\n\\n            def __init__(self, new_target):\\n                self._new_target = new_target\\n                self._old_targets = []\\n\\n            def __enter__(self):\\n                self._old_targets.append(getattr(sys, self._stream))\\n                setattr(sys, self._stream, self._new_target)\\n                return self._new_target\\n\\n            def __exit__(self, exctype, excinst, exctb):\\n                setattr(sys, self._stream, self._old_targets.pop())\\n\\n        class redirect_stdout(_RedirectStream):\\n            _stream = \"stdout\"\\n\\n        class redirect_stderr(_RedirectStream):\\n            _stream = \"stderr\"\\n\\n    with TemporaryFile(\"wt\") as file:\\n        with redirect_stdout(file):\\n            with redirect_stderr(file):\\n                yield\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/venv.py'"}, "return_value": "'import codecs\\nimport json\\nimport os\\nimport pipes\\nimport re\\nimport sys\\nfrom itertools import chain\\n\\nimport py\\n\\nimport tox\\nfrom tox import reporter\\nfrom tox.action import Action\\nfrom tox.config.parallel import ENV_VAR_KEY_PRIVATE as PARALLEL_ENV_VAR_KEY_PRIVATE\\nfrom tox.constants import INFO, PARALLEL_RESULT_JSON_PREFIX, PARALLEL_RESULT_JSON_SUFFIX\\nfrom tox.package.local import resolve_package\\nfrom tox.util.lock import get_unique_file\\nfrom tox.util.path import ensure_empty_dir\\n\\nfrom .config import DepConfig\\n\\n#: maximum parsed shebang interpreter length (see: prepend_shebang_interpreter)\\nMAXINTERP = 2048\\n\\n\\nclass CreationConfig:\\n    def __init__(\\n        self,\\n        base_resolved_python_sha256,\\n        base_resolved_python_path,\\n        tox_version,\\n        sitepackages,\\n        usedevelop,\\n        deps,\\n        alwayscopy,\\n    ):\\n        self.base_resolved_python_sha256 = base_resolved_python_sha256\\n        self.base_resolved_python_path = base_resolved_python_path\\n        self.tox_version = tox_version\\n        self.sitepackages = sitepackages\\n        self.usedevelop = usedevelop\\n        self.alwayscopy = alwayscopy\\n        self.deps = deps\\n\\n    def writeconfig(self, path):\\n        lines = [\\n            \"{} {}\".format(self.base_resolved_python_sha256, self.base_resolved_python_path),\\n            \"{} {:d} {:d} {:d}\".format(\\n                self.tox_version,\\n                self.sitepackages,\\n                self.usedevelop,\\n                self.alwayscopy,\\n            ),\\n        ]\\n        for dep in self.deps:\\n            lines.append(\"{} {}\".format(*dep))\\n        content = \"\\\\n\".join(lines)\\n        path.ensure()\\n        path.write(content)\\n        return content\\n\\n    @classmethod\\n    def readconfig(cls, path):\\n        try:\\n            lines = path.readlines(cr=0)\\n            base_resolved_python_info = lines.pop(0).split(None, 1)\\n            tox_version, sitepackages, usedevelop, alwayscopy = lines.pop(0).split(None, 4)\\n            sitepackages = bool(int(sitepackages))\\n            usedevelop = bool(int(usedevelop))\\n            alwayscopy = bool(int(alwayscopy))\\n            deps = []\\n            for line in lines:\\n                base_resolved_python_sha256, depstring = line.split(None, 1)\\n                deps.append((base_resolved_python_sha256, depstring))\\n            base_resolved_python_sha256, base_resolved_python_path = base_resolved_python_info\\n            return CreationConfig(\\n                base_resolved_python_sha256,\\n                base_resolved_python_path,\\n                tox_version,\\n                sitepackages,\\n                usedevelop,\\n                deps,\\n                alwayscopy,\\n            )\\n        except Exception:\\n            return None\\n\\n    def matches_with_reason(self, other, deps_matches_subset=False):\\n        for attr in (\\n            \"base_resolved_python_sha256\",\\n            \"base_resolved_python_path\",\\n            \"tox_version\",\\n            \"sitepackages\",\\n            \"usedevelop\",\\n            \"alwayscopy\",\\n        ):\\n            left = getattr(self, attr)\\n            right = getattr(other, attr)\\n            if left != right:\\n                return False, \"attr {} {!r}!={!r}\".format(attr, left, right)\\n        self_deps = set(self.deps)\\n        other_deps = set(other.deps)\\n        if self_deps != other_deps:\\n            if deps_matches_subset:\\n                diff = other_deps - self_deps\\n                if diff:\\n                    return False, \"missing in previous {!r}\".format(diff)\\n            else:\\n                return False, \"{!r}!={!r}\".format(self_deps, other_deps)\\n        return True, None\\n\\n    def matches(self, other, deps_matches_subset=False):\\n        outcome, _ = self.matches_with_reason(other, deps_matches_subset)\\n        return outcome\\n\\n\\nclass VirtualEnv(object):\\n    def __init__(self, envconfig=None, popen=None, env_log=None):\\n        self.envconfig = envconfig\\n        self.popen = popen\\n        self._actions = []\\n        self.env_log = env_log\\n        self._result_json_path = None\\n\\n    def new_action(self, msg, *args):\\n        config = self.envconfig.config\\n        command_log = self.env_log.get_commandlog(\\n            \"test\" if msg in (\"run-test\", \"run-test-pre\", \"run-test-post\") else \"setup\",\\n        )\\n        return Action(\\n            self.name,\\n            msg,\\n            args,\\n            self.envconfig.envlogdir,\\n            config.option.resultjson,\\n            command_log,\\n            self.popen,\\n            self.envconfig.envpython,\\n            self.envconfig.suicide_timeout,\\n            self.envconfig.interrupt_timeout,\\n            self.envconfig.terminate_timeout,\\n        )\\n\\n    def get_result_json_path(self):\\n        if self._result_json_path is None:\\n            if self.envconfig.config.option.resultjson:\\n                self._result_json_path = get_unique_file(\\n                    self.path,\\n                    PARALLEL_RESULT_JSON_PREFIX,\\n                    PARALLEL_RESULT_JSON_SUFFIX,\\n                )\\n        return self._result_json_path\\n\\n    @property\\n    def hook(self):\\n        return self.envconfig.config.pluginmanager.hook\\n\\n    @property\\n    def path(self):\\n        \"\"\"Path to environment base dir.\"\"\"\\n        return self.envconfig.envdir\\n\\n    @property\\n    def path_config(self):\\n        return self.path.join(\".tox-config1\")\\n\\n    @property\\n    def name(self):\\n        \"\"\"test environment name.\"\"\"\\n        return self.envconfig.envname\\n\\n    def __repr__(self):\\n        return \"<VirtualEnv at {!r}>\".format(self.path)\\n\\n    def getcommandpath(self, name, venv=True, cwd=None):\\n        \"\"\"Return absolute path (str or localpath) for specified command name.\\n\\n        - If it\\'s a local path we will rewrite it as as a relative path.\\n        - If venv is True we will check if the command is coming from the venv\\n          or is allowed to come from external.\\n        \"\"\"\\n        name = str(name)\\n        if os.path.isabs(name):\\n            return name\\n        if os.path.split(name)[0] == \".\":\\n            path = cwd.join(name)\\n            if path.check():\\n                return str(path)\\n\\n        if venv:\\n            path = self._venv_lookup_and_check_external_allowlist(name)\\n        else:\\n            path = self._normal_lookup(name)\\n\\n        if path is None:\\n            raise tox.exception.InvocationError(\\n                \"could not find executable {}\".format(pipes.quote(name)),\\n            )\\n\\n        return str(path)  # will not be rewritten for reporting\\n\\n    def _venv_lookup_and_check_external_allowlist(self, name):\\n        path = self._venv_lookup(name)\\n        if path is None:\\n            path = self._normal_lookup(name)\\n            if path is not None:\\n                self._check_external_allowed_and_warn(path)\\n        return path\\n\\n    def _venv_lookup(self, name):\\n        return py.path.local.sysfind(name, paths=[self.envconfig.envbindir])\\n\\n    def _normal_lookup(self, name):\\n        return py.path.local.sysfind(name)\\n\\n    def _check_external_allowed_and_warn(self, path):\\n        if not self.is_allowed_external(path):\\n            reporter.warning(\\n                \"test command found but not installed in testenv\\\\n\"\\n                \"  cmd: {}\\\\n\"\\n                \"  env: {}\\\\n\"\\n                \"Maybe you forgot to specify a dependency? \"\\n                \"See also the allowlist_externals envconfig setting.\\\\n\\\\n\"\\n                \"DEPRECATION WARNING: this will be an error in tox 4 and above!\".format(\\n                    path,\\n                    self.envconfig.envdir,\\n                ),\\n            )\\n\\n    def is_allowed_external(self, p):\\n        tryadd = [\"\"]\\n        if tox.INFO.IS_WIN:\\n            tryadd += [os.path.normcase(x) for x in os.environ[\"PATHEXT\"].split(os.pathsep)]\\n            p = py.path.local(os.path.normcase(str(p)))\\n\\n        if self.envconfig.allowlist_externals and self.envconfig.whitelist_externals:\\n            raise tox.exception.ConfigError(\\n                \"Either whitelist_externals or allowlist_externals might be specified, not both\",\\n            )\\n\\n        allowed_externals = (\\n            self.envconfig.whitelist_externals or self.envconfig.allowlist_externals\\n        )\\n        for x in allowed_externals:\\n            for add in tryadd:\\n                if p.fnmatch(x + add):\\n                    return True\\n        return False\\n\\n    def update(self, action):\\n        \"\"\"return status string for updating actual venv to match configuration.\\n        if status string is empty, all is ok.\\n        \"\"\"\\n        rconfig = CreationConfig.readconfig(self.path_config)\\n        if self.envconfig.recreate:\\n            reason = \"-r flag\"\\n        else:\\n            if rconfig is None:\\n                reason = \"no previous config {}\".format(self.path_config)\\n            else:\\n                live_config = self._getliveconfig()\\n                deps_subset_match = getattr(self.envconfig, \"deps_matches_subset\", False)\\n                outcome, reason = rconfig.matches_with_reason(live_config, deps_subset_match)\\n        if reason is None:\\n            action.info(\"reusing\", self.envconfig.envdir)\\n            return\\n        action.info(\"cannot reuse\", reason)\\n        if rconfig is None:\\n            action.setactivity(\"create\", self.envconfig.envdir)\\n        else:\\n            action.setactivity(\"recreate\", self.envconfig.envdir)\\n        try:\\n            self.hook.tox_testenv_create(action=action, venv=self)\\n            self.just_created = True\\n        except tox.exception.UnsupportedInterpreter as exception:\\n            return exception\\n        try:\\n            self.hook.tox_testenv_install_deps(action=action, venv=self)\\n        except tox.exception.InvocationError as exception:\\n            return \"could not install deps {}; v = {!r}\".format(self.envconfig.deps, exception)\\n\\n    def _getliveconfig(self):\\n        base_resolved_python_path = self.envconfig.python_info.executable\\n        version = tox.__version__\\n        sitepackages = self.envconfig.sitepackages\\n        develop = self.envconfig.usedevelop\\n        alwayscopy = self.envconfig.alwayscopy\\n        deps = []\\n        for dep in self.get_resolved_dependencies():\\n            dep_name_sha256 = getdigest(dep.name)\\n            deps.append((dep_name_sha256, dep.name))\\n        base_resolved_python_sha256 = getdigest(base_resolved_python_path)\\n        return CreationConfig(\\n            base_resolved_python_sha256,\\n            base_resolved_python_path,\\n            version,\\n            sitepackages,\\n            develop,\\n            deps,\\n            alwayscopy,\\n        )\\n\\n    def get_resolved_dependencies(self):\\n        dependencies = []\\n        for dependency in self.envconfig.deps:\\n            if dependency.indexserver is None:\\n                package = resolve_package(package_spec=dependency.name)\\n                if package != dependency.name:\\n                    dependency = dependency.__class__(package)\\n            dependencies.append(dependency)\\n        return dependencies\\n\\n    def getsupportedinterpreter(self):\\n        return self.envconfig.getsupportedinterpreter()\\n\\n    def matching_platform(self):\\n        return re.match(self.envconfig.platform, sys.platform)\\n\\n    def finish(self):\\n        previous_config = CreationConfig.readconfig(self.path_config)\\n        live_config = self._getliveconfig()\\n        if previous_config is None or not previous_config.matches(live_config):\\n            content = live_config.writeconfig(self.path_config)\\n            reporter.verbosity1(\"write config to {} as {!r}\".format(self.path_config, content))\\n\\n    def _needs_reinstall(self, setupdir, action):\\n        setup_py = setupdir.join(\"setup.py\")\\n\\n        if not setup_py.exists():\\n            return False\\n\\n        setup_cfg = setupdir.join(\"setup.cfg\")\\n        args = [self.envconfig.envpython, str(setup_py), \"--name\"]\\n        env = self._get_os_environ()\\n        output = action.popen(\\n            args,\\n            cwd=setupdir,\\n            redirect=False,\\n            returnout=True,\\n            env=env,\\n            capture_err=False,\\n        )\\n        name = next(\\n            (i for i in output.split(\"\\\\n\") if i and not i.startswith(\"pydev debugger:\")),\\n            \"\",\\n        )\\n        args = [\\n            self.envconfig.envpython,\\n            \"-c\",\\n            \"import sys;  import json; print(json.dumps(sys.path))\",\\n        ]\\n        out = action.popen(args, redirect=False, returnout=True, env=env)\\n        try:\\n            sys_path = json.loads(out)\\n        except ValueError:\\n            sys_path = []\\n        egg_info_fname = \".\".join((name.replace(\"-\", \"_\"), \"egg-info\"))\\n        for d in reversed(sys_path):\\n            egg_info = py.path.local(d).join(egg_info_fname)\\n            if egg_info.check():\\n                break\\n        else:\\n            return True\\n        needs_reinstall = any(\\n            conf_file.check() and conf_file.mtime() > egg_info.mtime()\\n            for conf_file in (setup_py, setup_cfg)\\n        )\\n\\n        # Ensure the modification time of the egg-info folder is updated so we\\n        # won\\'t need to do this again.\\n        # TODO(stephenfin): Remove once the minimum version of setuptools is\\n        # high enough to include https://github.com/pypa/setuptools/pull/1427/\\n        if needs_reinstall:\\n            egg_info.setmtime()\\n\\n        return needs_reinstall\\n\\n    def install_pkg(self, dir, action, name, is_develop=False):\\n        assert action is not None\\n\\n        if getattr(self, \"just_created\", False):\\n            action.setactivity(name, dir)\\n            self.finish()\\n            pip_flags = [\"--exists-action\", \"w\"]\\n        else:\\n            if is_develop and not self._needs_reinstall(dir, action):\\n                action.setactivity(\"{}-noop\".format(name), dir)\\n                return\\n            action.setactivity(\"{}-nodeps\".format(name), dir)\\n            pip_flags = [\"--no-deps\"] + ([] if is_develop else [\"-U\"])\\n        pip_flags.extend([\"-v\"] * min(3, reporter.verbosity() - 2))\\n        if self.envconfig.extras:\\n            dir += \"[{}]\".format(\",\".join(self.envconfig.extras))\\n        target = [dir]\\n        if is_develop:\\n            target.insert(0, \"-e\")\\n        self._install(target, extraopts=pip_flags, action=action)\\n\\n    def developpkg(self, setupdir, action):\\n        self.install_pkg(setupdir, action, \"develop-inst\", is_develop=True)\\n\\n    def installpkg(self, sdistpath, action):\\n        self.install_pkg(sdistpath, action, \"inst\")\\n\\n    def _installopts(self, indexserver):\\n        options = []\\n        if indexserver:\\n            options += [\"-i\", indexserver]\\n        if self.envconfig.pip_pre:\\n            options.append(\"--pre\")\\n        return options\\n\\n    def run_install_command(self, packages, action, options=()):\\n        def expand(val):\\n            # expand an install command\\n            if val == \"{packages}\":\\n                for package in packages:\\n                    yield package\\n            elif val == \"{opts}\":\\n                for opt in options:\\n                    yield opt\\n            else:\\n                yield val\\n\\n        cmd = list(chain.from_iterable(expand(val) for val in self.envconfig.install_command))\\n\\n        env = self._get_os_environ()\\n        self.ensure_pip_os_environ_ok(env)\\n\\n        old_stdout = sys.stdout\\n        sys.stdout = codecs.getwriter(\"utf8\")(sys.stdout)\\n        try:\\n            self._pcall(\\n                cmd,\\n                cwd=self.envconfig.config.toxinidir,\\n                action=action,\\n                redirect=reporter.verbosity() < reporter.Verbosity.DEBUG,\\n                env=env,\\n            )\\n        except KeyboardInterrupt:\\n            self.status = \"keyboardinterrupt\"\\n            raise\\n        finally:\\n            sys.stdout = old_stdout\\n\\n    def ensure_pip_os_environ_ok(self, env):\\n        for key in (\"PIP_RESPECT_VIRTUALENV\", \"PIP_REQUIRE_VIRTUALENV\", \"__PYVENV_LAUNCHER__\"):\\n            env.pop(key, None)\\n        if all(\"PYTHONPATH\" not in i for i in (self.envconfig.passenv, self.envconfig.setenv)):\\n            # If PYTHONPATH not explicitly asked for, remove it.\\n            if \"PYTHONPATH\" in env:\\n                if sys.version_info < (3, 4) or bool(env[\"PYTHONPATH\"]):\\n                    # https://docs.python.org/3/whatsnew/3.4.html#changes-in-python-command-behavior\\n                    # In a posix shell, setting the PATH environment variable to an empty value is\\n                    # equivalent to not setting it at all.\\n                    reporter.warning(\\n                        \"Discarding $PYTHONPATH from environment, to override \"\\n                        \"specify PYTHONPATH in \\'passenv\\' in your configuration.\",\\n                    )\\n                env.pop(\"PYTHONPATH\")\\n\\n        # installing packages at user level may mean we\\'re not installing inside the venv\\n        env[\"PIP_USER\"] = \"0\"\\n\\n        # installing without dependencies may lead to broken packages\\n        env[\"PIP_NO_DEPS\"] = \"0\"\\n\\n    def _install(self, deps, extraopts=None, action=None):\\n        if not deps:\\n            return\\n        d = {}\\n        ixservers = []\\n        for dep in deps:\\n            if isinstance(dep, (str, py.path.local)):\\n                dep = DepConfig(str(dep), None)\\n            assert isinstance(dep, DepConfig), dep\\n            if dep.indexserver is None:\\n                ixserver = self.envconfig.config.indexserver[\"default\"]\\n            else:\\n                ixserver = dep.indexserver\\n            d.setdefault(ixserver, []).append(dep.name)\\n            if ixserver not in ixservers:\\n                ixservers.append(ixserver)\\n            assert ixserver.url is None or isinstance(ixserver.url, str)\\n\\n        for ixserver in ixservers:\\n            packages = d[ixserver]\\n            options = self._installopts(ixserver.url)\\n            if extraopts:\\n                options.extend(extraopts)\\n            self.run_install_command(packages=packages, options=options, action=action)\\n\\n    def _get_os_environ(self, is_test_command=False):\\n        if is_test_command:\\n            # for executing tests we construct a clean environment\\n            env = {}\\n            for env_key in self.envconfig.passenv:\\n                if env_key in os.environ:\\n                    env[env_key] = os.environ[env_key]\\n        else:\\n            # for executing non-test commands we use the full\\n            # invocation environment\\n            env = os.environ.copy()\\n\\n        # in any case we honor per-testenv setenv configuration\\n        env.update(self.envconfig.setenv.export())\\n\\n        env[\"VIRTUAL_ENV\"] = str(self.path)\\n        return env\\n\\n    def test(\\n        self,\\n        redirect=False,\\n        name=\"run-test\",\\n        commands=None,\\n        ignore_outcome=None,\\n        ignore_errors=None,\\n        display_hash_seed=False,\\n    ):\\n        if commands is None:\\n            commands = self.envconfig.commands\\n        if ignore_outcome is None:\\n            ignore_outcome = self.envconfig.ignore_outcome\\n        if ignore_errors is None:\\n            ignore_errors = self.envconfig.ignore_errors\\n        with self.new_action(name) as action:\\n            cwd = self.envconfig.changedir\\n            if display_hash_seed:\\n                env = self._get_os_environ(is_test_command=True)\\n                # Display PYTHONHASHSEED to assist with reproducibility.\\n                action.setactivity(name, \"PYTHONHASHSEED={!r}\".format(env.get(\"PYTHONHASHSEED\")))\\n            for i, argv in enumerate(filter(bool, commands)):\\n                # have to make strings as _pcall changes argv[0] to a local()\\n                # happens if the same environment is invoked twice\\n                message = \"commands[{}] | {}\".format(\\n                    i,\\n                    \" \".join(pipes.quote(str(x)) for x in argv),\\n                )\\n                action.setactivity(name, message)\\n                # check to see if we need to ignore the return code\\n                # if so, we need to alter the command line arguments\\n                if argv[0].startswith(\"-\"):\\n                    ignore_ret = True\\n                    if argv[0] == \"-\":\\n                        del argv[0]\\n                    else:\\n                        argv[0] = argv[0].lstrip(\"-\")\\n                else:\\n                    ignore_ret = False\\n\\n                try:\\n                    self._pcall(\\n                        argv,\\n                        cwd=cwd,\\n                        action=action,\\n                        redirect=redirect,\\n                        ignore_ret=ignore_ret,\\n                        is_test_command=True,\\n                    )\\n                except tox.exception.InvocationError as err:\\n                    if ignore_outcome:\\n                        msg = \"command failed but result from testenv is ignored\\\\ncmd:\"\\n                        reporter.warning(\"{} {}\".format(msg, err))\\n                        self.status = \"ignored failed command\"\\n                        continue  # keep processing commands\\n\\n                    reporter.error(str(err))\\n                    self.status = \"commands failed\"\\n                    if not ignore_errors:\\n                        break  # Don\\'t process remaining commands\\n                except KeyboardInterrupt:\\n                    self.status = \"keyboardinterrupt\"\\n                    raise\\n\\n    def _pcall(\\n        self,\\n        args,\\n        cwd,\\n        venv=True,\\n        is_test_command=False,\\n        action=None,\\n        redirect=True,\\n        ignore_ret=False,\\n        returnout=False,\\n        env=None,\\n    ):\\n        if env is None:\\n            env = self._get_os_environ(is_test_command=is_test_command)\\n\\n        # construct environment variables\\n        env.pop(\"VIRTUALENV_PYTHON\", None)\\n        bin_dir = str(self.envconfig.envbindir)\\n        path = self.envconfig.setenv.get(\"PATH\") or os.environ[\"PATH\"]\\n        env[\"PATH\"] = os.pathsep.join([bin_dir, path])\\n        reporter.verbosity2(\"setting PATH={}\".format(env[\"PATH\"]))\\n\\n        # get command\\n        args[0] = self.getcommandpath(args[0], venv, cwd)\\n        if sys.platform != \"win32\" and \"TOX_LIMITED_SHEBANG\" in os.environ:\\n            args = prepend_shebang_interpreter(args)\\n\\n        cwd.ensure(dir=1)  # ensure the cwd exists\\n        return action.popen(\\n            args,\\n            cwd=cwd,\\n            env=env,\\n            redirect=redirect,\\n            ignore_ret=ignore_ret,\\n            returnout=returnout,\\n            report_fail=not is_test_command,\\n        )\\n\\n    def setupenv(self):\\n        if self.envconfig._missing_subs:\\n            self.status = (\\n                \"unresolvable substitution(s):\\\\n    {}\\\\n\"\\n                \"Environment variables are missing or defined recursively.\".format(\\n                    \"\\\\n    \".join(\\n                        \"{}: \\'{}\\'\".format(section_key, exc.name)\\n                        for section_key, exc in sorted(self.envconfig._missing_subs.items())\\n                    ),\\n                )\\n            )\\n            return\\n        if not self.matching_platform():\\n            self.status = \"platform mismatch\"\\n            return  # we simply omit non-matching platforms\\n        with self.new_action(\"getenv\", self.envconfig.envdir) as action:\\n            self.status = 0\\n            default_ret_code = 1\\n            envlog = self.env_log\\n            try:\\n                status = self.update(action=action)\\n            except IOError as e:\\n                if e.args[0] != 2:\\n                    raise\\n                status = (\\n                    \"Error creating virtualenv. Note that spaces in paths are \"\\n                    \"not supported by virtualenv. Error details: {!r}\".format(e)\\n                )\\n            except tox.exception.InvocationError as e:\\n                status = e\\n            except tox.exception.InterpreterNotFound as e:\\n                status = e\\n                if self.envconfig.config.option.skip_missing_interpreters == \"true\":\\n                    default_ret_code = 0\\n            except KeyboardInterrupt:\\n                self.status = \"keyboardinterrupt\"\\n                raise\\n            if status:\\n                str_status = str(status)\\n                command_log = envlog.get_commandlog(\"setup\")\\n                command_log.add_command([\"setup virtualenv\"], str_status, default_ret_code)\\n                self.status = status\\n                if default_ret_code == 0:\\n                    reporter.skip(str_status)\\n                else:\\n                    reporter.error(str_status)\\n                return False\\n            command_path = self.getcommandpath(\"python\")\\n            envlog.set_python_info(command_path)\\n            return True\\n\\n    def finishvenv(self):\\n        with self.new_action(\"finishvenv\"):\\n            self.finish()\\n            return True\\n\\n\\ndef getdigest(path):\\n    path = py.path.local(path)\\n    if not path.check(file=1):\\n        return \"0\" * 32\\n    return path.computehash(\"sha256\")\\n\\n\\ndef prepend_shebang_interpreter(args):\\n    # prepend interpreter directive (if any) to argument list\\n    #\\n    # When preparing virtual environments in a file container which has large\\n    # length, the system might not be able to invoke shebang scripts which\\n    # define interpreters beyond system limits (e.g. Linux has a limit of 128;\\n    # BINPRM_BUF_SIZE). This method can be used to check if the executable is\\n    # a script containing a shebang line. If so, extract the interpreter (and\\n    # possible optional argument) and prepend the values to the provided\\n    # argument list. tox will only attempt to read an interpreter directive of\\n    # a maximum size of 2048 bytes to limit excessive reading and support UNIX\\n    # systems which may support a longer interpret length.\\n    try:\\n        with open(args[0], \"rb\") as f:\\n            if f.read(1) == b\"#\" and f.read(1) == b\"!\":\\n                interp = f.readline(MAXINTERP + 1).rstrip().decode(\"UTF-8\")\\n                if len(interp) > MAXINTERP:  # avoid a truncated interpreter\\n                    return args\\n                interp_args = interp.split(None, 1)[:2]\\n                return interp_args + args\\n    except (UnicodeDecodeError, IOError):\\n        pass\\n    return args\\n\\n\\n_SKIP_VENV_CREATION = os.environ.get(\"_TOX_SKIP_ENV_CREATION_TEST\", False) == \"1\"\\n\\n\\n@tox.hookimpl\\ndef tox_testenv_create(venv, action):\\n    config_interpreter = venv.getsupportedinterpreter()\\n    args = [sys.executable, \"-m\", \"virtualenv\"]\\n    if venv.envconfig.sitepackages:\\n        args.append(\"--system-site-packages\")\\n    if venv.envconfig.alwayscopy:\\n        args.append(\"--always-copy\")\\n    if not venv.envconfig.download:\\n        args.append(\"--no-download\")\\n    else:\\n        args.append(\"--download\")\\n    # add interpreter explicitly, to prevent using default (virtualenv.ini)\\n    args.extend([\"--python\", str(config_interpreter)])\\n\\n    cleanup_for_venv(venv)\\n\\n    base_path = venv.path.dirpath()\\n    base_path.ensure(dir=1)\\n    args.append(venv.path.basename)\\n    if not _SKIP_VENV_CREATION:\\n        try:\\n            venv._pcall(\\n                args,\\n                venv=False,\\n                action=action,\\n                cwd=base_path,\\n                redirect=reporter.verbosity() < reporter.Verbosity.DEBUG,\\n            )\\n        except KeyboardInterrupt:\\n            venv.status = \"keyboardinterrupt\"\\n            raise\\n    return True  # Return non-None to indicate plugin has completed\\n\\n\\ndef cleanup_for_venv(venv):\\n    within_parallel = PARALLEL_ENV_VAR_KEY_PRIVATE in os.environ\\n    # if the directory exists and it doesn\\'t look like a virtualenv, produce\\n    # an error\\n    if venv.path.exists():\\n        dir_items = set(os.listdir(str(venv.path))) - {\".lock\", \"log\"}\\n        dir_items = {p for p in dir_items if not p.startswith(\".tox-\") or p == \".tox-config1\"}\\n    else:\\n        dir_items = set()\\n\\n    if not (\\n        # doesn\\'t exist => OK\\n        not venv.path.exists()\\n        # does exist, but it\\'s empty => OK\\n        or not dir_items\\n        # tox has marked this as an environment it has created in the past\\n        or \".tox-config1\" in dir_items\\n        # it exists and we\\'re on windows with Lib and Scripts => OK\\n        or (INFO.IS_WIN and dir_items > {\"Scripts\", \"Lib\"})\\n        # non-windows, with lib and bin => OK\\n        or dir_items > {\"bin\", \"lib\"}\\n        # pypy has a different lib folder => OK\\n        or dir_items > {\"bin\", \"lib_pypy\"}\\n    ):\\n        venv.status = \"error\"\\n        reporter.error(\\n            \"cowardly refusing to delete `envdir` (it does not look like a virtualenv): \"\\n            \"{}\".format(venv.path),\\n        )\\n        raise SystemExit(2)\\n\\n    if within_parallel:\\n        if venv.path.exists():\\n            # do not delete the log folder as that\\'s used by parent\\n            for content in venv.path.listdir():\\n                if not content.basename == \"log\":\\n                    content.remove(rec=1, ignore_errors=True)\\n    else:\\n        ensure_empty_dir(venv.path)\\n\\n\\n@tox.hookimpl\\ndef tox_testenv_install_deps(venv, action):\\n    deps = venv.get_resolved_dependencies()\\n    if deps:\\n        depinfo = \", \".join(map(str, deps))\\n        action.setactivity(\"installdeps\", depinfo)\\n        venv._install(deps, action=action)\\n    return True  # Return non-None to indicate plugin has completed\\n\\n\\n@tox.hookimpl\\ndef tox_runtest(venv, redirect):\\n    venv.test(redirect=redirect)\\n    return True  # Return non-None to indicate plugin has completed\\n\\n\\n@tox.hookimpl\\ndef tox_runtest_pre(venv):\\n    venv.status = 0\\n    ensure_empty_dir(venv.envconfig.envtmpdir)\\n    venv.envconfig.envtmpdir.ensure(dir=1)\\n    venv.test(\\n        name=\"run-test-pre\",\\n        commands=venv.envconfig.commands_pre,\\n        redirect=False,\\n        ignore_outcome=False,\\n        ignore_errors=False,\\n        display_hash_seed=True,\\n    )\\n\\n\\n@tox.hookimpl\\ndef tox_runtest_post(venv):\\n    venv.test(\\n        name=\"run-test-post\",\\n        commands=venv.envconfig.commands_post,\\n        redirect=False,\\n        ignore_outcome=False,\\n        ignore_errors=False,\\n    )\\n\\n\\n@tox.hookimpl\\ndef tox_runenvreport(venv, action):\\n    # write out version dependency information\\n    args = venv.envconfig.list_dependencies_command\\n    output = venv._pcall(args, cwd=venv.envconfig.config.toxinidir, action=action, returnout=True)\\n    # the output contains a mime-header, skip it\\n    output = output.split(\"\\\\n\\\\n\")[-1]\\n    packages = output.strip().split(\"\\\\n\")\\n    return packages  # Return non-None to indicate plugin has completed\\n'"}, {"func_args": {"filename": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/version.py'"}, "return_value": "\"# coding: utf-8\\nfrom __future__ import unicode_literals\\n\\n__version__ = '3.24.6.dev3+g86a0383c.d20220119'\\n\""}]}, "join_regex": {"line": 182, "args": [{"func_args": {"regexes": "['#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)']"}, "return_value": "'(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))'"}, {"func_args": {"regexes": "['while (True|1|False|0):', 'if (True|1|False|0):']"}, "return_value": "'(?:while (True|1|False|0):)|(?:if (True|1|False|0):)'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))', '(?:while (True|1|False|0):)|(?:if (True|1|False|0):)')"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)))|(?:(?:while (True|1|False|0):)|(?:if (True|1|False|0):))'"}, {"func_args": {"regexes": "('(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$)',)"}, "return_value": "'(?:(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$))'"}, {"func_args": {"regexes": "['#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)']"}, "return_value": "'(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))'"}, {"func_args": {"regexes": "['while (True|1|False|0):', 'if (True|1|False|0):']"}, "return_value": "'(?:while (True|1|False|0):)|(?:if (True|1|False|0):)'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))', '(?:while (True|1|False|0):)|(?:if (True|1|False|0):)')"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)))|(?:(?:while (True|1|False|0):)|(?:if (True|1|False|0):))'"}, {"func_args": {"regexes": "('(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$)',)"}, "return_value": "'(?:(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$))'"}, {"func_args": {"regexes": "['#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)']"}, "return_value": "'(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))'"}, {"func_args": {"regexes": "['while (True|1|False|0):', 'if (True|1|False|0):']"}, "return_value": "'(?:while (True|1|False|0):)|(?:if (True|1|False|0):)'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))', '(?:while (True|1|False|0):)|(?:if (True|1|False|0):)')"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)))|(?:(?:while (True|1|False|0):)|(?:if (True|1|False|0):))'"}, {"func_args": {"regexes": "('(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$)',)"}, "return_value": "'(?:(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$))'"}, {"func_args": {"regexes": "['#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)']"}, "return_value": "'(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))'"}, {"func_args": {"regexes": "['while (True|1|False|0):', 'if (True|1|False|0):']"}, "return_value": "'(?:while (True|1|False|0):)|(?:if (True|1|False|0):)'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))', '(?:while (True|1|False|0):)|(?:if (True|1|False|0):)')"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)))|(?:(?:while (True|1|False|0):)|(?:if (True|1|False|0):))'"}, {"func_args": {"regexes": "('(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$)',)"}, "return_value": "'(?:(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$))'"}, {"func_args": {"regexes": "['#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)']"}, "return_value": "'(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))'"}, {"func_args": {"regexes": "['while (True|1|False|0):', 'if (True|1|False|0):']"}, "return_value": "'(?:while (True|1|False|0):)|(?:if (True|1|False|0):)'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))', '(?:while (True|1|False|0):)|(?:if (True|1|False|0):)')"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)))|(?:(?:while (True|1|False|0):)|(?:if (True|1|False|0):))'"}, {"func_args": {"regexes": "('(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$)',)"}, "return_value": "'(?:(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$))'"}, {"func_args": {"regexes": "['#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)']"}, "return_value": "'(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))'"}, {"func_args": {"regexes": "['while (True|1|False|0):', 'if (True|1|False|0):']"}, "return_value": "'(?:while (True|1|False|0):)|(?:if (True|1|False|0):)'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))', '(?:while (True|1|False|0):)|(?:if (True|1|False|0):)')"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)))|(?:(?:while (True|1|False|0):)|(?:if (True|1|False|0):))'"}, {"func_args": {"regexes": "('(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$)',)"}, "return_value": "'(?:(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$))'"}, {"func_args": {"regexes": "['#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)']"}, "return_value": "'(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))'"}, {"func_args": {"regexes": "['while (True|1|False|0):', 'if (True|1|False|0):']"}, "return_value": "'(?:while (True|1|False|0):)|(?:if (True|1|False|0):)'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))', '(?:while (True|1|False|0):)|(?:if (True|1|False|0):)')"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)))|(?:(?:while (True|1|False|0):)|(?:if (True|1|False|0):))'"}, {"func_args": {"regexes": "('(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$)',)"}, "return_value": "'(?:(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$))'"}, {"func_args": {"regexes": "['#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)']"}, "return_value": "'(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))'"}, {"func_args": {"regexes": "['while (True|1|False|0):', 'if (True|1|False|0):']"}, "return_value": "'(?:while (True|1|False|0):)|(?:if (True|1|False|0):)'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))', '(?:while (True|1|False|0):)|(?:if (True|1|False|0):)')"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)))|(?:(?:while (True|1|False|0):)|(?:if (True|1|False|0):))'"}, {"func_args": {"regexes": "('(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$)',)"}, "return_value": "'(?:(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$))'"}, {"func_args": {"regexes": "['#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)']"}, "return_value": "'(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))'"}, {"func_args": {"regexes": "['while (True|1|False|0):', 'if (True|1|False|0):']"}, "return_value": "'(?:while (True|1|False|0):)|(?:if (True|1|False|0):)'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))', '(?:while (True|1|False|0):)|(?:if (True|1|False|0):)')"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)))|(?:(?:while (True|1|False|0):)|(?:if (True|1|False|0):))'"}, {"func_args": {"regexes": "('(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$)',)"}, "return_value": "'(?:(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$))'"}, {"func_args": {"regexes": "['#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)']"}, "return_value": "'(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))'"}, {"func_args": {"regexes": "['while (True|1|False|0):', 'if (True|1|False|0):']"}, "return_value": "'(?:while (True|1|False|0):)|(?:if (True|1|False|0):)'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))', '(?:while (True|1|False|0):)|(?:if (True|1|False|0):)')"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)))|(?:(?:while (True|1|False|0):)|(?:if (True|1|False|0):))'"}, {"func_args": {"regexes": "('(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$)',)"}, "return_value": "'(?:(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$))'"}, {"func_args": {"regexes": "['#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)']"}, "return_value": "'(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))'"}, {"func_args": {"regexes": "['while (True|1|False|0):', 'if (True|1|False|0):']"}, "return_value": "'(?:while (True|1|False|0):)|(?:if (True|1|False|0):)'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))', '(?:while (True|1|False|0):)|(?:if (True|1|False|0):)')"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)))|(?:(?:while (True|1|False|0):)|(?:if (True|1|False|0):))'"}, {"func_args": {"regexes": "('(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$)',)"}, "return_value": "'(?:(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$))'"}, {"func_args": {"regexes": "['#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)']"}, "return_value": "'(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))'"}, {"func_args": {"regexes": "['while (True|1|False|0):', 'if (True|1|False|0):']"}, "return_value": "'(?:while (True|1|False|0):)|(?:if (True|1|False|0):)'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))', '(?:while (True|1|False|0):)|(?:if (True|1|False|0):)')"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)))|(?:(?:while (True|1|False|0):)|(?:if (True|1|False|0):))'"}, {"func_args": {"regexes": "('(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$)',)"}, "return_value": "'(?:(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$))'"}, {"func_args": {"regexes": "['#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)']"}, "return_value": "'(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))'"}, {"func_args": {"regexes": "['while (True|1|False|0):', 'if (True|1|False|0):']"}, "return_value": "'(?:while (True|1|False|0):)|(?:if (True|1|False|0):)'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))', '(?:while (True|1|False|0):)|(?:if (True|1|False|0):)')"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)))|(?:(?:while (True|1|False|0):)|(?:if (True|1|False|0):))'"}, {"func_args": {"regexes": "('(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$)',)"}, "return_value": "'(?:(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$))'"}, {"func_args": {"regexes": "['#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)']"}, "return_value": "'(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))'"}, {"func_args": {"regexes": "['while (True|1|False|0):', 'if (True|1|False|0):']"}, "return_value": "'(?:while (True|1|False|0):)|(?:if (True|1|False|0):)'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))', '(?:while (True|1|False|0):)|(?:if (True|1|False|0):)')"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)))|(?:(?:while (True|1|False|0):)|(?:if (True|1|False|0):))'"}, {"func_args": {"regexes": "('(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$)',)"}, "return_value": "'(?:(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$))'"}, {"func_args": {"regexes": "['#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)']"}, "return_value": "'(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))'"}, {"func_args": {"regexes": "['while (True|1|False|0):', 'if (True|1|False|0):']"}, "return_value": "'(?:while (True|1|False|0):)|(?:if (True|1|False|0):)'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))', '(?:while (True|1|False|0):)|(?:if (True|1|False|0):)')"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)))|(?:(?:while (True|1|False|0):)|(?:if (True|1|False|0):))'"}, {"func_args": {"regexes": "('(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$)',)"}, "return_value": "'(?:(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$))'"}, {"func_args": {"regexes": "['#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)']"}, "return_value": "'(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))'"}, {"func_args": {"regexes": "['while (True|1|False|0):', 'if (True|1|False|0):']"}, "return_value": "'(?:while (True|1|False|0):)|(?:if (True|1|False|0):)'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))', '(?:while (True|1|False|0):)|(?:if (True|1|False|0):)')"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)))|(?:(?:while (True|1|False|0):)|(?:if (True|1|False|0):))'"}, {"func_args": {"regexes": "('(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$)',)"}, "return_value": "'(?:(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$))'"}, {"func_args": {"regexes": "['#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)']"}, "return_value": "'(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))'"}, {"func_args": {"regexes": "['while (True|1|False|0):', 'if (True|1|False|0):']"}, "return_value": "'(?:while (True|1|False|0):)|(?:if (True|1|False|0):)'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))', '(?:while (True|1|False|0):)|(?:if (True|1|False|0):)')"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)))|(?:(?:while (True|1|False|0):)|(?:if (True|1|False|0):))'"}, {"func_args": {"regexes": "('(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$)',)"}, "return_value": "'(?:(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$))'"}, {"func_args": {"regexes": "['#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)']"}, "return_value": "'(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))'"}, {"func_args": {"regexes": "['while (True|1|False|0):', 'if (True|1|False|0):']"}, "return_value": "'(?:while (True|1|False|0):)|(?:if (True|1|False|0):)'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))', '(?:while (True|1|False|0):)|(?:if (True|1|False|0):)')"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)))|(?:(?:while (True|1|False|0):)|(?:if (True|1|False|0):))'"}, {"func_args": {"regexes": "('(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$)',)"}, "return_value": "'(?:(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$))'"}, {"func_args": {"regexes": "['#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)']"}, "return_value": "'(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))'"}, {"func_args": {"regexes": "['while (True|1|False|0):', 'if (True|1|False|0):']"}, "return_value": "'(?:while (True|1|False|0):)|(?:if (True|1|False|0):)'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))', '(?:while (True|1|False|0):)|(?:if (True|1|False|0):)')"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)))|(?:(?:while (True|1|False|0):)|(?:if (True|1|False|0):))'"}, {"func_args": {"regexes": "('(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$)',)"}, "return_value": "'(?:(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$))'"}, {"func_args": {"regexes": "['#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)']"}, "return_value": "'(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))'"}, {"func_args": {"regexes": "['while (True|1|False|0):', 'if (True|1|False|0):']"}, "return_value": "'(?:while (True|1|False|0):)|(?:if (True|1|False|0):)'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))', '(?:while (True|1|False|0):)|(?:if (True|1|False|0):)')"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)))|(?:(?:while (True|1|False|0):)|(?:if (True|1|False|0):))'"}, {"func_args": {"regexes": "('(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$)',)"}, "return_value": "'(?:(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$))'"}, {"func_args": {"regexes": "['#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)']"}, "return_value": "'(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))'"}, {"func_args": {"regexes": "['while (True|1|False|0):', 'if (True|1|False|0):']"}, "return_value": "'(?:while (True|1|False|0):)|(?:if (True|1|False|0):)'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))', '(?:while (True|1|False|0):)|(?:if (True|1|False|0):)')"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)))|(?:(?:while (True|1|False|0):)|(?:if (True|1|False|0):))'"}, {"func_args": {"regexes": "('(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$)',)"}, "return_value": "'(?:(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$))'"}, {"func_args": {"regexes": "['#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)']"}, "return_value": "'(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))'"}, {"func_args": {"regexes": "['while (True|1|False|0):', 'if (True|1|False|0):']"}, "return_value": "'(?:while (True|1|False|0):)|(?:if (True|1|False|0):)'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))', '(?:while (True|1|False|0):)|(?:if (True|1|False|0):)')"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)))|(?:(?:while (True|1|False|0):)|(?:if (True|1|False|0):))'"}, {"func_args": {"regexes": "('(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$)',)"}, "return_value": "'(?:(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$))'"}, {"func_args": {"regexes": "['#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)']"}, "return_value": "'(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))'"}, {"func_args": {"regexes": "['while (True|1|False|0):', 'if (True|1|False|0):']"}, "return_value": "'(?:while (True|1|False|0):)|(?:if (True|1|False|0):)'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))', '(?:while (True|1|False|0):)|(?:if (True|1|False|0):)')"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)))|(?:(?:while (True|1|False|0):)|(?:if (True|1|False|0):))'"}, {"func_args": {"regexes": "('(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$)',)"}, "return_value": "'(?:(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$))'"}, {"func_args": {"regexes": "['#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)']"}, "return_value": "'(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))'"}, {"func_args": {"regexes": "['while (True|1|False|0):', 'if (True|1|False|0):']"}, "return_value": "'(?:while (True|1|False|0):)|(?:if (True|1|False|0):)'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))', '(?:while (True|1|False|0):)|(?:if (True|1|False|0):)')"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)))|(?:(?:while (True|1|False|0):)|(?:if (True|1|False|0):))'"}, {"func_args": {"regexes": "('(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$)',)"}, "return_value": "'(?:(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$))'"}, {"func_args": {"regexes": "['#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)']"}, "return_value": "'(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))'"}, {"func_args": {"regexes": "['while (True|1|False|0):', 'if (True|1|False|0):']"}, "return_value": "'(?:while (True|1|False|0):)|(?:if (True|1|False|0):)'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))', '(?:while (True|1|False|0):)|(?:if (True|1|False|0):)')"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)))|(?:(?:while (True|1|False|0):)|(?:if (True|1|False|0):))'"}, {"func_args": {"regexes": "('(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$)',)"}, "return_value": "'(?:(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$))'"}, {"func_args": {"regexes": "['#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)']"}, "return_value": "'(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))'"}, {"func_args": {"regexes": "['while (True|1|False|0):', 'if (True|1|False|0):']"}, "return_value": "'(?:while (True|1|False|0):)|(?:if (True|1|False|0):)'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))', '(?:while (True|1|False|0):)|(?:if (True|1|False|0):)')"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)))|(?:(?:while (True|1|False|0):)|(?:if (True|1|False|0):))'"}, {"func_args": {"regexes": "('(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$)',)"}, "return_value": "'(?:(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$))'"}, {"func_args": {"regexes": "['#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)']"}, "return_value": "'(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))'"}, {"func_args": {"regexes": "['while (True|1|False|0):', 'if (True|1|False|0):']"}, "return_value": "'(?:while (True|1|False|0):)|(?:if (True|1|False|0):)'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))', '(?:while (True|1|False|0):)|(?:if (True|1|False|0):)')"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)))|(?:(?:while (True|1|False|0):)|(?:if (True|1|False|0):))'"}, {"func_args": {"regexes": "('(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$)',)"}, "return_value": "'(?:(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$))'"}, {"func_args": {"regexes": "['#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)']"}, "return_value": "'(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))'"}, {"func_args": {"regexes": "['while (True|1|False|0):', 'if (True|1|False|0):']"}, "return_value": "'(?:while (True|1|False|0):)|(?:if (True|1|False|0):)'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))', '(?:while (True|1|False|0):)|(?:if (True|1|False|0):)')"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)))|(?:(?:while (True|1|False|0):)|(?:if (True|1|False|0):))'"}, {"func_args": {"regexes": "('(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$)',)"}, "return_value": "'(?:(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$))'"}, {"func_args": {"regexes": "['#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)']"}, "return_value": "'(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))'"}, {"func_args": {"regexes": "['while (True|1|False|0):', 'if (True|1|False|0):']"}, "return_value": "'(?:while (True|1|False|0):)|(?:if (True|1|False|0):)'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))', '(?:while (True|1|False|0):)|(?:if (True|1|False|0):)')"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)))|(?:(?:while (True|1|False|0):)|(?:if (True|1|False|0):))'"}, {"func_args": {"regexes": "('(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$)',)"}, "return_value": "'(?:(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$))'"}, {"func_args": {"regexes": "['#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)']"}, "return_value": "'(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))'"}, {"func_args": {"regexes": "['while (True|1|False|0):', 'if (True|1|False|0):']"}, "return_value": "'(?:while (True|1|False|0):)|(?:if (True|1|False|0):)'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))', '(?:while (True|1|False|0):)|(?:if (True|1|False|0):)')"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)))|(?:(?:while (True|1|False|0):)|(?:if (True|1|False|0):))'"}, {"func_args": {"regexes": "('(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$)',)"}, "return_value": "'(?:(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$))'"}, {"func_args": {"regexes": "['#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)']"}, "return_value": "'(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))'"}, {"func_args": {"regexes": "['while (True|1|False|0):', 'if (True|1|False|0):']"}, "return_value": "'(?:while (True|1|False|0):)|(?:if (True|1|False|0):)'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))', '(?:while (True|1|False|0):)|(?:if (True|1|False|0):)')"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)))|(?:(?:while (True|1|False|0):)|(?:if (True|1|False|0):))'"}, {"func_args": {"regexes": "('(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$)',)"}, "return_value": "'(?:(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$))'"}, {"func_args": {"regexes": "['#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)']"}, "return_value": "'(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))'"}, {"func_args": {"regexes": "['while (True|1|False|0):', 'if (True|1|False|0):']"}, "return_value": "'(?:while (True|1|False|0):)|(?:if (True|1|False|0):)'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))', '(?:while (True|1|False|0):)|(?:if (True|1|False|0):)')"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)))|(?:(?:while (True|1|False|0):)|(?:if (True|1|False|0):))'"}, {"func_args": {"regexes": "('(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$)',)"}, "return_value": "'(?:(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$))'"}, {"func_args": {"regexes": "['#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)']"}, "return_value": "'(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))'"}, {"func_args": {"regexes": "['while (True|1|False|0):', 'if (True|1|False|0):']"}, "return_value": "'(?:while (True|1|False|0):)|(?:if (True|1|False|0):)'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))', '(?:while (True|1|False|0):)|(?:if (True|1|False|0):)')"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)))|(?:(?:while (True|1|False|0):)|(?:if (True|1|False|0):))'"}, {"func_args": {"regexes": "('(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$)',)"}, "return_value": "'(?:(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$))'"}, {"func_args": {"regexes": "['#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)']"}, "return_value": "'(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))'"}, {"func_args": {"regexes": "['while (True|1|False|0):', 'if (True|1|False|0):']"}, "return_value": "'(?:while (True|1|False|0):)|(?:if (True|1|False|0):)'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))', '(?:while (True|1|False|0):)|(?:if (True|1|False|0):)')"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)))|(?:(?:while (True|1|False|0):)|(?:if (True|1|False|0):))'"}, {"func_args": {"regexes": "('(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$)',)"}, "return_value": "'(?:(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$))'"}, {"func_args": {"regexes": "['#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)']"}, "return_value": "'(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))'"}, {"func_args": {"regexes": "['while (True|1|False|0):', 'if (True|1|False|0):']"}, "return_value": "'(?:while (True|1|False|0):)|(?:if (True|1|False|0):)'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))', '(?:while (True|1|False|0):)|(?:if (True|1|False|0):)')"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)))|(?:(?:while (True|1|False|0):)|(?:if (True|1|False|0):))'"}, {"func_args": {"regexes": "('(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$)',)"}, "return_value": "'(?:(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$))'"}, {"func_args": {"regexes": "['#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)']"}, "return_value": "'(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))'"}, {"func_args": {"regexes": "['while (True|1|False|0):', 'if (True|1|False|0):']"}, "return_value": "'(?:while (True|1|False|0):)|(?:if (True|1|False|0):)'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))', '(?:while (True|1|False|0):)|(?:if (True|1|False|0):)')"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)))|(?:(?:while (True|1|False|0):)|(?:if (True|1|False|0):))'"}, {"func_args": {"regexes": "('(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$)',)"}, "return_value": "'(?:(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$))'"}, {"func_args": {"regexes": "['#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)']"}, "return_value": "'(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))'"}, {"func_args": {"regexes": "['while (True|1|False|0):', 'if (True|1|False|0):']"}, "return_value": "'(?:while (True|1|False|0):)|(?:if (True|1|False|0):)'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))', '(?:while (True|1|False|0):)|(?:if (True|1|False|0):)')"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)))|(?:(?:while (True|1|False|0):)|(?:if (True|1|False|0):))'"}, {"func_args": {"regexes": "('(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$)',)"}, "return_value": "'(?:(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$))'"}, {"func_args": {"regexes": "['#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)']"}, "return_value": "'(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))'"}, {"func_args": {"regexes": "['while (True|1|False|0):', 'if (True|1|False|0):']"}, "return_value": "'(?:while (True|1|False|0):)|(?:if (True|1|False|0):)'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))', '(?:while (True|1|False|0):)|(?:if (True|1|False|0):)')"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)))|(?:(?:while (True|1|False|0):)|(?:if (True|1|False|0):))'"}, {"func_args": {"regexes": "('(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$)',)"}, "return_value": "'(?:(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$))'"}, {"func_args": {"regexes": "['#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)']"}, "return_value": "'(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))'"}, {"func_args": {"regexes": "['while (True|1|False|0):', 'if (True|1|False|0):']"}, "return_value": "'(?:while (True|1|False|0):)|(?:if (True|1|False|0):)'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))', '(?:while (True|1|False|0):)|(?:if (True|1|False|0):)')"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)))|(?:(?:while (True|1|False|0):)|(?:if (True|1|False|0):))'"}, {"func_args": {"regexes": "('(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$)',)"}, "return_value": "'(?:(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$))'"}, {"func_args": {"regexes": "['#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)']"}, "return_value": "'(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))'"}, {"func_args": {"regexes": "['while (True|1|False|0):', 'if (True|1|False|0):']"}, "return_value": "'(?:while (True|1|False|0):)|(?:if (True|1|False|0):)'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))', '(?:while (True|1|False|0):)|(?:if (True|1|False|0):)')"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)))|(?:(?:while (True|1|False|0):)|(?:if (True|1|False|0):))'"}, {"func_args": {"regexes": "('(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$)',)"}, "return_value": "'(?:(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$))'"}, {"func_args": {"regexes": "['#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)']"}, "return_value": "'(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))'"}, {"func_args": {"regexes": "['while (True|1|False|0):', 'if (True|1|False|0):']"}, "return_value": "'(?:while (True|1|False|0):)|(?:if (True|1|False|0):)'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))', '(?:while (True|1|False|0):)|(?:if (True|1|False|0):)')"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)))|(?:(?:while (True|1|False|0):)|(?:if (True|1|False|0):))'"}, {"func_args": {"regexes": "('(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$)',)"}, "return_value": "'(?:(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$))'"}, {"func_args": {"regexes": "['#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)']"}, "return_value": "'(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))'"}, {"func_args": {"regexes": "['while (True|1|False|0):', 'if (True|1|False|0):']"}, "return_value": "'(?:while (True|1|False|0):)|(?:if (True|1|False|0):)'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))', '(?:while (True|1|False|0):)|(?:if (True|1|False|0):)')"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)))|(?:(?:while (True|1|False|0):)|(?:if (True|1|False|0):))'"}, {"func_args": {"regexes": "('(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$)',)"}, "return_value": "'(?:(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$))'"}, {"func_args": {"regexes": "['#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)']"}, "return_value": "'(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))'"}, {"func_args": {"regexes": "['while (True|1|False|0):', 'if (True|1|False|0):']"}, "return_value": "'(?:while (True|1|False|0):)|(?:if (True|1|False|0):)'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))', '(?:while (True|1|False|0):)|(?:if (True|1|False|0):)')"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)))|(?:(?:while (True|1|False|0):)|(?:if (True|1|False|0):))'"}, {"func_args": {"regexes": "('(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$)',)"}, "return_value": "'(?:(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$))'"}, {"func_args": {"regexes": "['#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)']"}, "return_value": "'(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))'"}, {"func_args": {"regexes": "['while (True|1|False|0):', 'if (True|1|False|0):']"}, "return_value": "'(?:while (True|1|False|0):)|(?:if (True|1|False|0):)'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))', '(?:while (True|1|False|0):)|(?:if (True|1|False|0):)')"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)))|(?:(?:while (True|1|False|0):)|(?:if (True|1|False|0):))'"}, {"func_args": {"regexes": "('(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$)',)"}, "return_value": "'(?:(?:\\\\#\\\\s*pragma: no cover)|(?:^\\\\s*raise AssertionError\\\\b)|(?:^\\\\s*raise NotImplementedError\\\\b)|(?:^\\\\s*return NotImplemented\\\\b)|(?:^\\\\s*raise$)|(?:^if __name__ == [\\'\"]__main__[\\'\"]:$))'"}, {"func_args": {"regexes": "['#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)']"}, "return_value": "'(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))'"}, {"func_args": {"regexes": "['while (True|1|False|0):', 'if (True|1|False|0):']"}, "return_value": "'(?:while (True|1|False|0):)|(?:if (True|1|False|0):)'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH))', '(?:while (True|1|False|0):)|(?:if (True|1|False|0):)')"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(branch|BRANCH)))|(?:(?:while (True|1|False|0):)|(?:if (True|1|False|0):))'"}], "text": "def join_regex(regexes):\n    \"\"\"Combine a list of regexes into one that matches any of them.\"\"\"\n    return \"|\".join(f\"(?:{r})\" for r in regexes)"}, "nice_pair": {"line": 140, "args": [{"func_args": {"pair": "(1, 1)"}, "return_value": "'1'"}, {"func_args": {"pair": "(31, 31)"}, "return_value": "'31'"}, {"func_args": {"pair": "(33, 33)"}, "return_value": "'33'"}, {"func_args": {"pair": "(61, 61)"}, "return_value": "'61'"}, {"func_args": {"pair": "(93, 100)"}, "return_value": "'93-100'"}, {"func_args": {"pair": "(122, 122)"}, "return_value": "'122'"}, {"func_args": {"pair": "(133, 133)"}, "return_value": "'133'"}, {"func_args": {"pair": "(137, 138)"}, "return_value": "'137-138'"}, {"func_args": {"pair": "(175, 176)"}, "return_value": "'175-176'"}, {"func_args": {"pair": "(192, 192)"}, "return_value": "'192'"}, {"func_args": {"pair": "(225, 225)"}, "return_value": "'225'"}, {"func_args": {"pair": "(293, 293)"}, "return_value": "'293'"}, {"func_args": {"pair": "(311, 311)"}, "return_value": "'311'"}, {"func_args": {"pair": "(345, 348)"}, "return_value": "'345-348'"}, {"func_args": {"pair": "(496, 499)"}, "return_value": "'496-499'"}, {"func_args": {"pair": "(76, 76)"}, "return_value": "'76'"}, {"func_args": {"pair": "(83, 83)"}, "return_value": "'83'"}, {"func_args": {"pair": "(91, 91)"}, "return_value": "'91'"}, {"func_args": {"pair": "(99, 99)"}, "return_value": "'99'"}, {"func_args": {"pair": "(116, 128)"}, "return_value": "'116-128'"}, {"func_args": {"pair": "(132, 134)"}, "return_value": "'132-134'"}, {"func_args": {"pair": "(277, 279)"}, "return_value": "'277-279'"}, {"func_args": {"pair": "(118, 119)"}, "return_value": "'118-119'"}, {"func_args": {"pair": "(138, 138)"}, "return_value": "'138'"}, {"func_args": {"pair": "(152, 178)"}, "return_value": "'152-178'"}, {"func_args": {"pair": "(180, 195)"}, "return_value": "'180-195'"}, {"func_args": {"pair": "(200, 210)"}, "return_value": "'200-210'"}, {"func_args": {"pair": "(214, 226)"}, "return_value": "'214-226'"}, {"func_args": {"pair": "(263, 265)"}, "return_value": "'263-265'"}, {"func_args": {"pair": "(290, 291)"}, "return_value": "'290-291'"}, {"func_args": {"pair": "(1, 11)"}, "return_value": "'1-11'"}, {"func_args": {"pair": "(49, 50)"}, "return_value": "'49-50'"}, {"func_args": {"pair": "(405, 405)"}, "return_value": "'405'"}, {"func_args": {"pair": "(979, 979)"}, "return_value": "'979'"}, {"func_args": {"pair": "(1013, 1013)"}, "return_value": "'1013'"}, {"func_args": {"pair": "(1049, 1052)"}, "return_value": "'1049-1052'"}, {"func_args": {"pair": "(1181, 1181)"}, "return_value": "'1181'"}, {"func_args": {"pair": "(1239, 1239)"}, "return_value": "'1239'"}, {"func_args": {"pair": "(1379, 1380)"}, "return_value": "'1379-1380'"}, {"func_args": {"pair": "(1393, 1395)"}, "return_value": "'1393-1395'"}, {"func_args": {"pair": "(1459, 1459)"}, "return_value": "'1459'"}, {"func_args": {"pair": "(1466, 1466)"}, "return_value": "'1466'"}, {"func_args": {"pair": "(1619, 1619)"}, "return_value": "'1619'"}, {"func_args": {"pair": "(1717, 1717)"}, "return_value": "'1717'"}, {"func_args": {"pair": "(1722, 1723)"}, "return_value": "'1722-1723'"}, {"func_args": {"pair": "(1795, 1795)"}, "return_value": "'1795'"}, {"func_args": {"pair": "(1933, 1933)"}, "return_value": "'1933'"}, {"func_args": {"pair": "(1935, 1935)"}, "return_value": "'1935'"}, {"func_args": {"pair": "(1942, 1942)"}, "return_value": "'1942'"}, {"func_args": {"pair": "(2000, 2000)"}, "return_value": "'2000'"}, {"func_args": {"pair": "(2014, 2014)"}, "return_value": "'2014'"}, {"func_args": {"pair": "(2042, 2042)"}, "return_value": "'2042'"}, {"func_args": {"pair": "(15, 16)"}, "return_value": "'15-16'"}, {"func_args": {"pair": "(22, 23)"}, "return_value": "'22-23'"}, {"func_args": {"pair": "(27, 28)"}, "return_value": "'27-28'"}, {"func_args": {"pair": "(99, 99)"}, "return_value": "'99'"}, {"func_args": {"pair": "(8, 42)"}, "return_value": "'8-42'"}, {"func_args": {"pair": "(1, 24)"}, "return_value": "'1-24'"}, {"func_args": {"pair": "(1, 22)"}, "return_value": "'1-22'"}, {"func_args": {"pair": "(63, 63)"}, "return_value": "'63'"}, {"func_args": {"pair": "(68, 69)"}, "return_value": "'68-69'"}, {"func_args": {"pair": "(80, 80)"}, "return_value": "'80'"}, {"func_args": {"pair": "(82, 82)"}, "return_value": "'82'"}, {"func_args": {"pair": "(138, 138)"}, "return_value": "'138'"}, {"func_args": {"pair": "(17, 19)"}, "return_value": "'17-19'"}, {"func_args": {"pair": "(22, 22)"}, "return_value": "'22'"}, {"func_args": {"pair": "(28, 29)"}, "return_value": "'28-29'"}, {"func_args": {"pair": "(33, 33)"}, "return_value": "'33'"}, {"func_args": {"pair": "(41, 41)"}, "return_value": "'41'"}, {"func_args": {"pair": "(43, 43)"}, "return_value": "'43'"}, {"func_args": {"pair": "(49, 49)"}, "return_value": "'49'"}, {"func_args": {"pair": "(72, 73)"}, "return_value": "'72-73'"}, {"func_args": {"pair": "(78, 79)"}, "return_value": "'78-79'"}, {"func_args": {"pair": "(1, 49)"}, "return_value": "'1-49'"}, {"func_args": {"pair": "(2, 161)"}, "return_value": "'2-161'"}, {"func_args": {"pair": "(24, 25)"}, "return_value": "'24-25'"}, {"func_args": {"pair": "(49, 50)"}, "return_value": "'49-50'"}, {"func_args": {"pair": "(39, 51)"}, "return_value": "'39-51'"}, {"func_args": {"pair": "(109, 132)"}, "return_value": "'109-132'"}, {"func_args": {"pair": "(44, 44)"}, "return_value": "'44'"}, {"func_args": {"pair": "(58, 58)"}, "return_value": "'58'"}, {"func_args": {"pair": "(36, 37)"}, "return_value": "'36-37'"}, {"func_args": {"pair": "(39, 39)"}, "return_value": "'39'"}, {"func_args": {"pair": "(29, 29)"}, "return_value": "'29'"}, {"func_args": {"pair": "(31, 31)"}, "return_value": "'31'"}, {"func_args": {"pair": "(82, 82)"}, "return_value": "'82'"}, {"func_args": {"pair": "(87, 91)"}, "return_value": "'87-91'"}, {"func_args": {"pair": "(112, 112)"}, "return_value": "'112'"}, {"func_args": {"pair": "(74, 74)"}, "return_value": "'74'"}, {"func_args": {"pair": "(76, 76)"}, "return_value": "'76'"}, {"func_args": {"pair": "(150, 150)"}, "return_value": "'150'"}, {"func_args": {"pair": "(235, 236)"}, "return_value": "'235-236'"}, {"func_args": {"pair": "(245, 246)"}, "return_value": "'245-246'"}, {"func_args": {"pair": "(259, 259)"}, "return_value": "'259'"}, {"func_args": {"pair": "(264, 270)"}, "return_value": "'264-270'"}, {"func_args": {"pair": "(272, 272)"}, "return_value": "'272'"}, {"func_args": {"pair": "(289, 292)"}, "return_value": "'289-292'"}, {"func_args": {"pair": "(19, 20)"}, "return_value": "'19-20'"}, {"func_args": {"pair": "(46, 47)"}, "return_value": "'46-47'"}, {"func_args": {"pair": "(66, 67)"}, "return_value": "'66-67'"}, {"func_args": {"pair": "(75, 75)"}, "return_value": "'75'"}, {"func_args": {"pair": "(77, 77)"}, "return_value": "'77'"}, {"func_args": {"pair": "(92, 92)"}, "return_value": "'92'"}, {"func_args": {"pair": "(106, 107)"}, "return_value": "'106-107'"}, {"func_args": {"pair": "(112, 125)"}, "return_value": "'112-125'"}, {"func_args": {"pair": "(132, 143)"}, "return_value": "'132-143'"}, {"func_args": {"pair": "(30, 32)"}, "return_value": "'30-32'"}, {"func_args": {"pair": "(48, 50)"}, "return_value": "'48-50'"}, {"func_args": {"pair": "(63, 64)"}, "return_value": "'63-64'"}, {"func_args": {"pair": "(72, 72)"}, "return_value": "'72'"}, {"func_args": {"pair": "(37, 38)"}, "return_value": "'37-38'"}, {"func_args": {"pair": "(16, 19)"}, "return_value": "'16-19'"}, {"func_args": {"pair": "(134, 138)"}, "return_value": "'134-138'"}, {"func_args": {"pair": "(145, 149)"}, "return_value": "'145-149'"}, {"func_args": {"pair": "(9, 9)"}, "return_value": "'9'"}, {"func_args": {"pair": "(19, 19)"}, "return_value": "'19'"}, {"func_args": {"pair": "(30, 50)"}, "return_value": "'30-50'"}, {"func_args": {"pair": "(107, 107)"}, "return_value": "'107'"}, {"func_args": {"pair": "(173, 173)"}, "return_value": "'173'"}, {"func_args": {"pair": "(193, 193)"}, "return_value": "'193'"}, {"func_args": {"pair": "(233, 234)"}, "return_value": "'233-234'"}, {"func_args": {"pair": "(276, 276)"}, "return_value": "'276'"}, {"func_args": {"pair": "(279, 280)"}, "return_value": "'279-280'"}, {"func_args": {"pair": "(330, 330)"}, "return_value": "'330'"}, {"func_args": {"pair": "(361, 361)"}, "return_value": "'361'"}, {"func_args": {"pair": "(364, 376)"}, "return_value": "'364-376'"}, {"func_args": {"pair": "(387, 388)"}, "return_value": "'387-388'"}, {"func_args": {"pair": "(470, 470)"}, "return_value": "'470'"}, {"func_args": {"pair": "(543, 547)"}, "return_value": "'543-547'"}, {"func_args": {"pair": "(572, 572)"}, "return_value": "'572'"}, {"func_args": {"pair": "(600, 600)"}, "return_value": "'600'"}, {"func_args": {"pair": "(615, 624)"}, "return_value": "'615-624'"}, {"func_args": {"pair": "(626, 627)"}, "return_value": "'626-627'"}, {"func_args": {"pair": "(635, 637)"}, "return_value": "'635-637'"}, {"func_args": {"pair": "(646, 646)"}, "return_value": "'646'"}, {"func_args": {"pair": "(656, 656)"}, "return_value": "'656'"}, {"func_args": {"pair": "(712, 712)"}, "return_value": "'712'"}, {"func_args": {"pair": "(764, 769)"}, "return_value": "'764-769'"}, {"func_args": {"pair": "(772, 776)"}, "return_value": "'772-776'"}], "text": "def nice_pair(pair):\n    \"\"\"Make a nice string representation of a pair of numbers.\n\n    If the numbers are equal, just return the number, otherwise return the pair\n    with a dash between them, indicating the range.\n\n    \"\"\"\n    start, end = pair\n    if start == end:\n        return \"%d\" % start\n    else:\n        return \"%d-%d\" % (start, end)"}, "tryint": {"line": 370, "args": [{"func_args": {"s": "'src/tox/__main__.py                              '"}, "return_value": "'src/tox/__main__.py                              '"}, {"func_args": {"s": "'1'"}, "return_value": "1"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'1'"}, "return_value": "1"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'1'"}, "return_value": "1"}, {"func_args": {"s": "''"}, "return_value": "''"}, {"func_args": {"s": "'src/tox/_pytestplugin.py                       '"}, "return_value": "'src/tox/_pytestplugin.py                       '"}, {"func_args": {"s": "'360'"}, "return_value": "360"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'28'"}, "return_value": "28"}, {"func_args": {"s": "'    '"}, "return_value": "'    '"}, {"func_args": {"s": "'116'"}, "return_value": "116"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'14'"}, "return_value": "14"}, {"func_args": {"s": "'    '"}, "return_value": "'    '"}, {"func_args": {"s": "'89'"}, "return_value": "89"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'31'"}, "return_value": "31"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'33'"}, "return_value": "33"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'61'"}, "return_value": "61"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'93'"}, "return_value": "93"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'100'"}, "return_value": "100"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'122'"}, "return_value": "122"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'133'"}, "return_value": "133"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'137'"}, "return_value": "137"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'138'"}, "return_value": "138"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'175'"}, "return_value": "175"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'176'"}, "return_value": "176"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'192'"}, "return_value": "192"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'203'"}, "return_value": "203"}, {"func_args": {"s": "'->exit, '"}, "return_value": "'->exit, '"}, {"func_args": {"s": "'225'"}, "return_value": "225"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'249'"}, "return_value": "249"}, {"func_args": {"s": "'->'"}, "return_value": "'->'"}, {"func_args": {"s": "'262'"}, "return_value": "262"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'293'"}, "return_value": "293"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'311'"}, "return_value": "311"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'345'"}, "return_value": "345"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'348'"}, "return_value": "348"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'492'"}, "return_value": "492"}, {"func_args": {"s": "'->'"}, "return_value": "'->'"}, {"func_args": {"s": "'489'"}, "return_value": "489"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'496'"}, "return_value": "496"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'499'"}, "return_value": "499"}, {"func_args": {"s": "''"}, "return_value": "''"}, {"func_args": {"s": "'src/tox/_quickstart.py                         '"}, "return_value": "'src/tox/_quickstart.py                         '"}, {"func_args": {"s": "'120'"}, "return_value": "120"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'19'"}, "return_value": "19"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'59'"}, "return_value": "59"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'7'"}, "return_value": "7"}, {"func_args": {"s": "'    '"}, "return_value": "'    '"}, {"func_args": {"s": "'83'"}, "return_value": "83"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'76'"}, "return_value": "76"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'83'"}, "return_value": "83"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'91'"}, "return_value": "91"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'99'"}, "return_value": "99"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'116'"}, "return_value": "116"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'128'"}, "return_value": "128"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'132'"}, "return_value": "132"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'134'"}, "return_value": "134"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'176'"}, "return_value": "176"}, {"func_args": {"s": "'->'"}, "return_value": "'->'"}, {"func_args": {"s": "'186'"}, "return_value": "186"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'178'"}, "return_value": "178"}, {"func_args": {"s": "'->'"}, "return_value": "'->'"}, {"func_args": {"s": "'177'"}, "return_value": "177"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'277'"}, "return_value": "277"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'279'"}, "return_value": "279"}, {"func_args": {"s": "''"}, "return_value": "''"}, {"func_args": {"s": "'src/tox/action.py                              '"}, "return_value": "'src/tox/action.py                              '"}, {"func_args": {"s": "'184'"}, "return_value": "184"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'59'"}, "return_value": "59"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'68'"}, "return_value": "68"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'5'"}, "return_value": "5"}, {"func_args": {"s": "'    '"}, "return_value": "'    '"}, {"func_args": {"s": "'65'"}, "return_value": "65"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'118'"}, "return_value": "118"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'119'"}, "return_value": "119"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'133'"}, "return_value": "133"}, {"func_args": {"s": "'->'"}, "return_value": "'->'"}, {"func_args": {"s": "'144'"}, "return_value": "144"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'138'"}, "return_value": "138"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'152'"}, "return_value": "152"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'178'"}, "return_value": "178"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'180'"}, "return_value": "180"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'195'"}, "return_value": "195"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'200'"}, "return_value": "200"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'210'"}, "return_value": "210"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'214'"}, "return_value": "214"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'226'"}, "return_value": "226"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'263'"}, "return_value": "263"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'265'"}, "return_value": "265"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'266'"}, "return_value": "266"}, {"func_args": {"s": "'->'"}, "return_value": "'->'"}, {"func_args": {"s": "'270'"}, "return_value": "270"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'290'"}, "return_value": "290"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'291'"}, "return_value": "291"}, {"func_args": {"s": "''"}, "return_value": "''"}, {"func_args": {"s": "'src/tox/cli.py                                   '"}, "return_value": "'src/tox/cli.py                                   '"}, {"func_args": {"s": "'7'"}, "return_value": "7"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'7'"}, "return_value": "7"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'1'"}, "return_value": "1"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'11'"}, "return_value": "11"}, {"func_args": {"s": "''"}, "return_value": "''"}, {"func_args": {"s": "'src/tox/config/__init__.py                    '"}, "return_value": "'src/tox/config/__init__.py                    '"}, {"func_args": {"s": "'1162'"}, "return_value": "1162"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'29'"}, "return_value": "29"}, {"func_args": {"s": "'    '"}, "return_value": "'    '"}, {"func_args": {"s": "'487'"}, "return_value": "487"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'23'"}, "return_value": "23"}, {"func_args": {"s": "'    '"}, "return_value": "'    '"}, {"func_args": {"s": "'97'"}, "return_value": "97"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'49'"}, "return_value": "49"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'50'"}, "return_value": "50"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'233'"}, "return_value": "233"}, {"func_args": {"s": "'->'"}, "return_value": "'->'"}, {"func_args": {"s": "'241'"}, "return_value": "241"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'355'"}, "return_value": "355"}, {"func_args": {"s": "'->exit, '"}, "return_value": "'->exit, '"}, {"func_args": {"s": "'405'"}, "return_value": "405"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'979'"}, "return_value": "979"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'1013'"}, "return_value": "1013"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'1049'"}, "return_value": "1049"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'1052'"}, "return_value": "1052"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'1181'"}, "return_value": "1181"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'1239'"}, "return_value": "1239"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'1356'"}, "return_value": "1356"}, {"func_args": {"s": "'->'"}, "return_value": "'->'"}, {"func_args": {"s": "'1348'"}, "return_value": "1348"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'1379'"}, "return_value": "1379"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'1380'"}, "return_value": "1380"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'1393'"}, "return_value": "1393"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'1395'"}, "return_value": "1395"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'1459'"}, "return_value": "1459"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'1466'"}, "return_value": "1466"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'1472'"}, "return_value": "1472"}, {"func_args": {"s": "'->'"}, "return_value": "'->'"}, {"func_args": {"s": "'1474'"}, "return_value": "1474"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'1619'"}, "return_value": "1619"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'1717'"}, "return_value": "1717"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'1722'"}, "return_value": "1722"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'1723'"}, "return_value": "1723"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'1795'"}, "return_value": "1795"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'1933'"}, "return_value": "1933"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'1935'"}, "return_value": "1935"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'1942'"}, "return_value": "1942"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'1955'"}, "return_value": "1955"}, {"func_args": {"s": "'->'"}, "return_value": "'->'"}, {"func_args": {"s": "'1968'"}, "return_value": "1968"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'2000'"}, "return_value": "2000"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'2014'"}, "return_value": "2014"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'2042'"}, "return_value": "2042"}, {"func_args": {"s": "''"}, "return_value": "''"}, {"func_args": {"s": "'src/tox/config/parallel.py                      '"}, "return_value": "'src/tox/config/parallel.py                      '"}, {"func_args": {"s": "'36'"}, "return_value": "36"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'6'"}, "return_value": "6"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'6'"}, "return_value": "6"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'    '"}, "return_value": "'    '"}, {"func_args": {"s": "'86'"}, "return_value": "86"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'15'"}, "return_value": "15"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'16'"}, "return_value": "16"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'22'"}, "return_value": "22"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'23'"}, "return_value": "23"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'27'"}, "return_value": "27"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'28'"}, "return_value": "28"}, {"func_args": {"s": "''"}, "return_value": "''"}, {"func_args": {"s": "'src/tox/exception.py                            '"}, "return_value": "'src/tox/exception.py                            '"}, {"func_args": {"s": "'46'"}, "return_value": "46"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'1'"}, "return_value": "1"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'34'"}, "return_value": "34"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'    '"}, "return_value": "'    '"}, {"func_args": {"s": "'96'"}, "return_value": "96"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'99'"}, "return_value": "99"}, {"func_args": {"s": "''"}, "return_value": "''"}, {"func_args": {"s": "'src/tox/helper/build_isolated.py                '"}, "return_value": "'src/tox/helper/build_isolated.py                '"}, {"func_args": {"s": "'21'"}, "return_value": "21"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'21'"}, "return_value": "21"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'9'"}, "return_value": "9"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'8'"}, "return_value": "8"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'42'"}, "return_value": "42"}, {"func_args": {"s": "''"}, "return_value": "''"}, {"func_args": {"s": "'src/tox/helper/build_requires.py                '"}, "return_value": "'src/tox/helper/build_requires.py                '"}, {"func_args": {"s": "'16'"}, "return_value": "16"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'16'"}, "return_value": "16"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'2'"}, "return_value": "2"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'1'"}, "return_value": "1"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'24'"}, "return_value": "24"}, {"func_args": {"s": "''"}, "return_value": "''"}, {"func_args": {"s": "'src/tox/helper/get_site_package_dir.py          '"}, "return_value": "'src/tox/helper/get_site_package_dir.py          '"}, {"func_args": {"s": "'15'"}, "return_value": "15"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'15'"}, "return_value": "15"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'2'"}, "return_value": "2"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'1'"}, "return_value": "1"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'22'"}, "return_value": "22"}, {"func_args": {"s": "''"}, "return_value": "''"}, {"func_args": {"s": "'src/tox/interpreters/__init__.py                '"}, "return_value": "'src/tox/interpreters/__init__.py                '"}, {"func_args": {"s": "'98'"}, "return_value": "98"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'6'"}, "return_value": "6"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'22'"}, "return_value": "22"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'4'"}, "return_value": "4"}, {"func_args": {"s": "'    '"}, "return_value": "'    '"}, {"func_args": {"s": "'92'"}, "return_value": "92"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'63'"}, "return_value": "63"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'68'"}, "return_value": "68"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'69'"}, "return_value": "69"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'80'"}, "return_value": "80"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'82'"}, "return_value": "82"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'138'"}, "return_value": "138"}, {"func_args": {"s": "''"}, "return_value": "''"}, {"func_args": {"s": "'src/tox/interpreters/common.py                  '"}, "return_value": "'src/tox/interpreters/common.py                  '"}, {"func_args": {"s": "'17'"}, "return_value": "17"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'3'"}, "return_value": "3"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'10'"}, "return_value": "10"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'1'"}, "return_value": "1"}, {"func_args": {"s": "'    '"}, "return_value": "'    '"}, {"func_args": {"s": "'78'"}, "return_value": "78"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'17'"}, "return_value": "17"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'19'"}, "return_value": "19"}, {"func_args": {"s": "''"}, "return_value": "''"}, {"func_args": {"s": "'src/tox/interpreters/py_spec.py                 '"}, "return_value": "'src/tox/interpreters/py_spec.py                 '"}, {"func_args": {"s": "'51'"}, "return_value": "51"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'6'"}, "return_value": "6"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'18'"}, "return_value": "18"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'3'"}, "return_value": "3"}, {"func_args": {"s": "'    '"}, "return_value": "'    '"}, {"func_args": {"s": "'87'"}, "return_value": "87"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'22'"}, "return_value": "22"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'28'"}, "return_value": "28"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'29'"}, "return_value": "29"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'33'"}, "return_value": "33"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'41'"}, "return_value": "41"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'43'"}, "return_value": "43"}, {"func_args": {"s": "''"}, "return_value": "''"}, {"func_args": {"s": "'src/tox/interpreters/via_path.py                '"}, "return_value": "'src/tox/interpreters/via_path.py                '"}, {"func_args": {"s": "'51'"}, "return_value": "51"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'5'"}, "return_value": "5"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'18'"}, "return_value": "18"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'2'"}, "return_value": "2"}, {"func_args": {"s": "'    '"}, "return_value": "'    '"}, {"func_args": {"s": "'90'"}, "return_value": "90"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'49'"}, "return_value": "49"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'72'"}, "return_value": "72"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'73'"}, "return_value": "73"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'78'"}, "return_value": "78"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'79'"}, "return_value": "79"}, {"func_args": {"s": "''"}, "return_value": "''"}, {"func_args": {"s": "'src/tox/interpreters/windows/__init__.py        '"}, "return_value": "'src/tox/interpreters/windows/__init__.py        '"}, {"func_args": {"s": "'33'"}, "return_value": "33"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'33'"}, "return_value": "33"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'18'"}, "return_value": "18"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'1'"}, "return_value": "1"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'49'"}, "return_value": "49"}, {"func_args": {"s": "''"}, "return_value": "''"}, {"func_args": {"s": "'src/tox/interpreters/windows/pep'"}, "return_value": "'src/tox/interpreters/windows/pep'"}, {"func_args": {"s": "'514'"}, "return_value": "514"}, {"func_args": {"s": "'.py         '"}, "return_value": "'.py         '"}, {"func_args": {"s": "'111'"}, "return_value": "111"}, {"func_args": {"s": "'    '"}, "return_value": "'    '"}, {"func_args": {"s": "'111'"}, "return_value": "111"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'42'"}, "return_value": "42"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'2'"}, "return_value": "2"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'161'"}, "return_value": "161"}, {"func_args": {"s": "''"}, "return_value": "''"}, {"func_args": {"s": "'src/tox/package/__init__.py                     '"}, "return_value": "'src/tox/package/__init__.py                     '"}, {"func_args": {"s": "'55'"}, "return_value": "55"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'4'"}, "return_value": "4"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'16'"}, "return_value": "16"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'4'"}, "return_value": "4"}, {"func_args": {"s": "'    '"}, "return_value": "'    '"}, {"func_args": {"s": "'89'"}, "return_value": "89"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'15'"}, "return_value": "15"}, {"func_args": {"s": "'->'"}, "return_value": "'->'"}, {"func_args": {"s": "'17'"}, "return_value": "17"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'24'"}, "return_value": "24"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'25'"}, "return_value": "25"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'45'"}, "return_value": "45"}, {"func_args": {"s": "'->'"}, "return_value": "'->'"}, {"func_args": {"s": "'53'"}, "return_value": "53"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'49'"}, "return_value": "49"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'50'"}, "return_value": "50"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'70'"}, "return_value": "70"}, {"func_args": {"s": "'->'"}, "return_value": "'->'"}, {"func_args": {"s": "'67'"}, "return_value": "67"}, {"func_args": {"s": "''"}, "return_value": "''"}, {"func_args": {"s": "'src/tox/package/builder/isolated.py             '"}, "return_value": "'src/tox/package/builder/isolated.py             '"}, {"func_args": {"s": "'76'"}, "return_value": "76"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'14'"}, "return_value": "14"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'40'"}, "return_value": "40"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'    '"}, "return_value": "'    '"}, {"func_args": {"s": "'79'"}, "return_value": "79"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'39'"}, "return_value": "39"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'51'"}, "return_value": "51"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'109'"}, "return_value": "109"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'132'"}, "return_value": "132"}, {"func_args": {"s": "''"}, "return_value": "''"}, {"func_args": {"s": "'src/tox/package/local.py                        '"}, "return_value": "'src/tox/package/local.py                        '"}, {"func_args": {"s": "'49'"}, "return_value": "49"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'2'"}, "return_value": "2"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'18'"}, "return_value": "18"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'2'"}, "return_value": "2"}, {"func_args": {"s": "'    '"}, "return_value": "'    '"}, {"func_args": {"s": "'94'"}, "return_value": "94"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'44'"}, "return_value": "44"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'58'"}, "return_value": "58"}, {"func_args": {"s": "''"}, "return_value": "''"}, {"func_args": {"s": "'src/tox/package/view.py                         '"}, "return_value": "'src/tox/package/view.py                         '"}, {"func_args": {"s": "'27'"}, "return_value": "27"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'3'"}, "return_value": "3"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'10'"}, "return_value": "10"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'2'"}, "return_value": "2"}, {"func_args": {"s": "'    '"}, "return_value": "'    '"}, {"func_args": {"s": "'86'"}, "return_value": "86"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'32'"}, "return_value": "32"}, {"func_args": {"s": "'->'"}, "return_value": "'->'"}, {"func_args": {"s": "'38'"}, "return_value": "38"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'36'"}, "return_value": "36"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'37'"}, "return_value": "37"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'39'"}, "return_value": "39"}, {"func_args": {"s": "''"}, "return_value": "''"}, {"func_args": {"s": "'src/tox/reporter.py                            '"}, "return_value": "'src/tox/reporter.py                            '"}, {"func_args": {"s": "'114'"}, "return_value": "114"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'9'"}, "return_value": "9"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'22'"}, "return_value": "22"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'4'"}, "return_value": "4"}, {"func_args": {"s": "'    '"}, "return_value": "'    '"}, {"func_args": {"s": "'89'"}, "return_value": "89"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'29'"}, "return_value": "29"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'31'"}, "return_value": "31"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'48'"}, "return_value": "48"}, {"func_args": {"s": "'->'"}, "return_value": "'->'"}, {"func_args": {"s": "'50'"}, "return_value": "50"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'82'"}, "return_value": "82"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'87'"}, "return_value": "87"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'91'"}, "return_value": "91"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'112'"}, "return_value": "112"}, {"func_args": {"s": "''"}, "return_value": "''"}, {"func_args": {"s": "'src/tox/session/__init__.py                    '"}, "return_value": "'src/tox/session/__init__.py                    '"}, {"func_args": {"s": "'224'"}, "return_value": "224"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'15'"}, "return_value": "15"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'84'"}, "return_value": "84"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'11'"}, "return_value": "11"}, {"func_args": {"s": "'    '"}, "return_value": "'    '"}, {"func_args": {"s": "'91'"}, "return_value": "91"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'74'"}, "return_value": "74"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'76'"}, "return_value": "76"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'150'"}, "return_value": "150"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'231'"}, "return_value": "231"}, {"func_args": {"s": "'->exit, '"}, "return_value": "'->exit, '"}, {"func_args": {"s": "'233'"}, "return_value": "233"}, {"func_args": {"s": "'->exit, '"}, "return_value": "'->exit, '"}, {"func_args": {"s": "'235'"}, "return_value": "235"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'236'"}, "return_value": "236"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'242'"}, "return_value": "242"}, {"func_args": {"s": "'->exit, '"}, "return_value": "'->exit, '"}, {"func_args": {"s": "'245'"}, "return_value": "245"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'246'"}, "return_value": "246"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'250'"}, "return_value": "250"}, {"func_args": {"s": "'->'"}, "return_value": "'->'"}, {"func_args": {"s": "'252'"}, "return_value": "252"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'259'"}, "return_value": "259"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'264'"}, "return_value": "264"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'270'"}, "return_value": "270"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'272'"}, "return_value": "272"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'281'"}, "return_value": "281"}, {"func_args": {"s": "'->'"}, "return_value": "'->'"}, {"func_args": {"s": "'253'"}, "return_value": "253"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'289'"}, "return_value": "289"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'292'"}, "return_value": "292"}, {"func_args": {"s": "''"}, "return_value": "''"}, {"func_args": {"s": "'src/tox/session/commands/provision.py           '"}, "return_value": "'src/tox/session/commands/provision.py           '"}, {"func_args": {"s": "'18'"}, "return_value": "18"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'2'"}, "return_value": "2"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'2'"}, "return_value": "2"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'1'"}, "return_value": "1"}, {"func_args": {"s": "'    '"}, "return_value": "'    '"}, {"func_args": {"s": "'85'"}, "return_value": "85"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'19'"}, "return_value": "19"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'20'"}, "return_value": "20"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'24'"}, "return_value": "24"}, {"func_args": {"s": "'->exit'"}, "return_value": "'->exit'"}, {"func_args": {"s": "'src/tox/session/commands/run/parallel.py       '"}, "return_value": "'src/tox/session/commands/run/parallel.py       '"}, {"func_args": {"s": "'101'"}, "return_value": "101"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'27'"}, "return_value": "27"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'34'"}, "return_value": "34"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'5'"}, "return_value": "5"}, {"func_args": {"s": "'    '"}, "return_value": "'    '"}, {"func_args": {"s": "'70'"}, "return_value": "70"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'46'"}, "return_value": "46"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'47'"}, "return_value": "47"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'66'"}, "return_value": "66"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'67'"}, "return_value": "67"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'75'"}, "return_value": "75"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'77'"}, "return_value": "77"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'92'"}, "return_value": "92"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'106'"}, "return_value": "106"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'107'"}, "return_value": "107"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'112'"}, "return_value": "112"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'125'"}, "return_value": "125"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'132'"}, "return_value": "132"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'143'"}, "return_value": "143"}, {"func_args": {"s": "''"}, "return_value": "''"}, {"func_args": {"s": "'src/tox/session/commands/run/sequential.py      '"}, "return_value": "'src/tox/session/commands/run/sequential.py      '"}, {"func_args": {"s": "'51'"}, "return_value": "51"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'9'"}, "return_value": "9"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'20'"}, "return_value": "20"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'3'"}, "return_value": "3"}, {"func_args": {"s": "'    '"}, "return_value": "'    '"}, {"func_args": {"s": "'83'"}, "return_value": "83"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'19'"}, "return_value": "19"}, {"func_args": {"s": "'->'"}, "return_value": "'->'"}, {"func_args": {"s": "'21'"}, "return_value": "21"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'30'"}, "return_value": "30"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'32'"}, "return_value": "32"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'48'"}, "return_value": "48"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'50'"}, "return_value": "50"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'63'"}, "return_value": "63"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'64'"}, "return_value": "64"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'72'"}, "return_value": "72"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'74'"}, "return_value": "74"}, {"func_args": {"s": "'->'"}, "return_value": "'->'"}, {"func_args": {"s": "'76'"}, "return_value": "76"}, {"func_args": {"s": "''"}, "return_value": "''"}, {"func_args": {"s": "'src/tox/util/graph.py                           '"}, "return_value": "'src/tox/util/graph.py                           '"}, {"func_args": {"s": "'48'"}, "return_value": "48"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'40'"}, "return_value": "40"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'1'"}, "return_value": "1"}, {"func_args": {"s": "'    '"}, "return_value": "'    '"}, {"func_args": {"s": "'99'"}, "return_value": "99"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'65'"}, "return_value": "65"}, {"func_args": {"s": "'->exit'"}, "return_value": "'->exit'"}, {"func_args": {"s": "'src/tox/util/lock.py                            '"}, "return_value": "'src/tox/util/lock.py                            '"}, {"func_args": {"s": "'30'"}, "return_value": "30"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'2'"}, "return_value": "2"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'2'"}, "return_value": "2"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'    '"}, "return_value": "'    '"}, {"func_args": {"s": "'94'"}, "return_value": "94"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'37'"}, "return_value": "37"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'38'"}, "return_value": "38"}, {"func_args": {"s": "''"}, "return_value": "''"}, {"func_args": {"s": "'src/tox/util/spinner.py                        '"}, "return_value": "'src/tox/util/spinner.py                        '"}, {"func_args": {"s": "'126'"}, "return_value": "126"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'13'"}, "return_value": "13"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'46'"}, "return_value": "46"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'7'"}, "return_value": "7"}, {"func_args": {"s": "'    '"}, "return_value": "'    '"}, {"func_args": {"s": "'87'"}, "return_value": "87"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'16'"}, "return_value": "16"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'19'"}, "return_value": "19"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'53'"}, "return_value": "53"}, {"func_args": {"s": "'->exit, '"}, "return_value": "'->exit, '"}, {"func_args": {"s": "'91'"}, "return_value": "91"}, {"func_args": {"s": "'->'"}, "return_value": "'->'"}, {"func_args": {"s": "'95'"}, "return_value": "95"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'134'"}, "return_value": "134"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'138'"}, "return_value": "138"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'139'"}, "return_value": "139"}, {"func_args": {"s": "'->exit, '"}, "return_value": "'->exit, '"}, {"func_args": {"s": "'145'"}, "return_value": "145"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'149'"}, "return_value": "149"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'150'"}, "return_value": "150"}, {"func_args": {"s": "'->exit'"}, "return_value": "'->exit'"}, {"func_args": {"s": "'src/tox/util/stdlib.py                          '"}, "return_value": "'src/tox/util/stdlib.py                          '"}, {"func_args": {"s": "'35'"}, "return_value": "35"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'17'"}, "return_value": "17"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'12'"}, "return_value": "12"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'3'"}, "return_value": "3"}, {"func_args": {"s": "'    '"}, "return_value": "'    '"}, {"func_args": {"s": "'45'"}, "return_value": "45"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'9'"}, "return_value": "9"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'19'"}, "return_value": "19"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'30'"}, "return_value": "30"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'50'"}, "return_value": "50"}, {"func_args": {"s": "''"}, "return_value": "''"}, {"func_args": {"s": "'src/tox/venv.py                                '"}, "return_value": "'src/tox/venv.py                                '"}, {"func_args": {"s": "'484'"}, "return_value": "484"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'39'"}, "return_value": "39"}, {"func_args": {"s": "'    '"}, "return_value": "'    '"}, {"func_args": {"s": "'205'"}, "return_value": "205"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'23'"}, "return_value": "23"}, {"func_args": {"s": "'    '"}, "return_value": "'    '"}, {"func_args": {"s": "'89'"}, "return_value": "89"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'107'"}, "return_value": "107"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'173'"}, "return_value": "173"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'187'"}, "return_value": "187"}, {"func_args": {"s": "'->'"}, "return_value": "'->'"}, {"func_args": {"s": "'190'"}, "return_value": "190"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'193'"}, "return_value": "193"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'233'"}, "return_value": "233"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'234'"}, "return_value": "234"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'245'"}, "return_value": "245"}, {"func_args": {"s": "'->'"}, "return_value": "'->'"}, {"func_args": {"s": "'244'"}, "return_value": "244"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'246'"}, "return_value": "246"}, {"func_args": {"s": "'->'"}, "return_value": "'->'"}, {"func_args": {"s": "'245'"}, "return_value": "245"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'276'"}, "return_value": "276"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'279'"}, "return_value": "279"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'280'"}, "return_value": "280"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'322'"}, "return_value": "322"}, {"func_args": {"s": "'->exit, '"}, "return_value": "'->exit, '"}, {"func_args": {"s": "'330'"}, "return_value": "330"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'361'"}, "return_value": "361"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'364'"}, "return_value": "364"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'376'"}, "return_value": "376"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'387'"}, "return_value": "387"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'388'"}, "return_value": "388"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'470'"}, "return_value": "470"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'543'"}, "return_value": "543"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'547'"}, "return_value": "547"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'569'"}, "return_value": "569"}, {"func_args": {"s": "'->'"}, "return_value": "'->'"}, {"func_args": {"s": "'532'"}, "return_value": "532"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'572'"}, "return_value": "572"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'600'"}, "return_value": "600"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'615'"}, "return_value": "615"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'624'"}, "return_value": "624"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'626'"}, "return_value": "626"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'627'"}, "return_value": "627"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'635'"}, "return_value": "635"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'637'"}, "return_value": "637"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'646'"}, "return_value": "646"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'656'"}, "return_value": "656"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'712'"}, "return_value": "712"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'725'"}, "return_value": "725"}, {"func_args": {"s": "'->'"}, "return_value": "'->'"}, {"func_args": {"s": "'737'"}, "return_value": "737"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'764'"}, "return_value": "764"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'769'"}, "return_value": "769"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'772'"}, "return_value": "772"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'776'"}, "return_value": "776"}, {"func_args": {"s": "''"}, "return_value": "''"}], "text": "def tryint(s):\n        \"\"\"If `s` is a number, return an int, else `s` unchanged.\"\"\"\n        try:\n            return int(s)\n        except ValueError:\n            return s"}, "human_key": {"line": 366, "args": [{"func_args": {"s": "'src/tox/__main__.py                              1      1      0      0     0%   1'"}, "return_value": "['src/tox/__main__.py                              ', 1, '      ', 1, '      ', 0, '      ', 0, '     ', 0, '%   ', 1, '']"}, {"func_args": {"s": "'src/tox/_pytestplugin.py                       360     28    116     14    89%   31, 33, 61, 93-100, 122, 133, 137-138, 175-176, 192, 203->exit, 225, 249->262, 293, 311, 345-348, 492->489, 496-499'"}, "return_value": "['src/tox/_pytestplugin.py                       ', 360, '     ', 28, '    ', 116, '     ', 14, '    ', 89, '%   ', 31, ', ', 33, ', ', 61, ', ', 93, '-', 100, ', ', 122, ', ', 133, ', ', 137, '-', 138, ', ', 175, '-', 176, ', ', 192, ', ', 203, '->exit, ', 225, ', ', 249, '->', 262, ', ', 293, ', ', 311, ', ', 345, '-', 348, ', ', 492, '->', 489, ', ', 496, '-', 499, '']"}, {"func_args": {"s": "'src/tox/_quickstart.py                         120     19     59      7    83%   76, 83, 91, 99, 116-128, 132-134, 176->186, 178->177, 277-279'"}, "return_value": "['src/tox/_quickstart.py                         ', 120, '     ', 19, '     ', 59, '      ', 7, '    ', 83, '%   ', 76, ', ', 83, ', ', 91, ', ', 99, ', ', 116, '-', 128, ', ', 132, '-', 134, ', ', 176, '->', 186, ', ', 178, '->', 177, ', ', 277, '-', 279, '']"}, {"func_args": {"s": "'src/tox/action.py                              184     59     68      5    65%   118-119, 133->144, 138, 152-178, 180-195, 200-210, 214-226, 263-265, 266->270, 290-291'"}, "return_value": "['src/tox/action.py                              ', 184, '     ', 59, '     ', 68, '      ', 5, '    ', 65, '%   ', 118, '-', 119, ', ', 133, '->', 144, ', ', 138, ', ', 152, '-', 178, ', ', 180, '-', 195, ', ', 200, '-', 210, ', ', 214, '-', 226, ', ', 263, '-', 265, ', ', 266, '->', 270, ', ', 290, '-', 291, '']"}, {"func_args": {"s": "'src/tox/cli.py                                   7      7      0      0     0%   1-11'"}, "return_value": "['src/tox/cli.py                                   ', 7, '      ', 7, '      ', 0, '      ', 0, '     ', 0, '%   ', 1, '-', 11, '']"}, {"func_args": {"s": "'src/tox/config/__init__.py                    1162     29    487     23    97%   49-50, 233->241, 355->exit, 405, 979, 1013, 1049-1052, 1181, 1239, 1356->1348, 1379-1380, 1393-1395, 1459, 1466, 1472->1474, 1619, 1717, 1722-1723, 1795, 1933, 1935, 1942, 1955->1968, 2000, 2014, 2042'"}, "return_value": "['src/tox/config/__init__.py                    ', 1162, '     ', 29, '    ', 487, '     ', 23, '    ', 97, '%   ', 49, '-', 50, ', ', 233, '->', 241, ', ', 355, '->exit, ', 405, ', ', 979, ', ', 1013, ', ', 1049, '-', 1052, ', ', 1181, ', ', 1239, ', ', 1356, '->', 1348, ', ', 1379, '-', 1380, ', ', 1393, '-', 1395, ', ', 1459, ', ', 1466, ', ', 1472, '->', 1474, ', ', 1619, ', ', 1717, ', ', 1722, '-', 1723, ', ', 1795, ', ', 1933, ', ', 1935, ', ', 1942, ', ', 1955, '->', 1968, ', ', 2000, ', ', 2014, ', ', 2042, '']"}, {"func_args": {"s": "'src/tox/config/parallel.py                      36      6      6      0    86%   15-16, 22-23, 27-28'"}, "return_value": "['src/tox/config/parallel.py                      ', 36, '      ', 6, '      ', 6, '      ', 0, '    ', 86, '%   ', 15, '-', 16, ', ', 22, '-', 23, ', ', 27, '-', 28, '']"}, {"func_args": {"s": "'src/tox/exception.py                            46      1     34      0    96%   99'"}, "return_value": "['src/tox/exception.py                            ', 46, '      ', 1, '     ', 34, '      ', 0, '    ', 96, '%   ', 99, '']"}, {"func_args": {"s": "'src/tox/helper/build_isolated.py                21     21      9      0     0%   8-42'"}, "return_value": "['src/tox/helper/build_isolated.py                ', 21, '     ', 21, '      ', 9, '      ', 0, '     ', 0, '%   ', 8, '-', 42, '']"}, {"func_args": {"s": "'src/tox/helper/build_requires.py                16     16      2      0     0%   1-24'"}, "return_value": "['src/tox/helper/build_requires.py                ', 16, '     ', 16, '      ', 2, '      ', 0, '     ', 0, '%   ', 1, '-', 24, '']"}, {"func_args": {"s": "'src/tox/helper/get_site_package_dir.py          15     15      2      0     0%   1-22'"}, "return_value": "['src/tox/helper/get_site_package_dir.py          ', 15, '     ', 15, '      ', 2, '      ', 0, '     ', 0, '%   ', 1, '-', 22, '']"}, {"func_args": {"s": "'src/tox/interpreters/__init__.py                98      6     22      4    92%   63, 68-69, 80, 82, 138'"}, "return_value": "['src/tox/interpreters/__init__.py                ', 98, '      ', 6, '     ', 22, '      ', 4, '    ', 92, '%   ', 63, ', ', 68, '-', 69, ', ', 80, ', ', 82, ', ', 138, '']"}, {"func_args": {"s": "'src/tox/interpreters/common.py                  17      3     10      1    78%   17-19'"}, "return_value": "['src/tox/interpreters/common.py                  ', 17, '      ', 3, '     ', 10, '      ', 1, '    ', 78, '%   ', 17, '-', 19, '']"}, {"func_args": {"s": "'src/tox/interpreters/py_spec.py                 51      6     18      3    87%   22, 28-29, 33, 41, 43'"}, "return_value": "['src/tox/interpreters/py_spec.py                 ', 51, '      ', 6, '     ', 18, '      ', 3, '    ', 87, '%   ', 22, ', ', 28, '-', 29, ', ', 33, ', ', 41, ', ', 43, '']"}, {"func_args": {"s": "'src/tox/interpreters/via_path.py                51      5     18      2    90%   49, 72-73, 78-79'"}, "return_value": "['src/tox/interpreters/via_path.py                ', 51, '      ', 5, '     ', 18, '      ', 2, '    ', 90, '%   ', 49, ', ', 72, '-', 73, ', ', 78, '-', 79, '']"}, {"func_args": {"s": "'src/tox/interpreters/windows/__init__.py        33     33     18      0     0%   1-49'"}, "return_value": "['src/tox/interpreters/windows/__init__.py        ', 33, '     ', 33, '     ', 18, '      ', 0, '     ', 0, '%   ', 1, '-', 49, '']"}, {"func_args": {"s": "'src/tox/interpreters/windows/pep514.py         111    111     42      0     0%   2-161'"}, "return_value": "['src/tox/interpreters/windows/pep', 514, '.py         ', 111, '    ', 111, '     ', 42, '      ', 0, '     ', 0, '%   ', 2, '-', 161, '']"}, {"func_args": {"s": "'src/tox/package/__init__.py                     55      4     16      4    89%   15->17, 24-25, 45->53, 49-50, 70->67'"}, "return_value": "['src/tox/package/__init__.py                     ', 55, '      ', 4, '     ', 16, '      ', 4, '    ', 89, '%   ', 15, '->', 17, ', ', 24, '-', 25, ', ', 45, '->', 53, ', ', 49, '-', 50, ', ', 70, '->', 67, '']"}, {"func_args": {"s": "'src/tox/package/builder/isolated.py             76     14     40      0    79%   39-51, 109-132'"}, "return_value": "['src/tox/package/builder/isolated.py             ', 76, '     ', 14, '     ', 40, '      ', 0, '    ', 79, '%   ', 39, '-', 51, ', ', 109, '-', 132, '']"}, {"func_args": {"s": "'src/tox/package/local.py                        49      2     18      2    94%   44, 58'"}, "return_value": "['src/tox/package/local.py                        ', 49, '      ', 2, '     ', 18, '      ', 2, '    ', 94, '%   ', 44, ', ', 58, '']"}, {"func_args": {"s": "'src/tox/package/view.py                         27      3     10      2    86%   32->38, 36-37, 39'"}, "return_value": "['src/tox/package/view.py                         ', 27, '      ', 3, '     ', 10, '      ', 2, '    ', 86, '%   ', 32, '->', 38, ', ', 36, '-', 37, ', ', 39, '']"}, {"func_args": {"s": "'src/tox/reporter.py                            114      9     22      4    89%   29, 31, 48->50, 82, 87-91, 112'"}, "return_value": "['src/tox/reporter.py                            ', 114, '      ', 9, '     ', 22, '      ', 4, '    ', 89, '%   ', 29, ', ', 31, ', ', 48, '->', 50, ', ', 82, ', ', 87, '-', 91, ', ', 112, '']"}, {"func_args": {"s": "'src/tox/session/__init__.py                    224     15     84     11    91%   74, 76, 150, 231->exit, 233->exit, 235-236, 242->exit, 245-246, 250->252, 259, 264-270, 272, 281->253, 289-292'"}, "return_value": "['src/tox/session/__init__.py                    ', 224, '     ', 15, '     ', 84, '     ', 11, '    ', 91, '%   ', 74, ', ', 76, ', ', 150, ', ', 231, '->exit, ', 233, '->exit, ', 235, '-', 236, ', ', 242, '->exit, ', 245, '-', 246, ', ', 250, '->', 252, ', ', 259, ', ', 264, '-', 270, ', ', 272, ', ', 281, '->', 253, ', ', 289, '-', 292, '']"}, {"func_args": {"s": "'src/tox/session/commands/provision.py           18      2      2      1    85%   19-20, 24->exit'"}, "return_value": "['src/tox/session/commands/provision.py           ', 18, '      ', 2, '      ', 2, '      ', 1, '    ', 85, '%   ', 19, '-', 20, ', ', 24, '->exit']"}, {"func_args": {"s": "'src/tox/session/commands/run/parallel.py       101     27     34      5    70%   46-47, 66-67, 75, 77, 92, 106-107, 112-125, 132-143'"}, "return_value": "['src/tox/session/commands/run/parallel.py       ', 101, '     ', 27, '     ', 34, '      ', 5, '    ', 70, '%   ', 46, '-', 47, ', ', 66, '-', 67, ', ', 75, ', ', 77, ', ', 92, ', ', 106, '-', 107, ', ', 112, '-', 125, ', ', 132, '-', 143, '']"}, {"func_args": {"s": "'src/tox/session/commands/run/sequential.py      51      9     20      3    83%   19->21, 30-32, 48-50, 63-64, 72, 74->76'"}, "return_value": "['src/tox/session/commands/run/sequential.py      ', 51, '      ', 9, '     ', 20, '      ', 3, '    ', 83, '%   ', 19, '->', 21, ', ', 30, '-', 32, ', ', 48, '-', 50, ', ', 63, '-', 64, ', ', 72, ', ', 74, '->', 76, '']"}, {"func_args": {"s": "'src/tox/util/graph.py                           48      0     40      1    99%   65->exit'"}, "return_value": "['src/tox/util/graph.py                           ', 48, '      ', 0, '     ', 40, '      ', 1, '    ', 99, '%   ', 65, '->exit']"}, {"func_args": {"s": "'src/tox/util/lock.py                            30      2      2      0    94%   37-38'"}, "return_value": "['src/tox/util/lock.py                            ', 30, '      ', 2, '      ', 2, '      ', 0, '    ', 94, '%   ', 37, '-', 38, '']"}, {"func_args": {"s": "'src/tox/util/spinner.py                        126     13     46      7    87%   16-19, 53->exit, 91->95, 134-138, 139->exit, 145-149, 150->exit'"}, "return_value": "['src/tox/util/spinner.py                        ', 126, '     ', 13, '     ', 46, '      ', 7, '    ', 87, '%   ', 16, '-', 19, ', ', 53, '->exit, ', 91, '->', 95, ', ', 134, '-', 138, ', ', 139, '->exit, ', 145, '-', 149, ', ', 150, '->exit']"}, {"func_args": {"s": "'src/tox/util/stdlib.py                          35     17     12      3    45%   9, 19, 30-50'"}, "return_value": "['src/tox/util/stdlib.py                          ', 35, '     ', 17, '     ', 12, '      ', 3, '    ', 45, '%   ', 9, ', ', 19, ', ', 30, '-', 50, '']"}, {"func_args": {"s": "'src/tox/venv.py                                484     39    205     23    89%   107, 173, 187->190, 193, 233-234, 245->244, 246->245, 276, 279-280, 322->exit, 330, 361, 364-376, 387-388, 470, 543-547, 569->532, 572, 600, 615-624, 626-627, 635-637, 646, 656, 712, 725->737, 764-769, 772-776'"}, "return_value": "['src/tox/venv.py                                ', 484, '     ', 39, '    ', 205, '     ', 23, '    ', 89, '%   ', 107, ', ', 173, ', ', 187, '->', 190, ', ', 193, ', ', 233, '-', 234, ', ', 245, '->', 244, ', ', 246, '->', 245, ', ', 276, ', ', 279, '-', 280, ', ', 322, '->exit, ', 330, ', ', 361, ', ', 364, '-', 376, ', ', 387, '-', 388, ', ', 470, ', ', 543, '-', 547, ', ', 569, '->', 532, ', ', 572, ', ', 600, ', ', 615, '-', 624, ', ', 626, '-', 627, ', ', 635, '-', 637, ', ', 646, ', ', 656, ', ', 712, ', ', 725, '->', 737, ', ', 764, '-', 769, ', ', 772, '-', 776, '']"}], "text": "def human_key(s):\n    \"\"\"Turn a string into a list of string and number chunks.\n        \"z23a\" -> [\"z\", 23, \"a\"]\n    \"\"\"\n    def tryint(s):\n        \"\"\"If `s` is a number, return an int, else `s` unchanged.\"\"\"\n        try:\n            return int(s)\n        except ValueError:\n            return s\n\n    return [tryint(c) for c in re.split(r\"(\\d+)\", s)]"}, "human_sorted_items": {"line": 389, "args": [{"func_args": {"items": "[('src/tox/__main__.py                              1      1      0      0     0%   1', ('src/tox/__main__.py', 1, 1, 0, 0, '0', '1', 0.0)), ('src/tox/_pytestplugin.py                       360     28    116     14    89%   31, 33, 61, 93-100, 122, 133, 137-138, 175-176, 192, 203->exit, 225, 249->262, 293, 311, 345-348, 492->489, 496-499', ('src/tox/_pytestplugin.py', 360, 28, 116, 14, '89', '31, 33, 61, 93-100, 122, 133, 137-138, 175-176, 192, 203->exit, 225, 249->262, 293, 311, 345-348, 492->489, 496-499', 89.49579831932773)), ('src/tox/_quickstart.py                         120     19     59      7    83%   76, 83, 91, 99, 116-128, 132-134, 176->186, 178->177, 277-279', ('src/tox/_quickstart.py', 120, 19, 59, 7, '83', '76, 83, 91, 99, 116-128, 132-134, 176->186, 178->177, 277-279', 83.24022346368714)), ('src/tox/action.py                              184     59     68      5    65%   118-119, 133->144, 138, 152-178, 180-195, 200-210, 214-226, 263-265, 266->270, 290-291', ('src/tox/action.py', 184, 59, 68, 5, '65', '118-119, 133->144, 138, 152-178, 180-195, 200-210, 214-226, 263-265, 266->270, 290-291', 65.07936507936508)), ('src/tox/cli.py                                   7      7      0      0     0%   1-11', ('src/tox/cli.py', 7, 7, 0, 0, '0', '1-11', 0.0)), ('src/tox/config/__init__.py                    1162     29    487     23    97%   49-50, 233->241, 355->exit, 405, 979, 1013, 1049-1052, 1181, 1239, 1356->1348, 1379-1380, 1393-1395, 1459, 1466, 1472->1474, 1619, 1717, 1722-1723, 1795, 1933, 1935, 1942, 1955->1968, 2000, 2014, 2042', ('src/tox/config/__init__.py', 1162, 29, 487, 23, '97', '49-50, 233->241, 355->exit, 405, 979, 1013, 1049-1052, 1181, 1239, 1356->1348, 1379-1380, 1393-1395, 1459, 1466, 1472->1474, 1619, 1717, 1722-1723, 1795, 1933, 1935, 1942, 1955->1968, 2000, 2014, 2042', 96.60400242571255)), ('src/tox/config/parallel.py                      36      6      6      0    86%   15-16, 22-23, 27-28', ('src/tox/config/parallel.py', 36, 6, 6, 0, '86', '15-16, 22-23, 27-28', 85.71428571428571)), ('src/tox/exception.py                            46      1     34      0    96%   99', ('src/tox/exception.py', 46, 1, 34, 0, '96', '99', 96.25)), ('src/tox/helper/build_isolated.py                21     21      9      0     0%   8-42', ('src/tox/helper/build_isolated.py', 21, 21, 9, 0, '0', '8-42', 0.0)), ('src/tox/helper/build_requires.py                16     16      2      0     0%   1-24', ('src/tox/helper/build_requires.py', 16, 16, 2, 0, '0', '1-24', 0.0)), ('src/tox/helper/get_site_package_dir.py          15     15      2      0     0%   1-22', ('src/tox/helper/get_site_package_dir.py', 15, 15, 2, 0, '0', '1-22', 0.0)), ('src/tox/interpreters/__init__.py                98      6     22      4    92%   63, 68-69, 80, 82, 138', ('src/tox/interpreters/__init__.py', 98, 6, 22, 4, '92', '63, 68-69, 80, 82, 138', 91.66666666666667)), ('src/tox/interpreters/common.py                  17      3     10      1    78%   17-19', ('src/tox/interpreters/common.py', 17, 3, 10, 1, '78', '17-19', 77.77777777777777)), ('src/tox/interpreters/py_spec.py                 51      6     18      3    87%   22, 28-29, 33, 41, 43', ('src/tox/interpreters/py_spec.py', 51, 6, 18, 3, '87', '22, 28-29, 33, 41, 43', 86.95652173913044)), ('src/tox/interpreters/via_path.py                51      5     18      2    90%   49, 72-73, 78-79', ('src/tox/interpreters/via_path.py', 51, 5, 18, 2, '90', '49, 72-73, 78-79', 89.85507246376811)), ('src/tox/interpreters/windows/__init__.py        33     33     18      0     0%   1-49', ('src/tox/interpreters/windows/__init__.py', 33, 33, 18, 0, '0', '1-49', 0.0)), ('src/tox/interpreters/windows/pep514.py         111    111     42      0     0%   2-161', ('src/tox/interpreters/windows/pep514.py', 111, 111, 42, 0, '0', '2-161', 0.0)), ('src/tox/package/__init__.py                     55      4     16      4    89%   15->17, 24-25, 45->53, 49-50, 70->67', ('src/tox/package/__init__.py', 55, 4, 16, 4, '89', '15->17, 24-25, 45->53, 49-50, 70->67', 88.73239436619718)), ('src/tox/package/builder/isolated.py             76     14     40      0    79%   39-51, 109-132', ('src/tox/package/builder/isolated.py', 76, 14, 40, 0, '79', '39-51, 109-132', 79.3103448275862)), ('src/tox/package/local.py                        49      2     18      2    94%   44, 58', ('src/tox/package/local.py', 49, 2, 18, 2, '94', '44, 58', 94.02985074626865)), ('src/tox/package/view.py                         27      3     10      2    86%   32->38, 36-37, 39', ('src/tox/package/view.py', 27, 3, 10, 2, '86', '32->38, 36-37, 39', 86.48648648648648)), ('src/tox/reporter.py                            114      9     22      4    89%   29, 31, 48->50, 82, 87-91, 112', ('src/tox/reporter.py', 114, 9, 22, 4, '89', '29, 31, 48->50, 82, 87-91, 112', 88.97058823529412)), ('src/tox/session/__init__.py                    224     15     84     11    91%   74, 76, 150, 231->exit, 233->exit, 235-236, 242->exit, 245-246, 250->252, 259, 264-270, 272, 281->253, 289-292', ('src/tox/session/__init__.py', 224, 15, 84, 11, '91', '74, 76, 150, 231->exit, 233->exit, 235-236, 242->exit, 245-246, 250->252, 259, 264-270, 272, 281->253, 289-292', 90.9090909090909)), ('src/tox/session/commands/provision.py           18      2      2      1    85%   19-20, 24->exit', ('src/tox/session/commands/provision.py', 18, 2, 2, 1, '85', '19-20, 24->exit', 85.0)), ('src/tox/session/commands/run/parallel.py       101     27     34      5    70%   46-47, 66-67, 75, 77, 92, 106-107, 112-125, 132-143', ('src/tox/session/commands/run/parallel.py', 101, 27, 34, 5, '70', '46-47, 66-67, 75, 77, 92, 106-107, 112-125, 132-143', 70.37037037037037)), ('src/tox/session/commands/run/sequential.py      51      9     20      3    83%   19->21, 30-32, 48-50, 63-64, 72, 74->76', ('src/tox/session/commands/run/sequential.py', 51, 9, 20, 3, '83', '19->21, 30-32, 48-50, 63-64, 72, 74->76', 83.09859154929578)), ('src/tox/util/graph.py                           48      0     40      1    99%   65->exit', ('src/tox/util/graph.py', 48, 0, 40, 1, '99', '65->exit', 98.86363636363636)), ('src/tox/util/lock.py                            30      2      2      0    94%   37-38', ('src/tox/util/lock.py', 30, 2, 2, 0, '94', '37-38', 93.75)), ('src/tox/util/spinner.py                        126     13     46      7    87%   16-19, 53->exit, 91->95, 134-138, 139->exit, 145-149, 150->exit', ('src/tox/util/spinner.py', 126, 13, 46, 7, '87', '16-19, 53->exit, 91->95, 134-138, 139->exit, 145-149, 150->exit', 87.20930232558139)), ('src/tox/util/stdlib.py                          35     17     12      3    45%   9, 19, 30-50', ('src/tox/util/stdlib.py', 35, 17, 12, 3, '45', '9, 19, 30-50', 44.680851063829785)), ('src/tox/venv.py                                484     39    205     23    89%   107, 173, 187->190, 193, 233-234, 245->244, 246->245, 276, 279-280, 322->exit, 330, 361, 364-376, 387-388, 470, 543-547, 569->532, 572, 600, 615-624, 626-627, 635-637, 646, 656, 712, 725->737, 764-769, 772-776', ('src/tox/venv.py', 484, 39, 205, 23, '89', '107, 173, 187->190, 193, 233-234, 245->244, 246->245, 276, 279-280, 322->exit, 330, 361, 364-376, 387-388, 470, 543-547, 569->532, 572, 600, 615-624, 626-627, 635-637, 646, 656, 712, 725->737, 764-769, 772-776', 88.67924528301887))]", "reverse": "False"}, "return_value": "[('src/tox/__main__.py                              1      1      0      0     0%   1', ('src/tox/__main__.py', 1, 1, 0, 0, '0', '1', 0.0)), ('src/tox/_pytestplugin.py                       360     28    116     14    89%   31, 33, 61, 93-100, 122, 133, 137-138, 175-176, 192, 203->exit, 225, 249->262, 293, 311, 345-348, 492->489, 496-499', ('src/tox/_pytestplugin.py', 360, 28, 116, 14, '89', '31, 33, 61, 93-100, 122, 133, 137-138, 175-176, 192, 203->exit, 225, 249->262, 293, 311, 345-348, 492->489, 496-499', 89.49579831932773)), ('src/tox/_quickstart.py                         120     19     59      7    83%   76, 83, 91, 99, 116-128, 132-134, 176->186, 178->177, 277-279', ('src/tox/_quickstart.py', 120, 19, 59, 7, '83', '76, 83, 91, 99, 116-128, 132-134, 176->186, 178->177, 277-279', 83.24022346368714)), ('src/tox/action.py                              184     59     68      5    65%   118-119, 133->144, 138, 152-178, 180-195, 200-210, 214-226, 263-265, 266->270, 290-291', ('src/tox/action.py', 184, 59, 68, 5, '65', '118-119, 133->144, 138, 152-178, 180-195, 200-210, 214-226, 263-265, 266->270, 290-291', 65.07936507936508)), ('src/tox/cli.py                                   7      7      0      0     0%   1-11', ('src/tox/cli.py', 7, 7, 0, 0, '0', '1-11', 0.0)), ('src/tox/config/__init__.py                    1162     29    487     23    97%   49-50, 233->241, 355->exit, 405, 979, 1013, 1049-1052, 1181, 1239, 1356->1348, 1379-1380, 1393-1395, 1459, 1466, 1472->1474, 1619, 1717, 1722-1723, 1795, 1933, 1935, 1942, 1955->1968, 2000, 2014, 2042', ('src/tox/config/__init__.py', 1162, 29, 487, 23, '97', '49-50, 233->241, 355->exit, 405, 979, 1013, 1049-1052, 1181, 1239, 1356->1348, 1379-1380, 1393-1395, 1459, 1466, 1472->1474, 1619, 1717, 1722-1723, 1795, 1933, 1935, 1942, 1955->1968, 2000, 2014, 2042', 96.60400242571255)), ('src/tox/config/parallel.py                      36      6      6      0    86%   15-16, 22-23, 27-28', ('src/tox/config/parallel.py', 36, 6, 6, 0, '86', '15-16, 22-23, 27-28', 85.71428571428571)), ('src/tox/exception.py                            46      1     34      0    96%   99', ('src/tox/exception.py', 46, 1, 34, 0, '96', '99', 96.25)), ('src/tox/helper/build_isolated.py                21     21      9      0     0%   8-42', ('src/tox/helper/build_isolated.py', 21, 21, 9, 0, '0', '8-42', 0.0)), ('src/tox/helper/build_requires.py                16     16      2      0     0%   1-24', ('src/tox/helper/build_requires.py', 16, 16, 2, 0, '0', '1-24', 0.0)), ('src/tox/helper/get_site_package_dir.py          15     15      2      0     0%   1-22', ('src/tox/helper/get_site_package_dir.py', 15, 15, 2, 0, '0', '1-22', 0.0)), ('src/tox/interpreters/__init__.py                98      6     22      4    92%   63, 68-69, 80, 82, 138', ('src/tox/interpreters/__init__.py', 98, 6, 22, 4, '92', '63, 68-69, 80, 82, 138', 91.66666666666667)), ('src/tox/interpreters/common.py                  17      3     10      1    78%   17-19', ('src/tox/interpreters/common.py', 17, 3, 10, 1, '78', '17-19', 77.77777777777777)), ('src/tox/interpreters/py_spec.py                 51      6     18      3    87%   22, 28-29, 33, 41, 43', ('src/tox/interpreters/py_spec.py', 51, 6, 18, 3, '87', '22, 28-29, 33, 41, 43', 86.95652173913044)), ('src/tox/interpreters/via_path.py                51      5     18      2    90%   49, 72-73, 78-79', ('src/tox/interpreters/via_path.py', 51, 5, 18, 2, '90', '49, 72-73, 78-79', 89.85507246376811)), ('src/tox/interpreters/windows/__init__.py        33     33     18      0     0%   1-49', ('src/tox/interpreters/windows/__init__.py', 33, 33, 18, 0, '0', '1-49', 0.0)), ('src/tox/interpreters/windows/pep514.py         111    111     42      0     0%   2-161', ('src/tox/interpreters/windows/pep514.py', 111, 111, 42, 0, '0', '2-161', 0.0)), ('src/tox/package/__init__.py                     55      4     16      4    89%   15->17, 24-25, 45->53, 49-50, 70->67', ('src/tox/package/__init__.py', 55, 4, 16, 4, '89', '15->17, 24-25, 45->53, 49-50, 70->67', 88.73239436619718)), ('src/tox/package/builder/isolated.py             76     14     40      0    79%   39-51, 109-132', ('src/tox/package/builder/isolated.py', 76, 14, 40, 0, '79', '39-51, 109-132', 79.3103448275862)), ('src/tox/package/local.py                        49      2     18      2    94%   44, 58', ('src/tox/package/local.py', 49, 2, 18, 2, '94', '44, 58', 94.02985074626865)), ('src/tox/package/view.py                         27      3     10      2    86%   32->38, 36-37, 39', ('src/tox/package/view.py', 27, 3, 10, 2, '86', '32->38, 36-37, 39', 86.48648648648648)), ('src/tox/reporter.py                            114      9     22      4    89%   29, 31, 48->50, 82, 87-91, 112', ('src/tox/reporter.py', 114, 9, 22, 4, '89', '29, 31, 48->50, 82, 87-91, 112', 88.97058823529412)), ('src/tox/session/__init__.py                    224     15     84     11    91%   74, 76, 150, 231->exit, 233->exit, 235-236, 242->exit, 245-246, 250->252, 259, 264-270, 272, 281->253, 289-292', ('src/tox/session/__init__.py', 224, 15, 84, 11, '91', '74, 76, 150, 231->exit, 233->exit, 235-236, 242->exit, 245-246, 250->252, 259, 264-270, 272, 281->253, 289-292', 90.9090909090909)), ('src/tox/session/commands/provision.py           18      2      2      1    85%   19-20, 24->exit', ('src/tox/session/commands/provision.py', 18, 2, 2, 1, '85', '19-20, 24->exit', 85.0)), ('src/tox/session/commands/run/parallel.py       101     27     34      5    70%   46-47, 66-67, 75, 77, 92, 106-107, 112-125, 132-143', ('src/tox/session/commands/run/parallel.py', 101, 27, 34, 5, '70', '46-47, 66-67, 75, 77, 92, 106-107, 112-125, 132-143', 70.37037037037037)), ('src/tox/session/commands/run/sequential.py      51      9     20      3    83%   19->21, 30-32, 48-50, 63-64, 72, 74->76', ('src/tox/session/commands/run/sequential.py', 51, 9, 20, 3, '83', '19->21, 30-32, 48-50, 63-64, 72, 74->76', 83.09859154929578)), ('src/tox/util/graph.py                           48      0     40      1    99%   65->exit', ('src/tox/util/graph.py', 48, 0, 40, 1, '99', '65->exit', 98.86363636363636)), ('src/tox/util/lock.py                            30      2      2      0    94%   37-38', ('src/tox/util/lock.py', 30, 2, 2, 0, '94', '37-38', 93.75)), ('src/tox/util/spinner.py                        126     13     46      7    87%   16-19, 53->exit, 91->95, 134-138, 139->exit, 145-149, 150->exit', ('src/tox/util/spinner.py', 126, 13, 46, 7, '87', '16-19, 53->exit, 91->95, 134-138, 139->exit, 145-149, 150->exit', 87.20930232558139)), ('src/tox/util/stdlib.py                          35     17     12      3    45%   9, 19, 30-50', ('src/tox/util/stdlib.py', 35, 17, 12, 3, '45', '9, 19, 30-50', 44.680851063829785)), ('src/tox/venv.py                                484     39    205     23    89%   107, 173, 187->190, 193, 233-234, 245->244, 246->245, 276, 279-280, 322->exit, 330, 361, 364-376, 387-388, 470, 543-547, 569->532, 572, 600, 615-624, 626-627, 635-637, 646, 656, 712, 725->737, 764-769, 772-776', ('src/tox/venv.py', 484, 39, 205, 23, '89', '107, 173, 187->190, 193, 233-234, 245->244, 246->245, 276, 279-280, 322->exit, 330, 361, 364-376, 387-388, 470, 543-547, 569->532, 572, 600, 615-624, 626-627, 635-637, 646, 656, 712, 725->737, 764-769, 772-776', 88.67924528301887))]"}], "text": "def human_sorted_items(items, reverse=False):\n    \"\"\"Sort the (string, value) items the way humans expect.\n\n    Returns the sorted list of items.\n    \"\"\"\n    return sorted(items, key=lambda pair: (human_key(pair[0]), pair[1]), reverse=reverse)"}, "_line_ranges": {"line": 270, "args": [{"func_args": {"statements": "{1}", "lines": "{1}"}, "return_value": "[(1, 1)]"}, {"func_args": {"statements": "{1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 29, 30, 31, 32, 33, 36, 37, 45, 46, 49, 50, 51, 52, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 68, 78, 80, 81, 82, 84, 85, 86, 87, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 119, 120, 121, 122, 123, 125, 126, 127, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 147, 148, 149, 151, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 184, 185, 191, 192, 194, 196, 197, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 212, 213, 214, 216, 217, 218, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 261, 262, 272, 273, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 292, 293, 296, 297, 298, 300, 301, 302, 303, 304, 305, 307, 308, 309, 311, 312, 314, 315, 316, 317, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 331, 334, 335, 336, 337, 338, 339, 341, 344, 345, 346, 347, 348, 351, 352, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 395, 396, 397, 398, 417, 418, 432, 435, 436, 437, 439, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 461, 464, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 495, 496, 497, 499, 501, 504, 505, 511, 514, 515, 516, 517, 519, 522, 523, 524, 525, 526, 535, 536, 547, 550, 551, 552, 553, 555, 558, 559, 561, 564, 565, 566, 568, 572, 574, 577, 578, 579, 580, 581, 585, 586, 588, 589, 590, 591, 593, 594, 597, 598, 601, 604, 605, 608, 609, 612, 613, 616, 617, 619}", "lines": "{133, 137, 138, 31, 33, 293, 175, 176, 311, 61, 192, 345, 346, 347, 348, 93, 94, 95, 96, 97, 98, 99, 100, 225, 496, 497, 499, 122}"}, "return_value": "[(31, 31), (33, 33), (61, 61), (93, 100), (122, 122), (133, 133), (137, 138), (175, 176), (192, 192), (225, 225), (293, 293), (311, 311), (345, 348), (496, 499)]"}, {"func_args": {"statements": "{257, 2, 264, 269, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 42, 43, 44, 45, 46, 48, 50, 52, 53, 70, 74, 75, 76, 77, 80, 81, 82, 83, 84, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 108, 109, 110, 111, 114, 116, 117, 118, 119, 121, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 141, 142, 148, 161, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 186, 195, 202, 203, 204, 205, 206, 215, 216, 217, 218, 219, 220, 223, 224, 225, 226, 227, 230, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 249, 250, 253, 254}", "lines": "{128, 132, 133, 134, 277, 278, 279, 76, 83, 91, 99, 116, 117, 118, 119, 121, 125, 126, 127}"}, "return_value": "[(76, 76), (83, 83), (91, 91), (99, 99), (116, 128), (132, 134), (277, 279)]"}, {"func_args": {"statements": "{1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 15, 16, 17, 18, 19, 22, 25, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 57, 58, 59, 60, 62, 64, 65, 67, 68, 69, 70, 72, 74, 75, 77, 90, 91, 92, 93, 100, 101, 102, 103, 118, 119, 121, 122, 123, 124, 125, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 154, 156, 157, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 182, 184, 185, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 216, 217, 218, 219, 222, 223, 224, 225, 226, 228, 229, 230, 231, 233, 234, 235, 236, 242, 243, 244, 245, 246, 248, 249, 251, 253, 254, 255, 257, 259, 260, 263, 264, 265, 266, 267, 268, 270, 274, 275, 276, 277, 278, 279, 281, 282, 284, 286, 289, 290, 291, 293}", "lines": "{263, 264, 265, 138, 152, 154, 156, 157, 161, 162, 163, 164, 290, 291, 168, 169, 170, 171, 172, 173, 175, 177, 178, 180, 181, 182, 184, 185, 187, 188, 189, 191, 192, 193, 194, 195, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 214, 216, 217, 218, 219, 222, 223, 224, 225, 226, 118, 119}"}, "return_value": "[(118, 119), (138, 138), (152, 178), (180, 195), (200, 210), (214, 226), (263, 265), (290, 291)]"}, {"func_args": {"statements": "{1, 4, 5, 6, 7, 8, 11}", "lines": "{1, 4, 5, 6, 7, 8, 11}"}, "return_value": "[(1, 11)]"}, {"func_args": {"statements": "{}", "lines": "{1795, 1933, 1935, 405, 1942, 1049, 1050, 1051, 1052, 1181, 49, 50, 1459, 1717, 1466, 1722, 1723, 2000, 1619, 979, 1239, 2014, 1379, 1380, 1393, 1394, 1395, 1013, 2042}"}, "return_value": "[(49, 50), (405, 405), (979, 979), (1013, 1013), (1049, 1052), (1181, 1181), (1239, 1239), (1379, 1380), (1393, 1395), (1459, 1459), (1466, 1466), (1619, 1619), (1717, 1717), (1722, 1723), (1795, 1795), (1933, 1933), (1935, 1935), (1942, 1942), (2000, 2000), (2014, 2014), (2042, 2042)]"}, {"func_args": {"statements": "{1, 3, 5, 6, 7, 8, 11, 12, 13, 15, 16, 18, 20, 21, 22, 23, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 38, 39, 40, 41, 44, 45, 58, 67, 68, 74}", "lines": "{15, 16, 22, 23, 27, 28}"}, "return_value": "[(15, 16), (22, 23), (27, 28)]"}, {"func_args": {"statements": "{1, 2, 3, 6, 18, 19, 20, 21, 24, 26, 27, 29, 30, 31, 32, 33, 37, 38, 41, 42, 43, 46, 47, 50, 51, 52, 55, 59, 63, 67, 71, 74, 75, 76, 77, 78, 80, 81, 84, 88, 92, 95, 96, 98, 99, 102}", "lines": "{99}"}, "return_value": "[(99, 99)]"}, {"func_args": {"statements": "{8, 9, 12, 14, 15, 17, 18, 20, 21, 23, 29, 30, 31, 32, 34, 36, 37, 38, 39, 41, 42}", "lines": "{8, 9, 12, 14, 15, 17, 18, 20, 21, 23, 29, 30, 31, 32, 34, 36, 37, 38, 39, 41, 42}"}, "return_value": "[(8, 42)]"}, {"func_args": {"statements": "{1, 2, 3, 5, 6, 7, 9, 11, 12, 13, 15, 16, 17, 21, 23, 24}", "lines": "{1, 2, 3, 5, 6, 7, 9, 11, 12, 13, 15, 16, 17, 21, 23, 24}"}, "return_value": "[(1, 24)]"}, {"func_args": {"statements": "{1, 3, 4, 5, 6, 8, 9, 10, 11, 12, 14, 15, 16, 20, 22}", "lines": "{1, 3, 4, 5, 6, 8, 9, 10, 11, 12, 14, 15, 16, 20, 22}"}, "return_value": "[(1, 22)]"}, {"func_args": {"statements": "{1, 3, 4, 6, 7, 8, 9, 12, 13, 14, 15, 16, 18, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 71, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 98, 99, 109, 110, 112, 113, 114, 115, 116, 118, 119, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 134, 137, 138, 140, 141}", "lines": "{68, 69, 138, 80, 82, 63}"}, "return_value": "[(63, 63), (68, 69), (80, 80), (82, 82), (138, 138)]"}, {"func_args": {"statements": "{1, 3, 4, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 25}", "lines": "{17, 18, 19}"}, "return_value": "[(17, 19)]"}, {"func_args": {"statements": "{1, 3, 4, 5, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 66, 67, 70}", "lines": "{33, 41, 43, 22, 28, 29}"}, "return_value": "[(22, 22), (28, 29), (33, 33), (41, 41), (43, 43)]"}, {"func_args": {"statements": "{1, 3, 4, 5, 6, 7, 9, 11, 12, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 47, 49, 50, 51, 54, 57, 58, 59, 60, 61, 62, 68, 69, 70, 71, 72, 73, 75, 76, 78, 79}", "lines": "{72, 73, 78, 79, 49}"}, "return_value": "[(49, 49), (72, 73), (78, 79)]"}, {"func_args": {"statements": "{1, 3, 5, 7, 8, 9, 12, 13, 14, 15, 16, 18, 19, 20, 21, 24, 26, 27, 29, 30, 32, 33, 36, 37, 40, 41, 42, 43, 45, 46, 47, 48, 49}", "lines": "{1, 3, 5, 7, 8, 9, 12, 13, 14, 15, 16, 18, 19, 20, 21, 24, 26, 27, 29, 30, 32, 33, 36, 37, 40, 41, 42, 43, 45, 46, 47, 48, 49}"}, "return_value": "[(1, 49)]"}, {"func_args": {"statements": "{2, 4, 5, 7, 8, 10, 11, 14, 15, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 31, 32, 49, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 154, 155, 158, 159, 160, 161}", "lines": "{2, 4, 5, 7, 8, 10, 11, 14, 15, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 31, 32, 49, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 154, 155, 158, 159, 160, 161}"}, "return_value": "[(2, 161)]"}, {"func_args": {"statements": "{1, 3, 4, 5, 7, 8, 9, 12, 13, 15, 16, 17, 20, 22, 23, 24, 25, 26, 28, 29, 30, 31, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 56, 57, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73}", "lines": "{24, 25, 50, 49}"}, "return_value": "[(24, 25), (49, 50)]"}, {"func_args": {"statements": "{1, 3, 4, 5, 7, 8, 9, 11, 12, 13, 15, 21, 22, 23, 24, 28, 29, 30, 32, 33, 34, 35, 37, 39, 42, 47, 48, 49, 50, 51, 54, 55, 59, 60, 61, 63, 64, 65, 67, 69, 70, 72, 74, 75, 76, 77, 79, 80, 81, 83, 84, 85, 87, 88, 89, 91, 92, 93, 94, 96, 97, 99, 103, 105, 108, 109, 114, 115, 116, 118, 131, 132, 135, 136, 137, 149}", "lines": "{131, 132, 39, 42, 109, 47, 48, 49, 50, 51, 114, 115, 116, 118}"}, "return_value": "[(39, 51), (109, 132)]"}, {"func_args": {"statements": "{1, 2, 4, 5, 7, 8, 9, 11, 14, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 49, 52, 55, 56, 57, 58, 59, 60, 61, 62, 63}", "lines": "{58, 44}"}, "return_value": "[(44, 44), (58, 58)]"}, {"func_args": {"statements": "{1, 2, 4, 6, 9, 15, 16, 17, 18, 23, 24, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 50}", "lines": "{36, 37, 39}"}, "return_value": "[(36, 37), (39, 39)]"}, {"func_args": {"statements": "{2, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 42, 44, 46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 68, 69, 70, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 93, 94, 96, 97, 99, 100, 102, 103, 105, 106, 108, 109, 111, 112, 114, 115, 117, 118, 120, 121, 123, 124, 127, 130, 131, 132, 135, 136, 139, 140, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157}", "lines": "{112, 82, 87, 88, 89, 90, 91, 29, 31}"}, "return_value": "[(29, 29), (31, 31), (82, 82), (87, 91), (112, 112)]"}, {"func_args": {"statements": "{7, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 97, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 157, 158, 159, 161, 162, 163, 165, 166, 180, 181, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 196, 197, 199, 200, 201, 202, 203, 205, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 225, 227, 228, 230, 231, 232, 233, 234, 235, 236, 238, 239, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 298, 299}", "lines": "{289, 290, 259, 291, 292, 264, 74, 235, 76, 236, 270, 272, 245, 150, 246}"}, "return_value": "[(74, 74), (76, 76), (150, 150), (235, 236), (245, 246), (259, 259), (264, 270), (272, 272), (289, 292)]"}, {"func_args": {"statements": "{2, 4, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25}", "lines": "{19, 20}"}, "return_value": "[(19, 20)]"}, {"func_args": {"statements": "{1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 14, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 56, 57, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 101, 102, 103, 104, 106, 107, 108, 109, 112, 113, 118, 120, 121, 122, 123, 124, 125, 128, 132, 133, 135, 136, 137, 138, 139, 142, 143}", "lines": "{132, 133, 135, 136, 137, 138, 139, 142, 143, 46, 47, 66, 67, 75, 77, 92, 106, 107, 112, 113, 118, 120, 121, 122, 123, 124, 125}"}, "return_value": "[(46, 47), (66, 67), (75, 75), (77, 77), (92, 92), (106, 107), (112, 125), (132, 143)]"}, {"func_args": {"statements": "{1, 3, 4, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 35, 43, 44, 45, 46, 47, 48, 49, 50, 53, 58, 59, 60, 61, 62, 63, 64, 67, 68, 69, 71, 72, 73, 74, 75, 76}", "lines": "{32, 64, 72, 48, 49, 50, 63, 30, 31}"}, "return_value": "[(30, 32), (48, 50), (63, 64), (72, 72)]"}, {"func_args": {"statements": "{1, 3, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 30, 31, 33, 36, 37, 38, 39, 41, 43, 44, 47, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68}", "lines": "set()"}, "return_value": "[]"}, {"func_args": {"statements": "{2, 4, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41}", "lines": "{37, 38}"}, "return_value": "[(37, 38)]"}, {"func_args": {"statements": "{2, 3, 5, 6, 7, 8, 9, 11, 13, 15, 16, 18, 19, 22, 25, 26, 27, 28, 29, 30, 32, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 102, 103, 105, 106, 108, 109, 111, 112, 114, 115, 116, 117, 118, 119, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174}", "lines": "{134, 135, 136, 137, 138, 16, 145, 18, 19, 146, 147, 148, 149}"}, "return_value": "[(16, 19), (134, 138), (145, 149)]"}, {"func_args": {"statements": "{1, 2, 3, 4, 6, 7, 9, 12, 14, 15, 16, 19, 23, 24, 26, 27, 30, 32, 34, 35, 36, 38, 39, 40, 41, 43, 44, 46, 47, 49, 50, 52, 53, 54, 55}", "lines": "{32, 34, 35, 36, 38, 39, 40, 9, 41, 43, 44, 46, 47, 49, 50, 19, 30}"}, "return_value": "[(9, 9), (19, 19), (30, 50)]"}, {"func_args": {"statements": "{1, 2, 3, 4, 5, 6, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 23, 26, 27, 37, 38, 39, 40, 41, 42, 43, 45, 46, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 85, 86, 88, 89, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 130, 144, 145, 146, 147, 152, 154, 155, 156, 158, 159, 161, 163, 164, 165, 167, 168, 170, 172, 173, 175, 182, 183, 184, 185, 186, 187, 188, 190, 191, 193, 195, 196, 200, 202, 203, 204, 205, 206, 207, 208, 210, 211, 213, 214, 216, 217, 218, 230, 231, 232, 233, 234, 236, 237, 241, 244, 245, 246, 247, 248, 250, 254, 255, 256, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 316, 317, 319, 320, 321, 322, 323, 324, 326, 327, 329, 330, 332, 333, 334, 335, 343, 347, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 373, 374, 376, 378, 379, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 402, 403, 405, 406, 407, 408, 409, 410, 411, 413, 414, 416, 417, 418, 419, 420, 421, 423, 425, 427, 428, 430, 431, 432, 433, 440, 441, 444, 446, 447, 448, 449, 451, 452, 456, 460, 463, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 493, 494, 496, 497, 498, 499, 503, 506, 508, 509, 511, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 535, 539, 542, 543, 544, 545, 547, 549, 551, 552, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 575, 587, 588, 591, 592, 593, 594, 595, 598, 599, 600, 602, 603, 613, 614, 615, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 664, 665, 666, 667, 670, 671, 672, 673, 674, 677, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 702, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 718, 720, 722, 723, 724, 725, 726, 727, 734, 735, 737, 740, 741, 744, 745, 746, 748, 750, 764, 765, 769, 771, 772, 774, 775, 776, 778, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 794, 797, 798, 799, 800, 801, 802, 812, 813, 814, 823, 824, 826, 827, 829, 830, 831}", "lines": "{769, 387, 388, 772, 646, 774, 775, 765, 776, 656, 276, 279, 280, 543, 544, 545, 547, 173, 572, 193, 712, 330, 470, 600, 615, 233, 234, 107, 361, 364, 624, 626, 627, 373, 374, 376, 635, 764, 637}"}, "return_value": "[(107, 107), (173, 173), (193, 193), (233, 234), (276, 276), (279, 280), (330, 330), (361, 361), (364, 376), (387, 388), (470, 470), (543, 547), (572, 572), (600, 600), (615, 624), (626, 627), (635, 637), (646, 646), (656, 656), (712, 712), (764, 769), (772, 776)]"}], "text": "def _line_ranges(statements, lines):\n    \"\"\"Produce a list of ranges for `format_lines`.\"\"\"\n    statements = sorted(statements)\n    lines = sorted(lines)\n\n    pairs = []\n    start = None\n    lidx = 0\n    for stmt in statements:\n        if lidx >= len(lines):\n            break\n        if stmt == lines[lidx]:\n            lidx += 1\n            if not start:\n                start = stmt\n            end = stmt\n        elif start:\n            pairs.append((start, end))\n            start = None\n    if start:\n        pairs.append((start, end))\n    return pairs"}, "actual_path": {"line": 139, "args": [{"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/exception.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/exception.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/helper/__init__.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/helper/__init__.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/helper/build_isolated.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/helper/build_isolated.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/helper/build_requires.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/helper/build_requires.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/helper/get_site_package_dir.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/helper/get_site_package_dir.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/helper/get_version.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/helper/get_version.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/hookspecs.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/hookspecs.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/interpreters/__init__.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/interpreters/__init__.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/interpreters/common.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/interpreters/common.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/interpreters/py_spec.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/interpreters/py_spec.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/interpreters/unix.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/interpreters/unix.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/interpreters/via_path.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/interpreters/via_path.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/interpreters/windows/__init__.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/interpreters/windows/__init__.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/interpreters/windows/pep514.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/interpreters/windows/pep514.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/logs/__init__.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/logs/__init__.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/logs/command.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/logs/command.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/logs/env.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/logs/env.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/logs/result.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/logs/result.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/package/__init__.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/package/__init__.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/package/builder/__init__.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/package/builder/__init__.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/package/builder/isolated.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/package/builder/isolated.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/package/builder/legacy.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/package/builder/legacy.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/package/local.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/package/local.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/package/view.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/package/view.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/reporter.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/reporter.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/__init__.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/__init__.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/__init__.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/__init__.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/help.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/help.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/help_ini.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/help_ini.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/provision.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/provision.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/run/__init__.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/run/__init__.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/run/parallel.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/run/parallel.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/run/sequential.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/run/sequential.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/show_config.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/show_config.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/show_env.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/show_env.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/util/__init__.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/util/__init__.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/util/graph.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/util/graph.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/util/lock.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/util/lock.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/util/main.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/util/main.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/util/path.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/util/path.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/util/spinner.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/util/spinner.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/util/stdlib.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/util/stdlib.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/venv.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/venv.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/version.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/version.py'"}], "text": "def actual_path(path):\n        \"\"\"The actual path for non-Windows platforms.\"\"\"\n        return path"}, "abs_file": {"line": 144, "args": [{"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/exception.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/exception.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/helper/__init__.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/helper/__init__.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/helper/build_isolated.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/helper/build_isolated.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/helper/build_requires.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/helper/build_requires.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/helper/get_site_package_dir.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/helper/get_site_package_dir.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/helper/get_version.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/helper/get_version.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/hookspecs.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/hookspecs.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/interpreters/__init__.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/interpreters/__init__.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/interpreters/common.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/interpreters/common.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/interpreters/py_spec.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/interpreters/py_spec.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/interpreters/unix.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/interpreters/unix.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/interpreters/via_path.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/interpreters/via_path.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/interpreters/windows/__init__.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/interpreters/windows/__init__.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/interpreters/windows/pep514.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/interpreters/windows/pep514.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/logs/__init__.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/logs/__init__.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/logs/command.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/logs/command.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/logs/env.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/logs/env.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/logs/result.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/logs/result.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/package/__init__.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/package/__init__.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/package/builder/__init__.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/package/builder/__init__.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/package/builder/isolated.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/package/builder/isolated.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/package/builder/legacy.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/package/builder/legacy.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/package/local.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/package/local.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/package/view.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/package/view.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/reporter.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/reporter.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/__init__.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/__init__.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/__init__.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/__init__.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/help.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/help.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/help_ini.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/help_ini.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/provision.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/provision.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/run/__init__.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/run/__init__.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/run/parallel.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/run/parallel.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/run/sequential.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/run/sequential.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/show_config.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/show_config.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/show_env.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/session/commands/show_env.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/util/__init__.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/util/__init__.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/util/graph.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/util/graph.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/util/lock.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/util/lock.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/util/main.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/util/main.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/util/path.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/util/path.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/util/spinner.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/util/spinner.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/util/stdlib.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/util/stdlib.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/venv.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/venv.py'"}, {"func_args": {"path": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/version.py'"}, "return_value": "'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/src/tox/version.py'"}]}, "_format_trimmed": {"line": 1262, "args": [{"func_args": {"format": "' - {}'", "msg": "'assert 0 == 1\\n +  where 0 = len([])'", "available_width": "75"}, "return_value": "' - assert 0 == 1'"}, {"func_args": {"format": "' - {}'", "msg": "'AssertionError: 1\\n\\nusing tox.ini: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_separate_sdist0/pkg123/tox.ini (pid 43628)\\nusing tox-3.24.6.dev3+g86a0383c.d20220119 from /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/__init__.py (pid 43628)\\npackage pkg123/.tox/.tmp/package/1/pkg123-0.7.zip links to distshare/pkg123-0.7.zip (/private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_separate_sdist0)\\npython cannot reuse: no previous config /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_separate_sdist0/pkg123/.tox/python/.tox-config1\\npython create: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_separate_sdist0/pkg123/.tox/python\\n[43656] /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_separate_sdist0/pkg123/.tox$ /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python -m virtualenv --no-download --python /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python python >python/log/python-0.log\\nERROR: invocation failed (exit code 1), logfile: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_separate_sdist0/pkg123/.tox/python/log/python-0.log\\n================================== log start ===================================\\nNo such file as -m\\n\\n=================================== log end ====================================\\nERROR: InvocationError for command /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python -m virtualenv --no-download --python /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python python (exited with code 1)\\n___________________________________ summary ____________________________________\\nERROR:   python: InvocationError for command /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python -m virtualenv --no-download --python /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python python (exited with code 1)'", "available_width": "84"}, "return_value": "' - AssertionError: 1'"}, {"func_args": {"format": "' - {}'", "msg": "\"AssertionError: 2\\n\\nusing tox.ini: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_package_poetry0/magic/tox.ini (pid 43628)\\nusing tox-3.24.6.dev3+g86a0383c.d20220119 from /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/__init__.py (pid 43628)\\n.package uses /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python\\n.package start: getenv /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_package_poetry0/magic/.tox/.package\\n.package cannot reuse: no previous config /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_package_poetry0/magic/.tox/.package/.tox-config1\\n.package create: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_package_poetry0/magic/.tox/.package\\nsetting PATH=/private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_package_poetry0/magic/.tox/.package/bin:/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin:/Users/sergeykatkovskiy/yandex-cloud/bin:/opt/homebrew/opt/python@3.8/bin:/opt/homebrew/bin:/opt/homebrew/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/homebrew/bin:/opt/homebrew/bin\\n[43668] /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_package_poetry0/magic/.tox$ /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python -m virtualenv --no-download --python /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python .package\\nNo such file as -m\\nERROR: invocation failed (exit code 1)\\nERROR: InvocationError for command /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python -m virtualenv --no-download --python /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python .package (exited with code 1)\\n.package finish: getenv /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_package_poetry0/magic/.tox/.package after 0.13 seconds\\nERROR: FAIL could not package project - v = InvocationError('/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python -m virtualenv --no-download --python /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python .package', 1)\"", "available_width": "86"}, "return_value": "' - AssertionError: 2'"}, {"func_args": {"format": "' - {}'", "msg": "\"AssertionError: 2\\n\\nusing tox.ini: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_package_setuptools0/magic/tox.ini (pid 43628)\\nusing tox-3.24.6.dev3+g86a0383c.d20220119 from /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/__init__.py (pid 43628)\\n.package uses /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python\\n.package start: getenv /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_package_setuptools0/magic/.tox/.package\\n.package cannot reuse: no previous config /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_package_setuptools0/magic/.tox/.package/.tox-config1\\n.package create: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_package_setuptools0/magic/.tox/.package\\nsetting PATH=/private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_package_setuptools0/magic/.tox/.package/bin:/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin:/Users/sergeykatkovskiy/yandex-cloud/bin:/opt/homebrew/opt/python@3.8/bin:/opt/homebrew/bin:/opt/homebrew/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/homebrew/bin:/opt/homebrew/bin\\n[43669] /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_package_setuptools0/magic/.tox$ /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python -m virtualenv --no-download --python /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python .package\\nNo such file as -m\\nERROR: invocation failed (exit code 1)\\nERROR: InvocationError for command /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python -m virtualenv --no-download --python /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python .package (exited with code 1)\\n.package finish: getenv /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_package_setuptools0/magic/.tox/.package after 0.12 seconds\\nERROR: FAIL could not package project - v = InvocationError('/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python -m virtualenv --no-download --python /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python .package', 1)\"", "available_width": "82"}, "return_value": "' - AssertionError: 2'"}, {"func_args": {"format": "' - {}'", "msg": "\"AssertionError: 2\\nhint: Using 'master' as the name for the initial branch. This default branch name\\nhint: is subject to change. To configure the initial branch name to use in all\\nhint: of your new repositories, which will suppress this warning, call:\\nhint: \\nhint: \\tgit config --global init.defaultBranch <name>\\nhint: \\nhint: Names commonly chosen instead of 'master' are 'main', 'trunk' and\\nhint: 'development'. The just-created branch can be renamed via this command:\\nhint: \\nhint: \\tgit branch -m <name>\\n\\nInitialized empty Git repository in /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_package_flit0/magic/.git/\\n[master (root-commit) a79c3bd] first commit\\n Author: author joe <joe@example.com>\\n 5 files changed, 23 insertions(+)\\n create mode 100644 .gitignore\\n create mode 100644 MANIFEST.in\\n create mode 100644 magic/__init__.py\\n create mode 100644 pyproject.toml\\n create mode 100644 tox.ini\\nusing tox.ini: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_package_flit0/magic/tox.ini (pid 43628)\\nusing tox-3.24.6.dev3+g86a0383c.d20220119 from /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/__init__.py (pid 43628)\\n.package uses /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python\\n.package start: getenv /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_package_flit0/magic/.tox/.package\\n.package cannot reuse: no previous config /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_package_flit0/magic/.tox/.package/.tox-config1\\n.package create: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_package_flit0/magic/.tox/.package\\nsetting PATH=/private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_package_flit0/magic/.tox/.package/bin:/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin:/Users/sergeykatkovskiy/yandex-cloud/bin:/opt/homebrew/opt/python@3.8/bin:/opt/homebrew/bin:/opt/homebrew/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/homebrew/bin:/opt/homebrew/bin\\n[43674] /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_package_flit0/magic/.tox$ /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python -m virtualenv --no-download --python /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python .package\\nNo such file as -m\\nERROR: invocation failed (exit code 1)\\nERROR: InvocationError for command /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python -m virtualenv --no-download --python /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python .package (exited with code 1)\\n.package finish: getenv /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_package_flit0/magic/.tox/.package after 0.13 seconds\\nERROR: FAIL could not package project - v = InvocationError('/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python -m virtualenv --no-download --python /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python .package', 1)\"", "available_width": "88"}, "return_value": "' - AssertionError: 2'"}, {"func_args": {"format": "' - {}'", "msg": "'assert None'", "available_width": "68"}, "return_value": "' - assert None'"}, {"func_args": {"format": "' - {}'", "msg": "\"AssertionError: assert '/opt/homebre...bin/python3.8' == '/private/var...n_path0/magic'\\n  - /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/t/pytest-of-sergeykatkovskiy/pytest-8/test_find_alias_on_path0/magic\\n  + /opt/homebrew/opt/python@3.8/bin/python3.8\"", "available_width": "75"}, "return_value": "\" - AssertionError: assert '/opt/homebre...bin/python3.8' == '/private/va...\""}, {"func_args": {"format": "' - {}'", "msg": "\"AssertionError: assert ''\"", "available_width": "50"}, "return_value": "\" - AssertionError: assert ''\""}, {"func_args": {"format": "' - {}'", "msg": "'AssertionError: None\\nassert False'", "available_width": "75"}, "return_value": "' - AssertionError: None'"}, {"func_args": {"format": "' - {}'", "msg": "'AssertionError: 1\\n\\nGLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_command_prev_post_ok0/pkg_command_test_123/setup.py\\nERROR: No dist directory found. Please check setup.py, e.g with:\\n     python setup.py sdist'", "available_width": "83"}, "return_value": "' - AssertionError: 1'"}, {"func_args": {"format": "' - {}'", "msg": "'AssertionError: 1\\n\\nGLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_tox_env_var_flags_inserte0/env_var_test/setup.py\\nERROR: No dist directory found. Please check setup.py, e.g with:\\n     python setup.py sdist'", "available_width": "64"}, "return_value": "' - AssertionError: 1'"}, {"func_args": {"format": "' - {}'", "msg": "'assert \\'ommand0/pkg_...up.py sdist\\\\n\\' == \\'\\\\npy run-tes...ands failed\\\\n\\'\\n  + ommand0/pkg_command_test_123/setup.py\\n  + ERROR: No dist directory found. Please check setup.py, e.g with:\\n  +      python setup.py sdist\\n  - \\n  - py run-test-pre: commands[0] | python -c \\'raise SystemExit(2)\\'\\n  - ERROR: InvocationError for command /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python -c \\'raise SystemExit(2)\\' (exited with code 2)\\n  - py run-test-post: commands[0] | python -c \\'print(\"post\")\\'...\\n  \\n  ...Full output truncated (4 lines hidden), use \\'-vv\\' to show'", "available_width": "64"}, "return_value": "\" - assert 'ommand0/pkg_...up.py sdist\\\\n' == '\\\\npy run-tes...a...\""}, {"func_args": {"format": "' - {}'", "msg": "'AssertionError: 1\\nTraceback (most recent call last):\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/_pytestplugin.py\", line 132, in run\\n    tox.session.main([str(x) for x in argv])\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/session/__init__.py\", line 69, in main\\n    exit_code = session.runcommand()\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/session/__init__.py\", line 197, in runcommand\\n    return self.subcommand_test()\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/session/__init__.py\", line 213, in subcommand_test\\n    venv.package = self.hook.tox_package(session=self, venv=venv)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/pluggy/_callers.py\", line 60, in _multicall\\n    return outcome.get_result()\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/pluggy/_result.py\", line 60, in get_result\\n    raise ex[1].with_traceback(ex[2])\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\\n    res = hook_impl.function(*args)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/package/__init__.py\", line 16, in tox_package\\n    session.package, session.dist = get_package(session)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/package/__init__.py\", line 29, in get_package\\n    package = acquire_package(config, session)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/package/__init__.py\", line 40, in acquire_package\\n    path = build_package(config, session)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/package/builder/__init__.py\", line 9, in build_package\\n    return build(config, session)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/package/builder/isolated.py\", line 37, in build\\n    build_requires = get_build_requires(build_info, package_venv, config.setupdir)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/package/builder/isolated.py\", line 149, in get_build_requires\\n    return json.loads(result.split(\"\\\\n\")[-2])\\n  File \"/opt/homebrew/opt/python@3.8/Frameworks/Python.framework/Versions/3.8/lib/python3.8/json/__init__.py\", line 357, in loads\\n    return _default_decoder.decode(s)\\n  File \"/opt/homebrew/opt/python@3.8/Frameworks/Python.framework/Versions/3.8/lib/python3.8/json/decoder.py\", line 337, in decode\\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\\n  File \"/opt/homebrew/opt/python@3.8/Frameworks/Python.framework/Versions/3.8/lib/python3.8/json/decoder.py\", line 355, in raw_decode\\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\\n\\n.package create: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_tox_env_var_flags_inserte1/env_var_test/.tox/.package\\n.package installdeps: setuptools >= 35.0.2, setuptools_scm >= 2.0.0, <3\\nWARNING: test command found but not installed in testenv\\n  cmd: /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python\\n  env: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_tox_env_var_flags_inserte1/env_var_test/.tox/.package\\nMaybe you forgot to specify a dependency? See also the allowlist_externals envconfig setting.\\n\\nDEPRECATION WARNING: this will be an error in tox 4 and above!\\nWARNING: test command found but not installed in testenv\\n  cmd: /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python\\n  env: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_tox_env_var_flags_inserte1/env_var_test/.tox/.package\\nMaybe you forgot to specify a dependency? See also the allowlist_externals envconfig setting.\\n\\nDEPRECATION WARNING: this will be an error in tox 4 and above!'", "available_width": "68"}, "return_value": "' - AssertionError: 1'"}, {"func_args": {"format": "' - {}'", "msg": "'SystemExit: 1'", "available_width": "93"}, "return_value": "' - SystemExit: 1'"}, {"func_args": {"format": "' - {}'", "msg": "\"AssertionError: assert not 1\\n +  where 1 = RunResult(ret=1, args=('--sdistonly', '-e', 'py'), out=\\\\nGLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46...g123-foo/setup.py\\\\nERROR: No dist directory found. Please check setup.py, e.g with:\\\\n     python setup.py sdist\\\\n\\\\n, err=\\\\n).ret\"", "available_width": "76"}, "return_value": "' - AssertionError: assert not 1'"}, {"func_args": {"format": "' - {}'", "msg": "\"AssertionError: assert not 1\\n +  where 1 = RunResult(ret=1, args=('-v', '--sdistonly', '-e', 'py'), out=\\\\nusing tox.ini: /private/var/folders/4b/ydf1n0hs33l90gv5l...ox/log/GLOB-0.log\\\\nERROR: No dist directory found. Please check setup.py, e.g with:\\\\n     python setup.py sdist\\\\n\\\\n, err=\\\\n).ret\"", "available_width": "94"}, "return_value": "' - AssertionError: assert not 1'"}, {"func_args": {"format": "' - {}'", "msg": "'AssertionError: 1\\nTraceback (most recent call last):\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/_pytestplugin.py\", line 132, in run\\n    tox.session.main([str(x) for x in argv])\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/session/__init__.py\", line 69, in main\\n    exit_code = session.runcommand()\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/session/__init__.py\", line 197, in runcommand\\n    return self.subcommand_test()\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/session/__init__.py\", line 213, in subcommand_test\\n    venv.package = self.hook.tox_package(session=self, venv=venv)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/pluggy/_callers.py\", line 60, in _multicall\\n    return outcome.get_result()\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/pluggy/_result.py\", line 60, in get_result\\n    raise ex[1].with_traceback(ex[2])\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\\n    res = hook_impl.function(*args)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/package/__init__.py\", line 16, in tox_package\\n    session.package, session.dist = get_package(session)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/package/__init__.py\", line 29, in get_package\\n    package = acquire_package(config, session)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/package/__init__.py\", line 40, in acquire_package\\n    path = build_package(config, session)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/package/builder/__init__.py\", line 9, in build_package\\n    return build(config, session)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/package/builder/isolated.py\", line 37, in build\\n    build_requires = get_build_requires(build_info, package_venv, config.setupdir)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/package/builder/isolated.py\", line 149, in get_build_requires\\n    return json.loads(result.split(\"\\\\n\")[-2])\\n  File \"/opt/homebrew/opt/python@3.8/Frameworks/Python.framework/Versions/3.8/lib/python3.8/json/__init__.py\", line 357, in loads\\n    return _default_decoder.decode(s)\\n  File \"/opt/homebrew/opt/python@3.8/Frameworks/Python.framework/Versions/3.8/lib/python3.8/json/decoder.py\", line 337, in decode\\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\\n  File \"/opt/homebrew/opt/python@3.8/Frameworks/Python.framework/Versions/3.8/lib/python3.8/json/decoder.py\", line 355, in raw_decode\\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\\njson.decoder.JSONDecodeError: Expecting value: line 1 column 2 (char 1)\\n\\nusing tox.ini: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_build_backend_without_sub0/magic/tox.ini (pid 43628)\\nusing tox-3.24.6.dev3+g86a0383c.d20220119 from /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/__init__.py (pid 43628)\\n.package uses /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python\\n.package start: getenv /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_build_backend_without_sub0/magic/.tox/.package\\n.package cannot reuse: no previous config /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_build_backend_without_sub0/magic/.tox/.package/.tox-config1\\n.package create: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_build_backend_without_sub0/magic/.tox/.package\\nsetting PATH=/private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_build_backend_without_sub0/magic/.tox/.package/bin:/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin:/Users/sergeykatkovskiy/yandex-cloud/bin:/opt/homebrew/opt/python@3.8/bin:/opt/homebrew/bin:/opt/homebrew/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/homebrew/bin:/opt/homebrew/bin\\n[43704] /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_build_backend_without_sub0/magic/.tox$ /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python -m virtualenv --no-download --python /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python .package\\n[\\'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python\\', \\'-m\\', \\'pip\\', \\'install\\', \\'--no-deps\\', \\'-U\\', \\'.tox/.tmp/package/1/pkg123-0.1.zip\\']\\nWARNING: test command found but not installed in testenv\\n  cmd: /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python\\n  env: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_build_backend_without_sub0/magic/.tox/.package\\nMaybe you forgot to specify a dependency? See also the allowlist_externals envconfig setting.\\n\\nDEPRECATION WARNING: this will be an error in tox 4 and above!\\n.package finish: getenv /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_build_backend_without_sub0/magic/.tox/.package after 0.13 seconds\\n.package start: finishvenv \\nwrite config to /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_build_backend_without_sub0/magic/.tox/.package/.tox-config1 as \\'e26deb2b33c927b47aa98c79237d94303652650aea6a0923ce9aaee9159e6447 /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python\\\\n3.24.6.dev3+g86a0383c.d20220119 0 0 0\\'\\n.package finish: finishvenv  after 0.00 seconds\\n.package start: get-build-requires /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_build_backend_without_sub0/magic/.tox/.package\\nsetting PATH=/private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_build_backend_without_sub0/magic/.tox/.package/bin:/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin:/Users/sergeykatkovskiy/yandex-cloud/bin:/opt/homebrew/opt/python@3.8/bin:/opt/homebrew/bin:/opt/homebrew/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/homebrew/bin:/opt/homebrew/bin\\n[43705] /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_build_backend_without_sub0/magic$ /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_build_backend_without_sub0/magic/.tox/.package/bin/python /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/helper/build_requires.py inline_backend \\'\\' \\'\\' >.tox/.package/log/.package-0.log'", "available_width": "72"}, "return_value": "' - AssertionError: 1'"}, {"func_args": {"format": "' - {}'", "msg": "'assert 1 == 2\\n +  where 1 = <built-in method count of str object at 0x14c79e000>(\\'graham: commands succeeded\\')\\n +    where <built-in method count of str object at 0x14c79e000> = \"[\\'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python\\', \\'-m\\', \\'pip\\', \\'install\\', \\'--no-deps\\', ...___________________ summary ____________________________________\\\\n  graham: commands succeeded\\\\n  congratulations :)\\\\n\".count\\n +      where \"[\\'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python\\', \\'-m\\', \\'pip\\', \\'install\\', \\'--no-deps\\', ...___________________ summary ____________________________________\\\\n  graham: commands succeeded\\\\n  congratulations :)\\\\n\" = RunResult(ret=0, args=(\\'-p\\', \\'all\\', \\'-o\\'), out=\\\\n[\\'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin...______________ summary ____________________________________\\\\n  graham: commands succeeded\\\\n  congratulations :)\\\\n\\\\n, err=\\\\n).out'", "available_width": "75"}, "return_value": "' - assert 1 == 2'"}, {"func_args": {"format": "' - {}'", "msg": "'AssertionError: 1\\nTraceback (most recent call last):\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/_pytestplugin.py\", line 132, in run\\n    tox.session.main([str(x) for x in argv])\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/session/__init__.py\", line 69, in main\\n    exit_code = session.runcommand()\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/session/__init__.py\", line 197, in runcommand\\n    return self.subcommand_test()\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/session/__init__.py\", line 213, in subcommand_test\\n    venv.package = self.hook.tox_package(session=self, venv=venv)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/pluggy/_callers.py\", line 60, in _multicall\\n    return outcome.get_result()\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/pluggy/_result.py\", line 60, in get_result\\n    raise ex[1].with_traceback(ex[2])\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\\n    res = hook_impl.function(*args)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/package/__init__.py\", line 16, in tox_package\\n    session.package, session.dist = get_package(session)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/package/__init__.py\", line 29, in get_package\\n    package = acquire_package(config, session)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/package/__init__.py\", line 40, in acquire_package\\n    path = build_package(config, session)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/package/builder/__init__.py\", line 9, in build_package\\n    return build(config, session)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/package/builder/isolated.py\", line 37, in build\\n    build_requires = get_build_requires(build_info, package_venv, config.setupdir)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/package/builder/isolated.py\", line 149, in get_build_requires\\n    return json.loads(result.split(\"\\\\n\")[-2])\\n  File \"/opt/homebrew/opt/python@3.8/Frameworks/Python.framework/Versions/3.8/lib/python3.8/json/__init__.py\", line 357, in loads\\n    return _default_decoder.decode(s)\\n  File \"/opt/homebrew/opt/python@3.8/Frameworks/Python.framework/Versions/3.8/lib/python3.8/json/decoder.py\", line 337, in decode\\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\\n  File \"/opt/homebrew/opt/python@3.8/Frameworks/Python.framework/Versions/3.8/lib/python3.8/json/decoder.py\", line 355, in raw_decode\\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\\njson.decoder.JSONDecodeError: Expecting value: line 1 column 2 (char 1)'", "available_width": "52"}, "return_value": "' - AssertionError: 1'"}, {"func_args": {"format": "' - {}'", "msg": "'AssertionError: using tox.ini: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_verbose_isolated_build0/example123/tox.ini (pid 43628)\\n  using tox-3.24.6.dev3+g86a0383c.d20220119 from /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/__init__.py (pid 43628)\\n  .package uses /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python\\n  .package start: getenv /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_verbose_isolated_build0/example123/.tox/.package\\n  .package reusing: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_verbose_isolated_build0/example123/.tox/.package\\n  .package finish: getenv /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_verbose_isolated_build0/example123/.tox/.package after 0.00 seconds\\n  .package start: finishvenv \\n  .package finish: finishvenv  after 0.00 seconds\\n  .package start: get-build-requires /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38\\n  setting PATH=/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin:/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin:/Users/sergeykatkovskiy/yandex-cloud/bin:/opt/homebrew/opt/python@3.8/bin:/opt/homebrew/bin:/opt/homebrew/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/homebrew/bin:/opt/homebrew/bin\\n  [43711] /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_verbose_isolated_build0/example123$ /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/helper/build_requires.py setuptools.build_meta \\'\\' \\'\\' >.tox/.package/log/.package-0.log\\n  \\nassert \\'running sdist\\' in \"using tox.ini: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_verb...b/python3.8/site-packages/tox/helper/build_requires.py setuptools.build_meta \\'\\' \\'\\' >.tox/.package/log/.package-0.log\\\\n\"\\n +  where \"using tox.ini: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_verb...b/python3.8/site-packages/tox/helper/build_requires.py setuptools.build_meta \\'\\' \\'\\' >.tox/.package/log/.package-0.log\\\\n\" = RunResult(ret=1, args=(\\'--sdistonly\\', \\'-v\\', \\'-v\\', \\'-v\\', \\'-e\\', \\'py\\'), out=\\\\nusing tox.ini: /private/var/folders/4b/ydf1n...or(\"Expecting value\", s, err.value) from None\\\\njson.decoder.JSONDecodeError: Expecting value: line 1 column 2 (char 1)\\\\n).out'", "available_width": "56"}, "return_value": "' - AssertionError: using tox.ini: /private/var/folder...'"}, {"func_args": {"format": "' - {}'", "msg": "'AssertionError: using tox.ini: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_isolated_build_backend_mi0/ensconsproj/tox.ini (pid 43628)\\n  using tox-3.24.6.dev3+g86a0383c.d20220119 from /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/__init__.py (pid 43628)\\n  .package uses /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python\\n  .package start: getenv /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_isolated_build_backend_mi0/ensconsproj/.tox/.package\\n  .package cannot reuse: no previous config /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_isolated_build_backend_mi0/ensconsproj/.tox/.package/.tox-config1\\n  .package create: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_isolated_build_backend_mi0/ensconsproj/.tox/.package\\n  setting PATH=/private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_isolated_build_backend_mi0/ensconsproj/.tox/.package/bin:/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin:/Users/sergeykatkovskiy/yandex-cloud/bin:/opt/homebrew/opt/python@3.8/bin:/opt/homebrew/bin:/opt/homebrew/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/homebrew/bin:/opt/homebrew/bin\\n  [43712] /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_isolated_build_backend_mi0/ensconsproj/.tox$ /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python -m virtualenv --no-download --python /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python .package\\n  [\\'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python\\', \\'-m\\', \\'pip\\', \\'install\\', \\'--no-deps\\', \\'-U\\', \\'.tox/.tmp/package/1/pkg123-0.1.zip\\']\\n  .package installdeps: pytoml>=0.1, enscons==0.26.0\\n  setting PATH=/private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_isolated_build_backend_mi0/ensconsproj/.tox/.package/bin:/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin:/Users/sergeykatkovskiy/yandex-cloud/bin:/opt/homebrew/opt/python@3.8/bin:/opt/homebrew/bin:/opt/homebrew/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/homebrew/bin:/opt/homebrew/bin\\n  WARNING: test command found but not installed in testenv\\n    cmd: /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python\\n    env: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_isolated_build_backend_mi0/ensconsproj/.tox/.package\\n  Maybe you forgot to specify a dependency? See also the allowlist_externals envconfig setting.\\n  \\n  DEPRECATION WARNING: this will be an error in tox 4 and above!\\n  [43713] /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_isolated_build_backend_mi0/ensconsproj$ /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python -m pip install \\'pytoml>=0.1\\' enscons==0.26.0\\n  [\\'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python\\', \\'-m\\', \\'pip\\', \\'install\\', \\'--no-deps\\', \\'-U\\', \\'.tox/.tmp/package/1/pkg123-0.1.zip\\']\\n  WARNING: test command found but not installed in testenv\\n    cmd: /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python\\n    env: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_isolated_build_backend_mi0/ensconsproj/.tox/.package\\n  Maybe you forgot to specify a dependency? See also the allowlist_externals envconfig setting.\\n  \\n  DEPRECATION WARNING: this will be an error in tox 4 and above!\\n  .package finish: getenv /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_isolated_build_backend_mi0/ensconsproj/.tox/.package after 0.25 seconds\\n  .package start: finishvenv \\n  write config to /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_isolated_build_backend_mi0/ensconsproj/.tox/.package/.tox-config1 as \\'e26deb2b33c927b47aa98c79237d94303652650aea6a0923ce9aaee9159e6447 /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python\\\\n3.24.6.dev3+g86a0383c.d20220119 0 0 0\\\\n00000000000000000000000000000000 pytoml>=0.1\\\\n00000000000000000000000000000000 enscons==0.26.0\\'\\n  .package finish: finishvenv  after 0.00 seconds\\n  .package start: get-build-requires /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_isolated_build_backend_mi0/ensconsproj/.tox/.package\\n  setting PATH=/private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_isolated_build_backend_mi0/ensconsproj/.tox/.package/bin:/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin:/Users/sergeykatkovskiy/yandex-cloud/bin:/opt/homebrew/opt/python@3.8/bin:/opt/homebrew/bin:/opt/homebrew/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/homebrew/bin:/opt/homebrew/bin\\n  [43714] /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_isolated_build_backend_mi0/ensconsproj$ /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_isolated_build_backend_mi0/ensconsproj/.tox/.package/bin/python /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/helper/build_requires.py enscons.api \\'\\' \\'\\' >.tox/.package/log/.package-0.log\\n  \\nassert \\'scons: done building targets\\' in \"using tox.ini: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_isol...ox/py38/lib/python3.8/site-packages/tox/helper/build_requires.py enscons.api \\'\\' \\'\\' >.tox/.package/log/.package-0.log\\\\n\"\\n +  where \"using tox.ini: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_isol...ox/py38/lib/python3.8/site-packages/tox/helper/build_requires.py enscons.api \\'\\' \\'\\' >.tox/.package/log/.package-0.log\\\\n\" = RunResult(ret=1, args=(\\'--sdistonly\\', \\'-v\\', \\'-v\\', \\'-e\\', \\'py\\'), out=\\\\nusing tox.ini: /private/var/folders/4b/ydf1n0hs33l...or(\"Expecting value\", s, err.value) from None\\\\njson.decoder.JSONDecodeError: Expecting value: line 1 column 2 (char 1)\\\\n).out'", "available_width": "43"}, "return_value": "' - AssertionError: using tox.ini: /priva...'"}, {"func_args": {"format": "' - {}'", "msg": "'AssertionError: using tox.ini: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_verbose_isolated_build_in0/example123/tox.ini (pid 43628)\\n  using tox-3.24.6.dev3+g86a0383c.d20220119 from /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/__init__.py (pid 43628)\\n  .package uses /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python\\n  .package start: getenv /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_verbose_isolated_build_in0/example123/.tox/.package\\n  .package reusing: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_verbose_isolated_build_in0/example123/.tox/.package\\n  .package finish: getenv /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_verbose_isolated_build_in0/example123/.tox/.package after 0.00 seconds\\n  .package start: finishvenv \\n  .package finish: finishvenv  after 0.00 seconds\\n  .package start: get-build-requires /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38\\n  setting PATH=/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin:/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin:/Users/sergeykatkovskiy/yandex-cloud/bin:/opt/homebrew/opt/python@3.8/bin:/opt/homebrew/bin:/opt/homebrew/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/homebrew/bin:/opt/homebrew/bin\\n  [43715] /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_verbose_isolated_build_in0/example123$ /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/helper/build_requires.py build \\'\\' . >.tox/.package/log/.package-0.log\\n  \\nassert \\'running sdist\\' in \"using tox.ini: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_verb.../tox/.tox/py38/lib/python3.8/site-packages/tox/helper/build_requires.py build \\'\\' . >.tox/.package/log/.package-0.log\\\\n\"\\n +  where \"using tox.ini: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_verb.../tox/.tox/py38/lib/python3.8/site-packages/tox/helper/build_requires.py build \\'\\' . >.tox/.package/log/.package-0.log\\\\n\" = RunResult(ret=1, args=(\\'--sdistonly\\', \\'-v\\', \\'-v\\', \\'-v\\', \\'-e\\', \\'py\\'), out=\\\\nusing tox.ini: /private/var/folders/4b/ydf1n...or(\"Expecting value\", s, err.value) from None\\\\njson.decoder.JSONDecodeError: Expecting value: line 1 column 2 (char 1)\\\\n).out'", "available_width": "48"}, "return_value": "' - AssertionError: using tox.ini: /private/va...'"}, {"func_args": {"format": "' - {}'", "msg": "'AssertionError: 1\\nTraceback (most recent call last):\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/_pytestplugin.py\", line 132, in run\\n    tox.session.main([str(x) for x in argv])\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/session/__init__.py\", line 69, in main\\n    exit_code = session.runcommand()\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/session/__init__.py\", line 197, in runcommand\\n    return self.subcommand_test()\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/session/__init__.py\", line 213, in subcommand_test\\n    venv.package = self.hook.tox_package(session=self, venv=venv)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/pluggy/_callers.py\", line 60, in _multicall\\n    return outcome.get_result()\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/pluggy/_result.py\", line 60, in get_result\\n    raise ex[1].with_traceback(ex[2])\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\\n    res = hook_impl.function(*args)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/package/__init__.py\", line 16, in tox_package\\n    session.package, session.dist = get_package(session)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/package/__init__.py\", line 29, in get_package\\n    package = acquire_package(config, session)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/package/__init__.py\", line 40, in acquire_package\\n    path = build_package(config, session)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/package/builder/__init__.py\", line 9, in build_package\\n    return build(config, session)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/package/builder/isolated.py\", line 37, in build\\n    build_requires = get_build_requires(build_info, package_venv, config.setupdir)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/package/builder/isolated.py\", line 149, in get_build_requires\\n    return json.loads(result.split(\"\\\\n\")[-2])\\n  File \"/opt/homebrew/opt/python@3.8/Frameworks/Python.framework/Versions/3.8/lib/python3.8/json/__init__.py\", line 357, in loads\\n    return _default_decoder.decode(s)\\n  File \"/opt/homebrew/opt/python@3.8/Frameworks/Python.framework/Versions/3.8/lib/python3.8/json/decoder.py\", line 337, in decode\\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\\n  File \"/opt/homebrew/opt/python@3.8/Frameworks/Python.framework/Versions/3.8/lib/python3.8/json/decoder.py\", line 355, in raw_decode\\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\\njson.decoder.JSONDecodeError: Expecting value: line 1 column 2 (char 1)\\n\\n.package create: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_parallel_live2/pkg123/.tox/.package\\n.package installdeps: setuptools >= 35.0.2\\nWARNING: test command found but not installed in testenv\\n  cmd: /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python\\n  env: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_parallel_live2/pkg123/.tox/.package\\nMaybe you forgot to specify a dependency? See also the allowlist_externals envconfig setting.\\n\\nDEPRECATION WARNING: this will be an error in tox 4 and above!\\nWARNING: test command found but not installed in testenv\\n  cmd: /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python\\n  env: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_parallel_live2/pkg123/.tox/.package\\nMaybe you forgot to specify a dependency? See also the allowlist_externals envconfig setting.\\n\\nDEPRECATION WARNING: this will be an error in tox 4 and above!'", "available_width": "89"}, "return_value": "' - AssertionError: 1'"}, {"func_args": {"format": "' - {}'", "msg": "'AssertionError: 1\\nTraceback (most recent call last):\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/_pytestplugin.py\", line 132, in run\\n    tox.session.main([str(x) for x in argv])\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/session/__init__.py\", line 69, in main\\n    exit_code = session.runcommand()\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/session/__init__.py\", line 197, in runcommand\\n    return self.subcommand_test()\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/session/__init__.py\", line 227, in subcommand_test\\n    retcode = self._summary()\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/session/__init__.py\", line 288, in _summary\\n    self._add_parallel_summaries()\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/session/__init__.py\", line 234, in _add_parallel_summaries\\n    data = self._load_parallel_env_report(tox_env)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/session/__init__.py\", line 244, in _load_parallel_env_report\\n    data = json.load(file_handler)\\n  File \"/opt/homebrew/opt/python@3.8/Frameworks/Python.framework/Versions/3.8/lib/python3.8/json/__init__.py\", line 293, in load\\n    return loads(fp.read(),\\n  File \"/opt/homebrew/opt/python@3.8/Frameworks/Python.framework/Versions/3.8/lib/python3.8/json/__init__.py\", line 357, in loads\\n    return _default_decoder.decode(s)\\n  File \"/opt/homebrew/opt/python@3.8/Frameworks/Python.framework/Versions/3.8/lib/python3.8/json/decoder.py\", line 337, in decode\\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\\n  File \"/opt/homebrew/opt/python@3.8/Frameworks/Python.framework/Versions/3.8/lib/python3.8/json/decoder.py\", line 355, in raw_decode\\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\\n\\n\\r\\x1b[K\\r\u280b [0] \\r\\x1b[K\\r\u2819 [2] a | b\\r\\x1b[K\u2714 OK a in 0.144 seconds\\n\\r\\x1b[K\u2714 OK b in 0.149 seconds\\n\\r\\x1b[K___________________________________ summary ____________________________________\\n  a: commands succeeded\\n  b: commands succeeded\\n  congratulations :)'", "available_width": "82"}, "return_value": "' - AssertionError: 1'"}, {"func_args": {"format": "' - {}'", "msg": "'AssertionError: 1\\nTraceback (most recent call last):\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/_pytestplugin.py\", line 132, in run\\n    tox.session.main([str(x) for x in argv])\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/session/__init__.py\", line 69, in main\\n    exit_code = session.runcommand()\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/session/__init__.py\", line 197, in runcommand\\n    return self.subcommand_test()\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/session/__init__.py\", line 213, in subcommand_test\\n    venv.package = self.hook.tox_package(session=self, venv=venv)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/pluggy/_callers.py\", line 60, in _multicall\\n    return outcome.get_result()\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/pluggy/_result.py\", line 60, in get_result\\n    raise ex[1].with_traceback(ex[2])\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\\n    res = hook_impl.function(*args)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/package/__init__.py\", line 16, in tox_package\\n    session.package, session.dist = get_package(session)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/package/__init__.py\", line 29, in get_package\\n    package = acquire_package(config, session)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/package/__init__.py\", line 40, in acquire_package\\n    path = build_package(config, session)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/package/builder/__init__.py\", line 9, in build_package\\n    return build(config, session)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/package/builder/isolated.py\", line 37, in build\\n    build_requires = get_build_requires(build_info, package_venv, config.setupdir)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/package/builder/isolated.py\", line 149, in get_build_requires\\n    return json.loads(result.split(\"\\\\n\")[-2])\\n  File \"/opt/homebrew/opt/python@3.8/Frameworks/Python.framework/Versions/3.8/lib/python3.8/json/__init__.py\", line 357, in loads\\n    return _default_decoder.decode(s)\\n  File \"/opt/homebrew/opt/python@3.8/Frameworks/Python.framework/Versions/3.8/lib/python3.8/json/decoder.py\", line 337, in decode\\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\\n  File \"/opt/homebrew/opt/python@3.8/Frameworks/Python.framework/Versions/3.8/lib/python3.8/json/decoder.py\", line 355, in raw_decode\\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\\njson.decoder.JSONDecodeError: Expecting value: line 1 column 2 (char 1)\\n\\n.package create: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_parallel0/pkg123/.tox/.package\\n.package installdeps: setuptools >= 35.0.2\\nWARNING: test command found but not installed in testenv\\n  cmd: /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python\\n  env: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_parallel0/pkg123/.tox/.package\\nMaybe you forgot to specify a dependency? See also the allowlist_externals envconfig setting.\\n\\nDEPRECATION WARNING: this will be an error in tox 4 and above!\\nWARNING: test command found but not installed in testenv\\n  cmd: /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python\\n  env: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_parallel0/pkg123/.tox/.package\\nMaybe you forgot to specify a dependency? See also the allowlist_externals envconfig setting.\\n\\nDEPRECATION WARNING: this will be an error in tox 4 and above!'", "available_width": "94"}, "return_value": "' - AssertionError: 1'"}, {"func_args": {"format": "' - {}'", "msg": "\"AssertionError: 0\\n\\n['/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python', '-m', 'pip', 'install', '--no-deps', '-U', '.tox/.tmp/package/1/pkg123-0.1.zip']\\n\u2714 OK a in 0.135 seconds\\n___________________________________ summary ____________________________________\\n  a: commands succeeded\\n  congratulations :)\"", "available_width": "75"}, "return_value": "' - AssertionError: 0'"}, {"func_args": {"format": "' - {}'", "msg": "\"AssertionError: assert False\\n +  where False = <bound method Path.exists of PosixPath('/private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_parallel_result_json_conc0/parallel1.json')>()\\n +    where <bound method Path.exists of PosixPath('/private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_parallel_result_json_conc0/parallel1.json')> = PosixPath('/private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_parallel_result_json_conc0/parallel1.json').exists\"", "available_width": "71"}, "return_value": "' - AssertionError: assert False'"}, {"func_args": {"format": "' - {}'", "msg": "'AssertionError: 0\\n\\n\\r\\x1b[K\\r\u280b [0] \\r\\x1b[K\\r\u2819 [1] a\\r\\x1b[K\u2714 OK a in 0.151 seconds\\n\\r\\x1b[K___________________________________ summary ____________________________________\\n  a: commands succeeded\\n  congratulations :)'", "available_width": "74"}, "return_value": "' - AssertionError: 0'"}, {"func_args": {"format": "' - {}'", "msg": "'AssertionError: 0\\n  \\n  \\r\\x1b[K\\r\u280b [0] \\r\\x1b[K\\r\u2819 [3] e1 | e2 | e3\\r\\x1b[K\u2714 OK e1 in 0.15 seconds\\n  \\r\\x1b[K\u2714 OK e3 in 0.148 seconds\\n  [\\'/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python\\', \\'-m\\', \\'pip\\', \\'install\\', \\'--no-deps\\', \\'-U\\', \\'.tox/.tmp/package/1/pkg123-0.1.zip\\']\\n  \\n  \\r\\x1b[K\u2714 OK e2 in 0.156 seconds\\n  \\r\\x1b[K___________________________________ summary ____________________________________\\n    e1: commands succeeded\\n    e2: commands succeeded\\n    e3: commands succeeded\\n    congratulations :)\\n  \\nassert \\'stdout always\\' in \"\\\\r\\\\x1b[K\\\\r\u280b [0] \\\\r\\\\x1b[K\\\\r\u2819 [3] e1 | e2 | e3\\\\r\\\\x1b[K\u2714 OK e1 in 0.15 seconds\\\\n\\\\r\\\\x1b[K\u2714 OK e3 in 0.148 seconds\\\\n[\\'/Use...________________\\\\n  e1: commands succeeded\\\\n  e2: commands succeeded\\\\n  e3: commands succeeded\\\\n  congratulations :)\\\\n\"\\n +  where \"\\\\r\\\\x1b[K\\\\r\u280b [0] \\\\r\\\\x1b[K\\\\r\u2819 [3] e1 | e2 | e3\\\\r\\\\x1b[K\u2714 OK e1 in 0.15 seconds\\\\n\\\\r\\\\x1b[K\u2714 OK e3 in 0.148 seconds\\\\n[\\'/Use...________________\\\\n  e1: commands succeeded\\\\n  e2: commands succeeded\\\\n  e3: commands succeeded\\\\n  congratulations :)\\\\n\" = RunResult(ret=0, args=(\\'-p\\', \\'all\\'), out=\\\\n\\r\\x1b[K\\r\u280b [0] \\r\\x1b[K\\r\u2819 [3] e1 | e2 | e3\\r\\x1b[K\u2714 OK e1 in 0.15 seconds\\\\n\\r\\x1b[K\u2714 OK e3 in..._____________\\\\n  e1: commands succeeded\\\\n  e2: commands succeeded\\\\n  e3: commands succeeded\\\\n  congratulations :)\\\\n\\\\n, err=\\\\n).out'", "available_width": "82"}, "return_value": "' - AssertionError: 0'"}, {"func_args": {"format": "' - {}'", "msg": "\"AssertionError: \\n  t1=\\n  using tox.ini: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_tox_parallel_build_safe2/env_var_test/tox.ini (pid 43628)\\n  using tox-3.24.6.dev3+g86a0383c.d20220119 from /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/__init__.py (pid 43628)\\n  using tox.ini: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_tox_parallel_build_safe2/env_var_test/tox.ini (pid 43628)\\n    removing /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_tox_parallel_build_safe2/env_var_test/.tox/log\\n  using tox-3.24.6.dev3+g86a0383c.d20220119 from /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/__init__.py (pid 43628)\\n  lock file /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_tox_parallel_build_safe2/env_var_test/.tox/.package.lock present, will block until released\\n  GLOB start: packaging \\n  GLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_tox_parallel_build_safe2/env_var_test/setup.py\\n  [43770] /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_tox_parallel_build_safe2/env_var_test$ /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python setup.py sdist --formats=zip --dist-dir /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_tox_parallel_build_safe2/env_var_test/.tox/dist >.tox/log/GLOB-0.log\\n  ['/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python', '-m', 'pip', 'install', '--no-deps', '-U', '.tox/.tmp/package/1/pkg123-0.1.zip']\\n  \\n  ERROR: No dist directory found. Please check setup.py, e.g with:\\n       python setup.py sdist\\n  t2=\\n  GLOB start: packaging \\n  GLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_tox_parallel_build_safe2/env_var_test/setup.py\\n  [43771] /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_tox_parallel_build_safe2/env_var_test$ /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python setup.py sdist --formats=zip --dist-dir /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_tox_parallel_build_safe2/env_var_test/.tox/dist >.tox/log/GLOB-1.log\\n  ['/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python', '-m', 'pip', 'install', '--no-deps', '-U', '.tox/.tmp/package/1/pkg123-0.1.zip']\\n  \\n  ERROR: No dist directory found. Please check setup.py, e.g with:\\n       python setup.py sdist\\nassert not 1\\n +  where 1 = RunResult(ret=1, args=('--parallel--safe-build', '-vv'), out=\\\\nusing tox.ini: /private/var/folders/4b/ydf1n0hs33l90gv5l...pkg123-0.1.zip']\\\\n\\\\nERROR: No dist directory found. Please check setup.py, e.g with:\\\\n     python setup.py sdist\\\\n\\\\n, err=\\\\n).ret\"", "available_width": "71"}, "return_value": "' - AssertionError: '"}, {"func_args": {"format": "' - {}'", "msg": "\"AssertionError: 0\\n\\nusing tox.ini: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_provision_from_pyvenv0/pkg123/tox.ini (pid 43628)\\ncould not satisfy requires MissingDependency(<Requirement('setuptools==40.6.3')>)\\nusing tox-3.24.6.dev3+g86a0383c.d20220119 from /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/__init__.py (pid 43628)\\n.tox uses /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python\\n.tox start: getenv /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_provision_from_pyvenv0/pkg123/.tox/.tox\\n.tox cannot reuse: no previous config /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_provision_from_pyvenv0/pkg123/.tox/.tox/.tox-config1\\n.tox create: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_provision_from_pyvenv0/pkg123/.tox/.tox\\nsetting PATH=/private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_provision_from_pyvenv0/pkg123/.tox/.tox/bin:/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin:/Users/sergeykatkovskiy/yandex-cloud/bin:/opt/homebrew/opt/python@3.8/bin:/opt/homebrew/bin:/opt/homebrew/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/homebrew/bin:/opt/homebrew/bin\\n[43788] /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_provision_from_pyvenv0/pkg123/.tox$ /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python -m virtualenv --no-download --python /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python .tox\\nall\\n.tox installdeps: setuptools == 40.6.3, tox >= 3.7.0\\nsetting PATH=/private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_provision_from_pyvenv0/pkg123/.tox/.tox/bin:/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin:/Users/sergeykatkovskiy/yandex-cloud/bin:/opt/homebrew/opt/python@3.8/bin:/opt/homebrew/bin:/opt/homebrew/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/homebrew/bin:/opt/homebrew/bin\\nWARNING: test command found but not installed in testenv\\n  cmd: /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python\\n  env: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_provision_from_pyvenv0/pkg123/.tox/.tox\\nMaybe you forgot to specify a dependency? See also the allowlist_externals envconfig setting.\\n\\nDEPRECATION WARNING: this will be an error in tox 4 and above!\\n[43789] /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_provision_from_pyvenv0/pkg123$ /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python -m pip install 'setuptools == 40.6.3' 'tox >= 3.7.0'\\nall\\nWARNING: test command found but not installed in testenv\\n  cmd: /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python\\n  env: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_provision_from_pyvenv0/pkg123/.tox/.tox\\nMaybe you forgot to specify a dependency? See also the allowlist_externals envconfig setting.\\n\\nDEPRECATION WARNING: this will be an error in tox 4 and above!\\n.tox finish: getenv /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_provision_from_pyvenv0/pkg123/.tox/.tox after 0.26 seconds\\n.tox start: finishvenv \\nwrite config to /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_provision_from_pyvenv0/pkg123/.tox/.tox/.tox-config1 as 'e26deb2b33c927b47aa98c79237d94303652650aea6a0923ce9aaee9159e6447 /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python\\\\n3.24.6.dev3+g86a0383c.d20220119 0 0 0\\\\n00000000000000000000000000000000 setuptools == 40.6.3\\\\n00000000000000000000000000000000 tox >= 3.7.0'\\n.tox finish: finishvenv  after 0.00 seconds\\n.tox start: provision \\n[43790] /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_provision_from_pyvenv0/pkg123$ /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_provision_from_pyvenv0/pkg123/.tox/.tox/bin/python -m tox -e py -vv\\nall\\n.tox finish: provision  after 0.13 seconds\"", "available_width": "77"}, "return_value": "' - AssertionError: 0'"}, {"func_args": {"format": "' - {}'", "msg": "'AssertionError: None\\nassert False'", "available_width": "57"}, "return_value": "' - AssertionError: None'"}, {"func_args": {"format": "' - {}'", "msg": "'AssertionError: None\\nassert False'", "available_width": "56"}, "return_value": "' - AssertionError: None'"}, {"func_args": {"format": "' - {}'", "msg": "'AssertionError: 0\\n\\n.tox create: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_provision_missing0/pkg123/.tox/.tox\\n.tox installdeps: setuptools == 40.6.3, tox >= 3.7.0\\nWARNING: test command found but not installed in testenv\\n  cmd: /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python\\n  env: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_provision_missing0/pkg123/.tox/.tox\\nMaybe you forgot to specify a dependency? See also the allowlist_externals envconfig setting.\\n\\nDEPRECATION WARNING: this will be an error in tox 4 and above!\\nWARNING: test command found but not installed in testenv\\n  cmd: /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python\\n  env: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_provision_missing0/pkg123/.tox/.tox\\nMaybe you forgot to specify a dependency? See also the allowlist_externals envconfig setting.\\n\\nDEPRECATION WARNING: this will be an error in tox 4 and above!\\nall'", "available_width": "81"}, "return_value": "' - AssertionError: 0'"}, {"func_args": {"format": "' - {}'", "msg": "\"AssertionError: assert False\\n +  where False = <built-in method startswith of str object at 0x1140d3b70>('ERROR:   python: could not install deps [qweqwe123];')\\n +    where <built-in method startswith of str object at 0x1140d3b70> = '     python setup.py sdist'.startswith\"", "available_width": "98"}, "return_value": "' - AssertionError: assert False'"}, {"func_args": {"format": "' - {}'", "msg": "\"AssertionError: assert 0 == 1\\n +  where 0 = <function exit_code_str at 0x113e659d0>.call_count\\n +    where <function exit_code_str at 0x113e659d0> = <module 'tox.exception' from '/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/exception.py'>.exit_code_str\\n +      where <module 'tox.exception' from '/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/exception.py'> = <module 'tox' from '/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/__init__.py'>.exception\"", "available_width": "97"}, "return_value": "' - AssertionError: assert 0 == 1'"}, {"func_args": {"format": "' - {}'", "msg": "\"AssertionError: ['GLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_s...ls0/pkg123/setup.py', 'ERROR: No dist directory found. Please check setup.py, e.g with:', '     python setup.py sdist']\\nassert False\\n +  where False = any(<generator object test_sdist_fails.<locals>.<genexpr> at 0x116a33c80>)\"", "available_width": "98"}, "return_value": "\" - AssertionError: ['GLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/...\""}, {"func_args": {"format": "' - {}'", "msg": "'AssertionError: 1\\n\\nusing tox.ini: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_test_piphelp0/example123/tox.ini (pid 43628)\\nusing tox-3.24.6.dev3+g86a0383c.d20220119 from /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/__init__.py (pid 43628)\\nGLOB start: packaging \\nGLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_test_piphelp0/example123/setup.py\\n[43804] /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_test_piphelp0/example123$ /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python setup.py sdist --formats=zip --dist-dir /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_test_piphelp0/example123/.tox/dist >.tox/log/GLOB-0.log\\nall\\n\\nERROR: No dist directory found. Please check setup.py, e.g with:\\n     python setup.py sdist'", "available_width": "97"}, "return_value": "' - AssertionError: 1'"}, {"func_args": {"format": "' - {}'", "msg": "'AssertionError: 1\\n\\nGLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_skip_unknown_interpreter0/interp123/setup.py\\nERROR: No dist directory found. Please check setup.py, e.g with:\\n     python setup.py sdist'", "available_width": "85"}, "return_value": "' - AssertionError: 1'"}, {"func_args": {"format": "' - {}'", "msg": "'AssertionError: 1\\n\\nusing tox.ini: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_verbosity__v_0/pkgX/tox.ini (pid 43628)\\nusing tox-3.24.6.dev3+g86a0383c.d20220119 from /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/__init__.py (pid 43628)\\nGLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_verbosity__v_0/pkgX/setup.py\\n[43806] /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_verbosity__v_0/pkgX$ /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python setup.py sdist --formats=zip --dist-dir /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_verbosity__v_0/pkgX/.tox/dist >.tox/log/GLOB-0.log\\nERROR: No dist directory found. Please check setup.py, e.g with:\\n     python setup.py sdist'", "available_width": "96"}, "return_value": "' - AssertionError: 1'"}, {"func_args": {"format": "' - {}'", "msg": "'AssertionError: 1\\n\\nGLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_toxuone_env0/example123/setup.py\\nERROR: No dist directory found. Please check setup.py, e.g with:\\n     python setup.py sdist'", "available_width": "98"}, "return_value": "' - AssertionError: 1'"}, {"func_args": {"format": "' - {}'", "msg": "\"AssertionError: assert 'develop-inst-noop' in 'WARNING: test command found but not installed in testenv\\\\n  cmd: /Users/sergeykatkovskiy/dataset-builder/test_repos/t...___________________ summary ____________________________________\\\\n  python: commands succeeded\\\\n  congratulations :)\\\\n'\\n +  where 'WARNING: test command found but not installed in testenv\\\\n  cmd: /Users/sergeykatkovskiy/dataset-builder/test_repos/t...___________________ summary ____________________________________\\\\n  python: commands succeeded\\\\n  congratulations :)\\\\n' = RunResult(ret=0, args=('-epython',), out=\\\\nWARNING: test command found but not installed in testenv\\\\n  cmd: /Users/serge...______________ summary ____________________________________\\\\n  python: commands succeeded\\\\n  congratulations :)\\\\n\\\\n, err=\\\\n).out\"", "available_width": "83"}, "return_value": "\" - AssertionError: assert 'develop-inst-noop' in 'WARNING: test command found bu...\""}, {"func_args": {"format": "' - {}'", "msg": "'AssertionError: 1\\n\\nGLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_different_config_cwd0/example123/setup.py\\nERROR: No dist directory found. Please check setup.py, e.g with:\\n     python setup.py sdist'", "available_width": "89"}, "return_value": "' - AssertionError: 1'"}, {"func_args": {"format": "' - {}'", "msg": "'assert False\\n +  where False = <built-in method endswith of str object at 0x115d965d0>(\"foo: unresolvable substitution(s):\\\\n    commands: \\'VAR\\'\\\\n    install_command: \\'FOO\\'\\\\nEnvironment variables are missing or defined recursively.\\\\n\")\\n +    where <built-in method endswith of str object at 0x115d965d0> = \\'GLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_mi...nv_fails0/foo/setup.py\\\\nERROR: No dist directory found. Please check setup.py, e.g with:\\\\n     python setup.py sdist\\\\n\\'.endswith\\n +      where \\'GLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_mi...nv_fails0/foo/setup.py\\\\nERROR: No dist directory found. Please check setup.py, e.g with:\\\\n     python setup.py sdist\\\\n\\' = RunResult(ret=1, args=(), out=\\\\nGLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-ser...ils0/foo/setup.py\\\\nERROR: No dist directory found. Please check setup.py, e.g with:\\\\n     python setup.py sdist\\\\n\\\\n, err=\\\\n).out'", "available_width": "92"}, "return_value": "' - assert False'"}, {"func_args": {"format": "' - {}'", "msg": "'AssertionError: 1\\n\\nusing tox.ini: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_verbosity__vv_0/pkgX/tox.ini (pid 43628)\\nusing tox-3.24.6.dev3+g86a0383c.d20220119 from /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/__init__.py (pid 43628)\\nGLOB start: packaging \\nGLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_verbosity__vv_0/pkgX/setup.py\\n[43829] /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_verbosity__vv_0/pkgX$ /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python setup.py sdist --formats=zip --dist-dir /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_verbosity__vv_0/pkgX/.tox/dist >.tox/log/GLOB-0.log\\n[\"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin\", \"/opt/homebrew/opt/python@3.8/Frameworks/Python.framework/Versions/3.8/lib/python38.zip\", \"/opt/homebrew/opt/python@3.8/Frameworks/Python.framework/Versions/3.8/lib/python3.8\", \"/opt/homebrew/opt/python@3.8/Frameworks/Python.framework/Versions/3.8/lib/python3.8/lib-dynload\", \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages\"]\\n\\nERROR: No dist directory found. Please check setup.py, e.g with:\\n     python setup.py sdist'", "available_width": "95"}, "return_value": "' - AssertionError: 1'"}, {"func_args": {"format": "' - {}'", "msg": "'AssertionError: 1\\n\\nusing tox.ini: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_alwayscopy_default0/example123/tox.ini (pid 43628)\\npython uses /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python\\nusing tox-3.24.6.dev3+g86a0383c.d20220119 from /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/__init__.py (pid 43628)\\nGLOB start: packaging \\nGLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_alwayscopy_default0/example123/setup.py\\n[43830] /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_alwayscopy_default0/example123$ /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python setup.py sdist --formats=zip --dist-dir /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_alwayscopy_default0/example123/.tox/dist >.tox/log/GLOB-0.log\\n[\"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin\", \"/opt/homebrew/opt/python@3.8/Frameworks/Python.framework/Versions/3.8/lib/python38.zip\", \"/opt/homebrew/opt/python@3.8/Frameworks/Python.framework/Versions/3.8/lib/python3.8\", \"/opt/homebrew/opt/python@3.8/Frameworks/Python.framework/Versions/3.8/lib/python3.8/lib-dynload\", \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages\"]\\n\\nERROR: No dist directory found. Please check setup.py, e.g with:\\n     python setup.py sdist'", "available_width": "91"}, "return_value": "' - AssertionError: 1'"}, {"func_args": {"format": "' - {}'", "msg": "\"py.error.ENOENT: [No such file or directory]: open('/private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_result_json0/example123/res.json', 'r')\"", "available_width": "98"}, "return_value": "\" - py.error.ENOENT: [No such file or directory]: open('/private/var/folders/4b/ydf1n0hs33l90gv5...\""}, {"func_args": {"format": "' - {}'", "msg": "'AssertionError: 1\\n\\nGLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_setup_prints_non_ascii0/example123/setup.py\\nERROR: No dist directory found. Please check setup.py, e.g with:\\n     python setup.py sdist'", "available_width": "87"}, "return_value": "' - AssertionError: 1'"}, {"func_args": {"format": "' - {}'", "msg": "'AssertionError: 1\\n\\nusing tox.ini: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_PYC0/example123/tox.ini (pid 43628)\\nusing tox-3.24.6.dev3+g86a0383c.d20220119 from /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/__init__.py (pid 43628)\\nGLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_PYC0/example123/setup.py\\n[43834] /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_PYC0/example123$ /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python setup.py sdist --formats=zip --dist-dir /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_PYC0/example123/.tox/dist >.tox/log/GLOB-0.log\\nERROR: No dist directory found. Please check setup.py, e.g with:\\n     python setup.py sdist'", "available_width": "106"}, "return_value": "' - AssertionError: 1'"}, {"func_args": {"format": "' - {}'", "msg": "\"AssertionError: assert 'cowardly refusing to delete `envdir`' in 'GLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_en...ome_0/example/setup.py\\\\nERROR: No dist directory found. Please check setup.py, e.g with:\\\\n     python setup.py sdist\\\\n'\\n +  where 'GLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_en...ome_0/example/setup.py\\\\nERROR: No dist directory found. Please check setup.py, e.g with:\\\\n     python setup.py sdist\\\\n' = RunResult(ret=1, args=('-e', 'venv'), out=\\\\nGLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/p.../example/setup.py\\\\nERROR: No dist directory found. Please check setup.py, e.g with:\\\\n     python setup.py sdist\\\\n\\\\n, err=\\\\n).out\"", "available_width": "75"}, "return_value": "\" - AssertionError: assert 'cowardly refusing to delete `envdir`' in 'GLO...\""}, {"func_args": {"format": "' - {}'", "msg": "'AssertionError: 1\\n\\nGLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_skip_platform_mismatch0/interp123/setup.py\\nERROR: No dist directory found. Please check setup.py, e.g with:\\n     python setup.py sdist'", "available_width": "87"}, "return_value": "' - AssertionError: 1'"}, {"func_args": {"format": "' - {}'", "msg": "'AssertionError: 1\\n\\nGLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_envtmpdir0/foo/setup.py\\nERROR: No dist directory found. Please check setup.py, e.g with:\\n     python setup.py sdist'", "available_width": "100"}, "return_value": "' - AssertionError: 1'"}, {"func_args": {"format": "' - {}'", "msg": "\"AssertionError: assert 'develop-inst-noop' in 'WARNING: test command found but not installed in testenv\\\\n  cmd: /Users/sergeykatkovskiy/dataset-builder/test_repos/t...___________________ summary ____________________________________\\\\n  python: commands succeeded\\\\n  congratulations :)\\\\n'\\n +  where 'WARNING: test command found but not installed in testenv\\\\n  cmd: /Users/sergeykatkovskiy/dataset-builder/test_repos/t...___________________ summary ____________________________________\\\\n  python: commands succeeded\\\\n  congratulations :)\\\\n' = RunResult(ret=0, args=(), out=\\\\nWARNING: test command found but not installed in testenv\\\\n  cmd: /Users/sergeykatkovskiy...______________ summary ____________________________________\\\\n  python: commands succeeded\\\\n  congratulations :)\\\\n\\\\n, err=\\\\n).out\"", "available_width": "94"}, "return_value": "\" - AssertionError: assert 'develop-inst-noop' in 'WARNING: test command found but not insta...\""}, {"func_args": {"format": "' - {}'", "msg": "\"AssertionError: assert 'develop-inst-noop' in 'WARNING: test command found but not installed in testenv\\\\n  cmd: /Users/sergeykatkovskiy/dataset-builder/test_repos/t...___________________ summary ____________________________________\\\\n  python: commands succeeded\\\\n  congratulations :)\\\\n'\\n +  where 'WARNING: test command found but not installed in testenv\\\\n  cmd: /Users/sergeykatkovskiy/dataset-builder/test_repos/t...___________________ summary ____________________________________\\\\n  python: commands succeeded\\\\n  congratulations :)\\\\n' = RunResult(ret=0, args=('-epython',), out=\\\\nWARNING: test command found but not installed in testenv\\\\n  cmd: /Users/serge...______________ summary ____________________________________\\\\n  python: commands succeeded\\\\n  congratulations :)\\\\n\\\\n, err=\\\\n).out\"", "available_width": "86"}, "return_value": "\" - AssertionError: assert 'develop-inst-noop' in 'WARNING: test command found but n...\""}, {"func_args": {"format": "' - {}'", "msg": "\"AssertionError: assert False\\n +  where False = <built-in method startswith of str object at 0x10ca52ad0>('ERROR:   python: InvocationError for command ')\\n +    where <built-in method startswith of str object at 0x10ca52ad0> = '     python setup.py sdist'.startswith\"", "available_width": "88"}, "return_value": "' - AssertionError: assert False'"}, {"func_args": {"format": "' - {}'", "msg": "'AssertionError: 1\\n\\nGLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_recreate0/example/setup.py\\nERROR: No dist directory found. Please check setup.py, e.g with:\\n     python setup.py sdist'", "available_width": "101"}, "return_value": "' - AssertionError: 1'"}, {"func_args": {"format": "' - {}'", "msg": "'AssertionError: 1\\n\\nGLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_envsitepackagesdir_skip_m0/pkg513/setup.py\\nERROR: No dist directory found. Please check setup.py, e.g with:\\n     python setup.py sdist'", "available_width": "69"}, "return_value": "' - AssertionError: 1'"}, {"func_args": {"format": "' - {}'", "msg": "'AssertionError: 1\\n\\nusing tox.ini: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_empty_activity_shown_verb0/example123/tox.ini (pid 43628)\\nusing tox-3.24.6.dev3+g86a0383c.d20220119 from /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/__init__.py (pid 43628)\\nGLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_empty_activity_shown_verb0/example123/setup.py\\n[43870] /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_empty_activity_shown_verb0/example123$ /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python setup.py sdist --formats=zip --dist-dir /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_empty_activity_shown_verb0/example123/.tox/dist >.tox/log/GLOB-0.log\\nERROR: No dist directory found. Please check setup.py, e.g with:\\n     python setup.py sdist'", "available_width": "81"}, "return_value": "' - AssertionError: 1'"}, {"func_args": {"format": "' - {}'", "msg": "'AssertionError: 1\\n\\nGLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_venv_special_chars_issue20/pkg123/setup.py\\nERROR: No dist directory found. Please check setup.py, e.g with:\\n     python setup.py sdist'", "available_width": "82"}, "return_value": "' - AssertionError: 1'"}, {"func_args": {"format": "' - {}'", "msg": "\"AssertionError: ['GLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_u.../interp123/setup.py', 'ERROR: No dist directory found. Please check setup.py, e.g with:', '     python setup.py sdist']\\nassert False\\n +  where False = any(<generator object test_unknown_interpreter.<locals>.<genexpr> at 0x14f1faeb0>)\"", "available_width": "90"}, "return_value": "\" - AssertionError: ['GLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0...\""}, {"func_args": {"format": "' - {}'", "msg": "'AssertionError: 1\\n\\nGLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_verbosity__0/pkgX/setup.py\\nERROR: No dist directory found. Please check setup.py, e.g with:\\n     python setup.py sdist'", "available_width": "98"}, "return_value": "' - AssertionError: 1'"}, {"func_args": {"format": "' - {}'", "msg": "\"AssertionError: assert None\\n +  where None = <function search at 0x102f70940>('ERROR:.*InvocationError', 'GLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_no...r0/example123/setup.py\\\\nERROR: No dist directory found. Please check setup.py, e.g with:\\\\n     python setup.py sdist\\\\n')\\n +    where <function search at 0x102f70940> = re.search\\n +    and   'GLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_no...r0/example123/setup.py\\\\nERROR: No dist directory found. Please check setup.py, e.g with:\\\\n     python setup.py sdist\\\\n' = RunResult(ret=1, args=('--notest',), out=\\\\nGLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/py...ample123/setup.py\\\\nERROR: No dist directory found. Please check setup.py, e.g with:\\\\n     python setup.py sdist\\\\n\\\\n, err=\\\\n).out\"", "available_width": "88"}, "return_value": "' - AssertionError: assert None'"}, {"func_args": {"format": "' - {}'", "msg": "'AssertionError: 1\\nTraceback (most recent call last):\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/_pytestplugin.py\", line 132, in run\\n    tox.session.main([str(x) for x in argv])\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/session/__init__.py\", line 65, in main\\n    config = load_config(args)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/session/__init__.py\", line 81, in load_config\\n    config = parseconfig(args)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/config/__init__.py\", line 282, in parseconfig\\n    ParseIni(config, config_file, content)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/config/__init__.py\", line 1297, in __init__\\n    raise tox.exception.ConfigError(\\ntox.exception.ConfigError: ConfigError: python failed with list indices must be integers or slices, not str at Traceback (most recent call last):\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/config/__init__.py\", line 1273, in run\\n    results[name] = cur_self.make_envconfig(name, section, subs, config)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/config/__init__.py\", line 1449, in make_envconfig\\n    res = meth(env_attr.name, env_attr.default, replace=replace)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/config/__init__.py\", line 1746, in getargvlist\\n    return _ArgvlistReader.getargvlist(self, s, replace=replace, name=name)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/config/__init__.py\", line 2010, in getargvlist\\n    commands.append(cls.processcommand(reader, current_command, replace, name=name))\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/config/__init__.py\", line 2036, in processcommand\\n    new_word = reader._replace(word, name=name)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/config/__init__.py\", line 1831, in _replace\\n    replaced = Replacer(self, crossonly=crossonly).do_replace(value)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/config/__init__.py\", line 1867, in do_replace\\n    expanded = substitute_once(value)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/config/__init__.py\", line 1865, in substitute_once\\n    return self.RE_ITEM_REF.sub(self._replace_match, x)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/config/__init__.py\", line 1938, in _replace_match\\n    return self._replace_substitution(sub_value)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/config/__init__.py\", line 1975, in _replace_substitution\\n    val = val()\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/config/__init__.py\", line 1095, in get_envsitepackagesdir\\n    x = self.config.interpreters.get_sitepackagesdir(info=self.python_info, envdir=self.envdir)\\n  File \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/interpreters/__init__.py\", line 54, in get_sitepackagesdir\\n    return res[\"dir\"]\\nTypeError: list indices must be integers or slices, not str'", "available_width": "91"}, "return_value": "' - AssertionError: 1'"}, {"func_args": {"format": "' - {}'", "msg": "\"AssertionError: assert 'develop-inst-noop' in 'WARNING: test command found but not installed in testenv\\\\n  cmd: /Users/sergeykatkovskiy/dataset-builder/test_repos/t...___________________ summary ____________________________________\\\\n  python: commands succeeded\\\\n  congratulations :)\\\\n'\\n +  where 'WARNING: test command found but not installed in testenv\\\\n  cmd: /Users/sergeykatkovskiy/dataset-builder/test_repos/t...___________________ summary ____________________________________\\\\n  python: commands succeeded\\\\n  congratulations :)\\\\n' = RunResult(ret=0, args=('-epython',), out=\\\\nWARNING: test command found but not installed in testenv\\\\n  cmd: /Users/serge...______________ summary ____________________________________\\\\n  python: commands succeeded\\\\n  congratulations :)\\\\n\\\\n, err=\\\\n).out\"", "available_width": "84"}, "return_value": "\" - AssertionError: assert 'develop-inst-noop' in 'WARNING: test command found but...\""}, {"func_args": {"format": "' - {}'", "msg": "'AssertionError: 1\\n\\nGLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_empty_activity_ignored0/example123/setup.py\\nERROR: No dist directory found. Please check setup.py, e.g with:\\n     python setup.py sdist'", "available_width": "87"}, "return_value": "' - AssertionError: 1'"}, {"func_args": {"format": "' - {}'", "msg": "'AssertionError: 1\\n\\nGLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_skip_unknown_interpreter_0/interp123/setup.py\\nERROR: No dist directory found. Please check setup.py, e.g with:\\n     python setup.py sdist'", "available_width": "73"}, "return_value": "' - AssertionError: 1'"}, {"func_args": {"format": "' - {}'", "msg": "'AssertionError: 1\\n\\nusing tox.ini: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_notest1/example123/tox.ini (pid 43628)\\nusing tox-3.24.6.dev3+g86a0383c.d20220119 from /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/__init__.py (pid 43628)\\nGLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_notest1/example123/setup.py\\n[43893] /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_notest1/example123$ /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python setup.py sdist --formats=zip --dist-dir /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_notest1/example123/.tox/dist >.tox/log/GLOB-0.log\\nERROR: No dist directory found. Please check setup.py, e.g with:\\n     python setup.py sdist'", "available_width": "103"}, "return_value": "' - AssertionError: 1'"}, {"func_args": {"format": "' - {}'", "msg": "'AssertionError: 1\\n\\nusing tox.ini: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_env_VIRTUALENV_PYTHON0/example123/tox.ini (pid 43628)\\nusing tox-3.24.6.dev3+g86a0383c.d20220119 from /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/__init__.py (pid 43628)\\nGLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_env_VIRTUALENV_PYTHON0/example123/setup.py\\n[43894] /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_env_VIRTUALENV_PYTHON0/example123$ /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python setup.py sdist --formats=zip --dist-dir /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_env_VIRTUALENV_PYTHON0/example123/.tox/dist >.tox/log/GLOB-0.log\\nERROR: No dist directory found. Please check setup.py, e.g with:\\n     python setup.py sdist'", "available_width": "88"}, "return_value": "' - AssertionError: 1'"}, {"func_args": {"format": "' - {}'", "msg": "\"AssertionError: assert 'develop-inst-noop' in 'WARNING: test command found but not installed in testenv\\\\n  cmd: /Users/sergeykatkovskiy/dataset-builder/test_repos/t...___________________ summary ____________________________________\\\\n  python: commands succeeded\\\\n  congratulations :)\\\\n'\\n +  where 'WARNING: test command found but not installed in testenv\\\\n  cmd: /Users/sergeykatkovskiy/dataset-builder/test_repos/t...___________________ summary ____________________________________\\\\n  python: commands succeeded\\\\n  congratulations :)\\\\n' = RunResult(ret=0, args=('-epython',), out=\\\\nWARNING: test command found but not installed in testenv\\\\n  cmd: /Users/serge...______________ summary ____________________________________\\\\n  python: commands succeeded\\\\n  congratulations :)\\\\n\\\\n, err=\\\\n).out\"", "available_width": "85"}, "return_value": "\" - AssertionError: assert 'develop-inst-noop' in 'WARNING: test command found but ...\""}, {"func_args": {"format": "' - {}'", "msg": "'AssertionError: 1\\n\\nusing tox.ini: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_usedevelop_mixed0/example123/tox.ini (pid 43628)\\n  removing /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_usedevelop_mixed0/example123/.tox/log\\nusing tox-3.24.6.dev3+g86a0383c.d20220119 from /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/__init__.py (pid 43628)\\nGLOB start: packaging \\nGLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_usedevelop_mixed0/example123/setup.py\\n[43914] /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_usedevelop_mixed0/example123$ /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python setup.py sdist --formats=zip --dist-dir /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_usedevelop_mixed0/example123/.tox/dist >.tox/log/GLOB-0.log\\n[\"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin\", \"/opt/homebrew/opt/python@3.8/Frameworks/Python.framework/Versions/3.8/lib/python38.zip\", \"/opt/homebrew/opt/python@3.8/Frameworks/Python.framework/Versions/3.8/lib/python3.8\", \"/opt/homebrew/opt/python@3.8/Frameworks/Python.framework/Versions/3.8/lib/python3.8/lib-dynload\", \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages\"]\\n\\nERROR: No dist directory found. Please check setup.py, e.g with:\\n     python setup.py sdist'", "available_width": "93"}, "return_value": "' - AssertionError: 1'"}, {"func_args": {"format": "' - {}'", "msg": "'AssertionError: 1\\n\\nGLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_provision_does_not_fail_w0/test/setup.py\\nERROR: No dist directory found. Please check setup.py, e.g with:\\n     python setup.py sdist'", "available_width": "40"}, "return_value": "' - AssertionError: 1'"}, {"func_args": {"format": "' - {}'", "msg": "'AssertionError: 1\\n\\nGLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_provision_does_not_fail_w1/test/setup.py\\nERROR: No dist directory found. Please check setup.py, e.g with:\\n     python setup.py sdist'", "available_width": "44"}, "return_value": "' - AssertionError: 1'"}, {"func_args": {"format": "' - {}'", "msg": "'AssertionError: 1\\n\\nGLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_provision_does_not_fail_w2/test/setup.py\\nERROR: No dist directory found. Please check setup.py, e.g with:\\n     python setup.py sdist'", "available_width": "48"}, "return_value": "' - AssertionError: 1'"}, {"func_args": {"format": "' - {}'", "msg": "'AssertionError: 1\\n\\nGLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_provision_does_not_fail_w3/test/setup.py\\nERROR: No dist directory found. Please check setup.py, e.g with:\\n     python setup.py sdist'", "available_width": "36"}, "return_value": "' - AssertionError: 1'"}, {"func_args": {"format": "' - {}'", "msg": "'AssertionError: 1\\n\\nusing tox.ini: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_provision_requirement_wit0/proj/tox.ini (pid 43628)\\nusing tox-3.24.6.dev3+g86a0383c.d20220119 from /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages/tox/__init__.py (pid 43628)\\nGLOB start: packaging \\nGLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_provision_requirement_wit0/proj/setup.py\\n[43928] /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_provision_requirement_wit0/proj$ /Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin/python setup.py sdist --formats=zip --dist-dir /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_provision_requirement_wit0/proj/.tox/dist >.tox/log/GLOB-0.log\\n[\"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/bin\", \"/opt/homebrew/opt/python@3.8/Frameworks/Python.framework/Versions/3.8/lib/python38.zip\", \"/opt/homebrew/opt/python@3.8/Frameworks/Python.framework/Versions/3.8/lib/python3.8\", \"/opt/homebrew/opt/python@3.8/Frameworks/Python.framework/Versions/3.8/lib/python3.8/lib-dynload\", \"/Users/sergeykatkovskiy/dataset-builder/test_repos/tox/.tox/py38/lib/python3.8/site-packages\"]\\n\\nERROR: No dist directory found. Please check setup.py, e.g with:\\n     python setup.py sdist'", "available_width": "56"}, "return_value": "' - AssertionError: 1'"}], "text": "def _format_trimmed(format: str, msg: str, available_width: int) -> Optional[str]:\n    \"\"\"Format msg into format, ellipsizing it if doesn't fit in available_width.\n\n    Returns None if even the ellipsis can't fit.\n    \"\"\"\n    # Only use the first line.\n    i = msg.find(\"\\n\")\n    if i != -1:\n        msg = msg[:i]\n\n    ellipsis = \"...\"\n    format_width = wcswidth(format.format(\"\"))\n    if format_width + len(ellipsis) > available_width:\n        return None\n\n    if format_width + wcswidth(msg) > available_width:\n        available_width -= len(ellipsis)\n        msg = msg[:available_width]\n        while format_width + wcswidth(msg) > available_width:\n            msg = msg[:-1]\n        msg += ellipsis\n\n    return format.format(msg)"}, "pluralize": {"line": 1350, "args": [{"func_args": {"count": "74", "noun": "'failed'"}, "return_value": "(74, 'failed')"}, {"func_args": {"count": "554", "noun": "'passed'"}, "return_value": "(554, 'passed')"}, {"func_args": {"count": "5", "noun": "'skipped'"}, "return_value": "(5, 'skipped')"}, {"func_args": {"count": "1", "noun": "'warnings'"}, "return_value": "(1, 'warning')"}, {"func_args": {"count": "1", "noun": "'error'"}, "return_value": "(1, 'error')"}], "text": "def pluralize(count: int, noun: str) -> Tuple[int, str]:\n    # No need to pluralize words such as `failed` or `passed`.\n    if noun not in [\"error\", \"warnings\", \"test\"]:\n        return count, noun\n\n    # The `warnings` key is plural. To avoid API breakage, we keep it that way but\n    # set it to singular here so we can determine plurality in the same way as we do\n    # for `error`.\n    noun = noun.replace(\"warnings\", \"warning\")\n\n    return count, noun + \"s\" if count != 1 else noun"}, "format_session_duration": {"line": 1377, "args": [{"func_args": {"seconds": "142.34088015556335"}, "return_value": "'142.34s (0:02:22)'"}], "text": "def format_session_duration(seconds: float) -> str:\n    \"\"\"Format the given seconds in a human readable manner to show in the final summary.\"\"\"\n    if seconds < 60:\n        return f\"{seconds:.2f}s\"\n    else:\n        dt = datetime.timedelta(seconds=int(seconds))\n        return f\"{seconds:.2f}s ({dt})\""}, "get_terminal_width": {"line": 15, "args": [{"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}, {"func_args": {}, "return_value": "151"}], "text": "def get_terminal_width() -> int:\n    width, _ = shutil.get_terminal_size(fallback=(80, 24))\n\n    # The Windows get_terminal_size may be bogus, let's sanify a bit.\n    if width < 40:\n        width = 80\n\n    return width"}, "parse_num": {"line": 179, "args": [{"func_args": {"maybe_num": "'5'"}, "return_value": "5"}, {"func_args": {"maybe_num": "'current'"}, "return_value": "-1"}, {"func_args": {"maybe_num": "'8'"}, "return_value": "8"}, {"func_args": {"maybe_num": "'6'"}, "return_value": "6"}, {"func_args": {"maybe_num": "'7'"}, "return_value": "7"}, {"func_args": {"maybe_num": "'5'"}, "return_value": "5"}, {"func_args": {"maybe_num": "'current'"}, "return_value": "-1"}, {"func_args": {"maybe_num": "'8'"}, "return_value": "8"}, {"func_args": {"maybe_num": "'6'"}, "return_value": "6"}, {"func_args": {"maybe_num": "'7'"}, "return_value": "7"}], "text": "def parse_num(maybe_num) -> int:\n    \"\"\"Parse number path suffixes, returns -1 on error.\"\"\"\n    try:\n        return int(maybe_num)\n    except ValueError:\n        return -1"}, "wcwidth": {"line": 4, "args": [{"func_args": {"c": "'R'"}, "return_value": "1"}, {"func_args": {"c": "'O'"}, "return_value": "1"}, {"func_args": {"c": "':'"}, "return_value": "1"}, {"func_args": {"c": "'-'"}, "return_value": "1"}, {"func_args": {"c": "'0'"}, "return_value": "1"}, {"func_args": {"c": "'='"}, "return_value": "1"}, {"func_args": {"c": "'A'"}, "return_value": "1"}, {"func_args": {"c": "'I'"}, "return_value": "1"}, {"func_args": {"c": "'L'"}, "return_value": "1"}, {"func_args": {"c": "'D'"}, "return_value": "1"}, {"func_args": {"c": "'2'"}, "return_value": "1"}, {"func_args": {"c": "'x'"}, "return_value": "1"}, {"func_args": {"c": "'N'"}, "return_value": "1"}, {"func_args": {"c": "\"'\""}, "return_value": "1"}, {"func_args": {"c": "'3'"}, "return_value": "1"}, {"func_args": {"c": "'8'"}, "return_value": "1"}, {"func_args": {"c": "'T'"}, "return_value": "1"}, {"func_args": {"c": "'\\\\'"}, "return_value": "1"}, {"func_args": {"c": "'S'"}, "return_value": "1"}, {"func_args": {"c": "'9'"}, "return_value": "1"}, {"func_args": {"c": "'6'"}, "return_value": "1"}, {"func_args": {"c": "'('"}, "return_value": "1"}, {"func_args": {"c": "')'"}, "return_value": "1"}, {"func_args": {"c": "'['"}, "return_value": "1"}, {"func_args": {"c": "']'"}, "return_value": "1"}, {"func_args": {"c": "'G'"}, "return_value": "1"}, {"func_args": {"c": "'M'"}, "return_value": "1"}, {"func_args": {"c": "'B'"}, "return_value": "1"}, {"func_args": {"c": "','"}, "return_value": "1"}, {"func_args": {"c": "'P'"}, "return_value": "1"}, {"func_args": {"c": "'W'"}, "return_value": "1"}, {"func_args": {"c": "'U'"}, "return_value": "1"}, {"func_args": {"c": "'Y'"}, "return_value": "1"}, {"func_args": {"c": "'C'"}, "return_value": "1"}, {"func_args": {"c": "'`'"}, "return_value": "1"}, {"func_args": {"c": "'V'"}, "return_value": "1"}, {"func_args": {"c": "'H'"}, "return_value": "1"}]}, "wcswidth": {"line": 43, "args": [{"func_args": {"s": "'ERROR tests/unit/session/test_provision.py::test_provision_non_canonical_dep'"}, "return_value": "76"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'assert 0 == 1'"}, "return_value": "13"}, {"func_args": {"s": "'FAILED tests/unit/package/test_package_view.py::test_separate_sdist'"}, "return_value": "67"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: 1'"}, "return_value": "17"}, {"func_args": {"s": "'FAILED tests/integration/test_package_int.py::test_package_poetry'"}, "return_value": "65"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: 2'"}, "return_value": "17"}, {"func_args": {"s": "'FAILED tests/integration/test_package_int.py::test_package_setuptools'"}, "return_value": "69"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: 2'"}, "return_value": "17"}, {"func_args": {"s": "'FAILED tests/integration/test_package_int.py::test_package_flit'"}, "return_value": "63"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: 2'"}, "return_value": "17"}, {"func_args": {"s": "'FAILED tests/unit/interpreters/test_interpreters.py::test_tox_get_python_executable'"}, "return_value": "83"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'assert None'"}, "return_value": "11"}, {"func_args": {"s": "'FAILED tests/unit/interpreters/test_interpreters.py::test_find_alias_on_path'"}, "return_value": "76"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "\"AssertionError: assert '/opt/homebre...bin/python3.8' == '/private/var...n_path0/magic'\""}, "return_value": "87"}, {"func_args": {"s": "\"AssertionError: assert '/opt/homebre...bin/python3.8' == '/private/var..\""}, "return_value": "72"}, {"func_args": {"s": "\"AssertionError: assert '/opt/homebre...bin/python3.8' == '/private/var.\""}, "return_value": "71"}, {"func_args": {"s": "\"AssertionError: assert '/opt/homebre...bin/python3.8' == '/private/var\""}, "return_value": "70"}, {"func_args": {"s": "\"AssertionError: assert '/opt/homebre...bin/python3.8' == '/private/va\""}, "return_value": "69"}, {"func_args": {"s": "'FAILED tests/unit/interpreters/test_interpreters.py::TestInterpreters::test_get_sitepackagesdir_error'"}, "return_value": "101"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "\"AssertionError: assert ''\""}, "return_value": "25"}, {"func_args": {"s": "'FAILED tests/integration/test_parallel_interrupt.py::test_parallel_interrupt'"}, "return_value": "76"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: None'"}, "return_value": "20"}, {"func_args": {"s": "'FAILED tests/unit/session/test_session.py::test_command_prev_post_ok'"}, "return_value": "68"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: 1'"}, "return_value": "17"}, {"func_args": {"s": "'FAILED tests/unit/session/test_session.py::test_tox_env_var_flags_inserted_non_isolated'"}, "return_value": "87"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: 1'"}, "return_value": "17"}, {"func_args": {"s": "'FAILED tests/unit/session/test_session.py::test_command_prev_fail_command_skip_post_run'"}, "return_value": "87"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "\"assert 'ommand0/pkg_...up.py sdist\\\\n' == '\\\\npy run-tes...ands failed\\\\n'\""}, "return_value": "71"}, {"func_args": {"s": "\"assert 'ommand0/pkg_...up.py sdist\\\\n' == '\\\\npy run-tes...ands\""}, "return_value": "61"}, {"func_args": {"s": "\"assert 'ommand0/pkg_...up.py sdist\\\\n' == '\\\\npy run-tes...and\""}, "return_value": "60"}, {"func_args": {"s": "\"assert 'ommand0/pkg_...up.py sdist\\\\n' == '\\\\npy run-tes...an\""}, "return_value": "59"}, {"func_args": {"s": "\"assert 'ommand0/pkg_...up.py sdist\\\\n' == '\\\\npy run-tes...a\""}, "return_value": "58"}, {"func_args": {"s": "'FAILED tests/unit/session/test_session.py::test_tox_env_var_flags_inserted_isolated'"}, "return_value": "83"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: 1'"}, "return_value": "17"}, {"func_args": {"s": "'FAILED tests/unit/package/test_package.py::test_make_sdist'"}, "return_value": "58"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'SystemExit: 1'"}, "return_value": "13"}, {"func_args": {"s": "'FAILED tests/unit/package/test_package.py::test_separate_sdist_no_sdistfile'"}, "return_value": "75"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: assert not 1'"}, "return_value": "28"}, {"func_args": {"s": "'FAILED tests/unit/package/test_package.py::test_sdistonly'"}, "return_value": "57"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: assert not 1'"}, "return_value": "28"}, {"func_args": {"s": "'FAILED tests/unit/package/test_package.py::test_build_backend_without_submodule'"}, "return_value": "79"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: 1'"}, "return_value": "17"}, {"func_args": {"s": "'FAILED tests/integration/test_parallel_inception.py::test_parallel_inception'"}, "return_value": "76"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'assert 1 == 2'"}, "return_value": "13"}, {"func_args": {"s": "'FAILED tests/unit/package/builder/test_package_builder_isolated.py::test_dist_exists_version_change'"}, "return_value": "99"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: 1'"}, "return_value": "17"}, {"func_args": {"s": "'FAILED tests/unit/package/builder/test_package_builder_isolated.py::test_verbose_isolated_build'"}, "return_value": "95"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: using tox.ini: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_verbose_isolated_build0/example123/tox.ini (pid 43628)'"}, "return_value": "183"}, {"func_args": {"s": "'AssertionError: using tox.ini: /private/var/folders/4'"}, "return_value": "53"}, {"func_args": {"s": "'AssertionError: using tox.ini: /private/var/folders/'"}, "return_value": "52"}, {"func_args": {"s": "'AssertionError: using tox.ini: /private/var/folders'"}, "return_value": "51"}, {"func_args": {"s": "'AssertionError: using tox.ini: /private/var/folder'"}, "return_value": "50"}, {"func_args": {"s": "'FAILED tests/unit/package/builder/test_package_builder_isolated.py::test_isolated_build_backend_missing_hook'"}, "return_value": "108"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: using tox.ini: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_isolated_build_backend_mi0/ensconsproj/tox.ini (pid 43628)'"}, "return_value": "187"}, {"func_args": {"s": "'AssertionError: using tox.ini: /private/'"}, "return_value": "40"}, {"func_args": {"s": "'AssertionError: using tox.ini: /private'"}, "return_value": "39"}, {"func_args": {"s": "'AssertionError: using tox.ini: /privat'"}, "return_value": "38"}, {"func_args": {"s": "'AssertionError: using tox.ini: /priva'"}, "return_value": "37"}, {"func_args": {"s": "'FAILED tests/unit/package/builder/test_package_builder_isolated.py::test_verbose_isolated_build_in_tree'"}, "return_value": "103"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: using tox.ini: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_verbose_isolated_build_in0/example123/tox.ini (pid 43628)'"}, "return_value": "186"}, {"func_args": {"s": "'AssertionError: using tox.ini: /private/var/f'"}, "return_value": "45"}, {"func_args": {"s": "'AssertionError: using tox.ini: /private/var/'"}, "return_value": "44"}, {"func_args": {"s": "'AssertionError: using tox.ini: /private/var'"}, "return_value": "43"}, {"func_args": {"s": "'AssertionError: using tox.ini: /private/va'"}, "return_value": "42"}, {"func_args": {"s": "'FAILED tests/unit/session/test_parallel.py::test_parallel_live'"}, "return_value": "62"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: 1'"}, "return_value": "17"}, {"func_args": {"s": "'FAILED tests/unit/session/test_parallel.py::test_parallel_result_json'"}, "return_value": "69"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: 1'"}, "return_value": "17"}, {"func_args": {"s": "'FAILED tests/unit/session/test_parallel.py::test_parallel'"}, "return_value": "57"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: 1'"}, "return_value": "17"}, {"func_args": {"s": "'FAILED tests/unit/session/test_parallel.py::test_parallel_error_report[True]'"}, "return_value": "76"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: 0'"}, "return_value": "17"}, {"func_args": {"s": "'FAILED tests/unit/session/test_parallel.py::test_parallel_result_json_concurrent'"}, "return_value": "80"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: assert False'"}, "return_value": "28"}, {"func_args": {"s": "'FAILED tests/unit/session/test_parallel.py::test_parallel_error_report[False]'"}, "return_value": "77"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: 0'"}, "return_value": "17"}, {"func_args": {"s": "'FAILED tests/unit/session/test_parallel.py::test_parallel_show_output'"}, "return_value": "69"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: 0'"}, "return_value": "17"}, {"func_args": {"s": "'FAILED tests/unit/package/test_package_parallel.py::test_tox_parallel_build_safe'"}, "return_value": "80"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: '"}, "return_value": "16"}, {"func_args": {"s": "'FAILED tests/integration/test_provision_int.py::test_provision_from_pyvenv'"}, "return_value": "74"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: 0'"}, "return_value": "17"}, {"func_args": {"s": "'FAILED tests/integration/test_provision_int.py::test_provision_interrupt_child[Signals.SIGINT]'"}, "return_value": "94"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: None'"}, "return_value": "20"}, {"func_args": {"s": "'FAILED tests/integration/test_provision_int.py::test_provision_interrupt_child[Signals.SIGTERM]'"}, "return_value": "95"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: None'"}, "return_value": "20"}, {"func_args": {"s": "'FAILED tests/integration/test_provision_int.py::test_provision_missing'"}, "return_value": "70"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: 0'"}, "return_value": "17"}, {"func_args": {"s": "'FAILED tests/unit/test_z_cmdline.py::test_unknown_dep'"}, "return_value": "53"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: assert False'"}, "return_value": "28"}, {"func_args": {"s": "'FAILED tests/unit/test_z_cmdline.py::test_exit_code[6]'"}, "return_value": "54"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: assert 0 == 1'"}, "return_value": "29"}, {"func_args": {"s": "'FAILED tests/unit/test_z_cmdline.py::test_sdist_fails'"}, "return_value": "53"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "\"AssertionError: ['GLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_s...ls0/pkg123/setup.py', 'ERROR: No dist directory found. Please check setup.py, e.g with:', '     python setup.py sdist']\""}, "return_value": "256"}, {"func_args": {"s": "\"AssertionError: ['GLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pyt\""}, "return_value": "95"}, {"func_args": {"s": "\"AssertionError: ['GLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/py\""}, "return_value": "94"}, {"func_args": {"s": "\"AssertionError: ['GLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/p\""}, "return_value": "93"}, {"func_args": {"s": "\"AssertionError: ['GLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/\""}, "return_value": "92"}, {"func_args": {"s": "'FAILED tests/unit/test_z_cmdline.py::test_test_piphelp'"}, "return_value": "54"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: 1'"}, "return_value": "17"}, {"func_args": {"s": "'FAILED tests/unit/test_z_cmdline.py::test_skip_unknown_interpreter'"}, "return_value": "66"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: 1'"}, "return_value": "17"}, {"func_args": {"s": "'FAILED tests/unit/test_z_cmdline.py::test_verbosity[-v]'"}, "return_value": "55"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: 1'"}, "return_value": "17"}, {"func_args": {"s": "'FAILED tests/unit/test_z_cmdline.py::test_toxuone_env'"}, "return_value": "53"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: 1'"}, "return_value": "17"}, {"func_args": {"s": "'FAILED tests/unit/test_z_cmdline.py::test_test_usedevelop[src-False]'"}, "return_value": "68"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "\"AssertionError: assert 'develop-inst-noop' in 'WARNING: test command found but not installed in testenv\\\\n  cmd: /Users/sergeykatkovskiy/dataset-builder/test_repos/t...___________________ summary ____________________________________\\\\n  python: commands succeeded\\\\n  congratulations :)\\\\n'\""}, "return_value": "286"}, {"func_args": {"s": "\"AssertionError: assert 'develop-inst-noop' in 'WARNING: test command found but n\""}, "return_value": "80"}, {"func_args": {"s": "\"AssertionError: assert 'develop-inst-noop' in 'WARNING: test command found but \""}, "return_value": "79"}, {"func_args": {"s": "\"AssertionError: assert 'develop-inst-noop' in 'WARNING: test command found but\""}, "return_value": "78"}, {"func_args": {"s": "\"AssertionError: assert 'develop-inst-noop' in 'WARNING: test command found bu\""}, "return_value": "77"}, {"func_args": {"s": "'FAILED tests/unit/test_z_cmdline.py::test_different_config_cwd'"}, "return_value": "62"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: 1'"}, "return_value": "17"}, {"func_args": {"s": "'FAILED tests/unit/test_z_cmdline.py::test_missing_env_fails'"}, "return_value": "59"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'assert False'"}, "return_value": "12"}, {"func_args": {"s": "'FAILED tests/unit/test_z_cmdline.py::test_verbosity[-vv]'"}, "return_value": "56"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: 1'"}, "return_value": "17"}, {"func_args": {"s": "'FAILED tests/unit/test_z_cmdline.py::test_alwayscopy_default'"}, "return_value": "60"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: 1'"}, "return_value": "17"}, {"func_args": {"s": "'FAILED tests/unit/test_z_cmdline.py::test_result_json'"}, "return_value": "53"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "\"py.error.ENOENT: [No such file or directory]: open('/private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_result_json0/example123/res.json', 'r')\""}, "return_value": "189"}, {"func_args": {"s": "\"py.error.ENOENT: [No such file or directory]: open('/private/var/folders/4b/ydf1n0hs33l90gv5lss\""}, "return_value": "95"}, {"func_args": {"s": "\"py.error.ENOENT: [No such file or directory]: open('/private/var/folders/4b/ydf1n0hs33l90gv5ls\""}, "return_value": "94"}, {"func_args": {"s": "\"py.error.ENOENT: [No such file or directory]: open('/private/var/folders/4b/ydf1n0hs33l90gv5l\""}, "return_value": "93"}, {"func_args": {"s": "\"py.error.ENOENT: [No such file or directory]: open('/private/var/folders/4b/ydf1n0hs33l90gv5\""}, "return_value": "92"}, {"func_args": {"s": "'FAILED tests/unit/test_z_cmdline.py::test_setup_prints_non_ascii'"}, "return_value": "64"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: 1'"}, "return_value": "17"}, {"func_args": {"s": "'FAILED tests/unit/test_z_cmdline.py::test_PYC'"}, "return_value": "45"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: 1'"}, "return_value": "17"}, {"func_args": {"s": "'FAILED tests/unit/test_z_cmdline.py::test_envdir_would_delete_some_directory'"}, "return_value": "76"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "\"AssertionError: assert 'cowardly refusing to delete `envdir`' in 'GLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_en...ome_0/example/setup.py\\\\nERROR: No dist directory found. Please check setup.py, e.g with:\\\\n     python setup.py sdist\\\\n'\""}, "return_value": "305"}, {"func_args": {"s": "\"AssertionError: assert 'cowardly refusing to delete `envdir`' in 'GLOB s\""}, "return_value": "72"}, {"func_args": {"s": "\"AssertionError: assert 'cowardly refusing to delete `envdir`' in 'GLOB \""}, "return_value": "71"}, {"func_args": {"s": "\"AssertionError: assert 'cowardly refusing to delete `envdir`' in 'GLOB\""}, "return_value": "70"}, {"func_args": {"s": "\"AssertionError: assert 'cowardly refusing to delete `envdir`' in 'GLO\""}, "return_value": "69"}, {"func_args": {"s": "'FAILED tests/unit/test_z_cmdline.py::test_skip_platform_mismatch'"}, "return_value": "64"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: 1'"}, "return_value": "17"}, {"func_args": {"s": "'FAILED tests/unit/test_z_cmdline.py::test_envtmpdir'"}, "return_value": "51"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: 1'"}, "return_value": "17"}, {"func_args": {"s": "'FAILED tests/unit/test_z_cmdline.py::test_warning_emitted'"}, "return_value": "57"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "\"AssertionError: assert 'develop-inst-noop' in 'WARNING: test command found but not installed in testenv\\\\n  cmd: /Users/sergeykatkovskiy/dataset-builder/test_repos/t...___________________ summary ____________________________________\\\\n  python: commands succeeded\\\\n  congratulations :)\\\\n'\""}, "return_value": "286"}, {"func_args": {"s": "\"AssertionError: assert 'develop-inst-noop' in 'WARNING: test command found but not installe\""}, "return_value": "91"}, {"func_args": {"s": "\"AssertionError: assert 'develop-inst-noop' in 'WARNING: test command found but not install\""}, "return_value": "90"}, {"func_args": {"s": "\"AssertionError: assert 'develop-inst-noop' in 'WARNING: test command found but not instal\""}, "return_value": "89"}, {"func_args": {"s": "\"AssertionError: assert 'develop-inst-noop' in 'WARNING: test command found but not insta\""}, "return_value": "88"}, {"func_args": {"s": "'FAILED tests/unit/test_z_cmdline.py::test_test_usedevelop[.-True]'"}, "return_value": "65"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "\"AssertionError: assert 'develop-inst-noop' in 'WARNING: test command found but not installed in testenv\\\\n  cmd: /Users/sergeykatkovskiy/dataset-builder/test_repos/t...___________________ summary ____________________________________\\\\n  python: commands succeeded\\\\n  congratulations :)\\\\n'\""}, "return_value": "286"}, {"func_args": {"s": "\"AssertionError: assert 'develop-inst-noop' in 'WARNING: test command found but not \""}, "return_value": "83"}, {"func_args": {"s": "\"AssertionError: assert 'develop-inst-noop' in 'WARNING: test command found but not\""}, "return_value": "82"}, {"func_args": {"s": "\"AssertionError: assert 'develop-inst-noop' in 'WARNING: test command found but no\""}, "return_value": "81"}, {"func_args": {"s": "\"AssertionError: assert 'develop-inst-noop' in 'WARNING: test command found but n\""}, "return_value": "80"}, {"func_args": {"s": "'FAILED tests/unit/test_z_cmdline.py::test_package_install_fails'"}, "return_value": "63"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: assert False'"}, "return_value": "28"}, {"func_args": {"s": "'FAILED tests/unit/test_z_cmdline.py::test_recreate'"}, "return_value": "50"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: 1'"}, "return_value": "17"}, {"func_args": {"s": "'FAILED tests/unit/test_z_cmdline.py::test_envsitepackagesdir_skip_missing_issue280'"}, "return_value": "82"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: 1'"}, "return_value": "17"}, {"func_args": {"s": "'FAILED tests/unit/test_z_cmdline.py::test_empty_activity_shown_verbose'"}, "return_value": "70"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: 1'"}, "return_value": "17"}, {"func_args": {"s": "'FAILED tests/unit/test_z_cmdline.py::test_venv_special_chars_issue252'"}, "return_value": "69"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: 1'"}, "return_value": "17"}, {"func_args": {"s": "'FAILED tests/unit/test_z_cmdline.py::test_unknown_interpreter'"}, "return_value": "61"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "\"AssertionError: ['GLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000gn/T/pytest-of-sergeykatkovskiy/pytest-8/test_u.../interp123/setup.py', 'ERROR: No dist directory found. Please check setup.py, e.g with:', '     python setup.py sdist']\""}, "return_value": "256"}, {"func_args": {"s": "\"AssertionError: ['GLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0000\""}, "return_value": "87"}, {"func_args": {"s": "\"AssertionError: ['GLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw000\""}, "return_value": "86"}, {"func_args": {"s": "\"AssertionError: ['GLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw00\""}, "return_value": "85"}, {"func_args": {"s": "\"AssertionError: ['GLOB sdist-make: /private/var/folders/4b/ydf1n0hs33l90gv5lss46hdw0\""}, "return_value": "84"}, {"func_args": {"s": "'FAILED tests/unit/test_z_cmdline.py::test_verbosity[]'"}, "return_value": "53"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: 1'"}, "return_value": "17"}, {"func_args": {"s": "'FAILED tests/unit/test_z_cmdline.py::test_notest_setup_py_error'"}, "return_value": "63"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: assert None'"}, "return_value": "27"}, {"func_args": {"s": "'FAILED tests/unit/test_z_cmdline.py::test_envsitepackagesdir'"}, "return_value": "60"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: 1'"}, "return_value": "17"}, {"func_args": {"s": "'FAILED tests/unit/test_z_cmdline.py::test_test_usedevelop[src-True]'"}, "return_value": "67"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "\"AssertionError: assert 'develop-inst-noop' in 'WARNING: test command found but not installed in testenv\\\\n  cmd: /Users/sergeykatkovskiy/dataset-builder/test_repos/t...___________________ summary ____________________________________\\\\n  python: commands succeeded\\\\n  congratulations :)\\\\n'\""}, "return_value": "286"}, {"func_args": {"s": "\"AssertionError: assert 'develop-inst-noop' in 'WARNING: test command found but no\""}, "return_value": "81"}, {"func_args": {"s": "\"AssertionError: assert 'develop-inst-noop' in 'WARNING: test command found but n\""}, "return_value": "80"}, {"func_args": {"s": "\"AssertionError: assert 'develop-inst-noop' in 'WARNING: test command found but \""}, "return_value": "79"}, {"func_args": {"s": "\"AssertionError: assert 'develop-inst-noop' in 'WARNING: test command found but\""}, "return_value": "78"}, {"func_args": {"s": "'FAILED tests/unit/test_z_cmdline.py::test_empty_activity_ignored'"}, "return_value": "64"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: 1'"}, "return_value": "17"}, {"func_args": {"s": "'FAILED tests/unit/test_z_cmdline.py::test_skip_unknown_interpreter_result_json'"}, "return_value": "78"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: 1'"}, "return_value": "17"}, {"func_args": {"s": "'FAILED tests/unit/test_z_cmdline.py::test_notest'"}, "return_value": "48"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: 1'"}, "return_value": "17"}, {"func_args": {"s": "'FAILED tests/unit/test_z_cmdline.py::test_env_VIRTUALENV_PYTHON'"}, "return_value": "63"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: 1'"}, "return_value": "17"}, {"func_args": {"s": "'FAILED tests/unit/test_z_cmdline.py::test_test_usedevelop[.-False]'"}, "return_value": "66"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "\"AssertionError: assert 'develop-inst-noop' in 'WARNING: test command found but not installed in testenv\\\\n  cmd: /Users/sergeykatkovskiy/dataset-builder/test_repos/t...___________________ summary ____________________________________\\\\n  python: commands succeeded\\\\n  congratulations :)\\\\n'\""}, "return_value": "286"}, {"func_args": {"s": "\"AssertionError: assert 'develop-inst-noop' in 'WARNING: test command found but not\""}, "return_value": "82"}, {"func_args": {"s": "\"AssertionError: assert 'develop-inst-noop' in 'WARNING: test command found but no\""}, "return_value": "81"}, {"func_args": {"s": "\"AssertionError: assert 'develop-inst-noop' in 'WARNING: test command found but n\""}, "return_value": "80"}, {"func_args": {"s": "\"AssertionError: assert 'develop-inst-noop' in 'WARNING: test command found but \""}, "return_value": "79"}, {"func_args": {"s": "'FAILED tests/unit/test_z_cmdline.py::test_usedevelop_mixed'"}, "return_value": "58"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: 1'"}, "return_value": "17"}, {"func_args": {"s": "'FAILED tests/unit/session/test_provision.py::test_provision_does_not_fail_with_satisfied_requires[missing.json]'"}, "return_value": "111"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: 1'"}, "return_value": "17"}, {"func_args": {"s": "'FAILED tests/unit/session/test_provision.py::test_provision_does_not_fail_with_no_provision_no_reason[None]'"}, "return_value": "107"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: 1'"}, "return_value": "17"}, {"func_args": {"s": "'FAILED tests/unit/session/test_provision.py::test_provision_does_not_fail_with_satisfied_requires[None]'"}, "return_value": "103"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: 1'"}, "return_value": "17"}, {"func_args": {"s": "'FAILED tests/unit/session/test_provision.py::test_provision_does_not_fail_with_no_provision_no_reason[missing.json]'"}, "return_value": "115"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: 1'"}, "return_value": "17"}, {"func_args": {"s": "'FAILED tests/unit/session/test_provision.py::test_provision_requirement_with_environment_marker'"}, "return_value": "95"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'AssertionError: 1'"}, "return_value": "17"}], "text": "def wcswidth(s: str) -> int:\n    \"\"\"Determine how many columns are needed to display a string in a terminal.\n\n    Returns -1 if the string contains non-printable characters.\n    \"\"\"\n    width = 0\n    for c in unicodedata.normalize(\"NFC\", s):\n        wc = wcwidth(c)\n        if wc < 0:\n            return -1\n        width += wc\n    return width"}, "_get_stderr_fileno": {"line": 68, "args": [{"func_args": {}, "return_value": "2"}]}}