{"_ellipsize": {"line": 29, "args": [{"func_args": {"s": "'<requests.adapters.HTTPAdapter object at 0xffff8d6311c0>'", "maxsize": "240"}, "return_value": "'<requests.adapters.HTTPAdapter object at 0xffff8d6311c0>'"}, {"func_args": {"s": "'<requests.adapters.HTTPAdapter object at 0xffff8d6311c0>'", "maxsize": "240"}, "return_value": "'<requests.adapters.HTTPAdapter object at 0xffff8d6311c0>'"}, {"func_args": {"s": "'<PreparedRequest [GET]>'", "maxsize": "240"}, "return_value": "'<PreparedRequest [GET]>'"}, {"func_args": {"s": "'<PreparedRequest [GET]>'", "maxsize": "240"}, "return_value": "'<PreparedRequest [GET]>'"}, {"func_args": {"s": "'False'", "maxsize": "240"}, "return_value": "'False'"}, {"func_args": {"s": "'False'", "maxsize": "240"}, "return_value": "'False'"}, {"func_args": {"s": "'Timeout(connect=None, read=None, total=None)'", "maxsize": "240"}, "return_value": "'Timeout(connect=None, read=None, total=None)'"}, {"func_args": {"s": "'Timeout(connect=None, read=None, total=None)'", "maxsize": "240"}, "return_value": "'Timeout(connect=None, read=None, total=None)'"}, {"func_args": {"s": "'True'", "maxsize": "240"}, "return_value": "'True'"}, {"func_args": {"s": "'True'", "maxsize": "240"}, "return_value": "'True'"}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'OrderedDict()'", "maxsize": "240"}, "return_value": "'OrderedDict()'"}, {"func_args": {"s": "'OrderedDict()'", "maxsize": "240"}, "return_value": "'OrderedDict()'"}, {"func_args": {"s": "'<requests.adapters.HTTPAdapter object at 0xffff8d6311c0>'", "maxsize": "240"}, "return_value": "'<requests.adapters.HTTPAdapter object at 0xffff8d6311c0>'"}, {"func_args": {"s": "'<requests.adapters.HTTPAdapter object at 0xffff8d6311c0>'", "maxsize": "240"}, "return_value": "'<requests.adapters.HTTPAdapter object at 0xffff8d6311c0>'"}, {"func_args": {"s": "'<PreparedRequest [GET]>'", "maxsize": "240"}, "return_value": "'<PreparedRequest [GET]>'"}, {"func_args": {"s": "'<PreparedRequest [GET]>'", "maxsize": "240"}, "return_value": "'<PreparedRequest [GET]>'"}, {"func_args": {"s": "'False'", "maxsize": "240"}, "return_value": "'False'"}, {"func_args": {"s": "'False'", "maxsize": "240"}, "return_value": "'False'"}, {"func_args": {"s": "'Timeout(connect=None, read=None, total=None)'", "maxsize": "240"}, "return_value": "'Timeout(connect=None, read=None, total=None)'"}, {"func_args": {"s": "'Timeout(connect=None, read=None, total=None)'", "maxsize": "240"}, "return_value": "'Timeout(connect=None, read=None, total=None)'"}, {"func_args": {"s": "'True'", "maxsize": "240"}, "return_value": "'True'"}, {"func_args": {"s": "'True'", "maxsize": "240"}, "return_value": "'True'"}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'OrderedDict()'", "maxsize": "240"}, "return_value": "'OrderedDict()'"}, {"func_args": {"s": "'OrderedDict()'", "maxsize": "240"}, "return_value": "'OrderedDict()'"}, {"func_args": {"s": "'<urllib3.connectionpool.HTTPConnectionPool object at 0xffff8d39ceb0>'", "maxsize": "240"}, "return_value": "'<urllib3.connectionpool.HTTPConnectionPool object at 0xffff8d39ceb0>'"}, {"func_args": {"s": "'<urllib3.connectionpool.HTTPConnectionPool object at 0xffff8d39ceb0>'", "maxsize": "240"}, "return_value": "'<urllib3.connectionpool.HTTPConnectionPool object at 0xffff8d39ceb0>'"}, {"func_args": {"s": "\"'GET'\"", "maxsize": "240"}, "return_value": "\"'GET'\""}, {"func_args": {"s": "\"'/v1/agent/services'\"", "maxsize": "240"}, "return_value": "\"'/v1/agent/services'\""}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "\"{'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\"", "maxsize": "240"}, "return_value": "\"{'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\""}, {"func_args": {"s": "\"{'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\"", "maxsize": "240"}, "return_value": "\"{'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\""}, {"func_args": {"s": "'Retry(total=0, connect=None, read=False, redirect=None, status=None)'", "maxsize": "240"}, "return_value": "'Retry(total=0, connect=None, read=False, redirect=None, status=None)'"}, {"func_args": {"s": "'Retry(total=0, connect=None, read=False, redirect=None, status=None)'", "maxsize": "240"}, "return_value": "'Retry(total=0, connect=None, read=False, redirect=None, status=None)'"}, {"func_args": {"s": "'False'", "maxsize": "240"}, "return_value": "'False'"}, {"func_args": {"s": "'False'", "maxsize": "240"}, "return_value": "'False'"}, {"func_args": {"s": "'False'", "maxsize": "240"}, "return_value": "'False'"}, {"func_args": {"s": "'False'", "maxsize": "240"}, "return_value": "'False'"}, {"func_args": {"s": "'Timeout(connect=None, read=None, total=None)'", "maxsize": "240"}, "return_value": "'Timeout(connect=None, read=None, total=None)'"}, {"func_args": {"s": "'Timeout(connect=None, read=None, total=None)'", "maxsize": "240"}, "return_value": "'Timeout(connect=None, read=None, total=None)'"}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'False'", "maxsize": "240"}, "return_value": "'False'"}, {"func_args": {"s": "'False'", "maxsize": "240"}, "return_value": "'False'"}, {"func_args": {"s": "'False'", "maxsize": "240"}, "return_value": "'False'"}, {"func_args": {"s": "'False'", "maxsize": "240"}, "return_value": "'False'"}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'False'", "maxsize": "240"}, "return_value": "'False'"}, {"func_args": {"s": "'False'", "maxsize": "240"}, "return_value": "'False'"}, {"func_args": {"s": "\"{'decode_content': False, 'preload_content': False}\"", "maxsize": "240"}, "return_value": "\"{'decode_content': False, 'preload_content': False}\""}, {"func_args": {"s": "\"Url(scheme=None, auth=None, host=None, port=None, path='/v1/agent/services', query=None, fragment=None)\"", "maxsize": "240"}, "return_value": "\"Url(scheme=None, auth=None, host=None, port=None, path='/v1/agent/services', query=None, fragment=None)\""}, {"func_args": {"s": "\"Url(scheme=None, auth=None, host=None, port=None, path='/v1/agent/services', query=None, fragment=None)\"", "maxsize": "240"}, "return_value": "\"Url(scheme=None, auth=None, host=None, port=None, path='/v1/agent/services', query=None, fragment=None)\""}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'True'", "maxsize": "240"}, "return_value": "'True'"}, {"func_args": {"s": "'True'", "maxsize": "240"}, "return_value": "'True'"}, {"func_args": {"s": "'False'", "maxsize": "240"}, "return_value": "'False'"}, {"func_args": {"s": "'False'", "maxsize": "240"}, "return_value": "'False'"}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'False'", "maxsize": "240"}, "return_value": "'False'"}, {"func_args": {"s": "'False'", "maxsize": "240"}, "return_value": "'False'"}, {"func_args": {"s": "'Retry(total=0, connect=None, read=False, redirect=None, status=None)'", "maxsize": "240"}, "return_value": "'Retry(total=0, connect=None, read=False, redirect=None, status=None)'"}, {"func_args": {"s": "'Retry(total=0, connect=None, read=False, redirect=None, status=None)'", "maxsize": "240"}, "return_value": "'Retry(total=0, connect=None, read=False, redirect=None, status=None)'"}, {"func_args": {"s": "\"'GET'\"", "maxsize": "240"}, "return_value": "\"'GET'\""}, {"func_args": {"s": "\"'/v1/agent/services'\"", "maxsize": "240"}, "return_value": "\"'/v1/agent/services'\""}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "\"NewConnectionError('<urllib3.connection.HTTPConnection object at 0xffff8d39c1c0>: Failed to establish a new connection: [Errno 111] Connection refused')\"", "maxsize": "240"}, "return_value": "\"NewConnectionError('<urllib3.connection.HTTPConnection object at 0xffff8d39c1c0>: Failed to establish a new connection: [Errno 111] Connection refused')\""}, {"func_args": {"s": "\"NewConnectionError('<urllib3.connection.HTTPConnection object at 0xffff8d39c1c0>: Failed to establish a new connection: [Errno 111] Connection refused')\"", "maxsize": "240"}, "return_value": "\"NewConnectionError('<urllib3.connection.HTTPConnection object at 0xffff8d39c1c0>: Failed to establish a new connection: [Errno 111] Connection refused')\""}, {"func_args": {"s": "'<urllib3.connectionpool.HTTPConnectionPool object at 0xffff8d39ceb0>'", "maxsize": "240"}, "return_value": "'<urllib3.connectionpool.HTTPConnectionPool object at 0xffff8d39ceb0>'"}, {"func_args": {"s": "'<urllib3.connectionpool.HTTPConnectionPool object at 0xffff8d39ceb0>'", "maxsize": "240"}, "return_value": "'<urllib3.connectionpool.HTTPConnectionPool object at 0xffff8d39ceb0>'"}, {"func_args": {"s": "'<traceback object at 0xffff8a9f9d00>'", "maxsize": "240"}, "return_value": "'<traceback object at 0xffff8a9f9d00>'"}, {"func_args": {"s": "'<traceback object at 0xffff8a9f9d00>'", "maxsize": "240"}, "return_value": "'<traceback object at 0xffff8a9f9d00>'"}, {"func_args": {"s": "'<urllib3.connectionpool.HTTPConnectionPool object at 0xffff8d39ceb0>'", "maxsize": "240"}, "return_value": "'<urllib3.connectionpool.HTTPConnectionPool object at 0xffff8d39ceb0>'"}, {"func_args": {"s": "'<urllib3.connectionpool.HTTPConnectionPool object at 0xffff8d39ceb0>'", "maxsize": "240"}, "return_value": "'<urllib3.connectionpool.HTTPConnectionPool object at 0xffff8d39ceb0>'"}, {"func_args": {"s": "\"'GET'\"", "maxsize": "240"}, "return_value": "\"'GET'\""}, {"func_args": {"s": "\"'/v1/agent/services'\"", "maxsize": "240"}, "return_value": "\"'/v1/agent/services'\""}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "\"{'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\"", "maxsize": "240"}, "return_value": "\"{'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\""}, {"func_args": {"s": "\"{'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\"", "maxsize": "240"}, "return_value": "\"{'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\""}, {"func_args": {"s": "'Retry(total=0, connect=None, read=False, redirect=None, status=None)'", "maxsize": "240"}, "return_value": "'Retry(total=0, connect=None, read=False, redirect=None, status=None)'"}, {"func_args": {"s": "'Retry(total=0, connect=None, read=False, redirect=None, status=None)'", "maxsize": "240"}, "return_value": "'Retry(total=0, connect=None, read=False, redirect=None, status=None)'"}, {"func_args": {"s": "'False'", "maxsize": "240"}, "return_value": "'False'"}, {"func_args": {"s": "'False'", "maxsize": "240"}, "return_value": "'False'"}, {"func_args": {"s": "'False'", "maxsize": "240"}, "return_value": "'False'"}, {"func_args": {"s": "'False'", "maxsize": "240"}, "return_value": "'False'"}, {"func_args": {"s": "'Timeout(connect=None, read=None, total=None)'", "maxsize": "240"}, "return_value": "'Timeout(connect=None, read=None, total=None)'"}, {"func_args": {"s": "'Timeout(connect=None, read=None, total=None)'", "maxsize": "240"}, "return_value": "'Timeout(connect=None, read=None, total=None)'"}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'False'", "maxsize": "240"}, "return_value": "'False'"}, {"func_args": {"s": "'False'", "maxsize": "240"}, "return_value": "'False'"}, {"func_args": {"s": "'False'", "maxsize": "240"}, "return_value": "'False'"}, {"func_args": {"s": "'False'", "maxsize": "240"}, "return_value": "'False'"}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'False'", "maxsize": "240"}, "return_value": "'False'"}, {"func_args": {"s": "'False'", "maxsize": "240"}, "return_value": "'False'"}, {"func_args": {"s": "\"{'decode_content': False, 'preload_content': False}\"", "maxsize": "240"}, "return_value": "\"{'decode_content': False, 'preload_content': False}\""}, {"func_args": {"s": "\"Url(scheme=None, auth=None, host=None, port=None, path='/v1/agent/services', query=None, fragment=None)\"", "maxsize": "240"}, "return_value": "\"Url(scheme=None, auth=None, host=None, port=None, path='/v1/agent/services', query=None, fragment=None)\""}, {"func_args": {"s": "\"Url(scheme=None, auth=None, host=None, port=None, path='/v1/agent/services', query=None, fragment=None)\"", "maxsize": "240"}, "return_value": "\"Url(scheme=None, auth=None, host=None, port=None, path='/v1/agent/services', query=None, fragment=None)\""}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'True'", "maxsize": "240"}, "return_value": "'True'"}, {"func_args": {"s": "'True'", "maxsize": "240"}, "return_value": "'True'"}, {"func_args": {"s": "'False'", "maxsize": "240"}, "return_value": "'False'"}, {"func_args": {"s": "'False'", "maxsize": "240"}, "return_value": "'False'"}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'False'", "maxsize": "240"}, "return_value": "'False'"}, {"func_args": {"s": "'False'", "maxsize": "240"}, "return_value": "'False'"}, {"func_args": {"s": "'<urllib3.connectionpool.HTTPConnectionPool object at 0xffff8d39ceb0>'", "maxsize": "240"}, "return_value": "'<urllib3.connectionpool.HTTPConnectionPool object at 0xffff8d39ceb0>'"}, {"func_args": {"s": "'<urllib3.connectionpool.HTTPConnectionPool object at 0xffff8d39ceb0>'", "maxsize": "240"}, "return_value": "'<urllib3.connectionpool.HTTPConnectionPool object at 0xffff8d39ceb0>'"}, {"func_args": {"s": "'<urllib3.connection.HTTPConnection object at 0xffff8d39c1c0>'", "maxsize": "240"}, "return_value": "'<urllib3.connection.HTTPConnection object at 0xffff8d39c1c0>'"}, {"func_args": {"s": "'<urllib3.connection.HTTPConnection object at 0xffff8d39c1c0>'", "maxsize": "240"}, "return_value": "'<urllib3.connection.HTTPConnection object at 0xffff8d39c1c0>'"}, {"func_args": {"s": "\"'GET'\"", "maxsize": "240"}, "return_value": "\"'GET'\""}, {"func_args": {"s": "\"'/v1/agent/services'\"", "maxsize": "240"}, "return_value": "\"'/v1/agent/services'\""}, {"func_args": {"s": "'Timeout(connect=None, read=None, total=None)'", "maxsize": "240"}, "return_value": "'Timeout(connect=None, read=None, total=None)'"}, {"func_args": {"s": "'Timeout(connect=None, read=None, total=None)'", "maxsize": "240"}, "return_value": "'Timeout(connect=None, read=None, total=None)'"}, {"func_args": {"s": "'False'", "maxsize": "240"}, "return_value": "'False'"}, {"func_args": {"s": "'False'", "maxsize": "240"}, "return_value": "'False'"}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "\"{'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\"", "maxsize": "240"}, "return_value": "\"{'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\""}, {"func_args": {"s": "\"{'body': None, 'headers': {'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}}\"", "maxsize": "240"}, "return_value": "\"{'body': None, 'headers': {'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}}\""}, {"func_args": {"s": "'Timeout(connect=None, read=None, total=None)'", "maxsize": "240"}, "return_value": "'Timeout(connect=None, read=None, total=None)'"}, {"func_args": {"s": "'Timeout(connect=None, read=None, total=None)'", "maxsize": "240"}, "return_value": "'Timeout(connect=None, read=None, total=None)'"}, {"func_args": {"s": "'<urllib3.connection.HTTPConnection object at 0xffff8d39c1c0>'", "maxsize": "240"}, "return_value": "'<urllib3.connection.HTTPConnection object at 0xffff8d39c1c0>'"}, {"func_args": {"s": "'<urllib3.connection.HTTPConnection object at 0xffff8d39c1c0>'", "maxsize": "240"}, "return_value": "'<urllib3.connection.HTTPConnection object at 0xffff8d39c1c0>'"}, {"func_args": {"s": "\"'GET'\"", "maxsize": "240"}, "return_value": "\"'GET'\""}, {"func_args": {"s": "\"'/v1/agent/services'\"", "maxsize": "240"}, "return_value": "\"'/v1/agent/services'\""}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "\"{'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\"", "maxsize": "240"}, "return_value": "\"{'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\""}, {"func_args": {"s": "\"{'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\"", "maxsize": "240"}, "return_value": "\"{'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\""}, {"func_args": {"s": "'<urllib3.connection.HTTPConnection object at 0xffff8d39c1c0>'", "maxsize": "240"}, "return_value": "'<urllib3.connection.HTTPConnection object at 0xffff8d39c1c0>'"}, {"func_args": {"s": "'<urllib3.connection.HTTPConnection object at 0xffff8d39c1c0>'", "maxsize": "240"}, "return_value": "'<urllib3.connection.HTTPConnection object at 0xffff8d39c1c0>'"}, {"func_args": {"s": "\"'GET'\"", "maxsize": "240"}, "return_value": "\"'GET'\""}, {"func_args": {"s": "\"'/v1/agent/services'\"", "maxsize": "240"}, "return_value": "\"'/v1/agent/services'\""}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "\"{'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\"", "maxsize": "240"}, "return_value": "\"{'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\""}, {"func_args": {"s": "\"{'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\"", "maxsize": "240"}, "return_value": "\"{'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\""}, {"func_args": {"s": "'<urllib3.connection.HTTPConnection object at 0xffff8d39c1c0>'", "maxsize": "240"}, "return_value": "'<urllib3.connection.HTTPConnection object at 0xffff8d39c1c0>'"}, {"func_args": {"s": "'<urllib3.connection.HTTPConnection object at 0xffff8d39c1c0>'", "maxsize": "240"}, "return_value": "'<urllib3.connection.HTTPConnection object at 0xffff8d39c1c0>'"}, {"func_args": {"s": "\"'GET'\"", "maxsize": "240"}, "return_value": "\"'GET'\""}, {"func_args": {"s": "\"'/v1/agent/services'\"", "maxsize": "240"}, "return_value": "\"'/v1/agent/services'\""}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "\"{'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\"", "maxsize": "240"}, "return_value": "\"{'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\""}, {"func_args": {"s": "\"{'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\"", "maxsize": "240"}, "return_value": "\"{'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\""}, {"func_args": {"s": "'False'", "maxsize": "240"}, "return_value": "'False'"}, {"func_args": {"s": "'False'", "maxsize": "240"}, "return_value": "'False'"}, {"func_args": {"s": "'<urllib3.connection.HTTPConnection object at 0xffff8d39c1c0>'", "maxsize": "240"}, "return_value": "'<urllib3.connection.HTTPConnection object at 0xffff8d39c1c0>'"}, {"func_args": {"s": "'<urllib3.connection.HTTPConnection object at 0xffff8d39c1c0>'", "maxsize": "240"}, "return_value": "'<urllib3.connection.HTTPConnection object at 0xffff8d39c1c0>'"}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'<urllib3.connection.HTTPConnection object at 0xffff8d39c1c0>'", "maxsize": "240"}, "return_value": "'<urllib3.connection.HTTPConnection object at 0xffff8d39c1c0>'"}, {"func_args": {"s": "'<urllib3.connection.HTTPConnection object at 0xffff8d39c1c0>'", "maxsize": "240"}, "return_value": "'<urllib3.connection.HTTPConnection object at 0xffff8d39c1c0>'"}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'False'", "maxsize": "240"}, "return_value": "'False'"}, {"func_args": {"s": "'False'", "maxsize": "240"}, "return_value": "'False'"}, {"func_args": {"s": "'<urllib3.connection.HTTPConnection object at 0xffff8d39c1c0>'", "maxsize": "240"}, "return_value": "'<urllib3.connection.HTTPConnection object at 0xffff8d39c1c0>'"}, {"func_args": {"s": "'<urllib3.connection.HTTPConnection object at 0xffff8d39c1c0>'", "maxsize": "240"}, "return_value": "'<urllib3.connection.HTTPConnection object at 0xffff8d39c1c0>'"}, {"func_args": {"s": "\"b'GET /v1/agent/services HTTP/1.1\\\\r\\\\nHost: 127.0.0.1:8500\\\\r\\\\nUser-Agent: python-requests/2.27.1\\\\r\\\\nAccept-Encoding: gzip, deflate\\\\r\\\\nAccept: */*\\\\r\\\\nConnection: keep-alive\\\\r\\\\n\\\\r\\\\n'\"", "maxsize": "240"}, "return_value": "\"b'GET /v1/agent/services HTTP/1.1\\\\r\\\\nHost: 127.0.0.1:8500\\\\r\\\\nUser-Agent: python-requests/2.27.1\\\\r\\\\nAccept-Encoding: gzip, deflate\\\\r\\\\nAccept: */*\\\\r\\\\nConnection: keep-alive\\\\r\\\\n\\\\r\\\\n'\""}, {"func_args": {"s": "\"b'GET /v1/agent/services HTTP/1.1\\\\r\\\\nHost: 127.0.0.1:8500\\\\r\\\\nUser-Agent: python-requests/2.27.1\\\\r\\\\nAccept-Encoding: gzip, deflate\\\\r\\\\nAccept: */*\\\\r\\\\nConnection: keep-alive\\\\r\\\\n\\\\r\\\\n'\"", "maxsize": "240"}, "return_value": "\"b'GET /v1/agent/services HTTP/1.1\\\\r\\\\nHost: 127.0.0.1:8500\\\\r\\\\nUser-Agent: python-requests/2.27.1\\\\r\\\\nAccept-Encoding: gzip, deflate\\\\r\\\\nAccept: */*\\\\r\\\\nConnection: keep-alive\\\\r\\\\n\\\\r\\\\n'\""}, {"func_args": {"s": "'<urllib3.connection.HTTPConnection object at 0xffff8d39c1c0>'", "maxsize": "240"}, "return_value": "'<urllib3.connection.HTTPConnection object at 0xffff8d39c1c0>'"}, {"func_args": {"s": "'<urllib3.connection.HTTPConnection object at 0xffff8d39c1c0>'", "maxsize": "240"}, "return_value": "'<urllib3.connection.HTTPConnection object at 0xffff8d39c1c0>'"}, {"func_args": {"s": "'<urllib3.connection.HTTPConnection object at 0xffff8d39c1c0>'", "maxsize": "240"}, "return_value": "'<urllib3.connection.HTTPConnection object at 0xffff8d39c1c0>'"}, {"func_args": {"s": "'<urllib3.connection.HTTPConnection object at 0xffff8d39c1c0>'", "maxsize": "240"}, "return_value": "'<urllib3.connection.HTTPConnection object at 0xffff8d39c1c0>'"}, {"func_args": {"s": "'<urllib3.connection.HTTPConnection object at 0xffff8d39c1c0>'", "maxsize": "240"}, "return_value": "'<urllib3.connection.HTTPConnection object at 0xffff8d39c1c0>'"}, {"func_args": {"s": "'<urllib3.connection.HTTPConnection object at 0xffff8d39c1c0>'", "maxsize": "240"}, "return_value": "'<urllib3.connection.HTTPConnection object at 0xffff8d39c1c0>'"}, {"func_args": {"s": "\"('127.0.0.1', 8500)\"", "maxsize": "240"}, "return_value": "\"('127.0.0.1', 8500)\""}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'[(6, 1, 1)]'", "maxsize": "240"}, "return_value": "'[(6, 1, 1)]'"}, {"func_args": {"s": "\"('127.0.0.1', 8500)\"", "maxsize": "240"}, "return_value": "\"('127.0.0.1', 8500)\""}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'[(6, 1, 1)]'", "maxsize": "240"}, "return_value": "'[(6, 1, 1)]'"}], "text": "def _ellipsize(s: str, maxsize: int) -> str:\n    if len(s) > maxsize:\n        i = max(0, (maxsize - 3) // 2)\n        j = max(0, maxsize - 3 - i)\n        return s[:i] + \"...\" + s[len(s) - j :]\n    return s"}, "<lambda>": {"line": 254, "args": [{"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}]}, "_format_trimmed": {"line": 1262, "args": [{"func_args": {"format": "' - {}'", "msg": "\"requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=8500): Max retries exceeded with url: /v1/agent/services (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0xffff8b3ed400>: Failed to establish a new connection: [Errno 111] Connection refused'))\"", "available_width": "30"}, "return_value": "' - requests.exceptions.Conn...'"}, {"func_args": {"format": "' - {}'", "msg": "\"requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=8500): Max retries exceeded with url: /v1/agent/services (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0xffff823b8bb0>: Failed to establish a new connection: [Errno 111] Connection refused'))\"", "available_width": "29"}, "return_value": "' - requests.exceptions.Con...'"}, {"func_args": {"format": "' - {}'", "msg": "\"requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=8500): Max retries exceeded with url: /v1/agent/services (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0xffff8435be20>: Failed to establish a new connection: [Errno 111] Connection refused'))\"", "available_width": "35"}, "return_value": "' - requests.exceptions.Connectio...'"}, {"func_args": {"format": "' - {}'", "msg": "\"requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=8500): Max retries exceeded with url: /v1/agent/services (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0xffff80c440a0>: Failed to establish a new connection: [Errno 111] Connection refused'))\"", "available_width": "41"}, "return_value": "' - requests.exceptions.ConnectionError...'"}, {"func_args": {"format": "' - {}'", "msg": "\"requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=8500): Max retries exceeded with url: /v1/agent/services (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0xffff82d28c10>: Failed to establish a new connection: [Errno 111] Connection refused'))\"", "available_width": "35"}, "return_value": "' - requests.exceptions.Connectio...'"}, {"func_args": {"format": "' - {}'", "msg": "\"requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=8500): Max retries exceeded with url: /v1/agent/services (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0xffff8d39c1c0>: Failed to establish a new connection: [Errno 111] Connection refused'))\"", "available_width": "25"}, "return_value": "' - requests.exceptions...'"}], "text": "def _format_trimmed(format: str, msg: str, available_width: int) -> Optional[str]:\n    \"\"\"Format msg into format, ellipsizing it if doesn't fit in available_width.\n\n    Returns None if even the ellipsis can't fit.\n    \"\"\"\n    # Only use the first line.\n    i = msg.find(\"\\n\")\n    if i != -1:\n        msg = msg[:i]\n\n    ellipsis = \"...\"\n    format_width = wcswidth(format.format(\"\"))\n    if format_width + len(ellipsis) > available_width:\n        return None\n\n    if format_width + wcswidth(msg) > available_width:\n        available_width -= len(ellipsis)\n        msg = msg[:available_width]\n        while format_width + wcswidth(msg) > available_width:\n            msg = msg[:-1]\n        msg += ellipsis\n\n    return format.format(msg)"}, "pluralize": {"line": 1350, "args": [{"func_args": {"count": "6", "noun": "'failed'"}, "return_value": "(6, 'failed')"}, {"func_args": {"count": "8", "noun": "'passed'"}, "return_value": "(8, 'passed')"}], "text": "def pluralize(count: int, noun: str) -> Tuple[int, str]:\n    # No need to pluralize words such as `failed` or `passed`.\n    if noun not in [\"error\", \"warnings\", \"test\"]:\n        return count, noun\n\n    # The `warnings` key is plural. To avoid API breakage, we keep it that way but\n    # set it to singular here so we can determine plurality in the same way as we do\n    # for `error`.\n    noun = noun.replace(\"warnings\", \"warning\")\n\n    return count, noun + \"s\" if count != 1 else noun"}, "format_session_duration": {"line": 1377, "args": [{"func_args": {"seconds": "8.245574474334717"}, "return_value": "'8.25s'"}], "text": "def format_session_duration(seconds: float) -> str:\n    \"\"\"Format the given seconds in a human readable manner to show in the final summary.\"\"\"\n    if seconds < 60:\n        return f\"{seconds:.2f}s\"\n    else:\n        dt = datetime.timedelta(seconds=int(seconds))\n        return f\"{seconds:.2f}s ({dt})\""}, "get_terminal_width": {"line": 15, "args": [{"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}], "text": "def get_terminal_width() -> int:\n    width, _ = shutil.get_terminal_size(fallback=(80, 24))\n\n    # The Windows get_terminal_size may be bogus, let's sanify a bit.\n    if width < 40:\n        width = 80\n\n    return width"}, "_get_stderr_fileno": {"line": 68, "args": [{"func_args": {}, "return_value": "2"}]}, "wcswidth": {"line": 43, "args": [{"func_args": {"s": "'tests/test_service.py ..FFFFFF'"}, "return_value": "30"}, {"func_args": {"s": "'tests/test_service.py ..FFFFFF.'"}, "return_value": "31"}, {"func_args": {"s": "'FAILED tests/test_service.py::test_remove_services'"}, "return_value": "50"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "\"requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=8500): Max retries exceeded with url: /v1/agent/services (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0xffff8b3ed400>: Failed to establish a new connection: [Errno 111] Connection refused'))\""}, "return_value": "300"}, {"func_args": {"s": "'requests.exceptions.Connect'"}, "return_value": "27"}, {"func_args": {"s": "'requests.exceptions.Connec'"}, "return_value": "26"}, {"func_args": {"s": "'requests.exceptions.Conne'"}, "return_value": "25"}, {"func_args": {"s": "'requests.exceptions.Conn'"}, "return_value": "24"}, {"func_args": {"s": "'FAILED tests/test_service.py::test_service_register'"}, "return_value": "51"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "\"requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=8500): Max retries exceeded with url: /v1/agent/services (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0xffff823b8bb0>: Failed to establish a new connection: [Errno 111] Connection refused'))\""}, "return_value": "300"}, {"func_args": {"s": "'requests.exceptions.Connec'"}, "return_value": "26"}, {"func_args": {"s": "'requests.exceptions.Conne'"}, "return_value": "25"}, {"func_args": {"s": "'requests.exceptions.Conn'"}, "return_value": "24"}, {"func_args": {"s": "'requests.exceptions.Con'"}, "return_value": "23"}, {"func_args": {"s": "'FAILED tests/test_service.py::test_deregister'"}, "return_value": "45"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "\"requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=8500): Max retries exceeded with url: /v1/agent/services (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0xffff8435be20>: Failed to establish a new connection: [Errno 111] Connection refused'))\""}, "return_value": "300"}, {"func_args": {"s": "'requests.exceptions.ConnectionEr'"}, "return_value": "32"}, {"func_args": {"s": "'requests.exceptions.ConnectionE'"}, "return_value": "31"}, {"func_args": {"s": "'requests.exceptions.Connection'"}, "return_value": "30"}, {"func_args": {"s": "'requests.exceptions.Connectio'"}, "return_value": "29"}, {"func_args": {"s": "'FAILED tests/test_service.py::test_kill'"}, "return_value": "39"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "\"requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=8500): Max retries exceeded with url: /v1/agent/services (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0xffff80c440a0>: Failed to establish a new connection: [Errno 111] Connection refused'))\""}, "return_value": "300"}, {"func_args": {"s": "'requests.exceptions.ConnectionError: H'"}, "return_value": "38"}, {"func_args": {"s": "'requests.exceptions.ConnectionError: '"}, "return_value": "37"}, {"func_args": {"s": "'requests.exceptions.ConnectionError:'"}, "return_value": "36"}, {"func_args": {"s": "'requests.exceptions.ConnectionError'"}, "return_value": "35"}, {"func_args": {"s": "'FAILED tests/test_service.py::test_keep_alive'"}, "return_value": "45"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "\"requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=8500): Max retries exceeded with url: /v1/agent/services (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0xffff82d28c10>: Failed to establish a new connection: [Errno 111] Connection refused'))\""}, "return_value": "300"}, {"func_args": {"s": "'requests.exceptions.ConnectionEr'"}, "return_value": "32"}, {"func_args": {"s": "'requests.exceptions.ConnectionE'"}, "return_value": "31"}, {"func_args": {"s": "'requests.exceptions.Connection'"}, "return_value": "30"}, {"func_args": {"s": "'requests.exceptions.Connectio'"}, "return_value": "29"}, {"func_args": {"s": "'FAILED tests/test_service.py::test_keepalive_reregister'"}, "return_value": "55"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "\"requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=8500): Max retries exceeded with url: /v1/agent/services (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0xffff8d39c1c0>: Failed to establish a new connection: [Errno 111] Connection refused'))\""}, "return_value": "300"}, {"func_args": {"s": "'requests.exceptions.Co'"}, "return_value": "22"}, {"func_args": {"s": "'requests.exceptions.C'"}, "return_value": "21"}, {"func_args": {"s": "'requests.exceptions.'"}, "return_value": "20"}, {"func_args": {"s": "'requests.exceptions'"}, "return_value": "19"}], "text": "def wcswidth(s: str) -> int:\n    \"\"\"Determine how many columns are needed to display a string in a terminal.\n\n    Returns -1 if the string contains non-printable characters.\n    \"\"\"\n    width = 0\n    for c in unicodedata.normalize(\"NFC\", s):\n        wc = wcwidth(c)\n        if wc < 0:\n            return -1\n        width += wc\n    return width"}, "wcwidth": {"line": 4, "args": [{"func_args": {"c": "'A'"}, "return_value": "1"}, {"func_args": {"c": "'I'"}, "return_value": "1"}, {"func_args": {"c": "'L'"}, "return_value": "1"}, {"func_args": {"c": "'E'"}, "return_value": "1"}, {"func_args": {"c": "'D'"}, "return_value": "1"}, {"func_args": {"c": "':'"}, "return_value": "1"}, {"func_args": {"c": "'m'"}, "return_value": "1"}, {"func_args": {"c": "'o'"}, "return_value": "1"}, {"func_args": {"c": "'-'"}, "return_value": "1"}, {"func_args": {"c": "'q'"}, "return_value": "1"}, {"func_args": {"c": "'u'"}, "return_value": "1"}, {"func_args": {"c": "'x'"}, "return_value": "1"}, {"func_args": {"c": "'n'"}, "return_value": "1"}, {"func_args": {"c": "'C'"}, "return_value": "1"}, {"func_args": {"c": "'H'"}, "return_value": "1"}, {"func_args": {"c": "'T'"}, "return_value": "1"}, {"func_args": {"c": "'P'"}, "return_value": "1"}, {"func_args": {"c": "'l'"}, "return_value": "1"}, {"func_args": {"c": "'('"}, "return_value": "1"}, {"func_args": {"c": "'h'"}, "return_value": "1"}, {"func_args": {"c": "'='"}, "return_value": "1"}, {"func_args": {"c": "\"'\""}, "return_value": "1"}, {"func_args": {"c": "'1'"}, "return_value": "1"}, {"func_args": {"c": "'2'"}, "return_value": "1"}, {"func_args": {"c": "'7'"}, "return_value": "1"}, {"func_args": {"c": "'0'"}, "return_value": "1"}, {"func_args": {"c": "','"}, "return_value": "1"}, {"func_args": {"c": "'8'"}, "return_value": "1"}, {"func_args": {"c": "'5'"}, "return_value": "1"}, {"func_args": {"c": "')'"}, "return_value": "1"}, {"func_args": {"c": "'M'"}, "return_value": "1"}, {"func_args": {"c": "'d'"}, "return_value": "1"}, {"func_args": {"c": "'w'"}, "return_value": "1"}, {"func_args": {"c": "'b'"}, "return_value": "1"}, {"func_args": {"c": "'N'"}, "return_value": "1"}, {"func_args": {"c": "'<'"}, "return_value": "1"}, {"func_args": {"c": "'3'"}, "return_value": "1"}, {"func_args": {"c": "'j'"}, "return_value": "1"}, {"func_args": {"c": "'f'"}, "return_value": "1"}, {"func_args": {"c": "'4'"}, "return_value": "1"}, {"func_args": {"c": "'>'"}, "return_value": "1"}, {"func_args": {"c": "'['"}, "return_value": "1"}, {"func_args": {"c": "']'"}, "return_value": "1"}, {"func_args": {"c": "'k'"}, "return_value": "1"}, {"func_args": {"c": "'9'"}, "return_value": "1"}]}, "default_user_agent": {"line": 863, "args": [{"func_args": {"name": "'python-requests'"}, "return_value": "'python-requests/2.27.1'"}], "text": "def default_user_agent(name=\"python-requests\"):\n    \"\"\"\n    Return a string representing the default user agent.\n\n    :rtype: str\n    \"\"\"\n    return '%s/%s' % (name, __version__)"}, "default_headers": {"line": 872, "args": [{"func_args": {}, "return_value": "{'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}"}], "text": "def default_headers():\n    \"\"\"\n    :rtype: requests.structures.CaseInsensitiveDict\n    \"\"\"\n    return CaseInsensitiveDict({\n        'User-Agent': default_user_agent(),\n        'Accept-Encoding': DEFAULT_ACCEPT_ENCODING,\n        'Accept': '*/*',\n        'Connection': 'keep-alive',\n    })"}, "unquote_unreserved": {"line": 608, "args": [{"func_args": {"uri": "'http://invalid:8500/v1/agent/service/register'"}, "return_value": "'http://invalid:8500/v1/agent/service/register'"}, {"func_args": {"uri": "'http://invalid:8500/v1/agent/service/register'"}, "return_value": "'http://invalid:8500/v1/agent/service/register'"}, {"func_args": {"uri": "'http://invalid:8500/v1/agent/check/pass/service:tailf'"}, "return_value": "'http://invalid:8500/v1/agent/check/pass/service:tailf'"}, {"func_args": {"uri": "'http://invalid:8500/v1/agent/service/deregister/tailf'"}, "return_value": "'http://invalid:8500/v1/agent/service/deregister/tailf'"}, {"func_args": {"uri": "'http://invalid:8500/v1/agent/service/deregister/tailf'"}, "return_value": "'http://invalid:8500/v1/agent/service/deregister/tailf'"}, {"func_args": {"uri": "'http://invalid:8500/v1/agent/service/deregister/tailf'"}, "return_value": "'http://invalid:8500/v1/agent/service/deregister/tailf'"}], "text": "def unquote_unreserved(uri):\n    \"\"\"Un-escape any percent-escape sequences in a URI that are unreserved\n    characters. This leaves all reserved, illegal and non-ASCII bytes encoded.\n\n    :rtype: str\n    \"\"\"\n    parts = uri.split('%')\n    for i in range(1, len(parts)):\n        h = parts[i][0:2]\n        if len(h) == 2 and h.isalnum():\n            try:\n                c = chr(int(h, 16))\n            except ValueError:\n                raise InvalidURL(\"Invalid percent-escape sequence: '%s'\" % h)\n\n            if c in UNRESERVED_SET:\n                parts[i] = c + parts[i][2:]\n            else:\n                parts[i] = '%' + parts[i]\n        else:\n            parts[i] = '%' + parts[i]\n    return ''.join(parts)"}, "requote_uri": {"line": 632, "args": [{"func_args": {"uri": "'http://invalid:8500/v1/agent/service/register'"}, "return_value": "'http://invalid:8500/v1/agent/service/register'"}, {"func_args": {"uri": "'http://invalid:8500/v1/agent/service/register'"}, "return_value": "'http://invalid:8500/v1/agent/service/register'"}, {"func_args": {"uri": "'http://invalid:8500/v1/agent/check/pass/service:tailf'"}, "return_value": "'http://invalid:8500/v1/agent/check/pass/service:tailf'"}, {"func_args": {"uri": "'http://invalid:8500/v1/agent/service/deregister/tailf'"}, "return_value": "'http://invalid:8500/v1/agent/service/deregister/tailf'"}, {"func_args": {"uri": "'http://invalid:8500/v1/agent/service/deregister/tailf'"}, "return_value": "'http://invalid:8500/v1/agent/service/deregister/tailf'"}, {"func_args": {"uri": "'http://invalid:8500/v1/agent/service/deregister/tailf'"}, "return_value": "'http://invalid:8500/v1/agent/service/deregister/tailf'"}], "text": "def requote_uri(uri):\n    \"\"\"Re-quote the given URI.\n\n    This function passes the given URI through an unquote/quote cycle to\n    ensure that it is fully and consistently quoted.\n\n    :rtype: str\n    \"\"\"\n    safe_with_percent = \"!#$%&'()*+,/:;=?@[]~\"\n    safe_without_percent = \"!#$&'()*+,/:;=?@[]~\"\n    try:\n        # Unquote only the unreserved characters\n        # Then quote only illegal characters (do not quote reserved,\n        # unreserved, or '%')\n        return quote(unquote_unreserved(uri), safe=safe_with_percent)\n    except InvalidURL:\n        # We couldn't unquote the given URI, so let's try quoting it, but\n        # there may be unquoted '%'s in the URI. We need to make sure they're\n        # properly quoted so they do not cause issues elsewhere.\n        return quote(uri, safe=safe_without_percent)"}, "super_len": {"line": 114, "args": [{"func_args": {"o": "'{\"name\": \"tailf\", \"id\": \"tailf\", \"check\": {\"ttl\": \"0.2s\"}}'"}, "return_value": "58"}, {"func_args": {"o": "'{\"name\": \"tailf\", \"id\": \"tailf\", \"check\": {\"ttl\": \"0.2s\"}}'"}, "return_value": "58"}], "text": "def super_len(o):\n    total_length = None\n    current_position = 0\n\n    if hasattr(o, '__len__'):\n        total_length = len(o)\n\n    elif hasattr(o, 'len'):\n        total_length = o.len\n\n    elif hasattr(o, 'fileno'):\n        try:\n            fileno = o.fileno()\n        except (io.UnsupportedOperation, AttributeError):\n            # AttributeError is a surprising exception, seeing as how we've just checked\n            # that `hasattr(o, 'fileno')`.  It happens for objects obtained via\n            # `Tarfile.extractfile()`, per issue 5229.\n            pass\n        else:\n            total_length = os.fstat(fileno).st_size\n\n            # Having used fstat to determine the file length, we need to\n            # confirm that this file was opened up in binary mode.\n            if 'b' not in o.mode:\n                warnings.warn((\n                    \"Requests has determined the content-length for this \"\n                    \"request using the binary size of the file: however, the \"\n                    \"file has been opened in text mode (i.e. without the 'b' \"\n                    \"flag in the mode). This may lead to an incorrect \"\n                    \"content-length. In Requests 3.0, support will be removed \"\n                    \"for files in text mode.\"),\n                    FileModeWarning\n                )\n\n    if hasattr(o, 'tell'):\n        try:\n            current_position = o.tell()\n        except (OSError, IOError):\n            # This can happen in some weird situations, such as when the file\n            # is actually a special file descriptor like stdin. In this\n            # instance, we don't know what the length is, so set it to zero and\n            # let requests chunk it instead.\n            if total_length is not None:\n                current_position = total_length\n        else:\n            if hasattr(o, 'seek') and total_length is None:\n                # StringIO and BytesIO have seek but no usable fileno\n                try:\n                    # seek to end of file\n                    o.seek(0, 2)\n                    total_length = o.tell()\n\n                    # seek back to current position to support\n                    # partially read file-like objects\n                    o.seek(current_position or 0)\n                except (OSError, IOError):\n                    total_length = 0\n\n    if total_length is None:\n        total_length = 0\n\n    return max(0, total_length - current_position)"}, "get_auth_from_url": {"line": 988, "args": [{"func_args": {"url": "'http://invalid:8500/v1/agent/service/register'"}, "return_value": "('', '')"}, {"func_args": {"url": "'http://invalid:8500/v1/agent/service/register'"}, "return_value": "('', '')"}, {"func_args": {"url": "'http://invalid:8500/v1/agent/check/pass/service:tailf'"}, "return_value": "('', '')"}, {"func_args": {"url": "'http://invalid:8500/v1/agent/service/deregister/tailf'"}, "return_value": "('', '')"}, {"func_args": {"url": "'http://invalid:8500/v1/agent/service/deregister/tailf'"}, "return_value": "('', '')"}, {"func_args": {"url": "'http://invalid:8500/v1/agent/service/deregister/tailf'"}, "return_value": "('', '')"}], "text": "def get_auth_from_url(url):\n    \"\"\"Given a url with authentication components, extract them into a tuple of\n    username,password.\n\n    :rtype: (str,str)\n    \"\"\"\n    parsed = urlparse(url)\n\n    try:\n        auth = (unquote(parsed.username), unquote(parsed.password))\n    except (AttributeError, TypeError):\n        auth = ('', '')\n\n    return auth"}, "should_bypass_proxies": {"line": 737, "args": [{"func_args": {"url": "'http://invalid:8500/v1/agent/service/register'", "no_proxy": "None"}, "return_value": "False"}, {"func_args": {"url": "'http://invalid:8500/v1/agent/service/register'", "no_proxy": "None"}, "return_value": "False"}, {"func_args": {"url": "'http://invalid:8500/v1/agent/check/pass/service:tailf'", "no_proxy": "None"}, "return_value": "False"}, {"func_args": {"url": "'http://invalid:8500/v1/agent/service/deregister/tailf'", "no_proxy": "None"}, "return_value": "False"}, {"func_args": {"url": "'http://invalid:8500/v1/agent/service/deregister/tailf'", "no_proxy": "None"}, "return_value": "False"}, {"func_args": {"url": "'http://invalid:8500/v1/agent/service/deregister/tailf'", "no_proxy": "None"}, "return_value": "False"}], "text": "def should_bypass_proxies(url, no_proxy):\n    \"\"\"\n    Returns whether we should bypass proxies or not.\n\n    :rtype: bool\n    \"\"\"\n    # Prioritize lowercase environment variables over uppercase\n    # to keep a consistent behaviour with other http projects (curl, wget).\n    get_proxy = lambda k: os.environ.get(k) or os.environ.get(k.upper())\n\n    # First check whether no_proxy is defined. If it is, check that the URL\n    # we're getting isn't in the no_proxy list.\n    no_proxy_arg = no_proxy\n    if no_proxy is None:\n        no_proxy = get_proxy('no_proxy')\n    parsed = urlparse(url)\n\n    if parsed.hostname is None:\n        # URLs don't always have hostnames, e.g. file:/// urls.\n        return True\n\n    if no_proxy:\n        # We need to check whether we match here. We need to see if we match\n        # the end of the hostname, both with and without the port.\n        no_proxy = (\n            host for host in no_proxy.replace(' ', '').split(',') if host\n        )\n\n        if is_ipv4_address(parsed.hostname):\n            for proxy_ip in no_proxy:\n                if is_valid_cidr(proxy_ip):\n                    if address_in_network(parsed.hostname, proxy_ip):\n                        return True\n                elif parsed.hostname == proxy_ip:\n                    # If no_proxy ip was defined in plain IP notation instead of cidr notation &\n                    # matches the IP of the index\n                    return True\n        else:\n            host_with_port = parsed.hostname\n            if parsed.port:\n                host_with_port += ':{}'.format(parsed.port)\n\n            for host in no_proxy:\n                if parsed.hostname.endswith(host) or host_with_port.endswith(host):\n                    # The URL does match something in no_proxy, so we don't want\n                    # to apply the proxies on this URL.\n                    return True\n\n    with set_environ('no_proxy', no_proxy_arg):\n        # parsed.hostname can be `None` in cases such as a file URI.\n        try:\n            bypass = proxy_bypass(parsed.hostname)\n        except (TypeError, socket.gaierror):\n            bypass = False\n\n    if bypass:\n        return True\n\n    return False"}, "get_environ_proxies": {"line": 798, "args": [{"func_args": {"url": "'http://invalid:8500/v1/agent/service/register'", "no_proxy": "None"}, "return_value": "{}"}, {"func_args": {"url": "'http://invalid:8500/v1/agent/service/register'", "no_proxy": "None"}, "return_value": "{}"}, {"func_args": {"url": "'http://invalid:8500/v1/agent/check/pass/service:tailf'", "no_proxy": "None"}, "return_value": "{}"}, {"func_args": {"url": "'http://invalid:8500/v1/agent/service/deregister/tailf'", "no_proxy": "None"}, "return_value": "{}"}, {"func_args": {"url": "'http://invalid:8500/v1/agent/service/deregister/tailf'", "no_proxy": "None"}, "return_value": "{}"}, {"func_args": {"url": "'http://invalid:8500/v1/agent/service/deregister/tailf'", "no_proxy": "None"}, "return_value": "{}"}], "text": "def get_environ_proxies(url, no_proxy=None):\n    \"\"\"\n    Return a dict of environment proxies.\n\n    :rtype: dict\n    \"\"\"\n    if should_bypass_proxies(url, no_proxy=no_proxy):\n        return {}\n    else:\n        return getproxies()"}, "default_hooks": {"line": 16, "args": [{"func_args": {}, "return_value": "{'response': []}"}, {"func_args": {}, "return_value": "{'response': []}"}, {"func_args": {}, "return_value": "{'response': []}"}, {"func_args": {}, "return_value": "{'response': []}"}, {"func_args": {}, "return_value": "{'response': []}"}, {"func_args": {}, "return_value": "{'response': []}"}, {"func_args": {}, "return_value": "{'response': []}"}, {"func_args": {}, "return_value": "{'response': []}"}, {"func_args": {}, "return_value": "{'response': []}"}, {"func_args": {}, "return_value": "{'response': []}"}, {"func_args": {}, "return_value": "{'response': []}"}, {"func_args": {}, "return_value": "{'response': []}"}, {"func_args": {}, "return_value": "{'response': []}"}], "text": "def default_hooks():\n    return {event: [] for event in HOOKS}"}, "to_native_string": {"line": 13, "args": [{"func_args": {"string": "'PUT'", "encoding": "'ascii'"}, "return_value": "'PUT'"}, {"func_args": {"string": "'User-Agent'", "encoding": "'ascii'"}, "return_value": "'User-Agent'"}, {"func_args": {"string": "'Accept-Encoding'", "encoding": "'ascii'"}, "return_value": "'Accept-Encoding'"}, {"func_args": {"string": "'Accept'", "encoding": "'ascii'"}, "return_value": "'Accept'"}, {"func_args": {"string": "'Connection'", "encoding": "'ascii'"}, "return_value": "'Connection'"}, {"func_args": {"string": "'PUT'", "encoding": "'ascii'"}, "return_value": "'PUT'"}, {"func_args": {"string": "'User-Agent'", "encoding": "'ascii'"}, "return_value": "'User-Agent'"}, {"func_args": {"string": "'Accept-Encoding'", "encoding": "'ascii'"}, "return_value": "'Accept-Encoding'"}, {"func_args": {"string": "'Accept'", "encoding": "'ascii'"}, "return_value": "'Accept'"}, {"func_args": {"string": "'Connection'", "encoding": "'ascii'"}, "return_value": "'Connection'"}, {"func_args": {"string": "'GET'", "encoding": "'ascii'"}, "return_value": "'GET'"}, {"func_args": {"string": "'User-Agent'", "encoding": "'ascii'"}, "return_value": "'User-Agent'"}, {"func_args": {"string": "'Accept-Encoding'", "encoding": "'ascii'"}, "return_value": "'Accept-Encoding'"}, {"func_args": {"string": "'Accept'", "encoding": "'ascii'"}, "return_value": "'Accept'"}, {"func_args": {"string": "'Connection'", "encoding": "'ascii'"}, "return_value": "'Connection'"}, {"func_args": {"string": "'GET'", "encoding": "'ascii'"}, "return_value": "'GET'"}, {"func_args": {"string": "'User-Agent'", "encoding": "'ascii'"}, "return_value": "'User-Agent'"}, {"func_args": {"string": "'Accept-Encoding'", "encoding": "'ascii'"}, "return_value": "'Accept-Encoding'"}, {"func_args": {"string": "'Accept'", "encoding": "'ascii'"}, "return_value": "'Accept'"}, {"func_args": {"string": "'Connection'", "encoding": "'ascii'"}, "return_value": "'Connection'"}, {"func_args": {"string": "'GET'", "encoding": "'ascii'"}, "return_value": "'GET'"}, {"func_args": {"string": "'User-Agent'", "encoding": "'ascii'"}, "return_value": "'User-Agent'"}, {"func_args": {"string": "'Accept-Encoding'", "encoding": "'ascii'"}, "return_value": "'Accept-Encoding'"}, {"func_args": {"string": "'Accept'", "encoding": "'ascii'"}, "return_value": "'Accept'"}, {"func_args": {"string": "'Connection'", "encoding": "'ascii'"}, "return_value": "'Connection'"}, {"func_args": {"string": "'GET'", "encoding": "'ascii'"}, "return_value": "'GET'"}, {"func_args": {"string": "'User-Agent'", "encoding": "'ascii'"}, "return_value": "'User-Agent'"}, {"func_args": {"string": "'Accept-Encoding'", "encoding": "'ascii'"}, "return_value": "'Accept-Encoding'"}, {"func_args": {"string": "'Accept'", "encoding": "'ascii'"}, "return_value": "'Accept'"}, {"func_args": {"string": "'Connection'", "encoding": "'ascii'"}, "return_value": "'Connection'"}], "text": "def to_native_string(string, encoding='ascii'):\n    \"\"\"Given a string object, regardless of type, returns a representation of\n    that string in the native string type, encoding and decoding where\n    necessary. This assumes ASCII unless told otherwise.\n    \"\"\"\n    if isinstance(string, builtin_str):\n        out = string\n    else:\n        if is_py2:\n            out = string.encode(encoding)\n        else:\n            out = string.decode(encoding)\n\n    return out"}, "unicode_is_ascii": {"line": 29, "args": [{"func_args": {"u_string": "'invalid'"}, "return_value": "True"}, {"func_args": {"u_string": "'invalid'"}, "return_value": "True"}, {"func_args": {"u_string": "'invalid'"}, "return_value": "True"}, {"func_args": {"u_string": "'invalid'"}, "return_value": "True"}, {"func_args": {"u_string": "'invalid'"}, "return_value": "True"}, {"func_args": {"u_string": "'invalid'"}, "return_value": "True"}], "text": "def unicode_is_ascii(u_string):\n    \"\"\"Determine if unicode string only contains ASCII characters.\n\n    :param str u_string: unicode string to check. Must be unicode\n        and not Python 2 `str`.\n    :rtype: bool\n    \"\"\"\n    assert isinstance(u_string, str)\n    try:\n        u_string.encode('ascii')\n        return True\n    except UnicodeEncodeError:\n        return False"}, "_idna_encode": {"line": 301, "args": [{"func_args": {"name": "'invalid'"}, "return_value": "b'invalid'"}, {"func_args": {"name": "'invalid'"}, "return_value": "b'invalid'"}, {"func_args": {"name": "'invalid'"}, "return_value": "b'invalid'"}, {"func_args": {"name": "'invalid'"}, "return_value": "b'invalid'"}, {"func_args": {"name": "'invalid'"}, "return_value": "b'invalid'"}, {"func_args": {"name": "'invalid'"}, "return_value": "b'invalid'"}, {"func_args": {"name": "'invalid'"}, "return_value": "b'invalid'"}, {"func_args": {"name": "'invalid'"}, "return_value": "b'invalid'"}, {"func_args": {"name": "'invalid'"}, "return_value": "b'invalid'"}, {"func_args": {"name": "'invalid'"}, "return_value": "b'invalid'"}, {"func_args": {"name": "'invalid'"}, "return_value": "b'invalid'"}, {"func_args": {"name": "'invalid'"}, "return_value": "b'invalid'"}, {"func_args": {"name": "'invalid'"}, "return_value": "b'invalid'"}], "text": "def _idna_encode(name):\n    if name and any([ord(x) > 128 for x in name]):\n        try:\n            import idna\n        except ImportError:\n            six.raise_from(\n                LocationParseError(\"Unable to parse URL without the 'idna' module\"),\n                None,\n            )\n        try:\n            return idna.encode(name.lower(), strict=True, std3_rules=True)\n        except idna.IDNAError:\n            six.raise_from(\n                LocationParseError(u\"Name '%s' is not a valid IDNA label\" % name), None\n            )\n    return name.lower().encode(\"ascii\")"}, "_normalize_host": {"line": 1092, "args": [{"func_args": {"host": "'invalid'", "scheme": "'http'"}, "return_value": "'invalid'"}], "text": "def _normalize_host(host, scheme):\n    \"\"\"\n    Normalize hosts for comparisons and use with sockets.\n    \"\"\"\n\n    host = normalize_host(host, scheme)\n\n    # httplib doesn't like it when we include brackets in IPv6 addresses\n    # Specifically, if we include brackets but also pass the port then\n    # httplib crazily doubles up the square brackets on the Host header.\n    # Instead, we need to make sure we never pass ``None`` as the port.\n    # However, for backward compatibility reasons we can't actually\n    # *assert* that.  See http://bugs.python.org/issue28539\n    if host.startswith(\"[\") and host.endswith(\"]\"):\n        host = host[1:-1]\n    return host"}, "_remove_path_dot_segments": {"line": 243, "args": [{"func_args": {"path": "'/v1/agent/service/register'"}, "return_value": "'/v1/agent/service/register'"}, {"func_args": {"path": "'/v1/agent/service/register'"}, "return_value": "'/v1/agent/service/register'"}, {"func_args": {"path": "'/v1/agent/service/register'"}, "return_value": "'/v1/agent/service/register'"}, {"func_args": {"path": "'/v1/agent/service/register'"}, "return_value": "'/v1/agent/service/register'"}, {"func_args": {"path": "'/v1/agent/service/register'"}, "return_value": "'/v1/agent/service/register'"}, {"func_args": {"path": "'/v1/agent/service/register'"}, "return_value": "'/v1/agent/service/register'"}, {"func_args": {"path": "'/v1/agent/check/pass/service:tailf'"}, "return_value": "'/v1/agent/check/pass/service:tailf'"}, {"func_args": {"path": "'/v1/agent/check/pass/service:tailf'"}, "return_value": "'/v1/agent/check/pass/service:tailf'"}, {"func_args": {"path": "'/v1/agent/check/pass/service:tailf'"}, "return_value": "'/v1/agent/check/pass/service:tailf'"}, {"func_args": {"path": "'/v1/agent/service/deregister/tailf'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"path": "'/v1/agent/service/deregister/tailf'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"path": "'/v1/agent/service/deregister/tailf'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"path": "'/v1/agent/service/deregister/tailf'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"path": "'/v1/agent/service/deregister/tailf'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"path": "'/v1/agent/service/deregister/tailf'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"path": "'/v1/agent/service/deregister/tailf'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"path": "'/v1/agent/service/deregister/tailf'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"path": "'/v1/agent/service/deregister/tailf'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}], "text": "def _remove_path_dot_segments(path):\n    # See http://tools.ietf.org/html/rfc3986#section-5.2.4 for pseudo-code\n    segments = path.split(\"/\")  # Turn the path into a list of segments\n    output = []  # Initialize the variable to use to store output\n\n    for segment in segments:\n        # '.' is the current directory, so ignore it, it is superfluous\n        if segment == \".\":\n            continue\n        # Anything other than '..', should be appended to the output\n        elif segment != \"..\":\n            output.append(segment)\n        # In this case segment == '..', if we can, we should pop the last\n        # element\n        elif output:\n            output.pop()\n\n    # If the path starts with '/' and the output is empty or the first string\n    # is non-empty\n    if path.startswith(\"/\") and (not output or output[0]):\n        output.insert(0, \"\")\n\n    # If the path starts with '/.' or '/..' ensure we add one more empty\n    # string to add a trailing '/'\n    if path.endswith((\"/.\", \"/..\")):\n        output.append(\"\")\n\n    return \"/\".join(output)"}, "_encode_invalid_chars": {"line": 209, "args": [{"func_args": {"component": "'/v1/agent/service/register'", "allowed_chars": "{'/', 't', 'a', 'F', 'Q', 'J', 'S', 'p', 'Z', 'N', '8', 'V', 'l', 'I', 'Y', 'D', 'f', '0', '6', '1', 'B', 'v', \"'\", 'K', 'X', 'd', '*', 'n', 'U', 'e', 'x', 'P', 'E', 'M', '@', 'g', 'j', 'i', '5', 'W', '!', '7', '4', 'L', 'h', '~', 'm', 'w', 'C', '2', ':', 'O', 'G', '_', 'y', '&', ',', ';', 'z', '$', 'u', '(', ')', 'b', '=', '+', 'A', 'k', 'r', '3', 'q', 'R', 'H', 'c', '9', '-', 'o', '.', 'T', 's'}", "encoding": "'utf-8'"}, "return_value": "'/v1/agent/service/register'"}, {"func_args": {"component": "'/v1/agent/service/register'", "allowed_chars": "{'/', 't', 'a', 'F', 'Q', 'J', 'S', 'p', 'Z', 'N', '8', 'V', 'l', 'I', 'Y', 'D', 'f', '0', '6', '1', 'B', 'v', \"'\", 'K', 'X', 'd', '*', 'n', 'U', 'e', 'x', 'P', 'E', 'M', '@', 'g', 'j', 'i', '5', 'W', '!', '7', '4', 'L', 'h', '~', 'm', 'w', 'C', '2', ':', 'O', 'G', '_', 'y', '&', ',', ';', 'z', '$', 'u', '(', ')', 'b', '=', '+', 'A', 'k', 'r', '3', 'q', 'R', 'H', 'c', '9', '-', 'o', '.', 'T', 's'}", "encoding": "'utf-8'"}, "return_value": "'/v1/agent/service/register'"}, {"func_args": {"component": "'/v1/agent/service/register'", "allowed_chars": "{'/', 't', 'a', 'F', 'Q', 'J', 'S', 'p', 'Z', 'N', '8', 'V', 'l', 'I', 'Y', 'D', 'f', '0', '6', '1', 'B', 'v', \"'\", 'K', 'X', 'd', '*', 'n', 'U', 'e', 'x', 'P', 'E', 'M', '@', 'g', 'j', 'i', '5', 'W', '!', '7', '4', 'L', 'h', '~', 'm', 'w', 'C', '2', ':', 'O', 'G', '_', 'y', '&', ',', ';', 'z', '$', 'u', '(', ')', 'b', '=', '+', 'A', 'k', 'r', '3', 'q', 'R', 'H', 'c', '9', '-', 'o', '.', 'T', 's'}", "encoding": "'utf-8'"}, "return_value": "'/v1/agent/service/register'"}, {"func_args": {"component": "'/v1/agent/service/register'", "allowed_chars": "{'/', 't', 'a', 'F', 'Q', 'J', 'S', 'p', 'Z', 'N', '8', 'V', 'l', 'I', 'Y', 'D', 'f', '0', '6', '1', 'B', 'v', \"'\", 'K', 'X', 'd', '*', 'n', 'U', 'e', 'x', 'P', 'E', 'M', '@', 'g', 'j', 'i', '5', 'W', '!', '7', '4', 'L', 'h', '~', 'm', 'w', 'C', '2', ':', 'O', 'G', '_', 'y', '&', ',', ';', 'z', '$', 'u', '(', ')', 'b', '=', '+', 'A', 'k', 'r', '3', 'q', 'R', 'H', 'c', '9', '-', 'o', '.', 'T', 's'}", "encoding": "'utf-8'"}, "return_value": "'/v1/agent/service/register'"}, {"func_args": {"component": "None", "allowed_chars": "{'/', 't', 'a', 'F', 'Q', 'J', 'S', '?', 'p', 'Z', 'N', '8', 'V', 'l', 'I', 'Y', 'D', 'f', '0', '6', '1', 'B', 'v', \"'\", 'K', 'X', 'd', '*', 'n', 'U', 'e', 'x', 'P', 'E', 'M', '@', 'g', 'j', 'i', '5', 'W', '!', '7', '4', 'L', 'h', '~', 'm', 'w', 'C', '2', ':', 'O', 'G', '_', 'y', '&', ',', ';', 'z', '$', 'u', '(', ')', 'b', '=', '+', 'A', 'k', 'r', '3', 'q', 'R', 'H', 'c', '9', '-', 'o', '.', 'T', 's'}", "encoding": "'utf-8'"}, "return_value": "None"}, {"func_args": {"component": "'/v1/agent/service/register'", "allowed_chars": "{'/', 't', 'a', 'F', 'Q', 'J', 'S', 'p', 'Z', 'N', '8', 'V', 'l', 'I', 'Y', 'D', 'f', '0', '6', '1', 'B', 'v', \"'\", 'K', 'X', 'd', '*', 'n', 'U', 'e', 'x', 'P', 'E', 'M', '@', 'g', 'j', 'i', '5', 'W', '!', '7', '4', 'L', 'h', '~', 'm', 'w', 'C', '2', ':', 'O', 'G', '_', 'y', '&', ',', ';', 'z', '$', 'u', '(', ')', 'b', '=', '+', 'A', 'k', 'r', '3', 'q', 'R', 'H', 'c', '9', '-', 'o', '.', 'T', 's'}", "encoding": "'utf-8'"}, "return_value": "'/v1/agent/service/register'"}, {"func_args": {"component": "'/v1/agent/service/register'", "allowed_chars": "{'/', 't', 'a', 'F', 'Q', 'J', 'S', 'p', 'Z', 'N', '8', 'V', 'l', 'I', 'Y', 'D', 'f', '0', '6', '1', 'B', 'v', \"'\", 'K', 'X', 'd', '*', 'n', 'U', 'e', 'x', 'P', 'E', 'M', '@', 'g', 'j', 'i', '5', 'W', '!', '7', '4', 'L', 'h', '~', 'm', 'w', 'C', '2', ':', 'O', 'G', '_', 'y', '&', ',', ';', 'z', '$', 'u', '(', ')', 'b', '=', '+', 'A', 'k', 'r', '3', 'q', 'R', 'H', 'c', '9', '-', 'o', '.', 'T', 's'}", "encoding": "'utf-8'"}, "return_value": "'/v1/agent/service/register'"}, {"func_args": {"component": "'/v1/agent/service/register'", "allowed_chars": "{'/', 't', 'a', 'F', 'Q', 'J', 'S', 'p', 'Z', 'N', '8', 'V', 'l', 'I', 'Y', 'D', 'f', '0', '6', '1', 'B', 'v', \"'\", 'K', 'X', 'd', '*', 'n', 'U', 'e', 'x', 'P', 'E', 'M', '@', 'g', 'j', 'i', '5', 'W', '!', '7', '4', 'L', 'h', '~', 'm', 'w', 'C', '2', ':', 'O', 'G', '_', 'y', '&', ',', ';', 'z', '$', 'u', '(', ')', 'b', '=', '+', 'A', 'k', 'r', '3', 'q', 'R', 'H', 'c', '9', '-', 'o', '.', 'T', 's'}", "encoding": "'utf-8'"}, "return_value": "'/v1/agent/service/register'"}, {"func_args": {"component": "'/v1/agent/service/register'", "allowed_chars": "{'/', 't', 'a', 'F', 'Q', 'J', 'S', 'p', 'Z', 'N', '8', 'V', 'l', 'I', 'Y', 'D', 'f', '0', '6', '1', 'B', 'v', \"'\", 'K', 'X', 'd', '*', 'n', 'U', 'e', 'x', 'P', 'E', 'M', '@', 'g', 'j', 'i', '5', 'W', '!', '7', '4', 'L', 'h', '~', 'm', 'w', 'C', '2', ':', 'O', 'G', '_', 'y', '&', ',', ';', 'z', '$', 'u', '(', ')', 'b', '=', '+', 'A', 'k', 'r', '3', 'q', 'R', 'H', 'c', '9', '-', 'o', '.', 'T', 's'}", "encoding": "'utf-8'"}, "return_value": "'/v1/agent/service/register'"}, {"func_args": {"component": "None", "allowed_chars": "{'/', 't', 'a', 'F', 'Q', 'J', 'S', '?', 'p', 'Z', 'N', '8', 'V', 'l', 'I', 'Y', 'D', 'f', '0', '6', '1', 'B', 'v', \"'\", 'K', 'X', 'd', '*', 'n', 'U', 'e', 'x', 'P', 'E', 'M', '@', 'g', 'j', 'i', '5', 'W', '!', '7', '4', 'L', 'h', '~', 'm', 'w', 'C', '2', ':', 'O', 'G', '_', 'y', '&', ',', ';', 'z', '$', 'u', '(', ')', 'b', '=', '+', 'A', 'k', 'r', '3', 'q', 'R', 'H', 'c', '9', '-', 'o', '.', 'T', 's'}", "encoding": "'utf-8'"}, "return_value": "None"}, {"func_args": {"component": "'/v1/agent/check/pass/service:tailf'", "allowed_chars": "{'/', 't', 'a', 'F', 'Q', 'J', 'S', 'p', 'Z', 'N', '8', 'V', 'l', 'I', 'Y', 'D', 'f', '0', '6', '1', 'B', 'v', \"'\", 'K', 'X', 'd', '*', 'n', 'U', 'e', 'x', 'P', 'E', 'M', '@', 'g', 'j', 'i', '5', 'W', '!', '7', '4', 'L', 'h', '~', 'm', 'w', 'C', '2', ':', 'O', 'G', '_', 'y', '&', ',', ';', 'z', '$', 'u', '(', ')', 'b', '=', '+', 'A', 'k', 'r', '3', 'q', 'R', 'H', 'c', '9', '-', 'o', '.', 'T', 's'}", "encoding": "'utf-8'"}, "return_value": "'/v1/agent/check/pass/service:tailf'"}, {"func_args": {"component": "'/v1/agent/check/pass/service:tailf'", "allowed_chars": "{'/', 't', 'a', 'F', 'Q', 'J', 'S', 'p', 'Z', 'N', '8', 'V', 'l', 'I', 'Y', 'D', 'f', '0', '6', '1', 'B', 'v', \"'\", 'K', 'X', 'd', '*', 'n', 'U', 'e', 'x', 'P', 'E', 'M', '@', 'g', 'j', 'i', '5', 'W', '!', '7', '4', 'L', 'h', '~', 'm', 'w', 'C', '2', ':', 'O', 'G', '_', 'y', '&', ',', ';', 'z', '$', 'u', '(', ')', 'b', '=', '+', 'A', 'k', 'r', '3', 'q', 'R', 'H', 'c', '9', '-', 'o', '.', 'T', 's'}", "encoding": "'utf-8'"}, "return_value": "'/v1/agent/check/pass/service:tailf'"}, {"func_args": {"component": "'/v1/agent/check/pass/service:tailf'", "allowed_chars": "{'/', 't', 'a', 'F', 'Q', 'J', 'S', 'p', 'Z', 'N', '8', 'V', 'l', 'I', 'Y', 'D', 'f', '0', '6', '1', 'B', 'v', \"'\", 'K', 'X', 'd', '*', 'n', 'U', 'e', 'x', 'P', 'E', 'M', '@', 'g', 'j', 'i', '5', 'W', '!', '7', '4', 'L', 'h', '~', 'm', 'w', 'C', '2', ':', 'O', 'G', '_', 'y', '&', ',', ';', 'z', '$', 'u', '(', ')', 'b', '=', '+', 'A', 'k', 'r', '3', 'q', 'R', 'H', 'c', '9', '-', 'o', '.', 'T', 's'}", "encoding": "'utf-8'"}, "return_value": "'/v1/agent/check/pass/service:tailf'"}, {"func_args": {"component": "'/v1/agent/check/pass/service:tailf'", "allowed_chars": "{'/', 't', 'a', 'F', 'Q', 'J', 'S', 'p', 'Z', 'N', '8', 'V', 'l', 'I', 'Y', 'D', 'f', '0', '6', '1', 'B', 'v', \"'\", 'K', 'X', 'd', '*', 'n', 'U', 'e', 'x', 'P', 'E', 'M', '@', 'g', 'j', 'i', '5', 'W', '!', '7', '4', 'L', 'h', '~', 'm', 'w', 'C', '2', ':', 'O', 'G', '_', 'y', '&', ',', ';', 'z', '$', 'u', '(', ')', 'b', '=', '+', 'A', 'k', 'r', '3', 'q', 'R', 'H', 'c', '9', '-', 'o', '.', 'T', 's'}", "encoding": "'utf-8'"}, "return_value": "'/v1/agent/check/pass/service:tailf'"}, {"func_args": {"component": "None", "allowed_chars": "{'/', 't', 'a', 'F', 'Q', 'J', 'S', '?', 'p', 'Z', 'N', '8', 'V', 'l', 'I', 'Y', 'D', 'f', '0', '6', '1', 'B', 'v', \"'\", 'K', 'X', 'd', '*', 'n', 'U', 'e', 'x', 'P', 'E', 'M', '@', 'g', 'j', 'i', '5', 'W', '!', '7', '4', 'L', 'h', '~', 'm', 'w', 'C', '2', ':', 'O', 'G', '_', 'y', '&', ',', ';', 'z', '$', 'u', '(', ')', 'b', '=', '+', 'A', 'k', 'r', '3', 'q', 'R', 'H', 'c', '9', '-', 'o', '.', 'T', 's'}", "encoding": "'utf-8'"}, "return_value": "None"}, {"func_args": {"component": "'/v1/agent/service/deregister/tailf'", "allowed_chars": "{'/', 't', 'a', 'F', 'Q', 'J', 'S', 'p', 'Z', 'N', '8', 'V', 'l', 'I', 'Y', 'D', 'f', '0', '6', '1', 'B', 'v', \"'\", 'K', 'X', 'd', '*', 'n', 'U', 'e', 'x', 'P', 'E', 'M', '@', 'g', 'j', 'i', '5', 'W', '!', '7', '4', 'L', 'h', '~', 'm', 'w', 'C', '2', ':', 'O', 'G', '_', 'y', '&', ',', ';', 'z', '$', 'u', '(', ')', 'b', '=', '+', 'A', 'k', 'r', '3', 'q', 'R', 'H', 'c', '9', '-', 'o', '.', 'T', 's'}", "encoding": "'utf-8'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"component": "'/v1/agent/service/deregister/tailf'", "allowed_chars": "{'/', 't', 'a', 'F', 'Q', 'J', 'S', 'p', 'Z', 'N', '8', 'V', 'l', 'I', 'Y', 'D', 'f', '0', '6', '1', 'B', 'v', \"'\", 'K', 'X', 'd', '*', 'n', 'U', 'e', 'x', 'P', 'E', 'M', '@', 'g', 'j', 'i', '5', 'W', '!', '7', '4', 'L', 'h', '~', 'm', 'w', 'C', '2', ':', 'O', 'G', '_', 'y', '&', ',', ';', 'z', '$', 'u', '(', ')', 'b', '=', '+', 'A', 'k', 'r', '3', 'q', 'R', 'H', 'c', '9', '-', 'o', '.', 'T', 's'}", "encoding": "'utf-8'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"component": "'/v1/agent/service/deregister/tailf'", "allowed_chars": "{'/', 't', 'a', 'F', 'Q', 'J', 'S', 'p', 'Z', 'N', '8', 'V', 'l', 'I', 'Y', 'D', 'f', '0', '6', '1', 'B', 'v', \"'\", 'K', 'X', 'd', '*', 'n', 'U', 'e', 'x', 'P', 'E', 'M', '@', 'g', 'j', 'i', '5', 'W', '!', '7', '4', 'L', 'h', '~', 'm', 'w', 'C', '2', ':', 'O', 'G', '_', 'y', '&', ',', ';', 'z', '$', 'u', '(', ')', 'b', '=', '+', 'A', 'k', 'r', '3', 'q', 'R', 'H', 'c', '9', '-', 'o', '.', 'T', 's'}", "encoding": "'utf-8'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"component": "'/v1/agent/service/deregister/tailf'", "allowed_chars": "{'/', 't', 'a', 'F', 'Q', 'J', 'S', 'p', 'Z', 'N', '8', 'V', 'l', 'I', 'Y', 'D', 'f', '0', '6', '1', 'B', 'v', \"'\", 'K', 'X', 'd', '*', 'n', 'U', 'e', 'x', 'P', 'E', 'M', '@', 'g', 'j', 'i', '5', 'W', '!', '7', '4', 'L', 'h', '~', 'm', 'w', 'C', '2', ':', 'O', 'G', '_', 'y', '&', ',', ';', 'z', '$', 'u', '(', ')', 'b', '=', '+', 'A', 'k', 'r', '3', 'q', 'R', 'H', 'c', '9', '-', 'o', '.', 'T', 's'}", "encoding": "'utf-8'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"component": "None", "allowed_chars": "{'/', 't', 'a', 'F', 'Q', 'J', 'S', '?', 'p', 'Z', 'N', '8', 'V', 'l', 'I', 'Y', 'D', 'f', '0', '6', '1', 'B', 'v', \"'\", 'K', 'X', 'd', '*', 'n', 'U', 'e', 'x', 'P', 'E', 'M', '@', 'g', 'j', 'i', '5', 'W', '!', '7', '4', 'L', 'h', '~', 'm', 'w', 'C', '2', ':', 'O', 'G', '_', 'y', '&', ',', ';', 'z', '$', 'u', '(', ')', 'b', '=', '+', 'A', 'k', 'r', '3', 'q', 'R', 'H', 'c', '9', '-', 'o', '.', 'T', 's'}", "encoding": "'utf-8'"}, "return_value": "None"}, {"func_args": {"component": "'/v1/agent/service/deregister/tailf'", "allowed_chars": "{'/', 't', 'a', 'F', 'Q', 'J', 'S', 'p', 'Z', 'N', '8', 'V', 'l', 'I', 'Y', 'D', 'f', '0', '6', '1', 'B', 'v', \"'\", 'K', 'X', 'd', '*', 'n', 'U', 'e', 'x', 'P', 'E', 'M', '@', 'g', 'j', 'i', '5', 'W', '!', '7', '4', 'L', 'h', '~', 'm', 'w', 'C', '2', ':', 'O', 'G', '_', 'y', '&', ',', ';', 'z', '$', 'u', '(', ')', 'b', '=', '+', 'A', 'k', 'r', '3', 'q', 'R', 'H', 'c', '9', '-', 'o', '.', 'T', 's'}", "encoding": "'utf-8'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"component": "'/v1/agent/service/deregister/tailf'", "allowed_chars": "{'/', 't', 'a', 'F', 'Q', 'J', 'S', 'p', 'Z', 'N', '8', 'V', 'l', 'I', 'Y', 'D', 'f', '0', '6', '1', 'B', 'v', \"'\", 'K', 'X', 'd', '*', 'n', 'U', 'e', 'x', 'P', 'E', 'M', '@', 'g', 'j', 'i', '5', 'W', '!', '7', '4', 'L', 'h', '~', 'm', 'w', 'C', '2', ':', 'O', 'G', '_', 'y', '&', ',', ';', 'z', '$', 'u', '(', ')', 'b', '=', '+', 'A', 'k', 'r', '3', 'q', 'R', 'H', 'c', '9', '-', 'o', '.', 'T', 's'}", "encoding": "'utf-8'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"component": "'/v1/agent/service/deregister/tailf'", "allowed_chars": "{'/', 't', 'a', 'F', 'Q', 'J', 'S', 'p', 'Z', 'N', '8', 'V', 'l', 'I', 'Y', 'D', 'f', '0', '6', '1', 'B', 'v', \"'\", 'K', 'X', 'd', '*', 'n', 'U', 'e', 'x', 'P', 'E', 'M', '@', 'g', 'j', 'i', '5', 'W', '!', '7', '4', 'L', 'h', '~', 'm', 'w', 'C', '2', ':', 'O', 'G', '_', 'y', '&', ',', ';', 'z', '$', 'u', '(', ')', 'b', '=', '+', 'A', 'k', 'r', '3', 'q', 'R', 'H', 'c', '9', '-', 'o', '.', 'T', 's'}", "encoding": "'utf-8'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"component": "'/v1/agent/service/deregister/tailf'", "allowed_chars": "{'/', 't', 'a', 'F', 'Q', 'J', 'S', 'p', 'Z', 'N', '8', 'V', 'l', 'I', 'Y', 'D', 'f', '0', '6', '1', 'B', 'v', \"'\", 'K', 'X', 'd', '*', 'n', 'U', 'e', 'x', 'P', 'E', 'M', '@', 'g', 'j', 'i', '5', 'W', '!', '7', '4', 'L', 'h', '~', 'm', 'w', 'C', '2', ':', 'O', 'G', '_', 'y', '&', ',', ';', 'z', '$', 'u', '(', ')', 'b', '=', '+', 'A', 'k', 'r', '3', 'q', 'R', 'H', 'c', '9', '-', 'o', '.', 'T', 's'}", "encoding": "'utf-8'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"component": "None", "allowed_chars": "{'/', 't', 'a', 'F', 'Q', 'J', 'S', '?', 'p', 'Z', 'N', '8', 'V', 'l', 'I', 'Y', 'D', 'f', '0', '6', '1', 'B', 'v', \"'\", 'K', 'X', 'd', '*', 'n', 'U', 'e', 'x', 'P', 'E', 'M', '@', 'g', 'j', 'i', '5', 'W', '!', '7', '4', 'L', 'h', '~', 'm', 'w', 'C', '2', ':', 'O', 'G', '_', 'y', '&', ',', ';', 'z', '$', 'u', '(', ')', 'b', '=', '+', 'A', 'k', 'r', '3', 'q', 'R', 'H', 'c', '9', '-', 'o', '.', 'T', 's'}", "encoding": "'utf-8'"}, "return_value": "None"}, {"func_args": {"component": "'/v1/agent/service/deregister/tailf'", "allowed_chars": "{'/', 't', 'a', 'F', 'Q', 'J', 'S', 'p', 'Z', 'N', '8', 'V', 'l', 'I', 'Y', 'D', 'f', '0', '6', '1', 'B', 'v', \"'\", 'K', 'X', 'd', '*', 'n', 'U', 'e', 'x', 'P', 'E', 'M', '@', 'g', 'j', 'i', '5', 'W', '!', '7', '4', 'L', 'h', '~', 'm', 'w', 'C', '2', ':', 'O', 'G', '_', 'y', '&', ',', ';', 'z', '$', 'u', '(', ')', 'b', '=', '+', 'A', 'k', 'r', '3', 'q', 'R', 'H', 'c', '9', '-', 'o', '.', 'T', 's'}", "encoding": "'utf-8'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"component": "'/v1/agent/service/deregister/tailf'", "allowed_chars": "{'/', 't', 'a', 'F', 'Q', 'J', 'S', 'p', 'Z', 'N', '8', 'V', 'l', 'I', 'Y', 'D', 'f', '0', '6', '1', 'B', 'v', \"'\", 'K', 'X', 'd', '*', 'n', 'U', 'e', 'x', 'P', 'E', 'M', '@', 'g', 'j', 'i', '5', 'W', '!', '7', '4', 'L', 'h', '~', 'm', 'w', 'C', '2', ':', 'O', 'G', '_', 'y', '&', ',', ';', 'z', '$', 'u', '(', ')', 'b', '=', '+', 'A', 'k', 'r', '3', 'q', 'R', 'H', 'c', '9', '-', 'o', '.', 'T', 's'}", "encoding": "'utf-8'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"component": "'/v1/agent/service/deregister/tailf'", "allowed_chars": "{'/', 't', 'a', 'F', 'Q', 'J', 'S', 'p', 'Z', 'N', '8', 'V', 'l', 'I', 'Y', 'D', 'f', '0', '6', '1', 'B', 'v', \"'\", 'K', 'X', 'd', '*', 'n', 'U', 'e', 'x', 'P', 'E', 'M', '@', 'g', 'j', 'i', '5', 'W', '!', '7', '4', 'L', 'h', '~', 'm', 'w', 'C', '2', ':', 'O', 'G', '_', 'y', '&', ',', ';', 'z', '$', 'u', '(', ')', 'b', '=', '+', 'A', 'k', 'r', '3', 'q', 'R', 'H', 'c', '9', '-', 'o', '.', 'T', 's'}", "encoding": "'utf-8'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"component": "'/v1/agent/service/deregister/tailf'", "allowed_chars": "{'/', 't', 'a', 'F', 'Q', 'J', 'S', 'p', 'Z', 'N', '8', 'V', 'l', 'I', 'Y', 'D', 'f', '0', '6', '1', 'B', 'v', \"'\", 'K', 'X', 'd', '*', 'n', 'U', 'e', 'x', 'P', 'E', 'M', '@', 'g', 'j', 'i', '5', 'W', '!', '7', '4', 'L', 'h', '~', 'm', 'w', 'C', '2', ':', 'O', 'G', '_', 'y', '&', ',', ';', 'z', '$', 'u', '(', ')', 'b', '=', '+', 'A', 'k', 'r', '3', 'q', 'R', 'H', 'c', '9', '-', 'o', '.', 'T', 's'}", "encoding": "'utf-8'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"component": "None", "allowed_chars": "{'/', 't', 'a', 'F', 'Q', 'J', 'S', '?', 'p', 'Z', 'N', '8', 'V', 'l', 'I', 'Y', 'D', 'f', '0', '6', '1', 'B', 'v', \"'\", 'K', 'X', 'd', '*', 'n', 'U', 'e', 'x', 'P', 'E', 'M', '@', 'g', 'j', 'i', '5', 'W', '!', '7', '4', 'L', 'h', '~', 'm', 'w', 'C', '2', ':', 'O', 'G', '_', 'y', '&', ',', ';', 'z', '$', 'u', '(', ')', 'b', '=', '+', 'A', 'k', 'r', '3', 'q', 'R', 'H', 'c', '9', '-', 'o', '.', 'T', 's'}", "encoding": "'utf-8'"}, "return_value": "None"}], "text": "def _encode_invalid_chars(component, allowed_chars, encoding=\"utf-8\"):\n    \"\"\"Percent-encodes a URI component without reapplying\n    onto an already percent-encoded component.\n    \"\"\"\n    if component is None:\n        return component\n\n    component = six.ensure_text(component)\n\n    # Normalize existing percent-encoded bytes.\n    # Try to see if the component we're encoding is already percent-encoded\n    # so we can skip all '%' characters but still encode all others.\n    component, percent_encodings = PERCENT_RE.subn(\n        lambda match: match.group(0).upper(), component\n    )\n\n    uri_bytes = component.encode(\"utf-8\", \"surrogatepass\")\n    is_percent_encoded = percent_encodings == uri_bytes.count(b\"%\")\n    encoded_component = bytearray()\n\n    for i in range(0, len(uri_bytes)):\n        # Will return a single character bytestring on both Python 2 & 3\n        byte = uri_bytes[i : i + 1]\n        byte_ord = ord(byte)\n        if (is_percent_encoded and byte == b\"%\") or (\n            byte_ord < 128 and byte.decode() in allowed_chars\n        ):\n            encoded_component += byte\n            continue\n        encoded_component.extend(b\"%\" + (hex(byte_ord)[2:].encode().zfill(2).upper()))\n\n    return encoded_component.decode(encoding)"}, "ensure_type": {"line": 412, "args": [{"func_args": {"x": "'http'"}, "return_value": "'http'"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "'invalid'"}, "return_value": "'invalid'"}, {"func_args": {"x": "'/v1/agent/service/register'"}, "return_value": "'/v1/agent/service/register'"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "'http'"}, "return_value": "'http'"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "'invalid'"}, "return_value": "'invalid'"}, {"func_args": {"x": "'/v1/agent/service/register'"}, "return_value": "'/v1/agent/service/register'"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "'/v1/agent/service/register'"}, "return_value": "'/v1/agent/service/register'"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "'http'"}, "return_value": "'http'"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "'invalid'"}, "return_value": "'invalid'"}, {"func_args": {"x": "'/v1/agent/service/register'"}, "return_value": "'/v1/agent/service/register'"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "'http'"}, "return_value": "'http'"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "'invalid'"}, "return_value": "'invalid'"}, {"func_args": {"x": "'/v1/agent/service/register'"}, "return_value": "'/v1/agent/service/register'"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "'/v1/agent/service/register'"}, "return_value": "'/v1/agent/service/register'"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "'http'"}, "return_value": "'http'"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "'invalid'"}, "return_value": "'invalid'"}, {"func_args": {"x": "'/v1/agent/check/pass/service:tailf'"}, "return_value": "'/v1/agent/check/pass/service:tailf'"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "'http'"}, "return_value": "'http'"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "'invalid'"}, "return_value": "'invalid'"}, {"func_args": {"x": "'/v1/agent/check/pass/service:tailf'"}, "return_value": "'/v1/agent/check/pass/service:tailf'"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "'/v1/agent/check/pass/service:tailf'"}, "return_value": "'/v1/agent/check/pass/service:tailf'"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "'http'"}, "return_value": "'http'"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "'invalid'"}, "return_value": "'invalid'"}, {"func_args": {"x": "'/v1/agent/service/deregister/tailf'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "'http'"}, "return_value": "'http'"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "'invalid'"}, "return_value": "'invalid'"}, {"func_args": {"x": "'/v1/agent/service/deregister/tailf'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "'/v1/agent/service/deregister/tailf'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "'http'"}, "return_value": "'http'"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "'invalid'"}, "return_value": "'invalid'"}, {"func_args": {"x": "'/v1/agent/service/deregister/tailf'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "'http'"}, "return_value": "'http'"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "'invalid'"}, "return_value": "'invalid'"}, {"func_args": {"x": "'/v1/agent/service/deregister/tailf'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "'/v1/agent/service/deregister/tailf'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "'http'"}, "return_value": "'http'"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "'invalid'"}, "return_value": "'invalid'"}, {"func_args": {"x": "'/v1/agent/service/deregister/tailf'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "'http'"}, "return_value": "'http'"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "'invalid'"}, "return_value": "'invalid'"}, {"func_args": {"x": "'/v1/agent/service/deregister/tailf'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "'/v1/agent/service/deregister/tailf'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"x": "None"}, "return_value": "None"}, {"func_args": {"x": "None"}, "return_value": "None"}], "text": "def ensure_type(x):\n        return x if x is None else ensure_func(x)"}, "_encode_target": {"line": 319, "args": [{"func_args": {"target": "'/v1/agent/service/register'"}, "return_value": "'/v1/agent/service/register'"}, {"func_args": {"target": "'/v1/agent/service/register'"}, "return_value": "'/v1/agent/service/register'"}, {"func_args": {"target": "'/v1/agent/check/pass/service:tailf'"}, "return_value": "'/v1/agent/check/pass/service:tailf'"}, {"func_args": {"target": "'/v1/agent/service/deregister/tailf'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"target": "'/v1/agent/service/deregister/tailf'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"target": "'/v1/agent/service/deregister/tailf'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}], "text": "def _encode_target(target):\n    \"\"\"Percent-encodes a request target so that there are no invalid characters\"\"\"\n    path, query = TARGET_RE.match(target).groups()\n    target = _encode_invalid_chars(path, PATH_CHARS)\n    query = _encode_invalid_chars(query, QUERY_CHARS)\n    if query is not None:\n        target += \"?\" + query\n    return target"}, "ensure_str": {"line": 991, "args": [{"func_args": {"s": "b'invalid'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'invalid'"}, {"func_args": {"s": "b'invalid'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'invalid'"}, {"func_args": {"s": "b'invalid'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'invalid'"}, {"func_args": {"s": "'/v1/agent/service/register'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'/v1/agent/service/register'"}, {"func_args": {"s": "'user-agent'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'user-agent'"}, {"func_args": {"s": "b'invalid'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'invalid'"}, {"func_args": {"s": "b'invalid'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'invalid'"}, {"func_args": {"s": "'/v1/agent/service/register'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'/v1/agent/service/register'"}, {"func_args": {"s": "'user-agent'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'user-agent'"}, {"func_args": {"s": "b'invalid'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'invalid'"}, {"func_args": {"s": "b'invalid'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'invalid'"}, {"func_args": {"s": "'/v1/agent/check/pass/service:tailf'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'/v1/agent/check/pass/service:tailf'"}, {"func_args": {"s": "'user-agent'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'user-agent'"}, {"func_args": {"s": "b'invalid'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'invalid'"}, {"func_args": {"s": "b'invalid'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'invalid'"}, {"func_args": {"s": "'/v1/agent/service/deregister/tailf'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"s": "'user-agent'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'user-agent'"}, {"func_args": {"s": "b'invalid'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'invalid'"}, {"func_args": {"s": "b'invalid'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'invalid'"}, {"func_args": {"s": "'/v1/agent/service/deregister/tailf'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"s": "'user-agent'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'user-agent'"}, {"func_args": {"s": "b'invalid'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'invalid'"}, {"func_args": {"s": "b'invalid'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'invalid'"}, {"func_args": {"s": "'/v1/agent/service/deregister/tailf'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"s": "'user-agent'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'user-agent'"}], "text": "def ensure_str(s, encoding=\"utf-8\", errors=\"strict\"):\n    \"\"\"Coerce *s* to `str`.\n\n    For Python 2:\n      - `unicode` -> encoded to `str`\n      - `str` -> `str`\n\n    For Python 3:\n      - `str` -> `str`\n      - `bytes` -> decoded to `str`\n    \"\"\"\n    # Optimization: Fast return for the common case.\n    if type(s) is str:\n        return s\n    if PY2 and isinstance(s, text_type):\n        return s.encode(encoding, errors)\n    elif PY3 and isinstance(s, binary_type):\n        return s.decode(encoding, errors)\n    elif not isinstance(s, (text_type, binary_type)):\n        raise TypeError(\"not expecting type '%s'\" % type(s))\n    return s"}, "ensure_text": {"line": 1014, "args": [{"func_args": {"s": "'/v1/agent/service/register'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'/v1/agent/service/register'"}, {"func_args": {"s": "'http'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'http'"}, {"func_args": {"s": "'invalid'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'invalid'"}, {"func_args": {"s": "'/v1/agent/service/register'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'/v1/agent/service/register'"}, {"func_args": {"s": "'/v1/agent/service/register'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'/v1/agent/service/register'"}, {"func_args": {"s": "'http'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'http'"}, {"func_args": {"s": "'invalid'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'invalid'"}, {"func_args": {"s": "'/v1/agent/service/register'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'/v1/agent/service/register'"}, {"func_args": {"s": "'/v1/agent/service/register'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'/v1/agent/service/register'"}, {"func_args": {"s": "'/v1/agent/service/register'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'/v1/agent/service/register'"}, {"func_args": {"s": "'/v1/agent/service/register'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'/v1/agent/service/register'"}, {"func_args": {"s": "'/v1/agent/service/register'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'/v1/agent/service/register'"}, {"func_args": {"s": "'http'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'http'"}, {"func_args": {"s": "'invalid'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'invalid'"}, {"func_args": {"s": "'/v1/agent/service/register'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'/v1/agent/service/register'"}, {"func_args": {"s": "'/v1/agent/service/register'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'/v1/agent/service/register'"}, {"func_args": {"s": "'http'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'http'"}, {"func_args": {"s": "'invalid'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'invalid'"}, {"func_args": {"s": "'/v1/agent/service/register'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'/v1/agent/service/register'"}, {"func_args": {"s": "'/v1/agent/service/register'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'/v1/agent/service/register'"}, {"func_args": {"s": "'/v1/agent/service/register'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'/v1/agent/service/register'"}, {"func_args": {"s": "'/v1/agent/service/register'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'/v1/agent/service/register'"}, {"func_args": {"s": "'/v1/agent/check/pass/service:tailf'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'/v1/agent/check/pass/service:tailf'"}, {"func_args": {"s": "'http'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'http'"}, {"func_args": {"s": "'invalid'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'invalid'"}, {"func_args": {"s": "'/v1/agent/check/pass/service:tailf'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'/v1/agent/check/pass/service:tailf'"}, {"func_args": {"s": "'/v1/agent/check/pass/service:tailf'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'/v1/agent/check/pass/service:tailf'"}, {"func_args": {"s": "'http'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'http'"}, {"func_args": {"s": "'invalid'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'invalid'"}, {"func_args": {"s": "'/v1/agent/check/pass/service:tailf'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'/v1/agent/check/pass/service:tailf'"}, {"func_args": {"s": "'/v1/agent/check/pass/service:tailf'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'/v1/agent/check/pass/service:tailf'"}, {"func_args": {"s": "'/v1/agent/check/pass/service:tailf'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'/v1/agent/check/pass/service:tailf'"}, {"func_args": {"s": "'/v1/agent/check/pass/service:tailf'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'/v1/agent/check/pass/service:tailf'"}, {"func_args": {"s": "'/v1/agent/service/deregister/tailf'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"s": "'http'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'http'"}, {"func_args": {"s": "'invalid'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'invalid'"}, {"func_args": {"s": "'/v1/agent/service/deregister/tailf'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"s": "'/v1/agent/service/deregister/tailf'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"s": "'http'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'http'"}, {"func_args": {"s": "'invalid'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'invalid'"}, {"func_args": {"s": "'/v1/agent/service/deregister/tailf'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"s": "'/v1/agent/service/deregister/tailf'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"s": "'/v1/agent/service/deregister/tailf'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"s": "'/v1/agent/service/deregister/tailf'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"s": "'/v1/agent/service/deregister/tailf'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"s": "'http'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'http'"}, {"func_args": {"s": "'invalid'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'invalid'"}, {"func_args": {"s": "'/v1/agent/service/deregister/tailf'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"s": "'/v1/agent/service/deregister/tailf'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"s": "'http'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'http'"}, {"func_args": {"s": "'invalid'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'invalid'"}, {"func_args": {"s": "'/v1/agent/service/deregister/tailf'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"s": "'/v1/agent/service/deregister/tailf'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"s": "'/v1/agent/service/deregister/tailf'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"s": "'/v1/agent/service/deregister/tailf'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"s": "'/v1/agent/service/deregister/tailf'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"s": "'http'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'http'"}, {"func_args": {"s": "'invalid'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'invalid'"}, {"func_args": {"s": "'/v1/agent/service/deregister/tailf'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"s": "'/v1/agent/service/deregister/tailf'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"s": "'http'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'http'"}, {"func_args": {"s": "'invalid'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'invalid'"}, {"func_args": {"s": "'/v1/agent/service/deregister/tailf'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"s": "'/v1/agent/service/deregister/tailf'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"s": "'/v1/agent/service/deregister/tailf'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}, {"func_args": {"s": "'/v1/agent/service/deregister/tailf'", "encoding": "'utf-8'", "errors": "'strict'"}, "return_value": "'/v1/agent/service/deregister/tailf'"}], "text": "def ensure_text(s, encoding=\"utf-8\", errors=\"strict\"):\n    \"\"\"Coerce *s* to six.text_type.\n\n    For Python 2:\n      - `unicode` -> `unicode`\n      - `str` -> `unicode`\n\n    For Python 3:\n      - `str` -> `str`\n      - `bytes` -> decoded to `str`\n    \"\"\"\n    if isinstance(s, binary_type):\n        return s.decode(encoding, errors)\n    elif isinstance(s, text_type):\n        return s\n    else:\n        raise TypeError(\"not expecting type '%s'\" % type(s))"}, "connection_requires_http_tunnel": {"line": 3, "args": [{"func_args": {"proxy_url": "None", "proxy_config": "None", "destination_scheme": "None"}, "return_value": "False"}, {"func_args": {"proxy_url": "None", "proxy_config": "None", "destination_scheme": "None"}, "return_value": "False"}, {"func_args": {"proxy_url": "None", "proxy_config": "None", "destination_scheme": "None"}, "return_value": "False"}, {"func_args": {"proxy_url": "None", "proxy_config": "None", "destination_scheme": "None"}, "return_value": "False"}, {"func_args": {"proxy_url": "None", "proxy_config": "None", "destination_scheme": "None"}, "return_value": "False"}, {"func_args": {"proxy_url": "None", "proxy_config": "None", "destination_scheme": "None"}, "return_value": "False"}], "text": "def connection_requires_http_tunnel(\n    proxy_url=None, proxy_config=None, destination_scheme=None\n):\n    \"\"\"\n    Returns True if the connection requires an HTTP CONNECT through the proxy.\n\n    :param URL proxy_url:\n        URL of the proxy.\n    :param ProxyConfig proxy_config:\n        Proxy configuration from poolmanager.py\n    :param str destination_scheme:\n        The scheme of the destination. (i.e https, http, etc)\n    \"\"\"\n    # If we're not using a proxy, no way to use a tunnel.\n    if proxy_url is None:\n        return False\n\n    # HTTP destinations never require tunneling, we always forward.\n    if destination_scheme == \"http\":\n        return False\n\n    # Support for forwarding with HTTPS proxies and HTTPS destinations.\n    if (\n        proxy_url.scheme == \"https\"\n        and proxy_config\n        and proxy_config.use_forwarding_for_https\n    ):\n        return False\n\n    # Otherwise always use a tunnel.\n    return True"}, "_is_magic": {"line": 273, "args": [{"func_args": {"name": "'debug'"}, "return_value": "False"}, {"func_args": {"name": "'error'"}, "return_value": "False"}, {"func_args": {"name": "'error'"}, "return_value": "False"}, {"func_args": {"name": "'error'"}, "return_value": "False"}, {"func_args": {"name": "'error'"}, "return_value": "False"}, {"func_args": {"name": "'debug'"}, "return_value": "False"}, {"func_args": {"name": "'error'"}, "return_value": "False"}, {"func_args": {"name": "'error'"}, "return_value": "False"}], "text": "def _is_magic(name):\n    return '__%s__' % name[2:-2] == name"}}