{"_args_converter": {"line": 816, "args": [{"func_args": {"args": "['unit-test']"}, "return_value": "('unit-test',)"}], "text": "def _args_converter(args: Iterable[str]) -> Tuple[str, ...]:\n    return tuple(args)"}, "_get_plugin_specs_as_list": {"line": 715, "args": [{"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "None"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}], "text": "def _get_plugin_specs_as_list(\n    specs: Union[None, types.ModuleType, str, Sequence[str]]\n) -> List[str]:\n    \"\"\"Parse a plugins specification into a list of plugin names.\"\"\"\n    # None means empty.\n    if specs is None:\n        return []\n    # Workaround for #3899 - a submodule which happens to be called \"pytest_plugins\".\n    if isinstance(specs, types.ModuleType):\n        return []\n    # Comma-separated list.\n    if isinstance(specs, str):\n        return specs.split(\",\") if specs else []\n    # Direct specification.\n    if isinstance(specs, collections.abc.Sequence):\n        return list(specs)\n    raise UsageError(\n        \"Plugins may be specified as a sequence or a ','-separated string of plugin names. Got: %r\"\n        % specs\n    )"}, "_assertion_supported": {"line": 1511, "args": [{"func_args": {}, "return_value": "True"}], "text": "def _assertion_supported() -> bool:\n    try:\n        assert False\n    except AssertionError:\n        return True\n    else:\n        return False"}, "scope2index": {"line": 803, "args": [{"func_args": {"scope": "'session'", "descr": "\"Fixture 'pytestconfig'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'capfd'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'capfdbinary'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'capsys'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'capsysbinary'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'tmp_path'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'session'", "descr": "\"Fixture 'tmp_path_factory'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'tmpdir'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'session'", "descr": "\"Fixture 'tmpdir_factory'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'monkeypatch'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'recwarn'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'record_property'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'session'", "descr": "\"Fixture 'record_testsuite_property'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'record_xml_attribute'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'session'", "descr": "\"Fixture 'doctest_namespace'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'cache'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'caplog'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'class'", "descr": "\"Fixture 'fixture'\"", "where": "'unit-test/Math/test_Calculus.py::TestFiniteDifference'"}, "return_value": "3"}, {"func_args": {"scope": "'class'", "descr": "\"Fixture 'fixture'\"", "where": "'unit-test/Pickle/test_Pickle.py::TestPickle'"}, "return_value": "3"}, {"func_args": {"scope": "'class'", "descr": "\"Fixture 'fixture'\"", "where": "'unit-test/Probe/test_WaveForm.py::TestUnits'"}, "return_value": "3"}, {"func_args": {"scope": "'class'", "descr": "\"Fixture 'fixture'\"", "where": "'unit-test/Spice/test_BasicElement.py::TestBasicElement'"}, "return_value": "3"}, {"func_args": {"scope": "'class'", "descr": "\"Fixture 'fixture'\"", "where": "'unit-test/Spice/test_Expression.py::TestParser'"}, "return_value": "3"}, {"func_args": {"scope": "'class'", "descr": "\"Fixture 'fixture'\"", "where": "'unit-test/Spice/test_HighLevelElement.py::TestHighLevelElement'"}, "return_value": "3"}, {"func_args": {"scope": "'class'", "descr": "\"Fixture 'fixture'\"", "where": "'unit-test/Spice/test_Netlist.py::TestNetlist'"}, "return_value": "3"}, {"func_args": {"scope": "'class'", "descr": "\"Fixture 'fixture'\"", "where": "'unit-test/Spice/test_Netlist.py::TestSubCircuit'"}, "return_value": "3"}, {"func_args": {"scope": "'class'", "descr": "\"Fixture 'fixture'\"", "where": "'unit-test/Spice/test_Netlist.py::TestCircuit'"}, "return_value": "3"}, {"func_args": {"scope": "'class'", "descr": "\"Fixture 'fixture'\"", "where": "'unit-test/SpiceParser/test_SpiceParser.py::TestSpiceParser'"}, "return_value": "3"}, {"func_args": {"scope": "'class'", "descr": "\"Fixture 'fixture'\"", "where": "'unit-test/Unit/test_Units.py::TestUnits'"}, "return_value": "3"}], "text": "def scope2index(scope: str, descr: str, where: Optional[str] = None) -> int:\n    \"\"\"Look up the index of ``scope`` and raise a descriptive value error\n    if not defined.\"\"\"\n    strscopes: Sequence[str] = scopes\n    try:\n        return strscopes.index(scope)\n    except ValueError:\n        fail(\n            \"{} {}got an unexpected scope value '{}'\".format(\n                descr, f\"from {where} \" if where else \"\", scope\n            ),\n            pytrace=False,\n        )"}, "sort_by_scope": {"line": 1539, "args": [{"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestFiniteDifference'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestFiniteDifference'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestPickle'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestPickle'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestPickle'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestUnits'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestBasicElement'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestParser'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestHighLevelElement'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestSubCircuit'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestCircuit'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestCircuit'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestCircuit'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestCircuit'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestCircuit'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestSpiceParser'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestSpiceParser'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestUnits'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestUnits'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestUnits'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestUnits'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestUnits'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestUnits'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestUnits'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestUnits'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestUnits'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestUnits'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestUnits'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestUnits'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestUnits'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}], "text": "def sort_by_scope(arg_name: str) -> int:\n            try:\n                fixturedefs = arg2fixturedefs[arg_name]\n            except KeyError:\n                return scopes.index(\"function\")\n            else:\n                return fixturedefs[-1].scopenum"}, "scopemismatch": {"line": 799, "args": [{"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}], "text": "def scopemismatch(currentscope: \"_Scope\", newscope: \"_Scope\") -> bool:\n    return scopes.index(newscope) > scopes.index(currentscope)"}, "pluralize": {"line": 1350, "args": [{"func_args": {"count": "28", "noun": "'passed'"}, "return_value": "(28, 'passed')"}, {"func_args": {"count": "2", "noun": "'skipped'"}, "return_value": "(2, 'skipped')"}], "text": "def pluralize(count: int, noun: str) -> Tuple[int, str]:\n    # No need to pluralize words such as `failed` or `passed`.\n    if noun not in [\"error\", \"warnings\", \"test\"]:\n        return count, noun\n\n    # The `warnings` key is plural. To avoid API breakage, we keep it that way but\n    # set it to singular here so we can determine plurality in the same way as we do\n    # for `error`.\n    noun = noun.replace(\"warnings\", \"warning\")\n\n    return count, noun + \"s\" if count != 1 else noun"}, "format_session_duration": {"line": 1377, "args": [{"func_args": {"seconds": "1072.4934256076813"}, "return_value": "'1072.49s (0:17:52)'"}], "text": "def format_session_duration(seconds: float) -> str:\n    \"\"\"Format the given seconds in a human readable manner to show in the final summary.\"\"\"\n    if seconds < 60:\n        return f\"{seconds:.2f}s\"\n    else:\n        dt = datetime.timedelta(seconds=int(seconds))\n        return f\"{seconds:.2f}s ({dt})\""}, "_get_auto_indent": {"line": 113, "args": [{"func_args": {"auto_indent_option": "None"}, "return_value": "0"}, {"func_args": {"auto_indent_option": "None"}, "return_value": "0"}]}, "_get_stderr_fileno": {"line": 68, "args": [{"func_args": {}, "return_value": "2"}, {"func_args": {}, "return_value": "2"}]}, "get_terminal_width": {"line": 15, "args": [{"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}], "text": "def get_terminal_width() -> int:\n    width, _ = shutil.get_terminal_size(fallback=(80, 24))\n\n    # The Windows get_terminal_size may be bogus, let's sanify a bit.\n    if width < 40:\n        width = 80\n\n    return width"}, "is_option": {"line": 135, "args": [{"func_args": {"x": "'unit-test'"}, "return_value": "False"}], "text": "def is_option(x: str) -> bool:\n        return x.startswith(\"-\")"}, "get_file_part_from_node_id": {"line": 138, "args": [{"func_args": {"x": "'unit-test'"}, "return_value": "'unit-test'"}], "text": "def get_file_part_from_node_id(x: str) -> str:\n        return x.split(\"::\")[0]"}, "_is_same": {"line": 558, "args": [{"func_args": {"f1": "'/usr/app/src/test_repos/PySpice/unit-test/Math/test_Calculus.py'", "f2": "'/usr/app/src/test_repos/PySpice/unit-test/Math/test_Calculus.py'"}, "return_value": "True"}, {"func_args": {"f1": "'/usr/app/src/test_repos/PySpice/unit-test/Pickle/test_Pickle.py'", "f2": "'/usr/app/src/test_repos/PySpice/unit-test/Pickle/test_Pickle.py'"}, "return_value": "True"}, {"func_args": {"f1": "'/usr/app/src/test_repos/PySpice/unit-test/Probe/test_WaveForm.py'", "f2": "'/usr/app/src/test_repos/PySpice/unit-test/Probe/test_WaveForm.py'"}, "return_value": "True"}, {"func_args": {"f1": "'/usr/app/src/test_repos/PySpice/unit-test/Spice/test_BasicElement.py'", "f2": "'/usr/app/src/test_repos/PySpice/unit-test/Spice/test_BasicElement.py'"}, "return_value": "True"}, {"func_args": {"f1": "'/usr/app/src/test_repos/PySpice/unit-test/Spice/test_Expression.py'", "f2": "'/usr/app/src/test_repos/PySpice/unit-test/Spice/test_Expression.py'"}, "return_value": "True"}, {"func_args": {"f1": "'/usr/app/src/test_repos/PySpice/unit-test/Spice/test_HighLevelElement.py'", "f2": "'/usr/app/src/test_repos/PySpice/unit-test/Spice/test_HighLevelElement.py'"}, "return_value": "True"}, {"func_args": {"f1": "'/usr/app/src/test_repos/PySpice/unit-test/Spice/test_Netlist.py'", "f2": "'/usr/app/src/test_repos/PySpice/unit-test/Spice/test_Netlist.py'"}, "return_value": "True"}, {"func_args": {"f1": "'/usr/app/src/test_repos/PySpice/unit-test/SpiceParser/test_SpiceParser.py'", "f2": "'/usr/app/src/test_repos/PySpice/unit-test/SpiceParser/test_SpiceParser.py'"}, "return_value": "True"}, {"func_args": {"f1": "'/usr/app/src/test_repos/PySpice/unit-test/Unit/test_Units.py'", "f2": "'/usr/app/src/test_repos/PySpice/unit-test/Unit/test_Units.py'"}, "return_value": "True"}], "text": "def _is_same(f1: str, f2: str) -> bool:\n        return os.path.samefile(f1, f2)"}, "iscommentline": {"line": 162, "args": [{"func_args": {"line": "'[tox]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'envlist = py38\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}, {"func_args": {"line": "'[testenv]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'commands = viztracer --ignore_frozen --log_func_args --log_func_retval -o result0.json -- pytest unit-test\\n'"}, "return_value": "False"}, {"func_args": {"line": "'deps = pytest\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tviztracer \\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}, {"func_args": {"line": "'# https://setuptools.readthedocs.io/en/latest/setuptools.html#configuring-setup-using-setup-cfg-files\\n'"}, "return_value": "True"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}, {"func_args": {"line": "'[metadata]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'name = PySpice\\n'"}, "return_value": "False"}, {"func_args": {"line": "'version = attr: PySpice.__version__\\n'"}, "return_value": "False"}, {"func_args": {"line": "'url = https://github.com/FabriceSalvaire/PySpice\\n'"}, "return_value": "False"}, {"func_args": {"line": "'# download_url =\\n'"}, "return_value": "True"}, {"func_args": {"line": "'project_urls =\\n'"}, "return_value": "False"}, {"func_args": {"line": "'    Documentation = https://pyspice.fabrice-salvaire.fr\\n'"}, "return_value": "False"}, {"func_args": {"line": "'    Code = https://github.com/FabriceSalvaire/PySpice\\n'"}, "return_value": "False"}, {"func_args": {"line": "'    Issue Tracker = https://github.com/FabriceSalvaire/PySpice/issues\\n'"}, "return_value": "False"}, {"func_args": {"line": "'    Forum = https://pyspice.discourse.group\\n'"}, "return_value": "False"}, {"func_args": {"line": "'license = GPLv3\\n'"}, "return_value": "False"}, {"func_args": {"line": "'# license_file =\\n'"}, "return_value": "True"}, {"func_args": {"line": "'license_files = LICENSE.txt\\n'"}, "return_value": "False"}, {"func_args": {"line": "'author = Fabrice Salvaire\\n'"}, "return_value": "False"}, {"func_args": {"line": "'author_email = pyspice@fabrice-salvaire.fr\\n'"}, "return_value": "False"}, {"func_args": {"line": "'maintainer = Fabrice Salvaire\\n'"}, "return_value": "False"}, {"func_args": {"line": "'maintainer_email = pyspice@fabrice-salvaire.fr\\n'"}, "return_value": "False"}, {"func_args": {"line": "'description = Simulate electronic circuit using Python and the Ngspice / Xyce simulators\\n'"}, "return_value": "False"}, {"func_args": {"line": "'# long_description = file: README.rst\\n'"}, "return_value": "True"}, {"func_args": {"line": "'# , CHANGELOG.rst, LICENSE.rst\\n'"}, "return_value": "True"}, {"func_args": {"line": "'long_description_content_type = text/x-rst\\n'"}, "return_value": "False"}, {"func_args": {"line": "'keywords = ngspice, xyce, spice, berkeley, electronic, circuit, simulation, simulator\\n'"}, "return_value": "False"}, {"func_args": {"line": "'classifiers =\\n'"}, "return_value": "False"}, {"func_args": {"line": "'    Topic :: Scientific/Engineering\\n'"}, "return_value": "False"}, {"func_args": {"line": "'    Intended Audience :: Education\\n'"}, "return_value": "False"}, {"func_args": {"line": "'    Development Status :: 5 - Production/Stable\\n'"}, "return_value": "False"}, {"func_args": {"line": "'    License :: OSI Approved :: GNU General Public License (GPL)\\n'"}, "return_value": "False"}, {"func_args": {"line": "'    Operating System :: OS Independent\\n'"}, "return_value": "False"}, {"func_args": {"line": "'    Programming Language :: Python :: 3.6\\n'"}, "return_value": "False"}, {"func_args": {"line": "'platforms = any\\n'"}, "return_value": "False"}, {"func_args": {"line": "'# provides =\\n'"}, "return_value": "True"}, {"func_args": {"line": "'# requires =\\n'"}, "return_value": "True"}, {"func_args": {"line": "'# obsoletes =\\n'"}, "return_value": "True"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}, {"func_args": {"line": "'[options]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'packages = find:\\n'"}, "return_value": "False"}, {"func_args": {"line": "'python_requires = >=3.6\\n'"}, "return_value": "False"}, {"func_args": {"line": "'setup_require = setuptools\\n'"}, "return_value": "False"}, {"func_args": {"line": "'# install_requires should declare the loosest possible dependency versions that are still workable\\n'"}, "return_value": "True"}, {"func_args": {"line": "'# https://packaging.python.org/discussions/install-requires-vs-requirements/\\n'"}, "return_value": "True"}, {"func_args": {"line": "'install_requires =\\n'"}, "return_value": "False"}, {"func_args": {"line": "'    PyYAML>=5.3\\n'"}, "return_value": "False"}, {"func_args": {"line": "'    cffi>=1.14\\n'"}, "return_value": "False"}, {"func_args": {"line": "'    matplotlib>=3.2\\n'"}, "return_value": "False"}, {"func_args": {"line": "'    numpy>=1.18\\n'"}, "return_value": "False"}, {"func_args": {"line": "'    ply>=3.11\\n'"}, "return_value": "False"}, {"func_args": {"line": "'    scipy>=1.4\\n'"}, "return_value": "False"}, {"func_args": {"line": "'    requests>=2.23\\n'"}, "return_value": "False"}, {"func_args": {"line": "'zip_safe = False\\n'"}, "return_value": "False"}, {"func_args": {"line": "'# Look in MANIFEST.in\\n'"}, "return_value": "True"}, {"func_args": {"line": "'include_package_data = True\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}, {"func_args": {"line": "'[options.packages.find]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'exclude =\\n'"}, "return_value": "False"}, {"func_args": {"line": "'    unit-test\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}, {"func_args": {"line": "'[options.package_data]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'PySpice.Config = logging.yml\\n'"}, "return_value": "False"}, {"func_args": {"line": "'PySpice.Spice.NgSpice = api.h\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}, {"func_args": {"line": "'[options.entry_points]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'console_scripts =\\n'"}, "return_value": "False"}, {"func_args": {"line": "'    cir2py = PySpice.Scripts.cir2py:main\\n'"}, "return_value": "False"}, {"func_args": {"line": "'    pyspice-post-installation = PySpice.Scripts.pyspice_post_installation:main\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}, {"func_args": {"line": "'[bdist_wheel]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'universal = 1\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}, {"func_args": {"line": "'[flake8]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'max-line-length = 120\\n'"}, "return_value": "False"}, {"func_args": {"line": "'# https://flake8.pycqa.org/en/latest/user/error-codes.html\\n'"}, "return_value": "True"}, {"func_args": {"line": "'# https://pycodestyle.pycqa.org/en/latest/intro.html#error-codes\\n'"}, "return_value": "True"}, {"func_args": {"line": "'# E226 missing whitespace around arithmetic operator\\n'"}, "return_value": "True"}, {"func_args": {"line": "'# E302  expected 2 blank lines\\n'"}, "return_value": "True"}, {"func_args": {"line": "'# E303  too many blank lines\\n'"}, "return_value": "True"}, {"func_args": {"line": "'# E305 expected 2 blank lines after class or function definition\\n'"}, "return_value": "True"}, {"func_args": {"line": "'# E402  module level import not at top of file\\n'"}, "return_value": "True"}, {"func_args": {"line": "'ignore = E226, E302, E303, E305, E402\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}, {"func_args": {"line": "'[pylint.message]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'# module-naming-style=PascalCase\\n'"}, "return_value": "True"}, {"func_args": {"line": "'disable =\\n'"}, "return_value": "False"}, {"func_args": {"line": "'  fixme,  # spam ...\\n'"}, "return_value": "False"}, {"func_args": {"line": "'  invalid-name,  # for module name not conforming to snake_case\\n'"}, "return_value": "False"}, {"func_args": {"line": "'  missing-class-docstring, # spam ...\\n'"}, "return_value": "False"}, {"func_args": {"line": "'  missing-function-docstring,\\n'"}, "return_value": "False"}, {"func_args": {"line": "'  missing-module-docstring,\\n'"}, "return_value": "False"}, {"func_args": {"line": "'  no-else-return  # sometimes it is more readable ...\\n'"}, "return_value": "False"}], "text": "def iscommentline(line):\n    c = line.lstrip()[:1]\n    return c in COMMENTCHARS"}, "normalize_mark_list": {"line": 355, "args": [{"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}], "text": "def normalize_mark_list(mark_list: Iterable[Union[Mark, MarkDecorator]]) -> List[Mark]:\n    \"\"\"Normalize marker decorating helpers to mark objects.\n\n    :type List[Union[Mark, Markdecorator]] mark_list:\n    :rtype: List[Mark]\n    \"\"\"\n    extracted = [\n        getattr(mark, \"mark\", mark) for mark in mark_list\n    ]  # unpack MarkDecorator\n    for mark in extracted:\n        if not isinstance(mark, Mark):\n            raise TypeError(f\"got {mark!r} instead of Mark\")\n    return [x for x in extracted if isinstance(x, Mark)]"}, "iterparentnodeids": {"line": 44, "args": [{"func_args": {"nodeid": "'unit-test/Math/test_Calculus.py::TestFiniteDifference::test_coefficient'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Math/test_Calculus.py::TestFiniteDifference::test_coefficient'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Math/test_Calculus.py::TestFiniteDifference::test_coefficient'"}, "return_value": "'unit-test/Math'"}, {"func_args": {"nodeid": "'unit-test/Math/test_Calculus.py::TestFiniteDifference::test_coefficient'"}, "return_value": "'unit-test/Math/test_Calculus.py'"}, {"func_args": {"nodeid": "'unit-test/Math/test_Calculus.py::TestFiniteDifference::test_coefficient'"}, "return_value": "'unit-test/Math/test_Calculus.py::TestFiniteDifference'"}, {"func_args": {"nodeid": "'unit-test/Math/test_Calculus.py::TestFiniteDifference::test_coefficient'"}, "return_value": "'unit-test/Math/test_Calculus.py::TestFiniteDifference::test_coefficient'"}, {"func_args": {"nodeid": "'unit-test/Math/test_Calculus.py::TestFiniteDifference::test_coefficient'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Math/test_Calculus.py::TestFiniteDifference::test_coefficient'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Math/test_Calculus.py::TestFiniteDifference::test_coefficient'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Math/test_Calculus.py::TestFiniteDifference::test_coefficient'"}, "return_value": "'unit-test/Math'"}, {"func_args": {"nodeid": "'unit-test/Math/test_Calculus.py::TestFiniteDifference::test_coefficient'"}, "return_value": "'unit-test/Math/test_Calculus.py'"}, {"func_args": {"nodeid": "'unit-test/Math/test_Calculus.py::TestFiniteDifference::test_coefficient'"}, "return_value": "'unit-test/Math/test_Calculus.py::TestFiniteDifference'"}, {"func_args": {"nodeid": "'unit-test/Math/test_Calculus.py::TestFiniteDifference::test_coefficient'"}, "return_value": "'unit-test/Math/test_Calculus.py::TestFiniteDifference::test_coefficient'"}, {"func_args": {"nodeid": "'unit-test/Math/test_Calculus.py::TestFiniteDifference::test_coefficient'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Math/test_Calculus.py::TestFiniteDifference::test_derivative'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Math/test_Calculus.py::TestFiniteDifference::test_derivative'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Math/test_Calculus.py::TestFiniteDifference::test_derivative'"}, "return_value": "'unit-test/Math'"}, {"func_args": {"nodeid": "'unit-test/Math/test_Calculus.py::TestFiniteDifference::test_derivative'"}, "return_value": "'unit-test/Math/test_Calculus.py'"}, {"func_args": {"nodeid": "'unit-test/Math/test_Calculus.py::TestFiniteDifference::test_derivative'"}, "return_value": "'unit-test/Math/test_Calculus.py::TestFiniteDifference'"}, {"func_args": {"nodeid": "'unit-test/Math/test_Calculus.py::TestFiniteDifference::test_derivative'"}, "return_value": "'unit-test/Math/test_Calculus.py::TestFiniteDifference::test_derivative'"}, {"func_args": {"nodeid": "'unit-test/Math/test_Calculus.py::TestFiniteDifference::test_derivative'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Math/test_Calculus.py::TestFiniteDifference::test_derivative'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Math/test_Calculus.py::TestFiniteDifference::test_derivative'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Math/test_Calculus.py::TestFiniteDifference::test_derivative'"}, "return_value": "'unit-test/Math'"}, {"func_args": {"nodeid": "'unit-test/Math/test_Calculus.py::TestFiniteDifference::test_derivative'"}, "return_value": "'unit-test/Math/test_Calculus.py'"}, {"func_args": {"nodeid": "'unit-test/Math/test_Calculus.py::TestFiniteDifference::test_derivative'"}, "return_value": "'unit-test/Math/test_Calculus.py::TestFiniteDifference'"}, {"func_args": {"nodeid": "'unit-test/Math/test_Calculus.py::TestFiniteDifference::test_derivative'"}, "return_value": "'unit-test/Math/test_Calculus.py::TestFiniteDifference::test_derivative'"}, {"func_args": {"nodeid": "'unit-test/Math/test_Calculus.py::TestFiniteDifference::test_derivative'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Pickle/test_Pickle.py::TestPickle::test_ndarray'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Pickle/test_Pickle.py::TestPickle::test_ndarray'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Pickle/test_Pickle.py::TestPickle::test_ndarray'"}, "return_value": "'unit-test/Pickle'"}, {"func_args": {"nodeid": "'unit-test/Pickle/test_Pickle.py::TestPickle::test_ndarray'"}, "return_value": "'unit-test/Pickle/test_Pickle.py'"}, {"func_args": {"nodeid": "'unit-test/Pickle/test_Pickle.py::TestPickle::test_ndarray'"}, "return_value": "'unit-test/Pickle/test_Pickle.py::TestPickle'"}, {"func_args": {"nodeid": "'unit-test/Pickle/test_Pickle.py::TestPickle::test_ndarray'"}, "return_value": "'unit-test/Pickle/test_Pickle.py::TestPickle::test_ndarray'"}, {"func_args": {"nodeid": "'unit-test/Pickle/test_Pickle.py::TestPickle::test_ndarray'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Pickle/test_Pickle.py::TestPickle::test_ndarray'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Pickle/test_Pickle.py::TestPickle::test_ndarray'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Pickle/test_Pickle.py::TestPickle::test_ndarray'"}, "return_value": "'unit-test/Pickle'"}, {"func_args": {"nodeid": "'unit-test/Pickle/test_Pickle.py::TestPickle::test_ndarray'"}, "return_value": "'unit-test/Pickle/test_Pickle.py'"}, {"func_args": {"nodeid": "'unit-test/Pickle/test_Pickle.py::TestPickle::test_ndarray'"}, "return_value": "'unit-test/Pickle/test_Pickle.py::TestPickle'"}, {"func_args": {"nodeid": "'unit-test/Pickle/test_Pickle.py::TestPickle::test_ndarray'"}, "return_value": "'unit-test/Pickle/test_Pickle.py::TestPickle::test_ndarray'"}, {"func_args": {"nodeid": "'unit-test/Pickle/test_Pickle.py::TestPickle::test_ndarray'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Pickle/test_Pickle.py::TestPickle::test_unit_values'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Pickle/test_Pickle.py::TestPickle::test_unit_values'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Pickle/test_Pickle.py::TestPickle::test_unit_values'"}, "return_value": "'unit-test/Pickle'"}, {"func_args": {"nodeid": "'unit-test/Pickle/test_Pickle.py::TestPickle::test_unit_values'"}, "return_value": "'unit-test/Pickle/test_Pickle.py'"}, {"func_args": {"nodeid": "'unit-test/Pickle/test_Pickle.py::TestPickle::test_unit_values'"}, "return_value": "'unit-test/Pickle/test_Pickle.py::TestPickle'"}, {"func_args": {"nodeid": "'unit-test/Pickle/test_Pickle.py::TestPickle::test_unit_values'"}, "return_value": "'unit-test/Pickle/test_Pickle.py::TestPickle::test_unit_values'"}, {"func_args": {"nodeid": "'unit-test/Pickle/test_Pickle.py::TestPickle::test_unit_values'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Pickle/test_Pickle.py::TestPickle::test_unit_values'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Pickle/test_Pickle.py::TestPickle::test_unit_values'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Pickle/test_Pickle.py::TestPickle::test_unit_values'"}, "return_value": "'unit-test/Pickle'"}, {"func_args": {"nodeid": "'unit-test/Pickle/test_Pickle.py::TestPickle::test_unit_values'"}, "return_value": "'unit-test/Pickle/test_Pickle.py'"}, {"func_args": {"nodeid": "'unit-test/Pickle/test_Pickle.py::TestPickle::test_unit_values'"}, "return_value": "'unit-test/Pickle/test_Pickle.py::TestPickle'"}, {"func_args": {"nodeid": "'unit-test/Pickle/test_Pickle.py::TestPickle::test_unit_values'"}, "return_value": "'unit-test/Pickle/test_Pickle.py::TestPickle::test_unit_values'"}, {"func_args": {"nodeid": "'unit-test/Pickle/test_Pickle.py::TestPickle::test_unit_values'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Pickle/test_Pickle.py::TestPickle::test_waveformx'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Pickle/test_Pickle.py::TestPickle::test_waveformx'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Pickle/test_Pickle.py::TestPickle::test_waveformx'"}, "return_value": "'unit-test/Pickle'"}, {"func_args": {"nodeid": "'unit-test/Pickle/test_Pickle.py::TestPickle::test_waveformx'"}, "return_value": "'unit-test/Pickle/test_Pickle.py'"}, {"func_args": {"nodeid": "'unit-test/Pickle/test_Pickle.py::TestPickle::test_waveformx'"}, "return_value": "'unit-test/Pickle/test_Pickle.py::TestPickle'"}, {"func_args": {"nodeid": "'unit-test/Pickle/test_Pickle.py::TestPickle::test_waveformx'"}, "return_value": "'unit-test/Pickle/test_Pickle.py::TestPickle::test_waveformx'"}, {"func_args": {"nodeid": "'unit-test/Pickle/test_Pickle.py::TestPickle::test_waveformx'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Pickle/test_Pickle.py::TestPickle::test_waveformx'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Pickle/test_Pickle.py::TestPickle::test_waveformx'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Pickle/test_Pickle.py::TestPickle::test_waveformx'"}, "return_value": "'unit-test/Pickle'"}, {"func_args": {"nodeid": "'unit-test/Pickle/test_Pickle.py::TestPickle::test_waveformx'"}, "return_value": "'unit-test/Pickle/test_Pickle.py'"}, {"func_args": {"nodeid": "'unit-test/Pickle/test_Pickle.py::TestPickle::test_waveformx'"}, "return_value": "'unit-test/Pickle/test_Pickle.py::TestPickle'"}, {"func_args": {"nodeid": "'unit-test/Pickle/test_Pickle.py::TestPickle::test_waveformx'"}, "return_value": "'unit-test/Pickle/test_Pickle.py::TestPickle::test_waveformx'"}, {"func_args": {"nodeid": "'unit-test/Pickle/test_Pickle.py::TestPickle::test_waveformx'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Probe/test_WaveForm.py::TestUnits::test'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Probe/test_WaveForm.py::TestUnits::test'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Probe/test_WaveForm.py::TestUnits::test'"}, "return_value": "'unit-test/Probe'"}, {"func_args": {"nodeid": "'unit-test/Probe/test_WaveForm.py::TestUnits::test'"}, "return_value": "'unit-test/Probe/test_WaveForm.py'"}, {"func_args": {"nodeid": "'unit-test/Probe/test_WaveForm.py::TestUnits::test'"}, "return_value": "'unit-test/Probe/test_WaveForm.py::TestUnits'"}, {"func_args": {"nodeid": "'unit-test/Probe/test_WaveForm.py::TestUnits::test'"}, "return_value": "'unit-test/Probe/test_WaveForm.py::TestUnits::test'"}, {"func_args": {"nodeid": "'unit-test/Probe/test_WaveForm.py::TestUnits::test'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Probe/test_WaveForm.py::TestUnits::test'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Probe/test_WaveForm.py::TestUnits::test'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Probe/test_WaveForm.py::TestUnits::test'"}, "return_value": "'unit-test/Probe'"}, {"func_args": {"nodeid": "'unit-test/Probe/test_WaveForm.py::TestUnits::test'"}, "return_value": "'unit-test/Probe/test_WaveForm.py'"}, {"func_args": {"nodeid": "'unit-test/Probe/test_WaveForm.py::TestUnits::test'"}, "return_value": "'unit-test/Probe/test_WaveForm.py::TestUnits'"}, {"func_args": {"nodeid": "'unit-test/Probe/test_WaveForm.py::TestUnits::test'"}, "return_value": "'unit-test/Probe/test_WaveForm.py::TestUnits::test'"}, {"func_args": {"nodeid": "'unit-test/Probe/test_WaveForm.py::TestUnits::test'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Spice/test_BasicElement.py::TestBasicElement::test'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Spice/test_BasicElement.py::TestBasicElement::test'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_BasicElement.py::TestBasicElement::test'"}, "return_value": "'unit-test/Spice'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_BasicElement.py::TestBasicElement::test'"}, "return_value": "'unit-test/Spice/test_BasicElement.py'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_BasicElement.py::TestBasicElement::test'"}, "return_value": "'unit-test/Spice/test_BasicElement.py::TestBasicElement'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_BasicElement.py::TestBasicElement::test'"}, "return_value": "'unit-test/Spice/test_BasicElement.py::TestBasicElement::test'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_BasicElement.py::TestBasicElement::test'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Spice/test_BasicElement.py::TestBasicElement::test'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Spice/test_BasicElement.py::TestBasicElement::test'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_BasicElement.py::TestBasicElement::test'"}, "return_value": "'unit-test/Spice'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_BasicElement.py::TestBasicElement::test'"}, "return_value": "'unit-test/Spice/test_BasicElement.py'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_BasicElement.py::TestBasicElement::test'"}, "return_value": "'unit-test/Spice/test_BasicElement.py::TestBasicElement'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_BasicElement.py::TestBasicElement::test'"}, "return_value": "'unit-test/Spice/test_BasicElement.py::TestBasicElement::test'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_BasicElement.py::TestBasicElement::test'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Expression.py::TestParser::test_parser'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Expression.py::TestParser::test_parser'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Expression.py::TestParser::test_parser'"}, "return_value": "'unit-test/Spice'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Expression.py::TestParser::test_parser'"}, "return_value": "'unit-test/Spice/test_Expression.py'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Expression.py::TestParser::test_parser'"}, "return_value": "'unit-test/Spice/test_Expression.py::TestParser'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Expression.py::TestParser::test_parser'"}, "return_value": "'unit-test/Spice/test_Expression.py::TestParser::test_parser'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Expression.py::TestParser::test_parser'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Expression.py::TestParser::test_parser'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Expression.py::TestParser::test_parser'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Expression.py::TestParser::test_parser'"}, "return_value": "'unit-test/Spice'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Expression.py::TestParser::test_parser'"}, "return_value": "'unit-test/Spice/test_Expression.py'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Expression.py::TestParser::test_parser'"}, "return_value": "'unit-test/Spice/test_Expression.py::TestParser'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Expression.py::TestParser::test_parser'"}, "return_value": "'unit-test/Spice/test_Expression.py::TestParser::test_parser'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Expression.py::TestParser::test_parser'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Spice/test_HighLevelElement.py::TestHighLevelElement::test'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Spice/test_HighLevelElement.py::TestHighLevelElement::test'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_HighLevelElement.py::TestHighLevelElement::test'"}, "return_value": "'unit-test/Spice'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_HighLevelElement.py::TestHighLevelElement::test'"}, "return_value": "'unit-test/Spice/test_HighLevelElement.py'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_HighLevelElement.py::TestHighLevelElement::test'"}, "return_value": "'unit-test/Spice/test_HighLevelElement.py::TestHighLevelElement'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_HighLevelElement.py::TestHighLevelElement::test'"}, "return_value": "'unit-test/Spice/test_HighLevelElement.py::TestHighLevelElement::test'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_HighLevelElement.py::TestHighLevelElement::test'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Spice/test_HighLevelElement.py::TestHighLevelElement::test'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Spice/test_HighLevelElement.py::TestHighLevelElement::test'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_HighLevelElement.py::TestHighLevelElement::test'"}, "return_value": "'unit-test/Spice'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_HighLevelElement.py::TestHighLevelElement::test'"}, "return_value": "'unit-test/Spice/test_HighLevelElement.py'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_HighLevelElement.py::TestHighLevelElement::test'"}, "return_value": "'unit-test/Spice/test_HighLevelElement.py::TestHighLevelElement'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_HighLevelElement.py::TestHighLevelElement::test'"}, "return_value": "'unit-test/Spice/test_HighLevelElement.py::TestHighLevelElement::test'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_HighLevelElement.py::TestHighLevelElement::test'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestSubCircuit::test'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestSubCircuit::test'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestSubCircuit::test'"}, "return_value": "'unit-test/Spice'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestSubCircuit::test'"}, "return_value": "'unit-test/Spice/test_Netlist.py'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestSubCircuit::test'"}, "return_value": "'unit-test/Spice/test_Netlist.py::TestSubCircuit'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestSubCircuit::test'"}, "return_value": "'unit-test/Spice/test_Netlist.py::TestSubCircuit::test'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestSubCircuit::test'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestSubCircuit::test'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestSubCircuit::test'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestSubCircuit::test'"}, "return_value": "'unit-test/Spice'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestSubCircuit::test'"}, "return_value": "'unit-test/Spice/test_Netlist.py'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestSubCircuit::test'"}, "return_value": "'unit-test/Spice/test_Netlist.py::TestSubCircuit'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestSubCircuit::test'"}, "return_value": "'unit-test/Spice/test_Netlist.py::TestSubCircuit::test'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestSubCircuit::test'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_basic'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_basic'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_basic'"}, "return_value": "'unit-test/Spice'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_basic'"}, "return_value": "'unit-test/Spice/test_Netlist.py'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_basic'"}, "return_value": "'unit-test/Spice/test_Netlist.py::TestCircuit'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_basic'"}, "return_value": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_basic'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_basic'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_basic'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_basic'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_basic'"}, "return_value": "'unit-test/Spice'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_basic'"}, "return_value": "'unit-test/Spice/test_Netlist.py'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_basic'"}, "return_value": "'unit-test/Spice/test_Netlist.py::TestCircuit'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_basic'"}, "return_value": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_basic'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_basic'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_ground_node'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_ground_node'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_ground_node'"}, "return_value": "'unit-test/Spice'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_ground_node'"}, "return_value": "'unit-test/Spice/test_Netlist.py'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_ground_node'"}, "return_value": "'unit-test/Spice/test_Netlist.py::TestCircuit'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_ground_node'"}, "return_value": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_ground_node'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_ground_node'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_ground_node'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_ground_node'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_ground_node'"}, "return_value": "'unit-test/Spice'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_ground_node'"}, "return_value": "'unit-test/Spice/test_Netlist.py'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_ground_node'"}, "return_value": "'unit-test/Spice/test_Netlist.py::TestCircuit'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_ground_node'"}, "return_value": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_ground_node'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_ground_node'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_keyword_clash'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_keyword_clash'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_keyword_clash'"}, "return_value": "'unit-test/Spice'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_keyword_clash'"}, "return_value": "'unit-test/Spice/test_Netlist.py'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_keyword_clash'"}, "return_value": "'unit-test/Spice/test_Netlist.py::TestCircuit'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_keyword_clash'"}, "return_value": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_keyword_clash'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_keyword_clash'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_keyword_clash'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_keyword_clash'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_keyword_clash'"}, "return_value": "'unit-test/Spice'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_keyword_clash'"}, "return_value": "'unit-test/Spice/test_Netlist.py'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_keyword_clash'"}, "return_value": "'unit-test/Spice/test_Netlist.py::TestCircuit'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_keyword_clash'"}, "return_value": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_keyword_clash'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_keyword_clash'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_param'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_param'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_param'"}, "return_value": "'unit-test/Spice'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_param'"}, "return_value": "'unit-test/Spice/test_Netlist.py'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_param'"}, "return_value": "'unit-test/Spice/test_Netlist.py::TestCircuit'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_param'"}, "return_value": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_param'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_param'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_param'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_param'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_param'"}, "return_value": "'unit-test/Spice'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_param'"}, "return_value": "'unit-test/Spice/test_Netlist.py'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_param'"}, "return_value": "'unit-test/Spice/test_Netlist.py::TestCircuit'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_param'"}, "return_value": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_param'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_param'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_raw_spice'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_raw_spice'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_raw_spice'"}, "return_value": "'unit-test/Spice'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_raw_spice'"}, "return_value": "'unit-test/Spice/test_Netlist.py'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_raw_spice'"}, "return_value": "'unit-test/Spice/test_Netlist.py::TestCircuit'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_raw_spice'"}, "return_value": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_raw_spice'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_raw_spice'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_raw_spice'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_raw_spice'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_raw_spice'"}, "return_value": "'unit-test/Spice'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_raw_spice'"}, "return_value": "'unit-test/Spice/test_Netlist.py'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_raw_spice'"}, "return_value": "'unit-test/Spice/test_Netlist.py::TestCircuit'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_raw_spice'"}, "return_value": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_raw_spice'"}, {"func_args": {"nodeid": "'unit-test/Spice/test_Netlist.py::TestCircuit::test_raw_spice'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/SpiceParser/test_SpiceParser.py::TestSpiceParser::test_parser'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/SpiceParser/test_SpiceParser.py::TestSpiceParser::test_parser'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/SpiceParser/test_SpiceParser.py::TestSpiceParser::test_parser'"}, "return_value": "'unit-test/SpiceParser'"}, {"func_args": {"nodeid": "'unit-test/SpiceParser/test_SpiceParser.py::TestSpiceParser::test_parser'"}, "return_value": "'unit-test/SpiceParser/test_SpiceParser.py'"}, {"func_args": {"nodeid": "'unit-test/SpiceParser/test_SpiceParser.py::TestSpiceParser::test_parser'"}, "return_value": "'unit-test/SpiceParser/test_SpiceParser.py::TestSpiceParser'"}, {"func_args": {"nodeid": "'unit-test/SpiceParser/test_SpiceParser.py::TestSpiceParser::test_parser'"}, "return_value": "'unit-test/SpiceParser/test_SpiceParser.py::TestSpiceParser::test_parser'"}, {"func_args": {"nodeid": "'unit-test/SpiceParser/test_SpiceParser.py::TestSpiceParser::test_parser'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/SpiceParser/test_SpiceParser.py::TestSpiceParser::test_parser'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/SpiceParser/test_SpiceParser.py::TestSpiceParser::test_parser'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/SpiceParser/test_SpiceParser.py::TestSpiceParser::test_parser'"}, "return_value": "'unit-test/SpiceParser'"}, {"func_args": {"nodeid": "'unit-test/SpiceParser/test_SpiceParser.py::TestSpiceParser::test_parser'"}, "return_value": "'unit-test/SpiceParser/test_SpiceParser.py'"}, {"func_args": {"nodeid": "'unit-test/SpiceParser/test_SpiceParser.py::TestSpiceParser::test_parser'"}, "return_value": "'unit-test/SpiceParser/test_SpiceParser.py::TestSpiceParser'"}, {"func_args": {"nodeid": "'unit-test/SpiceParser/test_SpiceParser.py::TestSpiceParser::test_parser'"}, "return_value": "'unit-test/SpiceParser/test_SpiceParser.py::TestSpiceParser::test_parser'"}, {"func_args": {"nodeid": "'unit-test/SpiceParser/test_SpiceParser.py::TestSpiceParser::test_parser'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/SpiceParser/test_SpiceParser.py::TestSpiceParser::test_subcircuit'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/SpiceParser/test_SpiceParser.py::TestSpiceParser::test_subcircuit'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/SpiceParser/test_SpiceParser.py::TestSpiceParser::test_subcircuit'"}, "return_value": "'unit-test/SpiceParser'"}, {"func_args": {"nodeid": "'unit-test/SpiceParser/test_SpiceParser.py::TestSpiceParser::test_subcircuit'"}, "return_value": "'unit-test/SpiceParser/test_SpiceParser.py'"}, {"func_args": {"nodeid": "'unit-test/SpiceParser/test_SpiceParser.py::TestSpiceParser::test_subcircuit'"}, "return_value": "'unit-test/SpiceParser/test_SpiceParser.py::TestSpiceParser'"}, {"func_args": {"nodeid": "'unit-test/SpiceParser/test_SpiceParser.py::TestSpiceParser::test_subcircuit'"}, "return_value": "'unit-test/SpiceParser/test_SpiceParser.py::TestSpiceParser::test_subcircuit'"}, {"func_args": {"nodeid": "'unit-test/SpiceParser/test_SpiceParser.py::TestSpiceParser::test_subcircuit'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/SpiceParser/test_SpiceParser.py::TestSpiceParser::test_subcircuit'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/SpiceParser/test_SpiceParser.py::TestSpiceParser::test_subcircuit'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/SpiceParser/test_SpiceParser.py::TestSpiceParser::test_subcircuit'"}, "return_value": "'unit-test/SpiceParser'"}, {"func_args": {"nodeid": "'unit-test/SpiceParser/test_SpiceParser.py::TestSpiceParser::test_subcircuit'"}, "return_value": "'unit-test/SpiceParser/test_SpiceParser.py'"}, {"func_args": {"nodeid": "'unit-test/SpiceParser/test_SpiceParser.py::TestSpiceParser::test_subcircuit'"}, "return_value": "'unit-test/SpiceParser/test_SpiceParser.py::TestSpiceParser'"}, {"func_args": {"nodeid": "'unit-test/SpiceParser/test_SpiceParser.py::TestSpiceParser::test_subcircuit'"}, "return_value": "'unit-test/SpiceParser/test_SpiceParser.py::TestSpiceParser::test_subcircuit'"}, {"func_args": {"nodeid": "'unit-test/SpiceParser/test_SpiceParser.py::TestSpiceParser::test_subcircuit'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_canonisation'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_canonisation'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_canonisation'"}, "return_value": "'unit-test/Unit'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_canonisation'"}, "return_value": "'unit-test/Unit/test_Units.py'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_canonisation'"}, "return_value": "'unit-test/Unit/test_Units.py::TestUnits'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_canonisation'"}, "return_value": "'unit-test/Unit/test_Units.py::TestUnits::test_canonisation'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_canonisation'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_canonisation'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_canonisation'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_canonisation'"}, "return_value": "'unit-test/Unit'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_canonisation'"}, "return_value": "'unit-test/Unit/test_Units.py'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_canonisation'"}, "return_value": "'unit-test/Unit/test_Units.py::TestUnits'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_canonisation'"}, "return_value": "'unit-test/Unit/test_Units.py::TestUnits::test_canonisation'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_canonisation'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_float_cast'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_float_cast'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_float_cast'"}, "return_value": "'unit-test/Unit'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_float_cast'"}, "return_value": "'unit-test/Unit/test_Units.py'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_float_cast'"}, "return_value": "'unit-test/Unit/test_Units.py::TestUnits'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_float_cast'"}, "return_value": "'unit-test/Unit/test_Units.py::TestUnits::test_float_cast'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_float_cast'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_float_cast'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_float_cast'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_float_cast'"}, "return_value": "'unit-test/Unit'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_float_cast'"}, "return_value": "'unit-test/Unit/test_Units.py'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_float_cast'"}, "return_value": "'unit-test/Unit/test_Units.py::TestUnits'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_float_cast'"}, "return_value": "'unit-test/Unit/test_Units.py::TestUnits::test_float_cast'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_float_cast'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_frequency_mixin'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_frequency_mixin'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_frequency_mixin'"}, "return_value": "'unit-test/Unit'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_frequency_mixin'"}, "return_value": "'unit-test/Unit/test_Units.py'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_frequency_mixin'"}, "return_value": "'unit-test/Unit/test_Units.py::TestUnits'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_frequency_mixin'"}, "return_value": "'unit-test/Unit/test_Units.py::TestUnits::test_frequency_mixin'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_frequency_mixin'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_frequency_mixin'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_frequency_mixin'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_frequency_mixin'"}, "return_value": "'unit-test/Unit'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_frequency_mixin'"}, "return_value": "'unit-test/Unit/test_Units.py'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_frequency_mixin'"}, "return_value": "'unit-test/Unit/test_Units.py::TestUnits'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_frequency_mixin'"}, "return_value": "'unit-test/Unit/test_Units.py::TestUnits::test_frequency_mixin'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_frequency_mixin'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_list_ctor'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_list_ctor'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_list_ctor'"}, "return_value": "'unit-test/Unit'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_list_ctor'"}, "return_value": "'unit-test/Unit/test_Units.py'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_list_ctor'"}, "return_value": "'unit-test/Unit/test_Units.py::TestUnits'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_list_ctor'"}, "return_value": "'unit-test/Unit/test_Units.py::TestUnits::test_list_ctor'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_list_ctor'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_list_ctor'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_list_ctor'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_list_ctor'"}, "return_value": "'unit-test/Unit'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_list_ctor'"}, "return_value": "'unit-test/Unit/test_Units.py'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_list_ctor'"}, "return_value": "'unit-test/Unit/test_Units.py::TestUnits'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_list_ctor'"}, "return_value": "'unit-test/Unit/test_Units.py::TestUnits::test_list_ctor'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_list_ctor'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_matmul_syntax'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_matmul_syntax'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_matmul_syntax'"}, "return_value": "'unit-test/Unit'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_matmul_syntax'"}, "return_value": "'unit-test/Unit/test_Units.py'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_matmul_syntax'"}, "return_value": "'unit-test/Unit/test_Units.py::TestUnits'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_matmul_syntax'"}, "return_value": "'unit-test/Unit/test_Units.py::TestUnits::test_matmul_syntax'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_matmul_syntax'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_matmul_syntax'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_matmul_syntax'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_matmul_syntax'"}, "return_value": "'unit-test/Unit'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_matmul_syntax'"}, "return_value": "'unit-test/Unit/test_Units.py'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_matmul_syntax'"}, "return_value": "'unit-test/Unit/test_Units.py::TestUnits'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_matmul_syntax'"}, "return_value": "'unit-test/Unit/test_Units.py::TestUnits::test_matmul_syntax'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_matmul_syntax'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_numpy_units'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_numpy_units'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_numpy_units'"}, "return_value": "'unit-test/Unit'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_numpy_units'"}, "return_value": "'unit-test/Unit/test_Units.py'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_numpy_units'"}, "return_value": "'unit-test/Unit/test_Units.py::TestUnits'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_numpy_units'"}, "return_value": "'unit-test/Unit/test_Units.py::TestUnits::test_numpy_units'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_numpy_units'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_numpy_units'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_numpy_units'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_numpy_units'"}, "return_value": "'unit-test/Unit'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_numpy_units'"}, "return_value": "'unit-test/Unit/test_Units.py'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_numpy_units'"}, "return_value": "'unit-test/Unit/test_Units.py::TestUnits'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_numpy_units'"}, "return_value": "'unit-test/Unit/test_Units.py::TestUnits::test_numpy_units'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_numpy_units'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_si_derived_unit'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_si_derived_unit'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_si_derived_unit'"}, "return_value": "'unit-test/Unit'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_si_derived_unit'"}, "return_value": "'unit-test/Unit/test_Units.py'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_si_derived_unit'"}, "return_value": "'unit-test/Unit/test_Units.py::TestUnits'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_si_derived_unit'"}, "return_value": "'unit-test/Unit/test_Units.py::TestUnits::test_si_derived_unit'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_si_derived_unit'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_si_derived_unit'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_si_derived_unit'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_si_derived_unit'"}, "return_value": "'unit-test/Unit'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_si_derived_unit'"}, "return_value": "'unit-test/Unit/test_Units.py'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_si_derived_unit'"}, "return_value": "'unit-test/Unit/test_Units.py::TestUnits'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_si_derived_unit'"}, "return_value": "'unit-test/Unit/test_Units.py::TestUnits::test_si_derived_unit'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_si_derived_unit'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_conversion'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_conversion'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_conversion'"}, "return_value": "'unit-test/Unit'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_conversion'"}, "return_value": "'unit-test/Unit/test_Units.py'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_conversion'"}, "return_value": "'unit-test/Unit/test_Units.py::TestUnits'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_conversion'"}, "return_value": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_conversion'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_conversion'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_conversion'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_conversion'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_conversion'"}, "return_value": "'unit-test/Unit'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_conversion'"}, "return_value": "'unit-test/Unit/test_Units.py'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_conversion'"}, "return_value": "'unit-test/Unit/test_Units.py::TestUnits'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_conversion'"}, "return_value": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_conversion'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_conversion'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_prefix'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_prefix'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_prefix'"}, "return_value": "'unit-test/Unit'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_prefix'"}, "return_value": "'unit-test/Unit/test_Units.py'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_prefix'"}, "return_value": "'unit-test/Unit/test_Units.py::TestUnits'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_prefix'"}, "return_value": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_prefix'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_prefix'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_prefix'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_prefix'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_prefix'"}, "return_value": "'unit-test/Unit'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_prefix'"}, "return_value": "'unit-test/Unit/test_Units.py'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_prefix'"}, "return_value": "'unit-test/Unit/test_Units.py::TestUnits'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_prefix'"}, "return_value": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_prefix'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_prefix'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_prefix_shortcut'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_prefix_shortcut'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_prefix_shortcut'"}, "return_value": "'unit-test/Unit'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_prefix_shortcut'"}, "return_value": "'unit-test/Unit/test_Units.py'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_prefix_shortcut'"}, "return_value": "'unit-test/Unit/test_Units.py::TestUnits'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_prefix_shortcut'"}, "return_value": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_prefix_shortcut'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_prefix_shortcut'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_prefix_shortcut'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_prefix_shortcut'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_prefix_shortcut'"}, "return_value": "'unit-test/Unit'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_prefix_shortcut'"}, "return_value": "'unit-test/Unit/test_Units.py'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_prefix_shortcut'"}, "return_value": "'unit-test/Unit/test_Units.py::TestUnits'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_prefix_shortcut'"}, "return_value": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_prefix_shortcut'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_prefix_shortcut'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_str'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_str'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_str'"}, "return_value": "'unit-test/Unit'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_str'"}, "return_value": "'unit-test/Unit/test_Units.py'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_str'"}, "return_value": "'unit-test/Unit/test_Units.py::TestUnits'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_str'"}, "return_value": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_str'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_str'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_str'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_str'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_str'"}, "return_value": "'unit-test/Unit'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_str'"}, "return_value": "'unit-test/Unit/test_Units.py'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_str'"}, "return_value": "'unit-test/Unit/test_Units.py::TestUnits'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_str'"}, "return_value": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_str'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_unit_str'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_units'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_units'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_units'"}, "return_value": "'unit-test/Unit'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_units'"}, "return_value": "'unit-test/Unit/test_Units.py'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_units'"}, "return_value": "'unit-test/Unit/test_Units.py::TestUnits'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_units'"}, "return_value": "'unit-test/Unit/test_Units.py::TestUnits::test_units'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_units'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_units'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_units'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_units'"}, "return_value": "'unit-test/Unit'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_units'"}, "return_value": "'unit-test/Unit/test_Units.py'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_units'"}, "return_value": "'unit-test/Unit/test_Units.py::TestUnits'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_units'"}, "return_value": "'unit-test/Unit/test_Units.py::TestUnits::test_units'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_units'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_validation'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_validation'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_validation'"}, "return_value": "'unit-test/Unit'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_validation'"}, "return_value": "'unit-test/Unit/test_Units.py'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_validation'"}, "return_value": "'unit-test/Unit/test_Units.py::TestUnits'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_validation'"}, "return_value": "'unit-test/Unit/test_Units.py::TestUnits::test_validation'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_validation'"}, "return_value": "None"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_validation'"}, "return_value": "''"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_validation'"}, "return_value": "'unit-test'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_validation'"}, "return_value": "'unit-test/Unit'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_validation'"}, "return_value": "'unit-test/Unit/test_Units.py'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_validation'"}, "return_value": "'unit-test/Unit/test_Units.py::TestUnits'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_validation'"}, "return_value": "'unit-test/Unit/test_Units.py::TestUnits::test_validation'"}, {"func_args": {"nodeid": "'unit-test/Unit/test_Units.py::TestUnits::test_validation'"}, "return_value": "None"}], "text": "def iterparentnodeids(nodeid: str) -> Iterator[str]:\n    \"\"\"Return the parent node IDs of a given node ID, inclusive.\n\n    For the node ID\n\n        \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_source\"\n\n    the result would be\n\n        \"\"\n        \"testing\"\n        \"testing/code\"\n        \"testing/code/test_excinfo.py\"\n        \"testing/code/test_excinfo.py::TestFormattedExcinfo\"\n        \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_source\"\n\n    Note that :: parts are only considered at the last / component.\n    \"\"\"\n    pos = 0\n    sep = SEP\n    yield \"\"\n    while True:\n        at = nodeid.find(sep, pos)\n        if at == -1 and sep == SEP:\n            sep = \"::\"\n        elif at == -1:\n            if nodeid:\n                yield nodeid\n            break\n        else:\n            if at:\n                yield nodeid[:at]\n            pos = at + len(sep)"}, "wcswidth": {"line": 43, "args": [{"func_args": {"s": "''"}, "return_value": "0"}, {"func_args": {"s": "'unit-test/Math/test_Calculus.py .'"}, "return_value": "33"}, {"func_args": {"s": "'unit-test/Math/test_Calculus.py ..'"}, "return_value": "34"}, {"func_args": {"s": "'unit-test/Math/test_Calculus.py ..'"}, "return_value": "34"}, {"func_args": {"s": "'unit-test/Pickle/test_Pickle.py .'"}, "return_value": "33"}, {"func_args": {"s": "'unit-test/Pickle/test_Pickle.py ..'"}, "return_value": "34"}, {"func_args": {"s": "'unit-test/Pickle/test_Pickle.py ...'"}, "return_value": "35"}, {"func_args": {"s": "'unit-test/Pickle/test_Pickle.py ...'"}, "return_value": "35"}, {"func_args": {"s": "'unit-test/Probe/test_WaveForm.py .'"}, "return_value": "34"}, {"func_args": {"s": "'unit-test/Probe/test_WaveForm.py .'"}, "return_value": "34"}, {"func_args": {"s": "'unit-test/Spice/test_BasicElement.py .'"}, "return_value": "38"}, {"func_args": {"s": "'unit-test/Spice/test_BasicElement.py .'"}, "return_value": "38"}, {"func_args": {"s": "'unit-test/Spice/test_Expression.py .'"}, "return_value": "36"}, {"func_args": {"s": "'unit-test/Spice/test_Expression.py .'"}, "return_value": "36"}, {"func_args": {"s": "'unit-test/Spice/test_HighLevelElement.py .'"}, "return_value": "42"}, {"func_args": {"s": "'unit-test/Spice/test_HighLevelElement.py .'"}, "return_value": "42"}, {"func_args": {"s": "'unit-test/Spice/test_Netlist.py .'"}, "return_value": "33"}, {"func_args": {"s": "'unit-test/Spice/test_Netlist.py ..'"}, "return_value": "34"}, {"func_args": {"s": "'unit-test/Spice/test_Netlist.py ...'"}, "return_value": "35"}, {"func_args": {"s": "'unit-test/Spice/test_Netlist.py ....'"}, "return_value": "36"}, {"func_args": {"s": "'unit-test/Spice/test_Netlist.py .....'"}, "return_value": "37"}, {"func_args": {"s": "'unit-test/Spice/test_Netlist.py ......'"}, "return_value": "38"}, {"func_args": {"s": "'unit-test/Spice/test_Netlist.py ......'"}, "return_value": "38"}, {"func_args": {"s": "'unit-test/SpiceParser/test_SpiceParser.py s'"}, "return_value": "43"}, {"func_args": {"s": "'unit-test/SpiceParser/test_SpiceParser.py ss'"}, "return_value": "44"}, {"func_args": {"s": "'unit-test/SpiceParser/test_SpiceParser.py ss'"}, "return_value": "44"}, {"func_args": {"s": "'unit-test/Unit/test_Units.py .'"}, "return_value": "30"}, {"func_args": {"s": "'unit-test/Unit/test_Units.py ..'"}, "return_value": "31"}, {"func_args": {"s": "'unit-test/Unit/test_Units.py ...'"}, "return_value": "32"}, {"func_args": {"s": "'unit-test/Unit/test_Units.py ....'"}, "return_value": "33"}, {"func_args": {"s": "'unit-test/Unit/test_Units.py .....'"}, "return_value": "34"}, {"func_args": {"s": "'unit-test/Unit/test_Units.py ......'"}, "return_value": "35"}, {"func_args": {"s": "'unit-test/Unit/test_Units.py .......'"}, "return_value": "36"}, {"func_args": {"s": "'unit-test/Unit/test_Units.py ........'"}, "return_value": "37"}, {"func_args": {"s": "'unit-test/Unit/test_Units.py .........'"}, "return_value": "38"}, {"func_args": {"s": "'unit-test/Unit/test_Units.py ..........'"}, "return_value": "39"}, {"func_args": {"s": "'unit-test/Unit/test_Units.py ...........'"}, "return_value": "40"}, {"func_args": {"s": "'unit-test/Unit/test_Units.py ............'"}, "return_value": "41"}, {"func_args": {"s": "'unit-test/Unit/test_Units.py .............'"}, "return_value": "42"}], "text": "def wcswidth(s: str) -> int:\n    \"\"\"Determine how many columns are needed to display a string in a terminal.\n\n    Returns -1 if the string contains non-printable characters.\n    \"\"\"\n    width = 0\n    for c in unicodedata.normalize(\"NFC\", s):\n        wc = wcwidth(c)\n        if wc < 0:\n            return -1\n        width += wc\n    return width"}, "wcwidth": {"line": 4, "args": [{"func_args": {"c": "'u'"}, "return_value": "1"}, {"func_args": {"c": "'n'"}, "return_value": "1"}, {"func_args": {"c": "'i'"}, "return_value": "1"}, {"func_args": {"c": "'t'"}, "return_value": "1"}, {"func_args": {"c": "'-'"}, "return_value": "1"}, {"func_args": {"c": "'e'"}, "return_value": "1"}, {"func_args": {"c": "'s'"}, "return_value": "1"}, {"func_args": {"c": "'/'"}, "return_value": "1"}, {"func_args": {"c": "'M'"}, "return_value": "1"}, {"func_args": {"c": "'a'"}, "return_value": "1"}, {"func_args": {"c": "'h'"}, "return_value": "1"}, {"func_args": {"c": "'_'"}, "return_value": "1"}, {"func_args": {"c": "'C'"}, "return_value": "1"}, {"func_args": {"c": "'l'"}, "return_value": "1"}, {"func_args": {"c": "'c'"}, "return_value": "1"}, {"func_args": {"c": "'.'"}, "return_value": "1"}, {"func_args": {"c": "'p'"}, "return_value": "1"}, {"func_args": {"c": "'y'"}, "return_value": "1"}, {"func_args": {"c": "' '"}, "return_value": "1"}, {"func_args": {"c": "'P'"}, "return_value": "1"}, {"func_args": {"c": "'k'"}, "return_value": "1"}, {"func_args": {"c": "'r'"}, "return_value": "1"}, {"func_args": {"c": "'o'"}, "return_value": "1"}, {"func_args": {"c": "'b'"}, "return_value": "1"}, {"func_args": {"c": "'W'"}, "return_value": "1"}, {"func_args": {"c": "'v'"}, "return_value": "1"}, {"func_args": {"c": "'F'"}, "return_value": "1"}, {"func_args": {"c": "'m'"}, "return_value": "1"}, {"func_args": {"c": "'S'"}, "return_value": "1"}, {"func_args": {"c": "'B'"}, "return_value": "1"}, {"func_args": {"c": "'E'"}, "return_value": "1"}, {"func_args": {"c": "'x'"}, "return_value": "1"}, {"func_args": {"c": "'H'"}, "return_value": "1"}, {"func_args": {"c": "'g'"}, "return_value": "1"}, {"func_args": {"c": "'L'"}, "return_value": "1"}, {"func_args": {"c": "'N'"}, "return_value": "1"}, {"func_args": {"c": "'U'"}, "return_value": "1"}]}, "compute_finite_difference_coefficients": {"line": 73, "args": [{"func_args": {"derivative_order": "1", "grid": "[-2, -1, 0, 1, 2]"}, "return_value": "[0.08333333333333333, -0.6666666666666666, 0.0, 0.6666666666666666, -0.08333333333333333]"}, {"func_args": {"derivative_order": "1", "grid": "[0, 1, 2, 3, 4]"}, "return_value": "[-2.0833333333333335, 4.0, -3.0, 1.3333333333333333, -0.25]"}, {"func_args": {"derivative_order": "1", "grid": "[0, -1, -2, -3, -4]"}, "return_value": "[2.0833333333333335, -4.0, 3.0, -1.3333333333333333, 0.25]"}, {"func_args": {"derivative_order": "2", "grid": "[-2, -1, 0, 1, 2]"}, "return_value": "[-0.08333333333333333, 1.3333333333333333, -2.5, 1.3333333333333333, -0.08333333333333333]"}, {"func_args": {"derivative_order": "2", "grid": "[0, 1, 2, 3, 4, 5]"}, "return_value": "[3.75, -12.833333333333334, 17.833333333333332, -13.0, 5.083333333333333, -0.8333333333333334]"}, {"func_args": {"derivative_order": "2", "grid": "[0, -1, -2, -3, -4, -5]"}, "return_value": "[3.75, -12.833333333333334, 17.833333333333332, -13.0, 5.083333333333333, -0.8333333333333334]"}], "text": "def compute_finite_difference_coefficients(derivative_order, grid):\n    return [float(x) for x in compute_exact_finite_difference_coefficients(derivative_order, grid)]"}, "get_finite_difference_coefficients": {"line": 80, "args": [{"func_args": {"derivative_order": "1", "accuracy_order": "4", "grid_type": "'centred'"}, "return_value": "([-2, -1, 0, 1, 2], [0.08333333333333333, -0.6666666666666666, 0.0, 0.6666666666666666, -0.08333333333333333])"}, {"func_args": {"derivative_order": "1", "accuracy_order": "4", "grid_type": "'forward'"}, "return_value": "([0, 1, 2, 3, 4], [-2.0833333333333335, 4.0, -3.0, 1.3333333333333333, -0.25])"}, {"func_args": {"derivative_order": "1", "accuracy_order": "4", "grid_type": "'backward'"}, "return_value": "([0, -1, -2, -3, -4], [2.0833333333333335, -4.0, 3.0, -1.3333333333333333, 0.25])"}, {"func_args": {"derivative_order": "2", "accuracy_order": "4", "grid_type": "'centred'"}, "return_value": "([-2, -1, 0, 1, 2], [-0.08333333333333333, 1.3333333333333333, -2.5, 1.3333333333333333, -0.08333333333333333])"}, {"func_args": {"derivative_order": "2", "accuracy_order": "4", "grid_type": "'forward'"}, "return_value": "([0, 1, 2, 3, 4, 5], [3.75, -12.833333333333334, 17.833333333333332, -13.0, 5.083333333333333, -0.8333333333333334])"}, {"func_args": {"derivative_order": "2", "accuracy_order": "4", "grid_type": "'backward'"}, "return_value": "([0, -1, -2, -3, -4, -5], [3.75, -12.833333333333334, 17.833333333333332, -13.0, 5.083333333333333, -0.8333333333333334])"}], "text": "def get_finite_difference_coefficients(derivative_order, accuracy_order, grid_type):\n\n    if derivative_order < 1:\n        raise ValueError(\"Wrong derivative order\")\n\n    if odd(accuracy_order) or accuracy_order < 2:\n        raise ValueError(\"Wrong accuracy order\")\n\n    if grid_type == 'centred':\n        window_size = accuracy_order // 2\n        grid = list(range(-window_size, window_size +1))\n    elif grid_type == 'forward':\n        grid = list(range(derivative_order + accuracy_order))\n    elif grid_type == 'backward':\n        grid = list(range(-(derivative_order + accuracy_order) +1, 1))\n        grid = list(reversed(grid)) # Fixme: why ?\n    else:\n        raise ValueError(\"Wrong grid type\")\n\n    key = '{}-{}'.format(derivative_order, accuracy_order)\n    coefficients = _coefficient_cache[grid_type].get(key, None)\n    if coefficients is None:\n        coefficients = compute_finite_difference_coefficients(derivative_order, grid)\n        _coefficient_cache[grid_type][key] = coefficients\n\n    return grid, coefficients"}, "isscalar": {"line": 1858, "args": [{"func_args": {"element": "6.283185307179586"}, "return_value": "True"}]}, "_ndim_dispatcher": {"line": 3159, "args": [{"func_args": {"a": "6.283185307179586"}, "return_value": "(6.283185307179586,)"}], "text": "def _ndim_dispatcher(a):\n    return (a,)"}, "ndim": {"line": 3163, "args": [{"func_args": {"a": "6.283185307179586"}, "return_value": "0"}]}, "geterr": {"line": 130, "args": [{"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'ignore', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'ignore', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'ignore', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'ignore', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'ignore', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'ignore', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}]}, "seterr": {"line": 31, "args": [{"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "'ignore'", "under": "None", "invalid": "None"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'ignore', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "'ignore'", "under": "None", "invalid": "None"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'ignore', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "None", "over": "'ignore'", "under": "None", "invalid": "None"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'ignore', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "'ignore'", "under": "None", "invalid": "None"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'ignore', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "'ignore'", "under": "None", "invalid": "None"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'ignore', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "'ignore'", "under": "None", "invalid": "None"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'ignore', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}, {"func_args": {"all": "None", "divide": "None", "over": "None", "under": "None", "invalid": "'ignore'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"}, {"func_args": {"all": "None", "divide": "'warn'", "over": "'warn'", "under": "'ignore'", "invalid": "'warn'"}, "return_value": "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'ignore'}"}]}, "_linspace_dispatcher": {"line": 17, "args": [{"func_args": {"start": "0", "stop": "6.283185307179586", "num": "100", "endpoint": "None", "retstep": "None", "dtype": "None", "axis": "None"}, "return_value": "(0, 6.283185307179586)"}], "text": "def _linspace_dispatcher(start, stop, num=None, endpoint=None, retstep=None,\n                         dtype=None, axis=None):\n    return (start, stop)"}, "odd": {"line": 29, "args": [{"func_args": {"x": "4"}, "return_value": "0"}, {"func_args": {"x": "4"}, "return_value": "0"}, {"func_args": {"x": "4"}, "return_value": "0"}, {"func_args": {"x": "4"}, "return_value": "0"}, {"func_args": {"x": "4"}, "return_value": "0"}, {"func_args": {"x": "4"}, "return_value": "0"}], "text": "def odd(x):\n    \"\"\"Return True is *x* is odd\"\"\"\n    return x & 1"}, "gisfinite": {"line": 115, "args": [{"func_args": {"x": "0.019"}, "return_value": "True"}, {"func_args": {"x": "0.019"}, "return_value": "True"}], "text": "def gisfinite(x):\n    \"\"\"like isfinite, but always raise an error if type not supported instead\n    of returning a TypeError object.\n\n    Notes\n    -----\n    isfinite and other ufunc sometimes return a NotImplementedType object\n    instead of raising any exception. This function is a wrapper to make sure\n    an exception is always raised.\n\n    This should be removed once this problem is solved at the Ufunc level.\"\"\"\n    from numpy.core import isfinite, errstate\n    with errstate(invalid='ignore'):\n        st = isfinite(x)\n        if isinstance(st, type(NotImplemented)):\n            raise TypeError(\"isfinite not supported for this type\")\n    return st"}, "_make_options_dict": {"line": 63, "args": [{"func_args": {"precision": "None", "threshold": "None", "edgeitems": "None", "linewidth": "None", "suppress": "None", "nanstr": "None", "infstr": "None", "sign": "None", "formatter": "None", "floatmode": "None", "legacy": "None"}, "return_value": "{}"}, {"func_args": {"precision": "None", "threshold": "None", "edgeitems": "None", "linewidth": "None", "suppress": "None", "nanstr": "None", "infstr": "None", "sign": "None", "formatter": "None", "floatmode": "None", "legacy": "None"}, "return_value": "{}"}, {"func_args": {"precision": "None", "threshold": "None", "edgeitems": "None", "linewidth": "None", "suppress": "None", "nanstr": "None", "infstr": "None", "sign": "None", "formatter": "None", "floatmode": "None", "legacy": "None"}, "return_value": "{}"}, {"func_args": {"precision": "None", "threshold": "None", "edgeitems": "None", "linewidth": "None", "suppress": "None", "nanstr": "None", "infstr": "None", "sign": "None", "formatter": "None", "floatmode": "None", "legacy": "None"}, "return_value": "{}"}, {"func_args": {"precision": "None", "threshold": "None", "edgeitems": "None", "linewidth": "None", "suppress": "None", "nanstr": "None", "infstr": "None", "sign": "None", "formatter": "None", "floatmode": "None", "legacy": "None"}, "return_value": "{}"}, {"func_args": {"precision": "None", "threshold": "None", "edgeitems": "None", "linewidth": "None", "suppress": "None", "nanstr": "None", "infstr": "None", "sign": "None", "formatter": "None", "floatmode": "None", "legacy": "None"}, "return_value": "{}"}, {"func_args": {"precision": "None", "threshold": "None", "edgeitems": "None", "linewidth": "None", "suppress": "None", "nanstr": "None", "infstr": "None", "sign": "None", "formatter": "None", "floatmode": "None", "legacy": "None"}, "return_value": "{}"}, {"func_args": {"precision": "None", "threshold": "None", "edgeitems": "None", "linewidth": "None", "suppress": "None", "nanstr": "None", "infstr": "None", "sign": "None", "formatter": "None", "floatmode": "None", "legacy": "None"}, "return_value": "{}"}, {"func_args": {"precision": "None", "threshold": "None", "edgeitems": "None", "linewidth": "None", "suppress": "None", "nanstr": "None", "infstr": "None", "sign": "None", "formatter": "None", "floatmode": "None", "legacy": "None"}, "return_value": "{}"}, {"func_args": {"precision": "None", "threshold": "None", "edgeitems": "None", "linewidth": "None", "suppress": "None", "nanstr": "None", "infstr": "None", "sign": "None", "formatter": "None", "floatmode": "None", "legacy": "None"}, "return_value": "{}"}, {"func_args": {"precision": "None", "threshold": "None", "edgeitems": "None", "linewidth": "None", "suppress": "None", "nanstr": "None", "infstr": "None", "sign": "None", "formatter": "None", "floatmode": "None", "legacy": "None"}, "return_value": "{}"}, {"func_args": {"precision": "None", "threshold": "None", "edgeitems": "None", "linewidth": "None", "suppress": "None", "nanstr": "None", "infstr": "None", "sign": "None", "formatter": "None", "floatmode": "None", "legacy": "None"}, "return_value": "{}"}, {"func_args": {"precision": "None", "threshold": "None", "edgeitems": "None", "linewidth": "None", "suppress": "None", "nanstr": "None", "infstr": "None", "sign": "None", "formatter": "None", "floatmode": "None", "legacy": "None"}, "return_value": "{}"}, {"func_args": {"precision": "None", "threshold": "None", "edgeitems": "None", "linewidth": "None", "suppress": "None", "nanstr": "None", "infstr": "None", "sign": "None", "formatter": "None", "floatmode": "None", "legacy": "None"}, "return_value": "{}"}, {"func_args": {"precision": "None", "threshold": "None", "edgeitems": "None", "linewidth": "None", "suppress": "None", "nanstr": "None", "infstr": "None", "sign": "None", "formatter": "None", "floatmode": "None", "legacy": "None"}, "return_value": "{}"}, {"func_args": {"precision": "None", "threshold": "None", "edgeitems": "None", "linewidth": "None", "suppress": "None", "nanstr": "None", "infstr": "None", "sign": "None", "formatter": "None", "floatmode": "None", "legacy": "None"}, "return_value": "{}"}, {"func_args": {"precision": "None", "threshold": "None", "edgeitems": "None", "linewidth": "None", "suppress": "None", "nanstr": "None", "infstr": "None", "sign": "None", "formatter": "None", "floatmode": "None", "legacy": "None"}, "return_value": "{}"}, {"func_args": {"precision": "None", "threshold": "None", "edgeitems": "None", "linewidth": "None", "suppress": "None", "nanstr": "None", "infstr": "None", "sign": "None", "formatter": "None", "floatmode": "None", "legacy": "None"}, "return_value": "{}"}], "text": "def _make_options_dict(precision=None, threshold=None, edgeitems=None,\n                       linewidth=None, suppress=None, nanstr=None, infstr=None,\n                       sign=None, formatter=None, floatmode=None, legacy=None):\n    \"\"\"\n    Make a dictionary out of the non-None arguments, plus conversion of\n    *legacy* and sanity checks.\n    \"\"\"\n\n    options = {k: v for k, v in locals().items() if v is not None}\n\n    if suppress is not None:\n        options['suppress'] = bool(suppress)\n\n    modes = ['fixed', 'unique', 'maxprec', 'maxprec_equal']\n    if floatmode not in modes + [None]:\n        raise ValueError(\"floatmode option must be one of \" +\n                         \", \".join('\"{}\"'.format(m) for m in modes))\n\n    if sign not in [None, '-', '+', ' ']:\n        raise ValueError(\"sign option must be one of ' ', '+', or '-'\")\n\n    if legacy == False:\n        options['legacy'] = sys.maxsize\n    elif legacy == '1.13':\n        options['legacy'] = 113\n    elif legacy == '1.21':\n        options['legacy'] = 121\n    elif legacy is None:\n        pass  # OK, do nothing.\n    else:\n        warnings.warn(\n            \"legacy printing option can currently only be '1.13', '1.21', or \"\n            \"`False`\", stacklevel=3)\n\n    if threshold is not None:\n        # forbid the bad threshold arg suggested by stack overflow, gh-12351\n        if not isinstance(threshold, numbers.Number):\n            raise TypeError(\"threshold must be numeric\")\n        if np.isnan(threshold):\n            raise ValueError(\"threshold must be non-NAN, try \"\n                             \"sys.maxsize for untruncated representation\")\n\n    if precision is not None:\n        # forbid the bad precision arg as suggested by issue #18254\n        try:\n            options['precision'] = operator.index(precision)\n        except TypeError as e:\n            raise TypeError('precision must be an integer') from e\n\n    return options"}, "_none_or_positive_arg": {"line": 897, "args": [{"func_args": {"x": "8", "name": "'precision'"}, "return_value": "8"}, {"func_args": {"x": "8", "name": "'precision'"}, "return_value": "8"}, {"func_args": {"x": "8", "name": "'precision'"}, "return_value": "8"}, {"func_args": {"x": "8", "name": "'precision'"}, "return_value": "8"}, {"func_args": {"x": "8", "name": "'precision'"}, "return_value": "8"}, {"func_args": {"x": "8", "name": "'precision'"}, "return_value": "8"}], "text": "def _none_or_positive_arg(x, name):\n    if x is None:\n        return -1\n    if x < 0:\n        raise ValueError(\"{} must be >= 0\".format(name))\n    return x"}, "recurser": {"line": 788, "args": [{"func_args": {"index": "(-10,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'0.'"}, {"func_args": {"index": "(-9,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'1.'"}, {"func_args": {"index": "(-8,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'2.'"}, {"func_args": {"index": "(-7,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'3.'"}, {"func_args": {"index": "(-6,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'4.'"}, {"func_args": {"index": "(-5,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'5.'"}, {"func_args": {"index": "(-4,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'6.'"}, {"func_args": {"index": "(-3,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'7.'"}, {"func_args": {"index": "(-2,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'8.'"}, {"func_args": {"index": "(-1,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'9.'"}, {"func_args": {"index": "()", "hanging_indent": "' '", "curr_width": "75"}, "return_value": "'[0. 1. 2. 3. 4. 5. 6. 7. 8. 9.]'"}, {"func_args": {"index": "(-10,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'0'"}, {"func_args": {"index": "(-9,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'1'"}, {"func_args": {"index": "(-8,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'2'"}, {"func_args": {"index": "(-7,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'3'"}, {"func_args": {"index": "(-6,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'4'"}, {"func_args": {"index": "(-5,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'5'"}, {"func_args": {"index": "(-4,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'6'"}, {"func_args": {"index": "(-3,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'7'"}, {"func_args": {"index": "(-2,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'8'"}, {"func_args": {"index": "(-1,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'9'"}, {"func_args": {"index": "()", "hanging_indent": "' '", "curr_width": "75"}, "return_value": "'[0 1 2 3 4 5 6 7 8 9]'"}, {"func_args": {"index": "(-10,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'10'"}, {"func_args": {"index": "(-9,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'11'"}, {"func_args": {"index": "(-8,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'12'"}, {"func_args": {"index": "(-7,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'13'"}, {"func_args": {"index": "(-6,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'14'"}, {"func_args": {"index": "(-5,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'15'"}, {"func_args": {"index": "(-4,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'16'"}, {"func_args": {"index": "(-3,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'17'"}, {"func_args": {"index": "(-2,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'18'"}, {"func_args": {"index": "(-1,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'19'"}, {"func_args": {"index": "()", "hanging_indent": "' '", "curr_width": "75"}, "return_value": "'[10 11 12 13 14 15 16 17 18 19]'"}, {"func_args": {"index": "(-10,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'10'"}, {"func_args": {"index": "(-9,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'10'"}, {"func_args": {"index": "(-8,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'10'"}, {"func_args": {"index": "(-7,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'10'"}, {"func_args": {"index": "(-6,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'10'"}, {"func_args": {"index": "(-5,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'10'"}, {"func_args": {"index": "(-4,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'10'"}, {"func_args": {"index": "(-3,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'10'"}, {"func_args": {"index": "(-2,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'10'"}, {"func_args": {"index": "(-1,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'10'"}, {"func_args": {"index": "()", "hanging_indent": "' '", "curr_width": "75"}, "return_value": "'[10 10 10 10 10 10 10 10 10 10]'"}, {"func_args": {"index": "(-10,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'10000.'"}, {"func_args": {"index": "(-9,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'10000.'"}, {"func_args": {"index": "(-8,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'10000.'"}, {"func_args": {"index": "(-7,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'10000.'"}, {"func_args": {"index": "(-6,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'10000.'"}, {"func_args": {"index": "(-5,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'10000.'"}, {"func_args": {"index": "(-4,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'10000.'"}, {"func_args": {"index": "(-3,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'10000.'"}, {"func_args": {"index": "(-2,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'10000.'"}, {"func_args": {"index": "(-1,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'10000.'"}, {"func_args": {"index": "()", "hanging_indent": "' '", "curr_width": "75"}, "return_value": "'[10000. 10000. 10000. 10000. 10000. 10000. 10000. 10000. 10000. 10000.]'"}, {"func_args": {"index": "(-10,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'0.00e+00'"}, {"func_args": {"index": "(-9,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'1.10e-05'"}, {"func_args": {"index": "(-8,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'2.40e-05'"}, {"func_args": {"index": "(-7,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'3.90e-05'"}, {"func_args": {"index": "(-6,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'5.60e-05'"}, {"func_args": {"index": "(-5,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'7.50e-05'"}, {"func_args": {"index": "(-4,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'9.60e-05'"}, {"func_args": {"index": "(-3,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'1.19e-04'"}, {"func_args": {"index": "(-2,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'1.44e-04'"}, {"func_args": {"index": "(-1,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'1.71e-04'"}, {"func_args": {"index": "()", "hanging_indent": "' '", "curr_width": "75"}, "return_value": "'[0.00e+00 1.10e-05 2.40e-05 3.90e-05 5.60e-05 7.50e-05 9.60e-05 1.19e-04\\n 1.44e-04 1.71e-04]'"}, {"func_args": {"index": "(-10,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'0'"}, {"func_args": {"index": "(-9,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'1'"}, {"func_args": {"index": "(-8,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'2'"}, {"func_args": {"index": "(-7,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'3'"}, {"func_args": {"index": "(-6,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'4'"}, {"func_args": {"index": "(-5,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'5'"}, {"func_args": {"index": "(-4,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'6'"}, {"func_args": {"index": "(-3,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'7'"}, {"func_args": {"index": "(-2,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'8'"}, {"func_args": {"index": "(-1,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'9'"}, {"func_args": {"index": "()", "hanging_indent": "' '", "curr_width": "75"}, "return_value": "'[0 1 2 3 4 5 6 7 8 9]'"}, {"func_args": {"index": "(-4,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'1'"}, {"func_args": {"index": "(-3,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'2'"}, {"func_args": {"index": "(-2,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'3'"}, {"func_args": {"index": "(-1,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'4'"}, {"func_args": {"index": "()", "hanging_indent": "' '", "curr_width": "75"}, "return_value": "'[1 2 3 4]'"}, {"func_args": {"index": "(-10,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "' 0'"}, {"func_args": {"index": "(-9,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'10'"}, {"func_args": {"index": "(-8,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "' 2'"}, {"func_args": {"index": "(-7,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "' 3'"}, {"func_args": {"index": "(-6,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "' 4'"}, {"func_args": {"index": "(-5,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "' 5'"}, {"func_args": {"index": "(-4,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "' 6'"}, {"func_args": {"index": "(-3,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "' 7'"}, {"func_args": {"index": "(-2,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "' 8'"}, {"func_args": {"index": "(-1,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "' 9'"}, {"func_args": {"index": "()", "hanging_indent": "' '", "curr_width": "75"}, "return_value": "'[ 0 10  2  3  4  5  6  7  8  9]'"}, {"func_args": {"index": "(-10,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'0'"}, {"func_args": {"index": "(-9,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'1'"}, {"func_args": {"index": "(-8,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'2'"}, {"func_args": {"index": "(-7,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'3'"}, {"func_args": {"index": "(-6,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'4'"}, {"func_args": {"index": "(-5,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'5'"}, {"func_args": {"index": "(-4,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'6'"}, {"func_args": {"index": "(-3,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'7'"}, {"func_args": {"index": "(-2,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'8'"}, {"func_args": {"index": "(-1,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'9'"}, {"func_args": {"index": "()", "hanging_indent": "' '", "curr_width": "75"}, "return_value": "'[0 1 2 3 4 5 6 7 8 9]'"}, {"func_args": {"index": "(-10,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "' 0'"}, {"func_args": {"index": "(-9,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'-1'"}, {"func_args": {"index": "(-8,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'-2'"}, {"func_args": {"index": "(-7,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'-3'"}, {"func_args": {"index": "(-6,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'-4'"}, {"func_args": {"index": "(-5,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'-5'"}, {"func_args": {"index": "(-4,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'-6'"}, {"func_args": {"index": "(-3,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'-7'"}, {"func_args": {"index": "(-2,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'-8'"}, {"func_args": {"index": "(-1,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'-9'"}, {"func_args": {"index": "()", "hanging_indent": "' '", "curr_width": "75"}, "return_value": "'[ 0 -1 -2 -3 -4 -5 -6 -7 -8 -9]'"}, {"func_args": {"index": "(-10,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'0.   '"}, {"func_args": {"index": "(-9,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'0.001'"}, {"func_args": {"index": "(-8,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'0.002'"}, {"func_args": {"index": "(-7,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'0.003'"}, {"func_args": {"index": "(-6,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'0.004'"}, {"func_args": {"index": "(-5,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'0.005'"}, {"func_args": {"index": "(-4,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'0.006'"}, {"func_args": {"index": "(-3,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'0.007'"}, {"func_args": {"index": "(-2,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'0.008'"}, {"func_args": {"index": "(-1,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'0.009'"}, {"func_args": {"index": "()", "hanging_indent": "' '", "curr_width": "75"}, "return_value": "'[0.    0.001 0.002 0.003 0.004 0.005 0.006 0.007 0.008 0.009]'"}, {"func_args": {"index": "(-10,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "' 0'"}, {"func_args": {"index": "(-9,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "' 2'"}, {"func_args": {"index": "(-8,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "' 4'"}, {"func_args": {"index": "(-7,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "' 6'"}, {"func_args": {"index": "(-6,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "' 8'"}, {"func_args": {"index": "(-5,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'10'"}, {"func_args": {"index": "(-4,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'12'"}, {"func_args": {"index": "(-3,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'14'"}, {"func_args": {"index": "(-2,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'16'"}, {"func_args": {"index": "(-1,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'18'"}, {"func_args": {"index": "()", "hanging_indent": "' '", "curr_width": "75"}, "return_value": "'[ 0  2  4  6  8 10 12 14 16 18]'"}, {"func_args": {"index": "(-10,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "' 0'"}, {"func_args": {"index": "(-9,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "' 2'"}, {"func_args": {"index": "(-8,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "' 4'"}, {"func_args": {"index": "(-7,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "' 6'"}, {"func_args": {"index": "(-6,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "' 8'"}, {"func_args": {"index": "(-5,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'10'"}, {"func_args": {"index": "(-4,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'12'"}, {"func_args": {"index": "(-3,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'14'"}, {"func_args": {"index": "(-2,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'16'"}, {"func_args": {"index": "(-1,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'18'"}, {"func_args": {"index": "()", "hanging_indent": "' '", "curr_width": "75"}, "return_value": "'[ 0  2  4  6  8 10 12 14 16 18]'"}, {"func_args": {"index": "(-10,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'0'"}, {"func_args": {"index": "(-9,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'1'"}, {"func_args": {"index": "(-8,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'2'"}, {"func_args": {"index": "(-7,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'3'"}, {"func_args": {"index": "(-6,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'4'"}, {"func_args": {"index": "(-5,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'5'"}, {"func_args": {"index": "(-4,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'6'"}, {"func_args": {"index": "(-3,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'7'"}, {"func_args": {"index": "(-2,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'8'"}, {"func_args": {"index": "(-1,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'9'"}, {"func_args": {"index": "()", "hanging_indent": "' '", "curr_width": "75"}, "return_value": "'[0 1 2 3 4 5 6 7 8 9]'"}, {"func_args": {"index": "(-10,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'0.e+00'"}, {"func_args": {"index": "(-9,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'1.e-07'"}, {"func_args": {"index": "(-8,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'2.e-07'"}, {"func_args": {"index": "(-7,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'3.e-07'"}, {"func_args": {"index": "(-6,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'4.e-07'"}, {"func_args": {"index": "(-5,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'5.e-07'"}, {"func_args": {"index": "(-4,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'6.e-07'"}, {"func_args": {"index": "(-3,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'7.e-07'"}, {"func_args": {"index": "(-2,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'8.e-07'"}, {"func_args": {"index": "(-1,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'9.e-07'"}, {"func_args": {"index": "()", "hanging_indent": "' '", "curr_width": "75"}, "return_value": "'[0.e+00 1.e-07 2.e-07 3.e-07 4.e-07 5.e-07 6.e-07 7.e-07 8.e-07 9.e-07]'"}, {"func_args": {"index": "(-10,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'0.0e+00'"}, {"func_args": {"index": "(-9,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'1.0e-06'"}, {"func_args": {"index": "(-8,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'4.0e-06'"}, {"func_args": {"index": "(-7,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'9.0e-06'"}, {"func_args": {"index": "(-6,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'1.6e-05'"}, {"func_args": {"index": "(-5,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'2.5e-05'"}, {"func_args": {"index": "(-4,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'3.6e-05'"}, {"func_args": {"index": "(-3,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'4.9e-05'"}, {"func_args": {"index": "(-2,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'6.4e-05'"}, {"func_args": {"index": "(-1,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'8.1e-05'"}, {"func_args": {"index": "()", "hanging_indent": "' '", "curr_width": "75"}, "return_value": "'[0.0e+00 1.0e-06 4.0e-06 9.0e-06 1.6e-05 2.5e-05 3.6e-05 4.9e-05 6.4e-05\\n 8.1e-05]'"}, {"func_args": {"index": "(-10,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'    0'"}, {"func_args": {"index": "(-9,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'    1'"}, {"func_args": {"index": "(-8,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'   32'"}, {"func_args": {"index": "(-7,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'  243'"}, {"func_args": {"index": "(-6,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "' 1024'"}, {"func_args": {"index": "(-5,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "' 3125'"}, {"func_args": {"index": "(-4,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "' 7776'"}, {"func_args": {"index": "(-3,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'16807'"}, {"func_args": {"index": "(-2,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'32768'"}, {"func_args": {"index": "(-1,)", "hanging_indent": "'  '", "curr_width": "74"}, "return_value": "'59049'"}, {"func_args": {"index": "()", "hanging_indent": "' '", "curr_width": "75"}, "return_value": "'[    0     1    32   243  1024  3125  7776 16807 32768 59049]'"}], "text": "def recurser(index, hanging_indent, curr_width):\n        \"\"\"\n        By using this local function, we don't need to recurse with all the\n        arguments. Since this function is not created recursively, the cost is\n        not significant\n        \"\"\"\n        axis = len(index)\n        axes_left = a.ndim - axis\n\n        if axes_left == 0:\n            return format_function(a[index])\n\n        # when recursing, add a space to align with the [ added, and reduce the\n        # length of the line by 1\n        next_hanging_indent = hanging_indent + ' '\n        if legacy <= 113:\n            next_width = curr_width\n        else:\n            next_width = curr_width - len(']')\n\n        a_len = a.shape[axis]\n        show_summary = summary_insert and 2*edge_items < a_len\n        if show_summary:\n            leading_items = edge_items\n            trailing_items = edge_items\n        else:\n            leading_items = 0\n            trailing_items = a_len\n\n        # stringify the array with the hanging indent on the first line too\n        s = ''\n\n        # last axis (rows) - wrap elements if they would not fit on one line\n        if axes_left == 1:\n            # the length up until the beginning of the separator / bracket\n            if legacy <= 113:\n                elem_width = curr_width - len(separator.rstrip())\n            else:\n                elem_width = curr_width - max(len(separator.rstrip()), len(']'))\n\n            line = hanging_indent\n            for i in range(leading_items):\n                word = recurser(index + (i,), next_hanging_indent, next_width)\n                s, line = _extendLine_pretty(\n                    s, line, word, elem_width, hanging_indent, legacy)\n                line += separator\n\n            if show_summary:\n                s, line = _extendLine(\n                    s, line, summary_insert, elem_width, hanging_indent, legacy)\n                if legacy <= 113:\n                    line += \", \"\n                else:\n                    line += separator\n\n            for i in range(trailing_items, 1, -1):\n                word = recurser(index + (-i,), next_hanging_indent, next_width)\n                s, line = _extendLine_pretty(\n                    s, line, word, elem_width, hanging_indent, legacy)\n                line += separator\n\n            if legacy <= 113:\n                # width of the separator is not considered on 1.13\n                elem_width = curr_width\n            word = recurser(index + (-1,), next_hanging_indent, next_width)\n            s, line = _extendLine_pretty(\n                s, line, word, elem_width, hanging_indent, legacy)\n\n            s += line\n\n        # other axes - insert newlines between rows\n        else:\n            s = ''\n            line_sep = separator.rstrip() + '\\n'*(axes_left - 1)\n\n            for i in range(leading_items):\n                nested = recurser(index + (i,), next_hanging_indent, next_width)\n                s += hanging_indent + nested + line_sep\n\n            if show_summary:\n                if legacy <= 113:\n                    # trailing space, fixed nbr of newlines, and fixed separator\n                    s += hanging_indent + summary_insert + \", \\n\"\n                else:\n                    s += hanging_indent + summary_insert + line_sep\n\n            for i in range(trailing_items, 1, -1):\n                nested = recurser(index + (-i,), next_hanging_indent,\n                                  next_width)\n                s += hanging_indent + nested + line_sep\n\n            nested = recurser(index + (-1,), next_hanging_indent, next_width)\n            s += hanging_indent + nested\n\n        # remove the hanging indent, and wrap in []\n        s = '[' + s[len(hanging_indent):] + ']'\n        return s"}, "_extendLine": {"line": 738, "args": [{"func_args": {"s": "''", "line": "' '", "word": "'0.'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.')"}, {"func_args": {"s": "''", "line": "' 0. '", "word": "'1.'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0. 1.')"}, {"func_args": {"s": "''", "line": "' 0. 1. '", "word": "'2.'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0. 1. 2.')"}, {"func_args": {"s": "''", "line": "' 0. 1. 2. '", "word": "'3.'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0. 1. 2. 3.')"}, {"func_args": {"s": "''", "line": "' 0. 1. 2. 3. '", "word": "'4.'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0. 1. 2. 3. 4.')"}, {"func_args": {"s": "''", "line": "' 0. 1. 2. 3. 4. '", "word": "'5.'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0. 1. 2. 3. 4. 5.')"}, {"func_args": {"s": "''", "line": "' 0. 1. 2. 3. 4. 5. '", "word": "'6.'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0. 1. 2. 3. 4. 5. 6.')"}, {"func_args": {"s": "''", "line": "' 0. 1. 2. 3. 4. 5. 6. '", "word": "'7.'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0. 1. 2. 3. 4. 5. 6. 7.')"}, {"func_args": {"s": "''", "line": "' 0. 1. 2. 3. 4. 5. 6. 7. '", "word": "'8.'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0. 1. 2. 3. 4. 5. 6. 7. 8.')"}, {"func_args": {"s": "''", "line": "' 0. 1. 2. 3. 4. 5. 6. 7. 8. '", "word": "'9.'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0. 1. 2. 3. 4. 5. 6. 7. 8. 9.')"}, {"func_args": {"s": "''", "line": "' '", "word": "'0'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0')"}, {"func_args": {"s": "''", "line": "' 0 '", "word": "'1'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1')"}, {"func_args": {"s": "''", "line": "' 0 1 '", "word": "'2'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2')"}, {"func_args": {"s": "''", "line": "' 0 1 2 '", "word": "'3'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3')"}, {"func_args": {"s": "''", "line": "' 0 1 2 3 '", "word": "'4'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3 4')"}, {"func_args": {"s": "''", "line": "' 0 1 2 3 4 '", "word": "'5'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3 4 5')"}, {"func_args": {"s": "''", "line": "' 0 1 2 3 4 5 '", "word": "'6'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3 4 5 6')"}, {"func_args": {"s": "''", "line": "' 0 1 2 3 4 5 6 '", "word": "'7'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3 4 5 6 7')"}, {"func_args": {"s": "''", "line": "' 0 1 2 3 4 5 6 7 '", "word": "'8'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3 4 5 6 7 8')"}, {"func_args": {"s": "''", "line": "' 0 1 2 3 4 5 6 7 8 '", "word": "'9'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3 4 5 6 7 8 9')"}, {"func_args": {"s": "''", "line": "' '", "word": "'10'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10')"}, {"func_args": {"s": "''", "line": "' 10 '", "word": "'11'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10 11')"}, {"func_args": {"s": "''", "line": "' 10 11 '", "word": "'12'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10 11 12')"}, {"func_args": {"s": "''", "line": "' 10 11 12 '", "word": "'13'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10 11 12 13')"}, {"func_args": {"s": "''", "line": "' 10 11 12 13 '", "word": "'14'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10 11 12 13 14')"}, {"func_args": {"s": "''", "line": "' 10 11 12 13 14 '", "word": "'15'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10 11 12 13 14 15')"}, {"func_args": {"s": "''", "line": "' 10 11 12 13 14 15 '", "word": "'16'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10 11 12 13 14 15 16')"}, {"func_args": {"s": "''", "line": "' 10 11 12 13 14 15 16 '", "word": "'17'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10 11 12 13 14 15 16 17')"}, {"func_args": {"s": "''", "line": "' 10 11 12 13 14 15 16 17 '", "word": "'18'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10 11 12 13 14 15 16 17 18')"}, {"func_args": {"s": "''", "line": "' 10 11 12 13 14 15 16 17 18 '", "word": "'19'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10 11 12 13 14 15 16 17 18 19')"}, {"func_args": {"s": "''", "line": "' '", "word": "'10'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10')"}, {"func_args": {"s": "''", "line": "' 10 '", "word": "'10'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10 10')"}, {"func_args": {"s": "''", "line": "' 10 10 '", "word": "'10'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10 10 10')"}, {"func_args": {"s": "''", "line": "' 10 10 10 '", "word": "'10'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10 10 10 10')"}, {"func_args": {"s": "''", "line": "' 10 10 10 10 '", "word": "'10'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10 10 10 10 10')"}, {"func_args": {"s": "''", "line": "' 10 10 10 10 10 '", "word": "'10'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10 10 10 10 10 10')"}, {"func_args": {"s": "''", "line": "' 10 10 10 10 10 10 '", "word": "'10'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10 10 10 10 10 10 10')"}, {"func_args": {"s": "''", "line": "' 10 10 10 10 10 10 10 '", "word": "'10'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10 10 10 10 10 10 10 10')"}, {"func_args": {"s": "''", "line": "' 10 10 10 10 10 10 10 10 '", "word": "'10'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10 10 10 10 10 10 10 10 10')"}, {"func_args": {"s": "''", "line": "' 10 10 10 10 10 10 10 10 10 '", "word": "'10'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10 10 10 10 10 10 10 10 10 10')"}, {"func_args": {"s": "''", "line": "' '", "word": "'10000.'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10000.')"}, {"func_args": {"s": "''", "line": "' 10000. '", "word": "'10000.'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10000. 10000.')"}, {"func_args": {"s": "''", "line": "' 10000. 10000. '", "word": "'10000.'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10000. 10000. 10000.')"}, {"func_args": {"s": "''", "line": "' 10000. 10000. 10000. '", "word": "'10000.'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10000. 10000. 10000. 10000.')"}, {"func_args": {"s": "''", "line": "' 10000. 10000. 10000. 10000. '", "word": "'10000.'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10000. 10000. 10000. 10000. 10000.')"}, {"func_args": {"s": "''", "line": "' 10000. 10000. 10000. 10000. 10000. '", "word": "'10000.'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10000. 10000. 10000. 10000. 10000. 10000.')"}, {"func_args": {"s": "''", "line": "' 10000. 10000. 10000. 10000. 10000. 10000. '", "word": "'10000.'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10000. 10000. 10000. 10000. 10000. 10000. 10000.')"}, {"func_args": {"s": "''", "line": "' 10000. 10000. 10000. 10000. 10000. 10000. 10000. '", "word": "'10000.'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10000. 10000. 10000. 10000. 10000. 10000. 10000. 10000.')"}, {"func_args": {"s": "''", "line": "' 10000. 10000. 10000. 10000. 10000. 10000. 10000. 10000. '", "word": "'10000.'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10000. 10000. 10000. 10000. 10000. 10000. 10000. 10000. 10000.')"}, {"func_args": {"s": "''", "line": "' 10000. 10000. 10000. 10000. 10000. 10000. 10000. 10000. 10000. '", "word": "'10000.'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10000. 10000. 10000. 10000. 10000. 10000. 10000. 10000. 10000. 10000.')"}, {"func_args": {"s": "''", "line": "' '", "word": "'0.00e+00'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.00e+00')"}, {"func_args": {"s": "''", "line": "' 0.00e+00 '", "word": "'1.10e-05'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.00e+00 1.10e-05')"}, {"func_args": {"s": "''", "line": "' 0.00e+00 1.10e-05 '", "word": "'2.40e-05'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.00e+00 1.10e-05 2.40e-05')"}, {"func_args": {"s": "''", "line": "' 0.00e+00 1.10e-05 2.40e-05 '", "word": "'3.90e-05'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.00e+00 1.10e-05 2.40e-05 3.90e-05')"}, {"func_args": {"s": "''", "line": "' 0.00e+00 1.10e-05 2.40e-05 3.90e-05 '", "word": "'5.60e-05'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.00e+00 1.10e-05 2.40e-05 3.90e-05 5.60e-05')"}, {"func_args": {"s": "''", "line": "' 0.00e+00 1.10e-05 2.40e-05 3.90e-05 5.60e-05 '", "word": "'7.50e-05'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.00e+00 1.10e-05 2.40e-05 3.90e-05 5.60e-05 7.50e-05')"}, {"func_args": {"s": "''", "line": "' 0.00e+00 1.10e-05 2.40e-05 3.90e-05 5.60e-05 7.50e-05 '", "word": "'9.60e-05'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.00e+00 1.10e-05 2.40e-05 3.90e-05 5.60e-05 7.50e-05 9.60e-05')"}, {"func_args": {"s": "''", "line": "' 0.00e+00 1.10e-05 2.40e-05 3.90e-05 5.60e-05 7.50e-05 9.60e-05 '", "word": "'1.19e-04'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.00e+00 1.10e-05 2.40e-05 3.90e-05 5.60e-05 7.50e-05 9.60e-05 1.19e-04')"}, {"func_args": {"s": "''", "line": "' 0.00e+00 1.10e-05 2.40e-05 3.90e-05 5.60e-05 7.50e-05 9.60e-05 1.19e-04 '", "word": "'1.44e-04'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "(' 0.00e+00 1.10e-05 2.40e-05 3.90e-05 5.60e-05 7.50e-05 9.60e-05 1.19e-04\\n', ' 1.44e-04')"}, {"func_args": {"s": "' 0.00e+00 1.10e-05 2.40e-05 3.90e-05 5.60e-05 7.50e-05 9.60e-05 1.19e-04\\n'", "line": "' 1.44e-04 '", "word": "'1.71e-04'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "(' 0.00e+00 1.10e-05 2.40e-05 3.90e-05 5.60e-05 7.50e-05 9.60e-05 1.19e-04\\n', ' 1.44e-04 1.71e-04')"}, {"func_args": {"s": "''", "line": "' '", "word": "'0'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0')"}, {"func_args": {"s": "''", "line": "' 0 '", "word": "'1'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1')"}, {"func_args": {"s": "''", "line": "' 0 1 '", "word": "'2'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2')"}, {"func_args": {"s": "''", "line": "' 0 1 2 '", "word": "'3'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3')"}, {"func_args": {"s": "''", "line": "' 0 1 2 3 '", "word": "'4'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3 4')"}, {"func_args": {"s": "''", "line": "' 0 1 2 3 4 '", "word": "'5'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3 4 5')"}, {"func_args": {"s": "''", "line": "' 0 1 2 3 4 5 '", "word": "'6'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3 4 5 6')"}, {"func_args": {"s": "''", "line": "' 0 1 2 3 4 5 6 '", "word": "'7'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3 4 5 6 7')"}, {"func_args": {"s": "''", "line": "' 0 1 2 3 4 5 6 7 '", "word": "'8'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3 4 5 6 7 8')"}, {"func_args": {"s": "''", "line": "' 0 1 2 3 4 5 6 7 8 '", "word": "'9'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3 4 5 6 7 8 9')"}, {"func_args": {"s": "''", "line": "' '", "word": "'1'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 1')"}, {"func_args": {"s": "''", "line": "' 1 '", "word": "'2'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 1 2')"}, {"func_args": {"s": "''", "line": "' 1 2 '", "word": "'3'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 1 2 3')"}, {"func_args": {"s": "''", "line": "' 1 2 3 '", "word": "'4'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 1 2 3 4')"}, {"func_args": {"s": "''", "line": "' '", "word": "' 0'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0')"}, {"func_args": {"s": "''", "line": "'  0 '", "word": "'10'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0 10')"}, {"func_args": {"s": "''", "line": "'  0 10 '", "word": "' 2'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0 10  2')"}, {"func_args": {"s": "''", "line": "'  0 10  2 '", "word": "' 3'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0 10  2  3')"}, {"func_args": {"s": "''", "line": "'  0 10  2  3 '", "word": "' 4'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0 10  2  3  4')"}, {"func_args": {"s": "''", "line": "'  0 10  2  3  4 '", "word": "' 5'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0 10  2  3  4  5')"}, {"func_args": {"s": "''", "line": "'  0 10  2  3  4  5 '", "word": "' 6'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0 10  2  3  4  5  6')"}, {"func_args": {"s": "''", "line": "'  0 10  2  3  4  5  6 '", "word": "' 7'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0 10  2  3  4  5  6  7')"}, {"func_args": {"s": "''", "line": "'  0 10  2  3  4  5  6  7 '", "word": "' 8'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0 10  2  3  4  5  6  7  8')"}, {"func_args": {"s": "''", "line": "'  0 10  2  3  4  5  6  7  8 '", "word": "' 9'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0 10  2  3  4  5  6  7  8  9')"}, {"func_args": {"s": "''", "line": "' '", "word": "'0'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0')"}, {"func_args": {"s": "''", "line": "' 0 '", "word": "'1'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1')"}, {"func_args": {"s": "''", "line": "' 0 1 '", "word": "'2'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2')"}, {"func_args": {"s": "''", "line": "' 0 1 2 '", "word": "'3'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3')"}, {"func_args": {"s": "''", "line": "' 0 1 2 3 '", "word": "'4'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3 4')"}, {"func_args": {"s": "''", "line": "' 0 1 2 3 4 '", "word": "'5'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3 4 5')"}, {"func_args": {"s": "''", "line": "' 0 1 2 3 4 5 '", "word": "'6'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3 4 5 6')"}, {"func_args": {"s": "''", "line": "' 0 1 2 3 4 5 6 '", "word": "'7'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3 4 5 6 7')"}, {"func_args": {"s": "''", "line": "' 0 1 2 3 4 5 6 7 '", "word": "'8'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3 4 5 6 7 8')"}, {"func_args": {"s": "''", "line": "' 0 1 2 3 4 5 6 7 8 '", "word": "'9'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3 4 5 6 7 8 9')"}, {"func_args": {"s": "''", "line": "' '", "word": "' 0'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0')"}, {"func_args": {"s": "''", "line": "'  0 '", "word": "'-1'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0 -1')"}, {"func_args": {"s": "''", "line": "'  0 -1 '", "word": "'-2'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0 -1 -2')"}, {"func_args": {"s": "''", "line": "'  0 -1 -2 '", "word": "'-3'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0 -1 -2 -3')"}, {"func_args": {"s": "''", "line": "'  0 -1 -2 -3 '", "word": "'-4'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0 -1 -2 -3 -4')"}, {"func_args": {"s": "''", "line": "'  0 -1 -2 -3 -4 '", "word": "'-5'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0 -1 -2 -3 -4 -5')"}, {"func_args": {"s": "''", "line": "'  0 -1 -2 -3 -4 -5 '", "word": "'-6'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0 -1 -2 -3 -4 -5 -6')"}, {"func_args": {"s": "''", "line": "'  0 -1 -2 -3 -4 -5 -6 '", "word": "'-7'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0 -1 -2 -3 -4 -5 -6 -7')"}, {"func_args": {"s": "''", "line": "'  0 -1 -2 -3 -4 -5 -6 -7 '", "word": "'-8'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0 -1 -2 -3 -4 -5 -6 -7 -8')"}, {"func_args": {"s": "''", "line": "'  0 -1 -2 -3 -4 -5 -6 -7 -8 '", "word": "'-9'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0 -1 -2 -3 -4 -5 -6 -7 -8 -9')"}, {"func_args": {"s": "''", "line": "' '", "word": "'0.   '", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.   ')"}, {"func_args": {"s": "''", "line": "' 0.    '", "word": "'0.001'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.    0.001')"}, {"func_args": {"s": "''", "line": "' 0.    0.001 '", "word": "'0.002'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.    0.001 0.002')"}, {"func_args": {"s": "''", "line": "' 0.    0.001 0.002 '", "word": "'0.003'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.    0.001 0.002 0.003')"}, {"func_args": {"s": "''", "line": "' 0.    0.001 0.002 0.003 '", "word": "'0.004'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.    0.001 0.002 0.003 0.004')"}, {"func_args": {"s": "''", "line": "' 0.    0.001 0.002 0.003 0.004 '", "word": "'0.005'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.    0.001 0.002 0.003 0.004 0.005')"}, {"func_args": {"s": "''", "line": "' 0.    0.001 0.002 0.003 0.004 0.005 '", "word": "'0.006'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.    0.001 0.002 0.003 0.004 0.005 0.006')"}, {"func_args": {"s": "''", "line": "' 0.    0.001 0.002 0.003 0.004 0.005 0.006 '", "word": "'0.007'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.    0.001 0.002 0.003 0.004 0.005 0.006 0.007')"}, {"func_args": {"s": "''", "line": "' 0.    0.001 0.002 0.003 0.004 0.005 0.006 0.007 '", "word": "'0.008'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.    0.001 0.002 0.003 0.004 0.005 0.006 0.007 0.008')"}, {"func_args": {"s": "''", "line": "' 0.    0.001 0.002 0.003 0.004 0.005 0.006 0.007 0.008 '", "word": "'0.009'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.    0.001 0.002 0.003 0.004 0.005 0.006 0.007 0.008 0.009')"}, {"func_args": {"s": "''", "line": "' '", "word": "' 0'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0')"}, {"func_args": {"s": "''", "line": "'  0 '", "word": "' 2'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0  2')"}, {"func_args": {"s": "''", "line": "'  0  2 '", "word": "' 4'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0  2  4')"}, {"func_args": {"s": "''", "line": "'  0  2  4 '", "word": "' 6'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0  2  4  6')"}, {"func_args": {"s": "''", "line": "'  0  2  4  6 '", "word": "' 8'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0  2  4  6  8')"}, {"func_args": {"s": "''", "line": "'  0  2  4  6  8 '", "word": "'10'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0  2  4  6  8 10')"}, {"func_args": {"s": "''", "line": "'  0  2  4  6  8 10 '", "word": "'12'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0  2  4  6  8 10 12')"}, {"func_args": {"s": "''", "line": "'  0  2  4  6  8 10 12 '", "word": "'14'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0  2  4  6  8 10 12 14')"}, {"func_args": {"s": "''", "line": "'  0  2  4  6  8 10 12 14 '", "word": "'16'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0  2  4  6  8 10 12 14 16')"}, {"func_args": {"s": "''", "line": "'  0  2  4  6  8 10 12 14 16 '", "word": "'18'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0  2  4  6  8 10 12 14 16 18')"}, {"func_args": {"s": "''", "line": "' '", "word": "' 0'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0')"}, {"func_args": {"s": "''", "line": "'  0 '", "word": "' 2'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0  2')"}, {"func_args": {"s": "''", "line": "'  0  2 '", "word": "' 4'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0  2  4')"}, {"func_args": {"s": "''", "line": "'  0  2  4 '", "word": "' 6'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0  2  4  6')"}, {"func_args": {"s": "''", "line": "'  0  2  4  6 '", "word": "' 8'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0  2  4  6  8')"}, {"func_args": {"s": "''", "line": "'  0  2  4  6  8 '", "word": "'10'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0  2  4  6  8 10')"}, {"func_args": {"s": "''", "line": "'  0  2  4  6  8 10 '", "word": "'12'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0  2  4  6  8 10 12')"}, {"func_args": {"s": "''", "line": "'  0  2  4  6  8 10 12 '", "word": "'14'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0  2  4  6  8 10 12 14')"}, {"func_args": {"s": "''", "line": "'  0  2  4  6  8 10 12 14 '", "word": "'16'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0  2  4  6  8 10 12 14 16')"}, {"func_args": {"s": "''", "line": "'  0  2  4  6  8 10 12 14 16 '", "word": "'18'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0  2  4  6  8 10 12 14 16 18')"}, {"func_args": {"s": "''", "line": "' '", "word": "'0'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0')"}, {"func_args": {"s": "''", "line": "' 0 '", "word": "'1'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1')"}, {"func_args": {"s": "''", "line": "' 0 1 '", "word": "'2'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2')"}, {"func_args": {"s": "''", "line": "' 0 1 2 '", "word": "'3'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3')"}, {"func_args": {"s": "''", "line": "' 0 1 2 3 '", "word": "'4'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3 4')"}, {"func_args": {"s": "''", "line": "' 0 1 2 3 4 '", "word": "'5'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3 4 5')"}, {"func_args": {"s": "''", "line": "' 0 1 2 3 4 5 '", "word": "'6'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3 4 5 6')"}, {"func_args": {"s": "''", "line": "' 0 1 2 3 4 5 6 '", "word": "'7'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3 4 5 6 7')"}, {"func_args": {"s": "''", "line": "' 0 1 2 3 4 5 6 7 '", "word": "'8'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3 4 5 6 7 8')"}, {"func_args": {"s": "''", "line": "' 0 1 2 3 4 5 6 7 8 '", "word": "'9'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3 4 5 6 7 8 9')"}, {"func_args": {"s": "''", "line": "' '", "word": "'0.e+00'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.e+00')"}, {"func_args": {"s": "''", "line": "' 0.e+00 '", "word": "'1.e-07'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.e+00 1.e-07')"}, {"func_args": {"s": "''", "line": "' 0.e+00 1.e-07 '", "word": "'2.e-07'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.e+00 1.e-07 2.e-07')"}, {"func_args": {"s": "''", "line": "' 0.e+00 1.e-07 2.e-07 '", "word": "'3.e-07'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.e+00 1.e-07 2.e-07 3.e-07')"}, {"func_args": {"s": "''", "line": "' 0.e+00 1.e-07 2.e-07 3.e-07 '", "word": "'4.e-07'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.e+00 1.e-07 2.e-07 3.e-07 4.e-07')"}, {"func_args": {"s": "''", "line": "' 0.e+00 1.e-07 2.e-07 3.e-07 4.e-07 '", "word": "'5.e-07'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.e+00 1.e-07 2.e-07 3.e-07 4.e-07 5.e-07')"}, {"func_args": {"s": "''", "line": "' 0.e+00 1.e-07 2.e-07 3.e-07 4.e-07 5.e-07 '", "word": "'6.e-07'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.e+00 1.e-07 2.e-07 3.e-07 4.e-07 5.e-07 6.e-07')"}, {"func_args": {"s": "''", "line": "' 0.e+00 1.e-07 2.e-07 3.e-07 4.e-07 5.e-07 6.e-07 '", "word": "'7.e-07'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.e+00 1.e-07 2.e-07 3.e-07 4.e-07 5.e-07 6.e-07 7.e-07')"}, {"func_args": {"s": "''", "line": "' 0.e+00 1.e-07 2.e-07 3.e-07 4.e-07 5.e-07 6.e-07 7.e-07 '", "word": "'8.e-07'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.e+00 1.e-07 2.e-07 3.e-07 4.e-07 5.e-07 6.e-07 7.e-07 8.e-07')"}, {"func_args": {"s": "''", "line": "' 0.e+00 1.e-07 2.e-07 3.e-07 4.e-07 5.e-07 6.e-07 7.e-07 8.e-07 '", "word": "'9.e-07'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.e+00 1.e-07 2.e-07 3.e-07 4.e-07 5.e-07 6.e-07 7.e-07 8.e-07 9.e-07')"}, {"func_args": {"s": "''", "line": "' '", "word": "'0.0e+00'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.0e+00')"}, {"func_args": {"s": "''", "line": "' 0.0e+00 '", "word": "'1.0e-06'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.0e+00 1.0e-06')"}, {"func_args": {"s": "''", "line": "' 0.0e+00 1.0e-06 '", "word": "'4.0e-06'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.0e+00 1.0e-06 4.0e-06')"}, {"func_args": {"s": "''", "line": "' 0.0e+00 1.0e-06 4.0e-06 '", "word": "'9.0e-06'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.0e+00 1.0e-06 4.0e-06 9.0e-06')"}, {"func_args": {"s": "''", "line": "' 0.0e+00 1.0e-06 4.0e-06 9.0e-06 '", "word": "'1.6e-05'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.0e+00 1.0e-06 4.0e-06 9.0e-06 1.6e-05')"}, {"func_args": {"s": "''", "line": "' 0.0e+00 1.0e-06 4.0e-06 9.0e-06 1.6e-05 '", "word": "'2.5e-05'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.0e+00 1.0e-06 4.0e-06 9.0e-06 1.6e-05 2.5e-05')"}, {"func_args": {"s": "''", "line": "' 0.0e+00 1.0e-06 4.0e-06 9.0e-06 1.6e-05 2.5e-05 '", "word": "'3.6e-05'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.0e+00 1.0e-06 4.0e-06 9.0e-06 1.6e-05 2.5e-05 3.6e-05')"}, {"func_args": {"s": "''", "line": "' 0.0e+00 1.0e-06 4.0e-06 9.0e-06 1.6e-05 2.5e-05 3.6e-05 '", "word": "'4.9e-05'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.0e+00 1.0e-06 4.0e-06 9.0e-06 1.6e-05 2.5e-05 3.6e-05 4.9e-05')"}, {"func_args": {"s": "''", "line": "' 0.0e+00 1.0e-06 4.0e-06 9.0e-06 1.6e-05 2.5e-05 3.6e-05 4.9e-05 '", "word": "'6.4e-05'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.0e+00 1.0e-06 4.0e-06 9.0e-06 1.6e-05 2.5e-05 3.6e-05 4.9e-05 6.4e-05')"}, {"func_args": {"s": "''", "line": "' 0.0e+00 1.0e-06 4.0e-06 9.0e-06 1.6e-05 2.5e-05 3.6e-05 4.9e-05 6.4e-05 '", "word": "'8.1e-05'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "(' 0.0e+00 1.0e-06 4.0e-06 9.0e-06 1.6e-05 2.5e-05 3.6e-05 4.9e-05 6.4e-05\\n', ' 8.1e-05')"}, {"func_args": {"s": "''", "line": "' '", "word": "'    0'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '     0')"}, {"func_args": {"s": "''", "line": "'     0 '", "word": "'    1'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '     0     1')"}, {"func_args": {"s": "''", "line": "'     0     1 '", "word": "'   32'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '     0     1    32')"}, {"func_args": {"s": "''", "line": "'     0     1    32 '", "word": "'  243'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '     0     1    32   243')"}, {"func_args": {"s": "''", "line": "'     0     1    32   243 '", "word": "' 1024'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '     0     1    32   243  1024')"}, {"func_args": {"s": "''", "line": "'     0     1    32   243  1024 '", "word": "' 3125'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '     0     1    32   243  1024  3125')"}, {"func_args": {"s": "''", "line": "'     0     1    32   243  1024  3125 '", "word": "' 7776'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '     0     1    32   243  1024  3125  7776')"}, {"func_args": {"s": "''", "line": "'     0     1    32   243  1024  3125  7776 '", "word": "'16807'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '     0     1    32   243  1024  3125  7776 16807')"}, {"func_args": {"s": "''", "line": "'     0     1    32   243  1024  3125  7776 16807 '", "word": "'32768'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '     0     1    32   243  1024  3125  7776 16807 32768')"}, {"func_args": {"s": "''", "line": "'     0     1    32   243  1024  3125  7776 16807 32768 '", "word": "'59049'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '     0     1    32   243  1024  3125  7776 16807 32768 59049')"}], "text": "def _extendLine(s, line, word, line_width, next_line_prefix, legacy):\n    needs_wrap = len(line) + len(word) > line_width\n    if legacy > 113:\n        # don't wrap lines if it won't help\n        if len(line) <= len(next_line_prefix):\n            needs_wrap = False\n\n    if needs_wrap:\n        s += line.rstrip() + \"\\n\"\n        line = next_line_prefix\n    line += word\n    return s, line"}, "_extendLine_pretty": {"line": 752, "args": [{"func_args": {"s": "''", "line": "' '", "word": "'0.'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.')"}, {"func_args": {"s": "''", "line": "' 0. '", "word": "'1.'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0. 1.')"}, {"func_args": {"s": "''", "line": "' 0. 1. '", "word": "'2.'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0. 1. 2.')"}, {"func_args": {"s": "''", "line": "' 0. 1. 2. '", "word": "'3.'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0. 1. 2. 3.')"}, {"func_args": {"s": "''", "line": "' 0. 1. 2. 3. '", "word": "'4.'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0. 1. 2. 3. 4.')"}, {"func_args": {"s": "''", "line": "' 0. 1. 2. 3. 4. '", "word": "'5.'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0. 1. 2. 3. 4. 5.')"}, {"func_args": {"s": "''", "line": "' 0. 1. 2. 3. 4. 5. '", "word": "'6.'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0. 1. 2. 3. 4. 5. 6.')"}, {"func_args": {"s": "''", "line": "' 0. 1. 2. 3. 4. 5. 6. '", "word": "'7.'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0. 1. 2. 3. 4. 5. 6. 7.')"}, {"func_args": {"s": "''", "line": "' 0. 1. 2. 3. 4. 5. 6. 7. '", "word": "'8.'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0. 1. 2. 3. 4. 5. 6. 7. 8.')"}, {"func_args": {"s": "''", "line": "' 0. 1. 2. 3. 4. 5. 6. 7. 8. '", "word": "'9.'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0. 1. 2. 3. 4. 5. 6. 7. 8. 9.')"}, {"func_args": {"s": "''", "line": "' '", "word": "'0'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0')"}, {"func_args": {"s": "''", "line": "' 0 '", "word": "'1'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1')"}, {"func_args": {"s": "''", "line": "' 0 1 '", "word": "'2'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2')"}, {"func_args": {"s": "''", "line": "' 0 1 2 '", "word": "'3'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3')"}, {"func_args": {"s": "''", "line": "' 0 1 2 3 '", "word": "'4'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3 4')"}, {"func_args": {"s": "''", "line": "' 0 1 2 3 4 '", "word": "'5'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3 4 5')"}, {"func_args": {"s": "''", "line": "' 0 1 2 3 4 5 '", "word": "'6'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3 4 5 6')"}, {"func_args": {"s": "''", "line": "' 0 1 2 3 4 5 6 '", "word": "'7'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3 4 5 6 7')"}, {"func_args": {"s": "''", "line": "' 0 1 2 3 4 5 6 7 '", "word": "'8'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3 4 5 6 7 8')"}, {"func_args": {"s": "''", "line": "' 0 1 2 3 4 5 6 7 8 '", "word": "'9'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3 4 5 6 7 8 9')"}, {"func_args": {"s": "''", "line": "' '", "word": "'10'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10')"}, {"func_args": {"s": "''", "line": "' 10 '", "word": "'11'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10 11')"}, {"func_args": {"s": "''", "line": "' 10 11 '", "word": "'12'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10 11 12')"}, {"func_args": {"s": "''", "line": "' 10 11 12 '", "word": "'13'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10 11 12 13')"}, {"func_args": {"s": "''", "line": "' 10 11 12 13 '", "word": "'14'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10 11 12 13 14')"}, {"func_args": {"s": "''", "line": "' 10 11 12 13 14 '", "word": "'15'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10 11 12 13 14 15')"}, {"func_args": {"s": "''", "line": "' 10 11 12 13 14 15 '", "word": "'16'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10 11 12 13 14 15 16')"}, {"func_args": {"s": "''", "line": "' 10 11 12 13 14 15 16 '", "word": "'17'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10 11 12 13 14 15 16 17')"}, {"func_args": {"s": "''", "line": "' 10 11 12 13 14 15 16 17 '", "word": "'18'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10 11 12 13 14 15 16 17 18')"}, {"func_args": {"s": "''", "line": "' 10 11 12 13 14 15 16 17 18 '", "word": "'19'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10 11 12 13 14 15 16 17 18 19')"}, {"func_args": {"s": "''", "line": "' '", "word": "'10'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10')"}, {"func_args": {"s": "''", "line": "' 10 '", "word": "'10'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10 10')"}, {"func_args": {"s": "''", "line": "' 10 10 '", "word": "'10'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10 10 10')"}, {"func_args": {"s": "''", "line": "' 10 10 10 '", "word": "'10'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10 10 10 10')"}, {"func_args": {"s": "''", "line": "' 10 10 10 10 '", "word": "'10'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10 10 10 10 10')"}, {"func_args": {"s": "''", "line": "' 10 10 10 10 10 '", "word": "'10'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10 10 10 10 10 10')"}, {"func_args": {"s": "''", "line": "' 10 10 10 10 10 10 '", "word": "'10'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10 10 10 10 10 10 10')"}, {"func_args": {"s": "''", "line": "' 10 10 10 10 10 10 10 '", "word": "'10'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10 10 10 10 10 10 10 10')"}, {"func_args": {"s": "''", "line": "' 10 10 10 10 10 10 10 10 '", "word": "'10'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10 10 10 10 10 10 10 10 10')"}, {"func_args": {"s": "''", "line": "' 10 10 10 10 10 10 10 10 10 '", "word": "'10'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10 10 10 10 10 10 10 10 10 10')"}, {"func_args": {"s": "''", "line": "' '", "word": "'10000.'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10000.')"}, {"func_args": {"s": "''", "line": "' 10000. '", "word": "'10000.'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10000. 10000.')"}, {"func_args": {"s": "''", "line": "' 10000. 10000. '", "word": "'10000.'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10000. 10000. 10000.')"}, {"func_args": {"s": "''", "line": "' 10000. 10000. 10000. '", "word": "'10000.'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10000. 10000. 10000. 10000.')"}, {"func_args": {"s": "''", "line": "' 10000. 10000. 10000. 10000. '", "word": "'10000.'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10000. 10000. 10000. 10000. 10000.')"}, {"func_args": {"s": "''", "line": "' 10000. 10000. 10000. 10000. 10000. '", "word": "'10000.'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10000. 10000. 10000. 10000. 10000. 10000.')"}, {"func_args": {"s": "''", "line": "' 10000. 10000. 10000. 10000. 10000. 10000. '", "word": "'10000.'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10000. 10000. 10000. 10000. 10000. 10000. 10000.')"}, {"func_args": {"s": "''", "line": "' 10000. 10000. 10000. 10000. 10000. 10000. 10000. '", "word": "'10000.'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10000. 10000. 10000. 10000. 10000. 10000. 10000. 10000.')"}, {"func_args": {"s": "''", "line": "' 10000. 10000. 10000. 10000. 10000. 10000. 10000. 10000. '", "word": "'10000.'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10000. 10000. 10000. 10000. 10000. 10000. 10000. 10000. 10000.')"}, {"func_args": {"s": "''", "line": "' 10000. 10000. 10000. 10000. 10000. 10000. 10000. 10000. 10000. '", "word": "'10000.'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 10000. 10000. 10000. 10000. 10000. 10000. 10000. 10000. 10000. 10000.')"}, {"func_args": {"s": "''", "line": "' '", "word": "'0.00e+00'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.00e+00')"}, {"func_args": {"s": "''", "line": "' 0.00e+00 '", "word": "'1.10e-05'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.00e+00 1.10e-05')"}, {"func_args": {"s": "''", "line": "' 0.00e+00 1.10e-05 '", "word": "'2.40e-05'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.00e+00 1.10e-05 2.40e-05')"}, {"func_args": {"s": "''", "line": "' 0.00e+00 1.10e-05 2.40e-05 '", "word": "'3.90e-05'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.00e+00 1.10e-05 2.40e-05 3.90e-05')"}, {"func_args": {"s": "''", "line": "' 0.00e+00 1.10e-05 2.40e-05 3.90e-05 '", "word": "'5.60e-05'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.00e+00 1.10e-05 2.40e-05 3.90e-05 5.60e-05')"}, {"func_args": {"s": "''", "line": "' 0.00e+00 1.10e-05 2.40e-05 3.90e-05 5.60e-05 '", "word": "'7.50e-05'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.00e+00 1.10e-05 2.40e-05 3.90e-05 5.60e-05 7.50e-05')"}, {"func_args": {"s": "''", "line": "' 0.00e+00 1.10e-05 2.40e-05 3.90e-05 5.60e-05 7.50e-05 '", "word": "'9.60e-05'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.00e+00 1.10e-05 2.40e-05 3.90e-05 5.60e-05 7.50e-05 9.60e-05')"}, {"func_args": {"s": "''", "line": "' 0.00e+00 1.10e-05 2.40e-05 3.90e-05 5.60e-05 7.50e-05 9.60e-05 '", "word": "'1.19e-04'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.00e+00 1.10e-05 2.40e-05 3.90e-05 5.60e-05 7.50e-05 9.60e-05 1.19e-04')"}, {"func_args": {"s": "''", "line": "' 0.00e+00 1.10e-05 2.40e-05 3.90e-05 5.60e-05 7.50e-05 9.60e-05 1.19e-04 '", "word": "'1.44e-04'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "(' 0.00e+00 1.10e-05 2.40e-05 3.90e-05 5.60e-05 7.50e-05 9.60e-05 1.19e-04\\n', ' 1.44e-04')"}, {"func_args": {"s": "' 0.00e+00 1.10e-05 2.40e-05 3.90e-05 5.60e-05 7.50e-05 9.60e-05 1.19e-04\\n'", "line": "' 1.44e-04 '", "word": "'1.71e-04'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "(' 0.00e+00 1.10e-05 2.40e-05 3.90e-05 5.60e-05 7.50e-05 9.60e-05 1.19e-04\\n', ' 1.44e-04 1.71e-04')"}, {"func_args": {"s": "''", "line": "' '", "word": "'0'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0')"}, {"func_args": {"s": "''", "line": "' 0 '", "word": "'1'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1')"}, {"func_args": {"s": "''", "line": "' 0 1 '", "word": "'2'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2')"}, {"func_args": {"s": "''", "line": "' 0 1 2 '", "word": "'3'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3')"}, {"func_args": {"s": "''", "line": "' 0 1 2 3 '", "word": "'4'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3 4')"}, {"func_args": {"s": "''", "line": "' 0 1 2 3 4 '", "word": "'5'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3 4 5')"}, {"func_args": {"s": "''", "line": "' 0 1 2 3 4 5 '", "word": "'6'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3 4 5 6')"}, {"func_args": {"s": "''", "line": "' 0 1 2 3 4 5 6 '", "word": "'7'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3 4 5 6 7')"}, {"func_args": {"s": "''", "line": "' 0 1 2 3 4 5 6 7 '", "word": "'8'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3 4 5 6 7 8')"}, {"func_args": {"s": "''", "line": "' 0 1 2 3 4 5 6 7 8 '", "word": "'9'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3 4 5 6 7 8 9')"}, {"func_args": {"s": "''", "line": "' '", "word": "'1'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 1')"}, {"func_args": {"s": "''", "line": "' 1 '", "word": "'2'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 1 2')"}, {"func_args": {"s": "''", "line": "' 1 2 '", "word": "'3'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 1 2 3')"}, {"func_args": {"s": "''", "line": "' 1 2 3 '", "word": "'4'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 1 2 3 4')"}, {"func_args": {"s": "''", "line": "' '", "word": "' 0'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0')"}, {"func_args": {"s": "''", "line": "'  0 '", "word": "'10'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0 10')"}, {"func_args": {"s": "''", "line": "'  0 10 '", "word": "' 2'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0 10  2')"}, {"func_args": {"s": "''", "line": "'  0 10  2 '", "word": "' 3'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0 10  2  3')"}, {"func_args": {"s": "''", "line": "'  0 10  2  3 '", "word": "' 4'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0 10  2  3  4')"}, {"func_args": {"s": "''", "line": "'  0 10  2  3  4 '", "word": "' 5'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0 10  2  3  4  5')"}, {"func_args": {"s": "''", "line": "'  0 10  2  3  4  5 '", "word": "' 6'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0 10  2  3  4  5  6')"}, {"func_args": {"s": "''", "line": "'  0 10  2  3  4  5  6 '", "word": "' 7'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0 10  2  3  4  5  6  7')"}, {"func_args": {"s": "''", "line": "'  0 10  2  3  4  5  6  7 '", "word": "' 8'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0 10  2  3  4  5  6  7  8')"}, {"func_args": {"s": "''", "line": "'  0 10  2  3  4  5  6  7  8 '", "word": "' 9'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0 10  2  3  4  5  6  7  8  9')"}, {"func_args": {"s": "''", "line": "' '", "word": "'0'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0')"}, {"func_args": {"s": "''", "line": "' 0 '", "word": "'1'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1')"}, {"func_args": {"s": "''", "line": "' 0 1 '", "word": "'2'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2')"}, {"func_args": {"s": "''", "line": "' 0 1 2 '", "word": "'3'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3')"}, {"func_args": {"s": "''", "line": "' 0 1 2 3 '", "word": "'4'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3 4')"}, {"func_args": {"s": "''", "line": "' 0 1 2 3 4 '", "word": "'5'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3 4 5')"}, {"func_args": {"s": "''", "line": "' 0 1 2 3 4 5 '", "word": "'6'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3 4 5 6')"}, {"func_args": {"s": "''", "line": "' 0 1 2 3 4 5 6 '", "word": "'7'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3 4 5 6 7')"}, {"func_args": {"s": "''", "line": "' 0 1 2 3 4 5 6 7 '", "word": "'8'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3 4 5 6 7 8')"}, {"func_args": {"s": "''", "line": "' 0 1 2 3 4 5 6 7 8 '", "word": "'9'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3 4 5 6 7 8 9')"}, {"func_args": {"s": "''", "line": "' '", "word": "' 0'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0')"}, {"func_args": {"s": "''", "line": "'  0 '", "word": "'-1'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0 -1')"}, {"func_args": {"s": "''", "line": "'  0 -1 '", "word": "'-2'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0 -1 -2')"}, {"func_args": {"s": "''", "line": "'  0 -1 -2 '", "word": "'-3'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0 -1 -2 -3')"}, {"func_args": {"s": "''", "line": "'  0 -1 -2 -3 '", "word": "'-4'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0 -1 -2 -3 -4')"}, {"func_args": {"s": "''", "line": "'  0 -1 -2 -3 -4 '", "word": "'-5'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0 -1 -2 -3 -4 -5')"}, {"func_args": {"s": "''", "line": "'  0 -1 -2 -3 -4 -5 '", "word": "'-6'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0 -1 -2 -3 -4 -5 -6')"}, {"func_args": {"s": "''", "line": "'  0 -1 -2 -3 -4 -5 -6 '", "word": "'-7'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0 -1 -2 -3 -4 -5 -6 -7')"}, {"func_args": {"s": "''", "line": "'  0 -1 -2 -3 -4 -5 -6 -7 '", "word": "'-8'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0 -1 -2 -3 -4 -5 -6 -7 -8')"}, {"func_args": {"s": "''", "line": "'  0 -1 -2 -3 -4 -5 -6 -7 -8 '", "word": "'-9'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0 -1 -2 -3 -4 -5 -6 -7 -8 -9')"}, {"func_args": {"s": "''", "line": "' '", "word": "'0.   '", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.   ')"}, {"func_args": {"s": "''", "line": "' 0.    '", "word": "'0.001'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.    0.001')"}, {"func_args": {"s": "''", "line": "' 0.    0.001 '", "word": "'0.002'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.    0.001 0.002')"}, {"func_args": {"s": "''", "line": "' 0.    0.001 0.002 '", "word": "'0.003'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.    0.001 0.002 0.003')"}, {"func_args": {"s": "''", "line": "' 0.    0.001 0.002 0.003 '", "word": "'0.004'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.    0.001 0.002 0.003 0.004')"}, {"func_args": {"s": "''", "line": "' 0.    0.001 0.002 0.003 0.004 '", "word": "'0.005'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.    0.001 0.002 0.003 0.004 0.005')"}, {"func_args": {"s": "''", "line": "' 0.    0.001 0.002 0.003 0.004 0.005 '", "word": "'0.006'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.    0.001 0.002 0.003 0.004 0.005 0.006')"}, {"func_args": {"s": "''", "line": "' 0.    0.001 0.002 0.003 0.004 0.005 0.006 '", "word": "'0.007'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.    0.001 0.002 0.003 0.004 0.005 0.006 0.007')"}, {"func_args": {"s": "''", "line": "' 0.    0.001 0.002 0.003 0.004 0.005 0.006 0.007 '", "word": "'0.008'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.    0.001 0.002 0.003 0.004 0.005 0.006 0.007 0.008')"}, {"func_args": {"s": "''", "line": "' 0.    0.001 0.002 0.003 0.004 0.005 0.006 0.007 0.008 '", "word": "'0.009'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.    0.001 0.002 0.003 0.004 0.005 0.006 0.007 0.008 0.009')"}, {"func_args": {"s": "''", "line": "' '", "word": "' 0'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0')"}, {"func_args": {"s": "''", "line": "'  0 '", "word": "' 2'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0  2')"}, {"func_args": {"s": "''", "line": "'  0  2 '", "word": "' 4'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0  2  4')"}, {"func_args": {"s": "''", "line": "'  0  2  4 '", "word": "' 6'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0  2  4  6')"}, {"func_args": {"s": "''", "line": "'  0  2  4  6 '", "word": "' 8'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0  2  4  6  8')"}, {"func_args": {"s": "''", "line": "'  0  2  4  6  8 '", "word": "'10'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0  2  4  6  8 10')"}, {"func_args": {"s": "''", "line": "'  0  2  4  6  8 10 '", "word": "'12'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0  2  4  6  8 10 12')"}, {"func_args": {"s": "''", "line": "'  0  2  4  6  8 10 12 '", "word": "'14'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0  2  4  6  8 10 12 14')"}, {"func_args": {"s": "''", "line": "'  0  2  4  6  8 10 12 14 '", "word": "'16'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0  2  4  6  8 10 12 14 16')"}, {"func_args": {"s": "''", "line": "'  0  2  4  6  8 10 12 14 16 '", "word": "'18'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0  2  4  6  8 10 12 14 16 18')"}, {"func_args": {"s": "''", "line": "' '", "word": "' 0'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0')"}, {"func_args": {"s": "''", "line": "'  0 '", "word": "' 2'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0  2')"}, {"func_args": {"s": "''", "line": "'  0  2 '", "word": "' 4'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0  2  4')"}, {"func_args": {"s": "''", "line": "'  0  2  4 '", "word": "' 6'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0  2  4  6')"}, {"func_args": {"s": "''", "line": "'  0  2  4  6 '", "word": "' 8'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0  2  4  6  8')"}, {"func_args": {"s": "''", "line": "'  0  2  4  6  8 '", "word": "'10'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0  2  4  6  8 10')"}, {"func_args": {"s": "''", "line": "'  0  2  4  6  8 10 '", "word": "'12'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0  2  4  6  8 10 12')"}, {"func_args": {"s": "''", "line": "'  0  2  4  6  8 10 12 '", "word": "'14'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0  2  4  6  8 10 12 14')"}, {"func_args": {"s": "''", "line": "'  0  2  4  6  8 10 12 14 '", "word": "'16'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0  2  4  6  8 10 12 14 16')"}, {"func_args": {"s": "''", "line": "'  0  2  4  6  8 10 12 14 16 '", "word": "'18'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '  0  2  4  6  8 10 12 14 16 18')"}, {"func_args": {"s": "''", "line": "' '", "word": "'0'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0')"}, {"func_args": {"s": "''", "line": "' 0 '", "word": "'1'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1')"}, {"func_args": {"s": "''", "line": "' 0 1 '", "word": "'2'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2')"}, {"func_args": {"s": "''", "line": "' 0 1 2 '", "word": "'3'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3')"}, {"func_args": {"s": "''", "line": "' 0 1 2 3 '", "word": "'4'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3 4')"}, {"func_args": {"s": "''", "line": "' 0 1 2 3 4 '", "word": "'5'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3 4 5')"}, {"func_args": {"s": "''", "line": "' 0 1 2 3 4 5 '", "word": "'6'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3 4 5 6')"}, {"func_args": {"s": "''", "line": "' 0 1 2 3 4 5 6 '", "word": "'7'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3 4 5 6 7')"}, {"func_args": {"s": "''", "line": "' 0 1 2 3 4 5 6 7 '", "word": "'8'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3 4 5 6 7 8')"}, {"func_args": {"s": "''", "line": "' 0 1 2 3 4 5 6 7 8 '", "word": "'9'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0 1 2 3 4 5 6 7 8 9')"}, {"func_args": {"s": "''", "line": "' '", "word": "'0.e+00'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.e+00')"}, {"func_args": {"s": "''", "line": "' 0.e+00 '", "word": "'1.e-07'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.e+00 1.e-07')"}, {"func_args": {"s": "''", "line": "' 0.e+00 1.e-07 '", "word": "'2.e-07'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.e+00 1.e-07 2.e-07')"}, {"func_args": {"s": "''", "line": "' 0.e+00 1.e-07 2.e-07 '", "word": "'3.e-07'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.e+00 1.e-07 2.e-07 3.e-07')"}, {"func_args": {"s": "''", "line": "' 0.e+00 1.e-07 2.e-07 3.e-07 '", "word": "'4.e-07'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.e+00 1.e-07 2.e-07 3.e-07 4.e-07')"}, {"func_args": {"s": "''", "line": "' 0.e+00 1.e-07 2.e-07 3.e-07 4.e-07 '", "word": "'5.e-07'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.e+00 1.e-07 2.e-07 3.e-07 4.e-07 5.e-07')"}, {"func_args": {"s": "''", "line": "' 0.e+00 1.e-07 2.e-07 3.e-07 4.e-07 5.e-07 '", "word": "'6.e-07'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.e+00 1.e-07 2.e-07 3.e-07 4.e-07 5.e-07 6.e-07')"}, {"func_args": {"s": "''", "line": "' 0.e+00 1.e-07 2.e-07 3.e-07 4.e-07 5.e-07 6.e-07 '", "word": "'7.e-07'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.e+00 1.e-07 2.e-07 3.e-07 4.e-07 5.e-07 6.e-07 7.e-07')"}, {"func_args": {"s": "''", "line": "' 0.e+00 1.e-07 2.e-07 3.e-07 4.e-07 5.e-07 6.e-07 7.e-07 '", "word": "'8.e-07'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.e+00 1.e-07 2.e-07 3.e-07 4.e-07 5.e-07 6.e-07 7.e-07 8.e-07')"}, {"func_args": {"s": "''", "line": "' 0.e+00 1.e-07 2.e-07 3.e-07 4.e-07 5.e-07 6.e-07 7.e-07 8.e-07 '", "word": "'9.e-07'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.e+00 1.e-07 2.e-07 3.e-07 4.e-07 5.e-07 6.e-07 7.e-07 8.e-07 9.e-07')"}, {"func_args": {"s": "''", "line": "' '", "word": "'0.0e+00'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.0e+00')"}, {"func_args": {"s": "''", "line": "' 0.0e+00 '", "word": "'1.0e-06'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.0e+00 1.0e-06')"}, {"func_args": {"s": "''", "line": "' 0.0e+00 1.0e-06 '", "word": "'4.0e-06'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.0e+00 1.0e-06 4.0e-06')"}, {"func_args": {"s": "''", "line": "' 0.0e+00 1.0e-06 4.0e-06 '", "word": "'9.0e-06'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.0e+00 1.0e-06 4.0e-06 9.0e-06')"}, {"func_args": {"s": "''", "line": "' 0.0e+00 1.0e-06 4.0e-06 9.0e-06 '", "word": "'1.6e-05'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.0e+00 1.0e-06 4.0e-06 9.0e-06 1.6e-05')"}, {"func_args": {"s": "''", "line": "' 0.0e+00 1.0e-06 4.0e-06 9.0e-06 1.6e-05 '", "word": "'2.5e-05'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.0e+00 1.0e-06 4.0e-06 9.0e-06 1.6e-05 2.5e-05')"}, {"func_args": {"s": "''", "line": "' 0.0e+00 1.0e-06 4.0e-06 9.0e-06 1.6e-05 2.5e-05 '", "word": "'3.6e-05'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.0e+00 1.0e-06 4.0e-06 9.0e-06 1.6e-05 2.5e-05 3.6e-05')"}, {"func_args": {"s": "''", "line": "' 0.0e+00 1.0e-06 4.0e-06 9.0e-06 1.6e-05 2.5e-05 3.6e-05 '", "word": "'4.9e-05'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.0e+00 1.0e-06 4.0e-06 9.0e-06 1.6e-05 2.5e-05 3.6e-05 4.9e-05')"}, {"func_args": {"s": "''", "line": "' 0.0e+00 1.0e-06 4.0e-06 9.0e-06 1.6e-05 2.5e-05 3.6e-05 4.9e-05 '", "word": "'6.4e-05'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', ' 0.0e+00 1.0e-06 4.0e-06 9.0e-06 1.6e-05 2.5e-05 3.6e-05 4.9e-05 6.4e-05')"}, {"func_args": {"s": "''", "line": "' 0.0e+00 1.0e-06 4.0e-06 9.0e-06 1.6e-05 2.5e-05 3.6e-05 4.9e-05 6.4e-05 '", "word": "'8.1e-05'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "(' 0.0e+00 1.0e-06 4.0e-06 9.0e-06 1.6e-05 2.5e-05 3.6e-05 4.9e-05 6.4e-05\\n', ' 8.1e-05')"}, {"func_args": {"s": "''", "line": "' '", "word": "'    0'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '     0')"}, {"func_args": {"s": "''", "line": "'     0 '", "word": "'    1'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '     0     1')"}, {"func_args": {"s": "''", "line": "'     0     1 '", "word": "'   32'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '     0     1    32')"}, {"func_args": {"s": "''", "line": "'     0     1    32 '", "word": "'  243'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '     0     1    32   243')"}, {"func_args": {"s": "''", "line": "'     0     1    32   243 '", "word": "' 1024'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '     0     1    32   243  1024')"}, {"func_args": {"s": "''", "line": "'     0     1    32   243  1024 '", "word": "' 3125'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '     0     1    32   243  1024  3125')"}, {"func_args": {"s": "''", "line": "'     0     1    32   243  1024  3125 '", "word": "' 7776'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '     0     1    32   243  1024  3125  7776')"}, {"func_args": {"s": "''", "line": "'     0     1    32   243  1024  3125  7776 '", "word": "'16807'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '     0     1    32   243  1024  3125  7776 16807')"}, {"func_args": {"s": "''", "line": "'     0     1    32   243  1024  3125  7776 16807 '", "word": "'32768'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '     0     1    32   243  1024  3125  7776 16807 32768')"}, {"func_args": {"s": "''", "line": "'     0     1    32   243  1024  3125  7776 16807 32768 '", "word": "'59049'", "line_width": "74", "next_line_prefix": "' '", "legacy": "9223372036854775807"}, "return_value": "('', '     0     1    32   243  1024  3125  7776 16807 32768 59049')"}], "text": "def _extendLine_pretty(s, line, word, line_width, next_line_prefix, legacy):\n    \"\"\"\n    Extends line with nicely formatted (possibly multi-line) string ``word``.\n    \"\"\"\n    words = word.splitlines()\n    if len(words) == 1 or legacy <= 113:\n        return _extendLine(s, line, word, line_width, next_line_prefix, legacy)\n\n    max_word_length = max(len(word) for word in words)\n    if (len(line) + max_word_length > line_width and\n            len(line) > len(next_line_prefix)):\n        s += line.rstrip() + '\\n'\n        line = next_line_prefix + words[0]\n        indent = next_line_prefix\n    else:\n        indent = len(line)*' '\n        line += words[0]\n\n    for word in words[1::]:\n        s += line.rstrip() + '\\n'\n        line = indent + word\n\n    suffix_length = max_word_length - len(words[-1])\n    line += suffix_length*' '\n\n    return s, line"}, "_guarded_repr_or_str": {"line": 1567, "args": [{"func_args": {"v": "19.0"}, "return_value": "'19.0'"}]}, "_statetoken": {"line": 532, "args": [{"func_args": {"s": "'t_AND'", "names": "{'INITIAL': 'inclusive'}"}, "return_value": "(('INITIAL',), 'AND')"}, {"func_args": {"s": "'t_COLON'", "names": "{'INITIAL': 'inclusive'}"}, "return_value": "(('INITIAL',), 'COLON')"}, {"func_args": {"s": "'t_DIVIDE'", "names": "{'INITIAL': 'inclusive'}"}, "return_value": "(('INITIAL',), 'DIVIDE')"}, {"func_args": {"s": "'t_EQUAL'", "names": "{'INITIAL': 'inclusive'}"}, "return_value": "(('INITIAL',), 'EQUAL')"}, {"func_args": {"s": "'t_GREATER'", "names": "{'INITIAL': 'inclusive'}"}, "return_value": "(('INITIAL',), 'GREATER')"}, {"func_args": {"s": "'t_GREATER_EQUAL'", "names": "{'INITIAL': 'inclusive'}"}, "return_value": "(('INITIAL',), 'GREATER_EQUAL')"}, {"func_args": {"s": "'t_IF'", "names": "{'INITIAL': 'inclusive'}"}, "return_value": "(('INITIAL',), 'IF')"}, {"func_args": {"s": "'t_INT_DIVIDE'", "names": "{'INITIAL': 'inclusive'}"}, "return_value": "(('INITIAL',), 'INT_DIVIDE')"}, {"func_args": {"s": "'t_LEFT_PARENTHESIS'", "names": "{'INITIAL': 'inclusive'}"}, "return_value": "(('INITIAL',), 'LEFT_PARENTHESIS')"}, {"func_args": {"s": "'t_LESS'", "names": "{'INITIAL': 'inclusive'}"}, "return_value": "(('INITIAL',), 'LESS')"}, {"func_args": {"s": "'t_LESS_EQUAL'", "names": "{'INITIAL': 'inclusive'}"}, "return_value": "(('INITIAL',), 'LESS_EQUAL')"}, {"func_args": {"s": "'t_MINUS'", "names": "{'INITIAL': 'inclusive'}"}, "return_value": "(('INITIAL',), 'MINUS')"}, {"func_args": {"s": "'t_MODULO'", "names": "{'INITIAL': 'inclusive'}"}, "return_value": "(('INITIAL',), 'MODULO')"}, {"func_args": {"s": "'t_MULTIPLY'", "names": "{'INITIAL': 'inclusive'}"}, "return_value": "(('INITIAL',), 'MULTIPLY')"}, {"func_args": {"s": "'t_NAME'", "names": "{'INITIAL': 'inclusive'}"}, "return_value": "(('INITIAL',), 'NAME')"}, {"func_args": {"s": "'t_NOT'", "names": "{'INITIAL': 'inclusive'}"}, "return_value": "(('INITIAL',), 'NOT')"}, {"func_args": {"s": "'t_NOT_EQUAL'", "names": "{'INITIAL': 'inclusive'}"}, "return_value": "(('INITIAL',), 'NOT_EQUAL')"}, {"func_args": {"s": "'t_NUMBER'", "names": "{'INITIAL': 'inclusive'}"}, "return_value": "(('INITIAL',), 'NUMBER')"}, {"func_args": {"s": "'t_OR'", "names": "{'INITIAL': 'inclusive'}"}, "return_value": "(('INITIAL',), 'OR')"}, {"func_args": {"s": "'t_PLUS'", "names": "{'INITIAL': 'inclusive'}"}, "return_value": "(('INITIAL',), 'PLUS')"}, {"func_args": {"s": "'t_POWER'", "names": "{'INITIAL': 'inclusive'}"}, "return_value": "(('INITIAL',), 'POWER')"}, {"func_args": {"s": "'t_RIGHT_PARENTHESIS'", "names": "{'INITIAL': 'inclusive'}"}, "return_value": "(('INITIAL',), 'RIGHT_PARENTHESIS')"}, {"func_args": {"s": "'t_SEMICOLON'", "names": "{'INITIAL': 'inclusive'}"}, "return_value": "(('INITIAL',), 'SEMICOLON')"}, {"func_args": {"s": "'t_SET'", "names": "{'INITIAL': 'inclusive'}"}, "return_value": "(('INITIAL',), 'SET')"}, {"func_args": {"s": "'t_error'", "names": "{'INITIAL': 'inclusive'}"}, "return_value": "(('INITIAL',), 'error')"}, {"func_args": {"s": "'t_ignore'", "names": "{'INITIAL': 'inclusive'}"}, "return_value": "(('INITIAL',), 'ignore')"}, {"func_args": {"s": "'t_ignore_COMMENT'", "names": "{'INITIAL': 'inclusive'}"}, "return_value": "(('INITIAL',), 'ignore_COMMENT')"}, {"func_args": {"s": "'t_newline'", "names": "{'INITIAL': 'inclusive'}"}, "return_value": "(('INITIAL',), 'newline')"}], "text": "def _statetoken(s, names):\n    parts = s.split('_')\n    for i, part in enumerate(parts[1:], 1):\n        if part not in names and part != 'ANY':\n            break\n\n    if i > 1:\n        states = tuple(parts[1:i])\n    else:\n        states = ('INITIAL',)\n\n    if 'ANY' in states:\n        states = tuple(names)\n\n    tokenname = '_'.join(parts[i:])\n    return (states, tokenname)"}, "parse_grammar": {"line": 2896, "args": [{"func_args": {"doc": "'statement : expression'", "file": "'/usr/app/src/test_repos/PySpice/.tox/py38/lib/python3.8/site-packages/PySpice/Spice/Expression/Parser.py'", "line": "190"}, "return_value": "[('/usr/app/src/test_repos/PySpice/.tox/py38/lib/python3.8/site-packages/PySpice/Spice/Expression/Parser.py', 191, 'statement', ['expression'])]"}, {"func_args": {"doc": "'variable : NAME\\n        '", "file": "'/usr/app/src/test_repos/PySpice/.tox/py38/lib/python3.8/site-packages/PySpice/Spice/Expression/Parser.py'", "line": "248"}, "return_value": "[('/usr/app/src/test_repos/PySpice/.tox/py38/lib/python3.8/site-packages/PySpice/Spice/Expression/Parser.py', 249, 'variable', ['NAME'])]"}, {"func_args": {"doc": "'constant : NUMBER\\n        '", "file": "'/usr/app/src/test_repos/PySpice/.tox/py38/lib/python3.8/site-packages/PySpice/Spice/Expression/Parser.py'", "line": "262"}, "return_value": "[('/usr/app/src/test_repos/PySpice/.tox/py38/lib/python3.8/site-packages/PySpice/Spice/Expression/Parser.py', 263, 'constant', ['NUMBER'])]"}, {"func_args": {"doc": "'expression : variable\\n                      | constant\\n        '", "file": "'/usr/app/src/test_repos/PySpice/.tox/py38/lib/python3.8/site-packages/PySpice/Spice/Expression/Parser.py'", "line": "270"}, "return_value": "[('/usr/app/src/test_repos/PySpice/.tox/py38/lib/python3.8/site-packages/PySpice/Spice/Expression/Parser.py', 271, 'expression', ['variable']), ('/usr/app/src/test_repos/PySpice/.tox/py38/lib/python3.8/site-packages/PySpice/Spice/Expression/Parser.py', 272, 'expression', ['constant'])]"}, {"func_args": {"doc": "'expression : MINUS expression\\n                      | NOT expression\\n        '", "file": "'/usr/app/src/test_repos/PySpice/.tox/py38/lib/python3.8/site-packages/PySpice/Spice/Expression/Parser.py'", "line": "276"}, "return_value": "[('/usr/app/src/test_repos/PySpice/.tox/py38/lib/python3.8/site-packages/PySpice/Spice/Expression/Parser.py', 277, 'expression', ['MINUS', 'expression']), ('/usr/app/src/test_repos/PySpice/.tox/py38/lib/python3.8/site-packages/PySpice/Spice/Expression/Parser.py', 278, 'expression', ['NOT', 'expression'])]"}, {"func_args": {"doc": "'expression : expression POWER expression\\n                      | expression MULTIPLY expression\\n                      | expression DIVIDE expression\\n                      | expression MODULO expression\\n                      | expression INT_DIVIDE expression\\n                      | expression PLUS expression\\n                      | expression MINUS expression\\n                      | expression EQUAL expression\\n                      | expression NOT_EQUAL expression\\n                      | expression LESS expression\\n                      | expression GREATER expression\\n                      | expression LESS_EQUAL expression\\n                      | expression GREATER_EQUAL expression\\n                      | expression AND expression\\n                      | expression OR expression\\n        '", "file": "'/usr/app/src/test_repos/PySpice/.tox/py38/lib/python3.8/site-packages/PySpice/Spice/Expression/Parser.py'", "line": "283"}, "return_value": "[('/usr/app/src/test_repos/PySpice/.tox/py38/lib/python3.8/site-packages/PySpice/Spice/Expression/Parser.py', 284, 'expression', ['expression', 'POWER', 'expression']), ('/usr/app/src/test_repos/PySpice/.tox/py38/lib/python3.8/site-packages/PySpice/Spice/Expression/Parser.py', 285, 'expression', ['expression', 'MULTIPLY', 'expression']), ('/usr/app/src/test_repos/PySpice/.tox/py38/lib/python3.8/site-packages/PySpice/Spice/Expression/Parser.py', 286, 'expression', ['expression', 'DIVIDE', 'expression']), ('/usr/app/src/test_repos/PySpice/.tox/py38/lib/python3.8/site-packages/PySpice/Spice/Expression/Parser.py', 287, 'expression', ['expression', 'MODULO', 'expression']), ('/usr/app/src/test_repos/PySpice/.tox/py38/lib/python3.8/site-packages/PySpice/Spice/Expression/Parser.py', 288, 'expression', ['expression', 'INT_DIVIDE', 'expression']), ('/usr/app/src/test_repos/PySpice/.tox/py38/lib/python3.8/site-packages/PySpice/Spice/Expression/Parser.py', 289, 'expression', ['expression', 'PLUS', 'expression']), ('/usr/app/src/test_repos/PySpice/.tox/py38/lib/python3.8/site-packages/PySpice/Spice/Expression/Parser.py', 290, 'expression', ['expression', 'MINUS', 'expression']), ('/usr/app/src/test_repos/PySpice/.tox/py38/lib/python3.8/site-packages/PySpice/Spice/Expression/Parser.py', 291, 'expression', ['expression', 'EQUAL', 'expression']), ('/usr/app/src/test_repos/PySpice/.tox/py38/lib/python3.8/site-packages/PySpice/Spice/Expression/Parser.py', 292, 'expression', ['expression', 'NOT_EQUAL', 'expression']), ('/usr/app/src/test_repos/PySpice/.tox/py38/lib/python3.8/site-packages/PySpice/Spice/Expression/Parser.py', 293, 'expression', ['expression', 'LESS', 'expression']), ('/usr/app/src/test_repos/PySpice/.tox/py38/lib/python3.8/site-packages/PySpice/Spice/Expression/Parser.py', 294, 'expression', ['expression', 'GREATER', 'expression']), ('/usr/app/src/test_repos/PySpice/.tox/py38/lib/python3.8/site-packages/PySpice/Spice/Expression/Parser.py', 295, 'expression', ['expression', 'LESS_EQUAL', 'expression']), ('/usr/app/src/test_repos/PySpice/.tox/py38/lib/python3.8/site-packages/PySpice/Spice/Expression/Parser.py', 296, 'expression', ['expression', 'GREATER_EQUAL', 'expression']), ('/usr/app/src/test_repos/PySpice/.tox/py38/lib/python3.8/site-packages/PySpice/Spice/Expression/Parser.py', 297, 'expression', ['expression', 'AND', 'expression']), ('/usr/app/src/test_repos/PySpice/.tox/py38/lib/python3.8/site-packages/PySpice/Spice/Expression/Parser.py', 298, 'expression', ['expression', 'OR', 'expression'])]"}, {"func_args": {"doc": "'expression : expression IF expression COLON expression\\n        '", "file": "'/usr/app/src/test_repos/PySpice/.tox/py38/lib/python3.8/site-packages/PySpice/Spice/Expression/Parser.py'", "line": "303"}, "return_value": "[('/usr/app/src/test_repos/PySpice/.tox/py38/lib/python3.8/site-packages/PySpice/Spice/Expression/Parser.py', 304, 'expression', ['expression', 'IF', 'expression', 'COLON', 'expression'])]"}], "text": "def parse_grammar(doc, file, line):\n    grammar = []\n    # Split the doc string into lines\n    pstrings = doc.splitlines()\n    lastp = None\n    dline = line\n    for ps in pstrings:\n        dline += 1\n        p = ps.split()\n        if not p:\n            continue\n        try:\n            if p[0] == '|':\n                # This is a continuation of a previous rule\n                if not lastp:\n                    raise SyntaxError(\"%s:%d: Misplaced '|'\" % (file, dline))\n                prodname = lastp\n                syms = p[1:]\n            else:\n                prodname = p[0]\n                lastp = prodname\n                syms   = p[2:]\n                assign = p[1]\n                if assign != ':' and assign != '::=':\n                    raise SyntaxError(\"%s:%d: Syntax error. Expected ':'\" % (file, dline))\n\n            grammar.append((file, dline, prodname, syms))\n        except SyntaxError:\n            raise\n        except Exception:\n            raise SyntaxError('%s:%d: Syntax error in rule %r' % (file, dline, ps.strip()))\n\n    return grammar"}, "rightmost_terminal": {"line": 1455, "args": [{"func_args": {"symbols": "['expression']", "terminals": "{'AND': [], 'COLON': [], 'DIVIDE': [], 'EQUAL': [], 'GREATER': [], 'GREATER_EQUAL': [], 'IF': [], 'INT_DIVIDE': [], 'LEFT_PARENTHESIS': [], 'LESS': [], 'LESS_EQUAL': [], 'MINUS': [], 'MODULO': [], 'MULTIPLY': [], 'NAME': [], 'NOT': [], 'NOT_EQUAL': [], 'NUMBER': [], 'OR': [], 'PLUS': [], 'POWER': [], 'RIGHT_PARENTHESIS': [], 'SEMICOLON': [], 'SET': [], 'error': []}"}, "return_value": "None"}, {"func_args": {"symbols": "['NAME']", "terminals": "{'AND': [], 'COLON': [], 'DIVIDE': [], 'EQUAL': [], 'GREATER': [], 'GREATER_EQUAL': [], 'IF': [], 'INT_DIVIDE': [], 'LEFT_PARENTHESIS': [], 'LESS': [], 'LESS_EQUAL': [], 'MINUS': [], 'MODULO': [], 'MULTIPLY': [], 'NAME': [], 'NOT': [], 'NOT_EQUAL': [], 'NUMBER': [], 'OR': [], 'PLUS': [], 'POWER': [], 'RIGHT_PARENTHESIS': [], 'SEMICOLON': [], 'SET': [], 'error': []}"}, "return_value": "'NAME'"}, {"func_args": {"symbols": "['NUMBER']", "terminals": "{'AND': [], 'COLON': [], 'DIVIDE': [], 'EQUAL': [], 'GREATER': [], 'GREATER_EQUAL': [], 'IF': [], 'INT_DIVIDE': [], 'LEFT_PARENTHESIS': [], 'LESS': [], 'LESS_EQUAL': [], 'MINUS': [], 'MODULO': [], 'MULTIPLY': [], 'NAME': [2], 'NOT': [], 'NOT_EQUAL': [], 'NUMBER': [], 'OR': [], 'PLUS': [], 'POWER': [], 'RIGHT_PARENTHESIS': [], 'SEMICOLON': [], 'SET': [], 'error': []}"}, "return_value": "'NUMBER'"}, {"func_args": {"symbols": "['variable']", "terminals": "{'AND': [], 'COLON': [], 'DIVIDE': [], 'EQUAL': [], 'GREATER': [], 'GREATER_EQUAL': [], 'IF': [], 'INT_DIVIDE': [], 'LEFT_PARENTHESIS': [], 'LESS': [], 'LESS_EQUAL': [], 'MINUS': [], 'MODULO': [], 'MULTIPLY': [], 'NAME': [2], 'NOT': [], 'NOT_EQUAL': [], 'NUMBER': [3], 'OR': [], 'PLUS': [], 'POWER': [], 'RIGHT_PARENTHESIS': [], 'SEMICOLON': [], 'SET': [], 'error': []}"}, "return_value": "None"}, {"func_args": {"symbols": "['constant']", "terminals": "{'AND': [], 'COLON': [], 'DIVIDE': [], 'EQUAL': [], 'GREATER': [], 'GREATER_EQUAL': [], 'IF': [], 'INT_DIVIDE': [], 'LEFT_PARENTHESIS': [], 'LESS': [], 'LESS_EQUAL': [], 'MINUS': [], 'MODULO': [], 'MULTIPLY': [], 'NAME': [2], 'NOT': [], 'NOT_EQUAL': [], 'NUMBER': [3], 'OR': [], 'PLUS': [], 'POWER': [], 'RIGHT_PARENTHESIS': [], 'SEMICOLON': [], 'SET': [], 'error': []}"}, "return_value": "None"}, {"func_args": {"symbols": "['MINUS', 'expression']", "terminals": "{'AND': [], 'COLON': [], 'DIVIDE': [], 'EQUAL': [], 'GREATER': [], 'GREATER_EQUAL': [], 'IF': [], 'INT_DIVIDE': [], 'LEFT_PARENTHESIS': [], 'LESS': [], 'LESS_EQUAL': [], 'MINUS': [], 'MODULO': [], 'MULTIPLY': [], 'NAME': [2], 'NOT': [], 'NOT_EQUAL': [], 'NUMBER': [3], 'OR': [], 'PLUS': [], 'POWER': [], 'RIGHT_PARENTHESIS': [], 'SEMICOLON': [], 'SET': [], 'error': []}"}, "return_value": "'MINUS'"}, {"func_args": {"symbols": "['NOT', 'expression']", "terminals": "{'AND': [], 'COLON': [], 'DIVIDE': [], 'EQUAL': [], 'GREATER': [], 'GREATER_EQUAL': [], 'IF': [], 'INT_DIVIDE': [], 'LEFT_PARENTHESIS': [], 'LESS': [], 'LESS_EQUAL': [], 'MINUS': [6], 'MODULO': [], 'MULTIPLY': [], 'NAME': [2], 'NOT': [], 'NOT_EQUAL': [], 'NUMBER': [3], 'OR': [], 'PLUS': [], 'POWER': [], 'RIGHT_PARENTHESIS': [], 'SEMICOLON': [], 'SET': [], 'error': []}"}, "return_value": "'NOT'"}, {"func_args": {"symbols": "['expression', 'POWER', 'expression']", "terminals": "{'AND': [], 'COLON': [], 'DIVIDE': [], 'EQUAL': [], 'GREATER': [], 'GREATER_EQUAL': [], 'IF': [], 'INT_DIVIDE': [], 'LEFT_PARENTHESIS': [], 'LESS': [], 'LESS_EQUAL': [], 'MINUS': [6], 'MODULO': [], 'MULTIPLY': [], 'NAME': [2], 'NOT': [7], 'NOT_EQUAL': [], 'NUMBER': [3], 'OR': [], 'PLUS': [], 'POWER': [], 'RIGHT_PARENTHESIS': [], 'SEMICOLON': [], 'SET': [], 'error': []}"}, "return_value": "'POWER'"}, {"func_args": {"symbols": "['expression', 'MULTIPLY', 'expression']", "terminals": "{'AND': [], 'COLON': [], 'DIVIDE': [], 'EQUAL': [], 'GREATER': [], 'GREATER_EQUAL': [], 'IF': [], 'INT_DIVIDE': [], 'LEFT_PARENTHESIS': [], 'LESS': [], 'LESS_EQUAL': [], 'MINUS': [6], 'MODULO': [], 'MULTIPLY': [], 'NAME': [2], 'NOT': [7], 'NOT_EQUAL': [], 'NUMBER': [3], 'OR': [], 'PLUS': [], 'POWER': [8], 'RIGHT_PARENTHESIS': [], 'SEMICOLON': [], 'SET': [], 'error': []}"}, "return_value": "'MULTIPLY'"}, {"func_args": {"symbols": "['expression', 'DIVIDE', 'expression']", "terminals": "{'AND': [], 'COLON': [], 'DIVIDE': [], 'EQUAL': [], 'GREATER': [], 'GREATER_EQUAL': [], 'IF': [], 'INT_DIVIDE': [], 'LEFT_PARENTHESIS': [], 'LESS': [], 'LESS_EQUAL': [], 'MINUS': [6], 'MODULO': [], 'MULTIPLY': [9], 'NAME': [2], 'NOT': [7], 'NOT_EQUAL': [], 'NUMBER': [3], 'OR': [], 'PLUS': [], 'POWER': [8], 'RIGHT_PARENTHESIS': [], 'SEMICOLON': [], 'SET': [], 'error': []}"}, "return_value": "'DIVIDE'"}, {"func_args": {"symbols": "['expression', 'MODULO', 'expression']", "terminals": "{'AND': [], 'COLON': [], 'DIVIDE': [10], 'EQUAL': [], 'GREATER': [], 'GREATER_EQUAL': [], 'IF': [], 'INT_DIVIDE': [], 'LEFT_PARENTHESIS': [], 'LESS': [], 'LESS_EQUAL': [], 'MINUS': [6], 'MODULO': [], 'MULTIPLY': [9], 'NAME': [2], 'NOT': [7], 'NOT_EQUAL': [], 'NUMBER': [3], 'OR': [], 'PLUS': [], 'POWER': [8], 'RIGHT_PARENTHESIS': [], 'SEMICOLON': [], 'SET': [], 'error': []}"}, "return_value": "'MODULO'"}, {"func_args": {"symbols": "['expression', 'INT_DIVIDE', 'expression']", "terminals": "{'AND': [], 'COLON': [], 'DIVIDE': [10], 'EQUAL': [], 'GREATER': [], 'GREATER_EQUAL': [], 'IF': [], 'INT_DIVIDE': [], 'LEFT_PARENTHESIS': [], 'LESS': [], 'LESS_EQUAL': [], 'MINUS': [6], 'MODULO': [11], 'MULTIPLY': [9], 'NAME': [2], 'NOT': [7], 'NOT_EQUAL': [], 'NUMBER': [3], 'OR': [], 'PLUS': [], 'POWER': [8], 'RIGHT_PARENTHESIS': [], 'SEMICOLON': [], 'SET': [], 'error': []}"}, "return_value": "'INT_DIVIDE'"}, {"func_args": {"symbols": "['expression', 'PLUS', 'expression']", "terminals": "{'AND': [], 'COLON': [], 'DIVIDE': [10], 'EQUAL': [], 'GREATER': [], 'GREATER_EQUAL': [], 'IF': [], 'INT_DIVIDE': [12], 'LEFT_PARENTHESIS': [], 'LESS': [], 'LESS_EQUAL': [], 'MINUS': [6], 'MODULO': [11], 'MULTIPLY': [9], 'NAME': [2], 'NOT': [7], 'NOT_EQUAL': [], 'NUMBER': [3], 'OR': [], 'PLUS': [], 'POWER': [8], 'RIGHT_PARENTHESIS': [], 'SEMICOLON': [], 'SET': [], 'error': []}"}, "return_value": "'PLUS'"}, {"func_args": {"symbols": "['expression', 'MINUS', 'expression']", "terminals": "{'AND': [], 'COLON': [], 'DIVIDE': [10], 'EQUAL': [], 'GREATER': [], 'GREATER_EQUAL': [], 'IF': [], 'INT_DIVIDE': [12], 'LEFT_PARENTHESIS': [], 'LESS': [], 'LESS_EQUAL': [], 'MINUS': [6], 'MODULO': [11], 'MULTIPLY': [9], 'NAME': [2], 'NOT': [7], 'NOT_EQUAL': [], 'NUMBER': [3], 'OR': [], 'PLUS': [13], 'POWER': [8], 'RIGHT_PARENTHESIS': [], 'SEMICOLON': [], 'SET': [], 'error': []}"}, "return_value": "'MINUS'"}, {"func_args": {"symbols": "['expression', 'EQUAL', 'expression']", "terminals": "{'AND': [], 'COLON': [], 'DIVIDE': [10], 'EQUAL': [], 'GREATER': [], 'GREATER_EQUAL': [], 'IF': [], 'INT_DIVIDE': [12], 'LEFT_PARENTHESIS': [], 'LESS': [], 'LESS_EQUAL': [], 'MINUS': [6, 14], 'MODULO': [11], 'MULTIPLY': [9], 'NAME': [2], 'NOT': [7], 'NOT_EQUAL': [], 'NUMBER': [3], 'OR': [], 'PLUS': [13], 'POWER': [8], 'RIGHT_PARENTHESIS': [], 'SEMICOLON': [], 'SET': [], 'error': []}"}, "return_value": "'EQUAL'"}, {"func_args": {"symbols": "['expression', 'NOT_EQUAL', 'expression']", "terminals": "{'AND': [], 'COLON': [], 'DIVIDE': [10], 'EQUAL': [15], 'GREATER': [], 'GREATER_EQUAL': [], 'IF': [], 'INT_DIVIDE': [12], 'LEFT_PARENTHESIS': [], 'LESS': [], 'LESS_EQUAL': [], 'MINUS': [6, 14], 'MODULO': [11], 'MULTIPLY': [9], 'NAME': [2], 'NOT': [7], 'NOT_EQUAL': [], 'NUMBER': [3], 'OR': [], 'PLUS': [13], 'POWER': [8], 'RIGHT_PARENTHESIS': [], 'SEMICOLON': [], 'SET': [], 'error': []}"}, "return_value": "'NOT_EQUAL'"}, {"func_args": {"symbols": "['expression', 'LESS', 'expression']", "terminals": "{'AND': [], 'COLON': [], 'DIVIDE': [10], 'EQUAL': [15], 'GREATER': [], 'GREATER_EQUAL': [], 'IF': [], 'INT_DIVIDE': [12], 'LEFT_PARENTHESIS': [], 'LESS': [], 'LESS_EQUAL': [], 'MINUS': [6, 14], 'MODULO': [11], 'MULTIPLY': [9], 'NAME': [2], 'NOT': [7], 'NOT_EQUAL': [16], 'NUMBER': [3], 'OR': [], 'PLUS': [13], 'POWER': [8], 'RIGHT_PARENTHESIS': [], 'SEMICOLON': [], 'SET': [], 'error': []}"}, "return_value": "'LESS'"}, {"func_args": {"symbols": "['expression', 'GREATER', 'expression']", "terminals": "{'AND': [], 'COLON': [], 'DIVIDE': [10], 'EQUAL': [15], 'GREATER': [], 'GREATER_EQUAL': [], 'IF': [], 'INT_DIVIDE': [12], 'LEFT_PARENTHESIS': [], 'LESS': [17], 'LESS_EQUAL': [], 'MINUS': [6, 14], 'MODULO': [11], 'MULTIPLY': [9], 'NAME': [2], 'NOT': [7], 'NOT_EQUAL': [16], 'NUMBER': [3], 'OR': [], 'PLUS': [13], 'POWER': [8], 'RIGHT_PARENTHESIS': [], 'SEMICOLON': [], 'SET': [], 'error': []}"}, "return_value": "'GREATER'"}, {"func_args": {"symbols": "['expression', 'LESS_EQUAL', 'expression']", "terminals": "{'AND': [], 'COLON': [], 'DIVIDE': [10], 'EQUAL': [15], 'GREATER': [18], 'GREATER_EQUAL': [], 'IF': [], 'INT_DIVIDE': [12], 'LEFT_PARENTHESIS': [], 'LESS': [17], 'LESS_EQUAL': [], 'MINUS': [6, 14], 'MODULO': [11], 'MULTIPLY': [9], 'NAME': [2], 'NOT': [7], 'NOT_EQUAL': [16], 'NUMBER': [3], 'OR': [], 'PLUS': [13], 'POWER': [8], 'RIGHT_PARENTHESIS': [], 'SEMICOLON': [], 'SET': [], 'error': []}"}, "return_value": "'LESS_EQUAL'"}, {"func_args": {"symbols": "['expression', 'GREATER_EQUAL', 'expression']", "terminals": "{'AND': [], 'COLON': [], 'DIVIDE': [10], 'EQUAL': [15], 'GREATER': [18], 'GREATER_EQUAL': [], 'IF': [], 'INT_DIVIDE': [12], 'LEFT_PARENTHESIS': [], 'LESS': [17], 'LESS_EQUAL': [19], 'MINUS': [6, 14], 'MODULO': [11], 'MULTIPLY': [9], 'NAME': [2], 'NOT': [7], 'NOT_EQUAL': [16], 'NUMBER': [3], 'OR': [], 'PLUS': [13], 'POWER': [8], 'RIGHT_PARENTHESIS': [], 'SEMICOLON': [], 'SET': [], 'error': []}"}, "return_value": "'GREATER_EQUAL'"}, {"func_args": {"symbols": "['expression', 'AND', 'expression']", "terminals": "{'AND': [], 'COLON': [], 'DIVIDE': [10], 'EQUAL': [15], 'GREATER': [18], 'GREATER_EQUAL': [20], 'IF': [], 'INT_DIVIDE': [12], 'LEFT_PARENTHESIS': [], 'LESS': [17], 'LESS_EQUAL': [19], 'MINUS': [6, 14], 'MODULO': [11], 'MULTIPLY': [9], 'NAME': [2], 'NOT': [7], 'NOT_EQUAL': [16], 'NUMBER': [3], 'OR': [], 'PLUS': [13], 'POWER': [8], 'RIGHT_PARENTHESIS': [], 'SEMICOLON': [], 'SET': [], 'error': []}"}, "return_value": "'AND'"}, {"func_args": {"symbols": "['expression', 'OR', 'expression']", "terminals": "{'AND': [21], 'COLON': [], 'DIVIDE': [10], 'EQUAL': [15], 'GREATER': [18], 'GREATER_EQUAL': [20], 'IF': [], 'INT_DIVIDE': [12], 'LEFT_PARENTHESIS': [], 'LESS': [17], 'LESS_EQUAL': [19], 'MINUS': [6, 14], 'MODULO': [11], 'MULTIPLY': [9], 'NAME': [2], 'NOT': [7], 'NOT_EQUAL': [16], 'NUMBER': [3], 'OR': [], 'PLUS': [13], 'POWER': [8], 'RIGHT_PARENTHESIS': [], 'SEMICOLON': [], 'SET': [], 'error': []}"}, "return_value": "'OR'"}, {"func_args": {"symbols": "['expression', 'IF', 'expression', 'COLON', 'expression']", "terminals": "{'AND': [21], 'COLON': [], 'DIVIDE': [10], 'EQUAL': [15], 'GREATER': [18], 'GREATER_EQUAL': [20], 'IF': [], 'INT_DIVIDE': [12], 'LEFT_PARENTHESIS': [], 'LESS': [17], 'LESS_EQUAL': [19], 'MINUS': [6, 14], 'MODULO': [11], 'MULTIPLY': [9], 'NAME': [2], 'NOT': [7], 'NOT_EQUAL': [16], 'NUMBER': [3], 'OR': [22], 'PLUS': [13], 'POWER': [8], 'RIGHT_PARENTHESIS': [], 'SEMICOLON': [], 'SET': [], 'error': []}"}, "return_value": "'COLON'"}], "text": "def rightmost_terminal(symbols, terminals):\n    i = len(symbols) - 1\n    while i >= 0:\n        if symbols[i] in terminals:\n            return symbols[i]\n        i -= 1\n    return None"}}