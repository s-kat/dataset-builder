{"_args_converter": {"line": 845, "args": [{"func_args": {"args": "['multiupload']"}, "return_value": "('multiupload',)"}], "text": "def _args_converter(args: Iterable[str]) -> Tuple[str, ...]:\n    return tuple(args)"}, "_get_plugin_specs_as_list": {"line": 744, "args": [{"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "None"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}], "text": "def _get_plugin_specs_as_list(\n    specs: Union[None, types.ModuleType, str, Sequence[str]]\n) -> List[str]:\n    \"\"\"Parse a plugins specification into a list of plugin names.\"\"\"\n    # None means empty.\n    if specs is None:\n        return []\n    # Workaround for #3899 - a submodule which happens to be called \"pytest_plugins\".\n    if isinstance(specs, types.ModuleType):\n        return []\n    # Comma-separated list.\n    if isinstance(specs, str):\n        return specs.split(\",\") if specs else []\n    # Direct specification.\n    if isinstance(specs, collections.abc.Sequence):\n        return list(specs)\n    raise UsageError(\n        \"Plugins may be specified as a sequence or a ','-separated string of plugin names. Got: %r\"\n        % specs\n    )"}, "_assertion_supported": {"line": 1530, "args": [{"func_args": {}, "return_value": "True"}], "text": "def _assertion_supported() -> bool:\n    try:\n        assert False\n    except AssertionError:\n        return True\n    else:\n        return False"}, "_strtobool": {"line": 1563, "args": [{"func_args": {"val": "'false'"}, "return_value": "False"}], "text": "def _strtobool(val: str) -> bool:\n    \"\"\"Convert a string representation of truth to True or False.\n\n    True values are 'y', 'yes', 't', 'true', 'on', and '1'; false values\n    are 'n', 'no', 'f', 'false', 'off', and '0'.  Raises ValueError if\n    'val' is anything else.\n\n    .. note:: Copied from distutils.util.\n    \"\"\"\n    val = val.lower()\n    if val in (\"y\", \"yes\", \"t\", \"true\", \"on\", \"1\"):\n        return True\n    elif val in (\"n\", \"no\", \"f\", \"false\", \"off\", \"0\"):\n        return False\n    else:\n        raise ValueError(f\"invalid truth value {val!r}\")"}, "pluralize": {"line": 1339, "args": [{"func_args": {"count": "10", "noun": "'passed'"}, "return_value": "(10, 'passed')"}, {"func_args": {"count": "1", "noun": "'warnings'"}, "return_value": "(1, 'warning')"}], "text": "def pluralize(count: int, noun: str) -> Tuple[int, str]:\n    # No need to pluralize words such as `failed` or `passed`.\n    if noun not in [\"error\", \"warnings\", \"test\"]:\n        return count, noun\n\n    # The `warnings` key is plural. To avoid API breakage, we keep it that way but\n    # set it to singular here so we can determine plurality in the same way as we do\n    # for `error`.\n    noun = noun.replace(\"warnings\", \"warning\")\n\n    return count, noun + \"s\" if count != 1 else noun"}, "format_session_duration": {"line": 1366, "args": [{"func_args": {"seconds": "1.7419829368591309"}, "return_value": "'1.74s'"}], "text": "def format_session_duration(seconds: float) -> str:\n    \"\"\"Format the given seconds in a human readable manner to show in the final summary.\"\"\"\n    if seconds < 60:\n        return f\"{seconds:.2f}s\"\n    else:\n        dt = datetime.timedelta(seconds=int(seconds))\n        return f\"{seconds:.2f}s ({dt})\""}, "_get_auto_indent": {"line": 120, "args": [{"func_args": {"auto_indent_option": "None"}, "return_value": "0"}, {"func_args": {"auto_indent_option": "None"}, "return_value": "0"}]}, "get_stderr_fileno": {"line": 47, "args": [{"func_args": {}, "return_value": "2"}], "text": "def get_stderr_fileno() -> int:\n    try:\n        fileno = sys.stderr.fileno()\n        # The Twisted Logger will return an invalid file descriptor since it is not backed\n        # by an FD. So, let's also forward this to the same code path as with pytest-xdist.\n        if fileno == -1:\n            raise AttributeError()\n        return fileno\n    except (AttributeError, io.UnsupportedOperation):\n        # pytest-xdist monkeypatches sys.stderr with an object that is not an actual file.\n        # https://docs.python.org/3/library/faulthandler.html#issue-with-file-descriptors\n        # This is potentially dangerous, but the best we can do.\n        return sys.__stderr__.fileno()"}, "get_terminal_width": {"line": 15, "args": [{"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}], "text": "def get_terminal_width() -> int:\n    width, _ = shutil.get_terminal_size(fallback=(80, 24))\n\n    # The Windows get_terminal_size may be bogus, let's sanify a bit.\n    if width < 40:\n        width = 80\n\n    return width"}, "is_option": {"line": 137, "args": [{"func_args": {"x": "'multiupload'"}, "return_value": "False"}], "text": "def is_option(x: str) -> bool:\n        return x.startswith(\"-\")"}, "get_file_part_from_node_id": {"line": 140, "args": [{"func_args": {"x": "'multiupload'"}, "return_value": "'multiupload'"}], "text": "def get_file_part_from_node_id(x: str) -> str:\n        return x.split(\"::\")[0]"}, "parts": {"line": 423, "args": [{"func_args": {"s": "'/usr/app/src/test_repos/django-multiupload/multiupload/__pycache__'"}, "return_value": "{'/usr/app', '/usr', '/usr/app/src', '/usr/app/src/test_repos/django-multiupload', '/usr/app/src/test_repos/django-multiupload/multiupload', '/usr/app/src/test_repos/django-multiupload/multiupload/__pycache__', '/', '/usr/app/src/test_repos'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/django-multiupload/multiupload/fields.py'"}, "return_value": "{'/usr/app', '/usr', '/usr/app/src', '/usr/app/src/test_repos/django-multiupload', '/usr/app/src/test_repos/django-multiupload/multiupload', '/usr/app/src/test_repos/django-multiupload/multiupload/fields.py', '/', '/usr/app/src/test_repos'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/django-multiupload/multiupload/tests'"}, "return_value": "{'/usr/app', '/usr/app/src/test_repos/django-multiupload/multiupload/tests', '/usr', '/usr/app/src', '/usr/app/src/test_repos/django-multiupload', '/usr/app/src/test_repos/django-multiupload/multiupload', '/', '/usr/app/src/test_repos'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/django-multiupload/multiupload/tests/__init__.py'"}, "return_value": "{'/usr/app', '/usr/app/src/test_repos/django-multiupload/multiupload/tests', '/usr', '/usr/app/src', '/usr/app/src/test_repos/django-multiupload/multiupload/tests/__init__.py', '/usr/app/src/test_repos/django-multiupload', '/usr/app/src/test_repos/django-multiupload/multiupload', '/', '/usr/app/src/test_repos'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/django-multiupload/multiupload/tests/test_field.py'"}, "return_value": "{'/usr/app', '/usr/app/src/test_repos/django-multiupload/multiupload/tests', '/usr/app/src/test_repos/django-multiupload/multiupload/tests/test_field.py', '/usr', '/usr/app/src', '/usr/app/src/test_repos/django-multiupload', '/usr/app/src/test_repos/django-multiupload/multiupload', '/', '/usr/app/src/test_repos'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/django-multiupload/multiupload/tests/test_input.py'"}, "return_value": "{'/usr/app', '/usr/app/src/test_repos/django-multiupload/multiupload/tests/test_input.py', '/usr/app/src/test_repos/django-multiupload/multiupload/tests', '/usr', '/usr/app/src', '/usr/app/src/test_repos/django-multiupload', '/usr/app/src/test_repos/django-multiupload/multiupload', '/', '/usr/app/src/test_repos'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/django-multiupload/multiupload/tests/utils.py'"}, "return_value": "{'/usr/app', '/usr/app/src/test_repos/django-multiupload/multiupload/tests', '/usr', '/usr/app/src', '/usr/app/src/test_repos/django-multiupload', '/usr/app/src/test_repos/django-multiupload/multiupload', '/usr/app/src/test_repos/django-multiupload/multiupload/tests/utils.py', '/', '/usr/app/src/test_repos'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/django-multiupload/multiupload/tests/test_field.py'"}, "return_value": "{'/usr/app', '/usr/app/src/test_repos/django-multiupload/multiupload/tests', '/usr/app/src/test_repos/django-multiupload/multiupload/tests/test_field.py', '/usr', '/usr/app/src', '/usr/app/src/test_repos/django-multiupload', '/usr/app/src/test_repos/django-multiupload/multiupload', '/', '/usr/app/src/test_repos'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/django-multiupload/multiupload/tests/test_input.py'"}, "return_value": "{'/usr/app', '/usr/app/src/test_repos/django-multiupload/multiupload/tests/test_input.py', '/usr/app/src/test_repos/django-multiupload/multiupload/tests', '/usr', '/usr/app/src', '/usr/app/src/test_repos/django-multiupload', '/usr/app/src/test_repos/django-multiupload/multiupload', '/', '/usr/app/src/test_repos'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/django-multiupload/multiupload/tests/utils.py'"}, "return_value": "{'/usr/app', '/usr/app/src/test_repos/django-multiupload/multiupload/tests', '/usr', '/usr/app/src', '/usr/app/src/test_repos/django-multiupload', '/usr/app/src/test_repos/django-multiupload/multiupload', '/usr/app/src/test_repos/django-multiupload/multiupload/tests/utils.py', '/', '/usr/app/src/test_repos'}"}], "text": "def parts(s: str) -> Set[str]:\n    parts = s.split(sep)\n    return {sep.join(parts[: i + 1]) or sep for i in range(len(parts))}"}, "_is_same": {"line": 567, "args": [{"func_args": {"f1": "'/usr/app/src/test_repos/django-multiupload/multiupload/tests/test_field.py'", "f2": "'/usr/app/src/test_repos/django-multiupload/multiupload/tests/test_field.py'"}, "return_value": "True"}, {"func_args": {"f1": "'/usr/app/src/test_repos/django-multiupload/multiupload/tests/test_input.py'", "f2": "'/usr/app/src/test_repos/django-multiupload/multiupload/tests/test_input.py'"}, "return_value": "True"}], "text": "def _is_same(f1: str, f2: str) -> bool:\n        return os.path.samefile(f1, f2)"}, "iscommentline": {"line": 162, "args": [{"func_args": {"line": "'[tox]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'envlist = py3.9-dj2.2, py3.9-dj3.{1,2}, lint\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}, {"func_args": {"line": "'[testenv]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'recreate = False\\n'"}, "return_value": "False"}, {"func_args": {"line": "'setenv = \\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tDJANGO_SETTINGS_MODULE = test_settings\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tPYTHONPATH = $PYTHONPATH:{toxinidir}\\n'"}, "return_value": "False"}, {"func_args": {"line": "'pip_pre = True\\n'"}, "return_value": "False"}, {"func_args": {"line": "'deps = \\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\t-rtest_requirements.txt\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tdj2.2: Django>=2.2,<2.3\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tdj3.1: Django>=3.1,<3.2\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tdj3.2: Django>=3.2,<3.3\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tviztracer \\n'"}, "return_value": "False"}, {"func_args": {"line": "'commands = \\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tviztracer --ignore_frozen --log_func_args --log_func_retval -o result0.json -- py.test multiupload\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}, {"func_args": {"line": "'[testenv:lint]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'basepython = python3.9\\n'"}, "return_value": "False"}, {"func_args": {"line": "'commands = \\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tpylint multiupload/ setup.py\\n'"}, "return_value": "False"}, {"func_args": {"line": "'deps = \\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tlint: pylint\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}, {"func_args": {"line": "'[pytest]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'django_find_project = false\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}], "text": "def iscommentline(line):\n    c = line.lstrip()[:1]\n    return c in COMMENTCHARS"}, "_get_boolean_value": {"line": 240, "args": [{"func_args": {"x": "False", "name": "'django_find_project'", "default": "None"}, "return_value": "False"}, {"func_args": {"x": "None", "name": "'FAIL_INVALID_TEMPLATE_VARS'", "default": "None"}, "return_value": "False"}, {"func_args": {"x": "'False'", "name": "'django_debug_mode'", "default": "False"}, "return_value": "False"}], "text": "def _get_boolean_value(\n    x: Union[None, bool, str],\n    name: str,\n    default: Optional[bool] = None,\n) -> bool:\n    if x is None:\n        return bool(default)\n    if isinstance(x, bool):\n        return x\n    possible_values = {\"true\": True, \"false\": False, \"1\": True, \"0\": False}\n    try:\n        return possible_values[x.lower()]\n    except KeyError:\n        raise ValueError(\n            \"{} is not a valid value for {}. \"\n            \"It must be one of {}.\".format(x, name, \", \".join(possible_values.keys()))\n        )"}, "_get_option_with_source": {"line": 316, "args": [{"func_args": {"option": "None", "envname": "'DJANGO_SETTINGS_MODULE'"}, "return_value": "('test_settings', 'env')"}, {"func_args": {"option": "None", "envname": "'DJANGO_CONFIGURATION'"}, "return_value": "(None, None)"}], "text": "def _get_option_with_source(\n        option: Optional[str],\n        envname: str,\n    ) -> Union[Tuple[str, str], Tuple[None, None]]:\n        if option:\n            return option, \"option\"\n        if envname in os.environ:\n            return os.environ[envname], \"env\"\n        cfgval = early_config.getini(envname)\n        if cfgval:\n            return cfgval, \"ini\"\n        return None, None"}, "pytest_report_header": {"line": 355, "args": [{"func_args": {}, "return_value": "['django: settings: test_settings (from env)']"}]}, "supports_color": {"line": 19, "args": [{"func_args": {}, "return_value": "False"}, {"func_args": {}, "return_value": "False"}, {"func_args": {}, "return_value": "False"}, {"func_args": {}, "return_value": "False"}, {"func_args": {}, "return_value": "False"}], "text": "def supports_color():\n    \"\"\"\n    Return True if the running system's terminal supports color,\n    and False otherwise.\n    \"\"\"\n    def vt_codes_enabled_in_windows_registry():\n        \"\"\"\n        Check the Windows Registry to see if VT code handling has been enabled\n        by default, see https://superuser.com/a/1300251/447564.\n        \"\"\"\n        try:\n            # winreg is only available on Windows.\n            import winreg\n        except ImportError:\n            return False\n        else:\n            reg_key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, 'Console')\n            try:\n                reg_key_value, _ = winreg.QueryValueEx(reg_key, 'VirtualTerminalLevel')\n            except FileNotFoundError:\n                return False\n            else:\n                return reg_key_value == 1\n\n    # isatty is not always implemented, #6223.\n    is_a_tty = hasattr(sys.stdout, 'isatty') and sys.stdout.isatty()\n\n    return is_a_tty and (\n        sys.platform != 'win32' or\n        HAS_COLORAMA or\n        'ANSICON' in os.environ or\n        # Windows Terminal supports VT codes.\n        'WT_SESSION' in os.environ or\n        # Microsoft Visual Studio Code's built-in terminal supports colors.\n        os.environ.get('TERM_PROGRAM') == 'vscode' or\n        vt_codes_enabled_in_windows_registry()\n    )"}, "iterparentnodeids": {"line": 50, "args": [{"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload/tests/test_field.py::FormTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload/tests/test_field.py::FormTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload/tests/test_field.py::FormTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload/tests/test_field.py::FormTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload/tests/test_field.py::FormTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload/tests/test_field.py::FormTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload/tests/test_field.py::FormTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload/tests/test_field.py::FormTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload/tests/test_field.py::FormTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload/tests/test_field.py::FormTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload/tests/test_field.py::FormTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload/tests/test_field.py::FormTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase::test_render'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_field_not_required'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_four'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_max_num_three'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_max_num_two'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_none'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase::test_min_num_one'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload/tests/test_input.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload/tests/test_input.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload/tests/test_input.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload/tests/test_input.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload/tests/test_input.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload/tests/test_input.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload/tests/test_input.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload/tests/test_input.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload/tests/test_input.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload/tests/test_input.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload/tests/test_input.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload/tests/test_input.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_list_value'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload/tests/test_input.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload/tests/test_input.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload/tests/test_input.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload/tests/test_input.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload/tests/test_input.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload/tests/test_input.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload/tests/test_input.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload/tests/test_input.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload/tests/test_input.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload/tests/test_input.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload/tests/test_input.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload/tests/test_input.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_none'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload/tests/test_input.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload/tests/test_input.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload/tests/test_input.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload/tests/test_input.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload/tests/test_input.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload/tests/test_input.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload/tests/test_input.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload/tests/test_input.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload/tests/test_input.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload/tests/test_input.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload/tests/test_input.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload/tests/test_input.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, {"func_args": {"nodeid": "'multiupload/tests/test_input.py::MultiUploadMetaInputTestCase::test_returns_wrapped_scalar'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase'"}, "return_value": "'multiupload/tests/test_field.py::FormTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase'"}, "return_value": "'multiupload/tests/test_field.py::FormTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase'"}, "return_value": "'multiupload/tests/test_field.py::FormTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase'"}, "return_value": "'multiupload/tests/test_field.py::FormTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase'"}, "return_value": "'multiupload/tests/test_field.py::FormTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase'"}, "return_value": "'multiupload/tests/test_field.py::FormTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase'"}, "return_value": "'multiupload/tests/test_field.py::FormTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase'"}, "return_value": "'multiupload/tests/test_field.py::FormTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::FormTestCase'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, "return_value": "None"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, "return_value": "''"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, "return_value": "'multiupload'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, "return_value": "'multiupload/tests'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, "return_value": "'multiupload/tests/test_field.py'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, "return_value": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, {"func_args": {"nodeid": "'multiupload/tests/test_field.py::MinMaxNumTestCase'"}, "return_value": "None"}], "text": "def iterparentnodeids(nodeid: str) -> Iterator[str]:\n    \"\"\"Return the parent node IDs of a given node ID, inclusive.\n\n    For the node ID\n\n        \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_source\"\n\n    the result would be\n\n        \"\"\n        \"testing\"\n        \"testing/code\"\n        \"testing/code/test_excinfo.py\"\n        \"testing/code/test_excinfo.py::TestFormattedExcinfo\"\n        \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_source\"\n\n    Note that / components are only considered until the first ::.\n    \"\"\"\n    pos = 0\n    first_colons: Optional[int] = nodeid.find(\"::\")\n    if first_colons == -1:\n        first_colons = None\n    # The root Session node - always present.\n    yield \"\"\n    # Eagerly consume SEP parts until first colons.\n    while True:\n        at = nodeid.find(SEP, pos, first_colons)\n        if at == -1:\n            break\n        if at > 0:\n            yield nodeid[:at]\n        pos = at + len(SEP)\n    # Eagerly consume :: parts.\n    while True:\n        at = nodeid.find(\"::\", pos)\n        if at == -1:\n            break\n        if at > 0:\n            yield nodeid[:at]\n        pos = at + len(\"::\")\n    # The node ID itself.\n    if nodeid:\n        yield nodeid"}, "wcswidth": {"line": 43, "args": [{"func_args": {"s": "''"}, "return_value": "0"}, {"func_args": {"s": "'multiupload/tests/test_field.py .'"}, "return_value": "33"}, {"func_args": {"s": "'multiupload/tests/test_field.py ..'"}, "return_value": "34"}, {"func_args": {"s": "'multiupload/tests/test_field.py ...'"}, "return_value": "35"}, {"func_args": {"s": "'multiupload/tests/test_field.py ....'"}, "return_value": "36"}, {"func_args": {"s": "'multiupload/tests/test_field.py .....'"}, "return_value": "37"}, {"func_args": {"s": "'multiupload/tests/test_field.py ......'"}, "return_value": "38"}, {"func_args": {"s": "'multiupload/tests/test_field.py .......'"}, "return_value": "39"}, {"func_args": {"s": "'multiupload/tests/test_field.py .......'"}, "return_value": "39"}, {"func_args": {"s": "'multiupload/tests/test_input.py .'"}, "return_value": "33"}, {"func_args": {"s": "'multiupload/tests/test_input.py ..'"}, "return_value": "34"}, {"func_args": {"s": "'multiupload/tests/test_input.py ...'"}, "return_value": "35"}], "text": "def wcswidth(s: str) -> int:\n    \"\"\"Determine how many columns are needed to display a string in a terminal.\n\n    Returns -1 if the string contains non-printable characters.\n    \"\"\"\n    width = 0\n    for c in unicodedata.normalize(\"NFC\", s):\n        wc = wcwidth(c)\n        if wc < 0:\n            return -1\n        width += wc\n    return width"}, "wcwidth": {"line": 4, "args": [{"func_args": {"c": "'m'"}, "return_value": "1"}, {"func_args": {"c": "'u'"}, "return_value": "1"}, {"func_args": {"c": "'l'"}, "return_value": "1"}, {"func_args": {"c": "'t'"}, "return_value": "1"}, {"func_args": {"c": "'i'"}, "return_value": "1"}, {"func_args": {"c": "'p'"}, "return_value": "1"}, {"func_args": {"c": "'o'"}, "return_value": "1"}, {"func_args": {"c": "'a'"}, "return_value": "1"}, {"func_args": {"c": "'d'"}, "return_value": "1"}, {"func_args": {"c": "'/'"}, "return_value": "1"}, {"func_args": {"c": "'e'"}, "return_value": "1"}, {"func_args": {"c": "'s'"}, "return_value": "1"}, {"func_args": {"c": "'_'"}, "return_value": "1"}, {"func_args": {"c": "'f'"}, "return_value": "1"}, {"func_args": {"c": "'.'"}, "return_value": "1"}, {"func_args": {"c": "'y'"}, "return_value": "1"}, {"func_args": {"c": "' '"}, "return_value": "1"}, {"func_args": {"c": "'n'"}, "return_value": "1"}]}, "django_settings_is_configured": {"line": 16, "args": [{"func_args": {}, "return_value": "True"}, {"func_args": {}, "return_value": "True"}, {"func_args": {}, "return_value": "True"}, {"func_args": {}, "return_value": "True"}, {"func_args": {}, "return_value": "True"}, {"func_args": {}, "return_value": "True"}, {"func_args": {}, "return_value": "True"}, {"func_args": {}, "return_value": "True"}, {"func_args": {}, "return_value": "True"}, {"func_args": {}, "return_value": "True"}, {"func_args": {}, "return_value": "True"}, {"func_args": {}, "return_value": "True"}, {"func_args": {}, "return_value": "True"}, {"func_args": {}, "return_value": "True"}, {"func_args": {}, "return_value": "True"}, {"func_args": {}, "return_value": "True"}, {"func_args": {}, "return_value": "True"}, {"func_args": {}, "return_value": "True"}, {"func_args": {}, "return_value": "True"}, {"func_args": {}, "return_value": "True"}, {"func_args": {}, "return_value": "True"}, {"func_args": {}, "return_value": "True"}, {"func_args": {}, "return_value": "True"}, {"func_args": {}, "return_value": "True"}, {"func_args": {}, "return_value": "True"}, {"func_args": {}, "return_value": "True"}, {"func_args": {}, "return_value": "True"}, {"func_args": {}, "return_value": "True"}, {"func_args": {}, "return_value": "True"}, {"func_args": {}, "return_value": "True"}], "text": "def django_settings_is_configured() -> bool:\n    \"\"\"Return whether the Django settings module has been configured.\n\n    This uses either the DJANGO_SETTINGS_MODULE environment variable, or the\n    configured flag in the Django settings object if django.conf has already\n    been imported.\n    \"\"\"\n    ret = bool(os.environ.get(\"DJANGO_SETTINGS_MODULE\"))\n\n    if not ret and \"django.conf\" in sys.modules:\n        django_conf = sys.modules[\"django.conf\"]  # type: Any\n        return django_conf.settings.configured\n\n    return ret"}, "get_language": {"line": 300, "args": [{"func_args": {}, "return_value": "'en-us'"}, {"func_args": {}, "return_value": "None"}, {"func_args": {}, "return_value": "None"}, {"func_args": {}, "return_value": "None"}, {"func_args": {}, "return_value": "None"}, {"func_args": {}, "return_value": "None"}, {"func_args": {}, "return_value": "None"}, {"func_args": {}, "return_value": "None"}, {"func_args": {}, "return_value": "None"}, {"func_args": {}, "return_value": "None"}, {"func_args": {}, "return_value": "None"}, {"func_args": {}, "return_value": "None"}, {"func_args": {}, "return_value": "None"}, {"func_args": {}, "return_value": "None"}, {"func_args": {}, "return_value": "None"}, {"func_args": {}, "return_value": "None"}, {"func_args": {}, "return_value": "None"}, {"func_args": {}, "return_value": "None"}, {"func_args": {}, "return_value": "None"}, {"func_args": {}, "return_value": "None"}, {"func_args": {}, "return_value": "None"}, {"func_args": {}, "return_value": "None"}, {"func_args": {}, "return_value": "None"}, {"func_args": {}, "return_value": "None"}, {"func_args": {}, "return_value": "None"}], "text": "def get_language():\n    \"\"\"Return the currently selected language.\"\"\"\n    t = getattr(_active, \"value\", None)\n    if t is not None:\n        try:\n            return t.to_language()\n        except AttributeError:\n            pass\n    # If we don't have a real translation object, assume it's the default language.\n    return settings.LANGUAGE_CODE"}, "gettext": {"line": 343, "args": [{"func_args": {"message": "'%(from)s-%(to)s relationship'"}, "return_value": "'%(from)s-%(to)s relationship'"}, {"func_args": {"message": "'%(from)s-%(to)s relationships'"}, "return_value": "'%(from)s-%(to)s relationships'"}, {"func_args": {"message": "'%(from)s-%(to)s relationship'"}, "return_value": "'%(from)s-%(to)s relationship'"}, {"func_args": {"message": "'%(from)s-%(to)s relationships'"}, "return_value": "'%(from)s-%(to)s relationships'"}, {"func_args": {"message": "'%(from)s-%(to)s relationship'"}, "return_value": "'%(from)s-%(to)s relationship'"}, {"func_args": {"message": "'%(from)s-%(to)s relationships'"}, "return_value": "'%(from)s-%(to)s relationships'"}, {"func_args": {"message": "'%(from)s-%(to)s relationship'"}, "return_value": "'%(from)s-%(to)s relationship'"}, {"func_args": {"message": "'%(from)s-%(to)s relationships'"}, "return_value": "'%(from)s-%(to)s relationships'"}, {"func_args": {"message": "'%(from)s-%(to)s relationship'"}, "return_value": "'%(from)s-%(to)s relationship'"}, {"func_args": {"message": "'%(from)s-%(to)s relationships'"}, "return_value": "'%(from)s-%(to)s relationships'"}, {"func_args": {"message": "'%(from)s-%(to)s relationship'"}, "return_value": "'%(from)s-%(to)s relationship'"}, {"func_args": {"message": "'%(from)s-%(to)s relationships'"}, "return_value": "'%(from)s-%(to)s relationships'"}, {"func_args": {"message": "'%(from)s-%(to)s relationship'"}, "return_value": "'%(from)s-%(to)s relationship'"}, {"func_args": {"message": "'%(from)s-%(to)s relationships'"}, "return_value": "'%(from)s-%(to)s relationships'"}, {"func_args": {"message": "'%(from)s-%(to)s relationship'"}, "return_value": "'%(from)s-%(to)s relationship'"}, {"func_args": {"message": "'%(from)s-%(to)s relationships'"}, "return_value": "'%(from)s-%(to)s relationships'"}, {"func_args": {"message": "'%(from)s-%(to)s relationship'"}, "return_value": "'%(from)s-%(to)s relationship'"}, {"func_args": {"message": "'%(from)s-%(to)s relationships'"}, "return_value": "'%(from)s-%(to)s relationships'"}, {"func_args": {"message": "'%(from)s-%(to)s relationship'"}, "return_value": "'%(from)s-%(to)s relationship'"}, {"func_args": {"message": "'%(from)s-%(to)s relationships'"}, "return_value": "'%(from)s-%(to)s relationships'"}, {"func_args": {"message": "'%(from)s-%(to)s relationship'"}, "return_value": "'%(from)s-%(to)s relationship'"}, {"func_args": {"message": "'%(from)s-%(to)s relationships'"}, "return_value": "'%(from)s-%(to)s relationships'"}, {"func_args": {"message": "'%(from)s-%(to)s relationship'"}, "return_value": "'%(from)s-%(to)s relationship'"}, {"func_args": {"message": "'%(from)s-%(to)s relationships'"}, "return_value": "'%(from)s-%(to)s relationships'"}, {"func_args": {"message": "'%(from)s-%(to)s relationship'"}, "return_value": "'%(from)s-%(to)s relationship'"}, {"func_args": {"message": "'%(from)s-%(to)s relationships'"}, "return_value": "'%(from)s-%(to)s relationships'"}, {"func_args": {"message": "'%(from)s-%(to)s relationship'"}, "return_value": "'%(from)s-%(to)s relationship'"}, {"func_args": {"message": "'%(from)s-%(to)s relationships'"}, "return_value": "'%(from)s-%(to)s relationships'"}, {"func_args": {"message": "'%(from)s-%(to)s relationship'"}, "return_value": "'%(from)s-%(to)s relationship'"}, {"func_args": {"message": "'%(from)s-%(to)s relationships'"}, "return_value": "'%(from)s-%(to)s relationships'"}, {"func_args": {"message": "'%(from)s-%(to)s relationship'"}, "return_value": "'%(from)s-%(to)s relationship'"}, {"func_args": {"message": "'%(from)s-%(to)s relationships'"}, "return_value": "'%(from)s-%(to)s relationships'"}, {"func_args": {"message": "'%(from)s-%(to)s relationship'"}, "return_value": "'%(from)s-%(to)s relationship'"}, {"func_args": {"message": "'%(from)s-%(to)s relationships'"}, "return_value": "'%(from)s-%(to)s relationships'"}, {"func_args": {"message": "'%(from)s-%(to)s relationship'"}, "return_value": "'%(from)s-%(to)s relationship'"}, {"func_args": {"message": "'%(from)s-%(to)s relationships'"}, "return_value": "'%(from)s-%(to)s relationships'"}, {"func_args": {"message": "'%(from)s-%(to)s relationship'"}, "return_value": "'%(from)s-%(to)s relationship'"}, {"func_args": {"message": "'%(from)s-%(to)s relationships'"}, "return_value": "'%(from)s-%(to)s relationships'"}, {"func_args": {"message": "'%(from)s-%(to)s relationship'"}, "return_value": "'%(from)s-%(to)s relationship'"}, {"func_args": {"message": "'%(from)s-%(to)s relationships'"}, "return_value": "'%(from)s-%(to)s relationships'"}, {"func_args": {"message": "'%(from)s-%(to)s relationship'"}, "return_value": "'%(from)s-%(to)s relationship'"}, {"func_args": {"message": "'%(from)s-%(to)s relationships'"}, "return_value": "'%(from)s-%(to)s relationships'"}, {"func_args": {"message": "'%(from)s-%(to)s relationship'"}, "return_value": "'%(from)s-%(to)s relationship'"}, {"func_args": {"message": "'%(from)s-%(to)s relationships'"}, "return_value": "'%(from)s-%(to)s relationships'"}, {"func_args": {"message": "'%(from)s-%(to)s relationship'"}, "return_value": "'%(from)s-%(to)s relationship'"}, {"func_args": {"message": "'%(from)s-%(to)s relationships'"}, "return_value": "'%(from)s-%(to)s relationships'"}, {"func_args": {"message": "'%(from)s-%(to)s relationship'"}, "return_value": "'%(from)s-%(to)s relationship'"}, {"func_args": {"message": "'%(from)s-%(to)s relationships'"}, "return_value": "'%(from)s-%(to)s relationships'"}, {"func_args": {"message": "'%(from)s-%(to)s relationship'"}, "return_value": "'%(from)s-%(to)s relationship'"}, {"func_args": {"message": "'%(from)s-%(to)s relationships'"}, "return_value": "'%(from)s-%(to)s relationships'"}, {"func_args": {"message": "'%(from)s-%(to)s relationship'"}, "return_value": "'%(from)s-%(to)s relationship'"}, {"func_args": {"message": "'%(from)s-%(to)s relationships'"}, "return_value": "'%(from)s-%(to)s relationships'"}, {"func_args": {"message": "'%(from)s-%(to)s relationship'"}, "return_value": "'%(from)s-%(to)s relationship'"}, {"func_args": {"message": "'%(from)s-%(to)s relationships'"}, "return_value": "'%(from)s-%(to)s relationships'"}, {"func_args": {"message": "'%(from)s-%(to)s relationship'"}, "return_value": "'%(from)s-%(to)s relationship'"}, {"func_args": {"message": "'%(from)s-%(to)s relationships'"}, "return_value": "'%(from)s-%(to)s relationships'"}, {"func_args": {"message": "'%(from)s-%(to)s relationship'"}, "return_value": "'%(from)s-%(to)s relationship'"}, {"func_args": {"message": "'%(from)s-%(to)s relationships'"}, "return_value": "'%(from)s-%(to)s relationships'"}, {"func_args": {"message": "'%(from)s-%(to)s relationship'"}, "return_value": "'%(from)s-%(to)s relationship'"}, {"func_args": {"message": "'%(from)s-%(to)s relationships'"}, "return_value": "'%(from)s-%(to)s relationships'"}, {"func_args": {"message": "'%(from)s-%(to)s relationship'"}, "return_value": "'%(from)s-%(to)s relationship'"}, {"func_args": {"message": "'%(from)s-%(to)s relationships'"}, "return_value": "'%(from)s-%(to)s relationships'"}, {"func_args": {"message": "'%(from)s-%(to)s relationship'"}, "return_value": "'%(from)s-%(to)s relationship'"}, {"func_args": {"message": "'%(from)s-%(to)s relationships'"}, "return_value": "'%(from)s-%(to)s relationships'"}, {"func_args": {"message": "'%(from)s-%(to)s relationship'"}, "return_value": "'%(from)s-%(to)s relationship'"}, {"func_args": {"message": "'%(from)s-%(to)s relationships'"}, "return_value": "'%(from)s-%(to)s relationships'"}, {"func_args": {"message": "'%(from)s-%(to)s relationship'"}, "return_value": "'%(from)s-%(to)s relationship'"}, {"func_args": {"message": "'%(from)s-%(to)s relationships'"}, "return_value": "'%(from)s-%(to)s relationships'"}, {"func_args": {"message": "'%(from)s-%(to)s relationship'"}, "return_value": "'%(from)s-%(to)s relationship'"}, {"func_args": {"message": "'%(from)s-%(to)s relationships'"}, "return_value": "'%(from)s-%(to)s relationships'"}, {"func_args": {"message": "'%(from)s-%(to)s relationship'"}, "return_value": "'%(from)s-%(to)s relationship'"}, {"func_args": {"message": "'%(from)s-%(to)s relationships'"}, "return_value": "'%(from)s-%(to)s relationships'"}, {"func_args": {"message": "'%(from)s-%(to)s relationship'"}, "return_value": "'%(from)s-%(to)s relationship'"}, {"func_args": {"message": "'%(from)s-%(to)s relationships'"}, "return_value": "'%(from)s-%(to)s relationships'"}, {"func_args": {"message": "'%(from)s-%(to)s relationship'"}, "return_value": "'%(from)s-%(to)s relationship'"}, {"func_args": {"message": "'%(from)s-%(to)s relationships'"}, "return_value": "'%(from)s-%(to)s relationships'"}, {"func_args": {"message": "'%(from)s-%(to)s relationship'"}, "return_value": "'%(from)s-%(to)s relationship'"}, {"func_args": {"message": "'%(from)s-%(to)s relationships'"}, "return_value": "'%(from)s-%(to)s relationships'"}, {"func_args": {"message": "'%(from)s-%(to)s relationship'"}, "return_value": "'%(from)s-%(to)s relationship'"}, {"func_args": {"message": "'%(from)s-%(to)s relationships'"}, "return_value": "'%(from)s-%(to)s relationships'"}, {"func_args": {"message": "'%(from)s-%(to)s relationship'"}, "return_value": "'%(from)s-%(to)s relationship'"}, {"func_args": {"message": "'%(from)s-%(to)s relationships'"}, "return_value": "'%(from)s-%(to)s relationships'"}, {"func_args": {"message": "'%(from)s-%(to)s relationship'"}, "return_value": "'%(from)s-%(to)s relationship'"}, {"func_args": {"message": "'%(from)s-%(to)s relationships'"}, "return_value": "'%(from)s-%(to)s relationships'"}, {"func_args": {"message": "'%(from)s-%(to)s relationship'"}, "return_value": "'%(from)s-%(to)s relationship'"}, {"func_args": {"message": "'%(from)s-%(to)s relationships'"}, "return_value": "'%(from)s-%(to)s relationships'"}, {"func_args": {"message": "'%(from)s-%(to)s relationship'"}, "return_value": "'%(from)s-%(to)s relationship'"}, {"func_args": {"message": "'%(from)s-%(to)s relationships'"}, "return_value": "'%(from)s-%(to)s relationships'"}, {"func_args": {"message": "'%(from)s-%(to)s relationship'"}, "return_value": "'%(from)s-%(to)s relationship'"}, {"func_args": {"message": "'%(from)s-%(to)s relationships'"}, "return_value": "'%(from)s-%(to)s relationships'"}, {"func_args": {"message": "'%(from)s-%(to)s relationship'"}, "return_value": "'%(from)s-%(to)s relationship'"}, {"func_args": {"message": "'%(from)s-%(to)s relationships'"}, "return_value": "'%(from)s-%(to)s relationships'"}, {"func_args": {"message": "'%(from)s-%(to)s relationship'"}, "return_value": "'%(from)s-%(to)s relationship'"}, {"func_args": {"message": "'%(from)s-%(to)s relationships'"}, "return_value": "'%(from)s-%(to)s relationships'"}, {"func_args": {"message": "'%(from)s-%(to)s relationship'"}, "return_value": "'%(from)s-%(to)s relationship'"}, {"func_args": {"message": "'%(from)s-%(to)s relationships'"}, "return_value": "'%(from)s-%(to)s relationships'"}, {"func_args": {"message": "'%(from)s-%(to)s relationship'"}, "return_value": "'%(from)s-%(to)s relationship'"}, {"func_args": {"message": "'%(from)s-%(to)s relationships'"}, "return_value": "'%(from)s-%(to)s relationships'"}, {"func_args": {"message": "':'"}, "return_value": "':'"}, {"func_args": {"message": "':?.!'"}, "return_value": "':?.!'"}, {"func_args": {"message": "':'"}, "return_value": "':'"}, {"func_args": {"message": "'Ensure at most %(max_num)s files are uploaded (received %(num_files)s).'"}, "return_value": "'Ensure at most %(max_num)s files are uploaded (received %(num_files)s).'"}, {"func_args": {"message": "':'"}, "return_value": "':'"}, {"func_args": {"message": "':'"}, "return_value": "':'"}, {"func_args": {"message": "':'"}, "return_value": "':'"}, {"func_args": {"message": "':'"}, "return_value": "':'"}], "text": "def gettext(message):\n    \"\"\"\n    Translate the 'message' string. It uses the current thread to find the\n    translation object to use. If no current translation is activated, the\n    message will be run through the default translation object.\n    \"\"\"\n    global _default\n\n    eol_message = message.replace('\\r\\n', '\\n').replace('\\r', '\\n')\n\n    if eol_message:\n        _default = _default or translation(settings.LANGUAGE_CODE)\n        translation_object = getattr(_active, \"value\", _default)\n\n        result = translation_object.gettext(eol_message)\n    else:\n        # Return an empty value of the corresponding type if an empty message\n        # is given, instead of metadata, which is the default gettext behavior.\n        result = type(message)('')\n\n    if isinstance(message, SafeData):\n        return mark_safe(result)\n\n    return result"}, "get_unique_databases_and_mirrors": {"line": 300, "args": [{"func_args": {"aliases": "None"}, "return_value": "({('/usr/app/src/test_repos/db.sqlite3', 'default'): ('/usr/app/src/test_repos/db.sqlite3', ['default'])}, {})"}], "text": "def get_unique_databases_and_mirrors(aliases=None):\n    \"\"\"\n    Figure out which databases actually need to be created.\n\n    Deduplicate entries in DATABASES that correspond the same database or are\n    configured as test mirrors.\n\n    Return two values:\n    - test_databases: ordered mapping of signatures to (name, list of aliases)\n                      where all aliases share the same underlying database.\n    - mirrored_aliases: mapping of mirror aliases to original aliases.\n    \"\"\"\n    if aliases is None:\n        aliases = connections\n    mirrored_aliases = {}\n    test_databases = {}\n    dependencies = {}\n    default_sig = connections[DEFAULT_DB_ALIAS].creation.test_db_signature()\n\n    for alias in connections:\n        connection = connections[alias]\n        test_settings = connection.settings_dict['TEST']\n\n        if test_settings['MIRROR']:\n            # If the database is marked as a test mirror, save the alias.\n            mirrored_aliases[alias] = test_settings['MIRROR']\n        elif alias in aliases:\n            # Store a tuple with DB parameters that uniquely identify it.\n            # If we have two aliases with the same values for that tuple,\n            # we only need to create the test database once.\n            item = test_databases.setdefault(\n                connection.creation.test_db_signature(),\n                (connection.settings_dict['NAME'], []),\n            )\n            # The default database must be the first because data migrations\n            # use the default alias by default.\n            if alias == DEFAULT_DB_ALIAS:\n                item[1].insert(0, alias)\n            else:\n                item[1].append(alias)\n\n            if 'DEPENDENCIES' in test_settings:\n                dependencies[alias] = test_settings['DEPENDENCIES']\n            else:\n                if alias != DEFAULT_DB_ALIAS and connection.creation.test_db_signature() != default_sig:\n                    dependencies[alias] = test_settings.get('DEPENDENCIES', [DEFAULT_DB_ALIAS])\n\n    test_databases = dict(dependency_ordered(test_databases.items(), dependencies))\n    return test_databases, mirrored_aliases"}, "is_in_memory_db": {"line": 10, "args": [{"func_args": {"database_name": "'file:memorydb_default?mode=memory&cache=shared'"}, "return_value": "True"}, {"func_args": {"database_name": "'file:memorydb_default?mode=memory&cache=shared'"}, "return_value": "True"}, {"func_args": {"database_name": "'file:memorydb_default?mode=memory&cache=shared'"}, "return_value": "True"}, {"func_args": {"database_name": "'/usr/app/src/test_repos/db.sqlite3'"}, "return_value": "False"}, {"func_args": {"database_name": "'file:memorydb_default?mode=memory&cache=shared'"}, "return_value": "True"}, {"func_args": {"database_name": "'file:memorydb_default?mode=memory&cache=shared'"}, "return_value": "True"}, {"func_args": {"database_name": "'file:memorydb_default?mode=memory&cache=shared'"}, "return_value": "True"}, {"func_args": {"database_name": "'file:memorydb_default?mode=memory&cache=shared'"}, "return_value": "True"}]}, "find_commands": {"line": 22, "args": [{"func_args": {"management_dir": "'/usr/app/src/test_repos/django-multiupload/.tox/py38/lib/python3.8/site-packages/django/core/management'"}, "return_value": "['check', 'compilemessages', 'createcachetable', 'dbshell', 'diffsettings', 'dumpdata', 'flush', 'inspectdb', 'loaddata', 'makemessages', 'makemigrations', 'migrate', 'runserver', 'sendtestemail', 'shell', 'showmigrations', 'sqlflush', 'sqlmigrate', 'sqlsequencereset', 'squashmigrations', 'startapp', 'startproject', 'test', 'testserver']"}, {"func_args": {"management_dir": "'/usr/app/src/test_repos/django-multiupload/.tox/py38/lib/python3.8/site-packages/django/contrib/staticfiles/management'"}, "return_value": "['collectstatic', 'findstatic', 'runserver']"}, {"func_args": {"management_dir": "'/usr/app/src/test_repos/django-multiupload/.tox/py38/lib/python3.8/site-packages/django/contrib/messages/management'"}, "return_value": "[]"}, {"func_args": {"management_dir": "'/usr/app/src/test_repos/django-multiupload/.tox/py38/lib/python3.8/site-packages/django/contrib/sessions/management'"}, "return_value": "['clearsessions']"}, {"func_args": {"management_dir": "'/usr/app/src/test_repos/django-multiupload/.tox/py38/lib/python3.8/site-packages/django/contrib/contenttypes/management'"}, "return_value": "['remove_stale_contenttypes']"}, {"func_args": {"management_dir": "'/usr/app/src/test_repos/django-multiupload/.tox/py38/lib/python3.8/site-packages/django/contrib/auth/management'"}, "return_value": "['changepassword', 'createsuperuser']"}, {"func_args": {"management_dir": "'/usr/app/src/test_repos/django-multiupload/.tox/py38/lib/python3.8/site-packages/django/contrib/admin/management'"}, "return_value": "[]"}], "text": "def find_commands(management_dir):\n    \"\"\"\n    Given a path to a management directory, return a list of all the command\n    names that are available.\n    \"\"\"\n    command_dir = os.path.join(management_dir, 'commands')\n    return [name for _, name, is_pkg in pkgutil.iter_modules([command_dir])\n            if not is_pkg and not name.startswith('_')]"}, "get_commands": {"line": 42, "args": [{"func_args": {}, "return_value": "{'check': 'django.core', 'compilemessages': 'django.core', 'createcachetable': 'django.core', 'dbshell': 'django.core', 'diffsettings': 'django.core', 'dumpdata': 'django.core', 'flush': 'django.core', 'inspectdb': 'django.core', 'loaddata': 'django.core', 'makemessages': 'django.core', 'makemigrations': 'django.core', 'migrate': 'django.core', 'runserver': 'django.contrib.staticfiles', 'sendtestemail': 'django.core', 'shell': 'django.core', 'showmigrations': 'django.core', 'sqlflush': 'django.core', 'sqlmigrate': 'django.core', 'sqlsequencereset': 'django.core', 'squashmigrations': 'django.core', 'startapp': 'django.core', 'startproject': 'django.core', 'test': 'django.core', 'testserver': 'django.core', 'collectstatic': 'django.contrib.staticfiles', 'findstatic': 'django.contrib.staticfiles', 'clearsessions': 'django.contrib.sessions', 'remove_stale_contenttypes': 'django.contrib.contenttypes', 'changepassword': 'django.contrib.auth', 'createsuperuser': 'django.contrib.auth'}"}]}, "get_complete_version": {"line": 50, "args": [{"func_args": {"version": "None"}, "return_value": "(4, 0, 1, 'final', 0)"}, {"func_args": {"version": "(4, 0, 1, 'final', 0)"}, "return_value": "(4, 0, 1, 'final', 0)"}, {"func_args": {"version": "None"}, "return_value": "(4, 0, 1, 'final', 0)"}, {"func_args": {"version": "(4, 0, 1, 'final', 0)"}, "return_value": "(4, 0, 1, 'final', 0)"}], "text": "def get_complete_version(version=None):\n    \"\"\"\n    Return a tuple of the django version. If version argument is non-empty,\n    check for correctness of the tuple provided.\n    \"\"\"\n    if version is None:\n        from django import VERSION as version\n    else:\n        assert len(version) == 5\n        assert version[3] in ('alpha', 'beta', 'rc', 'final')\n\n    return version"}, "get_main_version": {"line": 43, "args": [{"func_args": {"version": "(4, 0, 1, 'final', 0)"}, "return_value": "'4.0.1'"}, {"func_args": {"version": "(4, 0, 1, 'final', 0)"}, "return_value": "'4.0.1'"}], "text": "def get_main_version(version=None):\n    \"\"\"Return main version (X.Y[.Z]) from VERSION.\"\"\"\n    version = get_complete_version(version)\n    parts = 2 if version[2] == 0 else 3\n    return '.'.join(str(x) for x in version[:parts])"}, "get_version": {"line": 19, "args": [{"func_args": {"version": "None"}, "return_value": "'4.0.1'"}, {"func_args": {"version": "None"}, "return_value": "'4.0.1'"}], "text": "def get_version(version=None):\n    \"\"\"Return a PEP 440-compliant version number from VERSION.\"\"\"\n    version = get_complete_version(version)\n\n    # Now build the two parts of the version number:\n    # main = X.Y[.Z]\n    # sub = .devN - for pre-alpha releases\n    #     | {a|b|rc}N - for alpha, beta, and rc releases\n\n    main = get_main_version(version)\n\n    sub = ''\n    if version[3] == 'alpha' and version[4] == 0:\n        git_changeset = get_git_changeset()\n        if git_changeset:\n            sub = '.dev%s' % git_changeset\n\n    elif version[3] != 'final':\n        mapping = {'alpha': 'a', 'beta': 'b', 'rc': 'rc'}\n        sub = mapping[version[3]] + str(version[4])\n\n    return main + sub"}, "split_identifier": {"line": 195, "args": [{"func_args": {"identifier": "'django_content_type'"}, "return_value": "('', 'django_content_type')"}, {"func_args": {"identifier": "'auth_permission'"}, "return_value": "('', 'auth_permission')"}, {"func_args": {"identifier": "'auth_group'"}, "return_value": "('', 'auth_group')"}, {"func_args": {"identifier": "'auth_group_permissions'"}, "return_value": "('', 'auth_group_permissions')"}, {"func_args": {"identifier": "'auth_permission'"}, "return_value": "('', 'auth_permission')"}, {"func_args": {"identifier": "'auth_group'"}, "return_value": "('', 'auth_group')"}, {"func_args": {"identifier": "'auth_group_permissions'"}, "return_value": "('', 'auth_group_permissions')"}, {"func_args": {"identifier": "'auth_permission'"}, "return_value": "('', 'auth_permission')"}, {"func_args": {"identifier": "'auth_user'"}, "return_value": "('', 'auth_user')"}, {"func_args": {"identifier": "'auth_user_groups'"}, "return_value": "('', 'auth_user_groups')"}, {"func_args": {"identifier": "'auth_user_user_permissions'"}, "return_value": "('', 'auth_user_user_permissions')"}, {"func_args": {"identifier": "'auth_permission'"}, "return_value": "('', 'auth_permission')"}, {"func_args": {"identifier": "'auth_group_permissions'"}, "return_value": "('', 'auth_group_permissions')"}, {"func_args": {"identifier": "'auth_user_groups'"}, "return_value": "('', 'auth_user_groups')"}, {"func_args": {"identifier": "'auth_user_user_permissions'"}, "return_value": "('', 'auth_user_user_permissions')"}, {"func_args": {"identifier": "'auth_user'"}, "return_value": "('', 'auth_user')"}, {"func_args": {"identifier": "'auth_user_groups'"}, "return_value": "('', 'auth_user_groups')"}, {"func_args": {"identifier": "'auth_user_user_permissions'"}, "return_value": "('', 'auth_user_user_permissions')"}, {"func_args": {"identifier": "'auth_group'"}, "return_value": "('', 'auth_group')"}, {"func_args": {"identifier": "'auth_group_permissions'"}, "return_value": "('', 'auth_group_permissions')"}, {"func_args": {"identifier": "'auth_permission'"}, "return_value": "('', 'auth_permission')"}, {"func_args": {"identifier": "'auth_user'"}, "return_value": "('', 'auth_user')"}, {"func_args": {"identifier": "'auth_user_groups'"}, "return_value": "('', 'auth_user_groups')"}, {"func_args": {"identifier": "'auth_user_user_permissions'"}, "return_value": "('', 'auth_user_user_permissions')"}, {"func_args": {"identifier": "'auth_group'"}, "return_value": "('', 'auth_group')"}, {"func_args": {"identifier": "'auth_group_permissions'"}, "return_value": "('', 'auth_group_permissions')"}, {"func_args": {"identifier": "'auth_permission'"}, "return_value": "('', 'auth_permission')"}, {"func_args": {"identifier": "'auth_user'"}, "return_value": "('', 'auth_user')"}, {"func_args": {"identifier": "'auth_user_groups'"}, "return_value": "('', 'auth_user_groups')"}, {"func_args": {"identifier": "'auth_user_user_permissions'"}, "return_value": "('', 'auth_user_user_permissions')"}, {"func_args": {"identifier": "'auth_group'"}, "return_value": "('', 'auth_group')"}, {"func_args": {"identifier": "'auth_group_permissions'"}, "return_value": "('', 'auth_group_permissions')"}, {"func_args": {"identifier": "'auth_permission'"}, "return_value": "('', 'auth_permission')"}, {"func_args": {"identifier": "'auth_permission'"}, "return_value": "('', 'auth_permission')"}, {"func_args": {"identifier": "'auth_permission'"}, "return_value": "('', 'auth_permission')"}, {"func_args": {"identifier": "'django_content_type'"}, "return_value": "('', 'django_content_type')"}, {"func_args": {"identifier": "'auth_permission'"}, "return_value": "('', 'auth_permission')"}, {"func_args": {"identifier": "'auth_group'"}, "return_value": "('', 'auth_group')"}, {"func_args": {"identifier": "'auth_group_permissions'"}, "return_value": "('', 'auth_group_permissions')"}, {"func_args": {"identifier": "'auth_user'"}, "return_value": "('', 'auth_user')"}, {"func_args": {"identifier": "'auth_user_groups'"}, "return_value": "('', 'auth_user_groups')"}, {"func_args": {"identifier": "'auth_user_user_permissions'"}, "return_value": "('', 'auth_user_user_permissions')"}, {"func_args": {"identifier": "'auth_permission'"}, "return_value": "('', 'auth_permission')"}, {"func_args": {"identifier": "'django_content_type'"}, "return_value": "('', 'django_content_type')"}, {"func_args": {"identifier": "'auth_user'"}, "return_value": "('', 'auth_user')"}, {"func_args": {"identifier": "'auth_user_groups'"}, "return_value": "('', 'auth_user_groups')"}, {"func_args": {"identifier": "'auth_user_user_permissions'"}, "return_value": "('', 'auth_user_user_permissions')"}, {"func_args": {"identifier": "'auth_group'"}, "return_value": "('', 'auth_group')"}, {"func_args": {"identifier": "'auth_group_permissions'"}, "return_value": "('', 'auth_group_permissions')"}, {"func_args": {"identifier": "'auth_permission'"}, "return_value": "('', 'auth_permission')"}, {"func_args": {"identifier": "'auth_permission'"}, "return_value": "('', 'auth_permission')"}, {"func_args": {"identifier": "'auth_user'"}, "return_value": "('', 'auth_user')"}, {"func_args": {"identifier": "'auth_user_groups'"}, "return_value": "('', 'auth_user_groups')"}, {"func_args": {"identifier": "'auth_user_user_permissions'"}, "return_value": "('', 'auth_user_user_permissions')"}, {"func_args": {"identifier": "'auth_group'"}, "return_value": "('', 'auth_group')"}, {"func_args": {"identifier": "'auth_group_permissions'"}, "return_value": "('', 'auth_group_permissions')"}, {"func_args": {"identifier": "'auth_permission'"}, "return_value": "('', 'auth_permission')"}, {"func_args": {"identifier": "'auth_user'"}, "return_value": "('', 'auth_user')"}, {"func_args": {"identifier": "'auth_user_groups'"}, "return_value": "('', 'auth_user_groups')"}, {"func_args": {"identifier": "'auth_user_user_permissions'"}, "return_value": "('', 'auth_user_user_permissions')"}, {"func_args": {"identifier": "'auth_group'"}, "return_value": "('', 'auth_group')"}, {"func_args": {"identifier": "'auth_group_permissions'"}, "return_value": "('', 'auth_group_permissions')"}, {"func_args": {"identifier": "'auth_permission'"}, "return_value": "('', 'auth_permission')"}, {"func_args": {"identifier": "'auth_user'"}, "return_value": "('', 'auth_user')"}, {"func_args": {"identifier": "'auth_user_groups'"}, "return_value": "('', 'auth_user_groups')"}, {"func_args": {"identifier": "'auth_user_user_permissions'"}, "return_value": "('', 'auth_user_user_permissions')"}, {"func_args": {"identifier": "'auth_group'"}, "return_value": "('', 'auth_group')"}, {"func_args": {"identifier": "'auth_group_permissions'"}, "return_value": "('', 'auth_group_permissions')"}, {"func_args": {"identifier": "'auth_permission'"}, "return_value": "('', 'auth_permission')"}, {"func_args": {"identifier": "'auth_user'"}, "return_value": "('', 'auth_user')"}, {"func_args": {"identifier": "'auth_user_groups'"}, "return_value": "('', 'auth_user_groups')"}, {"func_args": {"identifier": "'auth_user_user_permissions'"}, "return_value": "('', 'auth_user_user_permissions')"}, {"func_args": {"identifier": "'auth_group'"}, "return_value": "('', 'auth_group')"}, {"func_args": {"identifier": "'auth_group_permissions'"}, "return_value": "('', 'auth_group_permissions')"}, {"func_args": {"identifier": "'auth_permission'"}, "return_value": "('', 'auth_permission')"}, {"func_args": {"identifier": "'auth_user'"}, "return_value": "('', 'auth_user')"}, {"func_args": {"identifier": "'auth_user_groups'"}, "return_value": "('', 'auth_user_groups')"}, {"func_args": {"identifier": "'auth_user_user_permissions'"}, "return_value": "('', 'auth_user_user_permissions')"}, {"func_args": {"identifier": "'auth_group'"}, "return_value": "('', 'auth_group')"}, {"func_args": {"identifier": "'auth_group_permissions'"}, "return_value": "('', 'auth_group_permissions')"}, {"func_args": {"identifier": "'auth_permission'"}, "return_value": "('', 'auth_permission')"}, {"func_args": {"identifier": "'auth_user'"}, "return_value": "('', 'auth_user')"}, {"func_args": {"identifier": "'auth_user_groups'"}, "return_value": "('', 'auth_user_groups')"}, {"func_args": {"identifier": "'auth_user_user_permissions'"}, "return_value": "('', 'auth_user_user_permissions')"}, {"func_args": {"identifier": "'auth_group'"}, "return_value": "('', 'auth_group')"}, {"func_args": {"identifier": "'auth_group_permissions'"}, "return_value": "('', 'auth_group_permissions')"}, {"func_args": {"identifier": "'auth_permission'"}, "return_value": "('', 'auth_permission')"}, {"func_args": {"identifier": "'auth_user'"}, "return_value": "('', 'auth_user')"}, {"func_args": {"identifier": "'auth_user_groups'"}, "return_value": "('', 'auth_user_groups')"}, {"func_args": {"identifier": "'auth_user_user_permissions'"}, "return_value": "('', 'auth_user_user_permissions')"}, {"func_args": {"identifier": "'auth_group'"}, "return_value": "('', 'auth_group')"}, {"func_args": {"identifier": "'auth_group_permissions'"}, "return_value": "('', 'auth_group_permissions')"}, {"func_args": {"identifier": "'auth_permission'"}, "return_value": "('', 'auth_permission')"}, {"func_args": {"identifier": "'auth_permission'"}, "return_value": "('', 'auth_permission')"}, {"func_args": {"identifier": "'auth_group'"}, "return_value": "('', 'auth_group')"}, {"func_args": {"identifier": "'auth_group_permissions'"}, "return_value": "('', 'auth_group_permissions')"}, {"func_args": {"identifier": "'auth_user'"}, "return_value": "('', 'auth_user')"}, {"func_args": {"identifier": "'auth_user_groups'"}, "return_value": "('', 'auth_user_groups')"}, {"func_args": {"identifier": "'auth_user_user_permissions'"}, "return_value": "('', 'auth_user_user_permissions')"}, {"func_args": {"identifier": "'auth_user'"}, "return_value": "('', 'auth_user')"}, {"func_args": {"identifier": "'auth_user_groups'"}, "return_value": "('', 'auth_user_groups')"}, {"func_args": {"identifier": "'auth_user_user_permissions'"}, "return_value": "('', 'auth_user_user_permissions')"}, {"func_args": {"identifier": "'auth_group'"}, "return_value": "('', 'auth_group')"}, {"func_args": {"identifier": "'auth_group_permissions'"}, "return_value": "('', 'auth_group_permissions')"}, {"func_args": {"identifier": "'auth_permission'"}, "return_value": "('', 'auth_permission')"}, {"func_args": {"identifier": "'auth_permission'"}, "return_value": "('', 'auth_permission')"}, {"func_args": {"identifier": "'auth_group'"}, "return_value": "('', 'auth_group')"}, {"func_args": {"identifier": "'auth_group_permissions'"}, "return_value": "('', 'auth_group_permissions')"}, {"func_args": {"identifier": "'auth_user'"}, "return_value": "('', 'auth_user')"}, {"func_args": {"identifier": "'auth_user_groups'"}, "return_value": "('', 'auth_user_groups')"}, {"func_args": {"identifier": "'auth_user_user_permissions'"}, "return_value": "('', 'auth_user_user_permissions')"}], "text": "def split_identifier(identifier):\n    \"\"\"\n    Split an SQL identifier into a two element tuple of (namespace, name).\n\n    The identifier could be a table, column, or sequence name might be prefixed\n    by a namespace.\n    \"\"\"\n    try:\n        namespace, name = identifier.split('\".\"')\n    except ValueError:\n        namespace, name = '', identifier\n    return namespace.strip('\"'), name.strip('\"')"}, "names_digest": {"line": 226, "args": [{"func_args": {"length": "8", "args": "('django_content_type', 'app_label', 'model')"}, "return_value": "'76bd3d3b'"}, {"func_args": {"length": "8", "args": "('auth_permission', 'content_type_id', 'codename')"}, "return_value": "'01ab375a'"}, {"func_args": {"length": "8", "args": "('auth_group_permissions', 'group_id', 'permission_id')"}, "return_value": "'0cd325b0'"}, {"func_args": {"length": "8", "args": "('auth_user_groups', 'user_id', 'group_id')"}, "return_value": "'94350c0c'"}, {"func_args": {"length": "8", "args": "('auth_user_user_permissions', 'user_id', 'permission_id')"}, "return_value": "'14a6b632'"}, {"func_args": {"length": "8", "args": "('django_content_type', 'app_label', 'model')"}, "return_value": "'76bd3d3b'"}, {"func_args": {"length": "8", "args": "('django_content_type', 'app_label', 'model')"}, "return_value": "'76bd3d3b'"}, {"func_args": {"length": "8", "args": "('auth_permission', 'content_type_id', 'codename')"}, "return_value": "'01ab375a'"}], "text": "def names_digest(*args, length):\n    \"\"\"\n    Generate a 32-bit digest of a set of arguments that can be used to shorten\n    identifying names.\n    \"\"\"\n    h = hashlib.md5()\n    for arg in args:\n        h.update(arg.encode())\n    return h.hexdigest()[:length]"}, "truncate_name": {"line": 209, "args": [{"func_args": {"identifier": "'auth_permission'", "length": "None", "hash_len": "4"}, "return_value": "'auth_permission'"}, {"func_args": {"identifier": "'auth_group'", "length": "None", "hash_len": "4"}, "return_value": "'auth_group'"}, {"func_args": {"identifier": "'auth_group_permissions'", "length": "None", "hash_len": "4"}, "return_value": "'auth_group_permissions'"}, {"func_args": {"identifier": "'auth_permission'", "length": "None", "hash_len": "4"}, "return_value": "'auth_permission'"}, {"func_args": {"identifier": "'auth_group'", "length": "None", "hash_len": "4"}, "return_value": "'auth_group'"}, {"func_args": {"identifier": "'auth_group_permissions'", "length": "None", "hash_len": "4"}, "return_value": "'auth_group_permissions'"}, {"func_args": {"identifier": "'auth_permission'", "length": "None", "hash_len": "4"}, "return_value": "'auth_permission'"}, {"func_args": {"identifier": "'auth_user'", "length": "None", "hash_len": "4"}, "return_value": "'auth_user'"}, {"func_args": {"identifier": "'auth_user_groups'", "length": "None", "hash_len": "4"}, "return_value": "'auth_user_groups'"}, {"func_args": {"identifier": "'auth_user_user_permissions'", "length": "None", "hash_len": "4"}, "return_value": "'auth_user_user_permissions'"}, {"func_args": {"identifier": "'auth_user'", "length": "None", "hash_len": "4"}, "return_value": "'auth_user'"}, {"func_args": {"identifier": "'auth_user_groups'", "length": "None", "hash_len": "4"}, "return_value": "'auth_user_groups'"}, {"func_args": {"identifier": "'auth_user_user_permissions'", "length": "None", "hash_len": "4"}, "return_value": "'auth_user_user_permissions'"}, {"func_args": {"identifier": "'auth_group'", "length": "None", "hash_len": "4"}, "return_value": "'auth_group'"}, {"func_args": {"identifier": "'auth_group_permissions'", "length": "None", "hash_len": "4"}, "return_value": "'auth_group_permissions'"}, {"func_args": {"identifier": "'auth_permission'", "length": "None", "hash_len": "4"}, "return_value": "'auth_permission'"}, {"func_args": {"identifier": "'auth_user'", "length": "None", "hash_len": "4"}, "return_value": "'auth_user'"}, {"func_args": {"identifier": "'auth_user_groups'", "length": "None", "hash_len": "4"}, "return_value": "'auth_user_groups'"}, {"func_args": {"identifier": "'auth_user_user_permissions'", "length": "None", "hash_len": "4"}, "return_value": "'auth_user_user_permissions'"}, {"func_args": {"identifier": "'auth_group'", "length": "None", "hash_len": "4"}, "return_value": "'auth_group'"}, {"func_args": {"identifier": "'auth_group_permissions'", "length": "None", "hash_len": "4"}, "return_value": "'auth_group_permissions'"}, {"func_args": {"identifier": "'auth_permission'", "length": "None", "hash_len": "4"}, "return_value": "'auth_permission'"}, {"func_args": {"identifier": "'auth_user'", "length": "None", "hash_len": "4"}, "return_value": "'auth_user'"}, {"func_args": {"identifier": "'auth_user_groups'", "length": "None", "hash_len": "4"}, "return_value": "'auth_user_groups'"}, {"func_args": {"identifier": "'auth_user_user_permissions'", "length": "None", "hash_len": "4"}, "return_value": "'auth_user_user_permissions'"}, {"func_args": {"identifier": "'auth_group'", "length": "None", "hash_len": "4"}, "return_value": "'auth_group'"}, {"func_args": {"identifier": "'auth_group_permissions'", "length": "None", "hash_len": "4"}, "return_value": "'auth_group_permissions'"}, {"func_args": {"identifier": "'auth_permission'", "length": "None", "hash_len": "4"}, "return_value": "'auth_permission'"}, {"func_args": {"identifier": "'auth_permission'", "length": "None", "hash_len": "4"}, "return_value": "'auth_permission'"}, {"func_args": {"identifier": "'auth_permission'", "length": "None", "hash_len": "4"}, "return_value": "'auth_permission'"}, {"func_args": {"identifier": "'auth_permission'", "length": "None", "hash_len": "4"}, "return_value": "'auth_permission'"}, {"func_args": {"identifier": "'auth_group'", "length": "None", "hash_len": "4"}, "return_value": "'auth_group'"}, {"func_args": {"identifier": "'auth_group_permissions'", "length": "None", "hash_len": "4"}, "return_value": "'auth_group_permissions'"}, {"func_args": {"identifier": "'auth_user'", "length": "None", "hash_len": "4"}, "return_value": "'auth_user'"}, {"func_args": {"identifier": "'auth_user_groups'", "length": "None", "hash_len": "4"}, "return_value": "'auth_user_groups'"}, {"func_args": {"identifier": "'auth_user_user_permissions'", "length": "None", "hash_len": "4"}, "return_value": "'auth_user_user_permissions'"}, {"func_args": {"identifier": "'auth_permission'", "length": "None", "hash_len": "4"}, "return_value": "'auth_permission'"}, {"func_args": {"identifier": "'auth_user'", "length": "None", "hash_len": "4"}, "return_value": "'auth_user'"}, {"func_args": {"identifier": "'auth_user_groups'", "length": "None", "hash_len": "4"}, "return_value": "'auth_user_groups'"}, {"func_args": {"identifier": "'auth_user_user_permissions'", "length": "None", "hash_len": "4"}, "return_value": "'auth_user_user_permissions'"}, {"func_args": {"identifier": "'auth_group'", "length": "None", "hash_len": "4"}, "return_value": "'auth_group'"}, {"func_args": {"identifier": "'auth_group_permissions'", "length": "None", "hash_len": "4"}, "return_value": "'auth_group_permissions'"}, {"func_args": {"identifier": "'auth_permission'", "length": "None", "hash_len": "4"}, "return_value": "'auth_permission'"}, {"func_args": {"identifier": "'auth_user'", "length": "None", "hash_len": "4"}, "return_value": "'auth_user'"}, {"func_args": {"identifier": "'auth_user_groups'", "length": "None", "hash_len": "4"}, "return_value": "'auth_user_groups'"}, {"func_args": {"identifier": "'auth_user_user_permissions'", "length": "None", "hash_len": "4"}, "return_value": "'auth_user_user_permissions'"}, {"func_args": {"identifier": "'auth_group'", "length": "None", "hash_len": "4"}, "return_value": "'auth_group'"}, {"func_args": {"identifier": "'auth_group_permissions'", "length": "None", "hash_len": "4"}, "return_value": "'auth_group_permissions'"}, {"func_args": {"identifier": "'auth_permission'", "length": "None", "hash_len": "4"}, "return_value": "'auth_permission'"}, {"func_args": {"identifier": "'auth_user'", "length": "None", "hash_len": "4"}, "return_value": "'auth_user'"}, {"func_args": {"identifier": "'auth_user_groups'", "length": "None", "hash_len": "4"}, "return_value": "'auth_user_groups'"}, {"func_args": {"identifier": "'auth_user_user_permissions'", "length": "None", "hash_len": "4"}, "return_value": "'auth_user_user_permissions'"}, {"func_args": {"identifier": "'auth_group'", "length": "None", "hash_len": "4"}, "return_value": "'auth_group'"}, {"func_args": {"identifier": "'auth_group_permissions'", "length": "None", "hash_len": "4"}, "return_value": "'auth_group_permissions'"}, {"func_args": {"identifier": "'auth_permission'", "length": "None", "hash_len": "4"}, "return_value": "'auth_permission'"}, {"func_args": {"identifier": "'auth_user'", "length": "None", "hash_len": "4"}, "return_value": "'auth_user'"}, {"func_args": {"identifier": "'auth_user_groups'", "length": "None", "hash_len": "4"}, "return_value": "'auth_user_groups'"}, {"func_args": {"identifier": "'auth_user_user_permissions'", "length": "None", "hash_len": "4"}, "return_value": "'auth_user_user_permissions'"}, {"func_args": {"identifier": "'auth_group'", "length": "None", "hash_len": "4"}, "return_value": "'auth_group'"}, {"func_args": {"identifier": "'auth_group_permissions'", "length": "None", "hash_len": "4"}, "return_value": "'auth_group_permissions'"}, {"func_args": {"identifier": "'auth_permission'", "length": "None", "hash_len": "4"}, "return_value": "'auth_permission'"}, {"func_args": {"identifier": "'auth_user'", "length": "None", "hash_len": "4"}, "return_value": "'auth_user'"}, {"func_args": {"identifier": "'auth_user_groups'", "length": "None", "hash_len": "4"}, "return_value": "'auth_user_groups'"}, {"func_args": {"identifier": "'auth_user_user_permissions'", "length": "None", "hash_len": "4"}, "return_value": "'auth_user_user_permissions'"}, {"func_args": {"identifier": "'auth_group'", "length": "None", "hash_len": "4"}, "return_value": "'auth_group'"}, {"func_args": {"identifier": "'auth_group_permissions'", "length": "None", "hash_len": "4"}, "return_value": "'auth_group_permissions'"}, {"func_args": {"identifier": "'auth_permission'", "length": "None", "hash_len": "4"}, "return_value": "'auth_permission'"}, {"func_args": {"identifier": "'auth_user'", "length": "None", "hash_len": "4"}, "return_value": "'auth_user'"}, {"func_args": {"identifier": "'auth_user_groups'", "length": "None", "hash_len": "4"}, "return_value": "'auth_user_groups'"}, {"func_args": {"identifier": "'auth_user_user_permissions'", "length": "None", "hash_len": "4"}, "return_value": "'auth_user_user_permissions'"}, {"func_args": {"identifier": "'auth_group'", "length": "None", "hash_len": "4"}, "return_value": "'auth_group'"}, {"func_args": {"identifier": "'auth_group_permissions'", "length": "None", "hash_len": "4"}, "return_value": "'auth_group_permissions'"}, {"func_args": {"identifier": "'auth_permission'", "length": "None", "hash_len": "4"}, "return_value": "'auth_permission'"}, {"func_args": {"identifier": "'auth_user'", "length": "None", "hash_len": "4"}, "return_value": "'auth_user'"}, {"func_args": {"identifier": "'auth_user_groups'", "length": "None", "hash_len": "4"}, "return_value": "'auth_user_groups'"}, {"func_args": {"identifier": "'auth_user_user_permissions'", "length": "None", "hash_len": "4"}, "return_value": "'auth_user_user_permissions'"}, {"func_args": {"identifier": "'auth_group'", "length": "None", "hash_len": "4"}, "return_value": "'auth_group'"}, {"func_args": {"identifier": "'auth_group_permissions'", "length": "None", "hash_len": "4"}, "return_value": "'auth_group_permissions'"}, {"func_args": {"identifier": "'auth_permission'", "length": "None", "hash_len": "4"}, "return_value": "'auth_permission'"}, {"func_args": {"identifier": "'auth_user'", "length": "None", "hash_len": "4"}, "return_value": "'auth_user'"}, {"func_args": {"identifier": "'auth_user_groups'", "length": "None", "hash_len": "4"}, "return_value": "'auth_user_groups'"}, {"func_args": {"identifier": "'auth_user_user_permissions'", "length": "None", "hash_len": "4"}, "return_value": "'auth_user_user_permissions'"}, {"func_args": {"identifier": "'auth_group'", "length": "None", "hash_len": "4"}, "return_value": "'auth_group'"}, {"func_args": {"identifier": "'auth_group_permissions'", "length": "None", "hash_len": "4"}, "return_value": "'auth_group_permissions'"}, {"func_args": {"identifier": "'auth_permission'", "length": "None", "hash_len": "4"}, "return_value": "'auth_permission'"}, {"func_args": {"identifier": "'auth_permission'", "length": "None", "hash_len": "4"}, "return_value": "'auth_permission'"}, {"func_args": {"identifier": "'auth_group'", "length": "None", "hash_len": "4"}, "return_value": "'auth_group'"}, {"func_args": {"identifier": "'auth_group_permissions'", "length": "None", "hash_len": "4"}, "return_value": "'auth_group_permissions'"}, {"func_args": {"identifier": "'auth_user'", "length": "None", "hash_len": "4"}, "return_value": "'auth_user'"}, {"func_args": {"identifier": "'auth_user_groups'", "length": "None", "hash_len": "4"}, "return_value": "'auth_user_groups'"}, {"func_args": {"identifier": "'auth_user_user_permissions'", "length": "None", "hash_len": "4"}, "return_value": "'auth_user_user_permissions'"}, {"func_args": {"identifier": "'auth_user'", "length": "None", "hash_len": "4"}, "return_value": "'auth_user'"}, {"func_args": {"identifier": "'auth_user_groups'", "length": "None", "hash_len": "4"}, "return_value": "'auth_user_groups'"}, {"func_args": {"identifier": "'auth_user_user_permissions'", "length": "None", "hash_len": "4"}, "return_value": "'auth_user_user_permissions'"}, {"func_args": {"identifier": "'auth_group'", "length": "None", "hash_len": "4"}, "return_value": "'auth_group'"}, {"func_args": {"identifier": "'auth_group_permissions'", "length": "None", "hash_len": "4"}, "return_value": "'auth_group_permissions'"}, {"func_args": {"identifier": "'auth_permission'", "length": "None", "hash_len": "4"}, "return_value": "'auth_permission'"}, {"func_args": {"identifier": "'auth_permission'", "length": "None", "hash_len": "4"}, "return_value": "'auth_permission'"}, {"func_args": {"identifier": "'auth_group'", "length": "None", "hash_len": "4"}, "return_value": "'auth_group'"}, {"func_args": {"identifier": "'auth_group_permissions'", "length": "None", "hash_len": "4"}, "return_value": "'auth_group_permissions'"}, {"func_args": {"identifier": "'auth_user'", "length": "None", "hash_len": "4"}, "return_value": "'auth_user'"}, {"func_args": {"identifier": "'auth_user_groups'", "length": "None", "hash_len": "4"}, "return_value": "'auth_user_groups'"}, {"func_args": {"identifier": "'auth_user_user_permissions'", "length": "None", "hash_len": "4"}, "return_value": "'auth_user_user_permissions'"}], "text": "def truncate_name(identifier, length=None, hash_len=4):\n    \"\"\"\n    Shorten an SQL identifier to a repeatable mangled version with the given\n    length.\n\n    If a quote stripped name contains a namespace, e.g. USERNAME\".\"TABLE,\n    truncate the table portion only.\n    \"\"\"\n    namespace, name = split_identifier(identifier)\n\n    if length is None or len(name) <= length:\n        return identifier\n\n    digest = names_digest(name, length=hash_len)\n    return '%s%s%s' % ('%s\".\"' % namespace if namespace else '', name[:length - hash_len], digest)"}, "strip_quotes": {"line": 255, "args": [{"func_args": {"table_name": "'auth_group'"}, "return_value": "'auth_group'"}, {"func_args": {"table_name": "'auth_group'"}, "return_value": "'auth_group'"}, {"func_args": {"table_name": "'auth_user'"}, "return_value": "'auth_user'"}, {"func_args": {"table_name": "'auth_user'"}, "return_value": "'auth_user'"}, {"func_args": {"table_name": "'auth_user'"}, "return_value": "'auth_user'"}, {"func_args": {"table_name": "'auth_user'"}, "return_value": "'auth_user'"}, {"func_args": {"table_name": "'auth_group'"}, "return_value": "'auth_group'"}, {"func_args": {"table_name": "'auth_user'"}, "return_value": "'auth_user'"}, {"func_args": {"table_name": "'auth_user'"}, "return_value": "'auth_user'"}, {"func_args": {"table_name": "'auth_group'"}, "return_value": "'auth_group'"}, {"func_args": {"table_name": "'django_admin_log'"}, "return_value": "'django_admin_log'"}, {"func_args": {"table_name": "'auth_user'"}, "return_value": "'auth_user'"}, {"func_args": {"table_name": "'auth_user'"}, "return_value": "'auth_user'"}, {"func_args": {"table_name": "'auth_group'"}, "return_value": "'auth_group'"}, {"func_args": {"table_name": "'django_admin_log'"}, "return_value": "'django_admin_log'"}, {"func_args": {"table_name": "'django_content_type'"}, "return_value": "'django_content_type'"}, {"func_args": {"table_name": "'auth_group'"}, "return_value": "'auth_group'"}, {"func_args": {"table_name": "'auth_user'"}, "return_value": "'auth_user'"}, {"func_args": {"table_name": "'auth_user'"}, "return_value": "'auth_user'"}, {"func_args": {"table_name": "'django_content_type'"}, "return_value": "'django_content_type'"}, {"func_args": {"table_name": "'auth_user'"}, "return_value": "'auth_user'"}, {"func_args": {"table_name": "'auth_user'"}, "return_value": "'auth_user'"}, {"func_args": {"table_name": "'auth_group'"}, "return_value": "'auth_group'"}, {"func_args": {"table_name": "'auth_permission'"}, "return_value": "'auth_permission'"}, {"func_args": {"table_name": "'auth_user'"}, "return_value": "'auth_user'"}, {"func_args": {"table_name": "'auth_user'"}, "return_value": "'auth_user'"}, {"func_args": {"table_name": "'auth_group'"}, "return_value": "'auth_group'"}, {"func_args": {"table_name": "'auth_user'"}, "return_value": "'auth_user'"}, {"func_args": {"table_name": "'auth_user'"}, "return_value": "'auth_user'"}, {"func_args": {"table_name": "'auth_user'"}, "return_value": "'auth_user'"}, {"func_args": {"table_name": "'auth_group'"}, "return_value": "'auth_group'"}, {"func_args": {"table_name": "'auth_user'"}, "return_value": "'auth_user'"}, {"func_args": {"table_name": "'auth_user'"}, "return_value": "'auth_user'"}, {"func_args": {"table_name": "'auth_group'"}, "return_value": "'auth_group'"}, {"func_args": {"table_name": "'auth_user'"}, "return_value": "'auth_user'"}, {"func_args": {"table_name": "'auth_user'"}, "return_value": "'auth_user'"}, {"func_args": {"table_name": "'auth_user'"}, "return_value": "'auth_user'"}, {"func_args": {"table_name": "'auth_group'"}, "return_value": "'auth_group'"}, {"func_args": {"table_name": "'auth_user'"}, "return_value": "'auth_user'"}, {"func_args": {"table_name": "'auth_user'"}, "return_value": "'auth_user'"}, {"func_args": {"table_name": "'auth_group'"}, "return_value": "'auth_group'"}, {"func_args": {"table_name": "'auth_user'"}, "return_value": "'auth_user'"}, {"func_args": {"table_name": "'auth_user'"}, "return_value": "'auth_user'"}, {"func_args": {"table_name": "'auth_user'"}, "return_value": "'auth_user'"}, {"func_args": {"table_name": "'auth_group'"}, "return_value": "'auth_group'"}, {"func_args": {"table_name": "'auth_user'"}, "return_value": "'auth_user'"}, {"func_args": {"table_name": "'auth_user'"}, "return_value": "'auth_user'"}, {"func_args": {"table_name": "'auth_user'"}, "return_value": "'auth_user'"}, {"func_args": {"table_name": "'auth_group'"}, "return_value": "'auth_group'"}, {"func_args": {"table_name": "'auth_group'"}, "return_value": "'auth_group'"}, {"func_args": {"table_name": "'auth_group'"}, "return_value": "'auth_group'"}, {"func_args": {"table_name": "'auth_user'"}, "return_value": "'auth_user'"}, {"func_args": {"table_name": "'auth_user'"}, "return_value": "'auth_user'"}, {"func_args": {"table_name": "'auth_user'"}, "return_value": "'auth_user'"}, {"func_args": {"table_name": "'auth_user'"}, "return_value": "'auth_user'"}, {"func_args": {"table_name": "'auth_group'"}, "return_value": "'auth_group'"}, {"func_args": {"table_name": "'auth_user'"}, "return_value": "'auth_user'"}, {"func_args": {"table_name": "'auth_group'"}, "return_value": "'auth_group'"}, {"func_args": {"table_name": "'auth_user'"}, "return_value": "'auth_user'"}, {"func_args": {"table_name": "'auth_user'"}, "return_value": "'auth_user'"}], "text": "def strip_quotes(table_name):\n    \"\"\"\n    Strip quotes off of quoted table names to make them safe for use in index\n    names, sequence names, etc. For example '\"USER\".\"TABLE\"' (an Oracle naming\n    scheme) becomes 'USER\".\"TABLE'.\n    \"\"\"\n    has_quotes = table_name.startswith('\"') and table_name.endswith('\"')\n    return table_name[1:-1] if has_quotes else table_name"}, "normalize_together": {"line": 37, "args": [{"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "{('app_label', 'model')}"}, "return_value": "{('app_label', 'model')}"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "{('content_type', 'codename')}"}, "return_value": "{('content_type', 'codename')}"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "{('app_label', 'model')}"}, "return_value": "{('app_label', 'model')}"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "('group', 'permission')"}, "return_value": "(('group', 'permission'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "{('content_type', 'codename')}"}, "return_value": "{('content_type', 'codename')}"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "{('app_label', 'model')}"}, "return_value": "{('app_label', 'model')}"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "('group', 'permission')"}, "return_value": "(('group', 'permission'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "{('content_type', 'codename')}"}, "return_value": "{('content_type', 'codename')}"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "{('app_label', 'model')}"}, "return_value": "{('app_label', 'model')}"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "('user', 'group')"}, "return_value": "(('user', 'group'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "('user', 'permission')"}, "return_value": "(('user', 'permission'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "('user', 'group')"}, "return_value": "(('user', 'group'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "('user', 'permission')"}, "return_value": "(('user', 'permission'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "('group', 'permission')"}, "return_value": "(('group', 'permission'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "{('content_type', 'codename')}"}, "return_value": "{('content_type', 'codename')}"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "{('app_label', 'model')}"}, "return_value": "{('app_label', 'model')}"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "('user', 'group')"}, "return_value": "(('user', 'group'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "('user', 'permission')"}, "return_value": "(('user', 'permission'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "('group', 'permission')"}, "return_value": "(('group', 'permission'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "{('content_type', 'codename')}"}, "return_value": "{('content_type', 'codename')}"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "{('app_label', 'model')}"}, "return_value": "{('app_label', 'model')}"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "('user', 'group')"}, "return_value": "(('user', 'group'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "('user', 'permission')"}, "return_value": "(('user', 'permission'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "('group', 'permission')"}, "return_value": "(('group', 'permission'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "{('content_type', 'codename')}"}, "return_value": "{('content_type', 'codename')}"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "{('app_label', 'model')}"}, "return_value": "{('app_label', 'model')}"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "{('content_type', 'codename')}"}, "return_value": "{('content_type', 'codename')}"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "{('app_label', 'model')}"}, "return_value": "{('app_label', 'model')}"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "{('content_type', 'codename')}"}, "return_value": "{('content_type', 'codename')}"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "{('app_label', 'model')}"}, "return_value": "{('app_label', 'model')}"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[['app_label', 'model']]"}, "return_value": "(('app_label', 'model'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[['app_label', 'model']]"}, "return_value": "(('app_label', 'model'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "{('app_label', 'model')}"}, "return_value": "{('app_label', 'model')}"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "{('content_type', 'codename')}"}, "return_value": "{('content_type', 'codename')}"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "('group', 'permission')"}, "return_value": "(('group', 'permission'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "('user', 'group')"}, "return_value": "(('user', 'group'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "('user', 'permission')"}, "return_value": "(('user', 'permission'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "{('content_type', 'codename')}"}, "return_value": "{('content_type', 'codename')}"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "{('app_label', 'model')}"}, "return_value": "{('app_label', 'model')}"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[['app_label', 'model']]"}, "return_value": "(('app_label', 'model'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[['app_label', 'model']]"}, "return_value": "(('app_label', 'model'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "('user', 'group')"}, "return_value": "(('user', 'group'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "('user', 'permission')"}, "return_value": "(('user', 'permission'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "('group', 'permission')"}, "return_value": "(('group', 'permission'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "{('content_type', 'codename')}"}, "return_value": "{('content_type', 'codename')}"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "{('app_label', 'model')}"}, "return_value": "{('app_label', 'model')}"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[['content_type', 'codename']]"}, "return_value": "(('content_type', 'codename'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[['content_type', 'codename']]"}, "return_value": "(('content_type', 'codename'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "('user', 'group')"}, "return_value": "(('user', 'group'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "('user', 'permission')"}, "return_value": "(('user', 'permission'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "('group', 'permission')"}, "return_value": "(('group', 'permission'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "{('content_type', 'codename')}"}, "return_value": "{('content_type', 'codename')}"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "{('app_label', 'model')}"}, "return_value": "{('app_label', 'model')}"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "('user', 'group')"}, "return_value": "(('user', 'group'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "('user', 'permission')"}, "return_value": "(('user', 'permission'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "('group', 'permission')"}, "return_value": "(('group', 'permission'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "{('content_type', 'codename')}"}, "return_value": "{('content_type', 'codename')}"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "{('app_label', 'model')}"}, "return_value": "{('app_label', 'model')}"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "('user', 'group')"}, "return_value": "(('user', 'group'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "('user', 'permission')"}, "return_value": "(('user', 'permission'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "('group', 'permission')"}, "return_value": "(('group', 'permission'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "{('content_type', 'codename')}"}, "return_value": "{('content_type', 'codename')}"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "{('app_label', 'model')}"}, "return_value": "{('app_label', 'model')}"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "('user', 'group')"}, "return_value": "(('user', 'group'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "('user', 'permission')"}, "return_value": "(('user', 'permission'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "('group', 'permission')"}, "return_value": "(('group', 'permission'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "{('content_type', 'codename')}"}, "return_value": "{('content_type', 'codename')}"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "{('app_label', 'model')}"}, "return_value": "{('app_label', 'model')}"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "('user', 'group')"}, "return_value": "(('user', 'group'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "('user', 'permission')"}, "return_value": "(('user', 'permission'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "('group', 'permission')"}, "return_value": "(('group', 'permission'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "{('content_type', 'codename')}"}, "return_value": "{('content_type', 'codename')}"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "{('app_label', 'model')}"}, "return_value": "{('app_label', 'model')}"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "('user', 'group')"}, "return_value": "(('user', 'group'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "('user', 'permission')"}, "return_value": "(('user', 'permission'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "('group', 'permission')"}, "return_value": "(('group', 'permission'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "{('content_type', 'codename')}"}, "return_value": "{('content_type', 'codename')}"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "{('app_label', 'model')}"}, "return_value": "{('app_label', 'model')}"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "('user', 'group')"}, "return_value": "(('user', 'group'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "('user', 'permission')"}, "return_value": "(('user', 'permission'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "('group', 'permission')"}, "return_value": "(('group', 'permission'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "{('content_type', 'codename')}"}, "return_value": "{('content_type', 'codename')}"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "{('app_label', 'model')}"}, "return_value": "{('app_label', 'model')}"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "{('app_label', 'model')}"}, "return_value": "{('app_label', 'model')}"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "{('content_type', 'codename')}"}, "return_value": "{('content_type', 'codename')}"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "('group', 'permission')"}, "return_value": "(('group', 'permission'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "('user', 'group')"}, "return_value": "(('user', 'group'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "('user', 'permission')"}, "return_value": "(('user', 'permission'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "('user', 'group')"}, "return_value": "(('user', 'group'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "('user', 'permission')"}, "return_value": "(('user', 'permission'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "('group', 'permission')"}, "return_value": "(('group', 'permission'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "{('content_type', 'codename')}"}, "return_value": "{('content_type', 'codename')}"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "{('app_label', 'model')}"}, "return_value": "{('app_label', 'model')}"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "{('app_label', 'model')}"}, "return_value": "{('app_label', 'model')}"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "{('content_type', 'codename')}"}, "return_value": "{('content_type', 'codename')}"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "('group', 'permission')"}, "return_value": "(('group', 'permission'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "('user', 'group')"}, "return_value": "(('user', 'group'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "('user', 'permission')"}, "return_value": "(('user', 'permission'),)"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}, {"func_args": {"option_together": "[]"}, "return_value": "()"}], "text": "def normalize_together(option_together):\n    \"\"\"\n    option_together can be either a tuple of tuples, or a single\n    tuple of two strings. Normalize it to a tuple of tuples, so that\n    calling code can uniformly expect that.\n    \"\"\"\n    try:\n        if not option_together:\n            return ()\n        if not isinstance(option_together, (tuple, list)):\n            raise TypeError\n        first_element = option_together[0]\n        if not isinstance(first_element, (tuple, list)):\n            option_together = (option_together,)\n        # Normalize everything to tuples\n        return tuple(tuple(ot) for ot in option_together)\n    except TypeError:\n        # If the value of option_together isn't valid, return it\n        # verbatim; this will be picked up by the check framework later.\n        return option_together"}, "camel_case_to_spaces": {"line": 400, "args": [{"func_args": {"value": "'Migration'"}, "return_value": "'migration'"}, {"func_args": {"value": "'ContentType'"}, "return_value": "'content type'"}, {"func_args": {"value": "'ContentType'"}, "return_value": "'content type'"}, {"func_args": {"value": "'Permission'"}, "return_value": "'permission'"}, {"func_args": {"value": "'ContentType'"}, "return_value": "'content type'"}, {"func_args": {"value": "'Group'"}, "return_value": "'group'"}, {"func_args": {"value": "'Group_permissions'"}, "return_value": "'group_permissions'"}, {"func_args": {"value": "'Permission'"}, "return_value": "'permission'"}, {"func_args": {"value": "'ContentType'"}, "return_value": "'content type'"}, {"func_args": {"value": "'Group'"}, "return_value": "'group'"}, {"func_args": {"value": "'Group_permissions'"}, "return_value": "'group_permissions'"}, {"func_args": {"value": "'Permission'"}, "return_value": "'permission'"}, {"func_args": {"value": "'ContentType'"}, "return_value": "'content type'"}, {"func_args": {"value": "'User'"}, "return_value": "'user'"}, {"func_args": {"value": "'User_groups'"}, "return_value": "'user_groups'"}, {"func_args": {"value": "'User_user_permissions'"}, "return_value": "'user_user_permissions'"}, {"func_args": {"value": "'User'"}, "return_value": "'user'"}, {"func_args": {"value": "'User_groups'"}, "return_value": "'user_groups'"}, {"func_args": {"value": "'User_user_permissions'"}, "return_value": "'user_user_permissions'"}, {"func_args": {"value": "'Group'"}, "return_value": "'group'"}, {"func_args": {"value": "'Group_permissions'"}, "return_value": "'group_permissions'"}, {"func_args": {"value": "'Permission'"}, "return_value": "'permission'"}, {"func_args": {"value": "'ContentType'"}, "return_value": "'content type'"}, {"func_args": {"value": "'LogEntry'"}, "return_value": "'log entry'"}, {"func_args": {"value": "'User'"}, "return_value": "'user'"}, {"func_args": {"value": "'User_groups'"}, "return_value": "'user_groups'"}, {"func_args": {"value": "'User_user_permissions'"}, "return_value": "'user_user_permissions'"}, {"func_args": {"value": "'Group'"}, "return_value": "'group'"}, {"func_args": {"value": "'Group_permissions'"}, "return_value": "'group_permissions'"}, {"func_args": {"value": "'Permission'"}, "return_value": "'permission'"}, {"func_args": {"value": "'LogEntry'"}, "return_value": "'log entry'"}, {"func_args": {"value": "'ContentType'"}, "return_value": "'content type'"}, {"func_args": {"value": "'LogEntry'"}, "return_value": "'log entry'"}, {"func_args": {"value": "'NewLogEntry'"}, "return_value": "'new log entry'"}, {"func_args": {"value": "'User'"}, "return_value": "'user'"}, {"func_args": {"value": "'User_groups'"}, "return_value": "'user_groups'"}, {"func_args": {"value": "'User_user_permissions'"}, "return_value": "'user_user_permissions'"}, {"func_args": {"value": "'Group'"}, "return_value": "'group'"}, {"func_args": {"value": "'Group_permissions'"}, "return_value": "'group_permissions'"}, {"func_args": {"value": "'Permission'"}, "return_value": "'permission'"}, {"func_args": {"value": "'LogEntry'"}, "return_value": "'log entry'"}, {"func_args": {"value": "'ContentType'"}, "return_value": "'content type'"}, {"func_args": {"value": "'LogEntry'"}, "return_value": "'log entry'"}, {"func_args": {"value": "'NewLogEntry'"}, "return_value": "'new log entry'"}, {"func_args": {"value": "'Permission'"}, "return_value": "'permission'"}, {"func_args": {"value": "'ContentType'"}, "return_value": "'content type'"}, {"func_args": {"value": "'LogEntry'"}, "return_value": "'log entry'"}, {"func_args": {"value": "'Permission'"}, "return_value": "'permission'"}, {"func_args": {"value": "'ContentType'"}, "return_value": "'content type'"}, {"func_args": {"value": "'LogEntry'"}, "return_value": "'log entry'"}, {"func_args": {"value": "'ContentType'"}, "return_value": "'content type'"}, {"func_args": {"value": "'NewContentType'"}, "return_value": "'new content type'"}, {"func_args": {"value": "'ContentType'"}, "return_value": "'content type'"}, {"func_args": {"value": "'Permission'"}, "return_value": "'permission'"}, {"func_args": {"value": "'Group'"}, "return_value": "'group'"}, {"func_args": {"value": "'Group_permissions'"}, "return_value": "'group_permissions'"}, {"func_args": {"value": "'User'"}, "return_value": "'user'"}, {"func_args": {"value": "'User_groups'"}, "return_value": "'user_groups'"}, {"func_args": {"value": "'User_user_permissions'"}, "return_value": "'user_user_permissions'"}, {"func_args": {"value": "'LogEntry'"}, "return_value": "'log entry'"}, {"func_args": {"value": "'Permission'"}, "return_value": "'permission'"}, {"func_args": {"value": "'ContentType'"}, "return_value": "'content type'"}, {"func_args": {"value": "'LogEntry'"}, "return_value": "'log entry'"}, {"func_args": {"value": "'ContentType'"}, "return_value": "'content type'"}, {"func_args": {"value": "'NewContentType'"}, "return_value": "'new content type'"}, {"func_args": {"value": "'User'"}, "return_value": "'user'"}, {"func_args": {"value": "'User_groups'"}, "return_value": "'user_groups'"}, {"func_args": {"value": "'User_user_permissions'"}, "return_value": "'user_user_permissions'"}, {"func_args": {"value": "'Group'"}, "return_value": "'group'"}, {"func_args": {"value": "'Group_permissions'"}, "return_value": "'group_permissions'"}, {"func_args": {"value": "'Permission'"}, "return_value": "'permission'"}, {"func_args": {"value": "'ContentType'"}, "return_value": "'content type'"}, {"func_args": {"value": "'LogEntry'"}, "return_value": "'log entry'"}, {"func_args": {"value": "'Permission'"}, "return_value": "'permission'"}, {"func_args": {"value": "'NewPermission'"}, "return_value": "'new permission'"}, {"func_args": {"value": "'User'"}, "return_value": "'user'"}, {"func_args": {"value": "'User_groups'"}, "return_value": "'user_groups'"}, {"func_args": {"value": "'User_user_permissions'"}, "return_value": "'user_user_permissions'"}, {"func_args": {"value": "'Group'"}, "return_value": "'group'"}, {"func_args": {"value": "'Group_permissions'"}, "return_value": "'group_permissions'"}, {"func_args": {"value": "'Permission'"}, "return_value": "'permission'"}, {"func_args": {"value": "'LogEntry'"}, "return_value": "'log entry'"}, {"func_args": {"value": "'ContentType'"}, "return_value": "'content type'"}, {"func_args": {"value": "'User'"}, "return_value": "'user'"}, {"func_args": {"value": "'NewUser'"}, "return_value": "'new user'"}, {"func_args": {"value": "'User'"}, "return_value": "'user'"}, {"func_args": {"value": "'User_groups'"}, "return_value": "'user_groups'"}, {"func_args": {"value": "'User_user_permissions'"}, "return_value": "'user_user_permissions'"}, {"func_args": {"value": "'Group'"}, "return_value": "'group'"}, {"func_args": {"value": "'Group_permissions'"}, "return_value": "'group_permissions'"}, {"func_args": {"value": "'Permission'"}, "return_value": "'permission'"}, {"func_args": {"value": "'LogEntry'"}, "return_value": "'log entry'"}, {"func_args": {"value": "'ContentType'"}, "return_value": "'content type'"}, {"func_args": {"value": "'User'"}, "return_value": "'user'"}, {"func_args": {"value": "'User_groups'"}, "return_value": "'user_groups'"}, {"func_args": {"value": "'User_user_permissions'"}, "return_value": "'user_user_permissions'"}, {"func_args": {"value": "'Group'"}, "return_value": "'group'"}, {"func_args": {"value": "'Group_permissions'"}, "return_value": "'group_permissions'"}, {"func_args": {"value": "'Permission'"}, "return_value": "'permission'"}, {"func_args": {"value": "'LogEntry'"}, "return_value": "'log entry'"}, {"func_args": {"value": "'ContentType'"}, "return_value": "'content type'"}, {"func_args": {"value": "'User'"}, "return_value": "'user'"}, {"func_args": {"value": "'NewUser'"}, "return_value": "'new user'"}, {"func_args": {"value": "'User'"}, "return_value": "'user'"}, {"func_args": {"value": "'User_groups'"}, "return_value": "'user_groups'"}, {"func_args": {"value": "'User_user_permissions'"}, "return_value": "'user_user_permissions'"}, {"func_args": {"value": "'Group'"}, "return_value": "'group'"}, {"func_args": {"value": "'Group_permissions'"}, "return_value": "'group_permissions'"}, {"func_args": {"value": "'Permission'"}, "return_value": "'permission'"}, {"func_args": {"value": "'LogEntry'"}, "return_value": "'log entry'"}, {"func_args": {"value": "'ContentType'"}, "return_value": "'content type'"}, {"func_args": {"value": "'User'"}, "return_value": "'user'"}, {"func_args": {"value": "'User_groups'"}, "return_value": "'user_groups'"}, {"func_args": {"value": "'User_user_permissions'"}, "return_value": "'user_user_permissions'"}, {"func_args": {"value": "'Group'"}, "return_value": "'group'"}, {"func_args": {"value": "'Group_permissions'"}, "return_value": "'group_permissions'"}, {"func_args": {"value": "'Permission'"}, "return_value": "'permission'"}, {"func_args": {"value": "'LogEntry'"}, "return_value": "'log entry'"}, {"func_args": {"value": "'ContentType'"}, "return_value": "'content type'"}, {"func_args": {"value": "'User'"}, "return_value": "'user'"}, {"func_args": {"value": "'NewUser'"}, "return_value": "'new user'"}, {"func_args": {"value": "'User'"}, "return_value": "'user'"}, {"func_args": {"value": "'User_groups'"}, "return_value": "'user_groups'"}, {"func_args": {"value": "'User_user_permissions'"}, "return_value": "'user_user_permissions'"}, {"func_args": {"value": "'Group'"}, "return_value": "'group'"}, {"func_args": {"value": "'Group_permissions'"}, "return_value": "'group_permissions'"}, {"func_args": {"value": "'Permission'"}, "return_value": "'permission'"}, {"func_args": {"value": "'LogEntry'"}, "return_value": "'log entry'"}, {"func_args": {"value": "'ContentType'"}, "return_value": "'content type'"}, {"func_args": {"value": "'User'"}, "return_value": "'user'"}, {"func_args": {"value": "'NewUser'"}, "return_value": "'new user'"}, {"func_args": {"value": "'User'"}, "return_value": "'user'"}, {"func_args": {"value": "'User_groups'"}, "return_value": "'user_groups'"}, {"func_args": {"value": "'User_user_permissions'"}, "return_value": "'user_user_permissions'"}, {"func_args": {"value": "'Group'"}, "return_value": "'group'"}, {"func_args": {"value": "'Group_permissions'"}, "return_value": "'group_permissions'"}, {"func_args": {"value": "'Permission'"}, "return_value": "'permission'"}, {"func_args": {"value": "'LogEntry'"}, "return_value": "'log entry'"}, {"func_args": {"value": "'ContentType'"}, "return_value": "'content type'"}, {"func_args": {"value": "'Group'"}, "return_value": "'group'"}, {"func_args": {"value": "'NewGroup'"}, "return_value": "'new group'"}, {"func_args": {"value": "'ContentType'"}, "return_value": "'content type'"}, {"func_args": {"value": "'Permission'"}, "return_value": "'permission'"}, {"func_args": {"value": "'Group'"}, "return_value": "'group'"}, {"func_args": {"value": "'Group_permissions'"}, "return_value": "'group_permissions'"}, {"func_args": {"value": "'User'"}, "return_value": "'user'"}, {"func_args": {"value": "'User_groups'"}, "return_value": "'user_groups'"}, {"func_args": {"value": "'User_user_permissions'"}, "return_value": "'user_user_permissions'"}, {"func_args": {"value": "'LogEntry'"}, "return_value": "'log entry'"}, {"func_args": {"value": "'User'"}, "return_value": "'user'"}, {"func_args": {"value": "'User_groups'"}, "return_value": "'user_groups'"}, {"func_args": {"value": "'User_user_permissions'"}, "return_value": "'user_user_permissions'"}, {"func_args": {"value": "'Group'"}, "return_value": "'group'"}, {"func_args": {"value": "'Group_permissions'"}, "return_value": "'group_permissions'"}, {"func_args": {"value": "'Permission'"}, "return_value": "'permission'"}, {"func_args": {"value": "'LogEntry'"}, "return_value": "'log entry'"}, {"func_args": {"value": "'ContentType'"}, "return_value": "'content type'"}, {"func_args": {"value": "'User'"}, "return_value": "'user'"}, {"func_args": {"value": "'NewUser'"}, "return_value": "'new user'"}, {"func_args": {"value": "'Session'"}, "return_value": "'session'"}, {"func_args": {"value": "'ContentType'"}, "return_value": "'content type'"}, {"func_args": {"value": "'Permission'"}, "return_value": "'permission'"}, {"func_args": {"value": "'Group'"}, "return_value": "'group'"}, {"func_args": {"value": "'Group_permissions'"}, "return_value": "'group_permissions'"}, {"func_args": {"value": "'User'"}, "return_value": "'user'"}, {"func_args": {"value": "'User_groups'"}, "return_value": "'user_groups'"}, {"func_args": {"value": "'User_user_permissions'"}, "return_value": "'user_user_permissions'"}, {"func_args": {"value": "'LogEntry'"}, "return_value": "'log entry'"}, {"func_args": {"value": "'Session'"}, "return_value": "'session'"}], "text": "def camel_case_to_spaces(value):\n    \"\"\"\n    Split CamelCase and convert to lowercase. Strip surrounding whitespace.\n    \"\"\"\n    return re_camel_case.sub(r' \\1', value).strip().lower()"}, "smart_split": {"line": 321, "args": [{"func_args": {"text": "'include \"django/forms/errors/list/ul.html\"'"}, "return_value": "'include'"}, {"func_args": {"text": "'include \"django/forms/errors/list/ul.html\"'"}, "return_value": "'\"django/forms/errors/list/ul.html\"'"}, {"func_args": {"text": "'include \"django/forms/errors/list/ul.html\"'"}, "return_value": "None"}, {"func_args": {"text": "'if errors'"}, "return_value": "'if'"}, {"func_args": {"text": "'if errors'"}, "return_value": "'errors'"}, {"func_args": {"text": "'if errors'"}, "return_value": "None"}, {"func_args": {"text": "'for error in errors'"}, "return_value": "'for'"}, {"func_args": {"text": "'for error in errors'"}, "return_value": "'error'"}, {"func_args": {"text": "'for error in errors'"}, "return_value": "'in'"}, {"func_args": {"text": "'for error in errors'"}, "return_value": "'errors'"}, {"func_args": {"text": "'for error in errors'"}, "return_value": "None"}, {"func_args": {"text": "'if errors and not fields'"}, "return_value": "'if'"}, {"func_args": {"text": "'if errors and not fields'"}, "return_value": "'errors'"}, {"func_args": {"text": "'if errors and not fields'"}, "return_value": "'and'"}, {"func_args": {"text": "'if errors and not fields'"}, "return_value": "'not'"}, {"func_args": {"text": "'if errors and not fields'"}, "return_value": "'fields'"}, {"func_args": {"text": "'if errors and not fields'"}, "return_value": "None"}, {"func_args": {"text": "'for field in hidden_fields'"}, "return_value": "'for'"}, {"func_args": {"text": "'for field in hidden_fields'"}, "return_value": "'field'"}, {"func_args": {"text": "'for field in hidden_fields'"}, "return_value": "'in'"}, {"func_args": {"text": "'for field in hidden_fields'"}, "return_value": "'hidden_fields'"}, {"func_args": {"text": "'for field in hidden_fields'"}, "return_value": "None"}, {"func_args": {"text": "'for field, errors in fields'"}, "return_value": "'for'"}, {"func_args": {"text": "'for field, errors in fields'"}, "return_value": "'field,'"}, {"func_args": {"text": "'for field, errors in fields'"}, "return_value": "'errors'"}, {"func_args": {"text": "'for field, errors in fields'"}, "return_value": "'in'"}, {"func_args": {"text": "'for field, errors in fields'"}, "return_value": "'fields'"}, {"func_args": {"text": "'for field, errors in fields'"}, "return_value": "None"}, {"func_args": {"text": "'with classes=field.css_classes'"}, "return_value": "'with'"}, {"func_args": {"text": "'with classes=field.css_classes'"}, "return_value": "'classes=field.css_classes'"}, {"func_args": {"text": "'with classes=field.css_classes'"}, "return_value": "None"}, {"func_args": {"text": "'if classes'"}, "return_value": "'if'"}, {"func_args": {"text": "'if classes'"}, "return_value": "'classes'"}, {"func_args": {"text": "'if classes'"}, "return_value": "None"}, {"func_args": {"text": "'if field.label'"}, "return_value": "'if'"}, {"func_args": {"text": "'if field.label'"}, "return_value": "'field.label'"}, {"func_args": {"text": "'if field.label'"}, "return_value": "None"}, {"func_args": {"text": "'if field.help_text'"}, "return_value": "'if'"}, {"func_args": {"text": "'if field.help_text'"}, "return_value": "'field.help_text'"}, {"func_args": {"text": "'if field.help_text'"}, "return_value": "None"}, {"func_args": {"text": "'if forloop.last'"}, "return_value": "'if'"}, {"func_args": {"text": "'if forloop.last'"}, "return_value": "'forloop.last'"}, {"func_args": {"text": "'if forloop.last'"}, "return_value": "None"}, {"func_args": {"text": "'for field in hidden_fields'"}, "return_value": "'for'"}, {"func_args": {"text": "'for field in hidden_fields'"}, "return_value": "'field'"}, {"func_args": {"text": "'for field in hidden_fields'"}, "return_value": "'in'"}, {"func_args": {"text": "'for field in hidden_fields'"}, "return_value": "'hidden_fields'"}, {"func_args": {"text": "'for field in hidden_fields'"}, "return_value": "None"}, {"func_args": {"text": "'if not fields and not errors'"}, "return_value": "'if'"}, {"func_args": {"text": "'if not fields and not errors'"}, "return_value": "'not'"}, {"func_args": {"text": "'if not fields and not errors'"}, "return_value": "'fields'"}, {"func_args": {"text": "'if not fields and not errors'"}, "return_value": "'and'"}, {"func_args": {"text": "'if not fields and not errors'"}, "return_value": "'not'"}, {"func_args": {"text": "'if not fields and not errors'"}, "return_value": "'errors'"}, {"func_args": {"text": "'if not fields and not errors'"}, "return_value": "None"}, {"func_args": {"text": "'for field in hidden_fields'"}, "return_value": "'for'"}, {"func_args": {"text": "'for field in hidden_fields'"}, "return_value": "'field'"}, {"func_args": {"text": "'for field in hidden_fields'"}, "return_value": "'in'"}, {"func_args": {"text": "'for field in hidden_fields'"}, "return_value": "'hidden_fields'"}, {"func_args": {"text": "'for field in hidden_fields'"}, "return_value": "None"}, {"func_args": {"text": "'if use_tag'"}, "return_value": "'if'"}, {"func_args": {"text": "'if use_tag'"}, "return_value": "'use_tag'"}, {"func_args": {"text": "'if use_tag'"}, "return_value": "None"}, {"func_args": {"text": "\"include 'django/forms/attrs.html'\""}, "return_value": "'include'"}, {"func_args": {"text": "\"include 'django/forms/attrs.html'\""}, "return_value": "\"'django/forms/attrs.html'\""}, {"func_args": {"text": "\"include 'django/forms/attrs.html'\""}, "return_value": "None"}, {"func_args": {"text": "'for name, value in attrs.items'"}, "return_value": "'for'"}, {"func_args": {"text": "'for name, value in attrs.items'"}, "return_value": "'name,'"}, {"func_args": {"text": "'for name, value in attrs.items'"}, "return_value": "'value'"}, {"func_args": {"text": "'for name, value in attrs.items'"}, "return_value": "'in'"}, {"func_args": {"text": "'for name, value in attrs.items'"}, "return_value": "'attrs.items'"}, {"func_args": {"text": "'for name, value in attrs.items'"}, "return_value": "None"}, {"func_args": {"text": "'if value is not False'"}, "return_value": "'if'"}, {"func_args": {"text": "'if value is not False'"}, "return_value": "'value'"}, {"func_args": {"text": "'if value is not False'"}, "return_value": "'is'"}, {"func_args": {"text": "'if value is not False'"}, "return_value": "'not'"}, {"func_args": {"text": "'if value is not False'"}, "return_value": "'False'"}, {"func_args": {"text": "'if value is not False'"}, "return_value": "None"}, {"func_args": {"text": "'if value is not True'"}, "return_value": "'if'"}, {"func_args": {"text": "'if value is not True'"}, "return_value": "'value'"}, {"func_args": {"text": "'if value is not True'"}, "return_value": "'is'"}, {"func_args": {"text": "'if value is not True'"}, "return_value": "'not'"}, {"func_args": {"text": "'if value is not True'"}, "return_value": "'True'"}, {"func_args": {"text": "'if value is not True'"}, "return_value": "None"}, {"func_args": {"text": "'if widget.is_initial'"}, "return_value": "'if'"}, {"func_args": {"text": "'if widget.is_initial'"}, "return_value": "'widget.is_initial'"}, {"func_args": {"text": "'if widget.is_initial'"}, "return_value": "None"}, {"func_args": {"text": "'if not widget.required'"}, "return_value": "'if'"}, {"func_args": {"text": "'if not widget.required'"}, "return_value": "'not'"}, {"func_args": {"text": "'if not widget.required'"}, "return_value": "'widget.required'"}, {"func_args": {"text": "'if not widget.required'"}, "return_value": "None"}, {"func_args": {"text": "'if widget.attrs.disabled'"}, "return_value": "'if'"}, {"func_args": {"text": "'if widget.attrs.disabled'"}, "return_value": "'widget.attrs.disabled'"}, {"func_args": {"text": "'if widget.attrs.disabled'"}, "return_value": "None"}, {"func_args": {"text": "'include \"django/forms/widgets/attrs.html\"'"}, "return_value": "'include'"}, {"func_args": {"text": "'include \"django/forms/widgets/attrs.html\"'"}, "return_value": "'\"django/forms/widgets/attrs.html\"'"}, {"func_args": {"text": "'include \"django/forms/widgets/attrs.html\"'"}, "return_value": "None"}, {"func_args": {"text": "'for name, value in widget.attrs.items'"}, "return_value": "'for'"}, {"func_args": {"text": "'for name, value in widget.attrs.items'"}, "return_value": "'name,'"}, {"func_args": {"text": "'for name, value in widget.attrs.items'"}, "return_value": "'value'"}, {"func_args": {"text": "'for name, value in widget.attrs.items'"}, "return_value": "'in'"}, {"func_args": {"text": "'for name, value in widget.attrs.items'"}, "return_value": "'widget.attrs.items'"}, {"func_args": {"text": "'for name, value in widget.attrs.items'"}, "return_value": "None"}, {"func_args": {"text": "'if value is not False'"}, "return_value": "'if'"}, {"func_args": {"text": "'if value is not False'"}, "return_value": "'value'"}, {"func_args": {"text": "'if value is not False'"}, "return_value": "'is'"}, {"func_args": {"text": "'if value is not False'"}, "return_value": "'not'"}, {"func_args": {"text": "'if value is not False'"}, "return_value": "'False'"}, {"func_args": {"text": "'if value is not False'"}, "return_value": "None"}, {"func_args": {"text": "'if value is not True'"}, "return_value": "'if'"}, {"func_args": {"text": "'if value is not True'"}, "return_value": "'value'"}, {"func_args": {"text": "'if value is not True'"}, "return_value": "'is'"}, {"func_args": {"text": "'if value is not True'"}, "return_value": "'not'"}, {"func_args": {"text": "'if value is not True'"}, "return_value": "'True'"}, {"func_args": {"text": "'if value is not True'"}, "return_value": "None"}], "text": "def smart_split(text):\n    r\"\"\"\n    Generator that splits a string by spaces, leaving quoted phrases together.\n    Supports both single and double quotes, and supports escaping quotes with\n    backslashes. In the output, strings will keep their initial and trailing\n    quote marks and escaped quotes will remain escaped (the results can then\n    be further processed with unescape_string_literal()).\n\n    >>> list(smart_split(r'This is \"a person\\'s\" test.'))\n    ['This', 'is', '\"a person\\\\\\'s\"', 'test.']\n    >>> list(smart_split(r\"Another 'person\\'s' test.\"))\n    ['Another', \"'person\\\\'s'\", 'test.']\n    >>> list(smart_split(r'A \"\\\"funky\\\" style\" test.'))\n    ['A', '\"\\\\\"funky\\\\\" style\"', 'test.']\n    \"\"\"\n    for bit in smart_split_re.finditer(str(text)):\n        yield bit[0]"}, "_get_app_label_and_model_name": {"line": 23, "args": [{"func_args": {"model": "'contenttypes.ContentType'", "app_label": "'auth'"}, "return_value": "('contenttypes', 'ContentType')"}, {"func_args": {"model": "'auth.Permission'", "app_label": "'auth'"}, "return_value": "('auth', 'Permission')"}, {"func_args": {"model": "'auth.Group'", "app_label": "'auth'"}, "return_value": "('auth', 'Group')"}, {"func_args": {"model": "'auth.Permission'", "app_label": "'auth'"}, "return_value": "('auth', 'Permission')"}, {"func_args": {"model": "'contenttypes.ContentType'", "app_label": "'admin'"}, "return_value": "('contenttypes', 'ContentType')"}, {"func_args": {"model": "'auth.User'", "app_label": "'admin'"}, "return_value": "('auth', 'User')"}, {"func_args": {"model": "'contenttypes.ContentType'", "app_label": "'admin'"}, "return_value": "('contenttypes', 'ContentType')"}, {"func_args": {"model": "'auth.User'", "app_label": "'admin'"}, "return_value": "('auth', 'User')"}, {"func_args": {"model": "'contenttypes.ContentType'", "app_label": "'admin'"}, "return_value": "('contenttypes', 'ContentType')"}, {"func_args": {"model": "'auth.User'", "app_label": "'admin'"}, "return_value": "('auth', 'User')"}, {"func_args": {"model": "'contenttypes.ContentType'", "app_label": "'auth'"}, "return_value": "('contenttypes', 'ContentType')"}, {"func_args": {"model": "'auth.Group'", "app_label": "'auth'"}, "return_value": "('auth', 'Group')"}, {"func_args": {"model": "'auth.Permission'", "app_label": "'auth'"}, "return_value": "('auth', 'Permission')"}, {"func_args": {"model": "'auth.Group'", "app_label": "'auth'"}, "return_value": "('auth', 'Group')"}, {"func_args": {"model": "'auth.Permission'", "app_label": "'auth'"}, "return_value": "('auth', 'Permission')"}, {"func_args": {"model": "'auth.Group'", "app_label": "'auth'"}, "return_value": "('auth', 'Group')"}, {"func_args": {"model": "'auth.Permission'", "app_label": "'auth'"}, "return_value": "('auth', 'Permission')"}, {"func_args": {"model": "'auth.Group'", "app_label": "'auth'"}, "return_value": "('auth', 'Group')"}, {"func_args": {"model": "'auth.Permission'", "app_label": "'auth'"}, "return_value": "('auth', 'Permission')"}, {"func_args": {"model": "'auth.Group'", "app_label": "'auth'"}, "return_value": "('auth', 'Group')"}, {"func_args": {"model": "'auth.Permission'", "app_label": "'auth'"}, "return_value": "('auth', 'Permission')"}, {"func_args": {"model": "'auth.Group'", "app_label": "'auth'"}, "return_value": "('auth', 'Group')"}, {"func_args": {"model": "'auth.Permission'", "app_label": "'auth'"}, "return_value": "('auth', 'Permission')"}, {"func_args": {"model": "'auth.Permission'", "app_label": "'auth'"}, "return_value": "('auth', 'Permission')"}, {"func_args": {"model": "'auth.Group'", "app_label": "'auth'"}, "return_value": "('auth', 'Group')"}, {"func_args": {"model": "'auth.Permission'", "app_label": "'auth'"}, "return_value": "('auth', 'Permission')"}], "text": "def _get_app_label_and_model_name(model, app_label=''):\n    if isinstance(model, str):\n        split = model.split('.', 1)\n        return tuple(split) if len(split) == 2 else (app_label, split[0])\n    else:\n        return model._meta.app_label, model._meta.model_name"}, "create_unique_name": {"line": 1258, "args": [{"func_args": {"args": "('django_content_type', ['app_label', 'model'], '_uniq')", "kwargs": "{}"}, "return_value": "'\"django_content_type_app_label_model_76bd3d3b_uniq\"'"}, {"func_args": {"args": "('auth_permission', ['content_type_id', 'codename'], '_uniq')", "kwargs": "{}"}, "return_value": "'\"auth_permission_content_type_id_codename_01ab375a_uniq\"'"}, {"func_args": {"args": "('auth_group_permissions', ['group_id', 'permission_id'], '_uniq')", "kwargs": "{}"}, "return_value": "'\"auth_group_permissions_group_id_permission_id_0cd325b0_uniq\"'"}, {"func_args": {"args": "('auth_user_groups', ['user_id', 'group_id'], '_uniq')", "kwargs": "{}"}, "return_value": "'\"auth_user_groups_user_id_group_id_94350c0c_uniq\"'"}, {"func_args": {"args": "('auth_user_user_permissions', ['user_id', 'permission_id'], '_uniq')", "kwargs": "{}"}, "return_value": "'\"auth_user_user_permissions_user_id_permission_id_14a6b632_uniq\"'"}, {"func_args": {"args": "('django_content_type', ['app_label', 'model'], '_uniq')", "kwargs": "{}"}, "return_value": "'\"django_content_type_app_label_model_76bd3d3b_uniq\"'"}, {"func_args": {"args": "('django_content_type', ['app_label', 'model'], '_uniq')", "kwargs": "{}"}, "return_value": "'\"django_content_type_app_label_model_76bd3d3b_uniq\"'"}, {"func_args": {"args": "('auth_permission', ['content_type_id', 'codename'], '_uniq')", "kwargs": "{}"}, "return_value": "'\"auth_permission_content_type_id_codename_01ab375a_uniq\"'"}], "text": "def create_unique_name(*args, **kwargs):\n            return self.quote_name(self._create_index_name(*args, **kwargs))"}, "create_index_name": {"line": 1058, "args": [{"func_args": {"args": "('auth_permission', ['content_type_id'], '')", "kwargs": "{}"}, "return_value": "'\"auth_permission_content_type_id_2f476e4b\"'"}, {"func_args": {"args": "('auth_group_permissions', ['group_id'], '')", "kwargs": "{}"}, "return_value": "'\"auth_group_permissions_group_id_b120cbf9\"'"}, {"func_args": {"args": "('auth_group_permissions', ['permission_id'], '')", "kwargs": "{}"}, "return_value": "'\"auth_group_permissions_permission_id_84c5c92e\"'"}, {"func_args": {"args": "('auth_user_groups', ['user_id'], '')", "kwargs": "{}"}, "return_value": "'\"auth_user_groups_user_id_6a12ed8b\"'"}, {"func_args": {"args": "('auth_user_groups', ['group_id'], '')", "kwargs": "{}"}, "return_value": "'\"auth_user_groups_group_id_97559544\"'"}, {"func_args": {"args": "('auth_user_user_permissions', ['user_id'], '')", "kwargs": "{}"}, "return_value": "'\"auth_user_user_permissions_user_id_a95ead1b\"'"}, {"func_args": {"args": "('auth_user_user_permissions', ['permission_id'], '')", "kwargs": "{}"}, "return_value": "'\"auth_user_user_permissions_permission_id_1fbb5f2c\"'"}, {"func_args": {"args": "('django_admin_log', ['content_type_id'], '')", "kwargs": "{}"}, "return_value": "'\"django_admin_log_content_type_id_c4bce8eb\"'"}, {"func_args": {"args": "('django_admin_log', ['user_id'], '')", "kwargs": "{}"}, "return_value": "'\"django_admin_log_user_id_c564eba6\"'"}, {"func_args": {"args": "('django_admin_log', ['content_type_id'], '')", "kwargs": "{}"}, "return_value": "'\"new__django_admin_log_content_type_id_bd9282b6\"'"}, {"func_args": {"args": "('django_admin_log', ['user_id'], '')", "kwargs": "{}"}, "return_value": "'\"new__django_admin_log_user_id_50606047\"'"}, {"func_args": {"args": "('django_admin_log', ['content_type_id'], '')", "kwargs": "{}"}, "return_value": "'\"new__django_admin_log_content_type_id_bd9282b6\"'"}, {"func_args": {"args": "('django_admin_log', ['user_id'], '')", "kwargs": "{}"}, "return_value": "'\"new__django_admin_log_user_id_50606047\"'"}, {"func_args": {"args": "('auth_permission', ['content_type_id'], '')", "kwargs": "{}"}, "return_value": "'\"new__auth_permission_content_type_id_1cab18c0\"'"}, {"func_args": {"args": "('django_session', ['expire_date'], '')", "kwargs": "{}"}, "return_value": "'\"django_session_expire_date_a5c62663\"'"}], "text": "def create_index_name(*args, **kwargs):\n            nonlocal name\n            if name is None:\n                name = self._create_index_name(*args, **kwargs)\n            return self.quote_name(name)"}, "get_order_dir": {"line": 2341, "args": [{"func_args": {"field": "'content_type__app_label'", "default": "'ASC'"}, "return_value": "('content_type__app_label', 'ASC')"}, {"func_args": {"field": "'content_type__app_label'", "default": "'ASC'"}, "return_value": "('content_type__app_label', 'ASC')"}, {"func_args": {"field": "'content_type__model'", "default": "'ASC'"}, "return_value": "('content_type__model', 'ASC')"}, {"func_args": {"field": "'content_type__model'", "default": "'ASC'"}, "return_value": "('content_type__model', 'ASC')"}, {"func_args": {"field": "'codename'", "default": "'ASC'"}, "return_value": "('codename', 'ASC')"}, {"func_args": {"field": "'codename'", "default": "'ASC'"}, "return_value": "('codename', 'ASC')"}, {"func_args": {"field": "'content_type__app_label'", "default": "'ASC'"}, "return_value": "('content_type__app_label', 'ASC')"}, {"func_args": {"field": "'content_type__app_label'", "default": "'ASC'"}, "return_value": "('content_type__app_label', 'ASC')"}, {"func_args": {"field": "'content_type__model'", "default": "'ASC'"}, "return_value": "('content_type__model', 'ASC')"}, {"func_args": {"field": "'content_type__model'", "default": "'ASC'"}, "return_value": "('content_type__model', 'ASC')"}, {"func_args": {"field": "'codename'", "default": "'ASC'"}, "return_value": "('codename', 'ASC')"}, {"func_args": {"field": "'codename'", "default": "'ASC'"}, "return_value": "('codename', 'ASC')"}, {"func_args": {"field": "'content_type__app_label'", "default": "'ASC'"}, "return_value": "('content_type__app_label', 'ASC')"}, {"func_args": {"field": "'content_type__app_label'", "default": "'ASC'"}, "return_value": "('content_type__app_label', 'ASC')"}, {"func_args": {"field": "'content_type__model'", "default": "'ASC'"}, "return_value": "('content_type__model', 'ASC')"}, {"func_args": {"field": "'content_type__model'", "default": "'ASC'"}, "return_value": "('content_type__model', 'ASC')"}, {"func_args": {"field": "'codename'", "default": "'ASC'"}, "return_value": "('codename', 'ASC')"}, {"func_args": {"field": "'codename'", "default": "'ASC'"}, "return_value": "('codename', 'ASC')"}, {"func_args": {"field": "'content_type__app_label'", "default": "'ASC'"}, "return_value": "('content_type__app_label', 'ASC')"}, {"func_args": {"field": "'content_type__app_label'", "default": "'ASC'"}, "return_value": "('content_type__app_label', 'ASC')"}, {"func_args": {"field": "'content_type__model'", "default": "'ASC'"}, "return_value": "('content_type__model', 'ASC')"}, {"func_args": {"field": "'content_type__model'", "default": "'ASC'"}, "return_value": "('content_type__model', 'ASC')"}, {"func_args": {"field": "'codename'", "default": "'ASC'"}, "return_value": "('codename', 'ASC')"}, {"func_args": {"field": "'codename'", "default": "'ASC'"}, "return_value": "('codename', 'ASC')"}, {"func_args": {"field": "'id'", "default": "'ASC'"}, "return_value": "('id', 'ASC')"}, {"func_args": {"field": "'id'", "default": "'ASC'"}, "return_value": "('id', 'ASC')"}, {"func_args": {"field": "'id'", "default": "'ASC'"}, "return_value": "('id', 'ASC')"}, {"func_args": {"field": "'id'", "default": "'ASC'"}, "return_value": "('id', 'ASC')"}, {"func_args": {"field": "'id'", "default": "'ASC'"}, "return_value": "('id', 'ASC')"}, {"func_args": {"field": "'id'", "default": "'ASC'"}, "return_value": "('id', 'ASC')"}, {"func_args": {"field": "'id'", "default": "'ASC'"}, "return_value": "('id', 'ASC')"}, {"func_args": {"field": "'id'", "default": "'ASC'"}, "return_value": "('id', 'ASC')"}, {"func_args": {"field": "'id'", "default": "'ASC'"}, "return_value": "('id', 'ASC')"}, {"func_args": {"field": "'id'", "default": "'ASC'"}, "return_value": "('id', 'ASC')"}, {"func_args": {"field": "'session_key'", "default": "'ASC'"}, "return_value": "('session_key', 'ASC')"}, {"func_args": {"field": "'session_key'", "default": "'ASC'"}, "return_value": "('session_key', 'ASC')"}], "text": "def get_order_dir(field, default='ASC'):\n    \"\"\"\n    Return the field name and direction for an order specification. For\n    example, '-foo' is returned as ('foo', 'DESC').\n\n    The 'default' param is used to indicate which way no prefix (or a '+'\n    prefix) should sort. The '-' prefix always sorts the opposite way.\n    \"\"\"\n    dirn = ORDER_DIR[default]\n    if field[0] == '-':\n        return field[1:], dirn[1]\n    return field, dirn[0]"}, "col_str": {"line": 85, "args": [{"func_args": {"column": "'app_label'", "idx": "0"}, "return_value": "'\"app_label\"'"}, {"func_args": {"column": "'model'", "idx": "1"}, "return_value": "'\"model\"'"}, {"func_args": {"column": "'content_type_id'", "idx": "0"}, "return_value": "'\"content_type_id\"'"}, {"func_args": {"column": "'codename'", "idx": "1"}, "return_value": "'\"codename\"'"}, {"func_args": {"column": "'content_type_id'", "idx": "0"}, "return_value": "'\"content_type_id\"'"}, {"func_args": {"column": "'group_id'", "idx": "0"}, "return_value": "'\"group_id\"'"}, {"func_args": {"column": "'permission_id'", "idx": "1"}, "return_value": "'\"permission_id\"'"}, {"func_args": {"column": "'group_id'", "idx": "0"}, "return_value": "'\"group_id\"'"}, {"func_args": {"column": "'permission_id'", "idx": "0"}, "return_value": "'\"permission_id\"'"}, {"func_args": {"column": "'user_id'", "idx": "0"}, "return_value": "'\"user_id\"'"}, {"func_args": {"column": "'group_id'", "idx": "1"}, "return_value": "'\"group_id\"'"}, {"func_args": {"column": "'user_id'", "idx": "0"}, "return_value": "'\"user_id\"'"}, {"func_args": {"column": "'group_id'", "idx": "0"}, "return_value": "'\"group_id\"'"}, {"func_args": {"column": "'user_id'", "idx": "0"}, "return_value": "'\"user_id\"'"}, {"func_args": {"column": "'permission_id'", "idx": "1"}, "return_value": "'\"permission_id\"'"}, {"func_args": {"column": "'user_id'", "idx": "0"}, "return_value": "'\"user_id\"'"}, {"func_args": {"column": "'permission_id'", "idx": "0"}, "return_value": "'\"permission_id\"'"}, {"func_args": {"column": "'content_type_id'", "idx": "0"}, "return_value": "'\"content_type_id\"'"}, {"func_args": {"column": "'user_id'", "idx": "0"}, "return_value": "'\"user_id\"'"}, {"func_args": {"column": "'content_type_id'", "idx": "0"}, "return_value": "'\"content_type_id\"'"}, {"func_args": {"column": "'user_id'", "idx": "0"}, "return_value": "'\"user_id\"'"}, {"func_args": {"column": "'content_type_id'", "idx": "0"}, "return_value": "'\"content_type_id\"'"}, {"func_args": {"column": "'user_id'", "idx": "0"}, "return_value": "'\"user_id\"'"}, {"func_args": {"column": "'app_label'", "idx": "0"}, "return_value": "'\"app_label\"'"}, {"func_args": {"column": "'model'", "idx": "1"}, "return_value": "'\"model\"'"}, {"func_args": {"column": "'app_label'", "idx": "0"}, "return_value": "'\"app_label\"'"}, {"func_args": {"column": "'model'", "idx": "1"}, "return_value": "'\"model\"'"}, {"func_args": {"column": "'content_type_id'", "idx": "0"}, "return_value": "'\"content_type_id\"'"}, {"func_args": {"column": "'codename'", "idx": "1"}, "return_value": "'\"codename\"'"}, {"func_args": {"column": "'content_type_id'", "idx": "0"}, "return_value": "'\"content_type_id\"'"}, {"func_args": {"column": "'expire_date'", "idx": "0"}, "return_value": "'\"expire_date\"'"}], "text": "def col_str(column, idx):\n            col = self.quote_name(column)\n            try:\n                suffix = self.col_suffixes[idx]\n                if suffix:\n                    col = '{} {}'.format(col, suffix)\n            except IndexError:\n                pass\n            return col"}, "_pytz_imported": {"line": 281, "args": [{"func_args": {}, "return_value": "False"}, {"func_args": {}, "return_value": "False"}, {"func_args": {}, "return_value": "False"}, {"func_args": {}, "return_value": "False"}, {"func_args": {}, "return_value": "False"}, {"func_args": {}, "return_value": "False"}, {"func_args": {}, "return_value": "False"}, {"func_args": {}, "return_value": "False"}, {"func_args": {}, "return_value": "False"}, {"func_args": {}, "return_value": "False"}, {"func_args": {}, "return_value": "False"}, {"func_args": {}, "return_value": "False"}, {"func_args": {}, "return_value": "False"}, {"func_args": {}, "return_value": "False"}, {"func_args": {}, "return_value": "False"}, {"func_args": {}, "return_value": "False"}, {"func_args": {}, "return_value": "False"}, {"func_args": {}, "return_value": "False"}, {"func_args": {}, "return_value": "False"}, {"func_args": {}, "return_value": "False"}, {"func_args": {}, "return_value": "False"}, {"func_args": {}, "return_value": "False"}, {"func_args": {}, "return_value": "False"}, {"func_args": {}, "return_value": "False"}, {"func_args": {}, "return_value": "False"}, {"func_args": {}, "return_value": "False"}, {"func_args": {}, "return_value": "False"}, {"func_args": {}, "return_value": "False"}, {"func_args": {}, "return_value": "False"}, {"func_args": {}, "return_value": "False"}, {"func_args": {}, "return_value": "False"}, {"func_args": {}, "return_value": "False"}, {"func_args": {}, "return_value": "False"}, {"func_args": {}, "return_value": "False"}, {"func_args": {}, "return_value": "False"}, {"func_args": {}, "return_value": "False"}], "text": "def _pytz_imported():\n    \"\"\"\n    Detects whether or not pytz has been imported without importing pytz.\n\n    Copied from pytz_deprecation_shim with thanks to Paul Ganssle.\n    \"\"\"\n    global _PYTZ_IMPORTED\n\n    if not _PYTZ_IMPORTED and \"pytz\" in sys.modules:\n        _PYTZ_IMPORTED = True\n\n    return _PYTZ_IMPORTED"}, "resolve_relation": {"line": 24, "args": [{"func_args": {"model": "'contenttypes.ContentType'", "app_label": "'auth'", "model_name": "'permission'"}, "return_value": "('contenttypes', 'contenttype')"}, {"func_args": {"model": "'auth.Permission'", "app_label": "'auth'", "model_name": "'group'"}, "return_value": "('auth', 'permission')"}, {"func_args": {"model": "'auth.Group'", "app_label": "'auth'", "model_name": "'user'"}, "return_value": "('auth', 'group')"}, {"func_args": {"model": "'auth.Permission'", "app_label": "'auth'", "model_name": "'user'"}, "return_value": "('auth', 'permission')"}, {"func_args": {"model": "'contenttypes.ContentType'", "app_label": "'admin'", "model_name": "'logentry'"}, "return_value": "('contenttypes', 'contenttype')"}, {"func_args": {"model": "'auth.User'", "app_label": "'admin'", "model_name": "'logentry'"}, "return_value": "('auth', 'user')"}, {"func_args": {"model": "'contenttypes.ContentType'", "app_label": "'auth'", "model_name": "'permission'"}, "return_value": "('contenttypes', 'contenttype')"}, {"func_args": {"model": "'auth.Permission'", "app_label": "'auth'", "model_name": "'group'"}, "return_value": "('auth', 'permission')"}, {"func_args": {"model": "'auth.Group'", "app_label": "'auth'", "model_name": "'user'"}, "return_value": "('auth', 'group')"}, {"func_args": {"model": "'auth.Permission'", "app_label": "'auth'", "model_name": "'user'"}, "return_value": "('auth', 'permission')"}, {"func_args": {"model": "'contenttypes.ContentType'", "app_label": "'admin'", "model_name": "'logentry'"}, "return_value": "('contenttypes', 'contenttype')"}, {"func_args": {"model": "'auth.User'", "app_label": "'admin'", "model_name": "'logentry'"}, "return_value": "('auth', 'user')"}, {"func_args": {"model": "'contenttypes.ContentType'", "app_label": "'auth'", "model_name": "'permission'"}, "return_value": "('contenttypes', 'contenttype')"}, {"func_args": {"model": "'auth.Permission'", "app_label": "'auth'", "model_name": "'group'"}, "return_value": "('auth', 'permission')"}, {"func_args": {"model": "'auth.Group'", "app_label": "'auth'", "model_name": "'user'"}, "return_value": "('auth', 'group')"}, {"func_args": {"model": "'auth.Permission'", "app_label": "'auth'", "model_name": "'user'"}, "return_value": "('auth', 'permission')"}, {"func_args": {"model": "'contenttypes.ContentType'", "app_label": "'admin'", "model_name": "'logentry'"}, "return_value": "('contenttypes', 'contenttype')"}, {"func_args": {"model": "'auth.User'", "app_label": "'admin'", "model_name": "'logentry'"}, "return_value": "('auth', 'user')"}, {"func_args": {"model": "'contenttypes.ContentType'", "app_label": "'auth'", "model_name": "'permission'"}, "return_value": "('contenttypes', 'contenttype')"}, {"func_args": {"model": "'auth.Permission'", "app_label": "'auth'", "model_name": "'group'"}, "return_value": "('auth', 'permission')"}, {"func_args": {"model": "'contenttypes.ContentType'", "app_label": "'auth'", "model_name": "'permission'"}, "return_value": "('contenttypes', 'contenttype')"}, {"func_args": {"model": "'auth.Permission'", "app_label": "'auth'", "model_name": "'group'"}, "return_value": "('auth', 'permission')"}, {"func_args": {"model": "'auth.Group'", "app_label": "'auth'", "model_name": "'user'"}, "return_value": "('auth', 'group')"}, {"func_args": {"model": "'auth.Permission'", "app_label": "'auth'", "model_name": "'user'"}, "return_value": "('auth', 'permission')"}, {"func_args": {"model": "'contenttypes.ContentType'", "app_label": "'admin'", "model_name": "'logentry'"}, "return_value": "('contenttypes', 'contenttype')"}, {"func_args": {"model": "'auth.User'", "app_label": "'admin'", "model_name": "'logentry'"}, "return_value": "('auth', 'user')"}, {"func_args": {"model": "'contenttypes.ContentType'", "app_label": "'auth'", "model_name": "'permission'"}, "return_value": "('contenttypes', 'contenttype')"}, {"func_args": {"model": "'auth.Permission'", "app_label": "'auth'", "model_name": "'group'"}, "return_value": "('auth', 'permission')"}, {"func_args": {"model": "'auth.Group'", "app_label": "'auth'", "model_name": "'user'"}, "return_value": "('auth', 'group')"}, {"func_args": {"model": "'auth.Permission'", "app_label": "'auth'", "model_name": "'user'"}, "return_value": "('auth', 'permission')"}, {"func_args": {"model": "'contenttypes.ContentType'", "app_label": "'admin'", "model_name": "'logentry'"}, "return_value": "('contenttypes', 'contenttype')"}, {"func_args": {"model": "'auth.User'", "app_label": "'admin'", "model_name": "'logentry'"}, "return_value": "('auth', 'user')"}, {"func_args": {"model": "'contenttypes.ContentType'", "app_label": "'auth'", "model_name": "'permission'"}, "return_value": "('contenttypes', 'contenttype')"}, {"func_args": {"model": "'auth.Permission'", "app_label": "'auth'", "model_name": "'group'"}, "return_value": "('auth', 'permission')"}, {"func_args": {"model": "'auth.Group'", "app_label": "'auth'", "model_name": "'user'"}, "return_value": "('auth', 'group')"}, {"func_args": {"model": "'auth.Permission'", "app_label": "'auth'", "model_name": "'user'"}, "return_value": "('auth', 'permission')"}, {"func_args": {"model": "'contenttypes.ContentType'", "app_label": "'admin'", "model_name": "'logentry'"}, "return_value": "('contenttypes', 'contenttype')"}, {"func_args": {"model": "'auth.User'", "app_label": "'admin'", "model_name": "'logentry'"}, "return_value": "('auth', 'user')"}, {"func_args": {"model": "'contenttypes.ContentType'", "app_label": "'auth'", "model_name": "'permission'"}, "return_value": "('contenttypes', 'contenttype')"}, {"func_args": {"model": "'auth.Permission'", "app_label": "'auth'", "model_name": "'group'"}, "return_value": "('auth', 'permission')"}, {"func_args": {"model": "'auth.Group'", "app_label": "'auth'", "model_name": "'user'"}, "return_value": "('auth', 'group')"}, {"func_args": {"model": "'auth.Permission'", "app_label": "'auth'", "model_name": "'user'"}, "return_value": "('auth', 'permission')"}, {"func_args": {"model": "'contenttypes.ContentType'", "app_label": "'admin'", "model_name": "'logentry'"}, "return_value": "('contenttypes', 'contenttype')"}, {"func_args": {"model": "'auth.User'", "app_label": "'admin'", "model_name": "'logentry'"}, "return_value": "('auth', 'user')"}, {"func_args": {"model": "'contenttypes.ContentType'", "app_label": "'auth'", "model_name": "'permission'"}, "return_value": "('contenttypes', 'contenttype')"}, {"func_args": {"model": "'auth.Permission'", "app_label": "'auth'", "model_name": "'group'"}, "return_value": "('auth', 'permission')"}, {"func_args": {"model": "'auth.Group'", "app_label": "'auth'", "model_name": "'user'"}, "return_value": "('auth', 'group')"}, {"func_args": {"model": "'auth.Permission'", "app_label": "'auth'", "model_name": "'user'"}, "return_value": "('auth', 'permission')"}, {"func_args": {"model": "'contenttypes.ContentType'", "app_label": "'admin'", "model_name": "'logentry'"}, "return_value": "('contenttypes', 'contenttype')"}, {"func_args": {"model": "'auth.User'", "app_label": "'admin'", "model_name": "'logentry'"}, "return_value": "('auth', 'user')"}, {"func_args": {"model": "'contenttypes.ContentType'", "app_label": "'auth'", "model_name": "'permission'"}, "return_value": "('contenttypes', 'contenttype')"}, {"func_args": {"model": "'auth.Permission'", "app_label": "'auth'", "model_name": "'group'"}, "return_value": "('auth', 'permission')"}, {"func_args": {"model": "'auth.Group'", "app_label": "'auth'", "model_name": "'user'"}, "return_value": "('auth', 'group')"}, {"func_args": {"model": "'auth.Permission'", "app_label": "'auth'", "model_name": "'user'"}, "return_value": "('auth', 'permission')"}, {"func_args": {"model": "'contenttypes.ContentType'", "app_label": "'admin'", "model_name": "'logentry'"}, "return_value": "('contenttypes', 'contenttype')"}, {"func_args": {"model": "'auth.User'", "app_label": "'admin'", "model_name": "'logentry'"}, "return_value": "('auth', 'user')"}, {"func_args": {"model": "'contenttypes.ContentType'", "app_label": "'auth'", "model_name": "'permission'"}, "return_value": "('contenttypes', 'contenttype')"}, {"func_args": {"model": "'auth.Permission'", "app_label": "'auth'", "model_name": "'group'"}, "return_value": "('auth', 'permission')"}, {"func_args": {"model": "'auth.Group'", "app_label": "'auth'", "model_name": "'user'"}, "return_value": "('auth', 'group')"}, {"func_args": {"model": "'contenttypes.ContentType'", "app_label": "'auth'", "model_name": "'permission'"}, "return_value": "('contenttypes', 'contenttype')"}, {"func_args": {"model": "'auth.Permission'", "app_label": "'auth'", "model_name": "'group'"}, "return_value": "('auth', 'permission')"}, {"func_args": {"model": "'auth.Group'", "app_label": "'auth'", "model_name": "'user'"}, "return_value": "('auth', 'group')"}, {"func_args": {"model": "'auth.Permission'", "app_label": "'auth'", "model_name": "'user'"}, "return_value": "('auth', 'permission')"}, {"func_args": {"model": "'contenttypes.ContentType'", "app_label": "'admin'", "model_name": "'logentry'"}, "return_value": "('contenttypes', 'contenttype')"}, {"func_args": {"model": "'auth.User'", "app_label": "'admin'", "model_name": "'logentry'"}, "return_value": "('auth', 'user')"}], "text": "def resolve_relation(model, app_label=None, model_name=None):\n    \"\"\"\n    Turn a model class or model reference string and return a model tuple.\n\n    app_label and model_name are used to resolve the scope of recursive and\n    unscoped model relationship.\n    \"\"\"\n    if isinstance(model, str):\n        if model == RECURSIVE_RELATIONSHIP_CONSTANT:\n            if app_label is None or model_name is None:\n                raise TypeError(\n                    'app_label and model_name must be provided to resolve '\n                    'recursive relationships.'\n                )\n            return app_label, model_name\n        if '.' in model:\n            app_label, model_name = model.split('.', 1)\n            return app_label, model_name.lower()\n        if app_label is None:\n            raise TypeError(\n                'app_label must be provided to resolve unscoped model '\n                'relationships.'\n            )\n        return app_label, model.lower()\n    return model._meta.app_label, model._meta.model_name"}, "is_iterable": {"line": 0, "args": [{"func_args": {"x": "[]"}, "return_value": "True"}, {"func_args": {"x": "[]"}, "return_value": "True"}, {"func_args": {"x": "[]"}, "return_value": "True"}, {"func_args": {"x": "[]"}, "return_value": "True"}, {"func_args": {"x": "[]"}, "return_value": "True"}, {"func_args": {"x": "[]"}, "return_value": "True"}, {"func_args": {"x": "[]"}, "return_value": "True"}, {"func_args": {"x": "[]"}, "return_value": "True"}, {"func_args": {"x": "[]"}, "return_value": "True"}, {"func_args": {"x": "[]"}, "return_value": "True"}, {"func_args": {"x": "[]"}, "return_value": "True"}, {"func_args": {"x": "[]"}, "return_value": "True"}, {"func_args": {"x": "[]"}, "return_value": "True"}, {"func_args": {"x": "[]"}, "return_value": "True"}, {"func_args": {"x": "[]"}, "return_value": "True"}, {"func_args": {"x": "[]"}, "return_value": "True"}, {"func_args": {"x": "[]"}, "return_value": "True"}, {"func_args": {"x": "[]"}, "return_value": "True"}], "text": "def is_iterable(x):\n    \"An implementation independent way of checking for iterables\"\n    try:\n        iter(x)\n    except TypeError:\n        return False\n    else:\n        return True"}, "make_hashable": {"line": 3, "args": [{"func_args": {"value": "[]"}, "return_value": "()"}, {"func_args": {"value": "[]"}, "return_value": "()"}, {"func_args": {"value": "[]"}, "return_value": "()"}, {"func_args": {"value": "[]"}, "return_value": "()"}, {"func_args": {"value": "[]"}, "return_value": "()"}, {"func_args": {"value": "[]"}, "return_value": "()"}, {"func_args": {"value": "[]"}, "return_value": "()"}, {"func_args": {"value": "[]"}, "return_value": "()"}, {"func_args": {"value": "[]"}, "return_value": "()"}, {"func_args": {"value": "[]"}, "return_value": "()"}, {"func_args": {"value": "[]"}, "return_value": "()"}, {"func_args": {"value": "[]"}, "return_value": "()"}, {"func_args": {"value": "[]"}, "return_value": "()"}, {"func_args": {"value": "[]"}, "return_value": "()"}, {"func_args": {"value": "[]"}, "return_value": "()"}, {"func_args": {"value": "[]"}, "return_value": "()"}, {"func_args": {"value": "[]"}, "return_value": "()"}, {"func_args": {"value": "[]"}, "return_value": "()"}], "text": "def make_hashable(value):\n    \"\"\"\n    Attempt to make value hashable or raise a TypeError if it fails.\n\n    The returned value should generate the same hash for equal values.\n    \"\"\"\n    if isinstance(value, dict):\n        return tuple([\n            (key, make_hashable(nested_value))\n            for key, nested_value in sorted(value.items())\n        ])\n    # Try hash to avoid converting a hashable iterable (e.g. string, frozenset)\n    # to a tuple.\n    try:\n        hash(value)\n    except TypeError:\n        if is_iterable(value):\n            return tuple(map(make_hashable, value))\n        # Non-hashable, non-iterable.\n        raise\n    return value"}, "is_protected_type": {"line": 36, "args": [{"func_args": {"obj": "'Can add log entry'"}, "return_value": "False"}, {"func_args": {"obj": "1"}, "return_value": "True"}, {"func_args": {"obj": "'add_logentry'"}, "return_value": "False"}, {"func_args": {"obj": "1"}, "return_value": "True"}, {"func_args": {"obj": "'Can change log entry'"}, "return_value": "False"}, {"func_args": {"obj": "1"}, "return_value": "True"}, {"func_args": {"obj": "'change_logentry'"}, "return_value": "False"}, {"func_args": {"obj": "2"}, "return_value": "True"}, {"func_args": {"obj": "'Can delete log entry'"}, "return_value": "False"}, {"func_args": {"obj": "1"}, "return_value": "True"}, {"func_args": {"obj": "'delete_logentry'"}, "return_value": "False"}, {"func_args": {"obj": "3"}, "return_value": "True"}, {"func_args": {"obj": "'Can view log entry'"}, "return_value": "False"}, {"func_args": {"obj": "1"}, "return_value": "True"}, {"func_args": {"obj": "'view_logentry'"}, "return_value": "False"}, {"func_args": {"obj": "4"}, "return_value": "True"}, {"func_args": {"obj": "'Can add permission'"}, "return_value": "False"}, {"func_args": {"obj": "2"}, "return_value": "True"}, {"func_args": {"obj": "'add_permission'"}, "return_value": "False"}, {"func_args": {"obj": "5"}, "return_value": "True"}, {"func_args": {"obj": "'Can change permission'"}, "return_value": "False"}, {"func_args": {"obj": "2"}, "return_value": "True"}, {"func_args": {"obj": "'change_permission'"}, "return_value": "False"}, {"func_args": {"obj": "6"}, "return_value": "True"}, {"func_args": {"obj": "'Can delete permission'"}, "return_value": "False"}, {"func_args": {"obj": "2"}, "return_value": "True"}, {"func_args": {"obj": "'delete_permission'"}, "return_value": "False"}, {"func_args": {"obj": "7"}, "return_value": "True"}, {"func_args": {"obj": "'Can view permission'"}, "return_value": "False"}, {"func_args": {"obj": "2"}, "return_value": "True"}, {"func_args": {"obj": "'view_permission'"}, "return_value": "False"}, {"func_args": {"obj": "8"}, "return_value": "True"}, {"func_args": {"obj": "'Can add group'"}, "return_value": "False"}, {"func_args": {"obj": "3"}, "return_value": "True"}, {"func_args": {"obj": "'add_group'"}, "return_value": "False"}, {"func_args": {"obj": "9"}, "return_value": "True"}, {"func_args": {"obj": "'Can change group'"}, "return_value": "False"}, {"func_args": {"obj": "3"}, "return_value": "True"}, {"func_args": {"obj": "'change_group'"}, "return_value": "False"}, {"func_args": {"obj": "10"}, "return_value": "True"}, {"func_args": {"obj": "'Can delete group'"}, "return_value": "False"}, {"func_args": {"obj": "3"}, "return_value": "True"}, {"func_args": {"obj": "'delete_group'"}, "return_value": "False"}, {"func_args": {"obj": "11"}, "return_value": "True"}, {"func_args": {"obj": "'Can view group'"}, "return_value": "False"}, {"func_args": {"obj": "3"}, "return_value": "True"}, {"func_args": {"obj": "'view_group'"}, "return_value": "False"}, {"func_args": {"obj": "12"}, "return_value": "True"}, {"func_args": {"obj": "'Can add user'"}, "return_value": "False"}, {"func_args": {"obj": "4"}, "return_value": "True"}, {"func_args": {"obj": "'add_user'"}, "return_value": "False"}, {"func_args": {"obj": "13"}, "return_value": "True"}, {"func_args": {"obj": "'Can change user'"}, "return_value": "False"}, {"func_args": {"obj": "4"}, "return_value": "True"}, {"func_args": {"obj": "'change_user'"}, "return_value": "False"}, {"func_args": {"obj": "14"}, "return_value": "True"}, {"func_args": {"obj": "'Can delete user'"}, "return_value": "False"}, {"func_args": {"obj": "4"}, "return_value": "True"}, {"func_args": {"obj": "'delete_user'"}, "return_value": "False"}, {"func_args": {"obj": "15"}, "return_value": "True"}, {"func_args": {"obj": "'Can view user'"}, "return_value": "False"}, {"func_args": {"obj": "4"}, "return_value": "True"}, {"func_args": {"obj": "'view_user'"}, "return_value": "False"}, {"func_args": {"obj": "16"}, "return_value": "True"}, {"func_args": {"obj": "'Can add content type'"}, "return_value": "False"}, {"func_args": {"obj": "5"}, "return_value": "True"}, {"func_args": {"obj": "'add_contenttype'"}, "return_value": "False"}, {"func_args": {"obj": "17"}, "return_value": "True"}, {"func_args": {"obj": "'Can change content type'"}, "return_value": "False"}, {"func_args": {"obj": "5"}, "return_value": "True"}, {"func_args": {"obj": "'change_contenttype'"}, "return_value": "False"}, {"func_args": {"obj": "18"}, "return_value": "True"}, {"func_args": {"obj": "'Can delete content type'"}, "return_value": "False"}, {"func_args": {"obj": "5"}, "return_value": "True"}, {"func_args": {"obj": "'delete_contenttype'"}, "return_value": "False"}, {"func_args": {"obj": "19"}, "return_value": "True"}, {"func_args": {"obj": "'Can view content type'"}, "return_value": "False"}, {"func_args": {"obj": "5"}, "return_value": "True"}, {"func_args": {"obj": "'view_contenttype'"}, "return_value": "False"}, {"func_args": {"obj": "20"}, "return_value": "True"}, {"func_args": {"obj": "'Can add session'"}, "return_value": "False"}, {"func_args": {"obj": "6"}, "return_value": "True"}, {"func_args": {"obj": "'add_session'"}, "return_value": "False"}, {"func_args": {"obj": "21"}, "return_value": "True"}, {"func_args": {"obj": "'Can change session'"}, "return_value": "False"}, {"func_args": {"obj": "6"}, "return_value": "True"}, {"func_args": {"obj": "'change_session'"}, "return_value": "False"}, {"func_args": {"obj": "22"}, "return_value": "True"}, {"func_args": {"obj": "'Can delete session'"}, "return_value": "False"}, {"func_args": {"obj": "6"}, "return_value": "True"}, {"func_args": {"obj": "'delete_session'"}, "return_value": "False"}, {"func_args": {"obj": "23"}, "return_value": "True"}, {"func_args": {"obj": "'Can view session'"}, "return_value": "False"}, {"func_args": {"obj": "6"}, "return_value": "True"}, {"func_args": {"obj": "'view_session'"}, "return_value": "False"}, {"func_args": {"obj": "24"}, "return_value": "True"}, {"func_args": {"obj": "'admin'"}, "return_value": "False"}, {"func_args": {"obj": "'logentry'"}, "return_value": "False"}, {"func_args": {"obj": "1"}, "return_value": "True"}, {"func_args": {"obj": "'auth'"}, "return_value": "False"}, {"func_args": {"obj": "'permission'"}, "return_value": "False"}, {"func_args": {"obj": "2"}, "return_value": "True"}, {"func_args": {"obj": "'auth'"}, "return_value": "False"}, {"func_args": {"obj": "'group'"}, "return_value": "False"}, {"func_args": {"obj": "3"}, "return_value": "True"}, {"func_args": {"obj": "'auth'"}, "return_value": "False"}, {"func_args": {"obj": "'user'"}, "return_value": "False"}, {"func_args": {"obj": "4"}, "return_value": "True"}, {"func_args": {"obj": "'contenttypes'"}, "return_value": "False"}, {"func_args": {"obj": "'contenttype'"}, "return_value": "False"}, {"func_args": {"obj": "5"}, "return_value": "True"}, {"func_args": {"obj": "'sessions'"}, "return_value": "False"}, {"func_args": {"obj": "'session'"}, "return_value": "False"}, {"func_args": {"obj": "6"}, "return_value": "True"}], "text": "def is_protected_type(obj):\n    \"\"\"Determine if the object instance is of a protected type.\n\n    Objects of protected types are preserved as-is when passed to\n    force_str(strings_only=True).\n    \"\"\"\n    return isinstance(obj, _PROTECTED_TYPES)"}, "connections_support_transactions": {"line": 1103, "args": [{"func_args": {"aliases": "frozenset({'default'})"}, "return_value": "True"}, {"func_args": {"aliases": "frozenset({'default'})"}, "return_value": "True"}, {"func_args": {"aliases": "frozenset({'default'})"}, "return_value": "True"}, {"func_args": {"aliases": "frozenset({'default'})"}, "return_value": "True"}, {"func_args": {"aliases": "frozenset({'default'})"}, "return_value": "True"}, {"func_args": {"aliases": "frozenset({'default'})"}, "return_value": "True"}, {"func_args": {"aliases": "frozenset({'default'})"}, "return_value": "True"}, {"func_args": {"aliases": "frozenset({'default'})"}, "return_value": "True"}, {"func_args": {"aliases": "frozenset({'default'})"}, "return_value": "True"}, {"func_args": {"aliases": "frozenset({'default'})"}, "return_value": "True"}, {"func_args": {"aliases": "frozenset({'default'})"}, "return_value": "True"}, {"func_args": {"aliases": "frozenset({'default'})"}, "return_value": "True"}, {"func_args": {"aliases": "frozenset({'default'})"}, "return_value": "True"}, {"func_args": {"aliases": "frozenset({'default'})"}, "return_value": "True"}, {"func_args": {"aliases": "frozenset({'default'})"}, "return_value": "True"}, {"func_args": {"aliases": "frozenset({'default'})"}, "return_value": "True"}, {"func_args": {"aliases": "frozenset({'default'})"}, "return_value": "True"}, {"func_args": {"aliases": "frozenset({'default'})"}, "return_value": "True"}, {"func_args": {"aliases": "frozenset({'default'})"}, "return_value": "True"}, {"func_args": {"aliases": "frozenset({'default'})"}, "return_value": "True"}, {"func_args": {"aliases": "frozenset({'default'})"}, "return_value": "True"}, {"func_args": {"aliases": "frozenset({'default'})"}, "return_value": "True"}, {"func_args": {"aliases": "frozenset({'default'})"}, "return_value": "True"}, {"func_args": {"aliases": "frozenset({'default'})"}, "return_value": "True"}, {"func_args": {"aliases": "frozenset({'default'})"}, "return_value": "True"}], "text": "def connections_support_transactions(aliases=None):\n    \"\"\"\n    Return whether or not all (or specified) connections support\n    transactions.\n    \"\"\"\n    conns = connections.all() if aliases is None else (connections[alias] for alias in aliases)\n    return all(conn.features.supports_transactions for conn in conns)"}, "pretty_name": {"line": 12, "args": [{"func_args": {"name": "'attachments'"}, "return_value": "'Attachments'"}, {"func_args": {"name": "'attachments'"}, "return_value": "'Attachments'"}, {"func_args": {"name": "'attachments'"}, "return_value": "'Attachments'"}, {"func_args": {"name": "'attachments'"}, "return_value": "'Attachments'"}, {"func_args": {"name": "'attachments'"}, "return_value": "'Attachments'"}, {"func_args": {"name": "'attachments'"}, "return_value": "'Attachments'"}], "text": "def pretty_name(name):\n    \"\"\"Convert 'first_name' to 'First name'.\"\"\"\n    if not name:\n        return ''\n    return name.replace('_', ' ').capitalize()"}, "get_installed_libraries": {"line": 86, "args": [{"func_args": {}, "return_value": "{'cache': 'django.templatetags.cache', 'i18n': 'django.templatetags.i18n', 'l10n': 'django.templatetags.l10n', 'static': 'django.templatetags.static', 'tz': 'django.templatetags.tz', 'admin_list': 'django.contrib.admin.templatetags.admin_list', 'admin_modify': 'django.contrib.admin.templatetags.admin_modify', 'admin_urls': 'django.contrib.admin.templatetags.admin_urls', 'log': 'django.contrib.admin.templatetags.log'}"}], "text": "def get_installed_libraries():\n    \"\"\"\n    Return the built-in template tag libraries and those from installed\n    applications. Libraries are stored in a dictionary where keys are the\n    individual module names, not the full module paths. Example:\n    django.templatetags.i18n is stored as i18n.\n    \"\"\"\n    libraries = {}\n    candidates = ['django.templatetags']\n    candidates.extend(\n        '%s.templatetags' % app_config.name\n        for app_config in apps.get_app_configs())\n\n    for candidate in candidates:\n        try:\n            pkg = import_module(candidate)\n        except ImportError:\n            # No templatetags package defined. This is safe to ignore.\n            continue\n\n        if hasattr(pkg, '__path__'):\n            for name in get_package_libraries(pkg):\n                libraries[name[len(candidate) + 1:]] = name\n\n    return libraries"}, "construct_relative_path": {"line": 232, "args": [{"func_args": {"current_template_name": "'django/forms/errors/list/default.html'", "relative_name": "'\"django/forms/errors/list/ul.html\"'"}, "return_value": "'\"django/forms/errors/list/ul.html\"'"}, {"func_args": {"current_template_name": "'django/forms/errors/list/default.html'", "relative_name": "'django/forms/errors/list/ul.html'"}, "return_value": "'django/forms/errors/list/ul.html'"}, {"func_args": {"current_template_name": "'django/forms/errors/list/default.html'", "relative_name": "'django/forms/errors/list/ul.html'"}, "return_value": "'django/forms/errors/list/ul.html'"}, {"func_args": {"current_template_name": "'django/forms/label.html'", "relative_name": "\"'django/forms/attrs.html'\""}, "return_value": "\"'django/forms/attrs.html'\""}, {"func_args": {"current_template_name": "'django/forms/label.html'", "relative_name": "'django/forms/attrs.html'"}, "return_value": "'django/forms/attrs.html'"}, {"func_args": {"current_template_name": "'django/forms/widgets/clearable_file_input.html'", "relative_name": "'\"django/forms/widgets/attrs.html\"'"}, "return_value": "'\"django/forms/widgets/attrs.html\"'"}, {"func_args": {"current_template_name": "'django/forms/widgets/clearable_file_input.html'", "relative_name": "'django/forms/widgets/attrs.html'"}, "return_value": "'django/forms/widgets/attrs.html'"}], "text": "def construct_relative_path(current_template_name, relative_name):\n    \"\"\"\n    Convert a relative path (starting with './' or '../') to the full template\n    name based on the current_template_name.\n    \"\"\"\n    has_quotes = (\n        (relative_name.startswith('\"') and relative_name.endswith('\"')) or\n        (relative_name.startswith(\"'\") and relative_name.endswith(\"'\"))\n    )\n    new_name = relative_name.strip('\\'\"')\n    if not new_name.startswith(('./', '../')):\n        # relative_name is a variable or a literal that doesn't contain a\n        # relative path.\n        return relative_name\n\n    new_name = posixpath.normpath(\n        posixpath.join(\n            posixpath.dirname(current_template_name.lstrip('/')),\n            new_name,\n        )\n    )\n    if new_name.startswith('../'):\n        raise TemplateSyntaxError(\n            \"The relative path '%s' points outside the file hierarchy that \"\n            \"template '%s' is in.\" % (relative_name, current_template_name)\n        )\n    if current_template_name.lstrip('/') == new_name:\n        raise TemplateSyntaxError(\n            \"The relative path '%s' was translated to template name '%s', the \"\n            \"same template in which the tag appears.\"\n            % (relative_name, current_template_name)\n        )\n    return f'\"{new_name}\"' if has_quotes else new_name"}, "mark_safe": {"line": 49, "args": [{"func_args": {"s": "'django/forms/errors/list/ul.html'"}, "return_value": "'django/forms/errors/list/ul.html'"}, {"func_args": {"s": "''"}, "return_value": "''"}, {"func_args": {"s": "''"}, "return_value": "''"}, {"func_args": {"s": "'Attachments'"}, "return_value": "'Attachments'"}, {"func_args": {"s": "':'"}, "return_value": "':'"}, {"func_args": {"s": "'Attachments:'"}, "return_value": "'Attachments:'"}, {"func_args": {"s": "'django/forms/attrs.html'"}, "return_value": "'django/forms/attrs.html'"}, {"func_args": {"s": "'s'"}, "return_value": "'s'"}, {"func_args": {"s": "'for'"}, "return_value": "'for'"}, {"func_args": {"s": "'s'"}, "return_value": "'s'"}, {"func_args": {"s": "'id_attachments'"}, "return_value": "'id_attachments'"}, {"func_args": {"s": "' for=\"id_attachments\"'"}, "return_value": "' for=\"id_attachments\"'"}, {"func_args": {"s": "'<label for=\"id_attachments\">Attachments:</label>'"}, "return_value": "'<label for=\"id_attachments\">Attachments:</label>'"}, {"func_args": {"s": "'django/forms/widgets/attrs.html'"}, "return_value": "'django/forms/widgets/attrs.html'"}, {"func_args": {"s": "'file'"}, "return_value": "'file'"}, {"func_args": {"s": "'attachments'"}, "return_value": "'attachments'"}, {"func_args": {"s": "'s'"}, "return_value": "'s'"}, {"func_args": {"s": "'required'"}, "return_value": "'required'"}, {"func_args": {"s": "'id'"}, "return_value": "'id'"}, {"func_args": {"s": "'s'"}, "return_value": "'s'"}, {"func_args": {"s": "'id_attachments'"}, "return_value": "'id_attachments'"}, {"func_args": {"s": "'multiple'"}, "return_value": "'multiple'"}, {"func_args": {"s": "'s'"}, "return_value": "'s'"}, {"func_args": {"s": "'multiple'"}, "return_value": "'multiple'"}, {"func_args": {"s": "' required id=\"id_attachments\" multiple=\"multiple\"'"}, "return_value": "' required id=\"id_attachments\" multiple=\"multiple\"'"}, {"func_args": {"s": "'<input type=\"file\" name=\"attachments\" required id=\"id_attachments\" multiple=\"multiple\">'"}, "return_value": "'<input type=\"file\" name=\"attachments\" required id=\"id_attachments\" multiple=\"multiple\">'"}, {"func_args": {"s": "'<input type=\"file\" name=\"attachments\" required id=\"id_attachments\" multiple=\"multiple\">'"}, "return_value": "'<input type=\"file\" name=\"attachments\" required id=\"id_attachments\" multiple=\"multiple\">'"}, {"func_args": {"s": "'\\n  \\n  <p>\\n    <label for=\"id_attachments\">Attachments:</label>\\n    <input type=\"file\" name=\"attachments\" required id=\"id_attachments\" multiple=\"multiple\">\\n    \\n    \\n      \\n    \\n  </p>\\n'"}, "return_value": "'\\n  \\n  <p>\\n    <label for=\"id_attachments\">Attachments:</label>\\n    <input type=\"file\" name=\"attachments\" required id=\"id_attachments\" multiple=\"multiple\">\\n    \\n    \\n      \\n    \\n  </p>\\n'"}, {"func_args": {"s": "'<p>\\n    <label for=\"id_attachments\">Attachments:</label>\\n    <input type=\"file\" name=\"attachments\" required id=\"id_attachments\" multiple=\"multiple\">\\n    \\n    \\n      \\n    \\n  </p>'"}, "return_value": "'<p>\\n    <label for=\"id_attachments\">Attachments:</label>\\n    <input type=\"file\" name=\"attachments\" required id=\"id_attachments\" multiple=\"multiple\">\\n    \\n    \\n      \\n    \\n  </p>'"}], "text": "def mark_safe(s):\n    \"\"\"\n    Explicitly mark a string as safe for (HTML) output purposes. The returned\n    object can be used everywhere a string is appropriate.\n\n    If used on a method as a decorator, mark the returned data as safe.\n\n    Can be called multiple times on a single string.\n    \"\"\"\n    if hasattr(s, '__html__'):\n        return s\n    if callable(s):\n        return _safety_decorator(mark_safe, s)\n    return SafeString(s)"}, "conditional_escape": {"line": 91, "args": [{"func_args": {"text": "''"}, "return_value": "''"}, {"func_args": {"text": "''"}, "return_value": "''"}, {"func_args": {"text": "'Attachments'"}, "return_value": "'Attachments'"}, {"func_args": {"text": "':'"}, "return_value": "':'"}, {"func_args": {"text": "'for'"}, "return_value": "'for'"}, {"func_args": {"text": "'id_attachments'"}, "return_value": "'id_attachments'"}, {"func_args": {"text": "'Attachments:'"}, "return_value": "'Attachments:'"}, {"func_args": {"text": "'<label for=\"id_attachments\">Attachments:</label>'"}, "return_value": "'<label for=\"id_attachments\">Attachments:</label>'"}, {"func_args": {"text": "'file'"}, "return_value": "'file'"}, {"func_args": {"text": "'attachments'"}, "return_value": "'attachments'"}, {"func_args": {"text": "'required'"}, "return_value": "'required'"}, {"func_args": {"text": "'id'"}, "return_value": "'id'"}, {"func_args": {"text": "'id_attachments'"}, "return_value": "'id_attachments'"}, {"func_args": {"text": "'multiple'"}, "return_value": "'multiple'"}, {"func_args": {"text": "'multiple'"}, "return_value": "'multiple'"}, {"func_args": {"text": "'<input type=\"file\" name=\"attachments\" required id=\"id_attachments\" multiple=\"multiple\">'"}, "return_value": "'<input type=\"file\" name=\"attachments\" required id=\"id_attachments\" multiple=\"multiple\">'"}], "text": "def conditional_escape(text):\n    \"\"\"\n    Similar to escape(), except that it doesn't operate on pre-escaped strings.\n\n    This function relies on the __html__ convention used both by Django's\n    SafeData class and by third-party libraries like markupsafe.\n    \"\"\"\n    if isinstance(text, Promise):\n        text = str(text)\n    if hasattr(text, '__html__'):\n        return text.__html__()\n    else:\n        return escape(text)"}, "escape": {"line": 32, "args": [{"func_args": {"text": "'Attachments'"}, "return_value": "'Attachments'"}, {"func_args": {"text": "':'"}, "return_value": "':'"}, {"func_args": {"text": "'for'"}, "return_value": "'for'"}, {"func_args": {"text": "'id_attachments'"}, "return_value": "'id_attachments'"}, {"func_args": {"text": "'file'"}, "return_value": "'file'"}, {"func_args": {"text": "'attachments'"}, "return_value": "'attachments'"}, {"func_args": {"text": "'required'"}, "return_value": "'required'"}, {"func_args": {"text": "'id'"}, "return_value": "'id'"}, {"func_args": {"text": "'id_attachments'"}, "return_value": "'id_attachments'"}, {"func_args": {"text": "'multiple'"}, "return_value": "'multiple'"}, {"func_args": {"text": "'multiple'"}, "return_value": "'multiple'"}]}, "format_html": {"line": 106, "args": [{"func_args": {"format_string": "'{}{}'", "args": "('Attachments', ':')", "kwargs": "{}"}, "return_value": "'Attachments:'"}], "text": "def format_html(format_string, *args, **kwargs):\n    \"\"\"\n    Similar to str.format, but pass all arguments through conditional_escape(),\n    and call mark_safe() on the result. This function should be used instead\n    of str.format or % interpolation to build up small HTML fragments.\n    \"\"\"\n    args_safe = map(conditional_escape, args)\n    kwargs_safe = {k: conditional_escape(v) for (k, v) in kwargs.items()}\n    return mark_safe(format_string.format(*args_safe, **kwargs_safe))"}, "stringformat": {"line": 257, "args": [{"func_args": {"value": "'id_attachments'", "arg": "'s'"}, "return_value": "'id_attachments'"}, {"func_args": {"value": "'id_attachments'", "arg": "'s'"}, "return_value": "'id_attachments'"}, {"func_args": {"value": "'multiple'", "arg": "'s'"}, "return_value": "'multiple'"}]}, "validate_file_name": {"line": 6, "args": [{"func_args": {"name": "'test.txt'", "allow_relative_path": "False"}, "return_value": "'test.txt'"}, {"func_args": {"name": "'test.txt'", "allow_relative_path": "False"}, "return_value": "'test.txt'"}, {"func_args": {"name": "'test.txt'", "allow_relative_path": "False"}, "return_value": "'test.txt'"}, {"func_args": {"name": "'test.txt'", "allow_relative_path": "False"}, "return_value": "'test.txt'"}, {"func_args": {"name": "'test.txt'", "allow_relative_path": "False"}, "return_value": "'test.txt'"}, {"func_args": {"name": "'test.txt'", "allow_relative_path": "False"}, "return_value": "'test.txt'"}], "text": "def validate_file_name(name, allow_relative_path=False):\n    # Remove potentially dangerous names\n    if os.path.basename(name) in {'', '.', '..'}:\n        raise SuspiciousFileOperation(\"Could not derive file name from '%s'\" % name)\n\n    if allow_relative_path:\n        # Use PurePosixPath() because this branch is checked only in\n        # FileField.generate_filename() where all file paths are expected to be\n        # Unix style (with forward slashes).\n        path = pathlib.PurePosixPath(name)\n        if path.is_absolute() or '..' in path.parts:\n            raise SuspiciousFileOperation(\n                \"Detected path traversal attempt in '%s'\" % name\n            )\n    elif name != os.path.basename(name):\n        raise SuspiciousFileOperation(\"File name '%s' includes path elements\" % name)\n\n    return name"}}