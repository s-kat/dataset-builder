{"_args_converter": {"line": 816, "args": [{"func_args": {"args": "()"}, "return_value": "()"}], "text": "def _args_converter(args: Iterable[str]) -> Tuple[str, ...]:\n    return tuple(args)"}, "_get_plugin_specs_as_list": {"line": 715, "args": [{"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "None"}, "return_value": "[]"}], "text": "def _get_plugin_specs_as_list(\n    specs: Union[None, types.ModuleType, str, Sequence[str]]\n) -> List[str]:\n    \"\"\"Parse a plugins specification into a list of plugin names.\"\"\"\n    # None means empty.\n    if specs is None:\n        return []\n    # Workaround for #3899 - a submodule which happens to be called \"pytest_plugins\".\n    if isinstance(specs, types.ModuleType):\n        return []\n    # Comma-separated list.\n    if isinstance(specs, str):\n        return specs.split(\",\") if specs else []\n    # Direct specification.\n    if isinstance(specs, collections.abc.Sequence):\n        return list(specs)\n    raise UsageError(\n        \"Plugins may be specified as a sequence or a ','-separated string of plugin names. Got: %r\"\n        % specs\n    )"}, "_assertion_supported": {"line": 1511, "args": [{"func_args": {}, "return_value": "True"}], "text": "def _assertion_supported() -> bool:\n    try:\n        assert False\n    except AssertionError:\n        return True\n    else:\n        return False"}, "get_terminal_width": {"line": 15, "args": [{"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}], "text": "def get_terminal_width() -> int:\n    width, _ = shutil.get_terminal_size(fallback=(80, 24))\n\n    # The Windows get_terminal_size may be bogus, let's sanify a bit.\n    if width < 40:\n        width = 80\n\n    return width"}, "get_dirs_from_args": {"line": 134, "args": [{"func_args": {"args": "[]"}, "return_value": "[]"}], "text": "def get_dirs_from_args(args: Iterable[str]) -> List[Path]:\n    def is_option(x: str) -> bool:\n        return x.startswith(\"-\")\n\n    def get_file_part_from_node_id(x: str) -> str:\n        return x.split(\"::\")[0]\n\n    def get_dir_from_path(path: Path) -> Path:\n        if path.is_dir():\n            return path\n        return path.parent\n\n    def safe_exists(path: Path) -> bool:\n        # This can throw on paths that contain characters unrepresentable at the OS level,\n        # or with invalid syntax on Windows (https://bugs.python.org/issue35306)\n        try:\n            return path.exists()\n        except OSError:\n            return False\n\n    # These look like paths but may not exist\n    possible_paths = (\n        absolutepath(get_file_part_from_node_id(arg))\n        for arg in args\n        if not is_option(arg)\n    )\n\n    return [get_dir_from_path(path) for path in possible_paths if safe_exists(path)]"}, "iscommentline": {"line": 162, "args": [{"func_args": {"line": "'[tox]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'envlist = \\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tlint\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\ttypes\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tpy27\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tpy{38,37,36,35,34}\\n'"}, "return_value": "False"}, {"func_args": {"line": "'skip_missing_interpreters = True\\n'"}, "return_value": "False"}, {"func_args": {"line": "'skipsdist = True\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}, {"func_args": {"line": "'[testenv]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'passenv = DISPLAY\\n'"}, "return_value": "False"}, {"func_args": {"line": "'alwayscopy = True\\n'"}, "return_value": "False"}, {"func_args": {"line": "'deps = \\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tipy\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tmock ; python_version == \"2.7\"\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tmss == 4.0.3 ; python_version == \"2.7\"\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tmss ; python_version >= \"3\"\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tpillow ; sys_platform == \"win32\"\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tpytest\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tpytest-cov\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\trequests\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tviztracer \\n'"}, "return_value": "False"}, {"func_args": {"line": "'commands = \\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tpython -bb -m viztracer --ignore_frozen --log_func_args --log_func_retval -o result0.json -- pytest {posargs}\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}, {"func_args": {"line": "'[testenv:lint]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'description = Code quality check\\n'"}, "return_value": "False"}, {"func_args": {"line": "'deps = \\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tflake8\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tpylint\\n'"}, "return_value": "False"}, {"func_args": {"line": "'commands = \\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tpython -m flake8 tests tools pombo.py\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tpython -m pylint tests tools pombo.py\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}, {"func_args": {"line": "'[testenv:types]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'description = Type annotations check\\n'"}, "return_value": "False"}, {"func_args": {"line": "'deps = \\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tmypy\\n'"}, "return_value": "False"}, {"func_args": {"line": "'commands = \\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tpython -m mypy --ignore-missing-imports pombo.py\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}, {"func_args": {"line": "'[testenv:docs]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'description = Build the documentation\\n'"}, "return_value": "False"}, {"func_args": {"line": "'deps = sphinx\\n'"}, "return_value": "False"}, {"func_args": {"line": "'commands = \\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tsphinx-build -d \"{toxworkdir}/docs\" docs/source \"{toxworkdir}/docs_out\" --color -W -bhtml {posargs}\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tpython -c \"print(\\'documentation available under file://{toxworkdir}/docs_out/index.html\\')\"\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}, {"func_args": {"line": "'[flake8]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'ignore =\\n'"}, "return_value": "False"}, {"func_args": {"line": "\"    # E203 whitespace before ':', but E203 is not PEP 8 compliant\\n\""}, "return_value": "True"}, {"func_args": {"line": "'    E203\\n'"}, "return_value": "False"}, {"func_args": {"line": "'    # W503 line break before binary operator, but W503 is not PEP 8 compliant\\n'"}, "return_value": "True"}, {"func_args": {"line": "'    W503\\n'"}, "return_value": "False"}, {"func_args": {"line": "'max-line-length = 120\\n'"}, "return_value": "False"}, {"func_args": {"line": "'inline-quotes = double\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}, {"func_args": {"line": "'[tool:pytest]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'addopts =\\n'"}, "return_value": "False"}, {"func_args": {"line": "'    --cov-report=\\n'"}, "return_value": "False"}, {"func_args": {"line": "'    --cov-report=html\\n'"}, "return_value": "False"}, {"func_args": {"line": "'    --cov=pombo\\n'"}, "return_value": "False"}, {"func_args": {"line": "'    --showlocals\\n'"}, "return_value": "False"}, {"func_args": {"line": "'    --strict\\n'"}, "return_value": "False"}, {"func_args": {"line": "'    --failed-first\\n'"}, "return_value": "False"}, {"func_args": {"line": "'    -r fE\\n'"}, "return_value": "False"}], "text": "def iscommentline(line):\n    c = line.lstrip()[:1]\n    return c in COMMENTCHARS"}, "validate_report": {"line": 30, "args": [{"func_args": {"arg": "''"}, "return_value": "('', None)"}, {"func_args": {"arg": "'html'"}, "return_value": "('html', None)"}], "text": "def validate_report(arg):\n    file_choices = ['annotate', 'html', 'xml']\n    term_choices = ['term', 'term-missing']\n    term_modifier_choices = ['skip-covered']\n    all_choices = term_choices + file_choices\n    values = arg.split(\":\", 1)\n    report_type = values[0]\n    if report_type not in all_choices + ['']:\n        msg = f'invalid choice: \"{arg}\" (choose from \"{all_choices}\")'\n        raise argparse.ArgumentTypeError(msg)\n\n    if len(values) == 1:\n        return report_type, None\n\n    report_modifier = values[1]\n    if report_type in term_choices and report_modifier in term_modifier_choices:\n        return report_type, report_modifier\n\n    if report_type not in file_choices:\n        msg = 'output specifier not supported for: \"{}\" (choose from \"{}\")'.format(arg,\n                                                                                   file_choices)\n        raise argparse.ArgumentTypeError(msg)\n\n    return values"}, "_prepare_cov_source": {"line": 125, "args": [{"func_args": {"cov_source": "['pombo']"}, "return_value": "['pombo']"}], "text": "def _prepare_cov_source(cov_source):\n    \"\"\"\n    Prepare cov_source so that:\n\n     --cov --cov=foobar is equivalent to --cov (cov_source=None)\n     --cov=foo --cov=bar is equivalent to cov_source=['foo', 'bar']\n    \"\"\"\n    return None if True in cov_source else [path for path in cov_source if path is not True]"}, "bool_or_none": {"line": 174, "args": [{"func_args": {"b": "True"}, "return_value": "True"}, {"func_args": {"b": "True"}, "return_value": "True"}], "text": "def bool_or_none(b):\n    \"\"\"Return bool(b), but preserve None.\"\"\"\n    if b is None:\n        return None\n    else:\n        return bool(b)"}, "tryint": {"line": 370, "args": [{"func_args": {"s": "'/usr/app/src/test_repos/pombo/.tox/py'"}, "return_value": "'/usr/app/src/test_repos/pombo/.tox/py'"}, {"func_args": {"s": "'38'"}, "return_value": "38"}, {"func_args": {"s": "'/lib/python'"}, "return_value": "'/lib/python'"}, {"func_args": {"s": "'3'"}, "return_value": "3"}, {"func_args": {"s": "'.'"}, "return_value": "'.'"}, {"func_args": {"s": "'8'"}, "return_value": "8"}, {"func_args": {"s": "'/site-packages/coverage'"}, "return_value": "'/site-packages/coverage'"}, {"func_args": {"s": "'/usr/app/src/test_repos/pombo/.tox/py'"}, "return_value": "'/usr/app/src/test_repos/pombo/.tox/py'"}, {"func_args": {"s": "'38'"}, "return_value": "38"}, {"func_args": {"s": "'/lib/python'"}, "return_value": "'/lib/python'"}, {"func_args": {"s": "'3'"}, "return_value": "3"}, {"func_args": {"s": "'.'"}, "return_value": "'.'"}, {"func_args": {"s": "'8'"}, "return_value": "8"}, {"func_args": {"s": "'/site-packages'"}, "return_value": "'/site-packages'"}, {"func_args": {"s": "'/usr/app/src/test_repos/pombo/.tox/py'"}, "return_value": "'/usr/app/src/test_repos/pombo/.tox/py'"}, {"func_args": {"s": "'38'"}, "return_value": "38"}, {"func_args": {"s": "'/lib/python'"}, "return_value": "'/lib/python'"}, {"func_args": {"s": "'/usr/app/src/test_repos/pombo/.tox/py'"}, "return_value": "'/usr/app/src/test_repos/pombo/.tox/py'"}, {"func_args": {"s": "'38'"}, "return_value": "38"}, {"func_args": {"s": "'/bin'"}, "return_value": "'/bin'"}, {"func_args": {"s": "'/root/.local/bin'"}, "return_value": "'/root/.local/bin'"}, {"func_args": {"s": "'/root/.local/lib/python'"}, "return_value": "'/root/.local/lib/python'"}, {"func_args": {"s": "'3'"}, "return_value": "3"}, {"func_args": {"s": "'.'"}, "return_value": "'.'"}, {"func_args": {"s": "'8'"}, "return_value": "8"}, {"func_args": {"s": "'/site-packages'"}, "return_value": "'/site-packages'"}], "text": "def tryint(s):\n        \"\"\"If `s` is a number, return an int, else `s` unchanged.\"\"\"\n        try:\n            return int(s)\n        except ValueError:\n            return s"}, "human_key": {"line": 366, "args": [{"func_args": {"s": "'/usr/app/src/test_repos/pombo/.tox/py38/lib/python3.8/site-packages/coverage'"}, "return_value": "['/usr/app/src/test_repos/pombo/.tox/py', 38, '/lib/python', 3, '.', 8, '/site-packages/coverage']"}, {"func_args": {"s": "'/usr/app/src/test_repos/pombo/.tox/py38/lib/python3.8/site-packages'"}, "return_value": "['/usr/app/src/test_repos/pombo/.tox/py', 38, '/lib/python', 3, '.', 8, '/site-packages']"}, {"func_args": {"s": "'/usr/app/src/test_repos/pombo/.tox/py38/lib/python'"}, "return_value": "['/usr/app/src/test_repos/pombo/.tox/py', 38, '/lib/python']"}, {"func_args": {"s": "'/usr/app/src/test_repos/pombo/.tox/py38/bin'"}, "return_value": "['/usr/app/src/test_repos/pombo/.tox/py', 38, '/bin']"}, {"func_args": {"s": "'/root/.local/bin'"}, "return_value": "['/root/.local/bin']"}, {"func_args": {"s": "'/root/.local/lib/python3.8/site-packages'"}, "return_value": "['/root/.local/lib/python', 3, '.', 8, '/site-packages']"}], "text": "def human_key(s):\n    \"\"\"Turn a string into a list of string and number chunks.\n        \"z23a\" -> [\"z\", 23, \"a\"]\n    \"\"\"\n    def tryint(s):\n        \"\"\"If `s` is a number, return an int, else `s` unchanged.\"\"\"\n        try:\n            return int(s)\n        except ValueError:\n            return s\n\n    return [tryint(c) for c in re.split(r\"(\\d+)\", s)]"}, "human_sorted": {"line": 379, "args": [{"func_args": {"strings": "{'/usr/app/src/test_repos/pombo/.tox/py38/lib/python3.8/site-packages/coverage'}"}, "return_value": "['/usr/app/src/test_repos/pombo/.tox/py38/lib/python3.8/site-packages/coverage']"}, {"func_args": {"strings": "{'/usr/app/src/test_repos/pombo/.tox/py38/lib/python3.8/site-packages', '/usr/app/src/test_repos/pombo/.tox/py38/lib/python', '/usr/app/src/test_repos/pombo/.tox/py38/bin', '/root/.local/bin', '/root/.local/lib/python3.8/site-packages'}"}, "return_value": "['/root/.local/bin', '/root/.local/lib/python3.8/site-packages', '/usr/app/src/test_repos/pombo/.tox/py38/bin', '/usr/app/src/test_repos/pombo/.tox/py38/lib/python', '/usr/app/src/test_repos/pombo/.tox/py38/lib/python3.8/site-packages']"}], "text": "def human_sorted(strings):\n    \"\"\"Sort the given iterable of strings the way that humans expect.\n\n    Numeric components in the strings are sorted as numbers.\n\n    Returns the sorted list.\n\n    \"\"\"\n    return sorted(strings, key=human_key)"}, "config_files_to_try": {"line": 492, "args": [{"func_args": {"config_file": "'.coveragerc'"}, "return_value": "[('.coveragerc', True, False), ('setup.cfg', False, False), ('tox.ini', False, False), ('pyproject.toml', False, False)]"}, {"func_args": {"config_file": "'.coveragerc'"}, "return_value": "[('.coveragerc', True, False), ('setup.cfg', False, False), ('tox.ini', False, False), ('pyproject.toml', False, False)]"}], "text": "def config_files_to_try(config_file):\n    \"\"\"What config files should we try to read?\n\n    Returns a list of tuples:\n        (filename, is_our_file, was_file_specified)\n    \"\"\"\n\n    # Some API users were specifying \".coveragerc\" to mean the same as\n    # True, so make it so.\n    if config_file == \".coveragerc\":\n        config_file = True\n    specified_file = (config_file is not True)\n    if not specified_file:\n        # No file was specified. Check COVERAGE_RCFILE.\n        config_file = os.environ.get('COVERAGE_RCFILE')\n        if config_file:\n            specified_file = True\n    if not specified_file:\n        # Still no file specified. Default to .coveragerc\n        config_file = \".coveragerc\"\n    files_to_try = [\n        (config_file, True, specified_file),\n        (\"setup.cfg\", False, False),\n        (\"tox.ini\", False, False),\n        (\"pyproject.toml\", False, False),\n    ]\n    return files_to_try"}, "short_stack": {"line": 136, "args": [{"func_args": {"limit": "None", "skip": "0"}, "return_value": "'           _run_module_as_main : /usr/local/lib/python3.8/runpy.py:194\\n                     _run_code : /usr/local/lib/python3.8/runpy.py:87\\n                      <module> : /usr/app/src/test_repos/pombo/.tox/py38/lib/python3.8/site-packages/viztracer/__main__.py:8\\n                          main : /usr/app/src/test_repos/pombo/.tox/py38/lib/python3.8/site-packages/viztracer/main.py:523\\n                           run : /usr/app/src/test_repos/pombo/.tox/py38/lib/python3.8/site-packages/viztracer/main.py:332\\n                   run_command : /usr/app/src/test_repos/pombo/.tox/py38/lib/python3.8/site-packages/viztracer/main.py:438\\n                      run_code : /usr/app/src/test_repos/pombo/.tox/py38/lib/python3.8/site-packages/viztracer/main.py:355\\n                      <module> : /usr/app/src/test_repos/pombo/.tox/py38/bin/pytest:8\\n                  console_main : /usr/app/src/test_repos/pombo/.tox/py38/lib/python3.8/site-packages/_pytest/config/__init__.py:185\\n                          main : /usr/app/src/test_repos/pombo/.tox/py38/lib/python3.8/site-packages/_pytest/config/__init__.py:143\\n                _prepareconfig : /usr/app/src/test_repos/pombo/.tox/py38/lib/python3.8/site-packages/_pytest/config/__init__.py:318\\n                      __call__ : /usr/app/src/test_repos/pombo/.tox/py38/lib/python3.8/site-packages/pluggy/_hooks.py:265\\n                     _hookexec : /usr/app/src/test_repos/pombo/.tox/py38/lib/python3.8/site-packages/pluggy/_manager.py:80\\n                    _multicall : /usr/app/src/test_repos/pombo/.tox/py38/lib/python3.8/site-packages/pluggy/_callers.py:39\\n          pytest_cmdline_parse : /usr/app/src/test_repos/pombo/.tox/py38/lib/python3.8/site-packages/_pytest/config/__init__.py:1003\\n                         parse : /usr/app/src/test_repos/pombo/.tox/py38/lib/python3.8/site-packages/_pytest/config/__init__.py:1283\\n                     _preparse : /usr/app/src/test_repos/pombo/.tox/py38/lib/python3.8/site-packages/_pytest/config/__init__.py:1191\\n                      __call__ : /usr/app/src/test_repos/pombo/.tox/py38/lib/python3.8/site-packages/pluggy/_hooks.py:265\\n                     _hookexec : /usr/app/src/test_repos/pombo/.tox/py38/lib/python3.8/site-packages/pluggy/_manager.py:80\\n                    _multicall : /usr/app/src/test_repos/pombo/.tox/py38/lib/python3.8/site-packages/pluggy/_callers.py:39\\n pytest_load_initial_conftests : /usr/app/src/test_repos/pombo/.tox/py38/lib/python3.8/site-packages/pytest_cov/plugin.py:149\\n                      __init__ : /usr/app/src/test_repos/pombo/.tox/py38/lib/python3.8/site-packages/pytest_cov/plugin.py:200\\n                         start : /usr/app/src/test_repos/pombo/.tox/py38/lib/python3.8/site-packages/pytest_cov/plugin.py:222\\n         ensure_topdir_wrapper : /usr/app/src/test_repos/pombo/.tox/py38/lib/python3.8/site-packages/pytest_cov/engine.py:44\\n                         start : /usr/app/src/test_repos/pombo/.tox/py38/lib/python3.8/site-packages/pytest_cov/engine.py:222\\n                         start : /usr/app/src/test_repos/pombo/.tox/py38/lib/python3.8/site-packages/coverage/control.py:558\\n               _init_for_start : /usr/app/src/test_repos/pombo/.tox/py38/lib/python3.8/site-packages/coverage/control.py:473\\n                      __init__ : /usr/app/src/test_repos/pombo/.tox/py38/lib/python3.8/site-packages/coverage/collector.py:114'"}], "text": "def short_stack(limit=None, skip=0):\n    \"\"\"Return a string summarizing the call stack.\n\n    The string is multi-line, with one line per stack frame. Each line shows\n    the function name, the file name, and the line number:\n\n        ...\n        start_import_stop : /Users/ned/coverage/trunk/tests/coveragetest.py @95\n        import_local_file : /Users/ned/coverage/trunk/tests/coveragetest.py @81\n        import_local_file : /Users/ned/coverage/trunk/coverage/backward.py @159\n        ...\n\n    `limit` is the number of frames to include, defaulting to all of them.\n\n    `skip` is the number of frames to skip, so that debugging functions can\n    call this and not be included in the result.\n\n    \"\"\"\n    stack = inspect.stack()[limit:skip:-1]\n    return \"\\n\".join(\"%30s : %s:%d\" % (t[3], t[1], t[2]) for t in stack)"}, "actual_path": {"line": 139, "args": [{"func_args": {"path": "'/usr/app/src/test_repos/pombo'"}, "return_value": "'/usr/app/src/test_repos/pombo'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/inspect.py'"}, "return_value": "'/usr/local/lib/python3.8/inspect.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/os.py'"}, "return_value": "'/usr/local/lib/python3.8/os.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/platform.py'"}, "return_value": "'/usr/local/lib/python3.8/platform.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/re.py'"}, "return_value": "'/usr/local/lib/python3.8/re.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/sysconfig.py'"}, "return_value": "'/usr/local/lib/python3.8/sysconfig.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/traceback.py'"}, "return_value": "'/usr/local/lib/python3.8/traceback.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/pombo/.tox/py38/lib/python3.8/site-packages/coverage/inorout.py'"}, "return_value": "'/usr/app/src/test_repos/pombo/.tox/py38/lib/python3.8/site-packages/coverage/inorout.py'"}], "text": "def actual_path(path):\n        \"\"\"The actual path for non-Windows platforms.\"\"\"\n        return path"}, "abs_file": {"line": 144, "args": [{"func_args": {"path": "'.'"}, "return_value": "'/usr/app/src/test_repos/pombo'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/inspect.py'"}, "return_value": "'/usr/local/lib/python3.8/inspect.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/os.py'"}, "return_value": "'/usr/local/lib/python3.8/os.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/platform.py'"}, "return_value": "'/usr/local/lib/python3.8/platform.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/re.py'"}, "return_value": "'/usr/local/lib/python3.8/re.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/sysconfig.py'"}, "return_value": "'/usr/local/lib/python3.8/sysconfig.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/traceback.py'"}, "return_value": "'/usr/local/lib/python3.8/traceback.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/pombo/.tox/py38/lib/python3.8/site-packages/coverage/inorout.py'"}, "return_value": "'/usr/app/src/test_repos/pombo/.tox/py38/lib/python3.8/site-packages/coverage/inorout.py'"}]}, "prep_patterns": {"line": 173, "args": [{"func_args": {"patterns": "None"}, "return_value": "[]"}, {"func_args": {"patterns": "None"}, "return_value": "[]"}], "text": "def prep_patterns(patterns):\n    \"\"\"Prepare the file patterns for use in a `FnmatchMatcher`.\n\n    If a pattern starts with a wildcard, it is used as a pattern\n    as-is.  If it does not start with a wildcard, then it is made\n    absolute with the current directory.\n\n    If `patterns` is None, an empty list is returned.\n\n    \"\"\"\n    prepped = []\n    for p in patterns or []:\n        if p.startswith((\"*\", \"?\")):\n            prepped.append(p)\n        else:\n            prepped.append(abs_file(p))\n    return prepped"}, "canonical_filename": {"line": 53, "args": [{"func_args": {"filename": "'/usr/local/lib/python3.8/inspect.py'"}, "return_value": "'/usr/local/lib/python3.8/inspect.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/os.py'"}, "return_value": "'/usr/local/lib/python3.8/os.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/platform.py'"}, "return_value": "'/usr/local/lib/python3.8/platform.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/re.py'"}, "return_value": "'/usr/local/lib/python3.8/re.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/sysconfig.py'"}, "return_value": "'/usr/local/lib/python3.8/sysconfig.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/traceback.py'"}, "return_value": "'/usr/local/lib/python3.8/traceback.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/pombo/.tox/py38/lib/python3.8/site-packages/coverage/inorout.py'"}, "return_value": "'/usr/app/src/test_repos/pombo/.tox/py38/lib/python3.8/site-packages/coverage/inorout.py'"}]}, "filename_suffix": {"line": 1006, "args": [{"func_args": {"suffix": "None"}, "return_value": "None"}, {"func_args": {"suffix": "True"}, "return_value": "'cae2a1e14906.59747.766713'"}], "text": "def filename_suffix(suffix):\n    \"\"\"Compute a filename suffix for a data file.\n\n    If `suffix` is a string or None, simply return it. If `suffix` is True,\n    then build a suffix incorporating the hostname, process id, and a random\n    number.\n\n    Returns a string or None.\n\n    \"\"\"\n    if suffix is True:\n        # If data_suffix was a simple true value, then make a suffix with\n        # plenty of distinguishing information.  We do this here in\n        # `save()` at the last minute so that the pid will be correct even\n        # if the process forks.\n        dice = random.Random(os.urandom(8)).randint(0, 999999)\n        suffix = \"%s.%s.%06d\" % (socket.gethostname(), os.getpid(), dice)\n    return suffix"}, "file_and_path_for_module": {"line": 110, "args": [{"func_args": {"modulename": "'pombo'"}, "return_value": "('/usr/app/src/test_repos/pombo/pombo.py', [])"}], "text": "def file_and_path_for_module(modulename):\n    \"\"\"Find the file and search path for `modulename`.\n\n    Returns:\n        filename: The filename of the module, or None.\n        path: A list (possibly empty) of directories to find submodules in.\n\n    \"\"\"\n    filename = None\n    path = []\n    try:\n        spec = importlib.util.find_spec(modulename)\n    except Exception:\n        pass\n    else:\n        if spec is not None:\n            if spec.origin != \"namespace\":\n                filename = spec.origin\n            path = list(spec.submodule_search_locations or ())\n    return filename, path"}, "source_for_file": {"line": 97, "args": [{"func_args": {"filename": "'/usr/local/lib/python3.8/inspect.py'"}, "return_value": "'/usr/local/lib/python3.8/inspect.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/os.py'"}, "return_value": "'/usr/local/lib/python3.8/os.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/platform.py'"}, "return_value": "'/usr/local/lib/python3.8/platform.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/re.py'"}, "return_value": "'/usr/local/lib/python3.8/re.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/sysconfig.py'"}, "return_value": "'/usr/local/lib/python3.8/sysconfig.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/traceback.py'"}, "return_value": "'/usr/local/lib/python3.8/traceback.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/pombo/.tox/py38/lib/python3.8/site-packages/coverage/inorout.py'"}, "return_value": "'/usr/app/src/test_repos/pombo/.tox/py38/lib/python3.8/site-packages/coverage/inorout.py'"}], "text": "def source_for_file(filename):\n    \"\"\"Return the source filename for `filename`.\n\n    Given a file name being traced, return the best guess as to the source\n    file to attribute it to.\n\n    \"\"\"\n    if filename.endswith(\".py\"):\n        # .py files are themselves source files.\n        return filename\n\n    elif filename.endswith((\".pyc\", \".pyo\")):\n        # Bytecode files probably have source files near them.\n        py_filename = filename[:-1]\n        if os.path.exists(py_filename):\n            # Found a .py file, use that.\n            return py_filename\n        if env.WINDOWS:\n            # On Windows, it could be a .pyw file.\n            pyw_filename = py_filename + \"w\"\n            if os.path.exists(pyw_filename):\n                return pyw_filename\n        # Didn't find source, but it's probably the .py file we want.\n        return py_filename\n\n    elif filename.endswith(\"$py.class\"):\n        # Jython is easy to guess.\n        return filename[:-9] + \".py\"\n\n    # No idea, just use the file name as-is.\n    return filename"}, "isimportable": {"line": 1026, "args": [{"func_args": {"name": "'tests'"}, "return_value": "True"}], "text": "def isimportable(name):\n    if name and (name[0].isalpha() or name[0] == '_'):\n        name = name.replace(\"_\", '')\n        return not name or name.isalnum()"}}