{"_args_converter": {"line": 816, "args": [{"func_args": {"args": "['--cov', 'seqseek', '--cov-report', 'term-missing', 'seqseek']"}, "return_value": "('--cov', 'seqseek', '--cov-report', 'term-missing', 'seqseek')"}], "text": "def _args_converter(args: Iterable[str]) -> Tuple[str, ...]:\n    return tuple(args)"}, "_get_plugin_specs_as_list": {"line": 715, "args": [{"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "None"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}], "text": "def _get_plugin_specs_as_list(\n    specs: Union[None, types.ModuleType, str, Sequence[str]]\n) -> List[str]:\n    \"\"\"Parse a plugins specification into a list of plugin names.\"\"\"\n    # None means empty.\n    if specs is None:\n        return []\n    # Workaround for #3899 - a submodule which happens to be called \"pytest_plugins\".\n    if isinstance(specs, types.ModuleType):\n        return []\n    # Comma-separated list.\n    if isinstance(specs, str):\n        return specs.split(\",\") if specs else []\n    # Direct specification.\n    if isinstance(specs, collections.abc.Sequence):\n        return list(specs)\n    raise UsageError(\n        \"Plugins may be specified as a sequence or a ','-separated string of plugin names. Got: %r\"\n        % specs\n    )"}, "_assertion_supported": {"line": 1511, "args": [{"func_args": {}, "return_value": "True"}], "text": "def _assertion_supported() -> bool:\n    try:\n        assert False\n    except AssertionError:\n        return True\n    else:\n        return False"}, "scope2index": {"line": 803, "args": [{"func_args": {"scope": "'session'", "descr": "\"Fixture 'pytestconfig'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'capfd'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'capfdbinary'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'capsys'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'capsysbinary'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'tmp_path'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'session'", "descr": "\"Fixture 'tmp_path_factory'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'tmpdir'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'session'", "descr": "\"Fixture 'tmpdir_factory'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'monkeypatch'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'recwarn'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'record_property'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'session'", "descr": "\"Fixture 'record_testsuite_property'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'record_xml_attribute'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'session'", "descr": "\"Fixture 'doctest_namespace'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'cache'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'caplog'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'cov'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'no_cover'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'class'", "descr": "\"Fixture 'fixture'\"", "where": "'seqseek/tests/test_functional.py::TestDataDirectory'"}, "return_value": "3"}, {"func_args": {"scope": "'class'", "descr": "\"Fixture 'fixture'\"", "where": "'seqseek/tests/test_functional.py::TestChromosome'"}, "return_value": "3"}, {"func_args": {"scope": "'class'", "descr": "\"Fixture 'fixture'\"", "where": "'seqseek/tests/test_functional.py::TestInvalidQueries'"}, "return_value": "3"}, {"func_args": {"scope": "'class'", "descr": "\"Fixture 'fixture'\"", "where": "'seqseek/tests/test_functional.py::TestCLI'"}, "return_value": "3"}, {"func_args": {"scope": "'class'", "descr": "\"Fixture 'fixture'\"", "where": "'seqseek/tests/test_functional.py::TestCase'"}, "return_value": "3"}], "text": "def scope2index(scope: str, descr: str, where: Optional[str] = None) -> int:\n    \"\"\"Look up the index of ``scope`` and raise a descriptive value error\n    if not defined.\"\"\"\n    strscopes: Sequence[str] = scopes\n    try:\n        return strscopes.index(scope)\n    except ValueError:\n        fail(\n            \"{} {}got an unexpected scope value '{}'\".format(\n                descr, f\"from {where} \" if where else \"\", scope\n            ),\n            pytrace=False,\n        )"}, "sort_by_scope": {"line": 1539, "args": [{"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestDataDirectory'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestDataDirectory'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestChromosome'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestChromosome'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestChromosome'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestChromosome'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestChromosome'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestChromosome'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestChromosome'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestChromosome'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestChromosome'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestChromosome'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestInvalidQueries'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestInvalidQueries'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestInvalidQueries'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestInvalidQueries'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestInvalidQueries'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestInvalidQueries'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestCLI'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestCLI'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestCLI'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}], "text": "def sort_by_scope(arg_name: str) -> int:\n            try:\n                fixturedefs = arg2fixturedefs[arg_name]\n            except KeyError:\n                return scopes.index(\"function\")\n            else:\n                return fixturedefs[-1].scopenum"}, "scopemismatch": {"line": 799, "args": [{"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}], "text": "def scopemismatch(currentscope: \"_Scope\", newscope: \"_Scope\") -> bool:\n    return scopes.index(newscope) > scopes.index(currentscope)"}, "pluralize": {"line": 1350, "args": [{"func_args": {"count": "21", "noun": "'passed'"}, "return_value": "(21, 'passed')"}], "text": "def pluralize(count: int, noun: str) -> Tuple[int, str]:\n    # No need to pluralize words such as `failed` or `passed`.\n    if noun not in [\"error\", \"warnings\", \"test\"]:\n        return count, noun\n\n    # The `warnings` key is plural. To avoid API breakage, we keep it that way but\n    # set it to singular here so we can determine plurality in the same way as we do\n    # for `error`.\n    noun = noun.replace(\"warnings\", \"warning\")\n\n    return count, noun + \"s\" if count != 1 else noun"}, "format_session_duration": {"line": 1377, "args": [{"func_args": {"seconds": "1.059114933013916"}, "return_value": "'1.06s'"}], "text": "def format_session_duration(seconds: float) -> str:\n    \"\"\"Format the given seconds in a human readable manner to show in the final summary.\"\"\"\n    if seconds < 60:\n        return f\"{seconds:.2f}s\"\n    else:\n        dt = datetime.timedelta(seconds=int(seconds))\n        return f\"{seconds:.2f}s ({dt})\""}, "_get_auto_indent": {"line": 113, "args": [{"func_args": {"auto_indent_option": "None"}, "return_value": "0"}, {"func_args": {"auto_indent_option": "None"}, "return_value": "0"}]}, "_get_stderr_fileno": {"line": 68, "args": [{"func_args": {}, "return_value": "2"}, {"func_args": {}, "return_value": "2"}]}, "get_terminal_width": {"line": 15, "args": [{"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}], "text": "def get_terminal_width() -> int:\n    width, _ = shutil.get_terminal_size(fallback=(80, 24))\n\n    # The Windows get_terminal_size may be bogus, let's sanify a bit.\n    if width < 40:\n        width = 80\n\n    return width"}, "is_option": {"line": 135, "args": [{"func_args": {"x": "'seqseek'"}, "return_value": "False"}, {"func_args": {"x": "'--cov'"}, "return_value": "True"}, {"func_args": {"x": "'--cov-report'"}, "return_value": "True"}, {"func_args": {"x": "'term-missing'"}, "return_value": "False"}, {"func_args": {"x": "'seqseek'"}, "return_value": "False"}], "text": "def is_option(x: str) -> bool:\n        return x.startswith(\"-\")"}, "get_file_part_from_node_id": {"line": 138, "args": [{"func_args": {"x": "'seqseek'"}, "return_value": "'seqseek'"}, {"func_args": {"x": "'term-missing'"}, "return_value": "'term-missing'"}, {"func_args": {"x": "'seqseek'"}, "return_value": "'seqseek'"}], "text": "def get_file_part_from_node_id(x: str) -> str:\n        return x.split(\"::\")[0]"}, "parts": {"line": 420, "args": [{"func_args": {"s": "'/usr/app/src/test_repos/seqseek/seqseek/chromosome.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/seqseek', '/', '/usr/app/src/test_repos/seqseek/seqseek/chromosome.py', '/usr', '/usr/app/src/test_repos/seqseek/seqseek', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/seqseek/seqseek/cli.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/seqseek', '/', '/usr', '/usr/app/src/test_repos/seqseek/seqseek', '/usr/app/src/test_repos/seqseek/seqseek/cli.py', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/seqseek/seqseek/downloader.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/seqseek', '/', '/usr/app/src/test_repos/seqseek/seqseek/downloader.py', '/usr', '/usr/app/src/test_repos/seqseek/seqseek', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/seqseek/seqseek/exceptions.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/seqseek', '/', '/usr', '/usr/app/src/test_repos/seqseek/seqseek', '/usr/app/src/test_repos/seqseek/seqseek/exceptions.py', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/seqseek/seqseek/format_fasta.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src/test_repos/seqseek/seqseek/format_fasta.py', '/usr/app/src', '/usr/app/src/test_repos/seqseek', '/', '/usr', '/usr/app/src/test_repos/seqseek/seqseek', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/seqseek/seqseek/lib.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/seqseek', '/usr/app/src/test_repos/seqseek/seqseek/lib.py', '/', '/usr', '/usr/app/src/test_repos/seqseek/seqseek', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/seqseek/seqseek/tests'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/seqseek', '/', '/usr/app/src/test_repos/seqseek/seqseek/tests', '/usr', '/usr/app/src/test_repos/seqseek/seqseek', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/seqseek/seqseek/tests/__init__.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/seqseek', '/', '/usr/app/src/test_repos/seqseek/seqseek/tests', '/usr', '/usr/app/src/test_repos/seqseek/seqseek', '/usr/app/src/test_repos/seqseek/seqseek/tests/__init__.py', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/seqseek', '/', '/usr/app/src/test_repos/seqseek/seqseek/tests', '/usr', '/usr/app/src/test_repos/seqseek/seqseek', '/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_chromosomes'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/seqseek', '/', '/usr/app/src/test_repos/seqseek/seqseek/tests', '/usr/app/src/test_repos/seqseek/seqseek/tests/test_chromosomes', '/usr', '/usr/app/src/test_repos/seqseek/seqseek', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_functional.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/seqseek/seqseek/tests/test_functional.py', '/usr/app/src/test_repos/seqseek', '/', '/usr/app/src/test_repos/seqseek/seqseek/tests', '/usr', '/usr/app/src/test_repos/seqseek/seqseek', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_meta_test.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/seqseek/seqseek/tests/test_meta_test.py', '/usr/app/src/test_repos/seqseek', '/', '/usr/app/src/test_repos/seqseek/seqseek/tests', '/usr', '/usr/app/src/test_repos/seqseek/seqseek', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/__init__.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/__init__.py', '/usr/app/src', '/usr/app/src/test_repos/seqseek', '/', '/usr/app/src/test_repos/seqseek/seqseek/tests', '/usr', '/usr/app/src/test_repos/seqseek/seqseek', '/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_37_tests.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/seqseek', '/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_37_tests.py', '/', '/usr/app/src/test_repos/seqseek/seqseek/tests', '/usr', '/usr/app/src/test_repos/seqseek/seqseek', '/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_38_tests.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/seqseek', '/', '/usr/app/src/test_repos/seqseek/seqseek/tests', '/usr', '/usr/app/src/test_repos/seqseek/seqseek', '/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_38_tests.py', '/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_specific_tests.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_specific_tests.py', '/usr/app/src/test_repos/seqseek', '/', '/usr/app/src/test_repos/seqseek/seqseek/tests', '/usr', '/usr/app/src/test_repos/seqseek/seqseek', '/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_chromosomes/NC_000001.10.fa'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/seqseek/seqseek/tests/test_chromosomes/NC_000001.10.fa', '/usr/app/src/test_repos/seqseek', '/', '/usr/app/src/test_repos/seqseek/seqseek/tests', '/usr/app/src/test_repos/seqseek/seqseek/tests/test_chromosomes', '/usr', '/usr/app/src/test_repos/seqseek/seqseek', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_chromosomes/NC_012920.1.fa'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/seqseek', '/usr/app/src/test_repos/seqseek/seqseek/tests/test_chromosomes/NC_012920.1.fa', '/', '/usr/app/src/test_repos/seqseek/seqseek/tests', '/usr/app/src/test_repos/seqseek/seqseek/tests/test_chromosomes', '/usr', '/usr/app/src/test_repos/seqseek/seqseek', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/seqseek', '/', '/usr/app/src/test_repos/seqseek/seqseek/tests', '/usr', '/usr/app/src/test_repos/seqseek/seqseek', '/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_chromosomes'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/seqseek', '/', '/usr/app/src/test_repos/seqseek/seqseek/tests', '/usr/app/src/test_repos/seqseek/seqseek/tests/test_chromosomes', '/usr', '/usr/app/src/test_repos/seqseek/seqseek', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_functional.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/seqseek/seqseek/tests/test_functional.py', '/usr/app/src/test_repos/seqseek', '/', '/usr/app/src/test_repos/seqseek/seqseek/tests', '/usr', '/usr/app/src/test_repos/seqseek/seqseek', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_meta_test.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/seqseek/seqseek/tests/test_meta_test.py', '/usr/app/src/test_repos/seqseek', '/', '/usr/app/src/test_repos/seqseek/seqseek/tests', '/usr', '/usr/app/src/test_repos/seqseek/seqseek', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/__init__.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/__init__.py', '/usr/app/src', '/usr/app/src/test_repos/seqseek', '/', '/usr/app/src/test_repos/seqseek/seqseek/tests', '/usr', '/usr/app/src/test_repos/seqseek/seqseek', '/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_37_tests.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/seqseek', '/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_37_tests.py', '/', '/usr/app/src/test_repos/seqseek/seqseek/tests', '/usr', '/usr/app/src/test_repos/seqseek/seqseek', '/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_38_tests.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/seqseek', '/', '/usr/app/src/test_repos/seqseek/seqseek/tests', '/usr', '/usr/app/src/test_repos/seqseek/seqseek', '/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_38_tests.py', '/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_specific_tests.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_specific_tests.py', '/usr/app/src/test_repos/seqseek', '/', '/usr/app/src/test_repos/seqseek/seqseek/tests', '/usr', '/usr/app/src/test_repos/seqseek/seqseek', '/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_chromosomes/NC_000001.10.fa'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/seqseek/seqseek/tests/test_chromosomes/NC_000001.10.fa', '/usr/app/src/test_repos/seqseek', '/', '/usr/app/src/test_repos/seqseek/seqseek/tests', '/usr/app/src/test_repos/seqseek/seqseek/tests/test_chromosomes', '/usr', '/usr/app/src/test_repos/seqseek/seqseek', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_chromosomes/NC_012920.1.fa'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/seqseek', '/usr/app/src/test_repos/seqseek/seqseek/tests/test_chromosomes/NC_012920.1.fa', '/', '/usr/app/src/test_repos/seqseek/seqseek/tests', '/usr/app/src/test_repos/seqseek/seqseek/tests/test_chromosomes', '/usr', '/usr/app/src/test_repos/seqseek/seqseek', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_37_tests.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/seqseek', '/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_37_tests.py', '/', '/usr/app/src/test_repos/seqseek/seqseek/tests', '/usr', '/usr/app/src/test_repos/seqseek/seqseek', '/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_38_tests.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/seqseek', '/', '/usr/app/src/test_repos/seqseek/seqseek/tests', '/usr', '/usr/app/src/test_repos/seqseek/seqseek', '/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_38_tests.py', '/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_specific_tests.py'"}, "return_value": "{'/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_specific_tests.py', '/usr/app/src/test_repos/seqseek', '/', '/usr/app/src/test_repos/seqseek/seqseek/tests', '/usr', '/usr/app/src/test_repos/seqseek/seqseek', '/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests', '/usr/app'}"}], "text": "def parts(s: str) -> Set[str]:\n    parts = s.split(sep)\n    return {sep.join(parts[: i + 1]) or sep for i in range(len(parts))}"}, "_is_same": {"line": 558, "args": [{"func_args": {"f1": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_functional.py'", "f2": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_functional.py'"}, "return_value": "True"}, {"func_args": {"f1": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_meta_test.py'", "f2": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_meta_test.py'"}, "return_value": "True"}], "text": "def _is_same(f1: str, f2: str) -> bool:\n        return os.path.samefile(f1, f2)"}, "iscommentline": {"line": 162, "args": [{"func_args": {"line": "'[tox]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'envlist = py3\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}, {"func_args": {"line": "'[testenv]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'commands = viztracer --ignore_frozen --log_func_args --log_func_retval -o result0.json -- py.test --cov seqseek --cov-report term-missing seqseek\\n'"}, "return_value": "False"}, {"func_args": {"line": "'deps = \\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tpytest\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tpytest-cov\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tviztracer \\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}, {"func_args": {"line": "'[gh-actions]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'python = \\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\t3.6: py36\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\t3.7: py37\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\t3.8: py38\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\t3.9: py39\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}], "text": "def iscommentline(line):\n    c = line.lstrip()[:1]\n    return c in COMMENTCHARS"}, "validate_report": {"line": 30, "args": [{"func_args": {"arg": "'term-missing'"}, "return_value": "('term-missing', None)"}, {"func_args": {"arg": "'term-missing'"}, "return_value": "('term-missing', None)"}], "text": "def validate_report(arg):\n    file_choices = ['annotate', 'html', 'xml']\n    term_choices = ['term', 'term-missing']\n    term_modifier_choices = ['skip-covered']\n    all_choices = term_choices + file_choices\n    values = arg.split(\":\", 1)\n    report_type = values[0]\n    if report_type not in all_choices + ['']:\n        msg = f'invalid choice: \"{arg}\" (choose from \"{all_choices}\")'\n        raise argparse.ArgumentTypeError(msg)\n\n    if len(values) == 1:\n        return report_type, None\n\n    report_modifier = values[1]\n    if report_type in term_choices and report_modifier in term_modifier_choices:\n        return report_type, report_modifier\n\n    if report_type not in file_choices:\n        msg = 'output specifier not supported for: \"{}\" (choose from \"{}\")'.format(arg,\n                                                                                   file_choices)\n        raise argparse.ArgumentTypeError(msg)\n\n    return values"}, "_prepare_cov_source": {"line": 125, "args": [{"func_args": {"cov_source": "['seqseek']"}, "return_value": "['seqseek']"}], "text": "def _prepare_cov_source(cov_source):\n    \"\"\"\n    Prepare cov_source so that:\n\n     --cov --cov=foobar is equivalent to --cov (cov_source=None)\n     --cov=foo --cov=bar is equivalent to cov_source=['foo', 'bar']\n    \"\"\"\n    return None if True in cov_source else [path for path in cov_source if path is not True]"}, "bool_or_none": {"line": 174, "args": [{"func_args": {"b": "True"}, "return_value": "True"}, {"func_args": {"b": "True"}, "return_value": "True"}], "text": "def bool_or_none(b):\n    \"\"\"Return bool(b), but preserve None.\"\"\"\n    if b is None:\n        return None\n    else:\n        return bool(b)"}, "tryint": {"line": 370, "args": [{"func_args": {"s": "'/usr/app/src/test_repos/seqseek/seqseek'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek'"}, {"func_args": {"s": "'/usr/app/src/test_repos/seqseek/.tox/py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/.tox/py'"}, {"func_args": {"s": "'38'"}, "return_value": "38"}, {"func_args": {"s": "'/lib/python'"}, "return_value": "'/lib/python'"}, {"func_args": {"s": "'3'"}, "return_value": "3"}, {"func_args": {"s": "'.'"}, "return_value": "'.'"}, {"func_args": {"s": "'8'"}, "return_value": "8"}, {"func_args": {"s": "'/site-packages/coverage'"}, "return_value": "'/site-packages/coverage'"}, {"func_args": {"s": "'/usr/app/src/test_repos/seqseek/.tox/py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/.tox/py'"}, {"func_args": {"s": "'38'"}, "return_value": "38"}, {"func_args": {"s": "'/bin'"}, "return_value": "'/bin'"}, {"func_args": {"s": "'/root/.local/lib/python'"}, "return_value": "'/root/.local/lib/python'"}, {"func_args": {"s": "'3'"}, "return_value": "3"}, {"func_args": {"s": "'.'"}, "return_value": "'.'"}, {"func_args": {"s": "'8'"}, "return_value": "8"}, {"func_args": {"s": "'/site-packages'"}, "return_value": "'/site-packages'"}, {"func_args": {"s": "'/usr/app/src/test_repos/seqseek/.tox/py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/.tox/py'"}, {"func_args": {"s": "'38'"}, "return_value": "38"}, {"func_args": {"s": "'/lib/python'"}, "return_value": "'/lib/python'"}, {"func_args": {"s": "'/root/.local/bin'"}, "return_value": "'/root/.local/bin'"}, {"func_args": {"s": "'/usr/app/src/test_repos/seqseek/.tox/py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/.tox/py'"}, {"func_args": {"s": "'38'"}, "return_value": "38"}, {"func_args": {"s": "'/lib/python'"}, "return_value": "'/lib/python'"}, {"func_args": {"s": "'3'"}, "return_value": "3"}, {"func_args": {"s": "'.'"}, "return_value": "'.'"}, {"func_args": {"s": "'8'"}, "return_value": "8"}, {"func_args": {"s": "'/site-packages'"}, "return_value": "'/site-packages'"}, {"func_args": {"s": "'seqseek/__init__.py                                              '"}, "return_value": "'seqseek/__init__.py                                              '"}, {"func_args": {"s": "'3'"}, "return_value": "3"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'   '"}, "return_value": "'   '"}, {"func_args": {"s": "'100'"}, "return_value": "100"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'seqseek/chromosome.py                                           '"}, "return_value": "'seqseek/chromosome.py                                           '"}, {"func_args": {"s": "'75'"}, "return_value": "75"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'3'"}, "return_value": "3"}, {"func_args": {"s": "'    '"}, "return_value": "'    '"}, {"func_args": {"s": "'96'"}, "return_value": "96"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'66'"}, "return_value": "66"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'102'"}, "return_value": "102"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'103'"}, "return_value": "103"}, {"func_args": {"s": "''"}, "return_value": "''"}, {"func_args": {"s": "'seqseek/cli.py                                                  '"}, "return_value": "'seqseek/cli.py                                                  '"}, {"func_args": {"s": "'31'"}, "return_value": "31"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'10'"}, "return_value": "10"}, {"func_args": {"s": "'    '"}, "return_value": "'    '"}, {"func_args": {"s": "'68'"}, "return_value": "68"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'38'"}, "return_value": "38"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'49'"}, "return_value": "49"}, {"func_args": {"s": "''"}, "return_value": "''"}, {"func_args": {"s": "'seqseek/downloader.py                                           '"}, "return_value": "'seqseek/downloader.py                                           '"}, {"func_args": {"s": "'73'"}, "return_value": "73"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'73'"}, "return_value": "73"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'1'"}, "return_value": "1"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'112'"}, "return_value": "112"}, {"func_args": {"s": "''"}, "return_value": "''"}, {"func_args": {"s": "'seqseek/exceptions.py                                            '"}, "return_value": "'seqseek/exceptions.py                                            '"}, {"func_args": {"s": "'4'"}, "return_value": "4"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'   '"}, "return_value": "'   '"}, {"func_args": {"s": "'100'"}, "return_value": "100"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'seqseek/format_fasta.py                                         '"}, "return_value": "'seqseek/format_fasta.py                                         '"}, {"func_args": {"s": "'24'"}, "return_value": "24"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'24'"}, "return_value": "24"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'1'"}, "return_value": "1"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'30'"}, "return_value": "30"}, {"func_args": {"s": "''"}, "return_value": "''"}, {"func_args": {"s": "'seqseek/lib.py                                                  '"}, "return_value": "'seqseek/lib.py                                                  '"}, {"func_args": {"s": "'24'"}, "return_value": "24"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'   '"}, "return_value": "'   '"}, {"func_args": {"s": "'100'"}, "return_value": "100"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'seqseek/tests/__init__.py                                        '"}, "return_value": "'seqseek/tests/__init__.py                                        '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'   '"}, "return_value": "'   '"}, {"func_args": {"s": "'100'"}, "return_value": "100"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'seqseek/tests/build_specific_tests/__init__.py                   '"}, "return_value": "'seqseek/tests/build_specific_tests/__init__.py                   '"}, {"func_args": {"s": "'2'"}, "return_value": "2"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'2'"}, "return_value": "2"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'1'"}, "return_value": "1"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'2'"}, "return_value": "2"}, {"func_args": {"s": "''"}, "return_value": "''"}, {"func_args": {"s": "'seqseek/tests/build_specific_tests/build_'"}, "return_value": "'seqseek/tests/build_specific_tests/build_'"}, {"func_args": {"s": "'37'"}, "return_value": "37"}, {"func_args": {"s": "'_tests.py           '"}, "return_value": "'_tests.py           '"}, {"func_args": {"s": "'192'"}, "return_value": "192"}, {"func_args": {"s": "'    '"}, "return_value": "'    '"}, {"func_args": {"s": "'192'"}, "return_value": "192"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'1'"}, "return_value": "1"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'263'"}, "return_value": "263"}, {"func_args": {"s": "''"}, "return_value": "''"}, {"func_args": {"s": "'seqseek/tests/build_specific_tests/build_'"}, "return_value": "'seqseek/tests/build_specific_tests/build_'"}, {"func_args": {"s": "'38'"}, "return_value": "38"}, {"func_args": {"s": "'_tests.py           '"}, "return_value": "'_tests.py           '"}, {"func_args": {"s": "'131'"}, "return_value": "131"}, {"func_args": {"s": "'    '"}, "return_value": "'    '"}, {"func_args": {"s": "'131'"}, "return_value": "131"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'1'"}, "return_value": "1"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'181'"}, "return_value": "181"}, {"func_args": {"s": "''"}, "return_value": "''"}, {"func_args": {"s": "'seqseek/tests/build_specific_tests/build_specific_tests.py      '"}, "return_value": "'seqseek/tests/build_specific_tests/build_specific_tests.py      '"}, {"func_args": {"s": "'15'"}, "return_value": "15"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'15'"}, "return_value": "15"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'1'"}, "return_value": "1"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'23'"}, "return_value": "23"}, {"func_args": {"s": "''"}, "return_value": "''"}, {"func_args": {"s": "'seqseek/tests/test_functional.py                               '"}, "return_value": "'seqseek/tests/test_functional.py                               '"}, {"func_args": {"s": "'129'"}, "return_value": "129"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'   '"}, "return_value": "'   '"}, {"func_args": {"s": "'100'"}, "return_value": "100"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'seqseek/tests/test_meta_test.py                                  '"}, "return_value": "'seqseek/tests/test_meta_test.py                                  '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'   '"}, "return_value": "'   '"}, {"func_args": {"s": "'100'"}, "return_value": "100"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}], "text": "def tryint(s):\n        \"\"\"If `s` is a number, return an int, else `s` unchanged.\"\"\"\n        try:\n            return int(s)\n        except ValueError:\n            return s"}, "human_key": {"line": 366, "args": [{"func_args": {"s": "'/usr/app/src/test_repos/seqseek/seqseek'"}, "return_value": "['/usr/app/src/test_repos/seqseek/seqseek']"}, {"func_args": {"s": "'/usr/app/src/test_repos/seqseek/.tox/py38/lib/python3.8/site-packages/coverage'"}, "return_value": "['/usr/app/src/test_repos/seqseek/.tox/py', 38, '/lib/python', 3, '.', 8, '/site-packages/coverage']"}, {"func_args": {"s": "'/usr/app/src/test_repos/seqseek/.tox/py38/bin'"}, "return_value": "['/usr/app/src/test_repos/seqseek/.tox/py', 38, '/bin']"}, {"func_args": {"s": "'/root/.local/lib/python3.8/site-packages'"}, "return_value": "['/root/.local/lib/python', 3, '.', 8, '/site-packages']"}, {"func_args": {"s": "'/usr/app/src/test_repos/seqseek/.tox/py38/lib/python'"}, "return_value": "['/usr/app/src/test_repos/seqseek/.tox/py', 38, '/lib/python']"}, {"func_args": {"s": "'/root/.local/bin'"}, "return_value": "['/root/.local/bin']"}, {"func_args": {"s": "'/usr/app/src/test_repos/seqseek/.tox/py38/lib/python3.8/site-packages'"}, "return_value": "['/usr/app/src/test_repos/seqseek/.tox/py', 38, '/lib/python', 3, '.', 8, '/site-packages']"}, {"func_args": {"s": "'seqseek/__init__.py                                              3      0   100%   '"}, "return_value": "['seqseek/__init__.py                                              ', 3, '      ', 0, '   ', 100, '%   ']"}, {"func_args": {"s": "'seqseek/chromosome.py                                           75      3    96%   66, 102-103'"}, "return_value": "['seqseek/chromosome.py                                           ', 75, '      ', 3, '    ', 96, '%   ', 66, ', ', 102, '-', 103, '']"}, {"func_args": {"s": "'seqseek/cli.py                                                  31     10    68%   38-49'"}, "return_value": "['seqseek/cli.py                                                  ', 31, '     ', 10, '    ', 68, '%   ', 38, '-', 49, '']"}, {"func_args": {"s": "'seqseek/downloader.py                                           73     73     0%   1-112'"}, "return_value": "['seqseek/downloader.py                                           ', 73, '     ', 73, '     ', 0, '%   ', 1, '-', 112, '']"}, {"func_args": {"s": "'seqseek/exceptions.py                                            4      0   100%   '"}, "return_value": "['seqseek/exceptions.py                                            ', 4, '      ', 0, '   ', 100, '%   ']"}, {"func_args": {"s": "'seqseek/format_fasta.py                                         24     24     0%   1-30'"}, "return_value": "['seqseek/format_fasta.py                                         ', 24, '     ', 24, '     ', 0, '%   ', 1, '-', 30, '']"}, {"func_args": {"s": "'seqseek/lib.py                                                  24      0   100%   '"}, "return_value": "['seqseek/lib.py                                                  ', 24, '      ', 0, '   ', 100, '%   ']"}, {"func_args": {"s": "'seqseek/tests/__init__.py                                        0      0   100%   '"}, "return_value": "['seqseek/tests/__init__.py                                        ', 0, '      ', 0, '   ', 100, '%   ']"}, {"func_args": {"s": "'seqseek/tests/build_specific_tests/__init__.py                   2      2     0%   1-2'"}, "return_value": "['seqseek/tests/build_specific_tests/__init__.py                   ', 2, '      ', 2, '     ', 0, '%   ', 1, '-', 2, '']"}, {"func_args": {"s": "'seqseek/tests/build_specific_tests/build_37_tests.py           192    192     0%   1-263'"}, "return_value": "['seqseek/tests/build_specific_tests/build_', 37, '_tests.py           ', 192, '    ', 192, '     ', 0, '%   ', 1, '-', 263, '']"}, {"func_args": {"s": "'seqseek/tests/build_specific_tests/build_38_tests.py           131    131     0%   1-181'"}, "return_value": "['seqseek/tests/build_specific_tests/build_', 38, '_tests.py           ', 131, '    ', 131, '     ', 0, '%   ', 1, '-', 181, '']"}, {"func_args": {"s": "'seqseek/tests/build_specific_tests/build_specific_tests.py      15     15     0%   1-23'"}, "return_value": "['seqseek/tests/build_specific_tests/build_specific_tests.py      ', 15, '     ', 15, '     ', 0, '%   ', 1, '-', 23, '']"}, {"func_args": {"s": "'seqseek/tests/test_functional.py                               129      0   100%   '"}, "return_value": "['seqseek/tests/test_functional.py                               ', 129, '      ', 0, '   ', 100, '%   ']"}, {"func_args": {"s": "'seqseek/tests/test_meta_test.py                                  0      0   100%   '"}, "return_value": "['seqseek/tests/test_meta_test.py                                  ', 0, '      ', 0, '   ', 100, '%   ']"}], "text": "def human_key(s):\n    \"\"\"Turn a string into a list of string and number chunks.\n        \"z23a\" -> [\"z\", 23, \"a\"]\n    \"\"\"\n    def tryint(s):\n        \"\"\"If `s` is a number, return an int, else `s` unchanged.\"\"\"\n        try:\n            return int(s)\n        except ValueError:\n            return s\n\n    return [tryint(c) for c in re.split(r\"(\\d+)\", s)]"}, "human_sorted": {"line": 379, "args": [{"func_args": {"strings": "['/usr/app/src/test_repos/seqseek/seqseek']"}, "return_value": "['/usr/app/src/test_repos/seqseek/seqseek']"}, {"func_args": {"strings": "{'/usr/app/src/test_repos/seqseek/.tox/py38/lib/python3.8/site-packages/coverage'}"}, "return_value": "['/usr/app/src/test_repos/seqseek/.tox/py38/lib/python3.8/site-packages/coverage']"}, {"func_args": {"strings": "{'/usr/app/src/test_repos/seqseek/.tox/py38/bin', '/root/.local/lib/python3.8/site-packages', '/usr/app/src/test_repos/seqseek/.tox/py38/lib/python', '/root/.local/bin', '/usr/app/src/test_repos/seqseek/.tox/py38/lib/python3.8/site-packages'}"}, "return_value": "['/root/.local/bin', '/root/.local/lib/python3.8/site-packages', '/usr/app/src/test_repos/seqseek/.tox/py38/bin', '/usr/app/src/test_repos/seqseek/.tox/py38/lib/python', '/usr/app/src/test_repos/seqseek/.tox/py38/lib/python3.8/site-packages']"}], "text": "def human_sorted(strings):\n    \"\"\"Sort the given iterable of strings the way that humans expect.\n\n    Numeric components in the strings are sorted as numbers.\n\n    Returns the sorted list.\n\n    \"\"\"\n    return sorted(strings, key=human_key)"}, "join_regex": {"line": 182, "args": [{"func_args": {"regexes": "['#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)']"}, "return_value": "'(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}], "text": "def join_regex(regexes):\n    \"\"\"Combine a list of regexes into one that matches any of them.\"\"\"\n    return \"|\".join(f\"(?:{r})\" for r in regexes)"}, "nice_pair": {"line": 140, "args": [{"func_args": {"pair": "(66, 66)"}, "return_value": "'66'"}, {"func_args": {"pair": "(102, 103)"}, "return_value": "'102-103'"}, {"func_args": {"pair": "(38, 49)"}, "return_value": "'38-49'"}, {"func_args": {"pair": "(1, 112)"}, "return_value": "'1-112'"}, {"func_args": {"pair": "(1, 30)"}, "return_value": "'1-30'"}, {"func_args": {"pair": "(1, 2)"}, "return_value": "'1-2'"}, {"func_args": {"pair": "(1, 263)"}, "return_value": "'1-263'"}, {"func_args": {"pair": "(1, 181)"}, "return_value": "'1-181'"}, {"func_args": {"pair": "(1, 23)"}, "return_value": "'1-23'"}], "text": "def nice_pair(pair):\n    \"\"\"Make a nice string representation of a pair of numbers.\n\n    If the numbers are equal, just return the number, otherwise return the pair\n    with a dash between them, indicating the range.\n\n    \"\"\"\n    start, end = pair\n    if start == end:\n        return \"%d\" % start\n    else:\n        return \"%d-%d\" % (start, end)"}, "<lambda>": {"line": 86, "args": [{"func_args": {"pair": "('1', 249250621)"}, "return_value": "0"}, {"func_args": {"pair": "('2', 243199373)"}, "return_value": "2"}, {"func_args": {"pair": "('3', 198022430)"}, "return_value": "4"}, {"func_args": {"pair": "('4', 191154276)"}, "return_value": "6"}, {"func_args": {"pair": "('5', 180915260)"}, "return_value": "8"}, {"func_args": {"pair": "('6', 171115067)"}, "return_value": "10"}, {"func_args": {"pair": "('7', 159138663)"}, "return_value": "12"}, {"func_args": {"pair": "('8', 146364022)"}, "return_value": "14"}, {"func_args": {"pair": "('9', 141213431)"}, "return_value": "16"}, {"func_args": {"pair": "('10', 135534747)"}, "return_value": "18"}, {"func_args": {"pair": "('11', 135006516)"}, "return_value": "20"}, {"func_args": {"pair": "('12', 133851895)"}, "return_value": "22"}, {"func_args": {"pair": "('13', 115169878)"}, "return_value": "24"}, {"func_args": {"pair": "('14', 107349540)"}, "return_value": "26"}, {"func_args": {"pair": "('15', 102531392)"}, "return_value": "28"}, {"func_args": {"pair": "('16', 90354753)"}, "return_value": "30"}, {"func_args": {"pair": "('17', 81195210)"}, "return_value": "32"}, {"func_args": {"pair": "('18', 78077248)"}, "return_value": "34"}, {"func_args": {"pair": "('19', 59128983)"}, "return_value": "36"}, {"func_args": {"pair": "('20', 63025520)"}, "return_value": "38"}, {"func_args": {"pair": "('21', 48129895)"}, "return_value": "40"}, {"func_args": {"pair": "('22', 51304566)"}, "return_value": "42"}, {"func_args": {"pair": "('X', 155270560)"}, "return_value": "44"}, {"func_args": {"pair": "('Y', 59373566)"}, "return_value": "46"}, {"func_args": {"pair": "('MT', 20)"}, "return_value": "49"}, {"func_args": {"pair": "('RSRS', 16571)"}, "return_value": "48"}, {"func_args": {"pair": "('chr6_apd_hap1', 4622290)"}, "return_value": "51"}, {"func_args": {"pair": "('chr6_cox_hap2', 4795371)"}, "return_value": "50"}, {"func_args": {"pair": "('chr6_dbb_hap3', 4610396)"}, "return_value": "52"}, {"func_args": {"pair": "('chr6_mann_hap4', 4683263)"}, "return_value": "53"}, {"func_args": {"pair": "('chr6_mcf_hap5', 4833398)"}, "return_value": "54"}, {"func_args": {"pair": "('chr6_qbl_hap6', 4611984)"}, "return_value": "55"}, {"func_args": {"pair": "('chr6_ssto_hap7', 4928567)"}, "return_value": "56"}, {"func_args": {"pair": "('chr4_ctg9_hap1', 590426)"}, "return_value": "57"}, {"func_args": {"pair": "('chr17_ctg5_hap1', 1680828)"}, "return_value": "58"}]}, "human_sorted_items": {"line": 389, "args": [{"func_args": {"items": "[('seqseek/__init__.py                                              3      0   100%   ', ('seqseek/__init__.py', 3, 0, '100', '', 100.0)), ('seqseek/chromosome.py                                           75      3    96%   66, 102-103', ('seqseek/chromosome.py', 75, 3, '96', '66, 102-103', 96.0)), ('seqseek/cli.py                                                  31     10    68%   38-49', ('seqseek/cli.py', 31, 10, '68', '38-49', 67.74193548387096)), ('seqseek/downloader.py                                           73     73     0%   1-112', ('seqseek/downloader.py', 73, 73, '0', '1-112', 0.0)), ('seqseek/exceptions.py                                            4      0   100%   ', ('seqseek/exceptions.py', 4, 0, '100', '', 100.0)), ('seqseek/format_fasta.py                                         24     24     0%   1-30', ('seqseek/format_fasta.py', 24, 24, '0', '1-30', 0.0)), ('seqseek/lib.py                                                  24      0   100%   ', ('seqseek/lib.py', 24, 0, '100', '', 100.0)), ('seqseek/tests/__init__.py                                        0      0   100%   ', ('seqseek/tests/__init__.py', 0, 0, '100', '', 100.0)), ('seqseek/tests/build_specific_tests/__init__.py                   2      2     0%   1-2', ('seqseek/tests/build_specific_tests/__init__.py', 2, 2, '0', '1-2', 0.0)), ('seqseek/tests/build_specific_tests/build_37_tests.py           192    192     0%   1-263', ('seqseek/tests/build_specific_tests/build_37_tests.py', 192, 192, '0', '1-263', 0.0)), ('seqseek/tests/build_specific_tests/build_38_tests.py           131    131     0%   1-181', ('seqseek/tests/build_specific_tests/build_38_tests.py', 131, 131, '0', '1-181', 0.0)), ('seqseek/tests/build_specific_tests/build_specific_tests.py      15     15     0%   1-23', ('seqseek/tests/build_specific_tests/build_specific_tests.py', 15, 15, '0', '1-23', 0.0)), ('seqseek/tests/test_functional.py                               129      0   100%   ', ('seqseek/tests/test_functional.py', 129, 0, '100', '', 100.0)), ('seqseek/tests/test_meta_test.py                                  0      0   100%   ', ('seqseek/tests/test_meta_test.py', 0, 0, '100', '', 100.0))]", "reverse": "False"}, "return_value": "[('seqseek/__init__.py                                              3      0   100%   ', ('seqseek/__init__.py', 3, 0, '100', '', 100.0)), ('seqseek/chromosome.py                                           75      3    96%   66, 102-103', ('seqseek/chromosome.py', 75, 3, '96', '66, 102-103', 96.0)), ('seqseek/cli.py                                                  31     10    68%   38-49', ('seqseek/cli.py', 31, 10, '68', '38-49', 67.74193548387096)), ('seqseek/downloader.py                                           73     73     0%   1-112', ('seqseek/downloader.py', 73, 73, '0', '1-112', 0.0)), ('seqseek/exceptions.py                                            4      0   100%   ', ('seqseek/exceptions.py', 4, 0, '100', '', 100.0)), ('seqseek/format_fasta.py                                         24     24     0%   1-30', ('seqseek/format_fasta.py', 24, 24, '0', '1-30', 0.0)), ('seqseek/lib.py                                                  24      0   100%   ', ('seqseek/lib.py', 24, 0, '100', '', 100.0)), ('seqseek/tests/__init__.py                                        0      0   100%   ', ('seqseek/tests/__init__.py', 0, 0, '100', '', 100.0)), ('seqseek/tests/build_specific_tests/__init__.py                   2      2     0%   1-2', ('seqseek/tests/build_specific_tests/__init__.py', 2, 2, '0', '1-2', 0.0)), ('seqseek/tests/build_specific_tests/build_37_tests.py           192    192     0%   1-263', ('seqseek/tests/build_specific_tests/build_37_tests.py', 192, 192, '0', '1-263', 0.0)), ('seqseek/tests/build_specific_tests/build_38_tests.py           131    131     0%   1-181', ('seqseek/tests/build_specific_tests/build_38_tests.py', 131, 131, '0', '1-181', 0.0)), ('seqseek/tests/build_specific_tests/build_specific_tests.py      15     15     0%   1-23', ('seqseek/tests/build_specific_tests/build_specific_tests.py', 15, 15, '0', '1-23', 0.0)), ('seqseek/tests/test_functional.py                               129      0   100%   ', ('seqseek/tests/test_functional.py', 129, 0, '100', '', 100.0)), ('seqseek/tests/test_meta_test.py                                  0      0   100%   ', ('seqseek/tests/test_meta_test.py', 0, 0, '100', '', 100.0))]"}], "text": "def human_sorted_items(items, reverse=False):\n    \"\"\"Sort the (string, value) items the way humans expect.\n\n    Returns the sorted list of items.\n    \"\"\"\n    return sorted(items, key=lambda pair: (human_key(pair[0]), pair[1]), reverse=reverse)"}, "config_files_to_try": {"line": 492, "args": [{"func_args": {"config_file": "'.coveragerc'"}, "return_value": "[('.coveragerc', True, False), ('setup.cfg', False, False), ('tox.ini', False, False), ('pyproject.toml', False, False)]"}, {"func_args": {"config_file": "'.coveragerc'"}, "return_value": "[('.coveragerc', True, False), ('setup.cfg', False, False), ('tox.ini', False, False), ('pyproject.toml', False, False)]"}], "text": "def config_files_to_try(config_file):\n    \"\"\"What config files should we try to read?\n\n    Returns a list of tuples:\n        (filename, is_our_file, was_file_specified)\n    \"\"\"\n\n    # Some API users were specifying \".coveragerc\" to mean the same as\n    # True, so make it so.\n    if config_file == \".coveragerc\":\n        config_file = True\n    specified_file = (config_file is not True)\n    if not specified_file:\n        # No file was specified. Check COVERAGE_RCFILE.\n        config_file = os.environ.get('COVERAGE_RCFILE')\n        if config_file:\n            specified_file = True\n    if not specified_file:\n        # Still no file specified. Default to .coveragerc\n        config_file = \".coveragerc\"\n    files_to_try = [\n        (config_file, True, specified_file),\n        (\"setup.cfg\", False, False),\n        (\"tox.ini\", False, False),\n        (\"pyproject.toml\", False, False),\n    ]\n    return files_to_try"}, "short_stack": {"line": 136, "args": [{"func_args": {"limit": "None", "skip": "0"}, "return_value": "'                      <module> : /usr/app/src/test_repos/seqseek/.tox/py38/bin/viztracer:8\\n                          main : /usr/app/src/test_repos/seqseek/.tox/py38/lib/python3.8/site-packages/viztracer/main.py:523\\n                           run : /usr/app/src/test_repos/seqseek/.tox/py38/lib/python3.8/site-packages/viztracer/main.py:332\\n                   run_command : /usr/app/src/test_repos/seqseek/.tox/py38/lib/python3.8/site-packages/viztracer/main.py:438\\n                      run_code : /usr/app/src/test_repos/seqseek/.tox/py38/lib/python3.8/site-packages/viztracer/main.py:355\\n                      <module> : /usr/app/src/test_repos/seqseek/.tox/py38/bin/py.test:8\\n                  console_main : /usr/app/src/test_repos/seqseek/.tox/py38/lib/python3.8/site-packages/_pytest/config/__init__.py:185\\n                          main : /usr/app/src/test_repos/seqseek/.tox/py38/lib/python3.8/site-packages/_pytest/config/__init__.py:143\\n                _prepareconfig : /usr/app/src/test_repos/seqseek/.tox/py38/lib/python3.8/site-packages/_pytest/config/__init__.py:318\\n                      __call__ : /usr/app/src/test_repos/seqseek/.tox/py38/lib/python3.8/site-packages/pluggy/_hooks.py:265\\n                     _hookexec : /usr/app/src/test_repos/seqseek/.tox/py38/lib/python3.8/site-packages/pluggy/_manager.py:80\\n                    _multicall : /usr/app/src/test_repos/seqseek/.tox/py38/lib/python3.8/site-packages/pluggy/_callers.py:39\\n          pytest_cmdline_parse : /usr/app/src/test_repos/seqseek/.tox/py38/lib/python3.8/site-packages/_pytest/config/__init__.py:1003\\n                         parse : /usr/app/src/test_repos/seqseek/.tox/py38/lib/python3.8/site-packages/_pytest/config/__init__.py:1283\\n                     _preparse : /usr/app/src/test_repos/seqseek/.tox/py38/lib/python3.8/site-packages/_pytest/config/__init__.py:1191\\n                      __call__ : /usr/app/src/test_repos/seqseek/.tox/py38/lib/python3.8/site-packages/pluggy/_hooks.py:265\\n                     _hookexec : /usr/app/src/test_repos/seqseek/.tox/py38/lib/python3.8/site-packages/pluggy/_manager.py:80\\n                    _multicall : /usr/app/src/test_repos/seqseek/.tox/py38/lib/python3.8/site-packages/pluggy/_callers.py:39\\n pytest_load_initial_conftests : /usr/app/src/test_repos/seqseek/.tox/py38/lib/python3.8/site-packages/pytest_cov/plugin.py:149\\n                      __init__ : /usr/app/src/test_repos/seqseek/.tox/py38/lib/python3.8/site-packages/pytest_cov/plugin.py:200\\n                         start : /usr/app/src/test_repos/seqseek/.tox/py38/lib/python3.8/site-packages/pytest_cov/plugin.py:222\\n         ensure_topdir_wrapper : /usr/app/src/test_repos/seqseek/.tox/py38/lib/python3.8/site-packages/pytest_cov/engine.py:44\\n                         start : /usr/app/src/test_repos/seqseek/.tox/py38/lib/python3.8/site-packages/pytest_cov/engine.py:222\\n                         start : /usr/app/src/test_repos/seqseek/.tox/py38/lib/python3.8/site-packages/coverage/control.py:558\\n               _init_for_start : /usr/app/src/test_repos/seqseek/.tox/py38/lib/python3.8/site-packages/coverage/control.py:473\\n                      __init__ : /usr/app/src/test_repos/seqseek/.tox/py38/lib/python3.8/site-packages/coverage/collector.py:114'"}], "text": "def short_stack(limit=None, skip=0):\n    \"\"\"Return a string summarizing the call stack.\n\n    The string is multi-line, with one line per stack frame. Each line shows\n    the function name, the file name, and the line number:\n\n        ...\n        start_import_stop : /Users/ned/coverage/trunk/tests/coveragetest.py @95\n        import_local_file : /Users/ned/coverage/trunk/tests/coveragetest.py @81\n        import_local_file : /Users/ned/coverage/trunk/coverage/backward.py @159\n        ...\n\n    `limit` is the number of frames to include, defaulting to all of them.\n\n    `skip` is the number of frames to skip, so that debugging functions can\n    call this and not be included in the result.\n\n    \"\"\"\n    stack = inspect.stack()[limit:skip:-1]\n    return \"\\n\".join(\"%30s : %s:%d\" % (t[3], t[1], t[2]) for t in stack)"}, "actual_path": {"line": 139, "args": [{"func_args": {"path": "'/usr/app/src/test_repos/seqseek'"}, "return_value": "'/usr/app/src/test_repos/seqseek'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/inspect.py'"}, "return_value": "'/usr/local/lib/python3.8/inspect.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/os.py'"}, "return_value": "'/usr/local/lib/python3.8/os.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/platform.py'"}, "return_value": "'/usr/local/lib/python3.8/platform.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/re.py'"}, "return_value": "'/usr/local/lib/python3.8/re.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/sysconfig.py'"}, "return_value": "'/usr/local/lib/python3.8/sysconfig.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/traceback.py'"}, "return_value": "'/usr/local/lib/python3.8/traceback.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/.tox/py38/lib/python3.8/site-packages/coverage/inorout.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/.tox/py38/lib/python3.8/site-packages/coverage/inorout.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/chromosome.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/chromosome.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/exceptions.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/exceptions.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/lib.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/lib.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_functional.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_functional.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/cli.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/cli.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_meta_test.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_meta_test.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/format_fasta.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/format_fasta.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/format_fasta.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/format_fasta.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/lib.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/lib.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/chromosome.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/chromosome.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/cli.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/cli.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/exceptions.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/exceptions.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/downloader.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/downloader.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/downloader.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/downloader.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_functional.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_functional.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_meta_test.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_meta_test.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_specific_tests.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_specific_tests.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_specific_tests.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_specific_tests.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_37_tests.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_37_tests.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_37_tests.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_37_tests.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_38_tests.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_38_tests.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_38_tests.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_38_tests.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek'"}, "return_value": "'/usr/app/src/test_repos/seqseek'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/format_fasta.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/format_fasta.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/format_fasta.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/format_fasta.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_functional.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_functional.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_functional.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_functional.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_specific_tests.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_specific_tests.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_specific_tests.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_specific_tests.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_37_tests.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_37_tests.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_37_tests.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_37_tests.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/lib.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/lib.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/lib.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/lib.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/downloader.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/downloader.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/downloader.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/downloader.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/chromosome.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/chromosome.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/chromosome.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/chromosome.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_38_tests.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_38_tests.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_38_tests.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_38_tests.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/cli.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/cli.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/cli.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/cli.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/exceptions.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/exceptions.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/exceptions.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/exceptions.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_meta_test.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_meta_test.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_meta_test.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_meta_test.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/chromosome.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/chromosome.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/cli.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/cli.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/downloader.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/downloader.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/exceptions.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/exceptions.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/format_fasta.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/format_fasta.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/lib.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/lib.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_37_tests.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_37_tests.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_38_tests.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_38_tests.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_specific_tests.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_specific_tests.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_functional.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_functional.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_meta_test.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_meta_test.py'"}], "text": "def actual_path(path):\n        \"\"\"The actual path for non-Windows platforms.\"\"\"\n        return path"}, "abs_file": {"line": 144, "args": [{"func_args": {"path": "'.'"}, "return_value": "'/usr/app/src/test_repos/seqseek'"}, {"func_args": {"path": "'./seqseek'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/inspect.py'"}, "return_value": "'/usr/local/lib/python3.8/inspect.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/os.py'"}, "return_value": "'/usr/local/lib/python3.8/os.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/platform.py'"}, "return_value": "'/usr/local/lib/python3.8/platform.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/re.py'"}, "return_value": "'/usr/local/lib/python3.8/re.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/sysconfig.py'"}, "return_value": "'/usr/local/lib/python3.8/sysconfig.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/traceback.py'"}, "return_value": "'/usr/local/lib/python3.8/traceback.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/.tox/py38/lib/python3.8/site-packages/coverage/inorout.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/.tox/py38/lib/python3.8/site-packages/coverage/inorout.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/chromosome.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/chromosome.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/exceptions.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/exceptions.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/lib.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/lib.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_functional.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_functional.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/cli.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/cli.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_meta_test.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_meta_test.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/format_fasta.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/format_fasta.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/format_fasta.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/format_fasta.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/lib.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/lib.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/chromosome.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/chromosome.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/cli.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/cli.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/exceptions.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/exceptions.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/downloader.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/downloader.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/downloader.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/downloader.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_functional.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_functional.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_meta_test.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_meta_test.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_specific_tests.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_specific_tests.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_specific_tests.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_specific_tests.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_37_tests.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_37_tests.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_37_tests.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_37_tests.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_38_tests.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_38_tests.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_38_tests.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_38_tests.py'"}, {"func_args": {"path": "'.'"}, "return_value": "'/usr/app/src/test_repos/seqseek'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/format_fasta.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/format_fasta.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/format_fasta.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/format_fasta.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_functional.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_functional.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_functional.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_functional.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_specific_tests.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_specific_tests.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_specific_tests.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_specific_tests.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_37_tests.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_37_tests.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_37_tests.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_37_tests.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/lib.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/lib.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/lib.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/lib.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/downloader.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/downloader.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/downloader.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/downloader.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/chromosome.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/chromosome.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/chromosome.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/chromosome.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_38_tests.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_38_tests.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_38_tests.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_38_tests.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/cli.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/cli.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/cli.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/cli.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/exceptions.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/exceptions.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/exceptions.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/exceptions.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_meta_test.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_meta_test.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_meta_test.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_meta_test.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/chromosome.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/chromosome.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/cli.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/cli.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/downloader.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/downloader.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/exceptions.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/exceptions.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/format_fasta.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/format_fasta.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/lib.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/lib.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_37_tests.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_37_tests.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_38_tests.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_38_tests.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_specific_tests.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_specific_tests.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_functional.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_functional.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_meta_test.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_meta_test.py'"}]}, "canonical_filename": {"line": 53, "args": [{"func_args": {"filename": "'seqseek'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/inspect.py'"}, "return_value": "'/usr/local/lib/python3.8/inspect.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/os.py'"}, "return_value": "'/usr/local/lib/python3.8/os.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/platform.py'"}, "return_value": "'/usr/local/lib/python3.8/platform.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/re.py'"}, "return_value": "'/usr/local/lib/python3.8/re.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/sysconfig.py'"}, "return_value": "'/usr/local/lib/python3.8/sysconfig.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/traceback.py'"}, "return_value": "'/usr/local/lib/python3.8/traceback.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/.tox/py38/lib/python3.8/site-packages/coverage/inorout.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/.tox/py38/lib/python3.8/site-packages/coverage/inorout.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/format_fasta.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/format_fasta.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/lib.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/lib.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/chromosome.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/chromosome.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/cli.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/cli.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/exceptions.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/exceptions.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/downloader.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/downloader.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_functional.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_functional.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_meta_test.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_meta_test.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_specific_tests.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_specific_tests.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_37_tests.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_37_tests.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_38_tests.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_38_tests.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/format_fasta.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/format_fasta.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_functional.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_functional.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_specific_tests.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_specific_tests.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_37_tests.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_37_tests.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/lib.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/lib.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/downloader.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/downloader.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/chromosome.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/chromosome.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_38_tests.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_38_tests.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/cli.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/cli.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/exceptions.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/exceptions.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_meta_test.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_meta_test.py'"}]}, "prep_patterns": {"line": 173, "args": [{"func_args": {"patterns": "None"}, "return_value": "[]"}, {"func_args": {"patterns": "None"}, "return_value": "[]"}], "text": "def prep_patterns(patterns):\n    \"\"\"Prepare the file patterns for use in a `FnmatchMatcher`.\n\n    If a pattern starts with a wildcard, it is used as a pattern\n    as-is.  If it does not start with a wildcard, then it is made\n    absolute with the current directory.\n\n    If `patterns` is None, an empty list is returned.\n\n    \"\"\"\n    prepped = []\n    for p in patterns or []:\n        if p.startswith((\"*\", \"?\")):\n            prepped.append(p)\n        else:\n            prepped.append(abs_file(p))\n    return prepped"}, "find_python_files": {"line": 403, "args": [{"func_args": {"dirname": "'/usr/app/src/test_repos/seqseek/seqseek'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/format_fasta.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/seqseek/seqseek'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/lib.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/seqseek/seqseek'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/chromosome.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/seqseek/seqseek'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/seqseek/seqseek'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/cli.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/seqseek/seqseek'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/exceptions.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/seqseek/seqseek'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/downloader.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/seqseek/seqseek'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_functional.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/seqseek/seqseek'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/seqseek/seqseek'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_meta_test.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/seqseek/seqseek'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_specific_tests.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/seqseek/seqseek'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/seqseek/seqseek'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_37_tests.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/seqseek/seqseek'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_38_tests.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/seqseek/seqseek'"}, "return_value": "None"}], "text": "def find_python_files(dirname):\n    \"\"\"Yield all of the importable Python files in `dirname`, recursively.\n\n    To be importable, the files have to be in a directory with a __init__.py,\n    except for `dirname` itself, which isn't required to have one.  The\n    assumption is that `dirname` was specified directly, so the user knows\n    best, but sub-directories are checked for a __init__.py to be sure we only\n    find the importable files.\n\n    \"\"\"\n    for i, (dirpath, dirnames, filenames) in enumerate(os.walk(dirname)):\n        if i > 0 and '__init__.py' not in filenames:\n            # If a directory doesn't have __init__.py, then it isn't\n            # importable and neither are its files\n            del dirnames[:]\n            continue\n        for filename in filenames:\n            # We're only interested in files that look like reasonable Python\n            # files: Must end with .py or .pyw, and must not have certain funny\n            # characters that probably mean they are editor junk.\n            if re.match(r\"^[^.#~!$@%^&*()+=,]+\\.pyw?$\", filename):\n                yield os.path.join(dirpath, filename)"}, "relative_filename": {"line": 39, "args": [{"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/__init__.py'"}, "return_value": "'seqseek/tests/build_specific_tests/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/format_fasta.py'"}, "return_value": "'seqseek/format_fasta.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_functional.py'"}, "return_value": "'seqseek/tests/test_functional.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_specific_tests.py'"}, "return_value": "'seqseek/tests/build_specific_tests/build_specific_tests.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_37_tests.py'"}, "return_value": "'seqseek/tests/build_specific_tests/build_37_tests.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/lib.py'"}, "return_value": "'seqseek/lib.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/downloader.py'"}, "return_value": "'seqseek/downloader.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/__init__.py'"}, "return_value": "'seqseek/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/chromosome.py'"}, "return_value": "'seqseek/chromosome.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/tests/__init__.py'"}, "return_value": "'seqseek/tests/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_38_tests.py'"}, "return_value": "'seqseek/tests/build_specific_tests/build_38_tests.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/cli.py'"}, "return_value": "'seqseek/cli.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/exceptions.py'"}, "return_value": "'seqseek/exceptions.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_meta_test.py'"}, "return_value": "'seqseek/tests/test_meta_test.py'"}]}, "filename_suffix": {"line": 1006, "args": [{"func_args": {"suffix": "None"}, "return_value": "None"}, {"func_args": {"suffix": "True"}, "return_value": "'cae2a1e14906.382.571287'"}, {"func_args": {"suffix": "None"}, "return_value": "None"}, {"func_args": {"suffix": "None"}, "return_value": "None"}], "text": "def filename_suffix(suffix):\n    \"\"\"Compute a filename suffix for a data file.\n\n    If `suffix` is a string or None, simply return it. If `suffix` is True,\n    then build a suffix incorporating the hostname, process id, and a random\n    number.\n\n    Returns a string or None.\n\n    \"\"\"\n    if suffix is True:\n        # If data_suffix was a simple true value, then make a suffix with\n        # plenty of distinguishing information.  We do this here in\n        # `save()` at the last minute so that the pid will be correct even\n        # if the process forks.\n        dice = random.Random(os.urandom(8)).randint(0, 999999)\n        suffix = \"%s.%s.%06d\" % (socket.gethostname(), os.getpid(), dice)\n    return suffix"}, "source_for_file": {"line": 97, "args": [{"func_args": {"filename": "'/usr/local/lib/python3.8/inspect.py'"}, "return_value": "'/usr/local/lib/python3.8/inspect.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/os.py'"}, "return_value": "'/usr/local/lib/python3.8/os.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/platform.py'"}, "return_value": "'/usr/local/lib/python3.8/platform.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/re.py'"}, "return_value": "'/usr/local/lib/python3.8/re.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/sysconfig.py'"}, "return_value": "'/usr/local/lib/python3.8/sysconfig.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/traceback.py'"}, "return_value": "'/usr/local/lib/python3.8/traceback.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/.tox/py38/lib/python3.8/site-packages/coverage/inorout.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/.tox/py38/lib/python3.8/site-packages/coverage/inorout.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/format_fasta.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/format_fasta.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_functional.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_functional.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_specific_tests.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_specific_tests.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_37_tests.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_37_tests.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/lib.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/lib.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/downloader.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/downloader.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/chromosome.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/chromosome.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_38_tests.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_38_tests.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/cli.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/cli.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/exceptions.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/exceptions.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_meta_test.py'"}, "return_value": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_meta_test.py'"}], "text": "def source_for_file(filename):\n    \"\"\"Return the source filename for `filename`.\n\n    Given a file name being traced, return the best guess as to the source\n    file to attribute it to.\n\n    \"\"\"\n    if filename.endswith(\".py\"):\n        # .py files are themselves source files.\n        return filename\n\n    elif filename.endswith((\".pyc\", \".pyo\")):\n        # Bytecode files probably have source files near them.\n        py_filename = filename[:-1]\n        if os.path.exists(py_filename):\n            # Found a .py file, use that.\n            return py_filename\n        if env.WINDOWS:\n            # On Windows, it could be a .pyw file.\n            pyw_filename = py_filename + \"w\"\n            if os.path.exists(pyw_filename):\n                return pyw_filename\n        # Didn't find source, but it's probably the .py file we want.\n        return py_filename\n\n    elif filename.endswith(\"$py.class\"):\n        # Jython is easy to guess.\n        return filename[:-9] + \".py\"\n\n    # No idea, just use the file name as-is.\n    return filename"}, "read_python_source": {"line": 20, "args": [{"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/__init__.py'"}, "return_value": "b'from __future__ import absolute_import\\n\\nfrom .chromosome import Chromosome\\n\\nfrom .lib import BUILD37, BUILD38\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/chromosome.py'"}, "return_value": "b'import os\\n\\nfrom .exceptions import TooManyLoops, MissingDataError\\nfrom .lib import (BUILD37, BUILD38, get_data_directory, sorted_nicely,\\n                  BUILD37_ACCESSIONS, BUILD38_ACCESSIONS, ACCESSION_LENGTHS,\\n                  RCRS_ACCESSION, MITOCHONDRIA_NAMES)\\n\\n\\nclass Chromosome(object):\\n\\n    ASSEMBLY_CHROMOSOMES = {\\n        BUILD37: BUILD37_ACCESSIONS,\\n        BUILD38: BUILD38_ACCESSIONS\\n    }\\n\\n    def __init__(self, chromosome_name, assembly=BUILD37, loop=False, RCRS_N_remove=True):\\n        \"\"\"\\n        Usage:\\n\\n                Chromosome(\\'1\\').sequence(0, 100)\\n                returns the first 100 nucleotides of chromosome 1\\n\\n        The default assembly is Homo_sapiens.GRCh37\\n        You may also use Build 38:\\n\\n                from seqseek import BUILD38\\n                Chromosome(\\'1\\', BUILD38).sequence(0, 100)\\n        \"\"\"\\n        self.name = str(chromosome_name)\\n        self.assembly = assembly\\n        self.loop = loop\\n        self.RCRS_N_remove = RCRS_N_remove\\n\\n        self.validate_assembly()\\n        self.validate_name()\\n        self.validate_loop()\\n\\n        if self.name in ACCESSION_LENGTHS:\\n            # allow loading by accession\\n            self.accession = self.name\\n        else:\\n            # allow loading by name\\n            self.accession = self.ASSEMBLY_CHROMOSOMES[assembly][self.name]\\n\\n        self.length = ACCESSION_LENGTHS[self.accession]\\n\\n    def validate_assembly(self):\\n        if self.assembly not in (BUILD37, BUILD38):\\n            raise ValueError(\\n                \\'Sorry, the only supported assemblies are {} and {}\\'.format(\\n                    BUILD37, BUILD38))\\n\\n    def validate_name(self):\\n        if self.name not in ACCESSION_LENGTHS:\\n            if self.name not in self.ASSEMBLY_CHROMOSOMES[self.assembly]:\\n                raise ValueError(\\n                    \"{name} is not a valid chromosome name or accession\".format(\\n                        name=self.name))\\n\\n    def validate_loop(self):\\n        if self.loop and self.name not in MITOCHONDRIA_NAMES:\\n            raise ValueError(\\'Loop may only be specified for the mitochondria.\\')\\n\\n    def validate_coordinates(self, start, end):\\n        if end < 0:\\n            raise ValueError(\\'end must be a positive number\\')\\n        elif (start < 0 and not self.loop) or end < 0:\\n            raise ValueError(\"Start and end must be positive integers for this chromosome\")\\n        if end < start:\\n            raise ValueError(\"Start position cannot be greater than end position\")\\n        if start > self.length or (end > self.length and not self.loop):\\n            raise ValueError(\\'Coordinates out of bounds. Chr {} has {} bases.\\'.format(\\n                self.name, self.length))\\n        if self.loop and end - start > self.length:\\n            raise TooManyLoops()\\n\\n    @classmethod\\n    def sorted_chromosome_length_tuples(cls, assembly):\\n        # TODO: simplify\\n        name_to_accession = cls.ASSEMBLY_CHROMOSOMES[assembly]\\n        chromosome_length_tuples = []\\n        for name, accession in name_to_accession.items():\\n            if accession in ACCESSION_LENGTHS:\\n                chromosome_length_tuples.append((name, ACCESSION_LENGTHS[accession]))\\n\\n        return sorted(chromosome_length_tuples,\\n                      key=lambda pair:\\n                          sorted_nicely(\\n                              ACCESSION_LENGTHS.keys()).index(name_to_accession[pair[0]]))\\n\\n    def filename(self):\\n        return \\'{}.fa\\'.format(self.accession)\\n\\n    def path(self):\\n        data_dir = get_data_directory()\\n        return os.path.join(data_dir, self.filename())\\n\\n    def exists(self):\\n        return os.path.exists(self.path())\\n\\n    def header(self):\\n        with open(self.path()) as f:\\n            return f.readline()\\n\\n    def read(self, start, length):\\n        with open(self.path()) as fasta:\\n            header = fasta.readline()\\n            fasta.seek(start + len(header))\\n            return fasta.read(length)\\n\\n    def sequence(self, start, end):\\n        self.validate_coordinates(start, end)\\n\\n        if self.loop and end > self.length:\\n            reads = [(start, self.length - start), (0, end - self.length)]\\n        elif self.loop and start < 0:\\n            reads = [(self.length + start, abs(start)), (0, end)]\\n        else:\\n            reads = [(start, end - start)]\\n\\n        if not self.exists():\\n            build = \\'37\\' if self.assembly == BUILD37 else \\'38\\'\\n            raise MissingDataError(\\n                \\'{} does not exist. Please download on the command line with: \\'\\n                \\'download_build_{}\\'.format(self.path(), build))\\n\\n        sequence = \\'\\'.join([self.read(*read) for read in reads])\\n\\n        # The rCRS mito contig contains an \\'N\\' base at position 3107 to preserve legacy\\n        # nucleotide numbering. We remove it because it is not part of the observed\\n        # sequence. See http://www.mitomap.org/MITOMAP/HumanMitoSeq\\n        if self.accession == RCRS_ACCESSION and self.RCRS_N_remove is True:\\n            sequence = sequence.replace(\\'N\\', \\'\\')\\n\\n        return sequence\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/cli.py'"}, "return_value": "b\"import argparse\\nfrom .chromosome import BUILD37_ACCESSIONS, Chromosome\\nfrom .lib import BUILD37, BUILD38\\n\\n\\nPROGRAM_TO_ASSEMBLY = {\\n    'seqseek_37': BUILD37,\\n    'seqseek_38': BUILD38\\n}\\nRELATIVE_SIGNS = ('-', '+')\\nSIGN_FACTOR = {\\n    '-': -1,\\n    '+': 1\\n}\\n\\n\\ndef determine_start_end(arg_start, arg_end):\\n    relative_start, relative_end = None, None\\n    if arg_start[0] in RELATIVE_SIGNS:\\n        relative_start, arg_start = arg_start[0], arg_start[1:]\\n    if arg_end[0] in RELATIVE_SIGNS:\\n        relative_end, arg_end = arg_end[0], arg_end[1:]\\n\\n    if relative_start is not None and relative_end is not None:\\n        raise ValueError('Start and end cannot be both relative.')\\n\\n    start, end = int(arg_start), int(arg_end)\\n\\n    if relative_start is not None:\\n        start = end + SIGN_FACTOR[relative_start] * start\\n    elif relative_end is not None:\\n        end = start + SIGN_FACTOR[relative_end] * end\\n\\n    return start, end\\n\\n\\ndef cmd_line():\\n    parser = argparse.ArgumentParser(description='Print sequence')\\n    parser.add_argument('chromosome', type=str, help='Chromosome name to seek')\\n    parser.add_argument('start', type=str, help='Start position (can be relative, e.g. -50)')\\n    parser.add_argument('end', type=str, help='End position (can be relative, e.g. +50)')\\n    args = parser.parse_args()\\n    assembly = PROGRAM_TO_ASSEMBLY[parser.prog]\\n\\n    # Do it\\n    kwargs = {'loop': True} if args.chromosome in ('MT', BUILD37_ACCESSIONS['MT']) else {}\\n    c = Chromosome(args.chromosome, assembly=assembly, **kwargs)\\n    start, end = determine_start_end(args.start, args.end)\\n    print(c.sequence(start, end))\\n\""}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/downloader.py'"}, "return_value": "b'from __future__ import print_function\\nfrom __future__ import absolute_import\\nimport os\\nimport argparse\\nimport requests\\n\\nfrom .lib import get_data_directory, URI, BUILD37, BUILD38\\nfrom .chromosome import Chromosome\\n\\nfrom .tests.build_specific_tests import run_build_test_suite\\n\\nPROGRAM_TO_ASSEMBLY = {\\n    \\'download_build_37\\': BUILD37,\\n    \\'download_build_38\\': BUILD38\\n}\\n\\n\\ndef cmd_line():\\n    parser = argparse.ArgumentParser(description=\\'\\')\\n    parser.add_argument(\\'-v\\', dest=\\'verbose\\', action=\\'store_true\\')\\n    args = parser.parse_args()\\n\\n    assembly = PROGRAM_TO_ASSEMBLY[parser.prog]\\n    verbosity = args.verbose\\n    data_dir = get_data_directory()\\n\\n    # Do it\\n    Downloader(assembly, data_dir, verbosity).download_chromosomes()\\n\\n\\nclass Downloader(object):\\n\\n    SUPPORTED_ASSEMBLIES = (BUILD37, BUILD38)\\n\\n    def __init__(self, assembly, data_dir=None, verbose=True):\\n        self.assembly = assembly\\n        self.data_dir = data_dir or get_data_directory()\\n        self.verbose = verbose\\n\\n        self.validate_assembly()\\n\\n        self.log(\\'Data directory: {}\\'.format(self.data_dir))\\n        self.log(\\'Host: {}\\'.format(URI))\\n\\n    def log(self, msg, force=False):\\n        if self.verbose or force:\\n            print(msg)  # TODO: add a log handler\\n\\n    def validate_assembly(self):\\n        if self.assembly not in self.SUPPORTED_ASSEMBLIES:\\n            raise ValueError(\\'%s is not one of the supported assemblies %s\\'.format(\\n                self.assembly, self.SUPPORTED_ASSEMBLIES))\\n\\n    def get_missing_chromosomes(self):\\n        missing_chromosomes = []\\n\\n        for name, length in Chromosome.sorted_chromosome_length_tuples(self.assembly):\\n            chromosome = Chromosome(name, self.assembly)\\n            filepath = chromosome.path()\\n\\n            if not chromosome.exists():\\n                missing_chromosomes.append(name)\\n            else:\\n                expected_size = length + len(chromosome.header()) + 1\\n                size = os.path.getsize(filepath)\\n                if size != expected_size:\\n                    self.log(\\'Removing mismatched chromosome %s\\' % name)\\n                    missing_chromosomes.append(name)\\n                    os.remove(filepath)\\n\\n        return missing_chromosomes\\n\\n    def download_chromosomes(self):\\n        to_download = self.get_missing_chromosomes()\\n        self.log(\"Downloading {} chromosomes\".format(len(to_download)))\\n\\n        for name in to_download:\\n            self.download_chromosome(name)\\n        run_build_test_suite(self.assembly)\\n\\n    def download_chromosome(self, name):\\n        chromosome = Chromosome(name, self.assembly)\\n        path = chromosome.path()\\n        directory = os.path.dirname(chromosome.path())\\n\\n        if not os.path.isdir(directory):\\n            os.makedirs(directory)\\n            self.log(\\'Created directory {}\\'.format(directory), True)\\n\\n        uri = URI + chromosome.filename()\\n\\n        self.log(\\n            \\'Downloading from {} to {}\\'.format(uri, path), True)\\n\\n        r = requests.get(uri, stream=True)\\n\\n        # TODO can we do this in fewer than 3 passes?\\n\\n        with open(path, \\'wb\\') as fd:\\n            for chunk in r.iter_content(chunk_size=1024):\\n                fd.write(chunk)\\n\\n        with open(path, \\'r\\') as f:\\n            header = f.readline()\\n            content = f.read().replace(\\'\\\\n\\', \\'\\')\\n\\n        with open(path, \\'w\\') as f:\\n            f.write(header)\\n            f.write(content)\\n            f.write(\\'\\\\n\\')\\n\\n        self.log(\\'...Complete\\', True)\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/exceptions.py'"}, "return_value": "b'class TooManyLoops(Exception):\\n    pass\\n\\n\\nclass MissingDataError(Exception):\\n    pass\\n\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/format_fasta.py'"}, "return_value": "b'from __future__ import print_function\\nimport argparse\\n\\n\\ndef run(path):\\n    print(\"Formatting %s\" % path)\\n    with open(path) as fasta:\\n        header = \\'\\'\\n        first_line = fasta.readline()\\n        if not first_line.startswith(\\'>\\'):\\n            header = \\'> \\' + path.split(\\'/\\')[-1].split(\\'.\\')[0] + \\'\\\\n\\'\\n            first_line.replace(\\'\\\\n\\', \\'\\')\\n        clean = fasta.read().replace(\\'\\\\n\\', \\'\\')\\n\\n    with open(path + \\'.seqseek\\', \\'w\\') as formatted:\\n        formatted.write(header)\\n        formatted.write(first_line)\\n        formatted.write(clean)\\n\\n    with open(path + \\'.seqseek\\') as done:\\n        done.readline()\\n        sequence = done.read()\\n        print(\"Length is %d\" % len(sequence))\\n\\n\\nif __name__ == \\'__main__\\':\\n    parser = argparse.ArgumentParser()\\n    parser.add_argument(\"fasta_path\")\\n    args = parser.parse_args()\\n    run(args.fasta_path)\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/lib.py'"}, "return_value": "b'import re\\nimport os\\n\\n\\nBUILD37 = \\'homo_sapiens_GRCh37\\'\\nBUILD38 = \\'homo_sapiens_GRCh38\\'\\n\\nRCRS_ACCESSION = \\'NC_012920.1\\'\\n\\nDEFAULT_DATA_DIR = \\'~/.seqseek\\'\\nDATA_DIR_VARIABLE = \\'SEQSEEK_DATA_DIR\\'\\n\\nURI = \\'https://s3-us-west-2.amazonaws.com/seqseek/\\'\\n\\n\\nBUILD37_ACCESSIONS = {\\n    \\'1\\': \\'NC_000001.10\\',\\n    \\'2\\': \\'NC_000002.11\\',\\n    \\'3\\': \\'NC_000003.11\\',\\n    \\'4\\': \\'NC_000004.11\\',\\n    \\'5\\': \\'NC_000005.9\\',\\n    \\'6\\': \\'NC_000006.11\\',\\n    \\'7\\': \\'NC_000007.13\\',\\n    \\'8\\': \\'NC_000008.10\\',\\n    \\'9\\': \\'NC_000009.11\\',\\n    \\'10\\': \\'NC_000010.10\\',\\n    \\'11\\': \\'NC_000011.9\\',\\n    \\'12\\': \\'NC_000012.11\\',\\n    \\'13\\': \\'NC_000013.10\\',\\n    \\'14\\': \\'NC_000014.8\\',\\n    \\'15\\': \\'NC_000015.9\\',\\n    \\'16\\': \\'NC_000016.9\\',\\n    \\'17\\': \\'NC_000017.10\\',\\n    \\'18\\': \\'NC_000018.9\\',\\n    \\'19\\': \\'NC_000019.9\\',\\n    \\'20\\': \\'NC_000020.10\\',\\n    \\'21\\': \\'NC_000021.8\\',\\n    \\'22\\': \\'NC_000022.10\\',\\n    \\'X\\': \\'NC_000023.10\\',\\n    \\'Y\\': \\'NC_000024.9\\',\\n    \\'MT\\': \\'NC_012920.1\\',\\n    \\'RSRS\\': \\'NC_001807.4\\',\\n\\n    # UCSC names for haplotype scaffolds\\n    \\'chr6_apd_hap1\\': \\'NT_167244.1\\',\\n    \\'chr6_cox_hap2\\': \\'NT_113891.2\\',\\n    \\'chr6_dbb_hap3\\': \\'NT_167245.1\\',\\n    \\'chr6_mann_hap4\\': \\'NT_167246.1\\',\\n    \\'chr6_mcf_hap5\\': \\'NT_167247.1\\',\\n    \\'chr6_qbl_hap6\\': \\'NT_167248.1\\',\\n    \\'chr6_ssto_hap7\\': \\'NT_167249.1\\',\\n    \\'chr4_ctg9_hap1\\': \\'NT_167250.1\\',\\n    \\'chr17_ctg5_hap1\\': \\'NT_167251.1\\'\\n}\\n\\nBUILD38_ACCESSIONS = {\\n    \\'1\\': \\'NC_000001.11\\',\\n    \\'2\\': \\'NC_000002.12\\',\\n    \\'3\\': \\'NC_000003.12\\',\\n    \\'4\\': \\'NC_000004.12\\',\\n    \\'5\\': \\'NC_000005.10\\',\\n    \\'6\\': \\'NC_000006.12\\',\\n    \\'7\\': \\'NC_000007.14\\',\\n    \\'8\\': \\'NC_000008.11\\',\\n    \\'9\\': \\'NC_000009.12\\',\\n    \\'10\\': \\'NC_000010.11\\',\\n    \\'11\\': \\'NC_000011.10\\',\\n    \\'12\\': \\'NC_000012.12\\',\\n    \\'13\\': \\'NC_000013.11\\',\\n    \\'14\\': \\'NC_000014.9\\',\\n    \\'15\\': \\'NC_000015.10\\',\\n    \\'16\\': \\'NC_000016.10\\',\\n    \\'17\\': \\'NC_000017.11\\',\\n    \\'18\\': \\'NC_000018.10\\',\\n    \\'19\\': \\'NC_000019.10\\',\\n    \\'20\\': \\'NC_000020.11\\',\\n    \\'21\\': \\'NC_000021.9\\',\\n    \\'22\\': \\'NC_000022.11\\',\\n    \\'X\\': \\'NC_000023.11\\',\\n    \\'Y\\': \\'NC_000024.10\\',\\n    \\'MT\\': \\'NC_012920.1\\',\\n    \\'RSRS\\': \\'NC_001807.4\\',\\n}\\n\\n# chromosome names and lengths for build 37\\nACCESSION_LENGTHS = {\\n    # GRCh38\\n    \\'NC_000001.11\\':  248956422,\\n    \\'NC_000002.12\\':  242193529,\\n    \\'NC_000003.12\\':  198295559,\\n    \\'NC_000004.12\\':  190214555,\\n    \\'NC_000005.10\\':  181538259,\\n    \\'NC_000006.12\\':  170805979,\\n    \\'NC_000007.14\\':  159345973,\\n    \\'NC_000008.11\\':  145138636,\\n    \\'NC_000009.12\\':  138394717,\\n    \\'NC_000010.11\\':  133797422,\\n    \\'NC_000011.10\\':  135086622,\\n    \\'NC_000012.12\\':  133275309,\\n    \\'NC_000013.11\\':  114364328,\\n    \\'NC_000014.9\\':   107043718,\\n    \\'NC_000015.10\\':  101991189,\\n    \\'NC_000016.10\\':  90338345,\\n    \\'NC_000017.11\\':  83257441,\\n    \\'NC_000018.10\\':  80373285,\\n    \\'NC_000019.10\\':  58617616,\\n    \\'NC_000020.11\\':  64444167,\\n    \\'NC_000021.9\\':   46709983,\\n    \\'NC_000022.11\\':  50818468,\\n    \\'NC_000023.11\\':  156040895,\\n    \\'NC_000024.10\\':  57227415,\\n\\n    # GRCh37\\n    \\'NC_000001.10\\':  249250621,\\n    \\'NC_000002.11\\':  243199373,\\n    \\'NC_000003.11\\':  198022430,\\n    \\'NC_000004.11\\':  191154276,\\n    \\'NC_000005.9\\':   180915260,\\n    \\'NC_000006.11\\':  171115067,\\n    \\'NC_000007.13\\':  159138663,\\n    \\'NC_000008.10\\':  146364022,\\n    \\'NC_000009.11\\':  141213431,\\n    \\'NC_000010.10\\':  135534747,\\n    \\'NC_000011.9\\':   135006516,\\n    \\'NC_000012.11\\':  133851895,\\n    \\'NC_000013.10\\':  115169878,\\n    \\'NC_000014.8\\':   107349540,\\n    \\'NC_000015.9\\':   102531392,\\n    \\'NC_000016.9\\':   90354753,\\n    \\'NC_000017.10\\':  81195210,\\n    \\'NC_000018.9\\':   78077248,\\n    \\'NC_000019.9\\':   59128983,\\n    \\'NC_000020.10\\':  63025520,\\n    \\'NC_000021.8\\':   48129895,\\n    \\'NC_000022.10\\':  51304566,\\n    \\'NC_000023.10\\':  155270560,\\n    \\'NC_000024.9\\':   59373566,\\n\\n    # Mito is shared between 37 & 38\\n    \\'NC_012920.1\\':   16569,  # rCRS\\n    \\'NC_001807.4\\':   16571,  # RSRS\\n\\n    # Haplotype scaffolds\\n    \\'NT_113891.2\\': 4795371,\\n    \\'NT_167244.1\\': 4622290,\\n    \\'NT_167245.1\\': 4610396,\\n    \\'NT_167246.1\\': 4683263,\\n    \\'NT_167247.1\\': 4833398,\\n    \\'NT_167248.1\\': 4611984,\\n    \\'NT_167249.1\\': 4928567,\\n    \\'NT_167250.1\\': 590426,\\n    \\'NT_167251.1\\': 1680828,\\n}\\n\\nMITOCHONDRIA_NAMES = {\\'MT\\', \\'RSRS\\', BUILD37_ACCESSIONS[\\'MT\\'], BUILD37_ACCESSIONS[\\'RSRS\\'],\\n                      BUILD38_ACCESSIONS[\\'MT\\'], BUILD38_ACCESSIONS[\\'RSRS\\']}\\n\\n\\ndef get_data_directory():\\n    default = os.path.expanduser(DEFAULT_DATA_DIR)\\n    storage_dir = os.environ.get(DATA_DIR_VARIABLE, default)\\n    os.environ[DATA_DIR_VARIABLE] = storage_dir\\n    if not os.path.exists(storage_dir):\\n        os.makedirs(storage_dir)\\n    return storage_dir\\n\\n\\ndef sorted_nicely(l):\\n    \"\"\"\\n    Sort the given iterable in the way that humans expect.\\n    http://blog.codinghorror.com/sorting-for-humans-natural-sort-order/\\n    \"\"\"\\n    convert = lambda text: int(text) if text.isdigit() else text\\n    alphanum_key = lambda key: [ convert(c) for c in re.split(\\'([0-9]+)\\', key) ]\\n    return sorted(l, key = alphanum_key)\\n\\n\\n\"\"\"\\nThe nine haplotype scaffolds are:\\n    name                    accession       UCSC chr name\\n    HSCHR6_MHC_APD_CTG1     GL000250.1      chr6_apd_hap1\\n    HSCHR6_MHC_COX_CTG1     GL000251.1      chr6_cox_hap2\\n    HSCHR6_MHC_DBB_CTG1     GL000252.1      chr6_dbb_hap3\\n    HSCHR6_MHC_MANN_CTG1    GL000253.1      chr6_mann_hap4\\n    HSCHR6_MHC_MCF_CTG1     GL000254.1      chr6_mcf_hap5\\n    HSCHR6_MHC_QBL_CTG1     GL000255.1      chr6_qbl_hap6\\n    HSCHR6_MHC_SSTO_CTG1    GL000256.1      chr6_ssto_hap7\\n    HSCHR4_1_CTG9           GL000257.1      chr4_ctg9_hap1\\n    HSCHR17_1_CTG5          GL000258.1      chr17_ctg5_hap1\\n\"\"\"\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/tests/__init__.py'"}, "return_value": "b''"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/__init__.py'"}, "return_value": "b'from __future__ import absolute_import\\nfrom .build_specific_tests import run_build_test_suite, test_build_38, test_build_37\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_37_tests.py'"}, "return_value": "b'import os\\n\\nfrom seqseek.chromosome import Chromosome\\n\\nfrom seqseek.lib import get_data_directory, BUILD37_ACCESSIONS, ACCESSION_LENGTHS\\n\\nfrom unittest import TestCase\\n\\n\\nclass TestBuild37(TestCase):\\n\\n    def test_file_names(self):\\n        for accession in BUILD37_ACCESSIONS.values():\\n            fasta = os.path.join(get_data_directory(), str(accession) + \".fa\")\\n            self.assertTrue(os.path.isfile(fasta), fasta)\\n\\n    # all test sequences were extracted from https://genome.ucsc.edu/ using the\\n    # chromosome browser tool\\n\\n    def test_chr_start_sequences(self):\\n        exclude = (\\'MT\\', \\'17\\' , \\'chr6_cox_hap2\\', \\'chr6_apd_hap1\\', \\'chr6_ssto_hap7\\',\\n                   \\'chr6_mcf_hap5\\', \\'chr6_qbl_hap6\\', \\'chr6_mann_hap4\\', \\'chr6_dbb_hap3\\',\\n                   \\'chr17_ctg5_hap1\\', \\'chr4_ctg9_hap1\\', \\'RSRS\\')\\n        test_str = \"N\" * 20\\n        for name in BUILD37_ACCESSIONS.keys():\\n            # these chromosomes do not have telomeres\\n            if name in exclude:\\n                continue\\n            seq = Chromosome(name).sequence(0, 20)\\n            self.assertEqual(seq, test_str, name)\\n\\n    def test_chr1_sequence(self):\\n        expected_seq = \"AATCTAAAAAACTGTCAGAT\"\\n        seq = Chromosome(1).sequence(243400000, 243400020)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chr2_sequence(self):\\n        expected_seq = \"tgtccacgcgcggatgtcgt\"\\n        seq = Chromosome(2).sequence(237513040, 237513060)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chr3_sequence(self):\\n        expected_seq = \"ctctttcgcccaggctggag\"\\n        seq = Chromosome(3).sequence(190352536, 190352556)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chr4_sequence(self):\\n        expected_seq = \"ttggagccaaggtctcactc\"\\n        seq = Chromosome(4).sequence(184622015, 184622035)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chr5_sequence(self):\\n        expected_seq = \"CTTTACTCCACTCATATTCT\"\\n        seq = Chromosome(5).sequence(158879589, 158879609)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr6_sequence(self):\\n        expected_seq = \"AGGTGGTAGCCCAGTGGTGC\"\\n        seq = Chromosome(6).sequence(158882594, 158882614)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr7_sequence(self):\\n        expected_seq = \"CTTGCTCTCATCCTCCGGGT\"\\n        seq = Chromosome(7).sequence(158896447, 158896467)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr8_sequence(self):\\n        expected_seq = \"CTGTCTCCACTGCAGGGCTC\"\\n        seq = Chromosome(8).sequence(139508913, 139508933)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr9_sequence(self):\\n        expected_seq = \"GAGGAGAACATTTGCCTGCA\"\\n        seq = Chromosome(9).sequence(140705912, 140705932)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr10_sequence(self):\\n        expected_seq = \"TCTGCAGGGGGCGGAGGAAA\"\\n        seq = Chromosome(10).sequence(121086020, 121086040)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr11_sequence(self):\\n        expected_seq = \"CTGAGGGTGGCGCTCTCCCC\"\\n        seq = Chromosome(11).sequence(132812820, 132812840)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr12_sequence(self):\\n        expected_seq = \"CCTCATGCCCAGTTCTACGT\"\\n        seq = Chromosome(12).sequence(132824462, 132824482)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr13_sequence(self):\\n        expected_seq = \"GAAAAGAATTCAAAGAACAC\"\\n        seq = Chromosome(13).sequence(113086756, 113086776)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr14_sequence(self):\\n        expected_seq = \"GCAACGGGGTGGTCATCCAC\"\\n        seq = Chromosome(14).sequence(105204712, 105204732)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr15_sequence(self):\\n        expected_seq = \"ttcaatcactgatacccttt\"\\n        seq = Chromosome(15).sequence(99921491, 99921511)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chr16_sequence(self):\\n        expected_seq = \"CTTTCAGCACAGGGCTGTGA\"\\n        seq = Chromosome(16).sequence(89862313, 89862333)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr17_sequence(self):\\n        expected_seq = \"TGGAGCTGGAGCCACAGGTC\"\\n        seq = Chromosome(17).sequence(80014178, 80014198)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr18_sequence(self):\\n        expected_seq = \"CGAACACTTCGTTGTCCTCT\"\\n        seq = Chromosome(18).sequence(74778253, 74778273)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr19_sequence(self):\\n        expected_seq = \"GGCTGGTTAAACTCGGGGTC\"\\n        seq = Chromosome(19).sequence(55798374, 55798394)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr20_sequence(self):\\n        expected_seq = \"CTGCCCAAGTGCTCCTGGAG\"\\n        seq = Chromosome(20).sequence(55803284, 55803304)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr21_sequence(self):\\n        expected_seq = \"GGCTGGTGTGGCACATGATG\"\\n        seq = Chromosome(21).sequence(46074515, 46074535)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr22_sequence(self):\\n        expected_seq = \"AGACGCCGCCCCTGTTCATG\"\\n        seq = Chromosome(22).sequence(50552076, 50552096)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chrX_sequence(self):\\n        expected_seq = \"GCAAGCAGCAGGATGGGGCC\"\\n        seq = Chromosome(\"X\").sequence(152811545, 152811565)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chrY_sequence(self):\\n        expected_seq = \"CTGAACGTGCTGAGTTACAG\"\\n        seq = Chromosome(\"Y\").sequence(25325643, 25325663)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chrMT_sequence(self):\\n        expected_seq = \"ATTGTACGGTACCATAAATA\"\\n        seq = Chromosome(\"MT\").sequence(16121, 16141)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr6_cox_hap2(self):\\n        accession = BUILD37_ACCESSIONS[\\'chr6_cox_hap2\\']\\n        max_length = ACCESSION_LENGTHS[accession]\\n\\n        expected_seq = \"GATCCTGAGTGGGTGAGTGG\"\\n        seq = Chromosome(\"chr6_cox_hap2\").sequence(3065395, 3065415)\\n        self.assertEqual(expected_seq, seq)\\n\\n        expected_seq = \"TATTCTTGCCAATAT\"\\n        seq = Chromosome(\"chr6_cox_hap2\").sequence(200, 215).upper()\\n        self.assertEqual(expected_seq, seq)\\n\\n        expected_seq = \"TCTGGCCTGGGAGTC\"\\n        seq = Chromosome(\"chr6_cox_hap2\").sequence(0, 15).upper()\\n        self.assertEqual(expected_seq, seq)\\n\\n        expected = \"tc\"\\n        seq = Chromosome(\\'chr6_cox_hap2\\').sequence(4795369, max_length)\\n        self.assertEqual(expected.upper(), seq)\\n\\n    def test_chr6_apd_hap1(self):\\n        accession = BUILD37_ACCESSIONS[\\'chr6_apd_hap1\\']\\n        max_length = ACCESSION_LENGTHS[accession]\\n\\n        expected = \"GAATTCAGCTCGCCGACGGC\"\\n        seq = Chromosome(\\'chr6_apd_hap1\\').sequence(0, 20)\\n        self.assertEqual(expected, seq)\\n\\n        expected = \"ACAATTAGAAATACTAGGAG\"\\n        seq = Chromosome(\\'chr6_apd_hap1\\').sequence(3000, 3020)\\n        self.assertEqual(expected, seq)\\n\\n        expected = \"cacT\"\\n        seq = Chromosome(\\'chr6_apd_hap1\\').sequence(max_length - 4, max_length)\\n        self.assertEqual(expected.upper(), seq)\\n\\n    def test_chr6_ssto_hap7(self):\\n        accession = BUILD37_ACCESSIONS[\\'chr6_ssto_hap7\\']\\n        max_length = ACCESSION_LENGTHS[accession]\\n\\n        expected = \"GGCCAGGTTTTGTGAATTCT\"\\n        seq = Chromosome(\\'chr6_ssto_hap7\\').sequence(3000, 3020)\\n        self.assertEqual(expected.upper(), seq)\\n\\n        expected = \"ggcc\"\\n        seq = Chromosome(\\'chr6_ssto_hap7\\').sequence(max_length - 4, max_length)\\n        self.assertEqual(expected.upper(), seq)\\n\\n    def test_chr6_mcf_hap5(self):\\n        expected = \"ACAATTAGAAATACTAGGAG\"\\n        seq = Chromosome(\\'chr6_mcf_hap5\\').sequence(3000, 3020)\\n        self.assertEqual(expected, seq)\\n\\n    def test_chr6_qbl_hap6(self):\\n        accession = BUILD37_ACCESSIONS[\\'chr6_qbl_hap6\\']\\n        max_length = ACCESSION_LENGTHS[accession]\\n\\n        expected = \"ACAATTAGAAATACTAGGAG\"\\n        seq = Chromosome(\\'chr6_qbl_hap6\\').sequence(3000, 3020)\\n        self.assertEqual(expected, seq)\\n\\n        expected = \"ggcc\"\\n        seq = Chromosome(\\'chr6_qbl_hap6\\').sequence(max_length - 4, max_length)\\n        self.assertEqual(expected.upper(), seq)\\n\\n    def test_chr6_mann_hap4(self):\\n        expected = \"ACAATTAGAAATACTAGGAG\"\\n        seq = Chromosome(\\'chr6_mann_hap4\\').sequence(3000, 3020)\\n        self.assertEqual(expected, seq)\\n\\n    def test_chr6_dbb_hap3(self):\\n        expected = \"ACAATTAGAAATACTAGGAG\"\\n        seq = Chromosome(\\'chr6_dbb_hap3\\').sequence(3000, 3020)\\n        self.assertEqual(expected, seq)\\n\\n    def test_chr17_ctg5_hap1(self):\\n        expected = \"TTTTGGCTACAATAATTCTT\"\\n        seq = Chromosome(\\'chr17_ctg5_hap1\\').sequence(3000, 3020)\\n        self.assertEqual(expected, seq)\\n\\n    def test_looped_mito(self):\\n        mito_accession = BUILD37_ACCESSIONS[\\'MT\\']\\n        mito_length = ACCESSION_LENGTHS[mito_accession]\\n        expected = \\'CATCACGATGGATCACAGGT\\'\\n\\n        seq = Chromosome(\\'MT\\', loop=True).sequence(mito_length - 10, mito_length + 10)\\n        self.assertEqual(expected, seq)\\n\\n        seq = Chromosome(\\'MT\\', loop=True).sequence(-10, 10)\\n        self.assertEqual(expected, seq)\\n\\n    def test_mito_N(self):\\n        \"\"\"\\n        From mitomap:\\n            *3107del is maintained in this revised sequence with the gap\\n            represented by an \\'N\\'. THIS ALLOWS HISTORICAL NUCLEOTIDE NUMBERING TO\\n            BE MAINTAINED.\\n\\n        We remove this \\'N\\' base since it is only present to preserve numbering and is\\n        not actually part of the observed sequence.\\n        \"\"\"\\n        self.assertEqual(\\'\\', Chromosome(\\'MT\\').sequence(3106, 3107))\\n\\n    def test_RSRS(self):\\n        expected = \\'GGAC\\'\\n        seq = Chromosome(\\'NC_001807.4\\').sequence(750, 754)\\n        self.assertEqual(expected, seq)\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_38_tests.py'"}, "return_value": "b'import os\\nimport fnmatch\\n\\nfrom seqseek.chromosome import Chromosome\\n\\nfrom seqseek.lib import get_data_directory, BUILD38_ACCESSIONS, BUILD38, ACCESSION_LENGTHS\\n\\nfrom unittest import TestCase\\n\\n\\nclass TestBuild38(TestCase):\\n\\n    def test_file_names(self):\\n        for accession in BUILD38_ACCESSIONS.values():\\n            fasta = os.path.join(get_data_directory(), str(accession) + \".fa\")\\n            self.assertTrue(os.path.isfile(fasta), fasta)\\n\\n    # all test sequences were extracted from https://genome.ucsc.edu/ using the\\n    # chromosome browser tool\\n\\n    def test_chr_start_sequences(self):\\n        test_str = \"N\" * 20\\n        for name in BUILD38_ACCESSIONS.keys():\\n            # these chromosomes do not have telomeres\\n            if name in (\\'MT\\', \\'RSRS\\', \\'17\\'):\\n                continue\\n            seq = Chromosome(name, assembly=BUILD38).sequence(0, 20)\\n            self.assertEqual(seq, test_str)\\n\\n    def test_chr1_sequence(self):\\n        expected_seq = \"ACAGGAAAAAGATAGCATTC\"\\n        seq = Chromosome(1, assembly=BUILD38).sequence(243415701, 243415721)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr2_sequence(self):\\n        expected_seq = \"GCTGGGCCTGAACTGATATC\"\\n        seq = Chromosome(2, assembly=BUILD38).sequence(237518537, 237518557)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr3_sequence(self):\\n        expected_seq = \"GCTGAAGTCATCGATGTGAG\"\\n        seq = Chromosome(3, assembly=BUILD38).sequence(175256410, 175256430)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr4_sequence(self):\\n        expected_seq = \"CTGtttctgaccacagcctc\"\\n        seq = Chromosome(4, assembly=BUILD38).sequence(184624738, 184624758)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chr5_sequence(self):\\n        expected_seq = \"CTGTCAATTATCACTGGATC\"\\n        seq = Chromosome(5, assembly=BUILD38).sequence(159073395, 159073415)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr6_sequence(self):\\n        expected_seq = \"GATGCACGCTGCTGTTTTAT\"\\n        seq = Chromosome(6, assembly=BUILD38).sequence(155144605, 155144625)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr7_sequence(self):\\n        expected_seq = \"GAGCTGGTGGGGAGTAACCC\"\\n        seq = Chromosome(7, assembly=BUILD38).sequence(154446213, 154446233)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr8_sequence(self):\\n        expected_seq = \"atcgtggcgtgttctgcagg\"\\n        seq = Chromosome(8, assembly=BUILD38).sequence(132447200, 132447220)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chr9_sequence(self):\\n        expected_seq = \"GAACCCTCTCATCGTCAAGG\"\\n        seq = Chromosome(9, assembly=BUILD38).sequence(132410447, 132410467)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr10_sequence(self):\\n        expected_seq = \"TTCAGGTTCCTTTGCAGCTC\"\\n        seq = Chromosome(10, assembly=BUILD38).sequence(122849420, 122849440)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr11_sequence(self):\\n        expected_seq = \"TTTTTAAATGAGTATCCTGG\"\\n        seq = Chromosome(11, assembly=BUILD38).sequence(122850195, 122850215)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr12_sequence(self):\\n        expected_seq = \"CATCCCCAGTTTCCCGCGGG\"\\n        seq = Chromosome(12, assembly=BUILD38).sequence(122850834, 122850854)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr13_sequence(self):\\n        expected_seq = \"CCCCCCGAAAAGGGCAAAGG\"\\n        seq = Chromosome(13, assembly=BUILD38).sequence(113089709, 113089729)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr14_sequence(self):\\n        expected_seq = \"CCCATGTAGTCCAGGTCAGA\"\\n        seq = Chromosome(14, assembly=BUILD38).sequence(100353686, 100353706)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr15_sequence(self):\\n        expected_seq = \"attaaaatcatccaatttcc\"\\n        seq = Chromosome(15, assembly=BUILD38).sequence(86987986, 86988006)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chr16_sequence(self):\\n        expected_seq = \"TTTCAAGCCACAGTCGAGGA\"\\n        seq = Chromosome(16, assembly=BUILD38).sequence(83670789, 83670809)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr17_sequence(self):\\n        expected_seq = \"aaacatcatctctaccaaaa\"\\n        seq = Chromosome(17, assembly=BUILD38).sequence(80014178, 80014198)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chr18_sequence(self):\\n        expected_seq = \"TGCAAAGAGAAATCCTTgga\"\\n        seq = Chromosome(18, assembly=BUILD38).sequence(67834418, 67834438)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chr19_sequence(self):\\n        expected_seq = \"CTGGGCTGCAGAATCGCTGG\"\\n        seq = Chromosome(19, assembly=BUILD38).sequence(45500047, 45500067)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr20_sequence(self):\\n        expected_seq = \"ATGAGATGGACCAAACGCCC\"\\n        seq = Chromosome(20, assembly=BUILD38).sequence(59743106, 59743126)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr21_sequence(self):\\n        expected_seq = \"GGCCCCCCCGGACCACCAGG\"\\n        seq = Chromosome(21, assembly=BUILD38).sequence(45497642, 45497662)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr22_sequence(self):\\n        expected_seq = \"CTTTTCATTAACTGGATAAA\"\\n        seq = Chromosome(22, assembly=BUILD38).sequence(43711474, 43711494)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chrX_sequence(self):\\n        expected_seq = \"GGACAACACCtgttaggggc\"\\n        seq = Chromosome(\"X\", assembly=BUILD38).sequence(152811545, 152811565)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chrY_sequence(self):\\n        expected_seq = \"CAGACCTTCTGCAGTGCACC\"\\n        seq = Chromosome(\"Y\", assembly=BUILD38).sequence(25325643, 25325663)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chrMT_sequence(self):\\n        expected_seq = \"ATTGTACGGTACCATAAATA\"\\n        seq = Chromosome(\"MT\", assembly=BUILD38).sequence(16121, 16141)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_looped_mito(self):\\n        mito_accession = BUILD38_ACCESSIONS[\\'MT\\']\\n        mito_length = ACCESSION_LENGTHS[mito_accession]\\n        expected = \\'CATCACGATGGATCACAGGT\\'\\n\\n        seq = Chromosome(\\'MT\\', BUILD38, loop=True).sequence(mito_length - 10, mito_length + 10)\\n        self.assertEqual(expected, seq)\\n\\n        seq = Chromosome(\\'MT\\', BUILD38, loop=True).sequence(-10, 10)\\n        self.assertEqual(expected, seq)\\n\\n    def test_mito_N(self):\\n        \"\"\"\\n        From mitomap:\\n            *3107del is maintained in this revised sequence with the gap\\n            represented by an \\'N\\'. THIS ALLOWS HISTORICAL NUCLEOTIDE NUMBERING TO\\n            BE MAINTAINED.\\n\\n        We remove this \\'N\\' base since it is only present to preserve numbering and is\\n        not actually part of the observed sequence.\\n        \"\"\"\\n        self.assertEqual(\\'\\', Chromosome(\\'MT\\').sequence(3106, 3107))\\n\\n    def test_RSRS(self):\\n        expected = \\'GGAC\\'\\n        seq = Chromosome(\\'NC_001807.4\\').sequence(750, 754)\\n        self.assertEqual(expected, seq)\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_specific_tests.py'"}, "return_value": "b'from __future__ import print_function\\nfrom __future__ import absolute_import\\nimport unittest\\nfrom seqseek.lib import BUILD37, BUILD38\\nfrom .build_37_tests import TestBuild37\\nfrom .build_38_tests import TestBuild38\\n\\n\\nASSEMBLY_TEST_SUITE = {\\n    BUILD37: TestBuild37,\\n    BUILD38: TestBuild38\\n}\\n\\ndef run_build_test_suite(assembly):\\n    print(\"Running tests for {assembly}\".format(assembly=assembly))\\n    suite = unittest.TestLoader().loadTestsFromTestCase(ASSEMBLY_TEST_SUITE[assembly])\\n    unittest.TextTestRunner(verbosity=3).run(suite)\\n\\ndef test_build_37():\\n    run_build_test_suite(BUILD37)\\n\\ndef test_build_38():\\n    run_build_test_suite(BUILD38)\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_functional.py'"}, "return_value": "b'import os\\nfrom unittest import TestCase\\n\\nfrom seqseek.cli import determine_start_end\\nfrom seqseek.exceptions import TooManyLoops\\nfrom seqseek.chromosome import Chromosome, MissingDataError\\nfrom seqseek.lib import get_data_directory, BUILD37, BUILD37_ACCESSIONS, ACCESSION_LENGTHS, DATA_DIR_VARIABLE\\n\\n\\nclass TestDataDirectory(TestCase):\\n\\n    TEST_DATA_DIR = os.path.join(\\'seqseek\\', \\'tests\\', \\'test_chromosomes\\')\\n\\n    def setUp(self):\\n        os.environ[DATA_DIR_VARIABLE] = TestChromosome.TEST_DATA_DIR\\n\\n    def test_get_data_directory(self):\\n        data_dir = get_data_directory()\\n        self.assertEqual(TestChromosome.TEST_DATA_DIR, data_dir)\\n\\n    def test_make_data_directory(self):\\n        new_dir = os.path.join(TestChromosome.TEST_DATA_DIR, \"test\")\\n        self.assertFalse(os.path.isdir(new_dir))\\n        os.environ[DATA_DIR_VARIABLE] = new_dir\\n        get_data_directory()\\n        self.assertTrue(os.path.isdir(new_dir))\\n        os.rmdir(new_dir)\\n\\n\\nclass TestChromosome(TestCase):\\n\\n    TEST_DATA_DIR = os.path.join(\\'seqseek\\', \\'tests\\', \\'test_chromosomes\\')\\n\\n    def setUp(self):\\n        mt_accession = BUILD37_ACCESSIONS[\\'MT\\']\\n        self._mt_length = ACCESSION_LENGTHS[mt_accession]\\n        os.environ[DATA_DIR_VARIABLE] = TestChromosome.TEST_DATA_DIR\\n        ACCESSION_LENGTHS[mt_accession] = 20\\n\\n    def tearDown(self):\\n        mt_accession = BUILD37_ACCESSIONS[\\'MT\\']\\n        ACCESSION_LENGTHS[mt_accession] = self._mt_length\\n\\n    def test_invalid_assembly(self):\\n        with self.assertRaises(ValueError):\\n            Chromosome(\\'1\\', \\'build_39\\')\\n\\n    def test_invalid_name(self):\\n        with self.assertRaises(ValueError):\\n            Chromosome(\\'0\\', BUILD37)\\n\\n    def test_no_errors(self):\\n        Chromosome(\\'1\\').path()\\n        Chromosome(\\'1\\').sorted_chromosome_length_tuples(assembly=BUILD37)\\n        Chromosome(\\'1\\').filename()\\n\\n    def test_chr1_sequences(self):\\n        expected_seq = \\'GGGGCGGGAGGACGGGCCCG\\'\\n        seq = Chromosome(1).sequence(0, 20)\\n        self.assertEqual(seq, expected_seq)\\n        self.assertEqual(len(seq), 20)\\n        expected_seq = \\'GGGAG\\'\\n        seq = Chromosome(1).sequence(5, 10)\\n        self.assertEqual(seq, expected_seq)\\n\\n    def test_chrMT_sequence(self):\\n        expected_seq = \\'GATCACAGGTCTTCACCCT\\'\\n        seq = Chromosome(\\'MT\\').sequence(0, 20)\\n        self.assertEqual(seq, expected_seq)\\n        self.assertEqual(len(seq), 19)  # the N base was removed\\n        expected_seq = \\'CAGGT\\'\\n        seq = Chromosome(\\'MT\\').sequence(5, 10)\\n        self.assertEqual(seq, expected_seq)\\n\\n    def test_rCRS_sequence_retain_N(self):\\n        expected_seq = \\'GATCACAGGTCTNTCACCCT\\'\\n        seq = Chromosome(\\'MT\\', RCRS_N_remove=False).sequence(0, 20)\\n        self.assertEqual(seq, expected_seq)\\n        self.assertTrue(\\'N\\' in seq)  # the N base was *not* removed\\n\\n    def test_mito_loop_end(self):\\n        expected_seq = \\'CTTCACCCTGATCACAGGT\\'\\n\\n        seq = Chromosome(\\'MT\\', loop=True).sequence(10, 30)\\n        self.assertEqual(seq, expected_seq)\\n\\n        seq = Chromosome(\\'MT\\', loop=True).sequence(-10, 10)\\n        self.assertEqual(seq, expected_seq)\\n\\n    def test_others_are_not_circular(self):\\n        with self.assertRaises(ValueError):\\n            Chromosome(1, loop=True).sequence(0, 1)\\n\\n    def test_too_many_loops(self):\\n        \"\"\"should never return a sequence longer than the length of the contig\"\"\"\\n        mt_accession = BUILD37_ACCESSIONS[\\'MT\\']\\n        mt_length = ACCESSION_LENGTHS[mt_accession]\\n        Chromosome(\\'MT\\', loop=True).sequence(0, mt_length)\\n        with self.assertRaises(TooManyLoops):\\n            Chromosome(\\'MT\\', loop=True).sequence(0, mt_length + 1)\\n\\n        Chromosome(\\'MT\\', loop=True).sequence(-1, mt_length - 1)\\n        with self.assertRaises(TooManyLoops):\\n            Chromosome(\\'MT\\', loop=True).sequence(-1, mt_length)\\n\\n    def test_load_by_accession(self):\\n        # mostly duped from test_chr1_sequences\\n        expected_seq = \\'GGGGCGGGAGGACGGGCCCG\\'\\n        seq = Chromosome(\\'NC_000001.10\\').sequence(0, 20)\\n        self.assertEqual(seq, expected_seq)\\n        self.assertEqual(len(seq), 20)\\n        expected_seq = \\'GGGAG\\'\\n        seq = Chromosome(\\'NC_000001.10\\').sequence(5, 10)\\n        self.assertEqual(seq, expected_seq)\\n\\n\\nclass TestInvalidQueries(TestCase):\\n\\n    def test_invalid_chromosome_name(self):\\n        with self.assertRaises(ValueError):\\n            Chromosome(23).sequence(123456, 123457)\\n\\n    def test_missing_chromosome(self):\\n        with self.assertRaises(MissingDataError):\\n            Chromosome(\\'18\\').sequence(0, 20)\\n\\n    def test_invalid_start_position(self):\\n        with self.assertRaises(ValueError):\\n            Chromosome(1).sequence(-1, 10)\\n\\n    def test_invalid_end_position(self):\\n        with self.assertRaises(ValueError):\\n            Chromosome(1).sequence(123457, 123456)\\n\\n    def test_out_of_range_start_position(self):\\n        with self.assertRaises(ValueError):\\n            Chromosome(1).sequence(249250623, 249250625)\\n\\n    def test_out_of_range_end_position(self):\\n        with self.assertRaises(ValueError):\\n            Chromosome(1).sequence(249250619, 249250622)\\n\\n\\nclass TestCLI(TestCase):\\n\\n    def test_determine_start_end(self):\\n        expected = (10000, 10100)\\n\\n        observed = determine_start_end(\\'10000\\', \\'10100\\')\\n        self.assertEqual(observed, expected)\\n\\n        observed = determine_start_end(\\'10000\\', \\'+100\\')\\n        self.assertEqual(observed, expected)\\n\\n        observed = determine_start_end(\\'-100\\', \\'10100\\')\\n        self.assertEqual(observed, expected)\\n\\n    def test_determine_start_end_cannot_both_relative(self):\\n        with self.assertRaises(ValueError):\\n            determine_start_end(\\'-100\\', \\'+100\\')\\n\\n    def test_determine_start_end_non_integer(self):\\n        with self.assertRaises(ValueError):\\n            determine_start_end(\\'foo\\', \\'10100\\')\\n        with self.assertRaises(ValueError):\\n            determine_start_end(\\'10000\\', \\'bar\\')\\n        with self.assertRaises(ValueError):\\n            determine_start_end(\\'-foo\\', \\'10100\\')\\n        with self.assertRaises(ValueError):\\n            determine_start_end(\\'10000\\', \\'+bar\\')\\n        with self.assertRaises(ValueError):\\n            determine_start_end(\\'foo\\', \\'bar\\')\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_meta_test.py'"}, "return_value": "b''"}]}, "get_python_source": {"line": 37, "args": [{"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/__init__.py'"}, "return_value": "'from __future__ import absolute_import\\n\\nfrom .chromosome import Chromosome\\n\\nfrom .lib import BUILD37, BUILD38\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/chromosome.py'"}, "return_value": "'import os\\n\\nfrom .exceptions import TooManyLoops, MissingDataError\\nfrom .lib import (BUILD37, BUILD38, get_data_directory, sorted_nicely,\\n                  BUILD37_ACCESSIONS, BUILD38_ACCESSIONS, ACCESSION_LENGTHS,\\n                  RCRS_ACCESSION, MITOCHONDRIA_NAMES)\\n\\n\\nclass Chromosome(object):\\n\\n    ASSEMBLY_CHROMOSOMES = {\\n        BUILD37: BUILD37_ACCESSIONS,\\n        BUILD38: BUILD38_ACCESSIONS\\n    }\\n\\n    def __init__(self, chromosome_name, assembly=BUILD37, loop=False, RCRS_N_remove=True):\\n        \"\"\"\\n        Usage:\\n\\n                Chromosome(\\'1\\').sequence(0, 100)\\n                returns the first 100 nucleotides of chromosome 1\\n\\n        The default assembly is Homo_sapiens.GRCh37\\n        You may also use Build 38:\\n\\n                from seqseek import BUILD38\\n                Chromosome(\\'1\\', BUILD38).sequence(0, 100)\\n        \"\"\"\\n        self.name = str(chromosome_name)\\n        self.assembly = assembly\\n        self.loop = loop\\n        self.RCRS_N_remove = RCRS_N_remove\\n\\n        self.validate_assembly()\\n        self.validate_name()\\n        self.validate_loop()\\n\\n        if self.name in ACCESSION_LENGTHS:\\n            # allow loading by accession\\n            self.accession = self.name\\n        else:\\n            # allow loading by name\\n            self.accession = self.ASSEMBLY_CHROMOSOMES[assembly][self.name]\\n\\n        self.length = ACCESSION_LENGTHS[self.accession]\\n\\n    def validate_assembly(self):\\n        if self.assembly not in (BUILD37, BUILD38):\\n            raise ValueError(\\n                \\'Sorry, the only supported assemblies are {} and {}\\'.format(\\n                    BUILD37, BUILD38))\\n\\n    def validate_name(self):\\n        if self.name not in ACCESSION_LENGTHS:\\n            if self.name not in self.ASSEMBLY_CHROMOSOMES[self.assembly]:\\n                raise ValueError(\\n                    \"{name} is not a valid chromosome name or accession\".format(\\n                        name=self.name))\\n\\n    def validate_loop(self):\\n        if self.loop and self.name not in MITOCHONDRIA_NAMES:\\n            raise ValueError(\\'Loop may only be specified for the mitochondria.\\')\\n\\n    def validate_coordinates(self, start, end):\\n        if end < 0:\\n            raise ValueError(\\'end must be a positive number\\')\\n        elif (start < 0 and not self.loop) or end < 0:\\n            raise ValueError(\"Start and end must be positive integers for this chromosome\")\\n        if end < start:\\n            raise ValueError(\"Start position cannot be greater than end position\")\\n        if start > self.length or (end > self.length and not self.loop):\\n            raise ValueError(\\'Coordinates out of bounds. Chr {} has {} bases.\\'.format(\\n                self.name, self.length))\\n        if self.loop and end - start > self.length:\\n            raise TooManyLoops()\\n\\n    @classmethod\\n    def sorted_chromosome_length_tuples(cls, assembly):\\n        # TODO: simplify\\n        name_to_accession = cls.ASSEMBLY_CHROMOSOMES[assembly]\\n        chromosome_length_tuples = []\\n        for name, accession in name_to_accession.items():\\n            if accession in ACCESSION_LENGTHS:\\n                chromosome_length_tuples.append((name, ACCESSION_LENGTHS[accession]))\\n\\n        return sorted(chromosome_length_tuples,\\n                      key=lambda pair:\\n                          sorted_nicely(\\n                              ACCESSION_LENGTHS.keys()).index(name_to_accession[pair[0]]))\\n\\n    def filename(self):\\n        return \\'{}.fa\\'.format(self.accession)\\n\\n    def path(self):\\n        data_dir = get_data_directory()\\n        return os.path.join(data_dir, self.filename())\\n\\n    def exists(self):\\n        return os.path.exists(self.path())\\n\\n    def header(self):\\n        with open(self.path()) as f:\\n            return f.readline()\\n\\n    def read(self, start, length):\\n        with open(self.path()) as fasta:\\n            header = fasta.readline()\\n            fasta.seek(start + len(header))\\n            return fasta.read(length)\\n\\n    def sequence(self, start, end):\\n        self.validate_coordinates(start, end)\\n\\n        if self.loop and end > self.length:\\n            reads = [(start, self.length - start), (0, end - self.length)]\\n        elif self.loop and start < 0:\\n            reads = [(self.length + start, abs(start)), (0, end)]\\n        else:\\n            reads = [(start, end - start)]\\n\\n        if not self.exists():\\n            build = \\'37\\' if self.assembly == BUILD37 else \\'38\\'\\n            raise MissingDataError(\\n                \\'{} does not exist. Please download on the command line with: \\'\\n                \\'download_build_{}\\'.format(self.path(), build))\\n\\n        sequence = \\'\\'.join([self.read(*read) for read in reads])\\n\\n        # The rCRS mito contig contains an \\'N\\' base at position 3107 to preserve legacy\\n        # nucleotide numbering. We remove it because it is not part of the observed\\n        # sequence. See http://www.mitomap.org/MITOMAP/HumanMitoSeq\\n        if self.accession == RCRS_ACCESSION and self.RCRS_N_remove is True:\\n            sequence = sequence.replace(\\'N\\', \\'\\')\\n\\n        return sequence\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/cli.py'"}, "return_value": "\"import argparse\\nfrom .chromosome import BUILD37_ACCESSIONS, Chromosome\\nfrom .lib import BUILD37, BUILD38\\n\\n\\nPROGRAM_TO_ASSEMBLY = {\\n    'seqseek_37': BUILD37,\\n    'seqseek_38': BUILD38\\n}\\nRELATIVE_SIGNS = ('-', '+')\\nSIGN_FACTOR = {\\n    '-': -1,\\n    '+': 1\\n}\\n\\n\\ndef determine_start_end(arg_start, arg_end):\\n    relative_start, relative_end = None, None\\n    if arg_start[0] in RELATIVE_SIGNS:\\n        relative_start, arg_start = arg_start[0], arg_start[1:]\\n    if arg_end[0] in RELATIVE_SIGNS:\\n        relative_end, arg_end = arg_end[0], arg_end[1:]\\n\\n    if relative_start is not None and relative_end is not None:\\n        raise ValueError('Start and end cannot be both relative.')\\n\\n    start, end = int(arg_start), int(arg_end)\\n\\n    if relative_start is not None:\\n        start = end + SIGN_FACTOR[relative_start] * start\\n    elif relative_end is not None:\\n        end = start + SIGN_FACTOR[relative_end] * end\\n\\n    return start, end\\n\\n\\ndef cmd_line():\\n    parser = argparse.ArgumentParser(description='Print sequence')\\n    parser.add_argument('chromosome', type=str, help='Chromosome name to seek')\\n    parser.add_argument('start', type=str, help='Start position (can be relative, e.g. -50)')\\n    parser.add_argument('end', type=str, help='End position (can be relative, e.g. +50)')\\n    args = parser.parse_args()\\n    assembly = PROGRAM_TO_ASSEMBLY[parser.prog]\\n\\n    # Do it\\n    kwargs = {'loop': True} if args.chromosome in ('MT', BUILD37_ACCESSIONS['MT']) else {}\\n    c = Chromosome(args.chromosome, assembly=assembly, **kwargs)\\n    start, end = determine_start_end(args.start, args.end)\\n    print(c.sequence(start, end))\\n\""}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/downloader.py'"}, "return_value": "'from __future__ import print_function\\nfrom __future__ import absolute_import\\nimport os\\nimport argparse\\nimport requests\\n\\nfrom .lib import get_data_directory, URI, BUILD37, BUILD38\\nfrom .chromosome import Chromosome\\n\\nfrom .tests.build_specific_tests import run_build_test_suite\\n\\nPROGRAM_TO_ASSEMBLY = {\\n    \\'download_build_37\\': BUILD37,\\n    \\'download_build_38\\': BUILD38\\n}\\n\\n\\ndef cmd_line():\\n    parser = argparse.ArgumentParser(description=\\'\\')\\n    parser.add_argument(\\'-v\\', dest=\\'verbose\\', action=\\'store_true\\')\\n    args = parser.parse_args()\\n\\n    assembly = PROGRAM_TO_ASSEMBLY[parser.prog]\\n    verbosity = args.verbose\\n    data_dir = get_data_directory()\\n\\n    # Do it\\n    Downloader(assembly, data_dir, verbosity).download_chromosomes()\\n\\n\\nclass Downloader(object):\\n\\n    SUPPORTED_ASSEMBLIES = (BUILD37, BUILD38)\\n\\n    def __init__(self, assembly, data_dir=None, verbose=True):\\n        self.assembly = assembly\\n        self.data_dir = data_dir or get_data_directory()\\n        self.verbose = verbose\\n\\n        self.validate_assembly()\\n\\n        self.log(\\'Data directory: {}\\'.format(self.data_dir))\\n        self.log(\\'Host: {}\\'.format(URI))\\n\\n    def log(self, msg, force=False):\\n        if self.verbose or force:\\n            print(msg)  # TODO: add a log handler\\n\\n    def validate_assembly(self):\\n        if self.assembly not in self.SUPPORTED_ASSEMBLIES:\\n            raise ValueError(\\'%s is not one of the supported assemblies %s\\'.format(\\n                self.assembly, self.SUPPORTED_ASSEMBLIES))\\n\\n    def get_missing_chromosomes(self):\\n        missing_chromosomes = []\\n\\n        for name, length in Chromosome.sorted_chromosome_length_tuples(self.assembly):\\n            chromosome = Chromosome(name, self.assembly)\\n            filepath = chromosome.path()\\n\\n            if not chromosome.exists():\\n                missing_chromosomes.append(name)\\n            else:\\n                expected_size = length + len(chromosome.header()) + 1\\n                size = os.path.getsize(filepath)\\n                if size != expected_size:\\n                    self.log(\\'Removing mismatched chromosome %s\\' % name)\\n                    missing_chromosomes.append(name)\\n                    os.remove(filepath)\\n\\n        return missing_chromosomes\\n\\n    def download_chromosomes(self):\\n        to_download = self.get_missing_chromosomes()\\n        self.log(\"Downloading {} chromosomes\".format(len(to_download)))\\n\\n        for name in to_download:\\n            self.download_chromosome(name)\\n        run_build_test_suite(self.assembly)\\n\\n    def download_chromosome(self, name):\\n        chromosome = Chromosome(name, self.assembly)\\n        path = chromosome.path()\\n        directory = os.path.dirname(chromosome.path())\\n\\n        if not os.path.isdir(directory):\\n            os.makedirs(directory)\\n            self.log(\\'Created directory {}\\'.format(directory), True)\\n\\n        uri = URI + chromosome.filename()\\n\\n        self.log(\\n            \\'Downloading from {} to {}\\'.format(uri, path), True)\\n\\n        r = requests.get(uri, stream=True)\\n\\n        # TODO can we do this in fewer than 3 passes?\\n\\n        with open(path, \\'wb\\') as fd:\\n            for chunk in r.iter_content(chunk_size=1024):\\n                fd.write(chunk)\\n\\n        with open(path, \\'r\\') as f:\\n            header = f.readline()\\n            content = f.read().replace(\\'\\\\n\\', \\'\\')\\n\\n        with open(path, \\'w\\') as f:\\n            f.write(header)\\n            f.write(content)\\n            f.write(\\'\\\\n\\')\\n\\n        self.log(\\'...Complete\\', True)\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/exceptions.py'"}, "return_value": "'class TooManyLoops(Exception):\\n    pass\\n\\n\\nclass MissingDataError(Exception):\\n    pass\\n\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/format_fasta.py'"}, "return_value": "'from __future__ import print_function\\nimport argparse\\n\\n\\ndef run(path):\\n    print(\"Formatting %s\" % path)\\n    with open(path) as fasta:\\n        header = \\'\\'\\n        first_line = fasta.readline()\\n        if not first_line.startswith(\\'>\\'):\\n            header = \\'> \\' + path.split(\\'/\\')[-1].split(\\'.\\')[0] + \\'\\\\n\\'\\n            first_line.replace(\\'\\\\n\\', \\'\\')\\n        clean = fasta.read().replace(\\'\\\\n\\', \\'\\')\\n\\n    with open(path + \\'.seqseek\\', \\'w\\') as formatted:\\n        formatted.write(header)\\n        formatted.write(first_line)\\n        formatted.write(clean)\\n\\n    with open(path + \\'.seqseek\\') as done:\\n        done.readline()\\n        sequence = done.read()\\n        print(\"Length is %d\" % len(sequence))\\n\\n\\nif __name__ == \\'__main__\\':\\n    parser = argparse.ArgumentParser()\\n    parser.add_argument(\"fasta_path\")\\n    args = parser.parse_args()\\n    run(args.fasta_path)\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/lib.py'"}, "return_value": "'import re\\nimport os\\n\\n\\nBUILD37 = \\'homo_sapiens_GRCh37\\'\\nBUILD38 = \\'homo_sapiens_GRCh38\\'\\n\\nRCRS_ACCESSION = \\'NC_012920.1\\'\\n\\nDEFAULT_DATA_DIR = \\'~/.seqseek\\'\\nDATA_DIR_VARIABLE = \\'SEQSEEK_DATA_DIR\\'\\n\\nURI = \\'https://s3-us-west-2.amazonaws.com/seqseek/\\'\\n\\n\\nBUILD37_ACCESSIONS = {\\n    \\'1\\': \\'NC_000001.10\\',\\n    \\'2\\': \\'NC_000002.11\\',\\n    \\'3\\': \\'NC_000003.11\\',\\n    \\'4\\': \\'NC_000004.11\\',\\n    \\'5\\': \\'NC_000005.9\\',\\n    \\'6\\': \\'NC_000006.11\\',\\n    \\'7\\': \\'NC_000007.13\\',\\n    \\'8\\': \\'NC_000008.10\\',\\n    \\'9\\': \\'NC_000009.11\\',\\n    \\'10\\': \\'NC_000010.10\\',\\n    \\'11\\': \\'NC_000011.9\\',\\n    \\'12\\': \\'NC_000012.11\\',\\n    \\'13\\': \\'NC_000013.10\\',\\n    \\'14\\': \\'NC_000014.8\\',\\n    \\'15\\': \\'NC_000015.9\\',\\n    \\'16\\': \\'NC_000016.9\\',\\n    \\'17\\': \\'NC_000017.10\\',\\n    \\'18\\': \\'NC_000018.9\\',\\n    \\'19\\': \\'NC_000019.9\\',\\n    \\'20\\': \\'NC_000020.10\\',\\n    \\'21\\': \\'NC_000021.8\\',\\n    \\'22\\': \\'NC_000022.10\\',\\n    \\'X\\': \\'NC_000023.10\\',\\n    \\'Y\\': \\'NC_000024.9\\',\\n    \\'MT\\': \\'NC_012920.1\\',\\n    \\'RSRS\\': \\'NC_001807.4\\',\\n\\n    # UCSC names for haplotype scaffolds\\n    \\'chr6_apd_hap1\\': \\'NT_167244.1\\',\\n    \\'chr6_cox_hap2\\': \\'NT_113891.2\\',\\n    \\'chr6_dbb_hap3\\': \\'NT_167245.1\\',\\n    \\'chr6_mann_hap4\\': \\'NT_167246.1\\',\\n    \\'chr6_mcf_hap5\\': \\'NT_167247.1\\',\\n    \\'chr6_qbl_hap6\\': \\'NT_167248.1\\',\\n    \\'chr6_ssto_hap7\\': \\'NT_167249.1\\',\\n    \\'chr4_ctg9_hap1\\': \\'NT_167250.1\\',\\n    \\'chr17_ctg5_hap1\\': \\'NT_167251.1\\'\\n}\\n\\nBUILD38_ACCESSIONS = {\\n    \\'1\\': \\'NC_000001.11\\',\\n    \\'2\\': \\'NC_000002.12\\',\\n    \\'3\\': \\'NC_000003.12\\',\\n    \\'4\\': \\'NC_000004.12\\',\\n    \\'5\\': \\'NC_000005.10\\',\\n    \\'6\\': \\'NC_000006.12\\',\\n    \\'7\\': \\'NC_000007.14\\',\\n    \\'8\\': \\'NC_000008.11\\',\\n    \\'9\\': \\'NC_000009.12\\',\\n    \\'10\\': \\'NC_000010.11\\',\\n    \\'11\\': \\'NC_000011.10\\',\\n    \\'12\\': \\'NC_000012.12\\',\\n    \\'13\\': \\'NC_000013.11\\',\\n    \\'14\\': \\'NC_000014.9\\',\\n    \\'15\\': \\'NC_000015.10\\',\\n    \\'16\\': \\'NC_000016.10\\',\\n    \\'17\\': \\'NC_000017.11\\',\\n    \\'18\\': \\'NC_000018.10\\',\\n    \\'19\\': \\'NC_000019.10\\',\\n    \\'20\\': \\'NC_000020.11\\',\\n    \\'21\\': \\'NC_000021.9\\',\\n    \\'22\\': \\'NC_000022.11\\',\\n    \\'X\\': \\'NC_000023.11\\',\\n    \\'Y\\': \\'NC_000024.10\\',\\n    \\'MT\\': \\'NC_012920.1\\',\\n    \\'RSRS\\': \\'NC_001807.4\\',\\n}\\n\\n# chromosome names and lengths for build 37\\nACCESSION_LENGTHS = {\\n    # GRCh38\\n    \\'NC_000001.11\\':  248956422,\\n    \\'NC_000002.12\\':  242193529,\\n    \\'NC_000003.12\\':  198295559,\\n    \\'NC_000004.12\\':  190214555,\\n    \\'NC_000005.10\\':  181538259,\\n    \\'NC_000006.12\\':  170805979,\\n    \\'NC_000007.14\\':  159345973,\\n    \\'NC_000008.11\\':  145138636,\\n    \\'NC_000009.12\\':  138394717,\\n    \\'NC_000010.11\\':  133797422,\\n    \\'NC_000011.10\\':  135086622,\\n    \\'NC_000012.12\\':  133275309,\\n    \\'NC_000013.11\\':  114364328,\\n    \\'NC_000014.9\\':   107043718,\\n    \\'NC_000015.10\\':  101991189,\\n    \\'NC_000016.10\\':  90338345,\\n    \\'NC_000017.11\\':  83257441,\\n    \\'NC_000018.10\\':  80373285,\\n    \\'NC_000019.10\\':  58617616,\\n    \\'NC_000020.11\\':  64444167,\\n    \\'NC_000021.9\\':   46709983,\\n    \\'NC_000022.11\\':  50818468,\\n    \\'NC_000023.11\\':  156040895,\\n    \\'NC_000024.10\\':  57227415,\\n\\n    # GRCh37\\n    \\'NC_000001.10\\':  249250621,\\n    \\'NC_000002.11\\':  243199373,\\n    \\'NC_000003.11\\':  198022430,\\n    \\'NC_000004.11\\':  191154276,\\n    \\'NC_000005.9\\':   180915260,\\n    \\'NC_000006.11\\':  171115067,\\n    \\'NC_000007.13\\':  159138663,\\n    \\'NC_000008.10\\':  146364022,\\n    \\'NC_000009.11\\':  141213431,\\n    \\'NC_000010.10\\':  135534747,\\n    \\'NC_000011.9\\':   135006516,\\n    \\'NC_000012.11\\':  133851895,\\n    \\'NC_000013.10\\':  115169878,\\n    \\'NC_000014.8\\':   107349540,\\n    \\'NC_000015.9\\':   102531392,\\n    \\'NC_000016.9\\':   90354753,\\n    \\'NC_000017.10\\':  81195210,\\n    \\'NC_000018.9\\':   78077248,\\n    \\'NC_000019.9\\':   59128983,\\n    \\'NC_000020.10\\':  63025520,\\n    \\'NC_000021.8\\':   48129895,\\n    \\'NC_000022.10\\':  51304566,\\n    \\'NC_000023.10\\':  155270560,\\n    \\'NC_000024.9\\':   59373566,\\n\\n    # Mito is shared between 37 & 38\\n    \\'NC_012920.1\\':   16569,  # rCRS\\n    \\'NC_001807.4\\':   16571,  # RSRS\\n\\n    # Haplotype scaffolds\\n    \\'NT_113891.2\\': 4795371,\\n    \\'NT_167244.1\\': 4622290,\\n    \\'NT_167245.1\\': 4610396,\\n    \\'NT_167246.1\\': 4683263,\\n    \\'NT_167247.1\\': 4833398,\\n    \\'NT_167248.1\\': 4611984,\\n    \\'NT_167249.1\\': 4928567,\\n    \\'NT_167250.1\\': 590426,\\n    \\'NT_167251.1\\': 1680828,\\n}\\n\\nMITOCHONDRIA_NAMES = {\\'MT\\', \\'RSRS\\', BUILD37_ACCESSIONS[\\'MT\\'], BUILD37_ACCESSIONS[\\'RSRS\\'],\\n                      BUILD38_ACCESSIONS[\\'MT\\'], BUILD38_ACCESSIONS[\\'RSRS\\']}\\n\\n\\ndef get_data_directory():\\n    default = os.path.expanduser(DEFAULT_DATA_DIR)\\n    storage_dir = os.environ.get(DATA_DIR_VARIABLE, default)\\n    os.environ[DATA_DIR_VARIABLE] = storage_dir\\n    if not os.path.exists(storage_dir):\\n        os.makedirs(storage_dir)\\n    return storage_dir\\n\\n\\ndef sorted_nicely(l):\\n    \"\"\"\\n    Sort the given iterable in the way that humans expect.\\n    http://blog.codinghorror.com/sorting-for-humans-natural-sort-order/\\n    \"\"\"\\n    convert = lambda text: int(text) if text.isdigit() else text\\n    alphanum_key = lambda key: [ convert(c) for c in re.split(\\'([0-9]+)\\', key) ]\\n    return sorted(l, key = alphanum_key)\\n\\n\\n\"\"\"\\nThe nine haplotype scaffolds are:\\n    name                    accession       UCSC chr name\\n    HSCHR6_MHC_APD_CTG1     GL000250.1      chr6_apd_hap1\\n    HSCHR6_MHC_COX_CTG1     GL000251.1      chr6_cox_hap2\\n    HSCHR6_MHC_DBB_CTG1     GL000252.1      chr6_dbb_hap3\\n    HSCHR6_MHC_MANN_CTG1    GL000253.1      chr6_mann_hap4\\n    HSCHR6_MHC_MCF_CTG1     GL000254.1      chr6_mcf_hap5\\n    HSCHR6_MHC_QBL_CTG1     GL000255.1      chr6_qbl_hap6\\n    HSCHR6_MHC_SSTO_CTG1    GL000256.1      chr6_ssto_hap7\\n    HSCHR4_1_CTG9           GL000257.1      chr4_ctg9_hap1\\n    HSCHR17_1_CTG5          GL000258.1      chr17_ctg5_hap1\\n\"\"\"\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/tests/__init__.py'"}, "return_value": "''"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/__init__.py'"}, "return_value": "'from __future__ import absolute_import\\nfrom .build_specific_tests import run_build_test_suite, test_build_38, test_build_37\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_37_tests.py'"}, "return_value": "'import os\\n\\nfrom seqseek.chromosome import Chromosome\\n\\nfrom seqseek.lib import get_data_directory, BUILD37_ACCESSIONS, ACCESSION_LENGTHS\\n\\nfrom unittest import TestCase\\n\\n\\nclass TestBuild37(TestCase):\\n\\n    def test_file_names(self):\\n        for accession in BUILD37_ACCESSIONS.values():\\n            fasta = os.path.join(get_data_directory(), str(accession) + \".fa\")\\n            self.assertTrue(os.path.isfile(fasta), fasta)\\n\\n    # all test sequences were extracted from https://genome.ucsc.edu/ using the\\n    # chromosome browser tool\\n\\n    def test_chr_start_sequences(self):\\n        exclude = (\\'MT\\', \\'17\\' , \\'chr6_cox_hap2\\', \\'chr6_apd_hap1\\', \\'chr6_ssto_hap7\\',\\n                   \\'chr6_mcf_hap5\\', \\'chr6_qbl_hap6\\', \\'chr6_mann_hap4\\', \\'chr6_dbb_hap3\\',\\n                   \\'chr17_ctg5_hap1\\', \\'chr4_ctg9_hap1\\', \\'RSRS\\')\\n        test_str = \"N\" * 20\\n        for name in BUILD37_ACCESSIONS.keys():\\n            # these chromosomes do not have telomeres\\n            if name in exclude:\\n                continue\\n            seq = Chromosome(name).sequence(0, 20)\\n            self.assertEqual(seq, test_str, name)\\n\\n    def test_chr1_sequence(self):\\n        expected_seq = \"AATCTAAAAAACTGTCAGAT\"\\n        seq = Chromosome(1).sequence(243400000, 243400020)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chr2_sequence(self):\\n        expected_seq = \"tgtccacgcgcggatgtcgt\"\\n        seq = Chromosome(2).sequence(237513040, 237513060)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chr3_sequence(self):\\n        expected_seq = \"ctctttcgcccaggctggag\"\\n        seq = Chromosome(3).sequence(190352536, 190352556)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chr4_sequence(self):\\n        expected_seq = \"ttggagccaaggtctcactc\"\\n        seq = Chromosome(4).sequence(184622015, 184622035)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chr5_sequence(self):\\n        expected_seq = \"CTTTACTCCACTCATATTCT\"\\n        seq = Chromosome(5).sequence(158879589, 158879609)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr6_sequence(self):\\n        expected_seq = \"AGGTGGTAGCCCAGTGGTGC\"\\n        seq = Chromosome(6).sequence(158882594, 158882614)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr7_sequence(self):\\n        expected_seq = \"CTTGCTCTCATCCTCCGGGT\"\\n        seq = Chromosome(7).sequence(158896447, 158896467)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr8_sequence(self):\\n        expected_seq = \"CTGTCTCCACTGCAGGGCTC\"\\n        seq = Chromosome(8).sequence(139508913, 139508933)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr9_sequence(self):\\n        expected_seq = \"GAGGAGAACATTTGCCTGCA\"\\n        seq = Chromosome(9).sequence(140705912, 140705932)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr10_sequence(self):\\n        expected_seq = \"TCTGCAGGGGGCGGAGGAAA\"\\n        seq = Chromosome(10).sequence(121086020, 121086040)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr11_sequence(self):\\n        expected_seq = \"CTGAGGGTGGCGCTCTCCCC\"\\n        seq = Chromosome(11).sequence(132812820, 132812840)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr12_sequence(self):\\n        expected_seq = \"CCTCATGCCCAGTTCTACGT\"\\n        seq = Chromosome(12).sequence(132824462, 132824482)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr13_sequence(self):\\n        expected_seq = \"GAAAAGAATTCAAAGAACAC\"\\n        seq = Chromosome(13).sequence(113086756, 113086776)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr14_sequence(self):\\n        expected_seq = \"GCAACGGGGTGGTCATCCAC\"\\n        seq = Chromosome(14).sequence(105204712, 105204732)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr15_sequence(self):\\n        expected_seq = \"ttcaatcactgatacccttt\"\\n        seq = Chromosome(15).sequence(99921491, 99921511)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chr16_sequence(self):\\n        expected_seq = \"CTTTCAGCACAGGGCTGTGA\"\\n        seq = Chromosome(16).sequence(89862313, 89862333)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr17_sequence(self):\\n        expected_seq = \"TGGAGCTGGAGCCACAGGTC\"\\n        seq = Chromosome(17).sequence(80014178, 80014198)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr18_sequence(self):\\n        expected_seq = \"CGAACACTTCGTTGTCCTCT\"\\n        seq = Chromosome(18).sequence(74778253, 74778273)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr19_sequence(self):\\n        expected_seq = \"GGCTGGTTAAACTCGGGGTC\"\\n        seq = Chromosome(19).sequence(55798374, 55798394)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr20_sequence(self):\\n        expected_seq = \"CTGCCCAAGTGCTCCTGGAG\"\\n        seq = Chromosome(20).sequence(55803284, 55803304)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr21_sequence(self):\\n        expected_seq = \"GGCTGGTGTGGCACATGATG\"\\n        seq = Chromosome(21).sequence(46074515, 46074535)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr22_sequence(self):\\n        expected_seq = \"AGACGCCGCCCCTGTTCATG\"\\n        seq = Chromosome(22).sequence(50552076, 50552096)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chrX_sequence(self):\\n        expected_seq = \"GCAAGCAGCAGGATGGGGCC\"\\n        seq = Chromosome(\"X\").sequence(152811545, 152811565)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chrY_sequence(self):\\n        expected_seq = \"CTGAACGTGCTGAGTTACAG\"\\n        seq = Chromosome(\"Y\").sequence(25325643, 25325663)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chrMT_sequence(self):\\n        expected_seq = \"ATTGTACGGTACCATAAATA\"\\n        seq = Chromosome(\"MT\").sequence(16121, 16141)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr6_cox_hap2(self):\\n        accession = BUILD37_ACCESSIONS[\\'chr6_cox_hap2\\']\\n        max_length = ACCESSION_LENGTHS[accession]\\n\\n        expected_seq = \"GATCCTGAGTGGGTGAGTGG\"\\n        seq = Chromosome(\"chr6_cox_hap2\").sequence(3065395, 3065415)\\n        self.assertEqual(expected_seq, seq)\\n\\n        expected_seq = \"TATTCTTGCCAATAT\"\\n        seq = Chromosome(\"chr6_cox_hap2\").sequence(200, 215).upper()\\n        self.assertEqual(expected_seq, seq)\\n\\n        expected_seq = \"TCTGGCCTGGGAGTC\"\\n        seq = Chromosome(\"chr6_cox_hap2\").sequence(0, 15).upper()\\n        self.assertEqual(expected_seq, seq)\\n\\n        expected = \"tc\"\\n        seq = Chromosome(\\'chr6_cox_hap2\\').sequence(4795369, max_length)\\n        self.assertEqual(expected.upper(), seq)\\n\\n    def test_chr6_apd_hap1(self):\\n        accession = BUILD37_ACCESSIONS[\\'chr6_apd_hap1\\']\\n        max_length = ACCESSION_LENGTHS[accession]\\n\\n        expected = \"GAATTCAGCTCGCCGACGGC\"\\n        seq = Chromosome(\\'chr6_apd_hap1\\').sequence(0, 20)\\n        self.assertEqual(expected, seq)\\n\\n        expected = \"ACAATTAGAAATACTAGGAG\"\\n        seq = Chromosome(\\'chr6_apd_hap1\\').sequence(3000, 3020)\\n        self.assertEqual(expected, seq)\\n\\n        expected = \"cacT\"\\n        seq = Chromosome(\\'chr6_apd_hap1\\').sequence(max_length - 4, max_length)\\n        self.assertEqual(expected.upper(), seq)\\n\\n    def test_chr6_ssto_hap7(self):\\n        accession = BUILD37_ACCESSIONS[\\'chr6_ssto_hap7\\']\\n        max_length = ACCESSION_LENGTHS[accession]\\n\\n        expected = \"GGCCAGGTTTTGTGAATTCT\"\\n        seq = Chromosome(\\'chr6_ssto_hap7\\').sequence(3000, 3020)\\n        self.assertEqual(expected.upper(), seq)\\n\\n        expected = \"ggcc\"\\n        seq = Chromosome(\\'chr6_ssto_hap7\\').sequence(max_length - 4, max_length)\\n        self.assertEqual(expected.upper(), seq)\\n\\n    def test_chr6_mcf_hap5(self):\\n        expected = \"ACAATTAGAAATACTAGGAG\"\\n        seq = Chromosome(\\'chr6_mcf_hap5\\').sequence(3000, 3020)\\n        self.assertEqual(expected, seq)\\n\\n    def test_chr6_qbl_hap6(self):\\n        accession = BUILD37_ACCESSIONS[\\'chr6_qbl_hap6\\']\\n        max_length = ACCESSION_LENGTHS[accession]\\n\\n        expected = \"ACAATTAGAAATACTAGGAG\"\\n        seq = Chromosome(\\'chr6_qbl_hap6\\').sequence(3000, 3020)\\n        self.assertEqual(expected, seq)\\n\\n        expected = \"ggcc\"\\n        seq = Chromosome(\\'chr6_qbl_hap6\\').sequence(max_length - 4, max_length)\\n        self.assertEqual(expected.upper(), seq)\\n\\n    def test_chr6_mann_hap4(self):\\n        expected = \"ACAATTAGAAATACTAGGAG\"\\n        seq = Chromosome(\\'chr6_mann_hap4\\').sequence(3000, 3020)\\n        self.assertEqual(expected, seq)\\n\\n    def test_chr6_dbb_hap3(self):\\n        expected = \"ACAATTAGAAATACTAGGAG\"\\n        seq = Chromosome(\\'chr6_dbb_hap3\\').sequence(3000, 3020)\\n        self.assertEqual(expected, seq)\\n\\n    def test_chr17_ctg5_hap1(self):\\n        expected = \"TTTTGGCTACAATAATTCTT\"\\n        seq = Chromosome(\\'chr17_ctg5_hap1\\').sequence(3000, 3020)\\n        self.assertEqual(expected, seq)\\n\\n    def test_looped_mito(self):\\n        mito_accession = BUILD37_ACCESSIONS[\\'MT\\']\\n        mito_length = ACCESSION_LENGTHS[mito_accession]\\n        expected = \\'CATCACGATGGATCACAGGT\\'\\n\\n        seq = Chromosome(\\'MT\\', loop=True).sequence(mito_length - 10, mito_length + 10)\\n        self.assertEqual(expected, seq)\\n\\n        seq = Chromosome(\\'MT\\', loop=True).sequence(-10, 10)\\n        self.assertEqual(expected, seq)\\n\\n    def test_mito_N(self):\\n        \"\"\"\\n        From mitomap:\\n            *3107del is maintained in this revised sequence with the gap\\n            represented by an \\'N\\'. THIS ALLOWS HISTORICAL NUCLEOTIDE NUMBERING TO\\n            BE MAINTAINED.\\n\\n        We remove this \\'N\\' base since it is only present to preserve numbering and is\\n        not actually part of the observed sequence.\\n        \"\"\"\\n        self.assertEqual(\\'\\', Chromosome(\\'MT\\').sequence(3106, 3107))\\n\\n    def test_RSRS(self):\\n        expected = \\'GGAC\\'\\n        seq = Chromosome(\\'NC_001807.4\\').sequence(750, 754)\\n        self.assertEqual(expected, seq)\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_38_tests.py'"}, "return_value": "'import os\\nimport fnmatch\\n\\nfrom seqseek.chromosome import Chromosome\\n\\nfrom seqseek.lib import get_data_directory, BUILD38_ACCESSIONS, BUILD38, ACCESSION_LENGTHS\\n\\nfrom unittest import TestCase\\n\\n\\nclass TestBuild38(TestCase):\\n\\n    def test_file_names(self):\\n        for accession in BUILD38_ACCESSIONS.values():\\n            fasta = os.path.join(get_data_directory(), str(accession) + \".fa\")\\n            self.assertTrue(os.path.isfile(fasta), fasta)\\n\\n    # all test sequences were extracted from https://genome.ucsc.edu/ using the\\n    # chromosome browser tool\\n\\n    def test_chr_start_sequences(self):\\n        test_str = \"N\" * 20\\n        for name in BUILD38_ACCESSIONS.keys():\\n            # these chromosomes do not have telomeres\\n            if name in (\\'MT\\', \\'RSRS\\', \\'17\\'):\\n                continue\\n            seq = Chromosome(name, assembly=BUILD38).sequence(0, 20)\\n            self.assertEqual(seq, test_str)\\n\\n    def test_chr1_sequence(self):\\n        expected_seq = \"ACAGGAAAAAGATAGCATTC\"\\n        seq = Chromosome(1, assembly=BUILD38).sequence(243415701, 243415721)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr2_sequence(self):\\n        expected_seq = \"GCTGGGCCTGAACTGATATC\"\\n        seq = Chromosome(2, assembly=BUILD38).sequence(237518537, 237518557)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr3_sequence(self):\\n        expected_seq = \"GCTGAAGTCATCGATGTGAG\"\\n        seq = Chromosome(3, assembly=BUILD38).sequence(175256410, 175256430)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr4_sequence(self):\\n        expected_seq = \"CTGtttctgaccacagcctc\"\\n        seq = Chromosome(4, assembly=BUILD38).sequence(184624738, 184624758)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chr5_sequence(self):\\n        expected_seq = \"CTGTCAATTATCACTGGATC\"\\n        seq = Chromosome(5, assembly=BUILD38).sequence(159073395, 159073415)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr6_sequence(self):\\n        expected_seq = \"GATGCACGCTGCTGTTTTAT\"\\n        seq = Chromosome(6, assembly=BUILD38).sequence(155144605, 155144625)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr7_sequence(self):\\n        expected_seq = \"GAGCTGGTGGGGAGTAACCC\"\\n        seq = Chromosome(7, assembly=BUILD38).sequence(154446213, 154446233)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr8_sequence(self):\\n        expected_seq = \"atcgtggcgtgttctgcagg\"\\n        seq = Chromosome(8, assembly=BUILD38).sequence(132447200, 132447220)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chr9_sequence(self):\\n        expected_seq = \"GAACCCTCTCATCGTCAAGG\"\\n        seq = Chromosome(9, assembly=BUILD38).sequence(132410447, 132410467)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr10_sequence(self):\\n        expected_seq = \"TTCAGGTTCCTTTGCAGCTC\"\\n        seq = Chromosome(10, assembly=BUILD38).sequence(122849420, 122849440)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr11_sequence(self):\\n        expected_seq = \"TTTTTAAATGAGTATCCTGG\"\\n        seq = Chromosome(11, assembly=BUILD38).sequence(122850195, 122850215)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr12_sequence(self):\\n        expected_seq = \"CATCCCCAGTTTCCCGCGGG\"\\n        seq = Chromosome(12, assembly=BUILD38).sequence(122850834, 122850854)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr13_sequence(self):\\n        expected_seq = \"CCCCCCGAAAAGGGCAAAGG\"\\n        seq = Chromosome(13, assembly=BUILD38).sequence(113089709, 113089729)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr14_sequence(self):\\n        expected_seq = \"CCCATGTAGTCCAGGTCAGA\"\\n        seq = Chromosome(14, assembly=BUILD38).sequence(100353686, 100353706)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr15_sequence(self):\\n        expected_seq = \"attaaaatcatccaatttcc\"\\n        seq = Chromosome(15, assembly=BUILD38).sequence(86987986, 86988006)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chr16_sequence(self):\\n        expected_seq = \"TTTCAAGCCACAGTCGAGGA\"\\n        seq = Chromosome(16, assembly=BUILD38).sequence(83670789, 83670809)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr17_sequence(self):\\n        expected_seq = \"aaacatcatctctaccaaaa\"\\n        seq = Chromosome(17, assembly=BUILD38).sequence(80014178, 80014198)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chr18_sequence(self):\\n        expected_seq = \"TGCAAAGAGAAATCCTTgga\"\\n        seq = Chromosome(18, assembly=BUILD38).sequence(67834418, 67834438)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chr19_sequence(self):\\n        expected_seq = \"CTGGGCTGCAGAATCGCTGG\"\\n        seq = Chromosome(19, assembly=BUILD38).sequence(45500047, 45500067)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr20_sequence(self):\\n        expected_seq = \"ATGAGATGGACCAAACGCCC\"\\n        seq = Chromosome(20, assembly=BUILD38).sequence(59743106, 59743126)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr21_sequence(self):\\n        expected_seq = \"GGCCCCCCCGGACCACCAGG\"\\n        seq = Chromosome(21, assembly=BUILD38).sequence(45497642, 45497662)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr22_sequence(self):\\n        expected_seq = \"CTTTTCATTAACTGGATAAA\"\\n        seq = Chromosome(22, assembly=BUILD38).sequence(43711474, 43711494)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chrX_sequence(self):\\n        expected_seq = \"GGACAACACCtgttaggggc\"\\n        seq = Chromosome(\"X\", assembly=BUILD38).sequence(152811545, 152811565)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chrY_sequence(self):\\n        expected_seq = \"CAGACCTTCTGCAGTGCACC\"\\n        seq = Chromosome(\"Y\", assembly=BUILD38).sequence(25325643, 25325663)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chrMT_sequence(self):\\n        expected_seq = \"ATTGTACGGTACCATAAATA\"\\n        seq = Chromosome(\"MT\", assembly=BUILD38).sequence(16121, 16141)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_looped_mito(self):\\n        mito_accession = BUILD38_ACCESSIONS[\\'MT\\']\\n        mito_length = ACCESSION_LENGTHS[mito_accession]\\n        expected = \\'CATCACGATGGATCACAGGT\\'\\n\\n        seq = Chromosome(\\'MT\\', BUILD38, loop=True).sequence(mito_length - 10, mito_length + 10)\\n        self.assertEqual(expected, seq)\\n\\n        seq = Chromosome(\\'MT\\', BUILD38, loop=True).sequence(-10, 10)\\n        self.assertEqual(expected, seq)\\n\\n    def test_mito_N(self):\\n        \"\"\"\\n        From mitomap:\\n            *3107del is maintained in this revised sequence with the gap\\n            represented by an \\'N\\'. THIS ALLOWS HISTORICAL NUCLEOTIDE NUMBERING TO\\n            BE MAINTAINED.\\n\\n        We remove this \\'N\\' base since it is only present to preserve numbering and is\\n        not actually part of the observed sequence.\\n        \"\"\"\\n        self.assertEqual(\\'\\', Chromosome(\\'MT\\').sequence(3106, 3107))\\n\\n    def test_RSRS(self):\\n        expected = \\'GGAC\\'\\n        seq = Chromosome(\\'NC_001807.4\\').sequence(750, 754)\\n        self.assertEqual(expected, seq)\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/tests/build_specific_tests/build_specific_tests.py'"}, "return_value": "'from __future__ import print_function\\nfrom __future__ import absolute_import\\nimport unittest\\nfrom seqseek.lib import BUILD37, BUILD38\\nfrom .build_37_tests import TestBuild37\\nfrom .build_38_tests import TestBuild38\\n\\n\\nASSEMBLY_TEST_SUITE = {\\n    BUILD37: TestBuild37,\\n    BUILD38: TestBuild38\\n}\\n\\ndef run_build_test_suite(assembly):\\n    print(\"Running tests for {assembly}\".format(assembly=assembly))\\n    suite = unittest.TestLoader().loadTestsFromTestCase(ASSEMBLY_TEST_SUITE[assembly])\\n    unittest.TextTestRunner(verbosity=3).run(suite)\\n\\ndef test_build_37():\\n    run_build_test_suite(BUILD37)\\n\\ndef test_build_38():\\n    run_build_test_suite(BUILD38)\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_functional.py'"}, "return_value": "'import os\\nfrom unittest import TestCase\\n\\nfrom seqseek.cli import determine_start_end\\nfrom seqseek.exceptions import TooManyLoops\\nfrom seqseek.chromosome import Chromosome, MissingDataError\\nfrom seqseek.lib import get_data_directory, BUILD37, BUILD37_ACCESSIONS, ACCESSION_LENGTHS, DATA_DIR_VARIABLE\\n\\n\\nclass TestDataDirectory(TestCase):\\n\\n    TEST_DATA_DIR = os.path.join(\\'seqseek\\', \\'tests\\', \\'test_chromosomes\\')\\n\\n    def setUp(self):\\n        os.environ[DATA_DIR_VARIABLE] = TestChromosome.TEST_DATA_DIR\\n\\n    def test_get_data_directory(self):\\n        data_dir = get_data_directory()\\n        self.assertEqual(TestChromosome.TEST_DATA_DIR, data_dir)\\n\\n    def test_make_data_directory(self):\\n        new_dir = os.path.join(TestChromosome.TEST_DATA_DIR, \"test\")\\n        self.assertFalse(os.path.isdir(new_dir))\\n        os.environ[DATA_DIR_VARIABLE] = new_dir\\n        get_data_directory()\\n        self.assertTrue(os.path.isdir(new_dir))\\n        os.rmdir(new_dir)\\n\\n\\nclass TestChromosome(TestCase):\\n\\n    TEST_DATA_DIR = os.path.join(\\'seqseek\\', \\'tests\\', \\'test_chromosomes\\')\\n\\n    def setUp(self):\\n        mt_accession = BUILD37_ACCESSIONS[\\'MT\\']\\n        self._mt_length = ACCESSION_LENGTHS[mt_accession]\\n        os.environ[DATA_DIR_VARIABLE] = TestChromosome.TEST_DATA_DIR\\n        ACCESSION_LENGTHS[mt_accession] = 20\\n\\n    def tearDown(self):\\n        mt_accession = BUILD37_ACCESSIONS[\\'MT\\']\\n        ACCESSION_LENGTHS[mt_accession] = self._mt_length\\n\\n    def test_invalid_assembly(self):\\n        with self.assertRaises(ValueError):\\n            Chromosome(\\'1\\', \\'build_39\\')\\n\\n    def test_invalid_name(self):\\n        with self.assertRaises(ValueError):\\n            Chromosome(\\'0\\', BUILD37)\\n\\n    def test_no_errors(self):\\n        Chromosome(\\'1\\').path()\\n        Chromosome(\\'1\\').sorted_chromosome_length_tuples(assembly=BUILD37)\\n        Chromosome(\\'1\\').filename()\\n\\n    def test_chr1_sequences(self):\\n        expected_seq = \\'GGGGCGGGAGGACGGGCCCG\\'\\n        seq = Chromosome(1).sequence(0, 20)\\n        self.assertEqual(seq, expected_seq)\\n        self.assertEqual(len(seq), 20)\\n        expected_seq = \\'GGGAG\\'\\n        seq = Chromosome(1).sequence(5, 10)\\n        self.assertEqual(seq, expected_seq)\\n\\n    def test_chrMT_sequence(self):\\n        expected_seq = \\'GATCACAGGTCTTCACCCT\\'\\n        seq = Chromosome(\\'MT\\').sequence(0, 20)\\n        self.assertEqual(seq, expected_seq)\\n        self.assertEqual(len(seq), 19)  # the N base was removed\\n        expected_seq = \\'CAGGT\\'\\n        seq = Chromosome(\\'MT\\').sequence(5, 10)\\n        self.assertEqual(seq, expected_seq)\\n\\n    def test_rCRS_sequence_retain_N(self):\\n        expected_seq = \\'GATCACAGGTCTNTCACCCT\\'\\n        seq = Chromosome(\\'MT\\', RCRS_N_remove=False).sequence(0, 20)\\n        self.assertEqual(seq, expected_seq)\\n        self.assertTrue(\\'N\\' in seq)  # the N base was *not* removed\\n\\n    def test_mito_loop_end(self):\\n        expected_seq = \\'CTTCACCCTGATCACAGGT\\'\\n\\n        seq = Chromosome(\\'MT\\', loop=True).sequence(10, 30)\\n        self.assertEqual(seq, expected_seq)\\n\\n        seq = Chromosome(\\'MT\\', loop=True).sequence(-10, 10)\\n        self.assertEqual(seq, expected_seq)\\n\\n    def test_others_are_not_circular(self):\\n        with self.assertRaises(ValueError):\\n            Chromosome(1, loop=True).sequence(0, 1)\\n\\n    def test_too_many_loops(self):\\n        \"\"\"should never return a sequence longer than the length of the contig\"\"\"\\n        mt_accession = BUILD37_ACCESSIONS[\\'MT\\']\\n        mt_length = ACCESSION_LENGTHS[mt_accession]\\n        Chromosome(\\'MT\\', loop=True).sequence(0, mt_length)\\n        with self.assertRaises(TooManyLoops):\\n            Chromosome(\\'MT\\', loop=True).sequence(0, mt_length + 1)\\n\\n        Chromosome(\\'MT\\', loop=True).sequence(-1, mt_length - 1)\\n        with self.assertRaises(TooManyLoops):\\n            Chromosome(\\'MT\\', loop=True).sequence(-1, mt_length)\\n\\n    def test_load_by_accession(self):\\n        # mostly duped from test_chr1_sequences\\n        expected_seq = \\'GGGGCGGGAGGACGGGCCCG\\'\\n        seq = Chromosome(\\'NC_000001.10\\').sequence(0, 20)\\n        self.assertEqual(seq, expected_seq)\\n        self.assertEqual(len(seq), 20)\\n        expected_seq = \\'GGGAG\\'\\n        seq = Chromosome(\\'NC_000001.10\\').sequence(5, 10)\\n        self.assertEqual(seq, expected_seq)\\n\\n\\nclass TestInvalidQueries(TestCase):\\n\\n    def test_invalid_chromosome_name(self):\\n        with self.assertRaises(ValueError):\\n            Chromosome(23).sequence(123456, 123457)\\n\\n    def test_missing_chromosome(self):\\n        with self.assertRaises(MissingDataError):\\n            Chromosome(\\'18\\').sequence(0, 20)\\n\\n    def test_invalid_start_position(self):\\n        with self.assertRaises(ValueError):\\n            Chromosome(1).sequence(-1, 10)\\n\\n    def test_invalid_end_position(self):\\n        with self.assertRaises(ValueError):\\n            Chromosome(1).sequence(123457, 123456)\\n\\n    def test_out_of_range_start_position(self):\\n        with self.assertRaises(ValueError):\\n            Chromosome(1).sequence(249250623, 249250625)\\n\\n    def test_out_of_range_end_position(self):\\n        with self.assertRaises(ValueError):\\n            Chromosome(1).sequence(249250619, 249250622)\\n\\n\\nclass TestCLI(TestCase):\\n\\n    def test_determine_start_end(self):\\n        expected = (10000, 10100)\\n\\n        observed = determine_start_end(\\'10000\\', \\'10100\\')\\n        self.assertEqual(observed, expected)\\n\\n        observed = determine_start_end(\\'10000\\', \\'+100\\')\\n        self.assertEqual(observed, expected)\\n\\n        observed = determine_start_end(\\'-100\\', \\'10100\\')\\n        self.assertEqual(observed, expected)\\n\\n    def test_determine_start_end_cannot_both_relative(self):\\n        with self.assertRaises(ValueError):\\n            determine_start_end(\\'-100\\', \\'+100\\')\\n\\n    def test_determine_start_end_non_integer(self):\\n        with self.assertRaises(ValueError):\\n            determine_start_end(\\'foo\\', \\'10100\\')\\n        with self.assertRaises(ValueError):\\n            determine_start_end(\\'10000\\', \\'bar\\')\\n        with self.assertRaises(ValueError):\\n            determine_start_end(\\'-foo\\', \\'10100\\')\\n        with self.assertRaises(ValueError):\\n            determine_start_end(\\'10000\\', \\'+bar\\')\\n        with self.assertRaises(ValueError):\\n            determine_start_end(\\'foo\\', \\'bar\\')\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/seqseek/seqseek/tests/test_meta_test.py'"}, "return_value": "''"}]}, "normalize_mark_list": {"line": 355, "args": [{"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}, {"func_args": {"mark_list": "[]"}, "return_value": "[]"}], "text": "def normalize_mark_list(mark_list: Iterable[Union[Mark, MarkDecorator]]) -> List[Mark]:\n    \"\"\"Normalize marker decorating helpers to mark objects.\n\n    :type List[Union[Mark, Markdecorator]] mark_list:\n    :rtype: List[Mark]\n    \"\"\"\n    extracted = [\n        getattr(mark, \"mark\", mark) for mark in mark_list\n    ]  # unpack MarkDecorator\n    for mark in extracted:\n        if not isinstance(mark, Mark):\n            raise TypeError(f\"got {mark!r} instead of Mark\")\n    return [x for x in extracted if isinstance(x, Mark)]"}, "iterparentnodeids": {"line": 44, "args": [{"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestDataDirectory::test_get_data_directory'"}, "return_value": "''"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestDataDirectory::test_get_data_directory'"}, "return_value": "'seqseek'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestDataDirectory::test_get_data_directory'"}, "return_value": "'seqseek/tests'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestDataDirectory::test_get_data_directory'"}, "return_value": "'seqseek/tests/test_functional.py'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestDataDirectory::test_get_data_directory'"}, "return_value": "'seqseek/tests/test_functional.py::TestDataDirectory'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestDataDirectory::test_get_data_directory'"}, "return_value": "'seqseek/tests/test_functional.py::TestDataDirectory::test_get_data_directory'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestDataDirectory::test_get_data_directory'"}, "return_value": "None"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestDataDirectory::test_get_data_directory'"}, "return_value": "''"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestDataDirectory::test_get_data_directory'"}, "return_value": "'seqseek'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestDataDirectory::test_get_data_directory'"}, "return_value": "'seqseek/tests'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestDataDirectory::test_get_data_directory'"}, "return_value": "'seqseek/tests/test_functional.py'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestDataDirectory::test_get_data_directory'"}, "return_value": "'seqseek/tests/test_functional.py::TestDataDirectory'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestDataDirectory::test_get_data_directory'"}, "return_value": "'seqseek/tests/test_functional.py::TestDataDirectory::test_get_data_directory'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestDataDirectory::test_get_data_directory'"}, "return_value": "None"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestDataDirectory::test_make_data_directory'"}, "return_value": "''"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestDataDirectory::test_make_data_directory'"}, "return_value": "'seqseek'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestDataDirectory::test_make_data_directory'"}, "return_value": "'seqseek/tests'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestDataDirectory::test_make_data_directory'"}, "return_value": "'seqseek/tests/test_functional.py'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestDataDirectory::test_make_data_directory'"}, "return_value": "'seqseek/tests/test_functional.py::TestDataDirectory'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestDataDirectory::test_make_data_directory'"}, "return_value": "'seqseek/tests/test_functional.py::TestDataDirectory::test_make_data_directory'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestDataDirectory::test_make_data_directory'"}, "return_value": "None"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestDataDirectory::test_make_data_directory'"}, "return_value": "''"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestDataDirectory::test_make_data_directory'"}, "return_value": "'seqseek'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestDataDirectory::test_make_data_directory'"}, "return_value": "'seqseek/tests'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestDataDirectory::test_make_data_directory'"}, "return_value": "'seqseek/tests/test_functional.py'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestDataDirectory::test_make_data_directory'"}, "return_value": "'seqseek/tests/test_functional.py::TestDataDirectory'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestDataDirectory::test_make_data_directory'"}, "return_value": "'seqseek/tests/test_functional.py::TestDataDirectory::test_make_data_directory'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestDataDirectory::test_make_data_directory'"}, "return_value": "None"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_chr1_sequences'"}, "return_value": "''"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_chr1_sequences'"}, "return_value": "'seqseek'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_chr1_sequences'"}, "return_value": "'seqseek/tests'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_chr1_sequences'"}, "return_value": "'seqseek/tests/test_functional.py'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_chr1_sequences'"}, "return_value": "'seqseek/tests/test_functional.py::TestChromosome'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_chr1_sequences'"}, "return_value": "'seqseek/tests/test_functional.py::TestChromosome::test_chr1_sequences'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_chr1_sequences'"}, "return_value": "None"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_chr1_sequences'"}, "return_value": "''"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_chr1_sequences'"}, "return_value": "'seqseek'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_chr1_sequences'"}, "return_value": "'seqseek/tests'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_chr1_sequences'"}, "return_value": "'seqseek/tests/test_functional.py'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_chr1_sequences'"}, "return_value": "'seqseek/tests/test_functional.py::TestChromosome'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_chr1_sequences'"}, "return_value": "'seqseek/tests/test_functional.py::TestChromosome::test_chr1_sequences'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_chr1_sequences'"}, "return_value": "None"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_chrMT_sequence'"}, "return_value": "''"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_chrMT_sequence'"}, "return_value": "'seqseek'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_chrMT_sequence'"}, "return_value": "'seqseek/tests'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_chrMT_sequence'"}, "return_value": "'seqseek/tests/test_functional.py'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_chrMT_sequence'"}, "return_value": "'seqseek/tests/test_functional.py::TestChromosome'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_chrMT_sequence'"}, "return_value": "'seqseek/tests/test_functional.py::TestChromosome::test_chrMT_sequence'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_chrMT_sequence'"}, "return_value": "None"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_chrMT_sequence'"}, "return_value": "''"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_chrMT_sequence'"}, "return_value": "'seqseek'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_chrMT_sequence'"}, "return_value": "'seqseek/tests'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_chrMT_sequence'"}, "return_value": "'seqseek/tests/test_functional.py'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_chrMT_sequence'"}, "return_value": "'seqseek/tests/test_functional.py::TestChromosome'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_chrMT_sequence'"}, "return_value": "'seqseek/tests/test_functional.py::TestChromosome::test_chrMT_sequence'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_chrMT_sequence'"}, "return_value": "None"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_invalid_assembly'"}, "return_value": "''"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_invalid_assembly'"}, "return_value": "'seqseek'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_invalid_assembly'"}, "return_value": "'seqseek/tests'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_invalid_assembly'"}, "return_value": "'seqseek/tests/test_functional.py'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_invalid_assembly'"}, "return_value": "'seqseek/tests/test_functional.py::TestChromosome'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_invalid_assembly'"}, "return_value": "'seqseek/tests/test_functional.py::TestChromosome::test_invalid_assembly'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_invalid_assembly'"}, "return_value": "None"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_invalid_assembly'"}, "return_value": "''"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_invalid_assembly'"}, "return_value": "'seqseek'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_invalid_assembly'"}, "return_value": "'seqseek/tests'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_invalid_assembly'"}, "return_value": "'seqseek/tests/test_functional.py'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_invalid_assembly'"}, "return_value": "'seqseek/tests/test_functional.py::TestChromosome'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_invalid_assembly'"}, "return_value": "'seqseek/tests/test_functional.py::TestChromosome::test_invalid_assembly'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_invalid_assembly'"}, "return_value": "None"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_invalid_name'"}, "return_value": "''"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_invalid_name'"}, "return_value": "'seqseek'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_invalid_name'"}, "return_value": "'seqseek/tests'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_invalid_name'"}, "return_value": "'seqseek/tests/test_functional.py'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_invalid_name'"}, "return_value": "'seqseek/tests/test_functional.py::TestChromosome'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_invalid_name'"}, "return_value": "'seqseek/tests/test_functional.py::TestChromosome::test_invalid_name'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_invalid_name'"}, "return_value": "None"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_invalid_name'"}, "return_value": "''"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_invalid_name'"}, "return_value": "'seqseek'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_invalid_name'"}, "return_value": "'seqseek/tests'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_invalid_name'"}, "return_value": "'seqseek/tests/test_functional.py'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_invalid_name'"}, "return_value": "'seqseek/tests/test_functional.py::TestChromosome'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_invalid_name'"}, "return_value": "'seqseek/tests/test_functional.py::TestChromosome::test_invalid_name'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_invalid_name'"}, "return_value": "None"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_load_by_accession'"}, "return_value": "''"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_load_by_accession'"}, "return_value": "'seqseek'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_load_by_accession'"}, "return_value": "'seqseek/tests'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_load_by_accession'"}, "return_value": "'seqseek/tests/test_functional.py'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_load_by_accession'"}, "return_value": "'seqseek/tests/test_functional.py::TestChromosome'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_load_by_accession'"}, "return_value": "'seqseek/tests/test_functional.py::TestChromosome::test_load_by_accession'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_load_by_accession'"}, "return_value": "None"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_load_by_accession'"}, "return_value": "''"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_load_by_accession'"}, "return_value": "'seqseek'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_load_by_accession'"}, "return_value": "'seqseek/tests'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_load_by_accession'"}, "return_value": "'seqseek/tests/test_functional.py'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_load_by_accession'"}, "return_value": "'seqseek/tests/test_functional.py::TestChromosome'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_load_by_accession'"}, "return_value": "'seqseek/tests/test_functional.py::TestChromosome::test_load_by_accession'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_load_by_accession'"}, "return_value": "None"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_mito_loop_end'"}, "return_value": "''"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_mito_loop_end'"}, "return_value": "'seqseek'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_mito_loop_end'"}, "return_value": "'seqseek/tests'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_mito_loop_end'"}, "return_value": "'seqseek/tests/test_functional.py'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_mito_loop_end'"}, "return_value": "'seqseek/tests/test_functional.py::TestChromosome'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_mito_loop_end'"}, "return_value": "'seqseek/tests/test_functional.py::TestChromosome::test_mito_loop_end'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_mito_loop_end'"}, "return_value": "None"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_mito_loop_end'"}, "return_value": "''"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_mito_loop_end'"}, "return_value": "'seqseek'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_mito_loop_end'"}, "return_value": "'seqseek/tests'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_mito_loop_end'"}, "return_value": "'seqseek/tests/test_functional.py'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_mito_loop_end'"}, "return_value": "'seqseek/tests/test_functional.py::TestChromosome'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_mito_loop_end'"}, "return_value": "'seqseek/tests/test_functional.py::TestChromosome::test_mito_loop_end'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_mito_loop_end'"}, "return_value": "None"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_no_errors'"}, "return_value": "''"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_no_errors'"}, "return_value": "'seqseek'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_no_errors'"}, "return_value": "'seqseek/tests'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_no_errors'"}, "return_value": "'seqseek/tests/test_functional.py'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_no_errors'"}, "return_value": "'seqseek/tests/test_functional.py::TestChromosome'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_no_errors'"}, "return_value": "'seqseek/tests/test_functional.py::TestChromosome::test_no_errors'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_no_errors'"}, "return_value": "None"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_no_errors'"}, "return_value": "''"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_no_errors'"}, "return_value": "'seqseek'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_no_errors'"}, "return_value": "'seqseek/tests'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_no_errors'"}, "return_value": "'seqseek/tests/test_functional.py'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_no_errors'"}, "return_value": "'seqseek/tests/test_functional.py::TestChromosome'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_no_errors'"}, "return_value": "'seqseek/tests/test_functional.py::TestChromosome::test_no_errors'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_no_errors'"}, "return_value": "None"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_others_are_not_circular'"}, "return_value": "''"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_others_are_not_circular'"}, "return_value": "'seqseek'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_others_are_not_circular'"}, "return_value": "'seqseek/tests'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_others_are_not_circular'"}, "return_value": "'seqseek/tests/test_functional.py'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_others_are_not_circular'"}, "return_value": "'seqseek/tests/test_functional.py::TestChromosome'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_others_are_not_circular'"}, "return_value": "'seqseek/tests/test_functional.py::TestChromosome::test_others_are_not_circular'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_others_are_not_circular'"}, "return_value": "None"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_others_are_not_circular'"}, "return_value": "''"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_others_are_not_circular'"}, "return_value": "'seqseek'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_others_are_not_circular'"}, "return_value": "'seqseek/tests'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_others_are_not_circular'"}, "return_value": "'seqseek/tests/test_functional.py'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_others_are_not_circular'"}, "return_value": "'seqseek/tests/test_functional.py::TestChromosome'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_others_are_not_circular'"}, "return_value": "'seqseek/tests/test_functional.py::TestChromosome::test_others_are_not_circular'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_others_are_not_circular'"}, "return_value": "None"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_rCRS_sequence_retain_N'"}, "return_value": "''"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_rCRS_sequence_retain_N'"}, "return_value": "'seqseek'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_rCRS_sequence_retain_N'"}, "return_value": "'seqseek/tests'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_rCRS_sequence_retain_N'"}, "return_value": "'seqseek/tests/test_functional.py'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_rCRS_sequence_retain_N'"}, "return_value": "'seqseek/tests/test_functional.py::TestChromosome'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_rCRS_sequence_retain_N'"}, "return_value": "'seqseek/tests/test_functional.py::TestChromosome::test_rCRS_sequence_retain_N'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_rCRS_sequence_retain_N'"}, "return_value": "None"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_rCRS_sequence_retain_N'"}, "return_value": "''"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_rCRS_sequence_retain_N'"}, "return_value": "'seqseek'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_rCRS_sequence_retain_N'"}, "return_value": "'seqseek/tests'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_rCRS_sequence_retain_N'"}, "return_value": "'seqseek/tests/test_functional.py'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_rCRS_sequence_retain_N'"}, "return_value": "'seqseek/tests/test_functional.py::TestChromosome'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_rCRS_sequence_retain_N'"}, "return_value": "'seqseek/tests/test_functional.py::TestChromosome::test_rCRS_sequence_retain_N'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_rCRS_sequence_retain_N'"}, "return_value": "None"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_too_many_loops'"}, "return_value": "''"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_too_many_loops'"}, "return_value": "'seqseek'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_too_many_loops'"}, "return_value": "'seqseek/tests'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_too_many_loops'"}, "return_value": "'seqseek/tests/test_functional.py'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_too_many_loops'"}, "return_value": "'seqseek/tests/test_functional.py::TestChromosome'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_too_many_loops'"}, "return_value": "'seqseek/tests/test_functional.py::TestChromosome::test_too_many_loops'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_too_many_loops'"}, "return_value": "None"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_too_many_loops'"}, "return_value": "''"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_too_many_loops'"}, "return_value": "'seqseek'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_too_many_loops'"}, "return_value": "'seqseek/tests'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_too_many_loops'"}, "return_value": "'seqseek/tests/test_functional.py'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_too_many_loops'"}, "return_value": "'seqseek/tests/test_functional.py::TestChromosome'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_too_many_loops'"}, "return_value": "'seqseek/tests/test_functional.py::TestChromosome::test_too_many_loops'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestChromosome::test_too_many_loops'"}, "return_value": "None"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_invalid_chromosome_name'"}, "return_value": "''"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_invalid_chromosome_name'"}, "return_value": "'seqseek'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_invalid_chromosome_name'"}, "return_value": "'seqseek/tests'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_invalid_chromosome_name'"}, "return_value": "'seqseek/tests/test_functional.py'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_invalid_chromosome_name'"}, "return_value": "'seqseek/tests/test_functional.py::TestInvalidQueries'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_invalid_chromosome_name'"}, "return_value": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_invalid_chromosome_name'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_invalid_chromosome_name'"}, "return_value": "None"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_invalid_chromosome_name'"}, "return_value": "''"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_invalid_chromosome_name'"}, "return_value": "'seqseek'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_invalid_chromosome_name'"}, "return_value": "'seqseek/tests'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_invalid_chromosome_name'"}, "return_value": "'seqseek/tests/test_functional.py'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_invalid_chromosome_name'"}, "return_value": "'seqseek/tests/test_functional.py::TestInvalidQueries'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_invalid_chromosome_name'"}, "return_value": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_invalid_chromosome_name'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_invalid_chromosome_name'"}, "return_value": "None"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_invalid_end_position'"}, "return_value": "''"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_invalid_end_position'"}, "return_value": "'seqseek'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_invalid_end_position'"}, "return_value": "'seqseek/tests'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_invalid_end_position'"}, "return_value": "'seqseek/tests/test_functional.py'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_invalid_end_position'"}, "return_value": "'seqseek/tests/test_functional.py::TestInvalidQueries'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_invalid_end_position'"}, "return_value": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_invalid_end_position'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_invalid_end_position'"}, "return_value": "None"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_invalid_end_position'"}, "return_value": "''"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_invalid_end_position'"}, "return_value": "'seqseek'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_invalid_end_position'"}, "return_value": "'seqseek/tests'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_invalid_end_position'"}, "return_value": "'seqseek/tests/test_functional.py'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_invalid_end_position'"}, "return_value": "'seqseek/tests/test_functional.py::TestInvalidQueries'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_invalid_end_position'"}, "return_value": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_invalid_end_position'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_invalid_end_position'"}, "return_value": "None"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_invalid_start_position'"}, "return_value": "''"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_invalid_start_position'"}, "return_value": "'seqseek'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_invalid_start_position'"}, "return_value": "'seqseek/tests'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_invalid_start_position'"}, "return_value": "'seqseek/tests/test_functional.py'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_invalid_start_position'"}, "return_value": "'seqseek/tests/test_functional.py::TestInvalidQueries'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_invalid_start_position'"}, "return_value": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_invalid_start_position'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_invalid_start_position'"}, "return_value": "None"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_invalid_start_position'"}, "return_value": "''"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_invalid_start_position'"}, "return_value": "'seqseek'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_invalid_start_position'"}, "return_value": "'seqseek/tests'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_invalid_start_position'"}, "return_value": "'seqseek/tests/test_functional.py'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_invalid_start_position'"}, "return_value": "'seqseek/tests/test_functional.py::TestInvalidQueries'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_invalid_start_position'"}, "return_value": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_invalid_start_position'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_invalid_start_position'"}, "return_value": "None"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_missing_chromosome'"}, "return_value": "''"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_missing_chromosome'"}, "return_value": "'seqseek'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_missing_chromosome'"}, "return_value": "'seqseek/tests'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_missing_chromosome'"}, "return_value": "'seqseek/tests/test_functional.py'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_missing_chromosome'"}, "return_value": "'seqseek/tests/test_functional.py::TestInvalidQueries'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_missing_chromosome'"}, "return_value": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_missing_chromosome'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_missing_chromosome'"}, "return_value": "None"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_missing_chromosome'"}, "return_value": "''"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_missing_chromosome'"}, "return_value": "'seqseek'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_missing_chromosome'"}, "return_value": "'seqseek/tests'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_missing_chromosome'"}, "return_value": "'seqseek/tests/test_functional.py'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_missing_chromosome'"}, "return_value": "'seqseek/tests/test_functional.py::TestInvalidQueries'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_missing_chromosome'"}, "return_value": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_missing_chromosome'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_missing_chromosome'"}, "return_value": "None"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_out_of_range_end_position'"}, "return_value": "''"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_out_of_range_end_position'"}, "return_value": "'seqseek'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_out_of_range_end_position'"}, "return_value": "'seqseek/tests'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_out_of_range_end_position'"}, "return_value": "'seqseek/tests/test_functional.py'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_out_of_range_end_position'"}, "return_value": "'seqseek/tests/test_functional.py::TestInvalidQueries'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_out_of_range_end_position'"}, "return_value": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_out_of_range_end_position'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_out_of_range_end_position'"}, "return_value": "None"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_out_of_range_end_position'"}, "return_value": "''"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_out_of_range_end_position'"}, "return_value": "'seqseek'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_out_of_range_end_position'"}, "return_value": "'seqseek/tests'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_out_of_range_end_position'"}, "return_value": "'seqseek/tests/test_functional.py'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_out_of_range_end_position'"}, "return_value": "'seqseek/tests/test_functional.py::TestInvalidQueries'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_out_of_range_end_position'"}, "return_value": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_out_of_range_end_position'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_out_of_range_end_position'"}, "return_value": "None"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_out_of_range_start_position'"}, "return_value": "''"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_out_of_range_start_position'"}, "return_value": "'seqseek'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_out_of_range_start_position'"}, "return_value": "'seqseek/tests'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_out_of_range_start_position'"}, "return_value": "'seqseek/tests/test_functional.py'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_out_of_range_start_position'"}, "return_value": "'seqseek/tests/test_functional.py::TestInvalidQueries'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_out_of_range_start_position'"}, "return_value": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_out_of_range_start_position'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_out_of_range_start_position'"}, "return_value": "None"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_out_of_range_start_position'"}, "return_value": "''"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_out_of_range_start_position'"}, "return_value": "'seqseek'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_out_of_range_start_position'"}, "return_value": "'seqseek/tests'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_out_of_range_start_position'"}, "return_value": "'seqseek/tests/test_functional.py'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_out_of_range_start_position'"}, "return_value": "'seqseek/tests/test_functional.py::TestInvalidQueries'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_out_of_range_start_position'"}, "return_value": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_out_of_range_start_position'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestInvalidQueries::test_out_of_range_start_position'"}, "return_value": "None"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestCLI::test_determine_start_end'"}, "return_value": "''"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestCLI::test_determine_start_end'"}, "return_value": "'seqseek'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestCLI::test_determine_start_end'"}, "return_value": "'seqseek/tests'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestCLI::test_determine_start_end'"}, "return_value": "'seqseek/tests/test_functional.py'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestCLI::test_determine_start_end'"}, "return_value": "'seqseek/tests/test_functional.py::TestCLI'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestCLI::test_determine_start_end'"}, "return_value": "'seqseek/tests/test_functional.py::TestCLI::test_determine_start_end'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestCLI::test_determine_start_end'"}, "return_value": "None"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestCLI::test_determine_start_end'"}, "return_value": "''"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestCLI::test_determine_start_end'"}, "return_value": "'seqseek'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestCLI::test_determine_start_end'"}, "return_value": "'seqseek/tests'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestCLI::test_determine_start_end'"}, "return_value": "'seqseek/tests/test_functional.py'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestCLI::test_determine_start_end'"}, "return_value": "'seqseek/tests/test_functional.py::TestCLI'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestCLI::test_determine_start_end'"}, "return_value": "'seqseek/tests/test_functional.py::TestCLI::test_determine_start_end'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestCLI::test_determine_start_end'"}, "return_value": "None"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestCLI::test_determine_start_end_cannot_both_relative'"}, "return_value": "''"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestCLI::test_determine_start_end_cannot_both_relative'"}, "return_value": "'seqseek'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestCLI::test_determine_start_end_cannot_both_relative'"}, "return_value": "'seqseek/tests'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestCLI::test_determine_start_end_cannot_both_relative'"}, "return_value": "'seqseek/tests/test_functional.py'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestCLI::test_determine_start_end_cannot_both_relative'"}, "return_value": "'seqseek/tests/test_functional.py::TestCLI'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestCLI::test_determine_start_end_cannot_both_relative'"}, "return_value": "'seqseek/tests/test_functional.py::TestCLI::test_determine_start_end_cannot_both_relative'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestCLI::test_determine_start_end_cannot_both_relative'"}, "return_value": "None"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestCLI::test_determine_start_end_cannot_both_relative'"}, "return_value": "''"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestCLI::test_determine_start_end_cannot_both_relative'"}, "return_value": "'seqseek'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestCLI::test_determine_start_end_cannot_both_relative'"}, "return_value": "'seqseek/tests'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestCLI::test_determine_start_end_cannot_both_relative'"}, "return_value": "'seqseek/tests/test_functional.py'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestCLI::test_determine_start_end_cannot_both_relative'"}, "return_value": "'seqseek/tests/test_functional.py::TestCLI'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestCLI::test_determine_start_end_cannot_both_relative'"}, "return_value": "'seqseek/tests/test_functional.py::TestCLI::test_determine_start_end_cannot_both_relative'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestCLI::test_determine_start_end_cannot_both_relative'"}, "return_value": "None"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestCLI::test_determine_start_end_non_integer'"}, "return_value": "''"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestCLI::test_determine_start_end_non_integer'"}, "return_value": "'seqseek'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestCLI::test_determine_start_end_non_integer'"}, "return_value": "'seqseek/tests'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestCLI::test_determine_start_end_non_integer'"}, "return_value": "'seqseek/tests/test_functional.py'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestCLI::test_determine_start_end_non_integer'"}, "return_value": "'seqseek/tests/test_functional.py::TestCLI'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestCLI::test_determine_start_end_non_integer'"}, "return_value": "'seqseek/tests/test_functional.py::TestCLI::test_determine_start_end_non_integer'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestCLI::test_determine_start_end_non_integer'"}, "return_value": "None"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestCLI::test_determine_start_end_non_integer'"}, "return_value": "''"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestCLI::test_determine_start_end_non_integer'"}, "return_value": "'seqseek'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestCLI::test_determine_start_end_non_integer'"}, "return_value": "'seqseek/tests'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestCLI::test_determine_start_end_non_integer'"}, "return_value": "'seqseek/tests/test_functional.py'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestCLI::test_determine_start_end_non_integer'"}, "return_value": "'seqseek/tests/test_functional.py::TestCLI'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestCLI::test_determine_start_end_non_integer'"}, "return_value": "'seqseek/tests/test_functional.py::TestCLI::test_determine_start_end_non_integer'"}, {"func_args": {"nodeid": "'seqseek/tests/test_functional.py::TestCLI::test_determine_start_end_non_integer'"}, "return_value": "None"}], "text": "def iterparentnodeids(nodeid: str) -> Iterator[str]:\n    \"\"\"Return the parent node IDs of a given node ID, inclusive.\n\n    For the node ID\n\n        \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_source\"\n\n    the result would be\n\n        \"\"\n        \"testing\"\n        \"testing/code\"\n        \"testing/code/test_excinfo.py\"\n        \"testing/code/test_excinfo.py::TestFormattedExcinfo\"\n        \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_source\"\n\n    Note that :: parts are only considered at the last / component.\n    \"\"\"\n    pos = 0\n    sep = SEP\n    yield \"\"\n    while True:\n        at = nodeid.find(sep, pos)\n        if at == -1 and sep == SEP:\n            sep = \"::\"\n        elif at == -1:\n            if nodeid:\n                yield nodeid\n            break\n        else:\n            if at:\n                yield nodeid[:at]\n            pos = at + len(sep)"}, "wcswidth": {"line": 43, "args": [{"func_args": {"s": "''"}, "return_value": "0"}, {"func_args": {"s": "'seqseek/tests/test_functional.py .'"}, "return_value": "34"}, {"func_args": {"s": "'seqseek/tests/test_functional.py ..'"}, "return_value": "35"}, {"func_args": {"s": "'seqseek/tests/test_functional.py ...'"}, "return_value": "36"}, {"func_args": {"s": "'seqseek/tests/test_functional.py ....'"}, "return_value": "37"}, {"func_args": {"s": "'seqseek/tests/test_functional.py .....'"}, "return_value": "38"}, {"func_args": {"s": "'seqseek/tests/test_functional.py ......'"}, "return_value": "39"}, {"func_args": {"s": "'seqseek/tests/test_functional.py .......'"}, "return_value": "40"}, {"func_args": {"s": "'seqseek/tests/test_functional.py ........'"}, "return_value": "41"}, {"func_args": {"s": "'seqseek/tests/test_functional.py .........'"}, "return_value": "42"}, {"func_args": {"s": "'seqseek/tests/test_functional.py ..........'"}, "return_value": "43"}, {"func_args": {"s": "'seqseek/tests/test_functional.py ...........'"}, "return_value": "44"}, {"func_args": {"s": "'seqseek/tests/test_functional.py ............'"}, "return_value": "45"}, {"func_args": {"s": "'seqseek/tests/test_functional.py .............'"}, "return_value": "46"}, {"func_args": {"s": "'seqseek/tests/test_functional.py ..............'"}, "return_value": "47"}, {"func_args": {"s": "'seqseek/tests/test_functional.py ...............'"}, "return_value": "48"}, {"func_args": {"s": "'seqseek/tests/test_functional.py ................'"}, "return_value": "49"}, {"func_args": {"s": "'seqseek/tests/test_functional.py .................'"}, "return_value": "50"}, {"func_args": {"s": "'seqseek/tests/test_functional.py ..................'"}, "return_value": "51"}, {"func_args": {"s": "'seqseek/tests/test_functional.py ...................'"}, "return_value": "52"}, {"func_args": {"s": "'seqseek/tests/test_functional.py ....................'"}, "return_value": "53"}, {"func_args": {"s": "'seqseek/tests/test_functional.py .....................'"}, "return_value": "54"}], "text": "def wcswidth(s: str) -> int:\n    \"\"\"Determine how many columns are needed to display a string in a terminal.\n\n    Returns -1 if the string contains non-printable characters.\n    \"\"\"\n    width = 0\n    for c in unicodedata.normalize(\"NFC\", s):\n        wc = wcwidth(c)\n        if wc < 0:\n            return -1\n        width += wc\n    return width"}, "wcwidth": {"line": 4, "args": [{"func_args": {"c": "'s'"}, "return_value": "1"}, {"func_args": {"c": "'e'"}, "return_value": "1"}, {"func_args": {"c": "'q'"}, "return_value": "1"}, {"func_args": {"c": "'k'"}, "return_value": "1"}, {"func_args": {"c": "'/'"}, "return_value": "1"}, {"func_args": {"c": "'t'"}, "return_value": "1"}, {"func_args": {"c": "'_'"}, "return_value": "1"}, {"func_args": {"c": "'f'"}, "return_value": "1"}, {"func_args": {"c": "'u'"}, "return_value": "1"}, {"func_args": {"c": "'n'"}, "return_value": "1"}, {"func_args": {"c": "'c'"}, "return_value": "1"}, {"func_args": {"c": "'i'"}, "return_value": "1"}, {"func_args": {"c": "'o'"}, "return_value": "1"}, {"func_args": {"c": "'a'"}, "return_value": "1"}, {"func_args": {"c": "'l'"}, "return_value": "1"}, {"func_args": {"c": "'.'"}, "return_value": "1"}, {"func_args": {"c": "'p'"}, "return_value": "1"}, {"func_args": {"c": "'y'"}, "return_value": "1"}, {"func_args": {"c": "' '"}, "return_value": "1"}]}, "get_data_directory": {"line": 158, "args": [{"func_args": {}, "return_value": "'seqseek/tests/test_chromosomes'"}, {"func_args": {}, "return_value": "'seqseek/tests/test_chromosomes/test'"}, {"func_args": {}, "return_value": "'seqseek/tests/test_chromosomes'"}, {"func_args": {}, "return_value": "'seqseek/tests/test_chromosomes'"}, {"func_args": {}, "return_value": "'seqseek/tests/test_chromosomes'"}, {"func_args": {}, "return_value": "'seqseek/tests/test_chromosomes'"}, {"func_args": {}, "return_value": "'seqseek/tests/test_chromosomes'"}, {"func_args": {}, "return_value": "'seqseek/tests/test_chromosomes'"}, {"func_args": {}, "return_value": "'seqseek/tests/test_chromosomes'"}, {"func_args": {}, "return_value": "'seqseek/tests/test_chromosomes'"}, {"func_args": {}, "return_value": "'seqseek/tests/test_chromosomes'"}, {"func_args": {}, "return_value": "'seqseek/tests/test_chromosomes'"}, {"func_args": {}, "return_value": "'seqseek/tests/test_chromosomes'"}, {"func_args": {}, "return_value": "'seqseek/tests/test_chromosomes'"}, {"func_args": {}, "return_value": "'seqseek/tests/test_chromosomes'"}, {"func_args": {}, "return_value": "'seqseek/tests/test_chromosomes'"}, {"func_args": {}, "return_value": "'seqseek/tests/test_chromosomes'"}, {"func_args": {}, "return_value": "'seqseek/tests/test_chromosomes'"}, {"func_args": {}, "return_value": "'seqseek/tests/test_chromosomes'"}, {"func_args": {}, "return_value": "'seqseek/tests/test_chromosomes'"}, {"func_args": {}, "return_value": "'seqseek/tests/test_chromosomes'"}, {"func_args": {}, "return_value": "'seqseek/tests/test_chromosomes'"}, {"func_args": {}, "return_value": "'seqseek/tests/test_chromosomes'"}, {"func_args": {}, "return_value": "'seqseek/tests/test_chromosomes'"}, {"func_args": {}, "return_value": "'seqseek/tests/test_chromosomes'"}, {"func_args": {}, "return_value": "'seqseek/tests/test_chromosomes'"}, {"func_args": {}, "return_value": "'seqseek/tests/test_chromosomes'"}, {"func_args": {}, "return_value": "'seqseek/tests/test_chromosomes'"}, {"func_args": {}, "return_value": "'seqseek/tests/test_chromosomes'"}, {"func_args": {}, "return_value": "'seqseek/tests/test_chromosomes'"}], "text": "def get_data_directory():\n    default = os.path.expanduser(DEFAULT_DATA_DIR)\n    storage_dir = os.environ.get(DATA_DIR_VARIABLE, default)\n    os.environ[DATA_DIR_VARIABLE] = storage_dir\n    if not os.path.exists(storage_dir):\n        os.makedirs(storage_dir)\n    return storage_dir"}, "_to_blob": {"line": 21, "args": [{"func_args": {"b": "b'*'"}, "return_value": "b'*'"}, {"func_args": {"b": "b'\\x1a:\\x01\\xe0]\\xa9\\xefw\\xfbo\\xdf\\xdb-\\xbe\\xbd\\xbe\\xb0'"}, "return_value": "b'\\x1a:\\x01\\xe0]\\xa9\\xefw\\xfbo\\xdf\\xdb-\\xbe\\xbd\\xbe\\xb0'"}, {"func_args": {"b": "b'f'"}, "return_value": "b'f'"}, {"func_args": {"b": "b'f-\\xff\\xff\\xff\\xe7?\\xff\\xff\\xffG\\xff\\xff\\xff\\xfc\\xff\\xff3\\xff\\x99?\\xe1\\x04'"}, "return_value": "b'f-\\xff\\xff\\xff\\xe7?\\xff\\xff\\xffG\\xff\\xff\\xff\\xfc\\xff\\xff3\\xff\\x99?\\xe1\\x04'"}, {"func_args": {"b": "b'\\x02'"}, "return_value": "b'\\x02'"}, {"func_args": {"b": "b'\\xf6\\xd4\\xeeO}w\\xf7\\xfe\\xfd\\xfb\\xb6]\\xdf\\xf5\\xa7\\xbb\\xbb;m\\xdb\\xfd\\x1f'"}, "return_value": "b'\\xf6\\xd4\\xeeO}w\\xf7\\xfe\\xfd\\xfb\\xb6]\\xdf\\xf5\\xa7\\xbb\\xbb;m\\xdb\\xfd\\x1f'"}, {"func_args": {"b": "b'\\xce=~\\xeb%'"}, "return_value": "b'\\xce=~\\xeb%'"}, {"func_args": {"b": "b'\\x02'"}, "return_value": "b'\\x02'"}], "text": "def _to_blob(b):\n    \"\"\"Convert a bytestring into a type SQLite will accept for a blob.\"\"\"\n    return b"}, "nums_to_numbits": {"line": 28, "args": [{"func_args": {"nums": "{1, 3, 5}"}, "return_value": "b'*'"}, {"func_args": {"nums": "{1, 3, 4, 9, 11, 12, 13, 16, 29, 30, 31, 32, 34, 35, 36, 38, 40, 43, 45, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 84, 86, 87, 88, 89, 91, 92, 94, 95, 96, 98, 99, 101, 105, 106, 107, 108, 109, 111, 112, 114, 115, 116, 117, 119, 121, 122, 123, 124, 125, 127, 132, 133, 135}"}, "return_value": "b'\\x1a:\\x01\\xe0]\\xa9\\xefw\\xfbo\\xdf\\xdb-\\xbe\\xbd\\xbe\\xb0'"}, {"func_args": {"nums": "{1, 2, 5, 6}"}, "return_value": "b'f'"}, {"func_args": {"nums": "{1, 2, 5, 6, 8, 10, 11, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 140, 141, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 159, 160, 161, 162, 163, 164, 165, 168, 173, 174, 175, 178}"}, "return_value": "b'f-\\xff\\xff\\xff\\xe7?\\xff\\xff\\xffG\\xff\\xff\\xff\\xfc\\xff\\xff3\\xff\\x99?\\xe1\\x04'"}, {"func_args": {"nums": "{1}"}, "return_value": "b'\\x02'"}, {"func_args": {"nums": "{1, 2, 4, 5, 6, 7, 10, 12, 14, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 30, 32, 34, 35, 36, 37, 38, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 84, 85, 87, 88, 90, 91, 92, 94, 96, 97, 98, 99, 100, 102, 103, 104, 106, 108, 109, 110, 111, 112, 113, 114, 117, 119, 120, 121, 123, 124, 125, 127, 128, 129, 131, 132, 133, 135, 136, 137, 139, 140, 141, 144, 146, 147, 149, 150, 152, 153, 155, 156, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172}"}, "return_value": "b'\\xf6\\xd4\\xeeO}w\\xf7\\xfe\\xfd\\xfb\\xb6]\\xdf\\xf5\\xa7\\xbb\\xbb;m\\xdb\\xfd\\x1f'"}, {"func_args": {"nums": "{1, 2, 3, 6, 7, 8, 10, 11, 12, 13, 17, 18, 19, 20, 21, 22, 24, 25, 27, 29, 30, 31, 32, 34, 37}"}, "return_value": "b'\\xce=~\\xeb%'"}, {"func_args": {"nums": "{1}"}, "return_value": "b'\\x02'"}]}, "numbits_to_nums": {"line": 49, "args": [{"func_args": {"numbits": "b'*'"}, "return_value": "[1, 3, 5]"}, {"func_args": {"numbits": "b'\\x1a:\\x01\\xe0]\\xa9\\xefw\\xfbo\\xdf\\xdb-\\xbe\\xbd\\xbe\\xb0'"}, "return_value": "[1, 3, 4, 9, 11, 12, 13, 16, 29, 30, 31, 32, 34, 35, 36, 38, 40, 43, 45, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 84, 86, 87, 88, 89, 91, 92, 94, 95, 96, 98, 99, 101, 105, 106, 107, 108, 109, 111, 112, 114, 115, 116, 117, 119, 121, 122, 123, 124, 125, 127, 132, 133, 135]"}, {"func_args": {"numbits": "b'\\xce=~\\xeb%'"}, "return_value": "[1, 2, 3, 6, 7, 8, 10, 11, 12, 13, 17, 18, 19, 20, 21, 22, 24, 25, 27, 29, 30, 31, 32, 34, 37]"}, {"func_args": {"numbits": "b'f'"}, "return_value": "[1, 2, 5, 6]"}, {"func_args": {"numbits": "b'f-\\xff\\xff\\xff\\xe7?\\xff\\xff\\xffG\\xff\\xff\\xff\\xfc\\xff\\xff3\\xff\\x99?\\xe1\\x04'"}, "return_value": "[1, 2, 5, 6, 8, 10, 11, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 140, 141, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 159, 160, 161, 162, 163, 164, 165, 168, 173, 174, 175, 178]"}, {"func_args": {"numbits": "b'\\x02'"}, "return_value": "[1]"}, {"func_args": {"numbits": "b'\\xf6\\xd4\\xeeO}w\\xf7\\xfe\\xfd\\xfb\\xb6]\\xdf\\xf5\\xa7\\xbb\\xbb;m\\xdb\\xfd\\x1f'"}, "return_value": "[1, 2, 4, 5, 6, 7, 10, 12, 14, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 30, 32, 34, 35, 36, 37, 38, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 84, 85, 87, 88, 90, 91, 92, 94, 96, 97, 98, 99, 100, 102, 103, 104, 106, 108, 109, 110, 111, 112, 113, 114, 117, 119, 120, 121, 123, 124, 125, 127, 128, 129, 131, 132, 133, 135, 136, 137, 139, 140, 141, 144, 146, 147, 149, 150, 152, 153, 155, 156, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172]"}, {"func_args": {"numbits": "b'\\x02'"}, "return_value": "[1]"}]}, "combinable_files": {"line": 55, "args": [{"func_args": {"data_file": "'/usr/app/src/test_repos/seqseek/.coverage'", "data_paths": "None"}, "return_value": "['/usr/app/src/test_repos/seqseek/.coverage.cae2a1e14906.382.571287']"}], "text": "def combinable_files(data_file, data_paths=None):\n    \"\"\"Make a list of data files to be combined.\n\n    `data_file` is a path to a data file.  `data_paths` is a list of files or\n    directories of files.\n\n    Returns a list of absolute file paths.\n    \"\"\"\n    data_dir, local = os.path.split(os.path.abspath(data_file))\n\n    data_paths = data_paths or [data_dir]\n    files_to_combine = []\n    for p in data_paths:\n        if os.path.isfile(p):\n            files_to_combine.append(os.path.abspath(p))\n        elif os.path.isdir(p):\n            pattern = os.path.join(os.path.abspath(p), f\"{local}.*\")\n            files_to_combine.extend(glob.glob(pattern))\n        else:\n            raise NoDataError(f\"Couldn't combine from non-existent path '{p}'\")\n    return files_to_combine"}, "_line_ranges": {"line": 270, "args": [{"func_args": {"statements": "{1, 3, 5}", "lines": "set()"}, "return_value": "[]"}, {"func_args": {"statements": "{1, 3, 4, 9, 11, 16, 29, 30, 31, 32, 34, 35, 36, 38, 40, 43, 45, 47, 48, 49, 53, 54, 55, 56, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 77, 78, 80, 81, 82, 83, 84, 86, 91, 92, 94, 95, 96, 98, 99, 101, 102, 103, 105, 106, 107, 108, 109, 111, 112, 114, 115, 116, 117, 119, 121, 122, 123, 127, 132, 133, 135}", "lines": "{66, 102, 103}"}, "return_value": "[(66, 66), (102, 103)]"}, {"func_args": {"statements": "{1, 2, 3, 6, 10, 11, 17, 18, 19, 20, 21, 22, 24, 25, 27, 29, 30, 31, 32, 34, 37, 38, 39, 40, 41, 42, 43, 46, 47, 48, 49}", "lines": "{38, 39, 40, 41, 42, 43, 46, 47, 48, 49}"}, "return_value": "[(38, 49)]"}, {"func_args": {"statements": "{1, 2, 3, 4, 5, 7, 8, 10, 12, 18, 19, 20, 21, 23, 24, 25, 28, 31, 33, 35, 36, 37, 38, 40, 42, 43, 45, 46, 47, 49, 50, 51, 54, 55, 57, 58, 59, 61, 62, 64, 65, 66, 67, 68, 69, 71, 73, 74, 75, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 90, 92, 95, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 112}", "lines": "{1, 2, 3, 4, 5, 7, 8, 10, 12, 18, 19, 20, 21, 23, 24, 25, 28, 31, 33, 35, 36, 37, 38, 40, 42, 43, 45, 46, 47, 49, 50, 51, 54, 55, 57, 58, 59, 61, 62, 64, 65, 66, 67, 68, 69, 71, 73, 74, 75, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 90, 92, 95, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 112}"}, "return_value": "[(1, 112)]"}, {"func_args": {"statements": "{1, 2, 5, 6}", "lines": "set()"}, "return_value": "[]"}, {"func_args": {"statements": "{1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 22, 23, 26, 27, 28, 29, 30}", "lines": "{1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 22, 23, 26, 27, 28, 29, 30}"}, "return_value": "[(1, 30)]"}, {"func_args": {"statements": "{1, 2, 5, 6, 8, 10, 11, 13, 16, 86, 155, 159, 160, 161, 162, 163, 164, 165, 168, 173, 174, 175, 178, 56}", "lines": "set()"}, "return_value": "[]"}, {"func_args": {"statements": "set()", "lines": "set()"}, "return_value": "[]"}, {"func_args": {"statements": "{1, 2}", "lines": "{1, 2}"}, "return_value": "[(1, 2)]"}, {"func_args": {"statements": "{1, 3, 5, 7, 10, 12, 13, 14, 15, 20, 21, 24, 25, 27, 28, 29, 30, 32, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 143, 144, 145, 147, 148, 149, 150, 152, 153, 154, 155, 157, 158, 159, 161, 162, 163, 165, 166, 167, 169, 170, 171, 173, 174, 175, 177, 178, 179, 181, 182, 183, 185, 186, 187, 189, 190, 191, 193, 194, 195, 197, 198, 199, 201, 202, 203, 205, 206, 207, 208, 210, 211, 212, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 227, 228, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 242, 243, 245, 246, 248, 258, 260, 261, 262, 263}", "lines": "{1, 3, 5, 7, 10, 12, 13, 14, 15, 20, 21, 24, 25, 27, 28, 29, 30, 32, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 143, 144, 145, 147, 148, 149, 150, 152, 153, 154, 155, 157, 158, 159, 161, 162, 163, 165, 166, 167, 169, 170, 171, 173, 174, 175, 177, 178, 179, 181, 182, 183, 185, 186, 187, 189, 190, 191, 193, 194, 195, 197, 198, 199, 201, 202, 203, 205, 206, 207, 208, 210, 211, 212, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 227, 228, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 242, 243, 245, 246, 248, 258, 260, 261, 262, 263}"}, "return_value": "[(1, 263)]"}, {"func_args": {"statements": "{1, 2, 4, 6, 8, 11, 13, 14, 15, 16, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 70, 71, 72, 73, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 120, 121, 122, 123, 125, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 163, 164, 166, 176, 178, 179, 180, 181}", "lines": "{1, 2, 4, 6, 8, 11, 13, 14, 15, 16, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 70, 71, 72, 73, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 120, 121, 122, 123, 125, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 163, 164, 166, 176, 178, 179, 180, 181}"}, "return_value": "[(1, 181)]"}, {"func_args": {"statements": "{1, 2, 3, 4, 5, 6, 9, 14, 15, 16, 17, 19, 20, 22, 23}", "lines": "{1, 2, 3, 4, 5, 6, 9, 14, 15, 16, 17, 19, 20, 22, 23}"}, "return_value": "[(1, 23)]"}, {"func_args": {"statements": "{1, 2, 4, 5, 6, 7, 10, 12, 14, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 30, 32, 34, 35, 36, 37, 38, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 84, 85, 87, 88, 90, 91, 92, 94, 96, 97, 98, 99, 100, 102, 103, 104, 106, 108, 109, 110, 111, 112, 113, 114, 117, 119, 120, 121, 123, 124, 125, 127, 128, 129, 131, 132, 133, 135, 136, 137, 139, 140, 141, 144, 146, 147, 149, 150, 152, 153, 155, 156, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172}", "lines": "set()"}, "return_value": "[]"}, {"func_args": {"statements": "set()", "lines": "set()"}, "return_value": "[]"}], "text": "def _line_ranges(statements, lines):\n    \"\"\"Produce a list of ranges for `format_lines`.\"\"\"\n    statements = sorted(statements)\n    lines = sorted(lines)\n\n    pairs = []\n    start = None\n    lidx = 0\n    for stmt in statements:\n        if lidx >= len(lines):\n            break\n        if stmt == lines[lidx]:\n            lidx += 1\n            if not start:\n                start = stmt\n            end = stmt\n        elif start:\n            pairs.append((start, end))\n            start = None\n    if start:\n        pairs.append((start, end))\n    return pairs"}, "format_lines": {"line": 294, "args": [{"func_args": {"statements": "{1, 3, 5}", "lines": "set()", "arcs": "None"}, "return_value": "''"}, {"func_args": {"statements": "{1, 3, 4, 9, 11, 16, 29, 30, 31, 32, 34, 35, 36, 38, 40, 43, 45, 47, 48, 49, 53, 54, 55, 56, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 77, 78, 80, 81, 82, 83, 84, 86, 91, 92, 94, 95, 96, 98, 99, 101, 102, 103, 105, 106, 107, 108, 109, 111, 112, 114, 115, 116, 117, 119, 121, 122, 123, 127, 132, 133, 135}", "lines": "{66, 102, 103}", "arcs": "None"}, "return_value": "'66, 102-103'"}, {"func_args": {"statements": "{1, 2, 3, 6, 10, 11, 17, 18, 19, 20, 21, 22, 24, 25, 27, 29, 30, 31, 32, 34, 37, 38, 39, 40, 41, 42, 43, 46, 47, 48, 49}", "lines": "{38, 39, 40, 41, 42, 43, 46, 47, 48, 49}", "arcs": "None"}, "return_value": "'38-49'"}, {"func_args": {"statements": "{1, 2, 3, 4, 5, 7, 8, 10, 12, 18, 19, 20, 21, 23, 24, 25, 28, 31, 33, 35, 36, 37, 38, 40, 42, 43, 45, 46, 47, 49, 50, 51, 54, 55, 57, 58, 59, 61, 62, 64, 65, 66, 67, 68, 69, 71, 73, 74, 75, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 90, 92, 95, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 112}", "lines": "{1, 2, 3, 4, 5, 7, 8, 10, 12, 18, 19, 20, 21, 23, 24, 25, 28, 31, 33, 35, 36, 37, 38, 40, 42, 43, 45, 46, 47, 49, 50, 51, 54, 55, 57, 58, 59, 61, 62, 64, 65, 66, 67, 68, 69, 71, 73, 74, 75, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 90, 92, 95, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 112}", "arcs": "None"}, "return_value": "'1-112'"}, {"func_args": {"statements": "{1, 2, 5, 6}", "lines": "set()", "arcs": "None"}, "return_value": "''"}, {"func_args": {"statements": "{1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 22, 23, 26, 27, 28, 29, 30}", "lines": "{1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 22, 23, 26, 27, 28, 29, 30}", "arcs": "None"}, "return_value": "'1-30'"}, {"func_args": {"statements": "{1, 2, 5, 6, 8, 10, 11, 13, 16, 86, 155, 159, 160, 161, 162, 163, 164, 165, 168, 173, 174, 175, 178, 56}", "lines": "set()", "arcs": "None"}, "return_value": "''"}, {"func_args": {"statements": "set()", "lines": "set()", "arcs": "None"}, "return_value": "''"}, {"func_args": {"statements": "{1, 2}", "lines": "{1, 2}", "arcs": "None"}, "return_value": "'1-2'"}, {"func_args": {"statements": "{1, 3, 5, 7, 10, 12, 13, 14, 15, 20, 21, 24, 25, 27, 28, 29, 30, 32, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 143, 144, 145, 147, 148, 149, 150, 152, 153, 154, 155, 157, 158, 159, 161, 162, 163, 165, 166, 167, 169, 170, 171, 173, 174, 175, 177, 178, 179, 181, 182, 183, 185, 186, 187, 189, 190, 191, 193, 194, 195, 197, 198, 199, 201, 202, 203, 205, 206, 207, 208, 210, 211, 212, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 227, 228, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 242, 243, 245, 246, 248, 258, 260, 261, 262, 263}", "lines": "{1, 3, 5, 7, 10, 12, 13, 14, 15, 20, 21, 24, 25, 27, 28, 29, 30, 32, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 142, 143, 144, 145, 147, 148, 149, 150, 152, 153, 154, 155, 157, 158, 159, 161, 162, 163, 165, 166, 167, 169, 170, 171, 173, 174, 175, 177, 178, 179, 181, 182, 183, 185, 186, 187, 189, 190, 191, 193, 194, 195, 197, 198, 199, 201, 202, 203, 205, 206, 207, 208, 210, 211, 212, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 227, 228, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 242, 243, 245, 246, 248, 258, 260, 261, 262, 263}", "arcs": "None"}, "return_value": "'1-263'"}, {"func_args": {"statements": "{1, 2, 4, 6, 8, 11, 13, 14, 15, 16, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 70, 71, 72, 73, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 120, 121, 122, 123, 125, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 163, 164, 166, 176, 178, 179, 180, 181}", "lines": "{1, 2, 4, 6, 8, 11, 13, 14, 15, 16, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 70, 71, 72, 73, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 120, 121, 122, 123, 125, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 163, 164, 166, 176, 178, 179, 180, 181}", "arcs": "None"}, "return_value": "'1-181'"}, {"func_args": {"statements": "{1, 2, 3, 4, 5, 6, 9, 14, 15, 16, 17, 19, 20, 22, 23}", "lines": "{1, 2, 3, 4, 5, 6, 9, 14, 15, 16, 17, 19, 20, 22, 23}", "arcs": "None"}, "return_value": "'1-23'"}, {"func_args": {"statements": "{1, 2, 4, 5, 6, 7, 10, 12, 14, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 30, 32, 34, 35, 36, 37, 38, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 84, 85, 87, 88, 90, 91, 92, 94, 96, 97, 98, 99, 100, 102, 103, 104, 106, 108, 109, 110, 111, 112, 113, 114, 117, 119, 120, 121, 123, 124, 125, 127, 128, 129, 131, 132, 133, 135, 136, 137, 139, 140, 141, 144, 146, 147, 149, 150, 152, 153, 155, 156, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172}", "lines": "set()", "arcs": "None"}, "return_value": "''"}, {"func_args": {"statements": "set()", "lines": "set()", "arcs": "None"}, "return_value": "''"}], "text": "def format_lines(statements, lines, arcs=None):\n    \"\"\"Nicely format a list of line numbers.\n\n    Format a list of line numbers for printing by coalescing groups of lines as\n    long as the lines represent consecutive statements.  This will coalesce\n    even if there are gaps between statements.\n\n    For example, if `statements` is [1,2,3,4,5,10,11,12,13,14] and\n    `lines` is [1,2,5,10,11,13,14] then the result will be \"1-2, 5-11, 13-14\".\n\n    Both `lines` and `statements` can be any iterable. All of the elements of\n    `lines` must be in `statements`, and all of the values must be positive\n    integers.\n\n    If `arcs` is provided, they are (start,[end,end,end]) pairs that will be\n    included in the output as long as start isn't in `lines`.\n\n    \"\"\"\n    line_items = [(pair[0], nice_pair(pair)) for pair in _line_ranges(statements, lines)]\n    if arcs:\n        line_exits = sorted(arcs)\n        for line, exits in line_exits:\n            for ex in sorted(exits):\n                if line not in lines and ex not in lines:\n                    dest = (ex if ex > 0 else \"exit\")\n                    line_items.append((line, f\"{line}->{dest}\"))\n\n    ret = ', '.join(t[-1] for t in sorted(line_items))\n    return ret"}, "source_encoding": {"line": 184, "args": [{"func_args": {"source": "b'from __future__ import absolute_import\\n\\nfrom .chromosome import Chromosome\\n\\nfrom .lib import BUILD37, BUILD38\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'import os\\n\\nfrom .exceptions import TooManyLoops, MissingDataError\\nfrom .lib import (BUILD37, BUILD38, get_data_directory, sorted_nicely,\\n                  BUILD37_ACCESSIONS, BUILD38_ACCESSIONS, ACCESSION_LENGTHS,\\n                  RCRS_ACCESSION, MITOCHONDRIA_NAMES)\\n\\n\\nclass Chromosome(object):\\n\\n    ASSEMBLY_CHROMOSOMES = {\\n        BUILD37: BUILD37_ACCESSIONS,\\n        BUILD38: BUILD38_ACCESSIONS\\n    }\\n\\n    def __init__(self, chromosome_name, assembly=BUILD37, loop=False, RCRS_N_remove=True):\\n        \"\"\"\\n        Usage:\\n\\n                Chromosome(\\'1\\').sequence(0, 100)\\n                returns the first 100 nucleotides of chromosome 1\\n\\n        The default assembly is Homo_sapiens.GRCh37\\n        You may also use Build 38:\\n\\n                from seqseek import BUILD38\\n                Chromosome(\\'1\\', BUILD38).sequence(0, 100)\\n        \"\"\"\\n        self.name = str(chromosome_name)\\n        self.assembly = assembly\\n        self.loop = loop\\n        self.RCRS_N_remove = RCRS_N_remove\\n\\n        self.validate_assembly()\\n        self.validate_name()\\n        self.validate_loop()\\n\\n        if self.name in ACCESSION_LENGTHS:\\n            # allow loading by accession\\n            self.accession = self.name\\n        else:\\n            # allow loading by name\\n            self.accession = self.ASSEMBLY_CHROMOSOMES[assembly][self.name]\\n\\n        self.length = ACCESSION_LENGTHS[self.accession]\\n\\n    def validate_assembly(self):\\n        if self.assembly not in (BUILD37, BUILD38):\\n            raise ValueError(\\n                \\'Sorry, the only supported assemblies are {} and {}\\'.format(\\n                    BUILD37, BUILD38))\\n\\n    def validate_name(self):\\n        if self.name not in ACCESSION_LENGTHS:\\n            if self.name not in self.ASSEMBLY_CHROMOSOMES[self.assembly]:\\n                raise ValueError(\\n                    \"{name} is not a valid chromosome name or accession\".format(\\n                        name=self.name))\\n\\n    def validate_loop(self):\\n        if self.loop and self.name not in MITOCHONDRIA_NAMES:\\n            raise ValueError(\\'Loop may only be specified for the mitochondria.\\')\\n\\n    def validate_coordinates(self, start, end):\\n        if end < 0:\\n            raise ValueError(\\'end must be a positive number\\')\\n        elif (start < 0 and not self.loop) or end < 0:\\n            raise ValueError(\"Start and end must be positive integers for this chromosome\")\\n        if end < start:\\n            raise ValueError(\"Start position cannot be greater than end position\")\\n        if start > self.length or (end > self.length and not self.loop):\\n            raise ValueError(\\'Coordinates out of bounds. Chr {} has {} bases.\\'.format(\\n                self.name, self.length))\\n        if self.loop and end - start > self.length:\\n            raise TooManyLoops()\\n\\n    @classmethod\\n    def sorted_chromosome_length_tuples(cls, assembly):\\n        # TODO: simplify\\n        name_to_accession = cls.ASSEMBLY_CHROMOSOMES[assembly]\\n        chromosome_length_tuples = []\\n        for name, accession in name_to_accession.items():\\n            if accession in ACCESSION_LENGTHS:\\n                chromosome_length_tuples.append((name, ACCESSION_LENGTHS[accession]))\\n\\n        return sorted(chromosome_length_tuples,\\n                      key=lambda pair:\\n                          sorted_nicely(\\n                              ACCESSION_LENGTHS.keys()).index(name_to_accession[pair[0]]))\\n\\n    def filename(self):\\n        return \\'{}.fa\\'.format(self.accession)\\n\\n    def path(self):\\n        data_dir = get_data_directory()\\n        return os.path.join(data_dir, self.filename())\\n\\n    def exists(self):\\n        return os.path.exists(self.path())\\n\\n    def header(self):\\n        with open(self.path()) as f:\\n            return f.readline()\\n\\n    def read(self, start, length):\\n        with open(self.path()) as fasta:\\n            header = fasta.readline()\\n            fasta.seek(start + len(header))\\n            return fasta.read(length)\\n\\n    def sequence(self, start, end):\\n        self.validate_coordinates(start, end)\\n\\n        if self.loop and end > self.length:\\n            reads = [(start, self.length - start), (0, end - self.length)]\\n        elif self.loop and start < 0:\\n            reads = [(self.length + start, abs(start)), (0, end)]\\n        else:\\n            reads = [(start, end - start)]\\n\\n        if not self.exists():\\n            build = \\'37\\' if self.assembly == BUILD37 else \\'38\\'\\n            raise MissingDataError(\\n                \\'{} does not exist. Please download on the command line with: \\'\\n                \\'download_build_{}\\'.format(self.path(), build))\\n\\n        sequence = \\'\\'.join([self.read(*read) for read in reads])\\n\\n        # The rCRS mito contig contains an \\'N\\' base at position 3107 to preserve legacy\\n        # nucleotide numbering. We remove it because it is not part of the observed\\n        # sequence. See http://www.mitomap.org/MITOMAP/HumanMitoSeq\\n        if self.accession == RCRS_ACCESSION and self.RCRS_N_remove is True:\\n            sequence = sequence.replace(\\'N\\', \\'\\')\\n\\n        return sequence\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b\"import argparse\\nfrom .chromosome import BUILD37_ACCESSIONS, Chromosome\\nfrom .lib import BUILD37, BUILD38\\n\\n\\nPROGRAM_TO_ASSEMBLY = {\\n    'seqseek_37': BUILD37,\\n    'seqseek_38': BUILD38\\n}\\nRELATIVE_SIGNS = ('-', '+')\\nSIGN_FACTOR = {\\n    '-': -1,\\n    '+': 1\\n}\\n\\n\\ndef determine_start_end(arg_start, arg_end):\\n    relative_start, relative_end = None, None\\n    if arg_start[0] in RELATIVE_SIGNS:\\n        relative_start, arg_start = arg_start[0], arg_start[1:]\\n    if arg_end[0] in RELATIVE_SIGNS:\\n        relative_end, arg_end = arg_end[0], arg_end[1:]\\n\\n    if relative_start is not None and relative_end is not None:\\n        raise ValueError('Start and end cannot be both relative.')\\n\\n    start, end = int(arg_start), int(arg_end)\\n\\n    if relative_start is not None:\\n        start = end + SIGN_FACTOR[relative_start] * start\\n    elif relative_end is not None:\\n        end = start + SIGN_FACTOR[relative_end] * end\\n\\n    return start, end\\n\\n\\ndef cmd_line():\\n    parser = argparse.ArgumentParser(description='Print sequence')\\n    parser.add_argument('chromosome', type=str, help='Chromosome name to seek')\\n    parser.add_argument('start', type=str, help='Start position (can be relative, e.g. -50)')\\n    parser.add_argument('end', type=str, help='End position (can be relative, e.g. +50)')\\n    args = parser.parse_args()\\n    assembly = PROGRAM_TO_ASSEMBLY[parser.prog]\\n\\n    # Do it\\n    kwargs = {'loop': True} if args.chromosome in ('MT', BUILD37_ACCESSIONS['MT']) else {}\\n    c = Chromosome(args.chromosome, assembly=assembly, **kwargs)\\n    start, end = determine_start_end(args.start, args.end)\\n    print(c.sequence(start, end))\\n\""}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'from __future__ import print_function\\nfrom __future__ import absolute_import\\nimport os\\nimport argparse\\nimport requests\\n\\nfrom .lib import get_data_directory, URI, BUILD37, BUILD38\\nfrom .chromosome import Chromosome\\n\\nfrom .tests.build_specific_tests import run_build_test_suite\\n\\nPROGRAM_TO_ASSEMBLY = {\\n    \\'download_build_37\\': BUILD37,\\n    \\'download_build_38\\': BUILD38\\n}\\n\\n\\ndef cmd_line():\\n    parser = argparse.ArgumentParser(description=\\'\\')\\n    parser.add_argument(\\'-v\\', dest=\\'verbose\\', action=\\'store_true\\')\\n    args = parser.parse_args()\\n\\n    assembly = PROGRAM_TO_ASSEMBLY[parser.prog]\\n    verbosity = args.verbose\\n    data_dir = get_data_directory()\\n\\n    # Do it\\n    Downloader(assembly, data_dir, verbosity).download_chromosomes()\\n\\n\\nclass Downloader(object):\\n\\n    SUPPORTED_ASSEMBLIES = (BUILD37, BUILD38)\\n\\n    def __init__(self, assembly, data_dir=None, verbose=True):\\n        self.assembly = assembly\\n        self.data_dir = data_dir or get_data_directory()\\n        self.verbose = verbose\\n\\n        self.validate_assembly()\\n\\n        self.log(\\'Data directory: {}\\'.format(self.data_dir))\\n        self.log(\\'Host: {}\\'.format(URI))\\n\\n    def log(self, msg, force=False):\\n        if self.verbose or force:\\n            print(msg)  # TODO: add a log handler\\n\\n    def validate_assembly(self):\\n        if self.assembly not in self.SUPPORTED_ASSEMBLIES:\\n            raise ValueError(\\'%s is not one of the supported assemblies %s\\'.format(\\n                self.assembly, self.SUPPORTED_ASSEMBLIES))\\n\\n    def get_missing_chromosomes(self):\\n        missing_chromosomes = []\\n\\n        for name, length in Chromosome.sorted_chromosome_length_tuples(self.assembly):\\n            chromosome = Chromosome(name, self.assembly)\\n            filepath = chromosome.path()\\n\\n            if not chromosome.exists():\\n                missing_chromosomes.append(name)\\n            else:\\n                expected_size = length + len(chromosome.header()) + 1\\n                size = os.path.getsize(filepath)\\n                if size != expected_size:\\n                    self.log(\\'Removing mismatched chromosome %s\\' % name)\\n                    missing_chromosomes.append(name)\\n                    os.remove(filepath)\\n\\n        return missing_chromosomes\\n\\n    def download_chromosomes(self):\\n        to_download = self.get_missing_chromosomes()\\n        self.log(\"Downloading {} chromosomes\".format(len(to_download)))\\n\\n        for name in to_download:\\n            self.download_chromosome(name)\\n        run_build_test_suite(self.assembly)\\n\\n    def download_chromosome(self, name):\\n        chromosome = Chromosome(name, self.assembly)\\n        path = chromosome.path()\\n        directory = os.path.dirname(chromosome.path())\\n\\n        if not os.path.isdir(directory):\\n            os.makedirs(directory)\\n            self.log(\\'Created directory {}\\'.format(directory), True)\\n\\n        uri = URI + chromosome.filename()\\n\\n        self.log(\\n            \\'Downloading from {} to {}\\'.format(uri, path), True)\\n\\n        r = requests.get(uri, stream=True)\\n\\n        # TODO can we do this in fewer than 3 passes?\\n\\n        with open(path, \\'wb\\') as fd:\\n            for chunk in r.iter_content(chunk_size=1024):\\n                fd.write(chunk)\\n\\n        with open(path, \\'r\\') as f:\\n            header = f.readline()\\n            content = f.read().replace(\\'\\\\n\\', \\'\\')\\n\\n        with open(path, \\'w\\') as f:\\n            f.write(header)\\n            f.write(content)\\n            f.write(\\'\\\\n\\')\\n\\n        self.log(\\'...Complete\\', True)\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'class TooManyLoops(Exception):\\n    pass\\n\\n\\nclass MissingDataError(Exception):\\n    pass\\n\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'from __future__ import print_function\\nimport argparse\\n\\n\\ndef run(path):\\n    print(\"Formatting %s\" % path)\\n    with open(path) as fasta:\\n        header = \\'\\'\\n        first_line = fasta.readline()\\n        if not first_line.startswith(\\'>\\'):\\n            header = \\'> \\' + path.split(\\'/\\')[-1].split(\\'.\\')[0] + \\'\\\\n\\'\\n            first_line.replace(\\'\\\\n\\', \\'\\')\\n        clean = fasta.read().replace(\\'\\\\n\\', \\'\\')\\n\\n    with open(path + \\'.seqseek\\', \\'w\\') as formatted:\\n        formatted.write(header)\\n        formatted.write(first_line)\\n        formatted.write(clean)\\n\\n    with open(path + \\'.seqseek\\') as done:\\n        done.readline()\\n        sequence = done.read()\\n        print(\"Length is %d\" % len(sequence))\\n\\n\\nif __name__ == \\'__main__\\':\\n    parser = argparse.ArgumentParser()\\n    parser.add_argument(\"fasta_path\")\\n    args = parser.parse_args()\\n    run(args.fasta_path)\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'import re\\nimport os\\n\\n\\nBUILD37 = \\'homo_sapiens_GRCh37\\'\\nBUILD38 = \\'homo_sapiens_GRCh38\\'\\n\\nRCRS_ACCESSION = \\'NC_012920.1\\'\\n\\nDEFAULT_DATA_DIR = \\'~/.seqseek\\'\\nDATA_DIR_VARIABLE = \\'SEQSEEK_DATA_DIR\\'\\n\\nURI = \\'https://s3-us-west-2.amazonaws.com/seqseek/\\'\\n\\n\\nBUILD37_ACCESSIONS = {\\n    \\'1\\': \\'NC_000001.10\\',\\n    \\'2\\': \\'NC_000002.11\\',\\n    \\'3\\': \\'NC_000003.11\\',\\n    \\'4\\': \\'NC_000004.11\\',\\n    \\'5\\': \\'NC_000005.9\\',\\n    \\'6\\': \\'NC_000006.11\\',\\n    \\'7\\': \\'NC_000007.13\\',\\n    \\'8\\': \\'NC_000008.10\\',\\n    \\'9\\': \\'NC_000009.11\\',\\n    \\'10\\': \\'NC_000010.10\\',\\n    \\'11\\': \\'NC_000011.9\\',\\n    \\'12\\': \\'NC_000012.11\\',\\n    \\'13\\': \\'NC_000013.10\\',\\n    \\'14\\': \\'NC_000014.8\\',\\n    \\'15\\': \\'NC_000015.9\\',\\n    \\'16\\': \\'NC_000016.9\\',\\n    \\'17\\': \\'NC_000017.10\\',\\n    \\'18\\': \\'NC_000018.9\\',\\n    \\'19\\': \\'NC_000019.9\\',\\n    \\'20\\': \\'NC_000020.10\\',\\n    \\'21\\': \\'NC_000021.8\\',\\n    \\'22\\': \\'NC_000022.10\\',\\n    \\'X\\': \\'NC_000023.10\\',\\n    \\'Y\\': \\'NC_000024.9\\',\\n    \\'MT\\': \\'NC_012920.1\\',\\n    \\'RSRS\\': \\'NC_001807.4\\',\\n\\n    # UCSC names for haplotype scaffolds\\n    \\'chr6_apd_hap1\\': \\'NT_167244.1\\',\\n    \\'chr6_cox_hap2\\': \\'NT_113891.2\\',\\n    \\'chr6_dbb_hap3\\': \\'NT_167245.1\\',\\n    \\'chr6_mann_hap4\\': \\'NT_167246.1\\',\\n    \\'chr6_mcf_hap5\\': \\'NT_167247.1\\',\\n    \\'chr6_qbl_hap6\\': \\'NT_167248.1\\',\\n    \\'chr6_ssto_hap7\\': \\'NT_167249.1\\',\\n    \\'chr4_ctg9_hap1\\': \\'NT_167250.1\\',\\n    \\'chr17_ctg5_hap1\\': \\'NT_167251.1\\'\\n}\\n\\nBUILD38_ACCESSIONS = {\\n    \\'1\\': \\'NC_000001.11\\',\\n    \\'2\\': \\'NC_000002.12\\',\\n    \\'3\\': \\'NC_000003.12\\',\\n    \\'4\\': \\'NC_000004.12\\',\\n    \\'5\\': \\'NC_000005.10\\',\\n    \\'6\\': \\'NC_000006.12\\',\\n    \\'7\\': \\'NC_000007.14\\',\\n    \\'8\\': \\'NC_000008.11\\',\\n    \\'9\\': \\'NC_000009.12\\',\\n    \\'10\\': \\'NC_000010.11\\',\\n    \\'11\\': \\'NC_000011.10\\',\\n    \\'12\\': \\'NC_000012.12\\',\\n    \\'13\\': \\'NC_000013.11\\',\\n    \\'14\\': \\'NC_000014.9\\',\\n    \\'15\\': \\'NC_000015.10\\',\\n    \\'16\\': \\'NC_000016.10\\',\\n    \\'17\\': \\'NC_000017.11\\',\\n    \\'18\\': \\'NC_000018.10\\',\\n    \\'19\\': \\'NC_000019.10\\',\\n    \\'20\\': \\'NC_000020.11\\',\\n    \\'21\\': \\'NC_000021.9\\',\\n    \\'22\\': \\'NC_000022.11\\',\\n    \\'X\\': \\'NC_000023.11\\',\\n    \\'Y\\': \\'NC_000024.10\\',\\n    \\'MT\\': \\'NC_012920.1\\',\\n    \\'RSRS\\': \\'NC_001807.4\\',\\n}\\n\\n# chromosome names and lengths for build 37\\nACCESSION_LENGTHS = {\\n    # GRCh38\\n    \\'NC_000001.11\\':  248956422,\\n    \\'NC_000002.12\\':  242193529,\\n    \\'NC_000003.12\\':  198295559,\\n    \\'NC_000004.12\\':  190214555,\\n    \\'NC_000005.10\\':  181538259,\\n    \\'NC_000006.12\\':  170805979,\\n    \\'NC_000007.14\\':  159345973,\\n    \\'NC_000008.11\\':  145138636,\\n    \\'NC_000009.12\\':  138394717,\\n    \\'NC_000010.11\\':  133797422,\\n    \\'NC_000011.10\\':  135086622,\\n    \\'NC_000012.12\\':  133275309,\\n    \\'NC_000013.11\\':  114364328,\\n    \\'NC_000014.9\\':   107043718,\\n    \\'NC_000015.10\\':  101991189,\\n    \\'NC_000016.10\\':  90338345,\\n    \\'NC_000017.11\\':  83257441,\\n    \\'NC_000018.10\\':  80373285,\\n    \\'NC_000019.10\\':  58617616,\\n    \\'NC_000020.11\\':  64444167,\\n    \\'NC_000021.9\\':   46709983,\\n    \\'NC_000022.11\\':  50818468,\\n    \\'NC_000023.11\\':  156040895,\\n    \\'NC_000024.10\\':  57227415,\\n\\n    # GRCh37\\n    \\'NC_000001.10\\':  249250621,\\n    \\'NC_000002.11\\':  243199373,\\n    \\'NC_000003.11\\':  198022430,\\n    \\'NC_000004.11\\':  191154276,\\n    \\'NC_000005.9\\':   180915260,\\n    \\'NC_000006.11\\':  171115067,\\n    \\'NC_000007.13\\':  159138663,\\n    \\'NC_000008.10\\':  146364022,\\n    \\'NC_000009.11\\':  141213431,\\n    \\'NC_000010.10\\':  135534747,\\n    \\'NC_000011.9\\':   135006516,\\n    \\'NC_000012.11\\':  133851895,\\n    \\'NC_000013.10\\':  115169878,\\n    \\'NC_000014.8\\':   107349540,\\n    \\'NC_000015.9\\':   102531392,\\n    \\'NC_000016.9\\':   90354753,\\n    \\'NC_000017.10\\':  81195210,\\n    \\'NC_000018.9\\':   78077248,\\n    \\'NC_000019.9\\':   59128983,\\n    \\'NC_000020.10\\':  63025520,\\n    \\'NC_000021.8\\':   48129895,\\n    \\'NC_000022.10\\':  51304566,\\n    \\'NC_000023.10\\':  155270560,\\n    \\'NC_000024.9\\':   59373566,\\n\\n    # Mito is shared between 37 & 38\\n    \\'NC_012920.1\\':   16569,  # rCRS\\n    \\'NC_001807.4\\':   16571,  # RSRS\\n\\n    # Haplotype scaffolds\\n    \\'NT_113891.2\\': 4795371,\\n    \\'NT_167244.1\\': 4622290,\\n    \\'NT_167245.1\\': 4610396,\\n    \\'NT_167246.1\\': 4683263,\\n    \\'NT_167247.1\\': 4833398,\\n    \\'NT_167248.1\\': 4611984,\\n    \\'NT_167249.1\\': 4928567,\\n    \\'NT_167250.1\\': 590426,\\n    \\'NT_167251.1\\': 1680828,\\n}\\n\\nMITOCHONDRIA_NAMES = {\\'MT\\', \\'RSRS\\', BUILD37_ACCESSIONS[\\'MT\\'], BUILD37_ACCESSIONS[\\'RSRS\\'],\\n                      BUILD38_ACCESSIONS[\\'MT\\'], BUILD38_ACCESSIONS[\\'RSRS\\']}\\n\\n\\ndef get_data_directory():\\n    default = os.path.expanduser(DEFAULT_DATA_DIR)\\n    storage_dir = os.environ.get(DATA_DIR_VARIABLE, default)\\n    os.environ[DATA_DIR_VARIABLE] = storage_dir\\n    if not os.path.exists(storage_dir):\\n        os.makedirs(storage_dir)\\n    return storage_dir\\n\\n\\ndef sorted_nicely(l):\\n    \"\"\"\\n    Sort the given iterable in the way that humans expect.\\n    http://blog.codinghorror.com/sorting-for-humans-natural-sort-order/\\n    \"\"\"\\n    convert = lambda text: int(text) if text.isdigit() else text\\n    alphanum_key = lambda key: [ convert(c) for c in re.split(\\'([0-9]+)\\', key) ]\\n    return sorted(l, key = alphanum_key)\\n\\n\\n\"\"\"\\nThe nine haplotype scaffolds are:\\n    name                    accession       UCSC chr name\\n    HSCHR6_MHC_APD_CTG1     GL000250.1      chr6_apd_hap1\\n    HSCHR6_MHC_COX_CTG1     GL000251.1      chr6_cox_hap2\\n    HSCHR6_MHC_DBB_CTG1     GL000252.1      chr6_dbb_hap3\\n    HSCHR6_MHC_MANN_CTG1    GL000253.1      chr6_mann_hap4\\n    HSCHR6_MHC_MCF_CTG1     GL000254.1      chr6_mcf_hap5\\n    HSCHR6_MHC_QBL_CTG1     GL000255.1      chr6_qbl_hap6\\n    HSCHR6_MHC_SSTO_CTG1    GL000256.1      chr6_ssto_hap7\\n    HSCHR4_1_CTG9           GL000257.1      chr4_ctg9_hap1\\n    HSCHR17_1_CTG5          GL000258.1      chr17_ctg5_hap1\\n\"\"\"\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b''"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'from __future__ import absolute_import\\nfrom .build_specific_tests import run_build_test_suite, test_build_38, test_build_37\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'import os\\n\\nfrom seqseek.chromosome import Chromosome\\n\\nfrom seqseek.lib import get_data_directory, BUILD37_ACCESSIONS, ACCESSION_LENGTHS\\n\\nfrom unittest import TestCase\\n\\n\\nclass TestBuild37(TestCase):\\n\\n    def test_file_names(self):\\n        for accession in BUILD37_ACCESSIONS.values():\\n            fasta = os.path.join(get_data_directory(), str(accession) + \".fa\")\\n            self.assertTrue(os.path.isfile(fasta), fasta)\\n\\n    # all test sequences were extracted from https://genome.ucsc.edu/ using the\\n    # chromosome browser tool\\n\\n    def test_chr_start_sequences(self):\\n        exclude = (\\'MT\\', \\'17\\' , \\'chr6_cox_hap2\\', \\'chr6_apd_hap1\\', \\'chr6_ssto_hap7\\',\\n                   \\'chr6_mcf_hap5\\', \\'chr6_qbl_hap6\\', \\'chr6_mann_hap4\\', \\'chr6_dbb_hap3\\',\\n                   \\'chr17_ctg5_hap1\\', \\'chr4_ctg9_hap1\\', \\'RSRS\\')\\n        test_str = \"N\" * 20\\n        for name in BUILD37_ACCESSIONS.keys():\\n            # these chromosomes do not have telomeres\\n            if name in exclude:\\n                continue\\n            seq = Chromosome(name).sequence(0, 20)\\n            self.assertEqual(seq, test_str, name)\\n\\n    def test_chr1_sequence(self):\\n        expected_seq = \"AATCTAAAAAACTGTCAGAT\"\\n        seq = Chromosome(1).sequence(243400000, 243400020)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chr2_sequence(self):\\n        expected_seq = \"tgtccacgcgcggatgtcgt\"\\n        seq = Chromosome(2).sequence(237513040, 237513060)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chr3_sequence(self):\\n        expected_seq = \"ctctttcgcccaggctggag\"\\n        seq = Chromosome(3).sequence(190352536, 190352556)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chr4_sequence(self):\\n        expected_seq = \"ttggagccaaggtctcactc\"\\n        seq = Chromosome(4).sequence(184622015, 184622035)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chr5_sequence(self):\\n        expected_seq = \"CTTTACTCCACTCATATTCT\"\\n        seq = Chromosome(5).sequence(158879589, 158879609)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr6_sequence(self):\\n        expected_seq = \"AGGTGGTAGCCCAGTGGTGC\"\\n        seq = Chromosome(6).sequence(158882594, 158882614)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr7_sequence(self):\\n        expected_seq = \"CTTGCTCTCATCCTCCGGGT\"\\n        seq = Chromosome(7).sequence(158896447, 158896467)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr8_sequence(self):\\n        expected_seq = \"CTGTCTCCACTGCAGGGCTC\"\\n        seq = Chromosome(8).sequence(139508913, 139508933)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr9_sequence(self):\\n        expected_seq = \"GAGGAGAACATTTGCCTGCA\"\\n        seq = Chromosome(9).sequence(140705912, 140705932)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr10_sequence(self):\\n        expected_seq = \"TCTGCAGGGGGCGGAGGAAA\"\\n        seq = Chromosome(10).sequence(121086020, 121086040)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr11_sequence(self):\\n        expected_seq = \"CTGAGGGTGGCGCTCTCCCC\"\\n        seq = Chromosome(11).sequence(132812820, 132812840)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr12_sequence(self):\\n        expected_seq = \"CCTCATGCCCAGTTCTACGT\"\\n        seq = Chromosome(12).sequence(132824462, 132824482)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr13_sequence(self):\\n        expected_seq = \"GAAAAGAATTCAAAGAACAC\"\\n        seq = Chromosome(13).sequence(113086756, 113086776)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr14_sequence(self):\\n        expected_seq = \"GCAACGGGGTGGTCATCCAC\"\\n        seq = Chromosome(14).sequence(105204712, 105204732)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr15_sequence(self):\\n        expected_seq = \"ttcaatcactgatacccttt\"\\n        seq = Chromosome(15).sequence(99921491, 99921511)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chr16_sequence(self):\\n        expected_seq = \"CTTTCAGCACAGGGCTGTGA\"\\n        seq = Chromosome(16).sequence(89862313, 89862333)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr17_sequence(self):\\n        expected_seq = \"TGGAGCTGGAGCCACAGGTC\"\\n        seq = Chromosome(17).sequence(80014178, 80014198)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr18_sequence(self):\\n        expected_seq = \"CGAACACTTCGTTGTCCTCT\"\\n        seq = Chromosome(18).sequence(74778253, 74778273)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr19_sequence(self):\\n        expected_seq = \"GGCTGGTTAAACTCGGGGTC\"\\n        seq = Chromosome(19).sequence(55798374, 55798394)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr20_sequence(self):\\n        expected_seq = \"CTGCCCAAGTGCTCCTGGAG\"\\n        seq = Chromosome(20).sequence(55803284, 55803304)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr21_sequence(self):\\n        expected_seq = \"GGCTGGTGTGGCACATGATG\"\\n        seq = Chromosome(21).sequence(46074515, 46074535)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr22_sequence(self):\\n        expected_seq = \"AGACGCCGCCCCTGTTCATG\"\\n        seq = Chromosome(22).sequence(50552076, 50552096)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chrX_sequence(self):\\n        expected_seq = \"GCAAGCAGCAGGATGGGGCC\"\\n        seq = Chromosome(\"X\").sequence(152811545, 152811565)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chrY_sequence(self):\\n        expected_seq = \"CTGAACGTGCTGAGTTACAG\"\\n        seq = Chromosome(\"Y\").sequence(25325643, 25325663)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chrMT_sequence(self):\\n        expected_seq = \"ATTGTACGGTACCATAAATA\"\\n        seq = Chromosome(\"MT\").sequence(16121, 16141)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr6_cox_hap2(self):\\n        accession = BUILD37_ACCESSIONS[\\'chr6_cox_hap2\\']\\n        max_length = ACCESSION_LENGTHS[accession]\\n\\n        expected_seq = \"GATCCTGAGTGGGTGAGTGG\"\\n        seq = Chromosome(\"chr6_cox_hap2\").sequence(3065395, 3065415)\\n        self.assertEqual(expected_seq, seq)\\n\\n        expected_seq = \"TATTCTTGCCAATAT\"\\n        seq = Chromosome(\"chr6_cox_hap2\").sequence(200, 215).upper()\\n        self.assertEqual(expected_seq, seq)\\n\\n        expected_seq = \"TCTGGCCTGGGAGTC\"\\n        seq = Chromosome(\"chr6_cox_hap2\").sequence(0, 15).upper()\\n        self.assertEqual(expected_seq, seq)\\n\\n        expected = \"tc\"\\n        seq = Chromosome(\\'chr6_cox_hap2\\').sequence(4795369, max_length)\\n        self.assertEqual(expected.upper(), seq)\\n\\n    def test_chr6_apd_hap1(self):\\n        accession = BUILD37_ACCESSIONS[\\'chr6_apd_hap1\\']\\n        max_length = ACCESSION_LENGTHS[accession]\\n\\n        expected = \"GAATTCAGCTCGCCGACGGC\"\\n        seq = Chromosome(\\'chr6_apd_hap1\\').sequence(0, 20)\\n        self.assertEqual(expected, seq)\\n\\n        expected = \"ACAATTAGAAATACTAGGAG\"\\n        seq = Chromosome(\\'chr6_apd_hap1\\').sequence(3000, 3020)\\n        self.assertEqual(expected, seq)\\n\\n        expected = \"cacT\"\\n        seq = Chromosome(\\'chr6_apd_hap1\\').sequence(max_length - 4, max_length)\\n        self.assertEqual(expected.upper(), seq)\\n\\n    def test_chr6_ssto_hap7(self):\\n        accession = BUILD37_ACCESSIONS[\\'chr6_ssto_hap7\\']\\n        max_length = ACCESSION_LENGTHS[accession]\\n\\n        expected = \"GGCCAGGTTTTGTGAATTCT\"\\n        seq = Chromosome(\\'chr6_ssto_hap7\\').sequence(3000, 3020)\\n        self.assertEqual(expected.upper(), seq)\\n\\n        expected = \"ggcc\"\\n        seq = Chromosome(\\'chr6_ssto_hap7\\').sequence(max_length - 4, max_length)\\n        self.assertEqual(expected.upper(), seq)\\n\\n    def test_chr6_mcf_hap5(self):\\n        expected = \"ACAATTAGAAATACTAGGAG\"\\n        seq = Chromosome(\\'chr6_mcf_hap5\\').sequence(3000, 3020)\\n        self.assertEqual(expected, seq)\\n\\n    def test_chr6_qbl_hap6(self):\\n        accession = BUILD37_ACCESSIONS[\\'chr6_qbl_hap6\\']\\n        max_length = ACCESSION_LENGTHS[accession]\\n\\n        expected = \"ACAATTAGAAATACTAGGAG\"\\n        seq = Chromosome(\\'chr6_qbl_hap6\\').sequence(3000, 3020)\\n        self.assertEqual(expected, seq)\\n\\n        expected = \"ggcc\"\\n        seq = Chromosome(\\'chr6_qbl_hap6\\').sequence(max_length - 4, max_length)\\n        self.assertEqual(expected.upper(), seq)\\n\\n    def test_chr6_mann_hap4(self):\\n        expected = \"ACAATTAGAAATACTAGGAG\"\\n        seq = Chromosome(\\'chr6_mann_hap4\\').sequence(3000, 3020)\\n        self.assertEqual(expected, seq)\\n\\n    def test_chr6_dbb_hap3(self):\\n        expected = \"ACAATTAGAAATACTAGGAG\"\\n        seq = Chromosome(\\'chr6_dbb_hap3\\').sequence(3000, 3020)\\n        self.assertEqual(expected, seq)\\n\\n    def test_chr17_ctg5_hap1(self):\\n        expected = \"TTTTGGCTACAATAATTCTT\"\\n        seq = Chromosome(\\'chr17_ctg5_hap1\\').sequence(3000, 3020)\\n        self.assertEqual(expected, seq)\\n\\n    def test_looped_mito(self):\\n        mito_accession = BUILD37_ACCESSIONS[\\'MT\\']\\n        mito_length = ACCESSION_LENGTHS[mito_accession]\\n        expected = \\'CATCACGATGGATCACAGGT\\'\\n\\n        seq = Chromosome(\\'MT\\', loop=True).sequence(mito_length - 10, mito_length + 10)\\n        self.assertEqual(expected, seq)\\n\\n        seq = Chromosome(\\'MT\\', loop=True).sequence(-10, 10)\\n        self.assertEqual(expected, seq)\\n\\n    def test_mito_N(self):\\n        \"\"\"\\n        From mitomap:\\n            *3107del is maintained in this revised sequence with the gap\\n            represented by an \\'N\\'. THIS ALLOWS HISTORICAL NUCLEOTIDE NUMBERING TO\\n            BE MAINTAINED.\\n\\n        We remove this \\'N\\' base since it is only present to preserve numbering and is\\n        not actually part of the observed sequence.\\n        \"\"\"\\n        self.assertEqual(\\'\\', Chromosome(\\'MT\\').sequence(3106, 3107))\\n\\n    def test_RSRS(self):\\n        expected = \\'GGAC\\'\\n        seq = Chromosome(\\'NC_001807.4\\').sequence(750, 754)\\n        self.assertEqual(expected, seq)\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'import os\\nimport fnmatch\\n\\nfrom seqseek.chromosome import Chromosome\\n\\nfrom seqseek.lib import get_data_directory, BUILD38_ACCESSIONS, BUILD38, ACCESSION_LENGTHS\\n\\nfrom unittest import TestCase\\n\\n\\nclass TestBuild38(TestCase):\\n\\n    def test_file_names(self):\\n        for accession in BUILD38_ACCESSIONS.values():\\n            fasta = os.path.join(get_data_directory(), str(accession) + \".fa\")\\n            self.assertTrue(os.path.isfile(fasta), fasta)\\n\\n    # all test sequences were extracted from https://genome.ucsc.edu/ using the\\n    # chromosome browser tool\\n\\n    def test_chr_start_sequences(self):\\n        test_str = \"N\" * 20\\n        for name in BUILD38_ACCESSIONS.keys():\\n            # these chromosomes do not have telomeres\\n            if name in (\\'MT\\', \\'RSRS\\', \\'17\\'):\\n                continue\\n            seq = Chromosome(name, assembly=BUILD38).sequence(0, 20)\\n            self.assertEqual(seq, test_str)\\n\\n    def test_chr1_sequence(self):\\n        expected_seq = \"ACAGGAAAAAGATAGCATTC\"\\n        seq = Chromosome(1, assembly=BUILD38).sequence(243415701, 243415721)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr2_sequence(self):\\n        expected_seq = \"GCTGGGCCTGAACTGATATC\"\\n        seq = Chromosome(2, assembly=BUILD38).sequence(237518537, 237518557)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr3_sequence(self):\\n        expected_seq = \"GCTGAAGTCATCGATGTGAG\"\\n        seq = Chromosome(3, assembly=BUILD38).sequence(175256410, 175256430)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr4_sequence(self):\\n        expected_seq = \"CTGtttctgaccacagcctc\"\\n        seq = Chromosome(4, assembly=BUILD38).sequence(184624738, 184624758)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chr5_sequence(self):\\n        expected_seq = \"CTGTCAATTATCACTGGATC\"\\n        seq = Chromosome(5, assembly=BUILD38).sequence(159073395, 159073415)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr6_sequence(self):\\n        expected_seq = \"GATGCACGCTGCTGTTTTAT\"\\n        seq = Chromosome(6, assembly=BUILD38).sequence(155144605, 155144625)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr7_sequence(self):\\n        expected_seq = \"GAGCTGGTGGGGAGTAACCC\"\\n        seq = Chromosome(7, assembly=BUILD38).sequence(154446213, 154446233)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr8_sequence(self):\\n        expected_seq = \"atcgtggcgtgttctgcagg\"\\n        seq = Chromosome(8, assembly=BUILD38).sequence(132447200, 132447220)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chr9_sequence(self):\\n        expected_seq = \"GAACCCTCTCATCGTCAAGG\"\\n        seq = Chromosome(9, assembly=BUILD38).sequence(132410447, 132410467)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr10_sequence(self):\\n        expected_seq = \"TTCAGGTTCCTTTGCAGCTC\"\\n        seq = Chromosome(10, assembly=BUILD38).sequence(122849420, 122849440)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr11_sequence(self):\\n        expected_seq = \"TTTTTAAATGAGTATCCTGG\"\\n        seq = Chromosome(11, assembly=BUILD38).sequence(122850195, 122850215)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr12_sequence(self):\\n        expected_seq = \"CATCCCCAGTTTCCCGCGGG\"\\n        seq = Chromosome(12, assembly=BUILD38).sequence(122850834, 122850854)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr13_sequence(self):\\n        expected_seq = \"CCCCCCGAAAAGGGCAAAGG\"\\n        seq = Chromosome(13, assembly=BUILD38).sequence(113089709, 113089729)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr14_sequence(self):\\n        expected_seq = \"CCCATGTAGTCCAGGTCAGA\"\\n        seq = Chromosome(14, assembly=BUILD38).sequence(100353686, 100353706)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr15_sequence(self):\\n        expected_seq = \"attaaaatcatccaatttcc\"\\n        seq = Chromosome(15, assembly=BUILD38).sequence(86987986, 86988006)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chr16_sequence(self):\\n        expected_seq = \"TTTCAAGCCACAGTCGAGGA\"\\n        seq = Chromosome(16, assembly=BUILD38).sequence(83670789, 83670809)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr17_sequence(self):\\n        expected_seq = \"aaacatcatctctaccaaaa\"\\n        seq = Chromosome(17, assembly=BUILD38).sequence(80014178, 80014198)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chr18_sequence(self):\\n        expected_seq = \"TGCAAAGAGAAATCCTTgga\"\\n        seq = Chromosome(18, assembly=BUILD38).sequence(67834418, 67834438)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chr19_sequence(self):\\n        expected_seq = \"CTGGGCTGCAGAATCGCTGG\"\\n        seq = Chromosome(19, assembly=BUILD38).sequence(45500047, 45500067)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr20_sequence(self):\\n        expected_seq = \"ATGAGATGGACCAAACGCCC\"\\n        seq = Chromosome(20, assembly=BUILD38).sequence(59743106, 59743126)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr21_sequence(self):\\n        expected_seq = \"GGCCCCCCCGGACCACCAGG\"\\n        seq = Chromosome(21, assembly=BUILD38).sequence(45497642, 45497662)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr22_sequence(self):\\n        expected_seq = \"CTTTTCATTAACTGGATAAA\"\\n        seq = Chromosome(22, assembly=BUILD38).sequence(43711474, 43711494)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chrX_sequence(self):\\n        expected_seq = \"GGACAACACCtgttaggggc\"\\n        seq = Chromosome(\"X\", assembly=BUILD38).sequence(152811545, 152811565)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chrY_sequence(self):\\n        expected_seq = \"CAGACCTTCTGCAGTGCACC\"\\n        seq = Chromosome(\"Y\", assembly=BUILD38).sequence(25325643, 25325663)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chrMT_sequence(self):\\n        expected_seq = \"ATTGTACGGTACCATAAATA\"\\n        seq = Chromosome(\"MT\", assembly=BUILD38).sequence(16121, 16141)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_looped_mito(self):\\n        mito_accession = BUILD38_ACCESSIONS[\\'MT\\']\\n        mito_length = ACCESSION_LENGTHS[mito_accession]\\n        expected = \\'CATCACGATGGATCACAGGT\\'\\n\\n        seq = Chromosome(\\'MT\\', BUILD38, loop=True).sequence(mito_length - 10, mito_length + 10)\\n        self.assertEqual(expected, seq)\\n\\n        seq = Chromosome(\\'MT\\', BUILD38, loop=True).sequence(-10, 10)\\n        self.assertEqual(expected, seq)\\n\\n    def test_mito_N(self):\\n        \"\"\"\\n        From mitomap:\\n            *3107del is maintained in this revised sequence with the gap\\n            represented by an \\'N\\'. THIS ALLOWS HISTORICAL NUCLEOTIDE NUMBERING TO\\n            BE MAINTAINED.\\n\\n        We remove this \\'N\\' base since it is only present to preserve numbering and is\\n        not actually part of the observed sequence.\\n        \"\"\"\\n        self.assertEqual(\\'\\', Chromosome(\\'MT\\').sequence(3106, 3107))\\n\\n    def test_RSRS(self):\\n        expected = \\'GGAC\\'\\n        seq = Chromosome(\\'NC_001807.4\\').sequence(750, 754)\\n        self.assertEqual(expected, seq)\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'from __future__ import print_function\\nfrom __future__ import absolute_import\\nimport unittest\\nfrom seqseek.lib import BUILD37, BUILD38\\nfrom .build_37_tests import TestBuild37\\nfrom .build_38_tests import TestBuild38\\n\\n\\nASSEMBLY_TEST_SUITE = {\\n    BUILD37: TestBuild37,\\n    BUILD38: TestBuild38\\n}\\n\\ndef run_build_test_suite(assembly):\\n    print(\"Running tests for {assembly}\".format(assembly=assembly))\\n    suite = unittest.TestLoader().loadTestsFromTestCase(ASSEMBLY_TEST_SUITE[assembly])\\n    unittest.TextTestRunner(verbosity=3).run(suite)\\n\\ndef test_build_37():\\n    run_build_test_suite(BUILD37)\\n\\ndef test_build_38():\\n    run_build_test_suite(BUILD38)\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'import os\\nfrom unittest import TestCase\\n\\nfrom seqseek.cli import determine_start_end\\nfrom seqseek.exceptions import TooManyLoops\\nfrom seqseek.chromosome import Chromosome, MissingDataError\\nfrom seqseek.lib import get_data_directory, BUILD37, BUILD37_ACCESSIONS, ACCESSION_LENGTHS, DATA_DIR_VARIABLE\\n\\n\\nclass TestDataDirectory(TestCase):\\n\\n    TEST_DATA_DIR = os.path.join(\\'seqseek\\', \\'tests\\', \\'test_chromosomes\\')\\n\\n    def setUp(self):\\n        os.environ[DATA_DIR_VARIABLE] = TestChromosome.TEST_DATA_DIR\\n\\n    def test_get_data_directory(self):\\n        data_dir = get_data_directory()\\n        self.assertEqual(TestChromosome.TEST_DATA_DIR, data_dir)\\n\\n    def test_make_data_directory(self):\\n        new_dir = os.path.join(TestChromosome.TEST_DATA_DIR, \"test\")\\n        self.assertFalse(os.path.isdir(new_dir))\\n        os.environ[DATA_DIR_VARIABLE] = new_dir\\n        get_data_directory()\\n        self.assertTrue(os.path.isdir(new_dir))\\n        os.rmdir(new_dir)\\n\\n\\nclass TestChromosome(TestCase):\\n\\n    TEST_DATA_DIR = os.path.join(\\'seqseek\\', \\'tests\\', \\'test_chromosomes\\')\\n\\n    def setUp(self):\\n        mt_accession = BUILD37_ACCESSIONS[\\'MT\\']\\n        self._mt_length = ACCESSION_LENGTHS[mt_accession]\\n        os.environ[DATA_DIR_VARIABLE] = TestChromosome.TEST_DATA_DIR\\n        ACCESSION_LENGTHS[mt_accession] = 20\\n\\n    def tearDown(self):\\n        mt_accession = BUILD37_ACCESSIONS[\\'MT\\']\\n        ACCESSION_LENGTHS[mt_accession] = self._mt_length\\n\\n    def test_invalid_assembly(self):\\n        with self.assertRaises(ValueError):\\n            Chromosome(\\'1\\', \\'build_39\\')\\n\\n    def test_invalid_name(self):\\n        with self.assertRaises(ValueError):\\n            Chromosome(\\'0\\', BUILD37)\\n\\n    def test_no_errors(self):\\n        Chromosome(\\'1\\').path()\\n        Chromosome(\\'1\\').sorted_chromosome_length_tuples(assembly=BUILD37)\\n        Chromosome(\\'1\\').filename()\\n\\n    def test_chr1_sequences(self):\\n        expected_seq = \\'GGGGCGGGAGGACGGGCCCG\\'\\n        seq = Chromosome(1).sequence(0, 20)\\n        self.assertEqual(seq, expected_seq)\\n        self.assertEqual(len(seq), 20)\\n        expected_seq = \\'GGGAG\\'\\n        seq = Chromosome(1).sequence(5, 10)\\n        self.assertEqual(seq, expected_seq)\\n\\n    def test_chrMT_sequence(self):\\n        expected_seq = \\'GATCACAGGTCTTCACCCT\\'\\n        seq = Chromosome(\\'MT\\').sequence(0, 20)\\n        self.assertEqual(seq, expected_seq)\\n        self.assertEqual(len(seq), 19)  # the N base was removed\\n        expected_seq = \\'CAGGT\\'\\n        seq = Chromosome(\\'MT\\').sequence(5, 10)\\n        self.assertEqual(seq, expected_seq)\\n\\n    def test_rCRS_sequence_retain_N(self):\\n        expected_seq = \\'GATCACAGGTCTNTCACCCT\\'\\n        seq = Chromosome(\\'MT\\', RCRS_N_remove=False).sequence(0, 20)\\n        self.assertEqual(seq, expected_seq)\\n        self.assertTrue(\\'N\\' in seq)  # the N base was *not* removed\\n\\n    def test_mito_loop_end(self):\\n        expected_seq = \\'CTTCACCCTGATCACAGGT\\'\\n\\n        seq = Chromosome(\\'MT\\', loop=True).sequence(10, 30)\\n        self.assertEqual(seq, expected_seq)\\n\\n        seq = Chromosome(\\'MT\\', loop=True).sequence(-10, 10)\\n        self.assertEqual(seq, expected_seq)\\n\\n    def test_others_are_not_circular(self):\\n        with self.assertRaises(ValueError):\\n            Chromosome(1, loop=True).sequence(0, 1)\\n\\n    def test_too_many_loops(self):\\n        \"\"\"should never return a sequence longer than the length of the contig\"\"\"\\n        mt_accession = BUILD37_ACCESSIONS[\\'MT\\']\\n        mt_length = ACCESSION_LENGTHS[mt_accession]\\n        Chromosome(\\'MT\\', loop=True).sequence(0, mt_length)\\n        with self.assertRaises(TooManyLoops):\\n            Chromosome(\\'MT\\', loop=True).sequence(0, mt_length + 1)\\n\\n        Chromosome(\\'MT\\', loop=True).sequence(-1, mt_length - 1)\\n        with self.assertRaises(TooManyLoops):\\n            Chromosome(\\'MT\\', loop=True).sequence(-1, mt_length)\\n\\n    def test_load_by_accession(self):\\n        # mostly duped from test_chr1_sequences\\n        expected_seq = \\'GGGGCGGGAGGACGGGCCCG\\'\\n        seq = Chromosome(\\'NC_000001.10\\').sequence(0, 20)\\n        self.assertEqual(seq, expected_seq)\\n        self.assertEqual(len(seq), 20)\\n        expected_seq = \\'GGGAG\\'\\n        seq = Chromosome(\\'NC_000001.10\\').sequence(5, 10)\\n        self.assertEqual(seq, expected_seq)\\n\\n\\nclass TestInvalidQueries(TestCase):\\n\\n    def test_invalid_chromosome_name(self):\\n        with self.assertRaises(ValueError):\\n            Chromosome(23).sequence(123456, 123457)\\n\\n    def test_missing_chromosome(self):\\n        with self.assertRaises(MissingDataError):\\n            Chromosome(\\'18\\').sequence(0, 20)\\n\\n    def test_invalid_start_position(self):\\n        with self.assertRaises(ValueError):\\n            Chromosome(1).sequence(-1, 10)\\n\\n    def test_invalid_end_position(self):\\n        with self.assertRaises(ValueError):\\n            Chromosome(1).sequence(123457, 123456)\\n\\n    def test_out_of_range_start_position(self):\\n        with self.assertRaises(ValueError):\\n            Chromosome(1).sequence(249250623, 249250625)\\n\\n    def test_out_of_range_end_position(self):\\n        with self.assertRaises(ValueError):\\n            Chromosome(1).sequence(249250619, 249250622)\\n\\n\\nclass TestCLI(TestCase):\\n\\n    def test_determine_start_end(self):\\n        expected = (10000, 10100)\\n\\n        observed = determine_start_end(\\'10000\\', \\'10100\\')\\n        self.assertEqual(observed, expected)\\n\\n        observed = determine_start_end(\\'10000\\', \\'+100\\')\\n        self.assertEqual(observed, expected)\\n\\n        observed = determine_start_end(\\'-100\\', \\'10100\\')\\n        self.assertEqual(observed, expected)\\n\\n    def test_determine_start_end_cannot_both_relative(self):\\n        with self.assertRaises(ValueError):\\n            determine_start_end(\\'-100\\', \\'+100\\')\\n\\n    def test_determine_start_end_non_integer(self):\\n        with self.assertRaises(ValueError):\\n            determine_start_end(\\'foo\\', \\'10100\\')\\n        with self.assertRaises(ValueError):\\n            determine_start_end(\\'10000\\', \\'bar\\')\\n        with self.assertRaises(ValueError):\\n            determine_start_end(\\'-foo\\', \\'10100\\')\\n        with self.assertRaises(ValueError):\\n            determine_start_end(\\'10000\\', \\'+bar\\')\\n        with self.assertRaises(ValueError):\\n            determine_start_end(\\'foo\\', \\'bar\\')\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b''"}, "return_value": "'utf-8'"}]}, "neuter_encoding_declaration": {"line": 214, "args": [{"func_args": {"source": "'from __future__ import absolute_import\\n\\nfrom .chromosome import Chromosome\\n\\nfrom .lib import BUILD37, BUILD38\\n'"}, "return_value": "'from __future__ import absolute_import\\n\\nfrom .chromosome import Chromosome\\n\\nfrom .lib import BUILD37, BUILD38\\n'"}, {"func_args": {"source": "'import os\\n\\nfrom .exceptions import TooManyLoops, MissingDataError\\nfrom .lib import (BUILD37, BUILD38, get_data_directory, sorted_nicely,\\n                  BUILD37_ACCESSIONS, BUILD38_ACCESSIONS, ACCESSION_LENGTHS,\\n                  RCRS_ACCESSION, MITOCHONDRIA_NAMES)\\n\\n\\nclass Chromosome(object):\\n\\n    ASSEMBLY_CHROMOSOMES = {\\n        BUILD37: BUILD37_ACCESSIONS,\\n        BUILD38: BUILD38_ACCESSIONS\\n    }\\n\\n    def __init__(self, chromosome_name, assembly=BUILD37, loop=False, RCRS_N_remove=True):\\n        \"\"\"\\n        Usage:\\n\\n                Chromosome(\\'1\\').sequence(0, 100)\\n                returns the first 100 nucleotides of chromosome 1\\n\\n        The default assembly is Homo_sapiens.GRCh37\\n        You may also use Build 38:\\n\\n                from seqseek import BUILD38\\n                Chromosome(\\'1\\', BUILD38).sequence(0, 100)\\n        \"\"\"\\n        self.name = str(chromosome_name)\\n        self.assembly = assembly\\n        self.loop = loop\\n        self.RCRS_N_remove = RCRS_N_remove\\n\\n        self.validate_assembly()\\n        self.validate_name()\\n        self.validate_loop()\\n\\n        if self.name in ACCESSION_LENGTHS:\\n            # allow loading by accession\\n            self.accession = self.name\\n        else:\\n            # allow loading by name\\n            self.accession = self.ASSEMBLY_CHROMOSOMES[assembly][self.name]\\n\\n        self.length = ACCESSION_LENGTHS[self.accession]\\n\\n    def validate_assembly(self):\\n        if self.assembly not in (BUILD37, BUILD38):\\n            raise ValueError(\\n                \\'Sorry, the only supported assemblies are {} and {}\\'.format(\\n                    BUILD37, BUILD38))\\n\\n    def validate_name(self):\\n        if self.name not in ACCESSION_LENGTHS:\\n            if self.name not in self.ASSEMBLY_CHROMOSOMES[self.assembly]:\\n                raise ValueError(\\n                    \"{name} is not a valid chromosome name or accession\".format(\\n                        name=self.name))\\n\\n    def validate_loop(self):\\n        if self.loop and self.name not in MITOCHONDRIA_NAMES:\\n            raise ValueError(\\'Loop may only be specified for the mitochondria.\\')\\n\\n    def validate_coordinates(self, start, end):\\n        if end < 0:\\n            raise ValueError(\\'end must be a positive number\\')\\n        elif (start < 0 and not self.loop) or end < 0:\\n            raise ValueError(\"Start and end must be positive integers for this chromosome\")\\n        if end < start:\\n            raise ValueError(\"Start position cannot be greater than end position\")\\n        if start > self.length or (end > self.length and not self.loop):\\n            raise ValueError(\\'Coordinates out of bounds. Chr {} has {} bases.\\'.format(\\n                self.name, self.length))\\n        if self.loop and end - start > self.length:\\n            raise TooManyLoops()\\n\\n    @classmethod\\n    def sorted_chromosome_length_tuples(cls, assembly):\\n        # TODO: simplify\\n        name_to_accession = cls.ASSEMBLY_CHROMOSOMES[assembly]\\n        chromosome_length_tuples = []\\n        for name, accession in name_to_accession.items():\\n            if accession in ACCESSION_LENGTHS:\\n                chromosome_length_tuples.append((name, ACCESSION_LENGTHS[accession]))\\n\\n        return sorted(chromosome_length_tuples,\\n                      key=lambda pair:\\n                          sorted_nicely(\\n                              ACCESSION_LENGTHS.keys()).index(name_to_accession[pair[0]]))\\n\\n    def filename(self):\\n        return \\'{}.fa\\'.format(self.accession)\\n\\n    def path(self):\\n        data_dir = get_data_directory()\\n        return os.path.join(data_dir, self.filename())\\n\\n    def exists(self):\\n        return os.path.exists(self.path())\\n\\n    def header(self):\\n        with open(self.path()) as f:\\n            return f.readline()\\n\\n    def read(self, start, length):\\n        with open(self.path()) as fasta:\\n            header = fasta.readline()\\n            fasta.seek(start + len(header))\\n            return fasta.read(length)\\n\\n    def sequence(self, start, end):\\n        self.validate_coordinates(start, end)\\n\\n        if self.loop and end > self.length:\\n            reads = [(start, self.length - start), (0, end - self.length)]\\n        elif self.loop and start < 0:\\n            reads = [(self.length + start, abs(start)), (0, end)]\\n        else:\\n            reads = [(start, end - start)]\\n\\n        if not self.exists():\\n            build = \\'37\\' if self.assembly == BUILD37 else \\'38\\'\\n            raise MissingDataError(\\n                \\'{} does not exist. Please download on the command line with: \\'\\n                \\'download_build_{}\\'.format(self.path(), build))\\n\\n        sequence = \\'\\'.join([self.read(*read) for read in reads])\\n\\n        # The rCRS mito contig contains an \\'N\\' base at position 3107 to preserve legacy\\n        # nucleotide numbering. We remove it because it is not part of the observed\\n        # sequence. See http://www.mitomap.org/MITOMAP/HumanMitoSeq\\n        if self.accession == RCRS_ACCESSION and self.RCRS_N_remove is True:\\n            sequence = sequence.replace(\\'N\\', \\'\\')\\n\\n        return sequence\\n'"}, "return_value": "'import os\\n\\nfrom .exceptions import TooManyLoops, MissingDataError\\nfrom .lib import (BUILD37, BUILD38, get_data_directory, sorted_nicely,\\n                  BUILD37_ACCESSIONS, BUILD38_ACCESSIONS, ACCESSION_LENGTHS,\\n                  RCRS_ACCESSION, MITOCHONDRIA_NAMES)\\n\\n\\nclass Chromosome(object):\\n\\n    ASSEMBLY_CHROMOSOMES = {\\n        BUILD37: BUILD37_ACCESSIONS,\\n        BUILD38: BUILD38_ACCESSIONS\\n    }\\n\\n    def __init__(self, chromosome_name, assembly=BUILD37, loop=False, RCRS_N_remove=True):\\n        \"\"\"\\n        Usage:\\n\\n                Chromosome(\\'1\\').sequence(0, 100)\\n                returns the first 100 nucleotides of chromosome 1\\n\\n        The default assembly is Homo_sapiens.GRCh37\\n        You may also use Build 38:\\n\\n                from seqseek import BUILD38\\n                Chromosome(\\'1\\', BUILD38).sequence(0, 100)\\n        \"\"\"\\n        self.name = str(chromosome_name)\\n        self.assembly = assembly\\n        self.loop = loop\\n        self.RCRS_N_remove = RCRS_N_remove\\n\\n        self.validate_assembly()\\n        self.validate_name()\\n        self.validate_loop()\\n\\n        if self.name in ACCESSION_LENGTHS:\\n            # allow loading by accession\\n            self.accession = self.name\\n        else:\\n            # allow loading by name\\n            self.accession = self.ASSEMBLY_CHROMOSOMES[assembly][self.name]\\n\\n        self.length = ACCESSION_LENGTHS[self.accession]\\n\\n    def validate_assembly(self):\\n        if self.assembly not in (BUILD37, BUILD38):\\n            raise ValueError(\\n                \\'Sorry, the only supported assemblies are {} and {}\\'.format(\\n                    BUILD37, BUILD38))\\n\\n    def validate_name(self):\\n        if self.name not in ACCESSION_LENGTHS:\\n            if self.name not in self.ASSEMBLY_CHROMOSOMES[self.assembly]:\\n                raise ValueError(\\n                    \"{name} is not a valid chromosome name or accession\".format(\\n                        name=self.name))\\n\\n    def validate_loop(self):\\n        if self.loop and self.name not in MITOCHONDRIA_NAMES:\\n            raise ValueError(\\'Loop may only be specified for the mitochondria.\\')\\n\\n    def validate_coordinates(self, start, end):\\n        if end < 0:\\n            raise ValueError(\\'end must be a positive number\\')\\n        elif (start < 0 and not self.loop) or end < 0:\\n            raise ValueError(\"Start and end must be positive integers for this chromosome\")\\n        if end < start:\\n            raise ValueError(\"Start position cannot be greater than end position\")\\n        if start > self.length or (end > self.length and not self.loop):\\n            raise ValueError(\\'Coordinates out of bounds. Chr {} has {} bases.\\'.format(\\n                self.name, self.length))\\n        if self.loop and end - start > self.length:\\n            raise TooManyLoops()\\n\\n    @classmethod\\n    def sorted_chromosome_length_tuples(cls, assembly):\\n        # TODO: simplify\\n        name_to_accession = cls.ASSEMBLY_CHROMOSOMES[assembly]\\n        chromosome_length_tuples = []\\n        for name, accession in name_to_accession.items():\\n            if accession in ACCESSION_LENGTHS:\\n                chromosome_length_tuples.append((name, ACCESSION_LENGTHS[accession]))\\n\\n        return sorted(chromosome_length_tuples,\\n                      key=lambda pair:\\n                          sorted_nicely(\\n                              ACCESSION_LENGTHS.keys()).index(name_to_accession[pair[0]]))\\n\\n    def filename(self):\\n        return \\'{}.fa\\'.format(self.accession)\\n\\n    def path(self):\\n        data_dir = get_data_directory()\\n        return os.path.join(data_dir, self.filename())\\n\\n    def exists(self):\\n        return os.path.exists(self.path())\\n\\n    def header(self):\\n        with open(self.path()) as f:\\n            return f.readline()\\n\\n    def read(self, start, length):\\n        with open(self.path()) as fasta:\\n            header = fasta.readline()\\n            fasta.seek(start + len(header))\\n            return fasta.read(length)\\n\\n    def sequence(self, start, end):\\n        self.validate_coordinates(start, end)\\n\\n        if self.loop and end > self.length:\\n            reads = [(start, self.length - start), (0, end - self.length)]\\n        elif self.loop and start < 0:\\n            reads = [(self.length + start, abs(start)), (0, end)]\\n        else:\\n            reads = [(start, end - start)]\\n\\n        if not self.exists():\\n            build = \\'37\\' if self.assembly == BUILD37 else \\'38\\'\\n            raise MissingDataError(\\n                \\'{} does not exist. Please download on the command line with: \\'\\n                \\'download_build_{}\\'.format(self.path(), build))\\n\\n        sequence = \\'\\'.join([self.read(*read) for read in reads])\\n\\n        # The rCRS mito contig contains an \\'N\\' base at position 3107 to preserve legacy\\n        # nucleotide numbering. We remove it because it is not part of the observed\\n        # sequence. See http://www.mitomap.org/MITOMAP/HumanMitoSeq\\n        if self.accession == RCRS_ACCESSION and self.RCRS_N_remove is True:\\n            sequence = sequence.replace(\\'N\\', \\'\\')\\n\\n        return sequence\\n'"}, {"func_args": {"source": "\"import argparse\\nfrom .chromosome import BUILD37_ACCESSIONS, Chromosome\\nfrom .lib import BUILD37, BUILD38\\n\\n\\nPROGRAM_TO_ASSEMBLY = {\\n    'seqseek_37': BUILD37,\\n    'seqseek_38': BUILD38\\n}\\nRELATIVE_SIGNS = ('-', '+')\\nSIGN_FACTOR = {\\n    '-': -1,\\n    '+': 1\\n}\\n\\n\\ndef determine_start_end(arg_start, arg_end):\\n    relative_start, relative_end = None, None\\n    if arg_start[0] in RELATIVE_SIGNS:\\n        relative_start, arg_start = arg_start[0], arg_start[1:]\\n    if arg_end[0] in RELATIVE_SIGNS:\\n        relative_end, arg_end = arg_end[0], arg_end[1:]\\n\\n    if relative_start is not None and relative_end is not None:\\n        raise ValueError('Start and end cannot be both relative.')\\n\\n    start, end = int(arg_start), int(arg_end)\\n\\n    if relative_start is not None:\\n        start = end + SIGN_FACTOR[relative_start] * start\\n    elif relative_end is not None:\\n        end = start + SIGN_FACTOR[relative_end] * end\\n\\n    return start, end\\n\\n\\ndef cmd_line():\\n    parser = argparse.ArgumentParser(description='Print sequence')\\n    parser.add_argument('chromosome', type=str, help='Chromosome name to seek')\\n    parser.add_argument('start', type=str, help='Start position (can be relative, e.g. -50)')\\n    parser.add_argument('end', type=str, help='End position (can be relative, e.g. +50)')\\n    args = parser.parse_args()\\n    assembly = PROGRAM_TO_ASSEMBLY[parser.prog]\\n\\n    # Do it\\n    kwargs = {'loop': True} if args.chromosome in ('MT', BUILD37_ACCESSIONS['MT']) else {}\\n    c = Chromosome(args.chromosome, assembly=assembly, **kwargs)\\n    start, end = determine_start_end(args.start, args.end)\\n    print(c.sequence(start, end))\\n\""}, "return_value": "\"import argparse\\nfrom .chromosome import BUILD37_ACCESSIONS, Chromosome\\nfrom .lib import BUILD37, BUILD38\\n\\n\\nPROGRAM_TO_ASSEMBLY = {\\n    'seqseek_37': BUILD37,\\n    'seqseek_38': BUILD38\\n}\\nRELATIVE_SIGNS = ('-', '+')\\nSIGN_FACTOR = {\\n    '-': -1,\\n    '+': 1\\n}\\n\\n\\ndef determine_start_end(arg_start, arg_end):\\n    relative_start, relative_end = None, None\\n    if arg_start[0] in RELATIVE_SIGNS:\\n        relative_start, arg_start = arg_start[0], arg_start[1:]\\n    if arg_end[0] in RELATIVE_SIGNS:\\n        relative_end, arg_end = arg_end[0], arg_end[1:]\\n\\n    if relative_start is not None and relative_end is not None:\\n        raise ValueError('Start and end cannot be both relative.')\\n\\n    start, end = int(arg_start), int(arg_end)\\n\\n    if relative_start is not None:\\n        start = end + SIGN_FACTOR[relative_start] * start\\n    elif relative_end is not None:\\n        end = start + SIGN_FACTOR[relative_end] * end\\n\\n    return start, end\\n\\n\\ndef cmd_line():\\n    parser = argparse.ArgumentParser(description='Print sequence')\\n    parser.add_argument('chromosome', type=str, help='Chromosome name to seek')\\n    parser.add_argument('start', type=str, help='Start position (can be relative, e.g. -50)')\\n    parser.add_argument('end', type=str, help='End position (can be relative, e.g. +50)')\\n    args = parser.parse_args()\\n    assembly = PROGRAM_TO_ASSEMBLY[parser.prog]\\n\\n    # Do it\\n    kwargs = {'loop': True} if args.chromosome in ('MT', BUILD37_ACCESSIONS['MT']) else {}\\n    c = Chromosome(args.chromosome, assembly=assembly, **kwargs)\\n    start, end = determine_start_end(args.start, args.end)\\n    print(c.sequence(start, end))\\n\""}, {"func_args": {"source": "'from __future__ import print_function\\nfrom __future__ import absolute_import\\nimport os\\nimport argparse\\nimport requests\\n\\nfrom .lib import get_data_directory, URI, BUILD37, BUILD38\\nfrom .chromosome import Chromosome\\n\\nfrom .tests.build_specific_tests import run_build_test_suite\\n\\nPROGRAM_TO_ASSEMBLY = {\\n    \\'download_build_37\\': BUILD37,\\n    \\'download_build_38\\': BUILD38\\n}\\n\\n\\ndef cmd_line():\\n    parser = argparse.ArgumentParser(description=\\'\\')\\n    parser.add_argument(\\'-v\\', dest=\\'verbose\\', action=\\'store_true\\')\\n    args = parser.parse_args()\\n\\n    assembly = PROGRAM_TO_ASSEMBLY[parser.prog]\\n    verbosity = args.verbose\\n    data_dir = get_data_directory()\\n\\n    # Do it\\n    Downloader(assembly, data_dir, verbosity).download_chromosomes()\\n\\n\\nclass Downloader(object):\\n\\n    SUPPORTED_ASSEMBLIES = (BUILD37, BUILD38)\\n\\n    def __init__(self, assembly, data_dir=None, verbose=True):\\n        self.assembly = assembly\\n        self.data_dir = data_dir or get_data_directory()\\n        self.verbose = verbose\\n\\n        self.validate_assembly()\\n\\n        self.log(\\'Data directory: {}\\'.format(self.data_dir))\\n        self.log(\\'Host: {}\\'.format(URI))\\n\\n    def log(self, msg, force=False):\\n        if self.verbose or force:\\n            print(msg)  # TODO: add a log handler\\n\\n    def validate_assembly(self):\\n        if self.assembly not in self.SUPPORTED_ASSEMBLIES:\\n            raise ValueError(\\'%s is not one of the supported assemblies %s\\'.format(\\n                self.assembly, self.SUPPORTED_ASSEMBLIES))\\n\\n    def get_missing_chromosomes(self):\\n        missing_chromosomes = []\\n\\n        for name, length in Chromosome.sorted_chromosome_length_tuples(self.assembly):\\n            chromosome = Chromosome(name, self.assembly)\\n            filepath = chromosome.path()\\n\\n            if not chromosome.exists():\\n                missing_chromosomes.append(name)\\n            else:\\n                expected_size = length + len(chromosome.header()) + 1\\n                size = os.path.getsize(filepath)\\n                if size != expected_size:\\n                    self.log(\\'Removing mismatched chromosome %s\\' % name)\\n                    missing_chromosomes.append(name)\\n                    os.remove(filepath)\\n\\n        return missing_chromosomes\\n\\n    def download_chromosomes(self):\\n        to_download = self.get_missing_chromosomes()\\n        self.log(\"Downloading {} chromosomes\".format(len(to_download)))\\n\\n        for name in to_download:\\n            self.download_chromosome(name)\\n        run_build_test_suite(self.assembly)\\n\\n    def download_chromosome(self, name):\\n        chromosome = Chromosome(name, self.assembly)\\n        path = chromosome.path()\\n        directory = os.path.dirname(chromosome.path())\\n\\n        if not os.path.isdir(directory):\\n            os.makedirs(directory)\\n            self.log(\\'Created directory {}\\'.format(directory), True)\\n\\n        uri = URI + chromosome.filename()\\n\\n        self.log(\\n            \\'Downloading from {} to {}\\'.format(uri, path), True)\\n\\n        r = requests.get(uri, stream=True)\\n\\n        # TODO can we do this in fewer than 3 passes?\\n\\n        with open(path, \\'wb\\') as fd:\\n            for chunk in r.iter_content(chunk_size=1024):\\n                fd.write(chunk)\\n\\n        with open(path, \\'r\\') as f:\\n            header = f.readline()\\n            content = f.read().replace(\\'\\\\n\\', \\'\\')\\n\\n        with open(path, \\'w\\') as f:\\n            f.write(header)\\n            f.write(content)\\n            f.write(\\'\\\\n\\')\\n\\n        self.log(\\'...Complete\\', True)\\n'"}, "return_value": "'from __future__ import print_function\\nfrom __future__ import absolute_import\\nimport os\\nimport argparse\\nimport requests\\n\\nfrom .lib import get_data_directory, URI, BUILD37, BUILD38\\nfrom .chromosome import Chromosome\\n\\nfrom .tests.build_specific_tests import run_build_test_suite\\n\\nPROGRAM_TO_ASSEMBLY = {\\n    \\'download_build_37\\': BUILD37,\\n    \\'download_build_38\\': BUILD38\\n}\\n\\n\\ndef cmd_line():\\n    parser = argparse.ArgumentParser(description=\\'\\')\\n    parser.add_argument(\\'-v\\', dest=\\'verbose\\', action=\\'store_true\\')\\n    args = parser.parse_args()\\n\\n    assembly = PROGRAM_TO_ASSEMBLY[parser.prog]\\n    verbosity = args.verbose\\n    data_dir = get_data_directory()\\n\\n    # Do it\\n    Downloader(assembly, data_dir, verbosity).download_chromosomes()\\n\\n\\nclass Downloader(object):\\n\\n    SUPPORTED_ASSEMBLIES = (BUILD37, BUILD38)\\n\\n    def __init__(self, assembly, data_dir=None, verbose=True):\\n        self.assembly = assembly\\n        self.data_dir = data_dir or get_data_directory()\\n        self.verbose = verbose\\n\\n        self.validate_assembly()\\n\\n        self.log(\\'Data directory: {}\\'.format(self.data_dir))\\n        self.log(\\'Host: {}\\'.format(URI))\\n\\n    def log(self, msg, force=False):\\n        if self.verbose or force:\\n            print(msg)  # TODO: add a log handler\\n\\n    def validate_assembly(self):\\n        if self.assembly not in self.SUPPORTED_ASSEMBLIES:\\n            raise ValueError(\\'%s is not one of the supported assemblies %s\\'.format(\\n                self.assembly, self.SUPPORTED_ASSEMBLIES))\\n\\n    def get_missing_chromosomes(self):\\n        missing_chromosomes = []\\n\\n        for name, length in Chromosome.sorted_chromosome_length_tuples(self.assembly):\\n            chromosome = Chromosome(name, self.assembly)\\n            filepath = chromosome.path()\\n\\n            if not chromosome.exists():\\n                missing_chromosomes.append(name)\\n            else:\\n                expected_size = length + len(chromosome.header()) + 1\\n                size = os.path.getsize(filepath)\\n                if size != expected_size:\\n                    self.log(\\'Removing mismatched chromosome %s\\' % name)\\n                    missing_chromosomes.append(name)\\n                    os.remove(filepath)\\n\\n        return missing_chromosomes\\n\\n    def download_chromosomes(self):\\n        to_download = self.get_missing_chromosomes()\\n        self.log(\"Downloading {} chromosomes\".format(len(to_download)))\\n\\n        for name in to_download:\\n            self.download_chromosome(name)\\n        run_build_test_suite(self.assembly)\\n\\n    def download_chromosome(self, name):\\n        chromosome = Chromosome(name, self.assembly)\\n        path = chromosome.path()\\n        directory = os.path.dirname(chromosome.path())\\n\\n        if not os.path.isdir(directory):\\n            os.makedirs(directory)\\n            self.log(\\'Created directory {}\\'.format(directory), True)\\n\\n        uri = URI + chromosome.filename()\\n\\n        self.log(\\n            \\'Downloading from {} to {}\\'.format(uri, path), True)\\n\\n        r = requests.get(uri, stream=True)\\n\\n        # TODO can we do this in fewer than 3 passes?\\n\\n        with open(path, \\'wb\\') as fd:\\n            for chunk in r.iter_content(chunk_size=1024):\\n                fd.write(chunk)\\n\\n        with open(path, \\'r\\') as f:\\n            header = f.readline()\\n            content = f.read().replace(\\'\\\\n\\', \\'\\')\\n\\n        with open(path, \\'w\\') as f:\\n            f.write(header)\\n            f.write(content)\\n            f.write(\\'\\\\n\\')\\n\\n        self.log(\\'...Complete\\', True)\\n'"}, {"func_args": {"source": "'class TooManyLoops(Exception):\\n    pass\\n\\n\\nclass MissingDataError(Exception):\\n    pass\\n\\n'"}, "return_value": "'class TooManyLoops(Exception):\\n    pass\\n\\n\\nclass MissingDataError(Exception):\\n    pass\\n\\n'"}, {"func_args": {"source": "'from __future__ import print_function\\nimport argparse\\n\\n\\ndef run(path):\\n    print(\"Formatting %s\" % path)\\n    with open(path) as fasta:\\n        header = \\'\\'\\n        first_line = fasta.readline()\\n        if not first_line.startswith(\\'>\\'):\\n            header = \\'> \\' + path.split(\\'/\\')[-1].split(\\'.\\')[0] + \\'\\\\n\\'\\n            first_line.replace(\\'\\\\n\\', \\'\\')\\n        clean = fasta.read().replace(\\'\\\\n\\', \\'\\')\\n\\n    with open(path + \\'.seqseek\\', \\'w\\') as formatted:\\n        formatted.write(header)\\n        formatted.write(first_line)\\n        formatted.write(clean)\\n\\n    with open(path + \\'.seqseek\\') as done:\\n        done.readline()\\n        sequence = done.read()\\n        print(\"Length is %d\" % len(sequence))\\n\\n\\nif __name__ == \\'__main__\\':\\n    parser = argparse.ArgumentParser()\\n    parser.add_argument(\"fasta_path\")\\n    args = parser.parse_args()\\n    run(args.fasta_path)\\n'"}, "return_value": "'from __future__ import print_function\\nimport argparse\\n\\n\\ndef run(path):\\n    print(\"Formatting %s\" % path)\\n    with open(path) as fasta:\\n        header = \\'\\'\\n        first_line = fasta.readline()\\n        if not first_line.startswith(\\'>\\'):\\n            header = \\'> \\' + path.split(\\'/\\')[-1].split(\\'.\\')[0] + \\'\\\\n\\'\\n            first_line.replace(\\'\\\\n\\', \\'\\')\\n        clean = fasta.read().replace(\\'\\\\n\\', \\'\\')\\n\\n    with open(path + \\'.seqseek\\', \\'w\\') as formatted:\\n        formatted.write(header)\\n        formatted.write(first_line)\\n        formatted.write(clean)\\n\\n    with open(path + \\'.seqseek\\') as done:\\n        done.readline()\\n        sequence = done.read()\\n        print(\"Length is %d\" % len(sequence))\\n\\n\\nif __name__ == \\'__main__\\':\\n    parser = argparse.ArgumentParser()\\n    parser.add_argument(\"fasta_path\")\\n    args = parser.parse_args()\\n    run(args.fasta_path)\\n'"}, {"func_args": {"source": "'import re\\nimport os\\n\\n\\nBUILD37 = \\'homo_sapiens_GRCh37\\'\\nBUILD38 = \\'homo_sapiens_GRCh38\\'\\n\\nRCRS_ACCESSION = \\'NC_012920.1\\'\\n\\nDEFAULT_DATA_DIR = \\'~/.seqseek\\'\\nDATA_DIR_VARIABLE = \\'SEQSEEK_DATA_DIR\\'\\n\\nURI = \\'https://s3-us-west-2.amazonaws.com/seqseek/\\'\\n\\n\\nBUILD37_ACCESSIONS = {\\n    \\'1\\': \\'NC_000001.10\\',\\n    \\'2\\': \\'NC_000002.11\\',\\n    \\'3\\': \\'NC_000003.11\\',\\n    \\'4\\': \\'NC_000004.11\\',\\n    \\'5\\': \\'NC_000005.9\\',\\n    \\'6\\': \\'NC_000006.11\\',\\n    \\'7\\': \\'NC_000007.13\\',\\n    \\'8\\': \\'NC_000008.10\\',\\n    \\'9\\': \\'NC_000009.11\\',\\n    \\'10\\': \\'NC_000010.10\\',\\n    \\'11\\': \\'NC_000011.9\\',\\n    \\'12\\': \\'NC_000012.11\\',\\n    \\'13\\': \\'NC_000013.10\\',\\n    \\'14\\': \\'NC_000014.8\\',\\n    \\'15\\': \\'NC_000015.9\\',\\n    \\'16\\': \\'NC_000016.9\\',\\n    \\'17\\': \\'NC_000017.10\\',\\n    \\'18\\': \\'NC_000018.9\\',\\n    \\'19\\': \\'NC_000019.9\\',\\n    \\'20\\': \\'NC_000020.10\\',\\n    \\'21\\': \\'NC_000021.8\\',\\n    \\'22\\': \\'NC_000022.10\\',\\n    \\'X\\': \\'NC_000023.10\\',\\n    \\'Y\\': \\'NC_000024.9\\',\\n    \\'MT\\': \\'NC_012920.1\\',\\n    \\'RSRS\\': \\'NC_001807.4\\',\\n\\n    # UCSC names for haplotype scaffolds\\n    \\'chr6_apd_hap1\\': \\'NT_167244.1\\',\\n    \\'chr6_cox_hap2\\': \\'NT_113891.2\\',\\n    \\'chr6_dbb_hap3\\': \\'NT_167245.1\\',\\n    \\'chr6_mann_hap4\\': \\'NT_167246.1\\',\\n    \\'chr6_mcf_hap5\\': \\'NT_167247.1\\',\\n    \\'chr6_qbl_hap6\\': \\'NT_167248.1\\',\\n    \\'chr6_ssto_hap7\\': \\'NT_167249.1\\',\\n    \\'chr4_ctg9_hap1\\': \\'NT_167250.1\\',\\n    \\'chr17_ctg5_hap1\\': \\'NT_167251.1\\'\\n}\\n\\nBUILD38_ACCESSIONS = {\\n    \\'1\\': \\'NC_000001.11\\',\\n    \\'2\\': \\'NC_000002.12\\',\\n    \\'3\\': \\'NC_000003.12\\',\\n    \\'4\\': \\'NC_000004.12\\',\\n    \\'5\\': \\'NC_000005.10\\',\\n    \\'6\\': \\'NC_000006.12\\',\\n    \\'7\\': \\'NC_000007.14\\',\\n    \\'8\\': \\'NC_000008.11\\',\\n    \\'9\\': \\'NC_000009.12\\',\\n    \\'10\\': \\'NC_000010.11\\',\\n    \\'11\\': \\'NC_000011.10\\',\\n    \\'12\\': \\'NC_000012.12\\',\\n    \\'13\\': \\'NC_000013.11\\',\\n    \\'14\\': \\'NC_000014.9\\',\\n    \\'15\\': \\'NC_000015.10\\',\\n    \\'16\\': \\'NC_000016.10\\',\\n    \\'17\\': \\'NC_000017.11\\',\\n    \\'18\\': \\'NC_000018.10\\',\\n    \\'19\\': \\'NC_000019.10\\',\\n    \\'20\\': \\'NC_000020.11\\',\\n    \\'21\\': \\'NC_000021.9\\',\\n    \\'22\\': \\'NC_000022.11\\',\\n    \\'X\\': \\'NC_000023.11\\',\\n    \\'Y\\': \\'NC_000024.10\\',\\n    \\'MT\\': \\'NC_012920.1\\',\\n    \\'RSRS\\': \\'NC_001807.4\\',\\n}\\n\\n# chromosome names and lengths for build 37\\nACCESSION_LENGTHS = {\\n    # GRCh38\\n    \\'NC_000001.11\\':  248956422,\\n    \\'NC_000002.12\\':  242193529,\\n    \\'NC_000003.12\\':  198295559,\\n    \\'NC_000004.12\\':  190214555,\\n    \\'NC_000005.10\\':  181538259,\\n    \\'NC_000006.12\\':  170805979,\\n    \\'NC_000007.14\\':  159345973,\\n    \\'NC_000008.11\\':  145138636,\\n    \\'NC_000009.12\\':  138394717,\\n    \\'NC_000010.11\\':  133797422,\\n    \\'NC_000011.10\\':  135086622,\\n    \\'NC_000012.12\\':  133275309,\\n    \\'NC_000013.11\\':  114364328,\\n    \\'NC_000014.9\\':   107043718,\\n    \\'NC_000015.10\\':  101991189,\\n    \\'NC_000016.10\\':  90338345,\\n    \\'NC_000017.11\\':  83257441,\\n    \\'NC_000018.10\\':  80373285,\\n    \\'NC_000019.10\\':  58617616,\\n    \\'NC_000020.11\\':  64444167,\\n    \\'NC_000021.9\\':   46709983,\\n    \\'NC_000022.11\\':  50818468,\\n    \\'NC_000023.11\\':  156040895,\\n    \\'NC_000024.10\\':  57227415,\\n\\n    # GRCh37\\n    \\'NC_000001.10\\':  249250621,\\n    \\'NC_000002.11\\':  243199373,\\n    \\'NC_000003.11\\':  198022430,\\n    \\'NC_000004.11\\':  191154276,\\n    \\'NC_000005.9\\':   180915260,\\n    \\'NC_000006.11\\':  171115067,\\n    \\'NC_000007.13\\':  159138663,\\n    \\'NC_000008.10\\':  146364022,\\n    \\'NC_000009.11\\':  141213431,\\n    \\'NC_000010.10\\':  135534747,\\n    \\'NC_000011.9\\':   135006516,\\n    \\'NC_000012.11\\':  133851895,\\n    \\'NC_000013.10\\':  115169878,\\n    \\'NC_000014.8\\':   107349540,\\n    \\'NC_000015.9\\':   102531392,\\n    \\'NC_000016.9\\':   90354753,\\n    \\'NC_000017.10\\':  81195210,\\n    \\'NC_000018.9\\':   78077248,\\n    \\'NC_000019.9\\':   59128983,\\n    \\'NC_000020.10\\':  63025520,\\n    \\'NC_000021.8\\':   48129895,\\n    \\'NC_000022.10\\':  51304566,\\n    \\'NC_000023.10\\':  155270560,\\n    \\'NC_000024.9\\':   59373566,\\n\\n    # Mito is shared between 37 & 38\\n    \\'NC_012920.1\\':   16569,  # rCRS\\n    \\'NC_001807.4\\':   16571,  # RSRS\\n\\n    # Haplotype scaffolds\\n    \\'NT_113891.2\\': 4795371,\\n    \\'NT_167244.1\\': 4622290,\\n    \\'NT_167245.1\\': 4610396,\\n    \\'NT_167246.1\\': 4683263,\\n    \\'NT_167247.1\\': 4833398,\\n    \\'NT_167248.1\\': 4611984,\\n    \\'NT_167249.1\\': 4928567,\\n    \\'NT_167250.1\\': 590426,\\n    \\'NT_167251.1\\': 1680828,\\n}\\n\\nMITOCHONDRIA_NAMES = {\\'MT\\', \\'RSRS\\', BUILD37_ACCESSIONS[\\'MT\\'], BUILD37_ACCESSIONS[\\'RSRS\\'],\\n                      BUILD38_ACCESSIONS[\\'MT\\'], BUILD38_ACCESSIONS[\\'RSRS\\']}\\n\\n\\ndef get_data_directory():\\n    default = os.path.expanduser(DEFAULT_DATA_DIR)\\n    storage_dir = os.environ.get(DATA_DIR_VARIABLE, default)\\n    os.environ[DATA_DIR_VARIABLE] = storage_dir\\n    if not os.path.exists(storage_dir):\\n        os.makedirs(storage_dir)\\n    return storage_dir\\n\\n\\ndef sorted_nicely(l):\\n    \"\"\"\\n    Sort the given iterable in the way that humans expect.\\n    http://blog.codinghorror.com/sorting-for-humans-natural-sort-order/\\n    \"\"\"\\n    convert = lambda text: int(text) if text.isdigit() else text\\n    alphanum_key = lambda key: [ convert(c) for c in re.split(\\'([0-9]+)\\', key) ]\\n    return sorted(l, key = alphanum_key)\\n\\n\\n\"\"\"\\nThe nine haplotype scaffolds are:\\n    name                    accession       UCSC chr name\\n    HSCHR6_MHC_APD_CTG1     GL000250.1      chr6_apd_hap1\\n    HSCHR6_MHC_COX_CTG1     GL000251.1      chr6_cox_hap2\\n    HSCHR6_MHC_DBB_CTG1     GL000252.1      chr6_dbb_hap3\\n    HSCHR6_MHC_MANN_CTG1    GL000253.1      chr6_mann_hap4\\n    HSCHR6_MHC_MCF_CTG1     GL000254.1      chr6_mcf_hap5\\n    HSCHR6_MHC_QBL_CTG1     GL000255.1      chr6_qbl_hap6\\n    HSCHR6_MHC_SSTO_CTG1    GL000256.1      chr6_ssto_hap7\\n    HSCHR4_1_CTG9           GL000257.1      chr4_ctg9_hap1\\n    HSCHR17_1_CTG5          GL000258.1      chr17_ctg5_hap1\\n\"\"\"\\n'"}, "return_value": "'import re\\nimport os\\n\\n\\nBUILD37 = \\'homo_sapiens_GRCh37\\'\\nBUILD38 = \\'homo_sapiens_GRCh38\\'\\n\\nRCRS_ACCESSION = \\'NC_012920.1\\'\\n\\nDEFAULT_DATA_DIR = \\'~/.seqseek\\'\\nDATA_DIR_VARIABLE = \\'SEQSEEK_DATA_DIR\\'\\n\\nURI = \\'https://s3-us-west-2.amazonaws.com/seqseek/\\'\\n\\n\\nBUILD37_ACCESSIONS = {\\n    \\'1\\': \\'NC_000001.10\\',\\n    \\'2\\': \\'NC_000002.11\\',\\n    \\'3\\': \\'NC_000003.11\\',\\n    \\'4\\': \\'NC_000004.11\\',\\n    \\'5\\': \\'NC_000005.9\\',\\n    \\'6\\': \\'NC_000006.11\\',\\n    \\'7\\': \\'NC_000007.13\\',\\n    \\'8\\': \\'NC_000008.10\\',\\n    \\'9\\': \\'NC_000009.11\\',\\n    \\'10\\': \\'NC_000010.10\\',\\n    \\'11\\': \\'NC_000011.9\\',\\n    \\'12\\': \\'NC_000012.11\\',\\n    \\'13\\': \\'NC_000013.10\\',\\n    \\'14\\': \\'NC_000014.8\\',\\n    \\'15\\': \\'NC_000015.9\\',\\n    \\'16\\': \\'NC_000016.9\\',\\n    \\'17\\': \\'NC_000017.10\\',\\n    \\'18\\': \\'NC_000018.9\\',\\n    \\'19\\': \\'NC_000019.9\\',\\n    \\'20\\': \\'NC_000020.10\\',\\n    \\'21\\': \\'NC_000021.8\\',\\n    \\'22\\': \\'NC_000022.10\\',\\n    \\'X\\': \\'NC_000023.10\\',\\n    \\'Y\\': \\'NC_000024.9\\',\\n    \\'MT\\': \\'NC_012920.1\\',\\n    \\'RSRS\\': \\'NC_001807.4\\',\\n\\n    # UCSC names for haplotype scaffolds\\n    \\'chr6_apd_hap1\\': \\'NT_167244.1\\',\\n    \\'chr6_cox_hap2\\': \\'NT_113891.2\\',\\n    \\'chr6_dbb_hap3\\': \\'NT_167245.1\\',\\n    \\'chr6_mann_hap4\\': \\'NT_167246.1\\',\\n    \\'chr6_mcf_hap5\\': \\'NT_167247.1\\',\\n    \\'chr6_qbl_hap6\\': \\'NT_167248.1\\',\\n    \\'chr6_ssto_hap7\\': \\'NT_167249.1\\',\\n    \\'chr4_ctg9_hap1\\': \\'NT_167250.1\\',\\n    \\'chr17_ctg5_hap1\\': \\'NT_167251.1\\'\\n}\\n\\nBUILD38_ACCESSIONS = {\\n    \\'1\\': \\'NC_000001.11\\',\\n    \\'2\\': \\'NC_000002.12\\',\\n    \\'3\\': \\'NC_000003.12\\',\\n    \\'4\\': \\'NC_000004.12\\',\\n    \\'5\\': \\'NC_000005.10\\',\\n    \\'6\\': \\'NC_000006.12\\',\\n    \\'7\\': \\'NC_000007.14\\',\\n    \\'8\\': \\'NC_000008.11\\',\\n    \\'9\\': \\'NC_000009.12\\',\\n    \\'10\\': \\'NC_000010.11\\',\\n    \\'11\\': \\'NC_000011.10\\',\\n    \\'12\\': \\'NC_000012.12\\',\\n    \\'13\\': \\'NC_000013.11\\',\\n    \\'14\\': \\'NC_000014.9\\',\\n    \\'15\\': \\'NC_000015.10\\',\\n    \\'16\\': \\'NC_000016.10\\',\\n    \\'17\\': \\'NC_000017.11\\',\\n    \\'18\\': \\'NC_000018.10\\',\\n    \\'19\\': \\'NC_000019.10\\',\\n    \\'20\\': \\'NC_000020.11\\',\\n    \\'21\\': \\'NC_000021.9\\',\\n    \\'22\\': \\'NC_000022.11\\',\\n    \\'X\\': \\'NC_000023.11\\',\\n    \\'Y\\': \\'NC_000024.10\\',\\n    \\'MT\\': \\'NC_012920.1\\',\\n    \\'RSRS\\': \\'NC_001807.4\\',\\n}\\n\\n# chromosome names and lengths for build 37\\nACCESSION_LENGTHS = {\\n    # GRCh38\\n    \\'NC_000001.11\\':  248956422,\\n    \\'NC_000002.12\\':  242193529,\\n    \\'NC_000003.12\\':  198295559,\\n    \\'NC_000004.12\\':  190214555,\\n    \\'NC_000005.10\\':  181538259,\\n    \\'NC_000006.12\\':  170805979,\\n    \\'NC_000007.14\\':  159345973,\\n    \\'NC_000008.11\\':  145138636,\\n    \\'NC_000009.12\\':  138394717,\\n    \\'NC_000010.11\\':  133797422,\\n    \\'NC_000011.10\\':  135086622,\\n    \\'NC_000012.12\\':  133275309,\\n    \\'NC_000013.11\\':  114364328,\\n    \\'NC_000014.9\\':   107043718,\\n    \\'NC_000015.10\\':  101991189,\\n    \\'NC_000016.10\\':  90338345,\\n    \\'NC_000017.11\\':  83257441,\\n    \\'NC_000018.10\\':  80373285,\\n    \\'NC_000019.10\\':  58617616,\\n    \\'NC_000020.11\\':  64444167,\\n    \\'NC_000021.9\\':   46709983,\\n    \\'NC_000022.11\\':  50818468,\\n    \\'NC_000023.11\\':  156040895,\\n    \\'NC_000024.10\\':  57227415,\\n\\n    # GRCh37\\n    \\'NC_000001.10\\':  249250621,\\n    \\'NC_000002.11\\':  243199373,\\n    \\'NC_000003.11\\':  198022430,\\n    \\'NC_000004.11\\':  191154276,\\n    \\'NC_000005.9\\':   180915260,\\n    \\'NC_000006.11\\':  171115067,\\n    \\'NC_000007.13\\':  159138663,\\n    \\'NC_000008.10\\':  146364022,\\n    \\'NC_000009.11\\':  141213431,\\n    \\'NC_000010.10\\':  135534747,\\n    \\'NC_000011.9\\':   135006516,\\n    \\'NC_000012.11\\':  133851895,\\n    \\'NC_000013.10\\':  115169878,\\n    \\'NC_000014.8\\':   107349540,\\n    \\'NC_000015.9\\':   102531392,\\n    \\'NC_000016.9\\':   90354753,\\n    \\'NC_000017.10\\':  81195210,\\n    \\'NC_000018.9\\':   78077248,\\n    \\'NC_000019.9\\':   59128983,\\n    \\'NC_000020.10\\':  63025520,\\n    \\'NC_000021.8\\':   48129895,\\n    \\'NC_000022.10\\':  51304566,\\n    \\'NC_000023.10\\':  155270560,\\n    \\'NC_000024.9\\':   59373566,\\n\\n    # Mito is shared between 37 & 38\\n    \\'NC_012920.1\\':   16569,  # rCRS\\n    \\'NC_001807.4\\':   16571,  # RSRS\\n\\n    # Haplotype scaffolds\\n    \\'NT_113891.2\\': 4795371,\\n    \\'NT_167244.1\\': 4622290,\\n    \\'NT_167245.1\\': 4610396,\\n    \\'NT_167246.1\\': 4683263,\\n    \\'NT_167247.1\\': 4833398,\\n    \\'NT_167248.1\\': 4611984,\\n    \\'NT_167249.1\\': 4928567,\\n    \\'NT_167250.1\\': 590426,\\n    \\'NT_167251.1\\': 1680828,\\n}\\n\\nMITOCHONDRIA_NAMES = {\\'MT\\', \\'RSRS\\', BUILD37_ACCESSIONS[\\'MT\\'], BUILD37_ACCESSIONS[\\'RSRS\\'],\\n                      BUILD38_ACCESSIONS[\\'MT\\'], BUILD38_ACCESSIONS[\\'RSRS\\']}\\n\\n\\ndef get_data_directory():\\n    default = os.path.expanduser(DEFAULT_DATA_DIR)\\n    storage_dir = os.environ.get(DATA_DIR_VARIABLE, default)\\n    os.environ[DATA_DIR_VARIABLE] = storage_dir\\n    if not os.path.exists(storage_dir):\\n        os.makedirs(storage_dir)\\n    return storage_dir\\n\\n\\ndef sorted_nicely(l):\\n    \"\"\"\\n    Sort the given iterable in the way that humans expect.\\n    http://blog.codinghorror.com/sorting-for-humans-natural-sort-order/\\n    \"\"\"\\n    convert = lambda text: int(text) if text.isdigit() else text\\n    alphanum_key = lambda key: [ convert(c) for c in re.split(\\'([0-9]+)\\', key) ]\\n    return sorted(l, key = alphanum_key)\\n\\n\\n\"\"\"\\nThe nine haplotype scaffolds are:\\n    name                    accession       UCSC chr name\\n    HSCHR6_MHC_APD_CTG1     GL000250.1      chr6_apd_hap1\\n    HSCHR6_MHC_COX_CTG1     GL000251.1      chr6_cox_hap2\\n    HSCHR6_MHC_DBB_CTG1     GL000252.1      chr6_dbb_hap3\\n    HSCHR6_MHC_MANN_CTG1    GL000253.1      chr6_mann_hap4\\n    HSCHR6_MHC_MCF_CTG1     GL000254.1      chr6_mcf_hap5\\n    HSCHR6_MHC_QBL_CTG1     GL000255.1      chr6_qbl_hap6\\n    HSCHR6_MHC_SSTO_CTG1    GL000256.1      chr6_ssto_hap7\\n    HSCHR4_1_CTG9           GL000257.1      chr4_ctg9_hap1\\n    HSCHR17_1_CTG5          GL000258.1      chr17_ctg5_hap1\\n\"\"\"\\n'"}, {"func_args": {"source": "'from __future__ import absolute_import\\nfrom .build_specific_tests import run_build_test_suite, test_build_38, test_build_37\\n'"}, "return_value": "'from __future__ import absolute_import\\nfrom .build_specific_tests import run_build_test_suite, test_build_38, test_build_37\\n'"}, {"func_args": {"source": "'import os\\n\\nfrom seqseek.chromosome import Chromosome\\n\\nfrom seqseek.lib import get_data_directory, BUILD37_ACCESSIONS, ACCESSION_LENGTHS\\n\\nfrom unittest import TestCase\\n\\n\\nclass TestBuild37(TestCase):\\n\\n    def test_file_names(self):\\n        for accession in BUILD37_ACCESSIONS.values():\\n            fasta = os.path.join(get_data_directory(), str(accession) + \".fa\")\\n            self.assertTrue(os.path.isfile(fasta), fasta)\\n\\n    # all test sequences were extracted from https://genome.ucsc.edu/ using the\\n    # chromosome browser tool\\n\\n    def test_chr_start_sequences(self):\\n        exclude = (\\'MT\\', \\'17\\' , \\'chr6_cox_hap2\\', \\'chr6_apd_hap1\\', \\'chr6_ssto_hap7\\',\\n                   \\'chr6_mcf_hap5\\', \\'chr6_qbl_hap6\\', \\'chr6_mann_hap4\\', \\'chr6_dbb_hap3\\',\\n                   \\'chr17_ctg5_hap1\\', \\'chr4_ctg9_hap1\\', \\'RSRS\\')\\n        test_str = \"N\" * 20\\n        for name in BUILD37_ACCESSIONS.keys():\\n            # these chromosomes do not have telomeres\\n            if name in exclude:\\n                continue\\n            seq = Chromosome(name).sequence(0, 20)\\n            self.assertEqual(seq, test_str, name)\\n\\n    def test_chr1_sequence(self):\\n        expected_seq = \"AATCTAAAAAACTGTCAGAT\"\\n        seq = Chromosome(1).sequence(243400000, 243400020)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chr2_sequence(self):\\n        expected_seq = \"tgtccacgcgcggatgtcgt\"\\n        seq = Chromosome(2).sequence(237513040, 237513060)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chr3_sequence(self):\\n        expected_seq = \"ctctttcgcccaggctggag\"\\n        seq = Chromosome(3).sequence(190352536, 190352556)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chr4_sequence(self):\\n        expected_seq = \"ttggagccaaggtctcactc\"\\n        seq = Chromosome(4).sequence(184622015, 184622035)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chr5_sequence(self):\\n        expected_seq = \"CTTTACTCCACTCATATTCT\"\\n        seq = Chromosome(5).sequence(158879589, 158879609)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr6_sequence(self):\\n        expected_seq = \"AGGTGGTAGCCCAGTGGTGC\"\\n        seq = Chromosome(6).sequence(158882594, 158882614)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr7_sequence(self):\\n        expected_seq = \"CTTGCTCTCATCCTCCGGGT\"\\n        seq = Chromosome(7).sequence(158896447, 158896467)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr8_sequence(self):\\n        expected_seq = \"CTGTCTCCACTGCAGGGCTC\"\\n        seq = Chromosome(8).sequence(139508913, 139508933)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr9_sequence(self):\\n        expected_seq = \"GAGGAGAACATTTGCCTGCA\"\\n        seq = Chromosome(9).sequence(140705912, 140705932)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr10_sequence(self):\\n        expected_seq = \"TCTGCAGGGGGCGGAGGAAA\"\\n        seq = Chromosome(10).sequence(121086020, 121086040)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr11_sequence(self):\\n        expected_seq = \"CTGAGGGTGGCGCTCTCCCC\"\\n        seq = Chromosome(11).sequence(132812820, 132812840)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr12_sequence(self):\\n        expected_seq = \"CCTCATGCCCAGTTCTACGT\"\\n        seq = Chromosome(12).sequence(132824462, 132824482)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr13_sequence(self):\\n        expected_seq = \"GAAAAGAATTCAAAGAACAC\"\\n        seq = Chromosome(13).sequence(113086756, 113086776)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr14_sequence(self):\\n        expected_seq = \"GCAACGGGGTGGTCATCCAC\"\\n        seq = Chromosome(14).sequence(105204712, 105204732)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr15_sequence(self):\\n        expected_seq = \"ttcaatcactgatacccttt\"\\n        seq = Chromosome(15).sequence(99921491, 99921511)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chr16_sequence(self):\\n        expected_seq = \"CTTTCAGCACAGGGCTGTGA\"\\n        seq = Chromosome(16).sequence(89862313, 89862333)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr17_sequence(self):\\n        expected_seq = \"TGGAGCTGGAGCCACAGGTC\"\\n        seq = Chromosome(17).sequence(80014178, 80014198)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr18_sequence(self):\\n        expected_seq = \"CGAACACTTCGTTGTCCTCT\"\\n        seq = Chromosome(18).sequence(74778253, 74778273)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr19_sequence(self):\\n        expected_seq = \"GGCTGGTTAAACTCGGGGTC\"\\n        seq = Chromosome(19).sequence(55798374, 55798394)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr20_sequence(self):\\n        expected_seq = \"CTGCCCAAGTGCTCCTGGAG\"\\n        seq = Chromosome(20).sequence(55803284, 55803304)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr21_sequence(self):\\n        expected_seq = \"GGCTGGTGTGGCACATGATG\"\\n        seq = Chromosome(21).sequence(46074515, 46074535)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr22_sequence(self):\\n        expected_seq = \"AGACGCCGCCCCTGTTCATG\"\\n        seq = Chromosome(22).sequence(50552076, 50552096)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chrX_sequence(self):\\n        expected_seq = \"GCAAGCAGCAGGATGGGGCC\"\\n        seq = Chromosome(\"X\").sequence(152811545, 152811565)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chrY_sequence(self):\\n        expected_seq = \"CTGAACGTGCTGAGTTACAG\"\\n        seq = Chromosome(\"Y\").sequence(25325643, 25325663)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chrMT_sequence(self):\\n        expected_seq = \"ATTGTACGGTACCATAAATA\"\\n        seq = Chromosome(\"MT\").sequence(16121, 16141)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr6_cox_hap2(self):\\n        accession = BUILD37_ACCESSIONS[\\'chr6_cox_hap2\\']\\n        max_length = ACCESSION_LENGTHS[accession]\\n\\n        expected_seq = \"GATCCTGAGTGGGTGAGTGG\"\\n        seq = Chromosome(\"chr6_cox_hap2\").sequence(3065395, 3065415)\\n        self.assertEqual(expected_seq, seq)\\n\\n        expected_seq = \"TATTCTTGCCAATAT\"\\n        seq = Chromosome(\"chr6_cox_hap2\").sequence(200, 215).upper()\\n        self.assertEqual(expected_seq, seq)\\n\\n        expected_seq = \"TCTGGCCTGGGAGTC\"\\n        seq = Chromosome(\"chr6_cox_hap2\").sequence(0, 15).upper()\\n        self.assertEqual(expected_seq, seq)\\n\\n        expected = \"tc\"\\n        seq = Chromosome(\\'chr6_cox_hap2\\').sequence(4795369, max_length)\\n        self.assertEqual(expected.upper(), seq)\\n\\n    def test_chr6_apd_hap1(self):\\n        accession = BUILD37_ACCESSIONS[\\'chr6_apd_hap1\\']\\n        max_length = ACCESSION_LENGTHS[accession]\\n\\n        expected = \"GAATTCAGCTCGCCGACGGC\"\\n        seq = Chromosome(\\'chr6_apd_hap1\\').sequence(0, 20)\\n        self.assertEqual(expected, seq)\\n\\n        expected = \"ACAATTAGAAATACTAGGAG\"\\n        seq = Chromosome(\\'chr6_apd_hap1\\').sequence(3000, 3020)\\n        self.assertEqual(expected, seq)\\n\\n        expected = \"cacT\"\\n        seq = Chromosome(\\'chr6_apd_hap1\\').sequence(max_length - 4, max_length)\\n        self.assertEqual(expected.upper(), seq)\\n\\n    def test_chr6_ssto_hap7(self):\\n        accession = BUILD37_ACCESSIONS[\\'chr6_ssto_hap7\\']\\n        max_length = ACCESSION_LENGTHS[accession]\\n\\n        expected = \"GGCCAGGTTTTGTGAATTCT\"\\n        seq = Chromosome(\\'chr6_ssto_hap7\\').sequence(3000, 3020)\\n        self.assertEqual(expected.upper(), seq)\\n\\n        expected = \"ggcc\"\\n        seq = Chromosome(\\'chr6_ssto_hap7\\').sequence(max_length - 4, max_length)\\n        self.assertEqual(expected.upper(), seq)\\n\\n    def test_chr6_mcf_hap5(self):\\n        expected = \"ACAATTAGAAATACTAGGAG\"\\n        seq = Chromosome(\\'chr6_mcf_hap5\\').sequence(3000, 3020)\\n        self.assertEqual(expected, seq)\\n\\n    def test_chr6_qbl_hap6(self):\\n        accession = BUILD37_ACCESSIONS[\\'chr6_qbl_hap6\\']\\n        max_length = ACCESSION_LENGTHS[accession]\\n\\n        expected = \"ACAATTAGAAATACTAGGAG\"\\n        seq = Chromosome(\\'chr6_qbl_hap6\\').sequence(3000, 3020)\\n        self.assertEqual(expected, seq)\\n\\n        expected = \"ggcc\"\\n        seq = Chromosome(\\'chr6_qbl_hap6\\').sequence(max_length - 4, max_length)\\n        self.assertEqual(expected.upper(), seq)\\n\\n    def test_chr6_mann_hap4(self):\\n        expected = \"ACAATTAGAAATACTAGGAG\"\\n        seq = Chromosome(\\'chr6_mann_hap4\\').sequence(3000, 3020)\\n        self.assertEqual(expected, seq)\\n\\n    def test_chr6_dbb_hap3(self):\\n        expected = \"ACAATTAGAAATACTAGGAG\"\\n        seq = Chromosome(\\'chr6_dbb_hap3\\').sequence(3000, 3020)\\n        self.assertEqual(expected, seq)\\n\\n    def test_chr17_ctg5_hap1(self):\\n        expected = \"TTTTGGCTACAATAATTCTT\"\\n        seq = Chromosome(\\'chr17_ctg5_hap1\\').sequence(3000, 3020)\\n        self.assertEqual(expected, seq)\\n\\n    def test_looped_mito(self):\\n        mito_accession = BUILD37_ACCESSIONS[\\'MT\\']\\n        mito_length = ACCESSION_LENGTHS[mito_accession]\\n        expected = \\'CATCACGATGGATCACAGGT\\'\\n\\n        seq = Chromosome(\\'MT\\', loop=True).sequence(mito_length - 10, mito_length + 10)\\n        self.assertEqual(expected, seq)\\n\\n        seq = Chromosome(\\'MT\\', loop=True).sequence(-10, 10)\\n        self.assertEqual(expected, seq)\\n\\n    def test_mito_N(self):\\n        \"\"\"\\n        From mitomap:\\n            *3107del is maintained in this revised sequence with the gap\\n            represented by an \\'N\\'. THIS ALLOWS HISTORICAL NUCLEOTIDE NUMBERING TO\\n            BE MAINTAINED.\\n\\n        We remove this \\'N\\' base since it is only present to preserve numbering and is\\n        not actually part of the observed sequence.\\n        \"\"\"\\n        self.assertEqual(\\'\\', Chromosome(\\'MT\\').sequence(3106, 3107))\\n\\n    def test_RSRS(self):\\n        expected = \\'GGAC\\'\\n        seq = Chromosome(\\'NC_001807.4\\').sequence(750, 754)\\n        self.assertEqual(expected, seq)\\n'"}, "return_value": "'import os\\n\\nfrom seqseek.chromosome import Chromosome\\n\\nfrom seqseek.lib import get_data_directory, BUILD37_ACCESSIONS, ACCESSION_LENGTHS\\n\\nfrom unittest import TestCase\\n\\n\\nclass TestBuild37(TestCase):\\n\\n    def test_file_names(self):\\n        for accession in BUILD37_ACCESSIONS.values():\\n            fasta = os.path.join(get_data_directory(), str(accession) + \".fa\")\\n            self.assertTrue(os.path.isfile(fasta), fasta)\\n\\n    # all test sequences were extracted from https://genome.ucsc.edu/ using the\\n    # chromosome browser tool\\n\\n    def test_chr_start_sequences(self):\\n        exclude = (\\'MT\\', \\'17\\' , \\'chr6_cox_hap2\\', \\'chr6_apd_hap1\\', \\'chr6_ssto_hap7\\',\\n                   \\'chr6_mcf_hap5\\', \\'chr6_qbl_hap6\\', \\'chr6_mann_hap4\\', \\'chr6_dbb_hap3\\',\\n                   \\'chr17_ctg5_hap1\\', \\'chr4_ctg9_hap1\\', \\'RSRS\\')\\n        test_str = \"N\" * 20\\n        for name in BUILD37_ACCESSIONS.keys():\\n            # these chromosomes do not have telomeres\\n            if name in exclude:\\n                continue\\n            seq = Chromosome(name).sequence(0, 20)\\n            self.assertEqual(seq, test_str, name)\\n\\n    def test_chr1_sequence(self):\\n        expected_seq = \"AATCTAAAAAACTGTCAGAT\"\\n        seq = Chromosome(1).sequence(243400000, 243400020)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chr2_sequence(self):\\n        expected_seq = \"tgtccacgcgcggatgtcgt\"\\n        seq = Chromosome(2).sequence(237513040, 237513060)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chr3_sequence(self):\\n        expected_seq = \"ctctttcgcccaggctggag\"\\n        seq = Chromosome(3).sequence(190352536, 190352556)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chr4_sequence(self):\\n        expected_seq = \"ttggagccaaggtctcactc\"\\n        seq = Chromosome(4).sequence(184622015, 184622035)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chr5_sequence(self):\\n        expected_seq = \"CTTTACTCCACTCATATTCT\"\\n        seq = Chromosome(5).sequence(158879589, 158879609)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr6_sequence(self):\\n        expected_seq = \"AGGTGGTAGCCCAGTGGTGC\"\\n        seq = Chromosome(6).sequence(158882594, 158882614)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr7_sequence(self):\\n        expected_seq = \"CTTGCTCTCATCCTCCGGGT\"\\n        seq = Chromosome(7).sequence(158896447, 158896467)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr8_sequence(self):\\n        expected_seq = \"CTGTCTCCACTGCAGGGCTC\"\\n        seq = Chromosome(8).sequence(139508913, 139508933)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr9_sequence(self):\\n        expected_seq = \"GAGGAGAACATTTGCCTGCA\"\\n        seq = Chromosome(9).sequence(140705912, 140705932)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr10_sequence(self):\\n        expected_seq = \"TCTGCAGGGGGCGGAGGAAA\"\\n        seq = Chromosome(10).sequence(121086020, 121086040)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr11_sequence(self):\\n        expected_seq = \"CTGAGGGTGGCGCTCTCCCC\"\\n        seq = Chromosome(11).sequence(132812820, 132812840)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr12_sequence(self):\\n        expected_seq = \"CCTCATGCCCAGTTCTACGT\"\\n        seq = Chromosome(12).sequence(132824462, 132824482)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr13_sequence(self):\\n        expected_seq = \"GAAAAGAATTCAAAGAACAC\"\\n        seq = Chromosome(13).sequence(113086756, 113086776)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr14_sequence(self):\\n        expected_seq = \"GCAACGGGGTGGTCATCCAC\"\\n        seq = Chromosome(14).sequence(105204712, 105204732)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr15_sequence(self):\\n        expected_seq = \"ttcaatcactgatacccttt\"\\n        seq = Chromosome(15).sequence(99921491, 99921511)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chr16_sequence(self):\\n        expected_seq = \"CTTTCAGCACAGGGCTGTGA\"\\n        seq = Chromosome(16).sequence(89862313, 89862333)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr17_sequence(self):\\n        expected_seq = \"TGGAGCTGGAGCCACAGGTC\"\\n        seq = Chromosome(17).sequence(80014178, 80014198)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr18_sequence(self):\\n        expected_seq = \"CGAACACTTCGTTGTCCTCT\"\\n        seq = Chromosome(18).sequence(74778253, 74778273)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr19_sequence(self):\\n        expected_seq = \"GGCTGGTTAAACTCGGGGTC\"\\n        seq = Chromosome(19).sequence(55798374, 55798394)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr20_sequence(self):\\n        expected_seq = \"CTGCCCAAGTGCTCCTGGAG\"\\n        seq = Chromosome(20).sequence(55803284, 55803304)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr21_sequence(self):\\n        expected_seq = \"GGCTGGTGTGGCACATGATG\"\\n        seq = Chromosome(21).sequence(46074515, 46074535)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr22_sequence(self):\\n        expected_seq = \"AGACGCCGCCCCTGTTCATG\"\\n        seq = Chromosome(22).sequence(50552076, 50552096)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chrX_sequence(self):\\n        expected_seq = \"GCAAGCAGCAGGATGGGGCC\"\\n        seq = Chromosome(\"X\").sequence(152811545, 152811565)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chrY_sequence(self):\\n        expected_seq = \"CTGAACGTGCTGAGTTACAG\"\\n        seq = Chromosome(\"Y\").sequence(25325643, 25325663)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chrMT_sequence(self):\\n        expected_seq = \"ATTGTACGGTACCATAAATA\"\\n        seq = Chromosome(\"MT\").sequence(16121, 16141)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr6_cox_hap2(self):\\n        accession = BUILD37_ACCESSIONS[\\'chr6_cox_hap2\\']\\n        max_length = ACCESSION_LENGTHS[accession]\\n\\n        expected_seq = \"GATCCTGAGTGGGTGAGTGG\"\\n        seq = Chromosome(\"chr6_cox_hap2\").sequence(3065395, 3065415)\\n        self.assertEqual(expected_seq, seq)\\n\\n        expected_seq = \"TATTCTTGCCAATAT\"\\n        seq = Chromosome(\"chr6_cox_hap2\").sequence(200, 215).upper()\\n        self.assertEqual(expected_seq, seq)\\n\\n        expected_seq = \"TCTGGCCTGGGAGTC\"\\n        seq = Chromosome(\"chr6_cox_hap2\").sequence(0, 15).upper()\\n        self.assertEqual(expected_seq, seq)\\n\\n        expected = \"tc\"\\n        seq = Chromosome(\\'chr6_cox_hap2\\').sequence(4795369, max_length)\\n        self.assertEqual(expected.upper(), seq)\\n\\n    def test_chr6_apd_hap1(self):\\n        accession = BUILD37_ACCESSIONS[\\'chr6_apd_hap1\\']\\n        max_length = ACCESSION_LENGTHS[accession]\\n\\n        expected = \"GAATTCAGCTCGCCGACGGC\"\\n        seq = Chromosome(\\'chr6_apd_hap1\\').sequence(0, 20)\\n        self.assertEqual(expected, seq)\\n\\n        expected = \"ACAATTAGAAATACTAGGAG\"\\n        seq = Chromosome(\\'chr6_apd_hap1\\').sequence(3000, 3020)\\n        self.assertEqual(expected, seq)\\n\\n        expected = \"cacT\"\\n        seq = Chromosome(\\'chr6_apd_hap1\\').sequence(max_length - 4, max_length)\\n        self.assertEqual(expected.upper(), seq)\\n\\n    def test_chr6_ssto_hap7(self):\\n        accession = BUILD37_ACCESSIONS[\\'chr6_ssto_hap7\\']\\n        max_length = ACCESSION_LENGTHS[accession]\\n\\n        expected = \"GGCCAGGTTTTGTGAATTCT\"\\n        seq = Chromosome(\\'chr6_ssto_hap7\\').sequence(3000, 3020)\\n        self.assertEqual(expected.upper(), seq)\\n\\n        expected = \"ggcc\"\\n        seq = Chromosome(\\'chr6_ssto_hap7\\').sequence(max_length - 4, max_length)\\n        self.assertEqual(expected.upper(), seq)\\n\\n    def test_chr6_mcf_hap5(self):\\n        expected = \"ACAATTAGAAATACTAGGAG\"\\n        seq = Chromosome(\\'chr6_mcf_hap5\\').sequence(3000, 3020)\\n        self.assertEqual(expected, seq)\\n\\n    def test_chr6_qbl_hap6(self):\\n        accession = BUILD37_ACCESSIONS[\\'chr6_qbl_hap6\\']\\n        max_length = ACCESSION_LENGTHS[accession]\\n\\n        expected = \"ACAATTAGAAATACTAGGAG\"\\n        seq = Chromosome(\\'chr6_qbl_hap6\\').sequence(3000, 3020)\\n        self.assertEqual(expected, seq)\\n\\n        expected = \"ggcc\"\\n        seq = Chromosome(\\'chr6_qbl_hap6\\').sequence(max_length - 4, max_length)\\n        self.assertEqual(expected.upper(), seq)\\n\\n    def test_chr6_mann_hap4(self):\\n        expected = \"ACAATTAGAAATACTAGGAG\"\\n        seq = Chromosome(\\'chr6_mann_hap4\\').sequence(3000, 3020)\\n        self.assertEqual(expected, seq)\\n\\n    def test_chr6_dbb_hap3(self):\\n        expected = \"ACAATTAGAAATACTAGGAG\"\\n        seq = Chromosome(\\'chr6_dbb_hap3\\').sequence(3000, 3020)\\n        self.assertEqual(expected, seq)\\n\\n    def test_chr17_ctg5_hap1(self):\\n        expected = \"TTTTGGCTACAATAATTCTT\"\\n        seq = Chromosome(\\'chr17_ctg5_hap1\\').sequence(3000, 3020)\\n        self.assertEqual(expected, seq)\\n\\n    def test_looped_mito(self):\\n        mito_accession = BUILD37_ACCESSIONS[\\'MT\\']\\n        mito_length = ACCESSION_LENGTHS[mito_accession]\\n        expected = \\'CATCACGATGGATCACAGGT\\'\\n\\n        seq = Chromosome(\\'MT\\', loop=True).sequence(mito_length - 10, mito_length + 10)\\n        self.assertEqual(expected, seq)\\n\\n        seq = Chromosome(\\'MT\\', loop=True).sequence(-10, 10)\\n        self.assertEqual(expected, seq)\\n\\n    def test_mito_N(self):\\n        \"\"\"\\n        From mitomap:\\n            *3107del is maintained in this revised sequence with the gap\\n            represented by an \\'N\\'. THIS ALLOWS HISTORICAL NUCLEOTIDE NUMBERING TO\\n            BE MAINTAINED.\\n\\n        We remove this \\'N\\' base since it is only present to preserve numbering and is\\n        not actually part of the observed sequence.\\n        \"\"\"\\n        self.assertEqual(\\'\\', Chromosome(\\'MT\\').sequence(3106, 3107))\\n\\n    def test_RSRS(self):\\n        expected = \\'GGAC\\'\\n        seq = Chromosome(\\'NC_001807.4\\').sequence(750, 754)\\n        self.assertEqual(expected, seq)\\n'"}, {"func_args": {"source": "'import os\\nimport fnmatch\\n\\nfrom seqseek.chromosome import Chromosome\\n\\nfrom seqseek.lib import get_data_directory, BUILD38_ACCESSIONS, BUILD38, ACCESSION_LENGTHS\\n\\nfrom unittest import TestCase\\n\\n\\nclass TestBuild38(TestCase):\\n\\n    def test_file_names(self):\\n        for accession in BUILD38_ACCESSIONS.values():\\n            fasta = os.path.join(get_data_directory(), str(accession) + \".fa\")\\n            self.assertTrue(os.path.isfile(fasta), fasta)\\n\\n    # all test sequences were extracted from https://genome.ucsc.edu/ using the\\n    # chromosome browser tool\\n\\n    def test_chr_start_sequences(self):\\n        test_str = \"N\" * 20\\n        for name in BUILD38_ACCESSIONS.keys():\\n            # these chromosomes do not have telomeres\\n            if name in (\\'MT\\', \\'RSRS\\', \\'17\\'):\\n                continue\\n            seq = Chromosome(name, assembly=BUILD38).sequence(0, 20)\\n            self.assertEqual(seq, test_str)\\n\\n    def test_chr1_sequence(self):\\n        expected_seq = \"ACAGGAAAAAGATAGCATTC\"\\n        seq = Chromosome(1, assembly=BUILD38).sequence(243415701, 243415721)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr2_sequence(self):\\n        expected_seq = \"GCTGGGCCTGAACTGATATC\"\\n        seq = Chromosome(2, assembly=BUILD38).sequence(237518537, 237518557)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr3_sequence(self):\\n        expected_seq = \"GCTGAAGTCATCGATGTGAG\"\\n        seq = Chromosome(3, assembly=BUILD38).sequence(175256410, 175256430)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr4_sequence(self):\\n        expected_seq = \"CTGtttctgaccacagcctc\"\\n        seq = Chromosome(4, assembly=BUILD38).sequence(184624738, 184624758)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chr5_sequence(self):\\n        expected_seq = \"CTGTCAATTATCACTGGATC\"\\n        seq = Chromosome(5, assembly=BUILD38).sequence(159073395, 159073415)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr6_sequence(self):\\n        expected_seq = \"GATGCACGCTGCTGTTTTAT\"\\n        seq = Chromosome(6, assembly=BUILD38).sequence(155144605, 155144625)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr7_sequence(self):\\n        expected_seq = \"GAGCTGGTGGGGAGTAACCC\"\\n        seq = Chromosome(7, assembly=BUILD38).sequence(154446213, 154446233)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr8_sequence(self):\\n        expected_seq = \"atcgtggcgtgttctgcagg\"\\n        seq = Chromosome(8, assembly=BUILD38).sequence(132447200, 132447220)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chr9_sequence(self):\\n        expected_seq = \"GAACCCTCTCATCGTCAAGG\"\\n        seq = Chromosome(9, assembly=BUILD38).sequence(132410447, 132410467)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr10_sequence(self):\\n        expected_seq = \"TTCAGGTTCCTTTGCAGCTC\"\\n        seq = Chromosome(10, assembly=BUILD38).sequence(122849420, 122849440)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr11_sequence(self):\\n        expected_seq = \"TTTTTAAATGAGTATCCTGG\"\\n        seq = Chromosome(11, assembly=BUILD38).sequence(122850195, 122850215)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr12_sequence(self):\\n        expected_seq = \"CATCCCCAGTTTCCCGCGGG\"\\n        seq = Chromosome(12, assembly=BUILD38).sequence(122850834, 122850854)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr13_sequence(self):\\n        expected_seq = \"CCCCCCGAAAAGGGCAAAGG\"\\n        seq = Chromosome(13, assembly=BUILD38).sequence(113089709, 113089729)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr14_sequence(self):\\n        expected_seq = \"CCCATGTAGTCCAGGTCAGA\"\\n        seq = Chromosome(14, assembly=BUILD38).sequence(100353686, 100353706)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr15_sequence(self):\\n        expected_seq = \"attaaaatcatccaatttcc\"\\n        seq = Chromosome(15, assembly=BUILD38).sequence(86987986, 86988006)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chr16_sequence(self):\\n        expected_seq = \"TTTCAAGCCACAGTCGAGGA\"\\n        seq = Chromosome(16, assembly=BUILD38).sequence(83670789, 83670809)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr17_sequence(self):\\n        expected_seq = \"aaacatcatctctaccaaaa\"\\n        seq = Chromosome(17, assembly=BUILD38).sequence(80014178, 80014198)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chr18_sequence(self):\\n        expected_seq = \"TGCAAAGAGAAATCCTTgga\"\\n        seq = Chromosome(18, assembly=BUILD38).sequence(67834418, 67834438)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chr19_sequence(self):\\n        expected_seq = \"CTGGGCTGCAGAATCGCTGG\"\\n        seq = Chromosome(19, assembly=BUILD38).sequence(45500047, 45500067)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr20_sequence(self):\\n        expected_seq = \"ATGAGATGGACCAAACGCCC\"\\n        seq = Chromosome(20, assembly=BUILD38).sequence(59743106, 59743126)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr21_sequence(self):\\n        expected_seq = \"GGCCCCCCCGGACCACCAGG\"\\n        seq = Chromosome(21, assembly=BUILD38).sequence(45497642, 45497662)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr22_sequence(self):\\n        expected_seq = \"CTTTTCATTAACTGGATAAA\"\\n        seq = Chromosome(22, assembly=BUILD38).sequence(43711474, 43711494)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chrX_sequence(self):\\n        expected_seq = \"GGACAACACCtgttaggggc\"\\n        seq = Chromosome(\"X\", assembly=BUILD38).sequence(152811545, 152811565)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chrY_sequence(self):\\n        expected_seq = \"CAGACCTTCTGCAGTGCACC\"\\n        seq = Chromosome(\"Y\", assembly=BUILD38).sequence(25325643, 25325663)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chrMT_sequence(self):\\n        expected_seq = \"ATTGTACGGTACCATAAATA\"\\n        seq = Chromosome(\"MT\", assembly=BUILD38).sequence(16121, 16141)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_looped_mito(self):\\n        mito_accession = BUILD38_ACCESSIONS[\\'MT\\']\\n        mito_length = ACCESSION_LENGTHS[mito_accession]\\n        expected = \\'CATCACGATGGATCACAGGT\\'\\n\\n        seq = Chromosome(\\'MT\\', BUILD38, loop=True).sequence(mito_length - 10, mito_length + 10)\\n        self.assertEqual(expected, seq)\\n\\n        seq = Chromosome(\\'MT\\', BUILD38, loop=True).sequence(-10, 10)\\n        self.assertEqual(expected, seq)\\n\\n    def test_mito_N(self):\\n        \"\"\"\\n        From mitomap:\\n            *3107del is maintained in this revised sequence with the gap\\n            represented by an \\'N\\'. THIS ALLOWS HISTORICAL NUCLEOTIDE NUMBERING TO\\n            BE MAINTAINED.\\n\\n        We remove this \\'N\\' base since it is only present to preserve numbering and is\\n        not actually part of the observed sequence.\\n        \"\"\"\\n        self.assertEqual(\\'\\', Chromosome(\\'MT\\').sequence(3106, 3107))\\n\\n    def test_RSRS(self):\\n        expected = \\'GGAC\\'\\n        seq = Chromosome(\\'NC_001807.4\\').sequence(750, 754)\\n        self.assertEqual(expected, seq)\\n'"}, "return_value": "'import os\\nimport fnmatch\\n\\nfrom seqseek.chromosome import Chromosome\\n\\nfrom seqseek.lib import get_data_directory, BUILD38_ACCESSIONS, BUILD38, ACCESSION_LENGTHS\\n\\nfrom unittest import TestCase\\n\\n\\nclass TestBuild38(TestCase):\\n\\n    def test_file_names(self):\\n        for accession in BUILD38_ACCESSIONS.values():\\n            fasta = os.path.join(get_data_directory(), str(accession) + \".fa\")\\n            self.assertTrue(os.path.isfile(fasta), fasta)\\n\\n    # all test sequences were extracted from https://genome.ucsc.edu/ using the\\n    # chromosome browser tool\\n\\n    def test_chr_start_sequences(self):\\n        test_str = \"N\" * 20\\n        for name in BUILD38_ACCESSIONS.keys():\\n            # these chromosomes do not have telomeres\\n            if name in (\\'MT\\', \\'RSRS\\', \\'17\\'):\\n                continue\\n            seq = Chromosome(name, assembly=BUILD38).sequence(0, 20)\\n            self.assertEqual(seq, test_str)\\n\\n    def test_chr1_sequence(self):\\n        expected_seq = \"ACAGGAAAAAGATAGCATTC\"\\n        seq = Chromosome(1, assembly=BUILD38).sequence(243415701, 243415721)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr2_sequence(self):\\n        expected_seq = \"GCTGGGCCTGAACTGATATC\"\\n        seq = Chromosome(2, assembly=BUILD38).sequence(237518537, 237518557)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr3_sequence(self):\\n        expected_seq = \"GCTGAAGTCATCGATGTGAG\"\\n        seq = Chromosome(3, assembly=BUILD38).sequence(175256410, 175256430)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr4_sequence(self):\\n        expected_seq = \"CTGtttctgaccacagcctc\"\\n        seq = Chromosome(4, assembly=BUILD38).sequence(184624738, 184624758)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chr5_sequence(self):\\n        expected_seq = \"CTGTCAATTATCACTGGATC\"\\n        seq = Chromosome(5, assembly=BUILD38).sequence(159073395, 159073415)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr6_sequence(self):\\n        expected_seq = \"GATGCACGCTGCTGTTTTAT\"\\n        seq = Chromosome(6, assembly=BUILD38).sequence(155144605, 155144625)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr7_sequence(self):\\n        expected_seq = \"GAGCTGGTGGGGAGTAACCC\"\\n        seq = Chromosome(7, assembly=BUILD38).sequence(154446213, 154446233)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr8_sequence(self):\\n        expected_seq = \"atcgtggcgtgttctgcagg\"\\n        seq = Chromosome(8, assembly=BUILD38).sequence(132447200, 132447220)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chr9_sequence(self):\\n        expected_seq = \"GAACCCTCTCATCGTCAAGG\"\\n        seq = Chromosome(9, assembly=BUILD38).sequence(132410447, 132410467)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr10_sequence(self):\\n        expected_seq = \"TTCAGGTTCCTTTGCAGCTC\"\\n        seq = Chromosome(10, assembly=BUILD38).sequence(122849420, 122849440)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr11_sequence(self):\\n        expected_seq = \"TTTTTAAATGAGTATCCTGG\"\\n        seq = Chromosome(11, assembly=BUILD38).sequence(122850195, 122850215)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr12_sequence(self):\\n        expected_seq = \"CATCCCCAGTTTCCCGCGGG\"\\n        seq = Chromosome(12, assembly=BUILD38).sequence(122850834, 122850854)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr13_sequence(self):\\n        expected_seq = \"CCCCCCGAAAAGGGCAAAGG\"\\n        seq = Chromosome(13, assembly=BUILD38).sequence(113089709, 113089729)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr14_sequence(self):\\n        expected_seq = \"CCCATGTAGTCCAGGTCAGA\"\\n        seq = Chromosome(14, assembly=BUILD38).sequence(100353686, 100353706)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr15_sequence(self):\\n        expected_seq = \"attaaaatcatccaatttcc\"\\n        seq = Chromosome(15, assembly=BUILD38).sequence(86987986, 86988006)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chr16_sequence(self):\\n        expected_seq = \"TTTCAAGCCACAGTCGAGGA\"\\n        seq = Chromosome(16, assembly=BUILD38).sequence(83670789, 83670809)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr17_sequence(self):\\n        expected_seq = \"aaacatcatctctaccaaaa\"\\n        seq = Chromosome(17, assembly=BUILD38).sequence(80014178, 80014198)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chr18_sequence(self):\\n        expected_seq = \"TGCAAAGAGAAATCCTTgga\"\\n        seq = Chromosome(18, assembly=BUILD38).sequence(67834418, 67834438)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chr19_sequence(self):\\n        expected_seq = \"CTGGGCTGCAGAATCGCTGG\"\\n        seq = Chromosome(19, assembly=BUILD38).sequence(45500047, 45500067)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr20_sequence(self):\\n        expected_seq = \"ATGAGATGGACCAAACGCCC\"\\n        seq = Chromosome(20, assembly=BUILD38).sequence(59743106, 59743126)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr21_sequence(self):\\n        expected_seq = \"GGCCCCCCCGGACCACCAGG\"\\n        seq = Chromosome(21, assembly=BUILD38).sequence(45497642, 45497662)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chr22_sequence(self):\\n        expected_seq = \"CTTTTCATTAACTGGATAAA\"\\n        seq = Chromosome(22, assembly=BUILD38).sequence(43711474, 43711494)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chrX_sequence(self):\\n        expected_seq = \"GGACAACACCtgttaggggc\"\\n        seq = Chromosome(\"X\", assembly=BUILD38).sequence(152811545, 152811565)\\n        self.assertEqual(expected_seq.upper(), seq)\\n\\n    def test_chrY_sequence(self):\\n        expected_seq = \"CAGACCTTCTGCAGTGCACC\"\\n        seq = Chromosome(\"Y\", assembly=BUILD38).sequence(25325643, 25325663)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_chrMT_sequence(self):\\n        expected_seq = \"ATTGTACGGTACCATAAATA\"\\n        seq = Chromosome(\"MT\", assembly=BUILD38).sequence(16121, 16141)\\n        self.assertEqual(expected_seq, seq)\\n\\n    def test_looped_mito(self):\\n        mito_accession = BUILD38_ACCESSIONS[\\'MT\\']\\n        mito_length = ACCESSION_LENGTHS[mito_accession]\\n        expected = \\'CATCACGATGGATCACAGGT\\'\\n\\n        seq = Chromosome(\\'MT\\', BUILD38, loop=True).sequence(mito_length - 10, mito_length + 10)\\n        self.assertEqual(expected, seq)\\n\\n        seq = Chromosome(\\'MT\\', BUILD38, loop=True).sequence(-10, 10)\\n        self.assertEqual(expected, seq)\\n\\n    def test_mito_N(self):\\n        \"\"\"\\n        From mitomap:\\n            *3107del is maintained in this revised sequence with the gap\\n            represented by an \\'N\\'. THIS ALLOWS HISTORICAL NUCLEOTIDE NUMBERING TO\\n            BE MAINTAINED.\\n\\n        We remove this \\'N\\' base since it is only present to preserve numbering and is\\n        not actually part of the observed sequence.\\n        \"\"\"\\n        self.assertEqual(\\'\\', Chromosome(\\'MT\\').sequence(3106, 3107))\\n\\n    def test_RSRS(self):\\n        expected = \\'GGAC\\'\\n        seq = Chromosome(\\'NC_001807.4\\').sequence(750, 754)\\n        self.assertEqual(expected, seq)\\n'"}, {"func_args": {"source": "'from __future__ import print_function\\nfrom __future__ import absolute_import\\nimport unittest\\nfrom seqseek.lib import BUILD37, BUILD38\\nfrom .build_37_tests import TestBuild37\\nfrom .build_38_tests import TestBuild38\\n\\n\\nASSEMBLY_TEST_SUITE = {\\n    BUILD37: TestBuild37,\\n    BUILD38: TestBuild38\\n}\\n\\ndef run_build_test_suite(assembly):\\n    print(\"Running tests for {assembly}\".format(assembly=assembly))\\n    suite = unittest.TestLoader().loadTestsFromTestCase(ASSEMBLY_TEST_SUITE[assembly])\\n    unittest.TextTestRunner(verbosity=3).run(suite)\\n\\ndef test_build_37():\\n    run_build_test_suite(BUILD37)\\n\\ndef test_build_38():\\n    run_build_test_suite(BUILD38)\\n'"}, "return_value": "'from __future__ import print_function\\nfrom __future__ import absolute_import\\nimport unittest\\nfrom seqseek.lib import BUILD37, BUILD38\\nfrom .build_37_tests import TestBuild37\\nfrom .build_38_tests import TestBuild38\\n\\n\\nASSEMBLY_TEST_SUITE = {\\n    BUILD37: TestBuild37,\\n    BUILD38: TestBuild38\\n}\\n\\ndef run_build_test_suite(assembly):\\n    print(\"Running tests for {assembly}\".format(assembly=assembly))\\n    suite = unittest.TestLoader().loadTestsFromTestCase(ASSEMBLY_TEST_SUITE[assembly])\\n    unittest.TextTestRunner(verbosity=3).run(suite)\\n\\ndef test_build_37():\\n    run_build_test_suite(BUILD37)\\n\\ndef test_build_38():\\n    run_build_test_suite(BUILD38)\\n'"}, {"func_args": {"source": "'import os\\nfrom unittest import TestCase\\n\\nfrom seqseek.cli import determine_start_end\\nfrom seqseek.exceptions import TooManyLoops\\nfrom seqseek.chromosome import Chromosome, MissingDataError\\nfrom seqseek.lib import get_data_directory, BUILD37, BUILD37_ACCESSIONS, ACCESSION_LENGTHS, DATA_DIR_VARIABLE\\n\\n\\nclass TestDataDirectory(TestCase):\\n\\n    TEST_DATA_DIR = os.path.join(\\'seqseek\\', \\'tests\\', \\'test_chromosomes\\')\\n\\n    def setUp(self):\\n        os.environ[DATA_DIR_VARIABLE] = TestChromosome.TEST_DATA_DIR\\n\\n    def test_get_data_directory(self):\\n        data_dir = get_data_directory()\\n        self.assertEqual(TestChromosome.TEST_DATA_DIR, data_dir)\\n\\n    def test_make_data_directory(self):\\n        new_dir = os.path.join(TestChromosome.TEST_DATA_DIR, \"test\")\\n        self.assertFalse(os.path.isdir(new_dir))\\n        os.environ[DATA_DIR_VARIABLE] = new_dir\\n        get_data_directory()\\n        self.assertTrue(os.path.isdir(new_dir))\\n        os.rmdir(new_dir)\\n\\n\\nclass TestChromosome(TestCase):\\n\\n    TEST_DATA_DIR = os.path.join(\\'seqseek\\', \\'tests\\', \\'test_chromosomes\\')\\n\\n    def setUp(self):\\n        mt_accession = BUILD37_ACCESSIONS[\\'MT\\']\\n        self._mt_length = ACCESSION_LENGTHS[mt_accession]\\n        os.environ[DATA_DIR_VARIABLE] = TestChromosome.TEST_DATA_DIR\\n        ACCESSION_LENGTHS[mt_accession] = 20\\n\\n    def tearDown(self):\\n        mt_accession = BUILD37_ACCESSIONS[\\'MT\\']\\n        ACCESSION_LENGTHS[mt_accession] = self._mt_length\\n\\n    def test_invalid_assembly(self):\\n        with self.assertRaises(ValueError):\\n            Chromosome(\\'1\\', \\'build_39\\')\\n\\n    def test_invalid_name(self):\\n        with self.assertRaises(ValueError):\\n            Chromosome(\\'0\\', BUILD37)\\n\\n    def test_no_errors(self):\\n        Chromosome(\\'1\\').path()\\n        Chromosome(\\'1\\').sorted_chromosome_length_tuples(assembly=BUILD37)\\n        Chromosome(\\'1\\').filename()\\n\\n    def test_chr1_sequences(self):\\n        expected_seq = \\'GGGGCGGGAGGACGGGCCCG\\'\\n        seq = Chromosome(1).sequence(0, 20)\\n        self.assertEqual(seq, expected_seq)\\n        self.assertEqual(len(seq), 20)\\n        expected_seq = \\'GGGAG\\'\\n        seq = Chromosome(1).sequence(5, 10)\\n        self.assertEqual(seq, expected_seq)\\n\\n    def test_chrMT_sequence(self):\\n        expected_seq = \\'GATCACAGGTCTTCACCCT\\'\\n        seq = Chromosome(\\'MT\\').sequence(0, 20)\\n        self.assertEqual(seq, expected_seq)\\n        self.assertEqual(len(seq), 19)  # the N base was removed\\n        expected_seq = \\'CAGGT\\'\\n        seq = Chromosome(\\'MT\\').sequence(5, 10)\\n        self.assertEqual(seq, expected_seq)\\n\\n    def test_rCRS_sequence_retain_N(self):\\n        expected_seq = \\'GATCACAGGTCTNTCACCCT\\'\\n        seq = Chromosome(\\'MT\\', RCRS_N_remove=False).sequence(0, 20)\\n        self.assertEqual(seq, expected_seq)\\n        self.assertTrue(\\'N\\' in seq)  # the N base was *not* removed\\n\\n    def test_mito_loop_end(self):\\n        expected_seq = \\'CTTCACCCTGATCACAGGT\\'\\n\\n        seq = Chromosome(\\'MT\\', loop=True).sequence(10, 30)\\n        self.assertEqual(seq, expected_seq)\\n\\n        seq = Chromosome(\\'MT\\', loop=True).sequence(-10, 10)\\n        self.assertEqual(seq, expected_seq)\\n\\n    def test_others_are_not_circular(self):\\n        with self.assertRaises(ValueError):\\n            Chromosome(1, loop=True).sequence(0, 1)\\n\\n    def test_too_many_loops(self):\\n        \"\"\"should never return a sequence longer than the length of the contig\"\"\"\\n        mt_accession = BUILD37_ACCESSIONS[\\'MT\\']\\n        mt_length = ACCESSION_LENGTHS[mt_accession]\\n        Chromosome(\\'MT\\', loop=True).sequence(0, mt_length)\\n        with self.assertRaises(TooManyLoops):\\n            Chromosome(\\'MT\\', loop=True).sequence(0, mt_length + 1)\\n\\n        Chromosome(\\'MT\\', loop=True).sequence(-1, mt_length - 1)\\n        with self.assertRaises(TooManyLoops):\\n            Chromosome(\\'MT\\', loop=True).sequence(-1, mt_length)\\n\\n    def test_load_by_accession(self):\\n        # mostly duped from test_chr1_sequences\\n        expected_seq = \\'GGGGCGGGAGGACGGGCCCG\\'\\n        seq = Chromosome(\\'NC_000001.10\\').sequence(0, 20)\\n        self.assertEqual(seq, expected_seq)\\n        self.assertEqual(len(seq), 20)\\n        expected_seq = \\'GGGAG\\'\\n        seq = Chromosome(\\'NC_000001.10\\').sequence(5, 10)\\n        self.assertEqual(seq, expected_seq)\\n\\n\\nclass TestInvalidQueries(TestCase):\\n\\n    def test_invalid_chromosome_name(self):\\n        with self.assertRaises(ValueError):\\n            Chromosome(23).sequence(123456, 123457)\\n\\n    def test_missing_chromosome(self):\\n        with self.assertRaises(MissingDataError):\\n            Chromosome(\\'18\\').sequence(0, 20)\\n\\n    def test_invalid_start_position(self):\\n        with self.assertRaises(ValueError):\\n            Chromosome(1).sequence(-1, 10)\\n\\n    def test_invalid_end_position(self):\\n        with self.assertRaises(ValueError):\\n            Chromosome(1).sequence(123457, 123456)\\n\\n    def test_out_of_range_start_position(self):\\n        with self.assertRaises(ValueError):\\n            Chromosome(1).sequence(249250623, 249250625)\\n\\n    def test_out_of_range_end_position(self):\\n        with self.assertRaises(ValueError):\\n            Chromosome(1).sequence(249250619, 249250622)\\n\\n\\nclass TestCLI(TestCase):\\n\\n    def test_determine_start_end(self):\\n        expected = (10000, 10100)\\n\\n        observed = determine_start_end(\\'10000\\', \\'10100\\')\\n        self.assertEqual(observed, expected)\\n\\n        observed = determine_start_end(\\'10000\\', \\'+100\\')\\n        self.assertEqual(observed, expected)\\n\\n        observed = determine_start_end(\\'-100\\', \\'10100\\')\\n        self.assertEqual(observed, expected)\\n\\n    def test_determine_start_end_cannot_both_relative(self):\\n        with self.assertRaises(ValueError):\\n            determine_start_end(\\'-100\\', \\'+100\\')\\n\\n    def test_determine_start_end_non_integer(self):\\n        with self.assertRaises(ValueError):\\n            determine_start_end(\\'foo\\', \\'10100\\')\\n        with self.assertRaises(ValueError):\\n            determine_start_end(\\'10000\\', \\'bar\\')\\n        with self.assertRaises(ValueError):\\n            determine_start_end(\\'-foo\\', \\'10100\\')\\n        with self.assertRaises(ValueError):\\n            determine_start_end(\\'10000\\', \\'+bar\\')\\n        with self.assertRaises(ValueError):\\n            determine_start_end(\\'foo\\', \\'bar\\')\\n'"}, "return_value": "'import os\\nfrom unittest import TestCase\\n\\nfrom seqseek.cli import determine_start_end\\nfrom seqseek.exceptions import TooManyLoops\\nfrom seqseek.chromosome import Chromosome, MissingDataError\\nfrom seqseek.lib import get_data_directory, BUILD37, BUILD37_ACCESSIONS, ACCESSION_LENGTHS, DATA_DIR_VARIABLE\\n\\n\\nclass TestDataDirectory(TestCase):\\n\\n    TEST_DATA_DIR = os.path.join(\\'seqseek\\', \\'tests\\', \\'test_chromosomes\\')\\n\\n    def setUp(self):\\n        os.environ[DATA_DIR_VARIABLE] = TestChromosome.TEST_DATA_DIR\\n\\n    def test_get_data_directory(self):\\n        data_dir = get_data_directory()\\n        self.assertEqual(TestChromosome.TEST_DATA_DIR, data_dir)\\n\\n    def test_make_data_directory(self):\\n        new_dir = os.path.join(TestChromosome.TEST_DATA_DIR, \"test\")\\n        self.assertFalse(os.path.isdir(new_dir))\\n        os.environ[DATA_DIR_VARIABLE] = new_dir\\n        get_data_directory()\\n        self.assertTrue(os.path.isdir(new_dir))\\n        os.rmdir(new_dir)\\n\\n\\nclass TestChromosome(TestCase):\\n\\n    TEST_DATA_DIR = os.path.join(\\'seqseek\\', \\'tests\\', \\'test_chromosomes\\')\\n\\n    def setUp(self):\\n        mt_accession = BUILD37_ACCESSIONS[\\'MT\\']\\n        self._mt_length = ACCESSION_LENGTHS[mt_accession]\\n        os.environ[DATA_DIR_VARIABLE] = TestChromosome.TEST_DATA_DIR\\n        ACCESSION_LENGTHS[mt_accession] = 20\\n\\n    def tearDown(self):\\n        mt_accession = BUILD37_ACCESSIONS[\\'MT\\']\\n        ACCESSION_LENGTHS[mt_accession] = self._mt_length\\n\\n    def test_invalid_assembly(self):\\n        with self.assertRaises(ValueError):\\n            Chromosome(\\'1\\', \\'build_39\\')\\n\\n    def test_invalid_name(self):\\n        with self.assertRaises(ValueError):\\n            Chromosome(\\'0\\', BUILD37)\\n\\n    def test_no_errors(self):\\n        Chromosome(\\'1\\').path()\\n        Chromosome(\\'1\\').sorted_chromosome_length_tuples(assembly=BUILD37)\\n        Chromosome(\\'1\\').filename()\\n\\n    def test_chr1_sequences(self):\\n        expected_seq = \\'GGGGCGGGAGGACGGGCCCG\\'\\n        seq = Chromosome(1).sequence(0, 20)\\n        self.assertEqual(seq, expected_seq)\\n        self.assertEqual(len(seq), 20)\\n        expected_seq = \\'GGGAG\\'\\n        seq = Chromosome(1).sequence(5, 10)\\n        self.assertEqual(seq, expected_seq)\\n\\n    def test_chrMT_sequence(self):\\n        expected_seq = \\'GATCACAGGTCTTCACCCT\\'\\n        seq = Chromosome(\\'MT\\').sequence(0, 20)\\n        self.assertEqual(seq, expected_seq)\\n        self.assertEqual(len(seq), 19)  # the N base was removed\\n        expected_seq = \\'CAGGT\\'\\n        seq = Chromosome(\\'MT\\').sequence(5, 10)\\n        self.assertEqual(seq, expected_seq)\\n\\n    def test_rCRS_sequence_retain_N(self):\\n        expected_seq = \\'GATCACAGGTCTNTCACCCT\\'\\n        seq = Chromosome(\\'MT\\', RCRS_N_remove=False).sequence(0, 20)\\n        self.assertEqual(seq, expected_seq)\\n        self.assertTrue(\\'N\\' in seq)  # the N base was *not* removed\\n\\n    def test_mito_loop_end(self):\\n        expected_seq = \\'CTTCACCCTGATCACAGGT\\'\\n\\n        seq = Chromosome(\\'MT\\', loop=True).sequence(10, 30)\\n        self.assertEqual(seq, expected_seq)\\n\\n        seq = Chromosome(\\'MT\\', loop=True).sequence(-10, 10)\\n        self.assertEqual(seq, expected_seq)\\n\\n    def test_others_are_not_circular(self):\\n        with self.assertRaises(ValueError):\\n            Chromosome(1, loop=True).sequence(0, 1)\\n\\n    def test_too_many_loops(self):\\n        \"\"\"should never return a sequence longer than the length of the contig\"\"\"\\n        mt_accession = BUILD37_ACCESSIONS[\\'MT\\']\\n        mt_length = ACCESSION_LENGTHS[mt_accession]\\n        Chromosome(\\'MT\\', loop=True).sequence(0, mt_length)\\n        with self.assertRaises(TooManyLoops):\\n            Chromosome(\\'MT\\', loop=True).sequence(0, mt_length + 1)\\n\\n        Chromosome(\\'MT\\', loop=True).sequence(-1, mt_length - 1)\\n        with self.assertRaises(TooManyLoops):\\n            Chromosome(\\'MT\\', loop=True).sequence(-1, mt_length)\\n\\n    def test_load_by_accession(self):\\n        # mostly duped from test_chr1_sequences\\n        expected_seq = \\'GGGGCGGGAGGACGGGCCCG\\'\\n        seq = Chromosome(\\'NC_000001.10\\').sequence(0, 20)\\n        self.assertEqual(seq, expected_seq)\\n        self.assertEqual(len(seq), 20)\\n        expected_seq = \\'GGGAG\\'\\n        seq = Chromosome(\\'NC_000001.10\\').sequence(5, 10)\\n        self.assertEqual(seq, expected_seq)\\n\\n\\nclass TestInvalidQueries(TestCase):\\n\\n    def test_invalid_chromosome_name(self):\\n        with self.assertRaises(ValueError):\\n            Chromosome(23).sequence(123456, 123457)\\n\\n    def test_missing_chromosome(self):\\n        with self.assertRaises(MissingDataError):\\n            Chromosome(\\'18\\').sequence(0, 20)\\n\\n    def test_invalid_start_position(self):\\n        with self.assertRaises(ValueError):\\n            Chromosome(1).sequence(-1, 10)\\n\\n    def test_invalid_end_position(self):\\n        with self.assertRaises(ValueError):\\n            Chromosome(1).sequence(123457, 123456)\\n\\n    def test_out_of_range_start_position(self):\\n        with self.assertRaises(ValueError):\\n            Chromosome(1).sequence(249250623, 249250625)\\n\\n    def test_out_of_range_end_position(self):\\n        with self.assertRaises(ValueError):\\n            Chromosome(1).sequence(249250619, 249250622)\\n\\n\\nclass TestCLI(TestCase):\\n\\n    def test_determine_start_end(self):\\n        expected = (10000, 10100)\\n\\n        observed = determine_start_end(\\'10000\\', \\'10100\\')\\n        self.assertEqual(observed, expected)\\n\\n        observed = determine_start_end(\\'10000\\', \\'+100\\')\\n        self.assertEqual(observed, expected)\\n\\n        observed = determine_start_end(\\'-100\\', \\'10100\\')\\n        self.assertEqual(observed, expected)\\n\\n    def test_determine_start_end_cannot_both_relative(self):\\n        with self.assertRaises(ValueError):\\n            determine_start_end(\\'-100\\', \\'+100\\')\\n\\n    def test_determine_start_end_non_integer(self):\\n        with self.assertRaises(ValueError):\\n            determine_start_end(\\'foo\\', \\'10100\\')\\n        with self.assertRaises(ValueError):\\n            determine_start_end(\\'10000\\', \\'bar\\')\\n        with self.assertRaises(ValueError):\\n            determine_start_end(\\'-foo\\', \\'10100\\')\\n        with self.assertRaises(ValueError):\\n            determine_start_end(\\'10000\\', \\'+bar\\')\\n        with self.assertRaises(ValueError):\\n            determine_start_end(\\'foo\\', \\'bar\\')\\n'"}]}}