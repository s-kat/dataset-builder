{"mkrel": {"line": 859, "args": [{"func_args": {"nodeid": "'tests/test_mux.py::test_can_capture_a_pane'"}, "return_value": "'tests/test_mux.py::test_can_capture_a_pane'"}, {"func_args": {"nodeid": "'tests/test_mux.py::test_can_send_content_to_the_screen'"}, "return_value": "'tests/test_mux.py::test_can_send_content_to_the_screen'"}, {"func_args": {"nodeid": "'tests/test_mux.py::test_can_send_content_to_the_screen'"}, "return_value": "'tests/test_mux.py::test_can_send_content_to_the_screen'"}, {"func_args": {"nodeid": "'tests/test_mux.py::test_can_detect_when_server_dies'"}, "return_value": "'tests/test_mux.py::test_can_detect_when_server_dies'"}, {"func_args": {"nodeid": "'tests/test_mux.py::test_can_detect_when_server_dies'"}, "return_value": "'tests/test_mux.py::test_can_detect_when_server_dies'"}], "text": "def mkrel(nodeid):\n            line = self.config.cwd_relative_nodeid(nodeid)\n            if domain and line.endswith(domain):\n                line = line[: -len(domain)]\n                values = domain.split(\"[\")\n                values[0] = values[0].replace(\".\", \"::\")  # don't replace '.' in params\n                line += \"[\".join(values)\n            return line"}, "_format_trimmed": {"line": 1262, "args": [{"func_args": {"format": "' - {}'", "msg": "\"FileNotFoundError: [Errno 2] No such file or directory: 'tmux'\"", "available_width": "19"}, "return_value": "' - FileNotFoundE...'"}, {"func_args": {"format": "' - {}'", "msg": "\"FileNotFoundError: [Errno 2] No such file or directory: 'tmux'\"", "available_width": "34"}, "return_value": "' - FileNotFoundError: [Errno 2]...'"}, {"func_args": {"format": "' - {}'", "msg": "\"FileNotFoundError: [Errno 2] No such file or directory: 'tmux'\"", "available_width": "29"}, "return_value": "' - FileNotFoundError: [Err...'"}, {"func_args": {"format": "' - {}'", "msg": "\"FileNotFoundError: [Errno 2] No such file or directory: 'tmux'\"", "available_width": "35"}, "return_value": "' - FileNotFoundError: [Errno 2] ...'"}, {"func_args": {"format": "' - {}'", "msg": "\"FileNotFoundError: [Errno 2] No such file or directory: 'tmux'\"", "available_width": "32"}, "return_value": "' - FileNotFoundError: [Errno ...'"}, {"func_args": {"format": "' - {}'", "msg": "\"FileNotFoundError: [Errno 2] No such file or directory: 'tmux'\"", "available_width": "25"}, "return_value": "' - FileNotFoundError: ...'"}, {"func_args": {"format": "' - {}'", "msg": "\"FileNotFoundError: [Errno 2] No such file or directory: 'tmux'\"", "available_width": "34"}, "return_value": "' - FileNotFoundError: [Errno 2]...'"}, {"func_args": {"format": "' - {}'", "msg": "\"FileNotFoundError: [Errno 2] No such file or directory: 'tmux'\"", "available_width": "11"}, "return_value": "' - FileN...'"}, {"func_args": {"format": "' - {}'", "msg": "\"FileNotFoundError: [Errno 2] No such file or directory: 'tmux'\"", "available_width": "21"}, "return_value": "' - FileNotFoundErr...'"}, {"func_args": {"format": "' - {}'", "msg": "\"FileNotFoundError: [Errno 2] No such file or directory: 'tmux'\"", "available_width": "6"}, "return_value": "' - ...'"}, {"func_args": {"format": "' - {}'", "msg": "\"FileNotFoundError: [Errno 2] No such file or directory: 'tmux'\"", "available_width": "28"}, "return_value": "' - FileNotFoundError: [Er...'"}, {"func_args": {"format": "' - {}'", "msg": "\"FileNotFoundError: [Errno 2] No such file or directory: 'tmux'\"", "available_width": "21"}, "return_value": "' - FileNotFoundErr...'"}, {"func_args": {"format": "' - {}'", "msg": "\"FileNotFoundError: [Errno 2] No such file or directory: 'tmux'\"", "available_width": "24"}, "return_value": "' - FileNotFoundError:...'"}, {"func_args": {"format": "' - {}'", "msg": "\"FileNotFoundError: [Errno 2] No such file or directory: 'tmux'\"", "available_width": "15"}, "return_value": "' - FileNotFo...'"}, {"func_args": {"format": "' - {}'", "msg": "\"FileNotFoundError: [Errno 2] No such file or directory: 'tmux'\"", "available_width": "21"}, "return_value": "' - FileNotFoundErr...'"}, {"func_args": {"format": "' - {}'", "msg": "\"FileNotFoundError: [Errno 2] No such file or directory: 'tmux'\"", "available_width": "17"}, "return_value": "' - FileNotFoun...'"}, {"func_args": {"format": "' - {}'", "msg": "\"FileNotFoundError: [Errno 2] No such file or directory: 'tmux'\"", "available_width": "31"}, "return_value": "' - FileNotFoundError: [Errno...'"}, {"func_args": {"format": "' - {}'", "msg": "\"FileNotFoundError: [Errno 2] No such file or directory: 'tmux'\"", "available_width": "19"}, "return_value": "' - FileNotFoundE...'"}, {"func_args": {"format": "' - {}'", "msg": "\"FileNotFoundError: [Errno 2] No such file or directory: 'tmux'\"", "available_width": "22"}, "return_value": "' - FileNotFoundErro...'"}], "text": "def _format_trimmed(format: str, msg: str, available_width: int) -> Optional[str]:\n    \"\"\"Format msg into format, ellipsizing it if doesn't fit in available_width.\n\n    Returns None if even the ellipsis can't fit.\n    \"\"\"\n    # Only use the first line.\n    i = msg.find(\"\\n\")\n    if i != -1:\n        msg = msg[:i]\n\n    ellipsis = \"...\"\n    format_width = wcswidth(format.format(\"\"))\n    if format_width + len(ellipsis) > available_width:\n        return None\n\n    if format_width + wcswidth(msg) > available_width:\n        available_width -= len(ellipsis)\n        msg = msg[:available_width]\n        while format_width + wcswidth(msg) > available_width:\n            msg = msg[:-1]\n        msg += ellipsis\n\n    return format.format(msg)"}, "pluralize": {"line": 1350, "args": [{"func_args": {"count": "19", "noun": "'failed'"}, "return_value": "(19, 'failed')"}, {"func_args": {"count": "1", "noun": "'warnings'"}, "return_value": "(1, 'warning')"}], "text": "def pluralize(count: int, noun: str) -> Tuple[int, str]:\n    # No need to pluralize words such as `failed` or `passed`.\n    if noun not in [\"error\", \"warnings\", \"test\"]:\n        return count, noun\n\n    # The `warnings` key is plural. To avoid API breakage, we keep it that way but\n    # set it to singular here so we can determine plurality in the same way as we do\n    # for `error`.\n    noun = noun.replace(\"warnings\", \"warning\")\n\n    return count, noun + \"s\" if count != 1 else noun"}, "format_session_duration": {"line": 1377, "args": [{"func_args": {"seconds": "8.777191638946533"}, "return_value": "'8.78s'"}], "text": "def format_session_duration(seconds: float) -> str:\n    \"\"\"Format the given seconds in a human readable manner to show in the final summary.\"\"\"\n    if seconds < 60:\n        return f\"{seconds:.2f}s\"\n    else:\n        dt = datetime.timedelta(seconds=int(seconds))\n        return f\"{seconds:.2f}s ({dt})\""}, "get_terminal_width": {"line": 15, "args": [{"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}], "text": "def get_terminal_width() -> int:\n    width, _ = shutil.get_terminal_size(fallback=(80, 24))\n\n    # The Windows get_terminal_size may be bogus, let's sanify a bit.\n    if width < 40:\n        width = 80\n\n    return width"}, "wcswidth": {"line": 43, "args": [{"func_args": {"s": "'tests/test_mux.py::test_can_capture_a_pane FAILED'"}, "return_value": "49"}, {"func_args": {"s": "'tests/test_mux.py::test_can_send_content_to_the_screen FAILED'"}, "return_value": "61"}, {"func_args": {"s": "'tests/test_mux.py::test_can_detect_when_server_dies FAILED'"}, "return_value": "58"}, {"func_args": {"s": "'FAILED tests/test_hecate.py::test_can_launch_a_simple_program'"}, "return_value": "61"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "\"FileNotFoundError: [Errno 2] No such file or directory: 'tmux'\""}, "return_value": "62"}, {"func_args": {"s": "'FileNotFoundErro'"}, "return_value": "16"}, {"func_args": {"s": "'FileNotFoundErr'"}, "return_value": "15"}, {"func_args": {"s": "'FileNotFoundEr'"}, "return_value": "14"}, {"func_args": {"s": "'FileNotFoundE'"}, "return_value": "13"}, {"func_args": {"s": "'FAILED tests/test_hecate.py::test_can_kill_vim'"}, "return_value": "46"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "\"FileNotFoundError: [Errno 2] No such file or directory: 'tmux'\""}, "return_value": "62"}, {"func_args": {"s": "'FileNotFoundError: [Errno 2] No'"}, "return_value": "31"}, {"func_args": {"s": "'FileNotFoundError: [Errno 2] N'"}, "return_value": "30"}, {"func_args": {"s": "'FileNotFoundError: [Errno 2] '"}, "return_value": "29"}, {"func_args": {"s": "'FileNotFoundError: [Errno 2]'"}, "return_value": "28"}, {"func_args": {"s": "'FAILED tests/test_hecate.py::test_can_write_unicode'"}, "return_value": "51"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "\"FileNotFoundError: [Errno 2] No such file or directory: 'tmux'\""}, "return_value": "62"}, {"func_args": {"s": "'FileNotFoundError: [Errno '"}, "return_value": "26"}, {"func_args": {"s": "'FileNotFoundError: [Errno'"}, "return_value": "25"}, {"func_args": {"s": "'FileNotFoundError: [Errn'"}, "return_value": "24"}, {"func_args": {"s": "'FileNotFoundError: [Err'"}, "return_value": "23"}, {"func_args": {"s": "'FAILED tests/test_hecate.py::test_can_run_vim'"}, "return_value": "45"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "\"FileNotFoundError: [Errno 2] No such file or directory: 'tmux'\""}, "return_value": "62"}, {"func_args": {"s": "'FileNotFoundError: [Errno 2] No '"}, "return_value": "32"}, {"func_args": {"s": "'FileNotFoundError: [Errno 2] No'"}, "return_value": "31"}, {"func_args": {"s": "'FileNotFoundError: [Errno 2] N'"}, "return_value": "30"}, {"func_args": {"s": "'FileNotFoundError: [Errno 2] '"}, "return_value": "29"}, {"func_args": {"s": "'FAILED tests/test_hecate.py::test_can_send_enter'"}, "return_value": "48"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "\"FileNotFoundError: [Errno 2] No such file or directory: 'tmux'\""}, "return_value": "62"}, {"func_args": {"s": "'FileNotFoundError: [Errno 2] '"}, "return_value": "29"}, {"func_args": {"s": "'FileNotFoundError: [Errno 2]'"}, "return_value": "28"}, {"func_args": {"s": "'FileNotFoundError: [Errno 2'"}, "return_value": "27"}, {"func_args": {"s": "'FileNotFoundError: [Errno '"}, "return_value": "26"}, {"func_args": {"s": "'FAILED tests/test_hecate.py::test_reports_abnormal_exit'"}, "return_value": "55"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "\"FileNotFoundError: [Errno 2] No such file or directory: 'tmux'\""}, "return_value": "62"}, {"func_args": {"s": "'FileNotFoundError: [Er'"}, "return_value": "22"}, {"func_args": {"s": "'FileNotFoundError: [E'"}, "return_value": "21"}, {"func_args": {"s": "'FileNotFoundError: ['"}, "return_value": "20"}, {"func_args": {"s": "'FileNotFoundError: '"}, "return_value": "19"}, {"func_args": {"s": "'FAILED tests/test_hecate.py::test_can_send_eof'"}, "return_value": "46"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "\"FileNotFoundError: [Errno 2] No such file or directory: 'tmux'\""}, "return_value": "62"}, {"func_args": {"s": "'FileNotFoundError: [Errno 2] No'"}, "return_value": "31"}, {"func_args": {"s": "'FileNotFoundError: [Errno 2] N'"}, "return_value": "30"}, {"func_args": {"s": "'FileNotFoundError: [Errno 2] '"}, "return_value": "29"}, {"func_args": {"s": "'FileNotFoundError: [Errno 2]'"}, "return_value": "28"}, {"func_args": {"s": "'FAILED tests/test_hecate.py::test_sets_the_console_size_appropriately'"}, "return_value": "69"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "\"FileNotFoundError: [Errno 2] No such file or directory: 'tmux'\""}, "return_value": "62"}, {"func_args": {"s": "'FileNotF'"}, "return_value": "8"}, {"func_args": {"s": "'FileNot'"}, "return_value": "7"}, {"func_args": {"s": "'FileNo'"}, "return_value": "6"}, {"func_args": {"s": "'FileN'"}, "return_value": "5"}, {"func_args": {"s": "'FAILED tests/test_hecate.py::test_can_send_signals_to_child'"}, "return_value": "59"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "\"FileNotFoundError: [Errno 2] No such file or directory: 'tmux'\""}, "return_value": "62"}, {"func_args": {"s": "'FileNotFoundError:'"}, "return_value": "18"}, {"func_args": {"s": "'FileNotFoundError'"}, "return_value": "17"}, {"func_args": {"s": "'FileNotFoundErro'"}, "return_value": "16"}, {"func_args": {"s": "'FileNotFoundErr'"}, "return_value": "15"}, {"func_args": {"s": "'FAILED tests/test_hecate.py::test_uses_last_screenshot_if_server_goes_away'"}, "return_value": "74"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "\"FileNotFoundError: [Errno 2] No such file or directory: 'tmux'\""}, "return_value": "62"}, {"func_args": {"s": "'Fil'"}, "return_value": "3"}, {"func_args": {"s": "'Fi'"}, "return_value": "2"}, {"func_args": {"s": "'F'"}, "return_value": "1"}, {"func_args": {"s": "''"}, "return_value": "0"}, {"func_args": {"s": "'FAILED tests/test_mux.py::test_muxes_are_independent'"}, "return_value": "52"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "\"FileNotFoundError: [Errno 2] No such file or directory: 'tmux'\""}, "return_value": "62"}, {"func_args": {"s": "'FileNotFoundError: [Errno'"}, "return_value": "25"}, {"func_args": {"s": "'FileNotFoundError: [Errn'"}, "return_value": "24"}, {"func_args": {"s": "'FileNotFoundError: [Err'"}, "return_value": "23"}, {"func_args": {"s": "'FileNotFoundError: [Er'"}, "return_value": "22"}, {"func_args": {"s": "'FAILED tests/test_mux.py::test_has_no_buffers_to_start_with'"}, "return_value": "59"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "\"FileNotFoundError: [Errno 2] No such file or directory: 'tmux'\""}, "return_value": "62"}, {"func_args": {"s": "'FileNotFoundError:'"}, "return_value": "18"}, {"func_args": {"s": "'FileNotFoundError'"}, "return_value": "17"}, {"func_args": {"s": "'FileNotFoundErro'"}, "return_value": "16"}, {"func_args": {"s": "'FileNotFoundErr'"}, "return_value": "15"}, {"func_args": {"s": "'FAILED tests/test_mux.py::test_can_save_data_to_a_buffer'"}, "return_value": "56"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "\"FileNotFoundError: [Errno 2] No such file or directory: 'tmux'\""}, "return_value": "62"}, {"func_args": {"s": "'FileNotFoundError: [E'"}, "return_value": "21"}, {"func_args": {"s": "'FileNotFoundError: ['"}, "return_value": "20"}, {"func_args": {"s": "'FileNotFoundError: '"}, "return_value": "19"}, {"func_args": {"s": "'FileNotFoundError:'"}, "return_value": "18"}, {"func_args": {"s": "'FAILED tests/test_mux.py::test_can_set_data_to_an_existing_buffer'"}, "return_value": "65"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "\"FileNotFoundError: [Errno 2] No such file or directory: 'tmux'\""}, "return_value": "62"}, {"func_args": {"s": "'FileNotFound'"}, "return_value": "12"}, {"func_args": {"s": "'FileNotFoun'"}, "return_value": "11"}, {"func_args": {"s": "'FileNotFou'"}, "return_value": "10"}, {"func_args": {"s": "'FileNotFo'"}, "return_value": "9"}, {"func_args": {"s": "'FAILED tests/test_mux.py::test_starts_with_a_single_session'"}, "return_value": "59"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "\"FileNotFoundError: [Errno 2] No such file or directory: 'tmux'\""}, "return_value": "62"}, {"func_args": {"s": "'FileNotFoundError:'"}, "return_value": "18"}, {"func_args": {"s": "'FileNotFoundError'"}, "return_value": "17"}, {"func_args": {"s": "'FileNotFoundErro'"}, "return_value": "16"}, {"func_args": {"s": "'FileNotFoundErr'"}, "return_value": "15"}, {"func_args": {"s": "'FAILED tests/test_mux.py::test_creates_sessions_of_desired_name'"}, "return_value": "63"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "\"FileNotFoundError: [Errno 2] No such file or directory: 'tmux'\""}, "return_value": "62"}, {"func_args": {"s": "'FileNotFoundEr'"}, "return_value": "14"}, {"func_args": {"s": "'FileNotFoundE'"}, "return_value": "13"}, {"func_args": {"s": "'FileNotFound'"}, "return_value": "12"}, {"func_args": {"s": "'FileNotFoun'"}, "return_value": "11"}, {"func_args": {"s": "'FAILED tests/test_mux.py::test_can_capture_a_pane'"}, "return_value": "49"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "\"FileNotFoundError: [Errno 2] No such file or directory: 'tmux'\""}, "return_value": "62"}, {"func_args": {"s": "'FileNotFoundError: [Errno 2]'"}, "return_value": "28"}, {"func_args": {"s": "'FileNotFoundError: [Errno 2'"}, "return_value": "27"}, {"func_args": {"s": "'FileNotFoundError: [Errno '"}, "return_value": "26"}, {"func_args": {"s": "'FileNotFoundError: [Errno'"}, "return_value": "25"}, {"func_args": {"s": "'FAILED tests/test_mux.py::test_can_send_content_to_the_screen'"}, "return_value": "61"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "\"FileNotFoundError: [Errno 2] No such file or directory: 'tmux'\""}, "return_value": "62"}, {"func_args": {"s": "'FileNotFoundErro'"}, "return_value": "16"}, {"func_args": {"s": "'FileNotFoundErr'"}, "return_value": "15"}, {"func_args": {"s": "'FileNotFoundEr'"}, "return_value": "14"}, {"func_args": {"s": "'FileNotFoundE'"}, "return_value": "13"}, {"func_args": {"s": "'FAILED tests/test_mux.py::test_can_detect_when_server_dies'"}, "return_value": "58"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "\"FileNotFoundError: [Errno 2] No such file or directory: 'tmux'\""}, "return_value": "62"}, {"func_args": {"s": "'FileNotFoundError: '"}, "return_value": "19"}, {"func_args": {"s": "'FileNotFoundError:'"}, "return_value": "18"}, {"func_args": {"s": "'FileNotFoundError'"}, "return_value": "17"}, {"func_args": {"s": "'FileNotFoundErro'"}, "return_value": "16"}], "text": "def wcswidth(s: str) -> int:\n    \"\"\"Determine how many columns are needed to display a string in a terminal.\n\n    Returns -1 if the string contains non-printable characters.\n    \"\"\"\n    width = 0\n    for c in unicodedata.normalize(\"NFC\", s):\n        wc = wcwidth(c)\n        if wc < 0:\n            return -1\n        width += wc\n    return width"}, "wcwidth": {"line": 4, "args": [{"func_args": {"c": "'-'"}, "return_value": "1"}, {"func_args": {"c": "'N'"}, "return_value": "1"}, {"func_args": {"c": "'['"}, "return_value": "1"}, {"func_args": {"c": "'2'"}, "return_value": "1"}, {"func_args": {"c": "']'"}, "return_value": "1"}, {"func_args": {"c": "\"'\""}, "return_value": "1"}]}, "_get_stderr_fileno": {"line": 68, "args": [{"func_args": {}, "return_value": "2"}]}, "scopemismatch": {"line": 799, "args": [{"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}], "text": "def scopemismatch(currentscope: \"_Scope\", newscope: \"_Scope\") -> bool:\n    return scopes.index(newscope) > scopes.index(currentscope)"}}