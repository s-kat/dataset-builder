{"_get_plugin_specs_as_list": {"line": 595, "args": [{"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "None"}, "return_value": "[]"}], "text": "def _get_plugin_specs_as_list(specs):\n    \"\"\"\n    Parses a list of \"plugin specs\" and returns a list of plugin names.\n\n    Plugin specs can be given as a list of strings separated by \",\" or already as a list/tuple in\n    which case it is returned as a list. Specs can also be `None` in which case an\n    empty list is returned.\n    \"\"\"\n    if specs is not None and not isinstance(specs, types.ModuleType):\n        if isinstance(specs, six.string_types):\n            specs = specs.split(\",\") if specs else []\n        if not isinstance(specs, (list, tuple)):\n            raise UsageError(\n                \"Plugin specs must be a ','-separated string or a \"\n                \"list/tuple of strings for plugin names. Given: %r\" % specs\n            )\n        return list(specs)\n    return []"}, "_assertion_supported": {"line": 1125, "args": [{"func_args": {}, "return_value": "True"}], "text": "def _assertion_supported():\n    try:\n        assert False\n    except AssertionError:\n        return True\n    else:\n        return False"}, "main": {"line": 52, "args": [{"func_args": {"args": "None", "plugins": "None"}, "return_value": "5"}], "text": "def main(args=None, plugins=None):\n    \"\"\" return exit code, after performing an in-process test run.\n\n    :arg args: list of command line arguments.\n\n    :arg plugins: list of plugin objects to be auto-registered during\n                  initialization.\n    \"\"\"\n    from _pytest.main import EXIT_USAGEERROR\n\n    try:\n        try:\n            config = _prepareconfig(args, plugins)\n        except ConftestImportFailure as e:\n            exc_info = ExceptionInfo(e.excinfo)\n            tw = py.io.TerminalWriter(sys.stderr)\n            tw.line(\n                \"ImportError while loading conftest '{e.path}'.\".format(e=e), red=True\n            )\n            exc_info.traceback = exc_info.traceback.filter(filter_traceback)\n            exc_repr = (\n                exc_info.getrepr(style=\"short\", chain=False)\n                if exc_info.traceback\n                else exc_info.exconly()\n            )\n            formatted_tb = safe_str(exc_repr)\n            for line in formatted_tb.splitlines():\n                tw.line(line.rstrip(), red=True)\n            return 4\n        else:\n            try:\n                return config.hook.pytest_cmdline_main(config=config)\n            finally:\n                config._ensure_unconfigure()\n    except UsageError as e:\n        tw = py.io.TerminalWriter(sys.stderr)\n        for msg in e.args:\n            tw.line(\"ERROR: {}\\n\".format(msg), red=True)\n        return EXIT_USAGEERROR"}, "scope2index": {"line": 683, "args": [{"func_args": {"scope": "'session'", "descr": "\"Fixture 'pytestconfig'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'capfd'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'capfdbinary'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'capsys'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'capsysbinary'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'tmp_path'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'session'", "descr": "\"Fixture 'tmp_path_factory'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'tmpdir'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'session'", "descr": "\"Fixture 'tmpdir_factory'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'monkeypatch'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'recwarn'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'record_property'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'session'", "descr": "\"Fixture 'record_testsuite_property'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'record_xml_attribute'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'session'", "descr": "\"Fixture 'doctest_namespace'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'cache'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'caplog'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'cov'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'no_cover'\"", "where": "None"}, "return_value": "4"}], "text": "def scope2index(scope, descr, where=None):\n    \"\"\"Look up the index of ``scope`` and raise a descriptive value error\n    if not defined.\n    \"\"\"\n    try:\n        return scopes.index(scope)\n    except ValueError:\n        fail(\n            \"{} {}got an unexpected scope value '{}'\".format(\n                descr, \"from {} \".format(where) if where else \"\", scope\n            ),\n            pytrace=False,\n        )"}, "reorder_items": {"line": 214, "args": [{"func_args": {"items": "[]"}, "return_value": "[]"}], "text": "def reorder_items(items):\n    argkeys_cache = {}\n    items_by_argkey = {}\n    for scopenum in range(0, scopenum_function):\n        argkeys_cache[scopenum] = d = {}\n        items_by_argkey[scopenum] = item_d = defaultdict(deque)\n        for item in items:\n            keys = OrderedDict.fromkeys(get_parametrized_fixture_keys(item, scopenum))\n            if keys:\n                d[item] = keys\n                for key in keys:\n                    item_d[key].append(item)\n    items = OrderedDict.fromkeys(items)\n    return list(reorder_items_atscope(items, argkeys_cache, items_by_argkey, 0))"}, "build_summary_stats_line": {"line": 1041, "args": [{"func_args": {"stats": "{}"}, "return_value": "('no tests ran', 'yellow')"}], "text": "def build_summary_stats_line(stats):\n    known_types = (\n        \"failed passed skipped deselected xfailed xpassed warnings error\".split()\n    )\n    unknown_type_seen = False\n    for found_type in stats:\n        if found_type not in known_types:\n            if found_type:  # setup/teardown reports have an empty key, ignore them\n                known_types.append(found_type)\n                unknown_type_seen = True\n    parts = []\n    for key in known_types:\n        reports = stats.get(key, None)\n        if reports:\n            count = sum(\n                1 for rep in reports if getattr(rep, \"count_towards_summary\", True)\n            )\n            parts.append(\"%d %s\" % (count, key))\n\n    if parts:\n        line = \", \".join(parts)\n    else:\n        line = \"no tests ran\"\n\n    if \"failed\" in stats or \"error\" in stats:\n        color = \"red\"\n    elif \"warnings\" in stats or unknown_type_seen:\n        color = \"yellow\"\n    elif \"passed\" in stats:\n        color = \"green\"\n    else:\n        color = \"yellow\"\n\n    return line, color"}, "_get_allow_unicode_flag": {"line": 517, "args": [{"func_args": {}, "return_value": "2048"}], "text": "def _get_allow_unicode_flag():\n    \"\"\"\n    Registers and returns the ALLOW_UNICODE flag.\n    \"\"\"\n    import doctest\n\n    return doctest.register_optionflag(\"ALLOW_UNICODE\")"}, "_get_allow_bytes_flag": {"line": 526, "args": [{"func_args": {}, "return_value": "4096"}], "text": "def _get_allow_bytes_flag():\n    \"\"\"\n    Registers and returns the ALLOW_BYTES flag.\n    \"\"\"\n    import doctest\n\n    return doctest.register_optionflag(\"ALLOW_BYTES\")"}, "_get_flag_lookup": {"line": 281, "args": [{"func_args": {}, "return_value": "{'DONT_ACCEPT_TRUE_FOR_1': 1, 'DONT_ACCEPT_BLANKLINE': 2, 'NORMALIZE_WHITESPACE': 4, 'ELLIPSIS': 8, 'IGNORE_EXCEPTION_DETAIL': 32, 'COMPARISON_FLAGS': 63, 'ALLOW_UNICODE': 2048, 'ALLOW_BYTES': 4096}"}], "text": "def _get_flag_lookup():\n    import doctest\n\n    return dict(\n        DONT_ACCEPT_TRUE_FOR_1=doctest.DONT_ACCEPT_TRUE_FOR_1,\n        DONT_ACCEPT_BLANKLINE=doctest.DONT_ACCEPT_BLANKLINE,\n        NORMALIZE_WHITESPACE=doctest.NORMALIZE_WHITESPACE,\n        ELLIPSIS=doctest.ELLIPSIS,\n        IGNORE_EXCEPTION_DETAIL=doctest.IGNORE_EXCEPTION_DETAIL,\n        COMPARISON_FLAGS=doctest.COMPARISON_FLAGS,\n        ALLOW_UNICODE=_get_allow_unicode_flag(),\n        ALLOW_BYTES=_get_allow_bytes_flag(),\n    )"}, "is_option": {"line": 83, "args": [{"func_args": {"x": "'--cov=finnhub'"}, "return_value": "True"}], "text": "def is_option(x):\n        return str(x).startswith(\"-\")"}, "get_dirs_from_args": {"line": 82, "args": [{"func_args": {"args": "['--cov=finnhub']"}, "return_value": "[]"}], "text": "def get_dirs_from_args(args):\n    def is_option(x):\n        return str(x).startswith(\"-\")\n\n    def get_file_part_from_node_id(x):\n        return str(x).split(\"::\")[0]\n\n    def get_dir_from_path(path):\n        if path.isdir():\n            return path\n        return py.path.local(path.dirname)\n\n    # These look like paths but may not exist\n    possible_paths = (\n        py.path.local(get_file_part_from_node_id(arg))\n        for arg in args\n        if not is_option(arg)\n    )\n\n    return [get_dir_from_path(path) for path in possible_paths if path.exists()]"}, "iscommentline": {"line": 162, "args": [{"func_args": {"line": "'[tox]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'envlist = py27, py3\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}, {"func_args": {"line": "'[testenv]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'deps = -r{toxinidir}/requirements.txt\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\t-r{toxinidir}/test-requirements.txt\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tviztracer \\n'"}, "return_value": "False"}, {"func_args": {"line": "'commands = \\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tviztracer --ignore_frozen --log_func_args --log_func_retval -o result0.json -- pytest --cov=finnhub\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}, {"func_args": {"line": "'[flake8]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'max-line-length=99\\n'"}, "return_value": "False"}], "text": "def iscommentline(line):\n    c = line.lstrip()[:1]\n    return c in COMMENTCHARS"}, "_prepare_cov_source": {"line": 125, "args": [{"func_args": {"cov_source": "['finnhub']"}, "return_value": "['finnhub']"}], "text": "def _prepare_cov_source(cov_source):\n    \"\"\"\n    Prepare cov_source so that:\n\n     --cov --cov=foobar is equivalent to --cov (cov_source=None)\n     --cov=foo --cov=bar is equivalent to cov_source=['foo', 'bar']\n    \"\"\"\n    return None if True in cov_source else [path for path in cov_source if path is not True]"}, "reduce_list_of_lists": {"line": 159, "args": [{"func_args": {"lists": "[[]]"}, "return_value": "[]"}, {"func_args": {"lists": "[[]]"}, "return_value": "[]"}], "text": "def reduce_list_of_lists(lists):\n    new_list = []\n    for list_ in lists:\n        new_list.extend(list_)\n    return new_list"}, "shuffle_by_class": {"line": 134, "args": [{"func_args": {"items": "[]"}, "return_value": "[]"}], "text": "def shuffle_by_class(items):\n    class_items = []\n    current_cls = None\n    current_items = []\n\n    for item in items:\n        if current_cls is None:\n            current_cls = getattr(item, 'cls', None)\n\n        if getattr(item, 'cls', None) != current_cls:\n            random.shuffle(current_items)\n            class_items.append(current_items)\n            current_items = [item]\n            current_cls = item.cls\n        else:\n            current_items.append(item)\n\n    random.shuffle(current_items)\n    class_items.append(current_items)\n\n    random.shuffle(class_items)\n\n    return reduce_list_of_lists(class_items)"}, "bool_or_none": {"line": 174, "args": [{"func_args": {"b": "True"}, "return_value": "True"}, {"func_args": {"b": "True"}, "return_value": "True"}], "text": "def bool_or_none(b):\n    \"\"\"Return bool(b), but preserve None.\"\"\"\n    if b is None:\n        return None\n    else:\n        return bool(b)"}, "tryint": {"line": 370, "args": [{"func_args": {"s": "'/usr/app/src/test_repos/finnhub-python/finnhub'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/finnhub'"}, {"func_args": {"s": "'/usr/app/src/test_repos/finnhub-python/.tox/py'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/.tox/py'"}, {"func_args": {"s": "'38'"}, "return_value": "38"}, {"func_args": {"s": "'/lib/python'"}, "return_value": "'/lib/python'"}, {"func_args": {"s": "'3'"}, "return_value": "3"}, {"func_args": {"s": "'.'"}, "return_value": "'.'"}, {"func_args": {"s": "'8'"}, "return_value": "8"}, {"func_args": {"s": "'/site-packages/coverage'"}, "return_value": "'/site-packages/coverage'"}, {"func_args": {"s": "'/root/.local/lib/python'"}, "return_value": "'/root/.local/lib/python'"}, {"func_args": {"s": "'3'"}, "return_value": "3"}, {"func_args": {"s": "'.'"}, "return_value": "'.'"}, {"func_args": {"s": "'8'"}, "return_value": "8"}, {"func_args": {"s": "'/site-packages'"}, "return_value": "'/site-packages'"}, {"func_args": {"s": "'/root/.local/bin'"}, "return_value": "'/root/.local/bin'"}, {"func_args": {"s": "'/usr/app/src/test_repos/finnhub-python/.tox/py'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/.tox/py'"}, {"func_args": {"s": "'38'"}, "return_value": "38"}, {"func_args": {"s": "'/lib/python'"}, "return_value": "'/lib/python'"}, {"func_args": {"s": "'/usr/app/src/test_repos/finnhub-python/.tox/py'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/.tox/py'"}, {"func_args": {"s": "'38'"}, "return_value": "38"}, {"func_args": {"s": "'/lib/python'"}, "return_value": "'/lib/python'"}, {"func_args": {"s": "'3'"}, "return_value": "3"}, {"func_args": {"s": "'.'"}, "return_value": "'.'"}, {"func_args": {"s": "'8'"}, "return_value": "8"}, {"func_args": {"s": "'/site-packages'"}, "return_value": "'/site-packages'"}, {"func_args": {"s": "'/usr/app/src/test_repos/finnhub-python/.tox/py'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/.tox/py'"}, {"func_args": {"s": "'38'"}, "return_value": "38"}, {"func_args": {"s": "'/bin'"}, "return_value": "'/bin'"}, {"func_args": {"s": "'finnhub/__init__.py         '"}, "return_value": "'finnhub/__init__.py         '"}, {"func_args": {"s": "'3'"}, "return_value": "3"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'3'"}, "return_value": "3"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'%'"}, "return_value": "'%'"}, {"func_args": {"s": "'finnhub/client.py         '"}, "return_value": "'finnhub/client.py         '"}, {"func_args": {"s": "'223'"}, "return_value": "223"}, {"func_args": {"s": "'    '"}, "return_value": "'    '"}, {"func_args": {"s": "'223'"}, "return_value": "223"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'%'"}, "return_value": "'%'"}, {"func_args": {"s": "'finnhub/exceptions.py      '"}, "return_value": "'finnhub/exceptions.py      '"}, {"func_args": {"s": "'21'"}, "return_value": "21"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'21'"}, "return_value": "21"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'%'"}, "return_value": "'%'"}], "text": "def tryint(s):\n        \"\"\"If `s` is a number, return an int, else `s` unchanged.\"\"\"\n        try:\n            return int(s)\n        except ValueError:\n            return s"}, "human_key": {"line": 366, "args": [{"func_args": {"s": "'/usr/app/src/test_repos/finnhub-python/finnhub'"}, "return_value": "['/usr/app/src/test_repos/finnhub-python/finnhub']"}, {"func_args": {"s": "'/usr/app/src/test_repos/finnhub-python/.tox/py38/lib/python3.8/site-packages/coverage'"}, "return_value": "['/usr/app/src/test_repos/finnhub-python/.tox/py', 38, '/lib/python', 3, '.', 8, '/site-packages/coverage']"}, {"func_args": {"s": "'/root/.local/lib/python3.8/site-packages'"}, "return_value": "['/root/.local/lib/python', 3, '.', 8, '/site-packages']"}, {"func_args": {"s": "'/root/.local/bin'"}, "return_value": "['/root/.local/bin']"}, {"func_args": {"s": "'/usr/app/src/test_repos/finnhub-python/.tox/py38/lib/python'"}, "return_value": "['/usr/app/src/test_repos/finnhub-python/.tox/py', 38, '/lib/python']"}, {"func_args": {"s": "'/usr/app/src/test_repos/finnhub-python/.tox/py38/lib/python3.8/site-packages'"}, "return_value": "['/usr/app/src/test_repos/finnhub-python/.tox/py', 38, '/lib/python', 3, '.', 8, '/site-packages']"}, {"func_args": {"s": "'/usr/app/src/test_repos/finnhub-python/.tox/py38/bin'"}, "return_value": "['/usr/app/src/test_repos/finnhub-python/.tox/py', 38, '/bin']"}, {"func_args": {"s": "'finnhub/__init__.py         3      3     0%'"}, "return_value": "['finnhub/__init__.py         ', 3, '      ', 3, '     ', 0, '%']"}, {"func_args": {"s": "'finnhub/client.py         223    223     0%'"}, "return_value": "['finnhub/client.py         ', 223, '    ', 223, '     ', 0, '%']"}, {"func_args": {"s": "'finnhub/exceptions.py      21     21     0%'"}, "return_value": "['finnhub/exceptions.py      ', 21, '     ', 21, '     ', 0, '%']"}], "text": "def human_key(s):\n    \"\"\"Turn a string into a list of string and number chunks.\n        \"z23a\" -> [\"z\", 23, \"a\"]\n    \"\"\"\n    def tryint(s):\n        \"\"\"If `s` is a number, return an int, else `s` unchanged.\"\"\"\n        try:\n            return int(s)\n        except ValueError:\n            return s\n\n    return [tryint(c) for c in re.split(r\"(\\d+)\", s)]"}, "human_sorted": {"line": 379, "args": [{"func_args": {"strings": "['/usr/app/src/test_repos/finnhub-python/finnhub']"}, "return_value": "['/usr/app/src/test_repos/finnhub-python/finnhub']"}, {"func_args": {"strings": "{'/usr/app/src/test_repos/finnhub-python/.tox/py38/lib/python3.8/site-packages/coverage'}"}, "return_value": "['/usr/app/src/test_repos/finnhub-python/.tox/py38/lib/python3.8/site-packages/coverage']"}, {"func_args": {"strings": "{'/root/.local/lib/python3.8/site-packages', '/root/.local/bin', '/usr/app/src/test_repos/finnhub-python/.tox/py38/lib/python', '/usr/app/src/test_repos/finnhub-python/.tox/py38/lib/python3.8/site-packages', '/usr/app/src/test_repos/finnhub-python/.tox/py38/bin'}"}, "return_value": "['/root/.local/bin', '/root/.local/lib/python3.8/site-packages', '/usr/app/src/test_repos/finnhub-python/.tox/py38/bin', '/usr/app/src/test_repos/finnhub-python/.tox/py38/lib/python', '/usr/app/src/test_repos/finnhub-python/.tox/py38/lib/python3.8/site-packages']"}], "text": "def human_sorted(strings):\n    \"\"\"Sort the given iterable of strings the way that humans expect.\n\n    Numeric components in the strings are sorted as numbers.\n\n    Returns the sorted list.\n\n    \"\"\"\n    return sorted(strings, key=human_key)"}, "join_regex": {"line": 182, "args": [{"func_args": {"regexes": "['#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)']"}, "return_value": "'(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}], "text": "def join_regex(regexes):\n    \"\"\"Combine a list of regexes into one that matches any of them.\"\"\"\n    return \"|\".join(f\"(?:{r})\" for r in regexes)"}, "<lambda>": {"line": 394, "args": [{"func_args": {"pair": "('finnhub/__init__.py         3      3     0%', ('finnhub/__init__.py', 3, 3, '0', 0.0))"}, "return_value": "(['finnhub/__init__.py         ', 3, '      ', 3, '     ', 0, '%'], ('finnhub/__init__.py', 3, 3, '0', 0.0))"}, {"func_args": {"pair": "('finnhub/client.py         223    223     0%', ('finnhub/client.py', 223, 223, '0', 0.0))"}, "return_value": "(['finnhub/client.py         ', 223, '    ', 223, '     ', 0, '%'], ('finnhub/client.py', 223, 223, '0', 0.0))"}, {"func_args": {"pair": "('finnhub/exceptions.py      21     21     0%', ('finnhub/exceptions.py', 21, 21, '0', 0.0))"}, "return_value": "(['finnhub/exceptions.py      ', 21, '     ', 21, '     ', 0, '%'], ('finnhub/exceptions.py', 21, 21, '0', 0.0))"}]}, "human_sorted_items": {"line": 389, "args": [{"func_args": {"items": "[('finnhub/__init__.py         3      3     0%', ('finnhub/__init__.py', 3, 3, '0', 0.0)), ('finnhub/client.py         223    223     0%', ('finnhub/client.py', 223, 223, '0', 0.0)), ('finnhub/exceptions.py      21     21     0%', ('finnhub/exceptions.py', 21, 21, '0', 0.0))]", "reverse": "False"}, "return_value": "[('finnhub/__init__.py         3      3     0%', ('finnhub/__init__.py', 3, 3, '0', 0.0)), ('finnhub/client.py         223    223     0%', ('finnhub/client.py', 223, 223, '0', 0.0)), ('finnhub/exceptions.py      21     21     0%', ('finnhub/exceptions.py', 21, 21, '0', 0.0))]"}], "text": "def human_sorted_items(items, reverse=False):\n    \"\"\"Sort the (string, value) items the way humans expect.\n\n    Returns the sorted list of items.\n    \"\"\"\n    return sorted(items, key=lambda pair: (human_key(pair[0]), pair[1]), reverse=reverse)"}, "config_files_to_try": {"line": 492, "args": [{"func_args": {"config_file": "'.coveragerc'"}, "return_value": "[('.coveragerc', True, False), ('setup.cfg', False, False), ('tox.ini', False, False), ('pyproject.toml', False, False)]"}, {"func_args": {"config_file": "'.coveragerc'"}, "return_value": "[('.coveragerc', True, False), ('setup.cfg', False, False), ('tox.ini', False, False), ('pyproject.toml', False, False)]"}], "text": "def config_files_to_try(config_file):\n    \"\"\"What config files should we try to read?\n\n    Returns a list of tuples:\n        (filename, is_our_file, was_file_specified)\n    \"\"\"\n\n    # Some API users were specifying \".coveragerc\" to mean the same as\n    # True, so make it so.\n    if config_file == \".coveragerc\":\n        config_file = True\n    specified_file = (config_file is not True)\n    if not specified_file:\n        # No file was specified. Check COVERAGE_RCFILE.\n        config_file = os.environ.get('COVERAGE_RCFILE')\n        if config_file:\n            specified_file = True\n    if not specified_file:\n        # Still no file specified. Default to .coveragerc\n        config_file = \".coveragerc\"\n    files_to_try = [\n        (config_file, True, specified_file),\n        (\"setup.cfg\", False, False),\n        (\"tox.ini\", False, False),\n        (\"pyproject.toml\", False, False),\n    ]\n    return files_to_try"}, "short_stack": {"line": 136, "args": [{"func_args": {"limit": "None", "skip": "0"}, "return_value": "'                      <module> : /usr/app/src/test_repos/finnhub-python/.tox/py38/bin/viztracer:8\\n                          main : /usr/app/src/test_repos/finnhub-python/.tox/py38/lib/python3.8/site-packages/viztracer/main.py:523\\n                           run : /usr/app/src/test_repos/finnhub-python/.tox/py38/lib/python3.8/site-packages/viztracer/main.py:332\\n                   run_command : /usr/app/src/test_repos/finnhub-python/.tox/py38/lib/python3.8/site-packages/viztracer/main.py:438\\n                      run_code : /usr/app/src/test_repos/finnhub-python/.tox/py38/lib/python3.8/site-packages/viztracer/main.py:355\\n                      <module> : /usr/app/src/test_repos/finnhub-python/.tox/py38/bin/pytest:8\\n                          main : /usr/app/src/test_repos/finnhub-python/.tox/py38/lib/python3.8/site-packages/_pytest/config/__init__.py:65\\n                _prepareconfig : /usr/app/src/test_repos/finnhub-python/.tox/py38/lib/python3.8/site-packages/_pytest/config/__init__.py:213\\n                      __call__ : /usr/app/src/test_repos/finnhub-python/.tox/py38/lib/python3.8/site-packages/pluggy/hooks.py:286\\n                     _hookexec : /usr/app/src/test_repos/finnhub-python/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:93\\n                      <lambda> : /usr/app/src/test_repos/finnhub-python/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:84\\n                    _multicall : /usr/app/src/test_repos/finnhub-python/.tox/py38/lib/python3.8/site-packages/pluggy/callers.py:187\\n          pytest_cmdline_parse : /usr/app/src/test_repos/finnhub-python/.tox/py38/lib/python3.8/site-packages/_pytest/config/__init__.py:789\\n                         parse : /usr/app/src/test_repos/finnhub-python/.tox/py38/lib/python3.8/site-packages/_pytest/config/__init__.py:997\\n                     _preparse : /usr/app/src/test_repos/finnhub-python/.tox/py38/lib/python3.8/site-packages/_pytest/config/__init__.py:952\\n                      __call__ : /usr/app/src/test_repos/finnhub-python/.tox/py38/lib/python3.8/site-packages/pluggy/hooks.py:286\\n                     _hookexec : /usr/app/src/test_repos/finnhub-python/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:93\\n                      <lambda> : /usr/app/src/test_repos/finnhub-python/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:84\\n                    _multicall : /usr/app/src/test_repos/finnhub-python/.tox/py38/lib/python3.8/site-packages/pluggy/callers.py:187\\n pytest_load_initial_conftests : /usr/app/src/test_repos/finnhub-python/.tox/py38/lib/python3.8/site-packages/pytest_cov/plugin.py:149\\n                      __init__ : /usr/app/src/test_repos/finnhub-python/.tox/py38/lib/python3.8/site-packages/pytest_cov/plugin.py:200\\n                         start : /usr/app/src/test_repos/finnhub-python/.tox/py38/lib/python3.8/site-packages/pytest_cov/plugin.py:222\\n         ensure_topdir_wrapper : /usr/app/src/test_repos/finnhub-python/.tox/py38/lib/python3.8/site-packages/pytest_cov/engine.py:44\\n                         start : /usr/app/src/test_repos/finnhub-python/.tox/py38/lib/python3.8/site-packages/pytest_cov/engine.py:222\\n                         start : /usr/app/src/test_repos/finnhub-python/.tox/py38/lib/python3.8/site-packages/coverage/control.py:558\\n               _init_for_start : /usr/app/src/test_repos/finnhub-python/.tox/py38/lib/python3.8/site-packages/coverage/control.py:473\\n                      __init__ : /usr/app/src/test_repos/finnhub-python/.tox/py38/lib/python3.8/site-packages/coverage/collector.py:114'"}], "text": "def short_stack(limit=None, skip=0):\n    \"\"\"Return a string summarizing the call stack.\n\n    The string is multi-line, with one line per stack frame. Each line shows\n    the function name, the file name, and the line number:\n\n        ...\n        start_import_stop : /Users/ned/coverage/trunk/tests/coveragetest.py @95\n        import_local_file : /Users/ned/coverage/trunk/tests/coveragetest.py @81\n        import_local_file : /Users/ned/coverage/trunk/coverage/backward.py @159\n        ...\n\n    `limit` is the number of frames to include, defaulting to all of them.\n\n    `skip` is the number of frames to skip, so that debugging functions can\n    call this and not be included in the result.\n\n    \"\"\"\n    stack = inspect.stack()[limit:skip:-1]\n    return \"\\n\".join(\"%30s : %s:%d\" % (t[3], t[1], t[2]) for t in stack)"}, "actual_path": {"line": 139, "args": [{"func_args": {"path": "'/usr/app/src/test_repos/finnhub-python'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python'"}, {"func_args": {"path": "'/usr/app/src/test_repos/finnhub-python/finnhub'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/finnhub'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/inspect.py'"}, "return_value": "'/usr/local/lib/python3.8/inspect.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/os.py'"}, "return_value": "'/usr/local/lib/python3.8/os.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/platform.py'"}, "return_value": "'/usr/local/lib/python3.8/platform.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/re.py'"}, "return_value": "'/usr/local/lib/python3.8/re.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/sysconfig.py'"}, "return_value": "'/usr/local/lib/python3.8/sysconfig.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/traceback.py'"}, "return_value": "'/usr/local/lib/python3.8/traceback.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/finnhub-python/.tox/py38/lib/python3.8/site-packages/coverage/inorout.py'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/.tox/py38/lib/python3.8/site-packages/coverage/inorout.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/finnhub-python/finnhub/client.py'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/finnhub/client.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/finnhub-python/finnhub/client.py'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/finnhub/client.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/finnhub-python/finnhub/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/finnhub/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/finnhub-python/finnhub/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/finnhub/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/finnhub-python/finnhub/exceptions.py'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/finnhub/exceptions.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/finnhub-python/finnhub/exceptions.py'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/finnhub/exceptions.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/finnhub-python'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python'"}, {"func_args": {"path": "'/usr/app/src/test_repos/finnhub-python/finnhub/exceptions.py'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/finnhub/exceptions.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/finnhub-python/finnhub/exceptions.py'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/finnhub/exceptions.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/finnhub-python/finnhub/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/finnhub/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/finnhub-python/finnhub/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/finnhub/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/finnhub-python/finnhub/client.py'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/finnhub/client.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/finnhub-python/finnhub/client.py'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/finnhub/client.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/finnhub-python/finnhub/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/finnhub/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/finnhub-python/finnhub/client.py'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/finnhub/client.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/finnhub-python/finnhub/exceptions.py'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/finnhub/exceptions.py'"}], "text": "def actual_path(path):\n        \"\"\"The actual path for non-Windows platforms.\"\"\"\n        return path"}, "abs_file": {"line": 144, "args": [{"func_args": {"path": "'.'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python'"}, {"func_args": {"path": "'./finnhub'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/finnhub'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/inspect.py'"}, "return_value": "'/usr/local/lib/python3.8/inspect.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/os.py'"}, "return_value": "'/usr/local/lib/python3.8/os.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/platform.py'"}, "return_value": "'/usr/local/lib/python3.8/platform.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/re.py'"}, "return_value": "'/usr/local/lib/python3.8/re.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/sysconfig.py'"}, "return_value": "'/usr/local/lib/python3.8/sysconfig.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/traceback.py'"}, "return_value": "'/usr/local/lib/python3.8/traceback.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/finnhub-python/.tox/py38/lib/python3.8/site-packages/coverage/inorout.py'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/.tox/py38/lib/python3.8/site-packages/coverage/inorout.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/finnhub-python/finnhub/client.py'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/finnhub/client.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/finnhub-python/finnhub/client.py'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/finnhub/client.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/finnhub-python/finnhub/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/finnhub/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/finnhub-python/finnhub/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/finnhub/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/finnhub-python/finnhub/exceptions.py'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/finnhub/exceptions.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/finnhub-python/finnhub/exceptions.py'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/finnhub/exceptions.py'"}, {"func_args": {"path": "'.'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python'"}, {"func_args": {"path": "'/usr/app/src/test_repos/finnhub-python/finnhub/exceptions.py'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/finnhub/exceptions.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/finnhub-python/finnhub/exceptions.py'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/finnhub/exceptions.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/finnhub-python/finnhub/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/finnhub/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/finnhub-python/finnhub/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/finnhub/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/finnhub-python/finnhub/client.py'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/finnhub/client.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/finnhub-python/finnhub/client.py'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/finnhub/client.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/finnhub-python/finnhub/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/finnhub/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/finnhub-python/finnhub/client.py'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/finnhub/client.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/finnhub-python/finnhub/exceptions.py'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/finnhub/exceptions.py'"}]}, "canonical_filename": {"line": 53, "args": [{"func_args": {"filename": "'finnhub'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/finnhub'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/inspect.py'"}, "return_value": "'/usr/local/lib/python3.8/inspect.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/os.py'"}, "return_value": "'/usr/local/lib/python3.8/os.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/platform.py'"}, "return_value": "'/usr/local/lib/python3.8/platform.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/re.py'"}, "return_value": "'/usr/local/lib/python3.8/re.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/sysconfig.py'"}, "return_value": "'/usr/local/lib/python3.8/sysconfig.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/traceback.py'"}, "return_value": "'/usr/local/lib/python3.8/traceback.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/finnhub-python/.tox/py38/lib/python3.8/site-packages/coverage/inorout.py'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/.tox/py38/lib/python3.8/site-packages/coverage/inorout.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/finnhub-python/finnhub/client.py'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/finnhub/client.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/finnhub-python/finnhub/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/finnhub/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/finnhub-python/finnhub/exceptions.py'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/finnhub/exceptions.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/finnhub-python/finnhub/exceptions.py'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/finnhub/exceptions.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/finnhub-python/finnhub/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/finnhub/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/finnhub-python/finnhub/client.py'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/finnhub/client.py'"}]}, "prep_patterns": {"line": 173, "args": [{"func_args": {"patterns": "None"}, "return_value": "[]"}, {"func_args": {"patterns": "None"}, "return_value": "[]"}], "text": "def prep_patterns(patterns):\n    \"\"\"Prepare the file patterns for use in a `FnmatchMatcher`.\n\n    If a pattern starts with a wildcard, it is used as a pattern\n    as-is.  If it does not start with a wildcard, then it is made\n    absolute with the current directory.\n\n    If `patterns` is None, an empty list is returned.\n\n    \"\"\"\n    prepped = []\n    for p in patterns or []:\n        if p.startswith((\"*\", \"?\")):\n            prepped.append(p)\n        else:\n            prepped.append(abs_file(p))\n    return prepped"}, "find_python_files": {"line": 403, "args": [{"func_args": {"dirname": "'/usr/app/src/test_repos/finnhub-python/finnhub'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/finnhub/client.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/finnhub-python/finnhub'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/finnhub/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/finnhub-python/finnhub'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/finnhub/exceptions.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/finnhub-python/finnhub'"}, "return_value": "None"}], "text": "def find_python_files(dirname):\n    \"\"\"Yield all of the importable Python files in `dirname`, recursively.\n\n    To be importable, the files have to be in a directory with a __init__.py,\n    except for `dirname` itself, which isn't required to have one.  The\n    assumption is that `dirname` was specified directly, so the user knows\n    best, but sub-directories are checked for a __init__.py to be sure we only\n    find the importable files.\n\n    \"\"\"\n    for i, (dirpath, dirnames, filenames) in enumerate(os.walk(dirname)):\n        if i > 0 and '__init__.py' not in filenames:\n            # If a directory doesn't have __init__.py, then it isn't\n            # importable and neither are its files\n            del dirnames[:]\n            continue\n        for filename in filenames:\n            # We're only interested in files that look like reasonable Python\n            # files: Must end with .py or .pyw, and must not have certain funny\n            # characters that probably mean they are editor junk.\n            if re.match(r\"^[^.#~!$@%^&*()+=,]+\\.pyw?$\", filename):\n                yield os.path.join(dirpath, filename)"}, "relative_filename": {"line": 39, "args": [{"func_args": {"filename": "'/usr/app/src/test_repos/finnhub-python/finnhub/exceptions.py'"}, "return_value": "'finnhub/exceptions.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/finnhub-python/finnhub/__init__.py'"}, "return_value": "'finnhub/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/finnhub-python/finnhub/client.py'"}, "return_value": "'finnhub/client.py'"}]}, "filename_suffix": {"line": 1006, "args": [{"func_args": {"suffix": "None"}, "return_value": "None"}, {"func_args": {"suffix": "True"}, "return_value": "'cae2a1e14906.85792.877802'"}, {"func_args": {"suffix": "None"}, "return_value": "None"}, {"func_args": {"suffix": "None"}, "return_value": "None"}], "text": "def filename_suffix(suffix):\n    \"\"\"Compute a filename suffix for a data file.\n\n    If `suffix` is a string or None, simply return it. If `suffix` is True,\n    then build a suffix incorporating the hostname, process id, and a random\n    number.\n\n    Returns a string or None.\n\n    \"\"\"\n    if suffix is True:\n        # If data_suffix was a simple true value, then make a suffix with\n        # plenty of distinguishing information.  We do this here in\n        # `save()` at the last minute so that the pid will be correct even\n        # if the process forks.\n        dice = random.Random(os.urandom(8)).randint(0, 999999)\n        suffix = \"%s.%s.%06d\" % (socket.gethostname(), os.getpid(), dice)\n    return suffix"}, "source_for_file": {"line": 97, "args": [{"func_args": {"filename": "'/usr/local/lib/python3.8/inspect.py'"}, "return_value": "'/usr/local/lib/python3.8/inspect.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/os.py'"}, "return_value": "'/usr/local/lib/python3.8/os.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/platform.py'"}, "return_value": "'/usr/local/lib/python3.8/platform.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/re.py'"}, "return_value": "'/usr/local/lib/python3.8/re.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/sysconfig.py'"}, "return_value": "'/usr/local/lib/python3.8/sysconfig.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/traceback.py'"}, "return_value": "'/usr/local/lib/python3.8/traceback.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/finnhub-python/.tox/py38/lib/python3.8/site-packages/coverage/inorout.py'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/.tox/py38/lib/python3.8/site-packages/coverage/inorout.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/finnhub-python/finnhub/exceptions.py'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/finnhub/exceptions.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/finnhub-python/finnhub/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/finnhub/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/finnhub-python/finnhub/client.py'"}, "return_value": "'/usr/app/src/test_repos/finnhub-python/finnhub/client.py'"}], "text": "def source_for_file(filename):\n    \"\"\"Return the source filename for `filename`.\n\n    Given a file name being traced, return the best guess as to the source\n    file to attribute it to.\n\n    \"\"\"\n    if filename.endswith(\".py\"):\n        # .py files are themselves source files.\n        return filename\n\n    elif filename.endswith((\".pyc\", \".pyo\")):\n        # Bytecode files probably have source files near them.\n        py_filename = filename[:-1]\n        if os.path.exists(py_filename):\n            # Found a .py file, use that.\n            return py_filename\n        if env.WINDOWS:\n            # On Windows, it could be a .pyw file.\n            pyw_filename = py_filename + \"w\"\n            if os.path.exists(pyw_filename):\n                return pyw_filename\n        # Didn't find source, but it's probably the .py file we want.\n        return py_filename\n\n    elif filename.endswith(\"$py.class\"):\n        # Jython is easy to guess.\n        return filename[:-9] + \".py\"\n\n    # No idea, just use the file name as-is.\n    return filename"}, "read_python_source": {"line": 20, "args": [{"func_args": {"filename": "'/usr/app/src/test_repos/finnhub-python/finnhub/__init__.py'"}, "return_value": "b'from __future__ import absolute_import\\n\\nfrom finnhub.client import Client\\nfrom finnhub.exceptions import FinnhubAPIException, FinnhubRequestException\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/finnhub-python/finnhub/client.py'"}, "return_value": "b'import json\\nimport requests\\n\\nfrom finnhub.exceptions import FinnhubAPIException\\nfrom finnhub.exceptions import FinnhubRequestException\\n\\n\\nclass Client:\\n    API_URL = \"https://finnhub.io/api/v1\"\\n    DEFAULT_TIMEOUT = 10\\n\\n    def __init__(self, api_key, proxies=None):\\n        self._session = self._init_session(api_key, proxies)\\n\\n    @staticmethod\\n    def _init_session(api_key, proxies):\\n        session = requests.session()\\n        session.headers.update({\"Accept\": \"application/json\",\\n                                \"User-Agent\": \"finnhub/python\"})\\n        session.params[\"token\"] = api_key\\n        if proxies is not None:\\n            session.proxies.update(proxies)\\n\\n        return session\\n\\n    def close(self):\\n        self._session.close()\\n\\n    def __enter__(self):\\n        return self\\n\\n    def __exit__(self, *exc):\\n        self.close()\\n\\n    def _request(self, method, path, **kwargs):\\n        uri = \"{}/{}\".format(self.API_URL, path)\\n        kwargs[\"timeout\"] = kwargs.get(\"timeout\", self.DEFAULT_TIMEOUT)\\n        kwargs[\"params\"] = self._format_params(kwargs.get(\"params\", {}))\\n\\n        response = getattr(self._session, method)(uri, **kwargs)\\n        return self._handle_response(response)\\n\\n    @staticmethod\\n    def _handle_response(response):\\n        if not response.ok:\\n            raise FinnhubAPIException(response)\\n\\n        try:\\n            content_type = response.headers.get(\\'Content-Type\\', \\'\\')\\n            if \\'application/json\\' in content_type:\\n                return response.json()\\n            if \\'text/csv\\' in content_type:\\n                return response.text\\n            if \\'text/plain\\' in content_type:\\n                return response.text\\n            raise FinnhubRequestException(\"Invalid Response: {}\".format(response.text))\\n        except ValueError:\\n            raise FinnhubRequestException(\"Invalid Response: {}\".format(response.text))\\n\\n    @staticmethod\\n    def _merge_two_dicts(first, second):\\n        result = first.copy()\\n        result.update(second)\\n        return result\\n\\n    @staticmethod\\n    def _format_params(params):\\n        return {k: json.dumps(v) if isinstance(v, bool) else v for k, v in params.items()}\\n\\n    def _get(self, path, **kwargs):\\n        return self._request(\"get\", path, **kwargs)\\n\\n    @property\\n    def api_key(self):\\n        return self._session.params.get(\"token\")\\n\\n    @api_key.setter\\n    def api_key(self, token):\\n        self._session.params[\"token\"] = token\\n\\n    def covid19(self):\\n        return self._get(\"/covid19/us\")\\n\\n    def company_profile(self, **params):\\n        return self._get(\"/stock/profile\", params=params)\\n\\n    def company_profile2(self, **params):\\n        return self._get(\"/stock/profile2\", params=params)\\n\\n    def aggregate_indicator(self, symbol, resolution):\\n        return self._get(\"/scan/technical-indicator\", params={\\n            \"symbol\": symbol,\\n            \"resolution\": resolution,\\n        })\\n\\n    def crypto_exchanges(self):\\n        return self._get(\"/crypto/exchange\")\\n\\n    def forex_exchanges(self):\\n        return self._get(\"/forex/exchange\")\\n\\n    def press_releases(self, symbol, _from=None, to=None):\\n        return self._get(\"/press-releases\", params={\\n            \"symbol\": symbol,\\n            \"from\": _from,\\n            \"to\": to\\n        })\\n\\n    def company_executive(self, symbol):\\n        return self._get(\"/stock/executive\", params={\"symbol\": symbol})\\n\\n    def stock_dividends(self, symbol, _from=None, to=None):\\n        return self._get(\"/stock/dividend\", params={\\n            \"symbol\": symbol,\\n            \"from\": _from,\\n            \"to\": to\\n        })\\n\\n    def stock_basic_dividends(self, symbol):\\n        return self._get(\"/stock/dividend2\", params={\"symbol\": symbol})\\n\\n    def stock_symbols(self, exchange):\\n        return self._get(\"/stock/symbol\", params={\"exchange\": exchange})\\n\\n    def recommendation_trends(self, symbol):\\n        return self._get(\"/stock/recommendation\", params={\"symbol\": symbol})\\n\\n    def price_target(self, symbol):\\n        return self._get(\"/stock/price-target\", params={\"symbol\": symbol})\\n\\n    def upgrade_downgrade(self, **params):\\n        return self._get(\"/stock/upgrade-downgrade\", params=params)\\n\\n    def option_chain(self, **params):\\n        return self._get(\"/stock/option-chain\", params=params)\\n\\n    def company_peers(self, symbol):\\n        return self._get(\"/stock/peers\", params={\"symbol\": symbol})\\n\\n    def company_basic_financials(self, symbol, metric):\\n        return self._get(\"/stock/metric\", params={\\n            \"symbol\": symbol,\\n            \"metric\": metric\\n        })\\n\\n    def financials(self, symbol, statement, freq):\\n        return self._get(\"/stock/financials\", params={\\n            \"symbol\": symbol,\\n            \"statement\": statement,\\n            \"freq\": freq\\n        })\\n\\n    def financials_reported(self, **params):\\n        return self._get(\"/stock/financials-reported\", params=params)\\n\\n    def fund_ownership(self, symbol, limit=None):\\n        return self._get(\"/stock/fund-ownership\", params={\\n            \"symbol\": symbol,\\n            \"limit\": limit\\n        })\\n\\n    def company_earnings(self, symbol, limit=None):\\n        return self._get(\"/stock/earnings\", params={\\n            \"symbol\": symbol,\\n            \"limit\": limit\\n        })\\n\\n    def company_revenue_estimates(self, symbol, freq=None):\\n        return self._get(\"/stock/revenue-estimate\", params={\\n            \"symbol\": symbol,\\n            \"freq\": freq\\n        })\\n\\n    def company_ebitda_estimates(self, symbol, freq=None):\\n        return self._get(\"/stock/ebitda-estimate\", params={\\n            \"symbol\": symbol,\\n            \"freq\": freq\\n        })\\n\\n    def company_ebit_estimates(self, symbol, freq=None):\\n        return self._get(\"/stock/ebit-estimate\", params={\\n            \"symbol\": symbol,\\n            \"freq\": freq\\n        })\\n\\n    def company_eps_estimates(self, symbol, freq=None):\\n        return self._get(\"/stock/eps-estimate\", params={\\n            \"symbol\": symbol,\\n            \"freq\": freq\\n        })\\n\\n    def exchange(self):\\n        return self._get(\"/stock/exchange\")\\n\\n    def filings(self, **params):\\n        return self._get(\"/stock/filings\", params=params)\\n\\n    def stock_symbol(self, **params):\\n        return self._get(\"/stock/symbol\", params=params)\\n\\n    def quote(self, symbol):\\n        return self._get(\"/quote\", params={\\n            \"symbol\": symbol\\n        })\\n\\n    def transcripts(self, _id):\\n        return self._get(\"/stock/transcripts\", params={\"id\": _id})\\n\\n    def transcripts_list(self, symbol):\\n        return self._get(\"/stock/transcripts/list\", params={\"symbol\": symbol})\\n\\n    def sim_index(self, **params):\\n        return self._get(\"/stock/similarity-index\", params=params)\\n\\n    def stock_candles(self, symbol, resolution, _from, to, **kwargs):\\n        params = self._merge_two_dicts({\\n            \"symbol\": symbol,\\n            \"resolution\": resolution,\\n            \"from\": _from,\\n            \"to\": to\\n        }, kwargs)\\n\\n        return self._get(\"/stock/candle\", params=params)\\n\\n    def stock_tick(self, symbol, date, limit, skip, _format=\\'json\\', **kwargs):\\n        params = self._merge_two_dicts({\\n            \"symbol\": symbol,\\n            \"date\": date,\\n            \"limit\": limit,\\n            \"skip\": skip,\\n            \"format\": _format\\n        }, kwargs)\\n\\n        return self._get(\"/stock/tick\", params=params)\\n\\n    def stock_nbbo(self, symbol, date, limit, skip, _format=\\'json\\', **kwargs):\\n        params = self._merge_two_dicts({\\n            \"symbol\": symbol,\\n            \"date\": date,\\n            \"limit\": limit,\\n            \"skip\": skip,\\n            \"format\": _format\\n        }, kwargs)\\n\\n        return self._get(\"/stock/bbo\", params=params)\\n\\n    def forex_rates(self, **params):\\n        return self._get(\"/forex/rates\", params=params)\\n\\n    def forex_symbols(self, exchange):\\n        return self._get(\"/forex/symbol\", params={\\n            \"exchange\": exchange\\n        })\\n\\n    def forex_candles(self, symbol, resolution, _from, to, _format=\\'json\\'):\\n        return self._get(\"/forex/candle\", params={\\n            \"symbol\": symbol,\\n            \"resolution\": resolution,\\n            \"from\": _from,\\n            \"to\": to,\\n            \"format\": _format\\n        })\\n\\n    def crypto_symbols(self, exchange):\\n        return self._get(\"/crypto/symbol\", params={\"exchange\": exchange})\\n\\n    def crypto_candles(self, symbol, resolution, _from, to, _format=\\'json\\'):\\n        return self._get(\"/crypto/candle\", params={\\n            \"symbol\": symbol,\\n            \"resolution\": resolution,\\n            \"from\": _from,\\n            \"to\": to,\\n            \"format\": _format\\n        })\\n\\n    def pattern_recognition(self, symbol, resolution):\\n        return self._get(\"/scan/pattern\", params={\\n            \"symbol\": symbol,\\n            \"resolution\": resolution\\n        })\\n\\n    def support_resistance(self, symbol, resolution):\\n        return self._get(\"/scan/support-resistance\", params={\\n            \"symbol\": symbol,\\n            \"resolution\": resolution\\n        })\\n\\n    def technical_indicator(self, symbol, resolution, _from, to, indicator, indicator_fields=None):\\n        indicator_fields = indicator_fields or {}\\n        params = self._merge_two_dicts({\\n            \"symbol\": symbol,\\n            \"resolution\": resolution,\\n            \"from\": _from,\\n            \"to\": to,\\n            \"indicator\": indicator\\n        }, indicator_fields)\\n\\n        return self._get(\"/indicator\", params=params)\\n\\n    def stock_splits(self, symbol, _from, to):\\n        return self._get(\"/stock/split\", params={\\n            \"symbol\": symbol,\\n            \"from\": _from,\\n            \"to\": to\\n        })\\n\\n    def general_news(self, category, min_id=0):\\n        return self._get(\"/news\", params={\\n            \"category\": category,\\n            \"minId\": min_id\\n        })\\n\\n    def company_news(self, symbol, _from, to):\\n        return self._get(\"/company-news\", params={\\n            \"symbol\": symbol,\\n            \"from\": _from,\\n            \"to\": to\\n        })\\n\\n    def news_sentiment(self, symbol):\\n        return self._get(\"/news-sentiment\", params={\\n            \"symbol\": symbol\\n        })\\n\\n    def ownership(self, symbol, limit=None):\\n        return self._get(\"/stock/ownership\", params={\\n            \"symbol\": symbol,\\n            \"limit\": limit\\n        })\\n\\n    def country(self):\\n        return self._get(\"/country\")\\n\\n    def economic_code(self):\\n        return self._get(\"/economic/code\")\\n\\n    def economic_data(self, code):\\n        return self._get(\"/economic\", params={\"code\": code})\\n\\n    def calendar_economic(self):\\n        return self._get(\"/calendar/economic\")\\n\\n    def earnings_calendar(self, _from, to, symbol, international=False):\\n        return self._get(\"/calendar/earnings\", params={\\n            \"from\": _from,\\n            \"to\": to,\\n            \"symbol\": symbol,\\n            \"international\": international\\n        })\\n\\n    def ipo_calendar(self, _from, to):\\n        return self._get(\"/calendar/ipo\", params={\\n            \"from\": _from,\\n            \"to\": to\\n        })\\n\\n    def indices_const(self, **params):\\n        return self._get(\"/index/constituents\", params=params)\\n\\n    def indices_hist_const(self, **params):\\n        return self._get(\"/index/historical-constituents\", params=params)\\n\\n    def etfs_profile(self, symbol):\\n        return self._get(\"/etf/profile\", params={\"symbol\": symbol})\\n\\n    def etfs_holdings(self, symbol):\\n        return self._get(\"/etf/holdings\", params={\"symbol\": symbol})\\n\\n    def etfs_sector_exp(self, symbol):\\n        return self._get(\"/etf/sector\", params={\"symbol\": symbol})\\n\\n    def etfs_country_exp(self, symbol):\\n        return self._get(\"/etf/country\", params={\"symbol\": symbol})\\n\\n    def international_filings(self, symbol=\"\", country=\"\"):\\n        return self._get(\"/stock/international-filings\", params={\"symbol\": symbol, \"country\": country})\\n\\n    def sec_sentiment_analysis(self, access_number):\\n        return self._get(\"/stock/filings-sentiment\", params={\"accessNumber\": access_number})\\n\\n    def sec_similarity_index(self, symbol=\"\", cik=\"\", freq=\"annual\"):\\n        return self._get(\"/stock/similarity-index\", params={\"symbol\": symbol, \"cik\": cik, \"freq\": freq})\\n\\n    def last_bid_ask(self, symbol):\\n        return self._get(\"/stock/bidask\", params={\"symbol\": symbol})\\n\\n    def fda_calendar(self):\\n        return self._get(\"/fda-advisory-committee-calendar\")\\n\\n    def symbol_lookup(self, query):\\n        return self._get(\"/search\", params={\"q\": query})\\n\\n    def stock_insider_transactions(self, symbol, _from=None, to=None):\\n        return self._get(\"/stock/insider-transactions\", params={\"symbol\": symbol, \"from\": _from, \"to\": to})\\n\\n    def mutual_fund_profile(self, symbol):\\n        return self._get(\"/mutual-fund/profile\", params={\"symbol\": symbol})\\n\\n    def mutual_fund_holdings(self, symbol):\\n        return self._get(\"/mutual-fund/holdings\", params={\"symbol\": symbol})\\n\\n    def mutual_fund_sector_exp(self, symbol):\\n        return self._get(\"/mutual-fund/sector\", params={\"symbol\": symbol})\\n\\n    def mutual_fund_country_exp(self, symbol):\\n        return self._get(\"/mutual-fund/country\", params={\"symbol\": symbol})\\n\\n    def stock_revenue_breakdown(self, symbol, cik=\"\"):\\n        return self._get(\"/stock/revenue-breakdown\", params={\"symbol\": symbol, \"cik\": cik})\\n\\n    def stock_social_sentiment(self, symbol, _from=None, to=None):\\n        return self._get(\"/stock/social-sentiment\", params={\"symbol\": symbol, \"from\": _from, \"to\": to})\\n\\n    def stock_investment_theme(self, theme):\\n        return self._get(\"/stock/investment-theme\", params={\"theme\": theme})\\n\\n    def stock_supply_chain(self, symbol):\\n        return self._get(\"/stock/supply-chain\", params={\"symbol\": symbol})\\n\\n    def company_esg_score(self, symbol):\\n        return self._get(\"/stock/esg\", params={\"symbol\": symbol})\\n\\n    def company_earnings_quality_score(self, symbol, freq):\\n        return self._get(\"/stock/earnings-quality-score\", params={\"symbol\": symbol, \\'freq\\': freq})\\n\\n    def crypto_profile(self, symbol):\\n        return self._get(\"/crypto/profile\", params={\"symbol\": symbol})\\n\\n    def stock_uspto_patent(self, symbol, _from=None, to=None):\\n        return self._get(\"/stock/uspto-patent\", params={\"symbol\": symbol, \"from\": _from, \"to\": to})\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/finnhub-python/finnhub/exceptions.py'"}, "return_value": "b'class FinnhubAPIException(Exception):\\n    def __init__(self, response):\\n        super(FinnhubAPIException, self).__init__()\\n\\n        self.code = 0\\n\\n        try:\\n            json_response = response.json()\\n        except ValueError:\\n            self.message = \"JSON error message from Finnhub: {}\".format(response.text)\\n        else:\\n            if \"error\" not in json_response:\\n                self.message = \"Wrong json format from FinnhubAPI\"\\n            else:\\n                self.message = json_response[\"error\"]\\n\\n        self.status_code = response.status_code\\n        self.response = response\\n\\n    def __str__(self):\\n        return \"FinnhubAPIException(status_code: {}): {}\".format(self.status_code, self.message)\\n\\n\\nclass FinnhubRequestException(Exception):\\n    def __init__(self, message):\\n        super(FinnhubRequestException, self).__init__()\\n        self.message = message\\n\\n    def __str__(self):\\n        return \"FinnhubRequestException: {}\".format(self.message)\\n'"}]}, "get_python_source": {"line": 37, "args": [{"func_args": {"filename": "'/usr/app/src/test_repos/finnhub-python/finnhub/__init__.py'"}, "return_value": "'from __future__ import absolute_import\\n\\nfrom finnhub.client import Client\\nfrom finnhub.exceptions import FinnhubAPIException, FinnhubRequestException\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/finnhub-python/finnhub/client.py'"}, "return_value": "'import json\\nimport requests\\n\\nfrom finnhub.exceptions import FinnhubAPIException\\nfrom finnhub.exceptions import FinnhubRequestException\\n\\n\\nclass Client:\\n    API_URL = \"https://finnhub.io/api/v1\"\\n    DEFAULT_TIMEOUT = 10\\n\\n    def __init__(self, api_key, proxies=None):\\n        self._session = self._init_session(api_key, proxies)\\n\\n    @staticmethod\\n    def _init_session(api_key, proxies):\\n        session = requests.session()\\n        session.headers.update({\"Accept\": \"application/json\",\\n                                \"User-Agent\": \"finnhub/python\"})\\n        session.params[\"token\"] = api_key\\n        if proxies is not None:\\n            session.proxies.update(proxies)\\n\\n        return session\\n\\n    def close(self):\\n        self._session.close()\\n\\n    def __enter__(self):\\n        return self\\n\\n    def __exit__(self, *exc):\\n        self.close()\\n\\n    def _request(self, method, path, **kwargs):\\n        uri = \"{}/{}\".format(self.API_URL, path)\\n        kwargs[\"timeout\"] = kwargs.get(\"timeout\", self.DEFAULT_TIMEOUT)\\n        kwargs[\"params\"] = self._format_params(kwargs.get(\"params\", {}))\\n\\n        response = getattr(self._session, method)(uri, **kwargs)\\n        return self._handle_response(response)\\n\\n    @staticmethod\\n    def _handle_response(response):\\n        if not response.ok:\\n            raise FinnhubAPIException(response)\\n\\n        try:\\n            content_type = response.headers.get(\\'Content-Type\\', \\'\\')\\n            if \\'application/json\\' in content_type:\\n                return response.json()\\n            if \\'text/csv\\' in content_type:\\n                return response.text\\n            if \\'text/plain\\' in content_type:\\n                return response.text\\n            raise FinnhubRequestException(\"Invalid Response: {}\".format(response.text))\\n        except ValueError:\\n            raise FinnhubRequestException(\"Invalid Response: {}\".format(response.text))\\n\\n    @staticmethod\\n    def _merge_two_dicts(first, second):\\n        result = first.copy()\\n        result.update(second)\\n        return result\\n\\n    @staticmethod\\n    def _format_params(params):\\n        return {k: json.dumps(v) if isinstance(v, bool) else v for k, v in params.items()}\\n\\n    def _get(self, path, **kwargs):\\n        return self._request(\"get\", path, **kwargs)\\n\\n    @property\\n    def api_key(self):\\n        return self._session.params.get(\"token\")\\n\\n    @api_key.setter\\n    def api_key(self, token):\\n        self._session.params[\"token\"] = token\\n\\n    def covid19(self):\\n        return self._get(\"/covid19/us\")\\n\\n    def company_profile(self, **params):\\n        return self._get(\"/stock/profile\", params=params)\\n\\n    def company_profile2(self, **params):\\n        return self._get(\"/stock/profile2\", params=params)\\n\\n    def aggregate_indicator(self, symbol, resolution):\\n        return self._get(\"/scan/technical-indicator\", params={\\n            \"symbol\": symbol,\\n            \"resolution\": resolution,\\n        })\\n\\n    def crypto_exchanges(self):\\n        return self._get(\"/crypto/exchange\")\\n\\n    def forex_exchanges(self):\\n        return self._get(\"/forex/exchange\")\\n\\n    def press_releases(self, symbol, _from=None, to=None):\\n        return self._get(\"/press-releases\", params={\\n            \"symbol\": symbol,\\n            \"from\": _from,\\n            \"to\": to\\n        })\\n\\n    def company_executive(self, symbol):\\n        return self._get(\"/stock/executive\", params={\"symbol\": symbol})\\n\\n    def stock_dividends(self, symbol, _from=None, to=None):\\n        return self._get(\"/stock/dividend\", params={\\n            \"symbol\": symbol,\\n            \"from\": _from,\\n            \"to\": to\\n        })\\n\\n    def stock_basic_dividends(self, symbol):\\n        return self._get(\"/stock/dividend2\", params={\"symbol\": symbol})\\n\\n    def stock_symbols(self, exchange):\\n        return self._get(\"/stock/symbol\", params={\"exchange\": exchange})\\n\\n    def recommendation_trends(self, symbol):\\n        return self._get(\"/stock/recommendation\", params={\"symbol\": symbol})\\n\\n    def price_target(self, symbol):\\n        return self._get(\"/stock/price-target\", params={\"symbol\": symbol})\\n\\n    def upgrade_downgrade(self, **params):\\n        return self._get(\"/stock/upgrade-downgrade\", params=params)\\n\\n    def option_chain(self, **params):\\n        return self._get(\"/stock/option-chain\", params=params)\\n\\n    def company_peers(self, symbol):\\n        return self._get(\"/stock/peers\", params={\"symbol\": symbol})\\n\\n    def company_basic_financials(self, symbol, metric):\\n        return self._get(\"/stock/metric\", params={\\n            \"symbol\": symbol,\\n            \"metric\": metric\\n        })\\n\\n    def financials(self, symbol, statement, freq):\\n        return self._get(\"/stock/financials\", params={\\n            \"symbol\": symbol,\\n            \"statement\": statement,\\n            \"freq\": freq\\n        })\\n\\n    def financials_reported(self, **params):\\n        return self._get(\"/stock/financials-reported\", params=params)\\n\\n    def fund_ownership(self, symbol, limit=None):\\n        return self._get(\"/stock/fund-ownership\", params={\\n            \"symbol\": symbol,\\n            \"limit\": limit\\n        })\\n\\n    def company_earnings(self, symbol, limit=None):\\n        return self._get(\"/stock/earnings\", params={\\n            \"symbol\": symbol,\\n            \"limit\": limit\\n        })\\n\\n    def company_revenue_estimates(self, symbol, freq=None):\\n        return self._get(\"/stock/revenue-estimate\", params={\\n            \"symbol\": symbol,\\n            \"freq\": freq\\n        })\\n\\n    def company_ebitda_estimates(self, symbol, freq=None):\\n        return self._get(\"/stock/ebitda-estimate\", params={\\n            \"symbol\": symbol,\\n            \"freq\": freq\\n        })\\n\\n    def company_ebit_estimates(self, symbol, freq=None):\\n        return self._get(\"/stock/ebit-estimate\", params={\\n            \"symbol\": symbol,\\n            \"freq\": freq\\n        })\\n\\n    def company_eps_estimates(self, symbol, freq=None):\\n        return self._get(\"/stock/eps-estimate\", params={\\n            \"symbol\": symbol,\\n            \"freq\": freq\\n        })\\n\\n    def exchange(self):\\n        return self._get(\"/stock/exchange\")\\n\\n    def filings(self, **params):\\n        return self._get(\"/stock/filings\", params=params)\\n\\n    def stock_symbol(self, **params):\\n        return self._get(\"/stock/symbol\", params=params)\\n\\n    def quote(self, symbol):\\n        return self._get(\"/quote\", params={\\n            \"symbol\": symbol\\n        })\\n\\n    def transcripts(self, _id):\\n        return self._get(\"/stock/transcripts\", params={\"id\": _id})\\n\\n    def transcripts_list(self, symbol):\\n        return self._get(\"/stock/transcripts/list\", params={\"symbol\": symbol})\\n\\n    def sim_index(self, **params):\\n        return self._get(\"/stock/similarity-index\", params=params)\\n\\n    def stock_candles(self, symbol, resolution, _from, to, **kwargs):\\n        params = self._merge_two_dicts({\\n            \"symbol\": symbol,\\n            \"resolution\": resolution,\\n            \"from\": _from,\\n            \"to\": to\\n        }, kwargs)\\n\\n        return self._get(\"/stock/candle\", params=params)\\n\\n    def stock_tick(self, symbol, date, limit, skip, _format=\\'json\\', **kwargs):\\n        params = self._merge_two_dicts({\\n            \"symbol\": symbol,\\n            \"date\": date,\\n            \"limit\": limit,\\n            \"skip\": skip,\\n            \"format\": _format\\n        }, kwargs)\\n\\n        return self._get(\"/stock/tick\", params=params)\\n\\n    def stock_nbbo(self, symbol, date, limit, skip, _format=\\'json\\', **kwargs):\\n        params = self._merge_two_dicts({\\n            \"symbol\": symbol,\\n            \"date\": date,\\n            \"limit\": limit,\\n            \"skip\": skip,\\n            \"format\": _format\\n        }, kwargs)\\n\\n        return self._get(\"/stock/bbo\", params=params)\\n\\n    def forex_rates(self, **params):\\n        return self._get(\"/forex/rates\", params=params)\\n\\n    def forex_symbols(self, exchange):\\n        return self._get(\"/forex/symbol\", params={\\n            \"exchange\": exchange\\n        })\\n\\n    def forex_candles(self, symbol, resolution, _from, to, _format=\\'json\\'):\\n        return self._get(\"/forex/candle\", params={\\n            \"symbol\": symbol,\\n            \"resolution\": resolution,\\n            \"from\": _from,\\n            \"to\": to,\\n            \"format\": _format\\n        })\\n\\n    def crypto_symbols(self, exchange):\\n        return self._get(\"/crypto/symbol\", params={\"exchange\": exchange})\\n\\n    def crypto_candles(self, symbol, resolution, _from, to, _format=\\'json\\'):\\n        return self._get(\"/crypto/candle\", params={\\n            \"symbol\": symbol,\\n            \"resolution\": resolution,\\n            \"from\": _from,\\n            \"to\": to,\\n            \"format\": _format\\n        })\\n\\n    def pattern_recognition(self, symbol, resolution):\\n        return self._get(\"/scan/pattern\", params={\\n            \"symbol\": symbol,\\n            \"resolution\": resolution\\n        })\\n\\n    def support_resistance(self, symbol, resolution):\\n        return self._get(\"/scan/support-resistance\", params={\\n            \"symbol\": symbol,\\n            \"resolution\": resolution\\n        })\\n\\n    def technical_indicator(self, symbol, resolution, _from, to, indicator, indicator_fields=None):\\n        indicator_fields = indicator_fields or {}\\n        params = self._merge_two_dicts({\\n            \"symbol\": symbol,\\n            \"resolution\": resolution,\\n            \"from\": _from,\\n            \"to\": to,\\n            \"indicator\": indicator\\n        }, indicator_fields)\\n\\n        return self._get(\"/indicator\", params=params)\\n\\n    def stock_splits(self, symbol, _from, to):\\n        return self._get(\"/stock/split\", params={\\n            \"symbol\": symbol,\\n            \"from\": _from,\\n            \"to\": to\\n        })\\n\\n    def general_news(self, category, min_id=0):\\n        return self._get(\"/news\", params={\\n            \"category\": category,\\n            \"minId\": min_id\\n        })\\n\\n    def company_news(self, symbol, _from, to):\\n        return self._get(\"/company-news\", params={\\n            \"symbol\": symbol,\\n            \"from\": _from,\\n            \"to\": to\\n        })\\n\\n    def news_sentiment(self, symbol):\\n        return self._get(\"/news-sentiment\", params={\\n            \"symbol\": symbol\\n        })\\n\\n    def ownership(self, symbol, limit=None):\\n        return self._get(\"/stock/ownership\", params={\\n            \"symbol\": symbol,\\n            \"limit\": limit\\n        })\\n\\n    def country(self):\\n        return self._get(\"/country\")\\n\\n    def economic_code(self):\\n        return self._get(\"/economic/code\")\\n\\n    def economic_data(self, code):\\n        return self._get(\"/economic\", params={\"code\": code})\\n\\n    def calendar_economic(self):\\n        return self._get(\"/calendar/economic\")\\n\\n    def earnings_calendar(self, _from, to, symbol, international=False):\\n        return self._get(\"/calendar/earnings\", params={\\n            \"from\": _from,\\n            \"to\": to,\\n            \"symbol\": symbol,\\n            \"international\": international\\n        })\\n\\n    def ipo_calendar(self, _from, to):\\n        return self._get(\"/calendar/ipo\", params={\\n            \"from\": _from,\\n            \"to\": to\\n        })\\n\\n    def indices_const(self, **params):\\n        return self._get(\"/index/constituents\", params=params)\\n\\n    def indices_hist_const(self, **params):\\n        return self._get(\"/index/historical-constituents\", params=params)\\n\\n    def etfs_profile(self, symbol):\\n        return self._get(\"/etf/profile\", params={\"symbol\": symbol})\\n\\n    def etfs_holdings(self, symbol):\\n        return self._get(\"/etf/holdings\", params={\"symbol\": symbol})\\n\\n    def etfs_sector_exp(self, symbol):\\n        return self._get(\"/etf/sector\", params={\"symbol\": symbol})\\n\\n    def etfs_country_exp(self, symbol):\\n        return self._get(\"/etf/country\", params={\"symbol\": symbol})\\n\\n    def international_filings(self, symbol=\"\", country=\"\"):\\n        return self._get(\"/stock/international-filings\", params={\"symbol\": symbol, \"country\": country})\\n\\n    def sec_sentiment_analysis(self, access_number):\\n        return self._get(\"/stock/filings-sentiment\", params={\"accessNumber\": access_number})\\n\\n    def sec_similarity_index(self, symbol=\"\", cik=\"\", freq=\"annual\"):\\n        return self._get(\"/stock/similarity-index\", params={\"symbol\": symbol, \"cik\": cik, \"freq\": freq})\\n\\n    def last_bid_ask(self, symbol):\\n        return self._get(\"/stock/bidask\", params={\"symbol\": symbol})\\n\\n    def fda_calendar(self):\\n        return self._get(\"/fda-advisory-committee-calendar\")\\n\\n    def symbol_lookup(self, query):\\n        return self._get(\"/search\", params={\"q\": query})\\n\\n    def stock_insider_transactions(self, symbol, _from=None, to=None):\\n        return self._get(\"/stock/insider-transactions\", params={\"symbol\": symbol, \"from\": _from, \"to\": to})\\n\\n    def mutual_fund_profile(self, symbol):\\n        return self._get(\"/mutual-fund/profile\", params={\"symbol\": symbol})\\n\\n    def mutual_fund_holdings(self, symbol):\\n        return self._get(\"/mutual-fund/holdings\", params={\"symbol\": symbol})\\n\\n    def mutual_fund_sector_exp(self, symbol):\\n        return self._get(\"/mutual-fund/sector\", params={\"symbol\": symbol})\\n\\n    def mutual_fund_country_exp(self, symbol):\\n        return self._get(\"/mutual-fund/country\", params={\"symbol\": symbol})\\n\\n    def stock_revenue_breakdown(self, symbol, cik=\"\"):\\n        return self._get(\"/stock/revenue-breakdown\", params={\"symbol\": symbol, \"cik\": cik})\\n\\n    def stock_social_sentiment(self, symbol, _from=None, to=None):\\n        return self._get(\"/stock/social-sentiment\", params={\"symbol\": symbol, \"from\": _from, \"to\": to})\\n\\n    def stock_investment_theme(self, theme):\\n        return self._get(\"/stock/investment-theme\", params={\"theme\": theme})\\n\\n    def stock_supply_chain(self, symbol):\\n        return self._get(\"/stock/supply-chain\", params={\"symbol\": symbol})\\n\\n    def company_esg_score(self, symbol):\\n        return self._get(\"/stock/esg\", params={\"symbol\": symbol})\\n\\n    def company_earnings_quality_score(self, symbol, freq):\\n        return self._get(\"/stock/earnings-quality-score\", params={\"symbol\": symbol, \\'freq\\': freq})\\n\\n    def crypto_profile(self, symbol):\\n        return self._get(\"/crypto/profile\", params={\"symbol\": symbol})\\n\\n    def stock_uspto_patent(self, symbol, _from=None, to=None):\\n        return self._get(\"/stock/uspto-patent\", params={\"symbol\": symbol, \"from\": _from, \"to\": to})\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/finnhub-python/finnhub/exceptions.py'"}, "return_value": "'class FinnhubAPIException(Exception):\\n    def __init__(self, response):\\n        super(FinnhubAPIException, self).__init__()\\n\\n        self.code = 0\\n\\n        try:\\n            json_response = response.json()\\n        except ValueError:\\n            self.message = \"JSON error message from Finnhub: {}\".format(response.text)\\n        else:\\n            if \"error\" not in json_response:\\n                self.message = \"Wrong json format from FinnhubAPI\"\\n            else:\\n                self.message = json_response[\"error\"]\\n\\n        self.status_code = response.status_code\\n        self.response = response\\n\\n    def __str__(self):\\n        return \"FinnhubAPIException(status_code: {}): {}\".format(self.status_code, self.message)\\n\\n\\nclass FinnhubRequestException(Exception):\\n    def __init__(self, message):\\n        super(FinnhubRequestException, self).__init__()\\n        self.message = message\\n\\n    def __str__(self):\\n        return \"FinnhubRequestException: {}\".format(self.message)\\n'"}]}, "parts": {"line": 377, "args": [{"func_args": {"s": "'/usr/app/src/test_repos/finnhub-python/finnhub/client.py'"}, "return_value": "{'/usr/app', '/usr/app/src', '/usr/app/src/test_repos/finnhub-python', '/usr', '/usr/app/src/test_repos', '/usr/app/src/test_repos/finnhub-python/finnhub', '/usr/app/src/test_repos/finnhub-python/finnhub/client.py', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/finnhub-python/finnhub/exceptions.py'"}, "return_value": "{'/usr/app', '/usr/app/src', '/usr/app/src/test_repos/finnhub-python', '/usr', '/usr/app/src/test_repos', '/usr/app/src/test_repos/finnhub-python/finnhub', '/usr/app/src/test_repos/finnhub-python/finnhub/exceptions.py', '/'}"}], "text": "def parts(s):\n    parts = s.split(sep)\n    return {sep.join(parts[: i + 1]) or sep for i in range(len(parts))}"}, "_getdimensions": {"line": 26, "args": [{"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}], "text": "def _getdimensions():\n    if py33:\n        import shutil\n        size = shutil.get_terminal_size()\n        return size.lines, size.columns\n    else:\n        import termios, fcntl, struct\n        call = fcntl.ioctl(1, termios.TIOCGWINSZ, \"\\000\" * 8)\n        height, width = struct.unpack(\"hhhh\", call)[:2]\n        return height, width"}, "get_terminal_width": {"line": 38, "args": [{"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}], "text": "def get_terminal_width():\n    width = 0\n    try:\n        _, width = _getdimensions()\n    except py.builtin._sysex:\n        raise\n    except:\n        # pass to fallback below\n        pass\n\n    if width == 0:\n        # FALLBACK:\n        # * some exception happened\n        # * or this is emacs terminal which reports (0,0)\n        width = int(os.environ.get('COLUMNS', 80))\n\n    # XXX the windows getdimensions may be bogus, let's sanify a bit\n    if width < 40:\n        width = 80\n    return width"}, "get_line_width": {"line": 71, "args": [{"func_args": {"text": "'============================= test session starts =============================='"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'platform linux -- Python 3.8.12, pytest-4.6.11, py-1.11.0, pluggy-0.13.1'"}, "return_value": "72"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'cachedir: .tox/py38/.pytest_cache'"}, "return_value": "33"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'Using --randomly-seed=1642647391'"}, "return_value": "32"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'rootdir: /usr/app/src/test_repos/finnhub-python'"}, "return_value": "47"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'plugins: cov-3.0.0, randomly-1.2.3'"}, "return_value": "34"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'collected 0 items'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'========================= no tests ran in 0.23 seconds ========================='"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}], "text": "def get_line_width(text):\n    text = unicodedata.normalize('NFC', text)\n    return sum(char_width.get(unicodedata.east_asian_width(c), 1) for c in text)"}, "walk": {"line": 1204, "args": [{"func_args": {"node": "[]", "level": "1"}, "return_value": "None"}, {"func_args": {"node": "'cachedir: .tox/py38/.pytest_cache'", "level": "1"}, "return_value": "'cachedir: .tox/py38/.pytest_cache'"}, {"func_args": {"node": "[[], 'cachedir: .tox/py38/.pytest_cache', 'Using --randomly-seed=1642647391', ['rootdir: /usr/app/src/test_repos/finnhub-python', 'plugins: cov-3.0.0, randomly-1.2.3']]", "level": "0"}, "return_value": "'cachedir: .tox/py38/.pytest_cache'"}, {"func_args": {"node": "'cachedir: .tox/py38/.pytest_cache'", "level": "1"}, "return_value": "None"}, {"func_args": {"node": "'Using --randomly-seed=1642647391'", "level": "1"}, "return_value": "'Using --randomly-seed=1642647391'"}, {"func_args": {"node": "[[], 'cachedir: .tox/py38/.pytest_cache', 'Using --randomly-seed=1642647391', ['rootdir: /usr/app/src/test_repos/finnhub-python', 'plugins: cov-3.0.0, randomly-1.2.3']]", "level": "0"}, "return_value": "'Using --randomly-seed=1642647391'"}, {"func_args": {"node": "'Using --randomly-seed=1642647391'", "level": "1"}, "return_value": "None"}, {"func_args": {"node": "'rootdir: /usr/app/src/test_repos/finnhub-python'", "level": "2"}, "return_value": "'rootdir: /usr/app/src/test_repos/finnhub-python'"}, {"func_args": {"node": "['rootdir: /usr/app/src/test_repos/finnhub-python', 'plugins: cov-3.0.0, randomly-1.2.3']", "level": "1"}, "return_value": "'rootdir: /usr/app/src/test_repos/finnhub-python'"}, {"func_args": {"node": "[[], 'cachedir: .tox/py38/.pytest_cache', 'Using --randomly-seed=1642647391', ['rootdir: /usr/app/src/test_repos/finnhub-python', 'plugins: cov-3.0.0, randomly-1.2.3']]", "level": "0"}, "return_value": "'rootdir: /usr/app/src/test_repos/finnhub-python'"}, {"func_args": {"node": "'rootdir: /usr/app/src/test_repos/finnhub-python'", "level": "2"}, "return_value": "None"}, {"func_args": {"node": "'plugins: cov-3.0.0, randomly-1.2.3'", "level": "2"}, "return_value": "'plugins: cov-3.0.0, randomly-1.2.3'"}, {"func_args": {"node": "['rootdir: /usr/app/src/test_repos/finnhub-python', 'plugins: cov-3.0.0, randomly-1.2.3']", "level": "1"}, "return_value": "'plugins: cov-3.0.0, randomly-1.2.3'"}, {"func_args": {"node": "[[], 'cachedir: .tox/py38/.pytest_cache', 'Using --randomly-seed=1642647391', ['rootdir: /usr/app/src/test_repos/finnhub-python', 'plugins: cov-3.0.0, randomly-1.2.3']]", "level": "0"}, "return_value": "'plugins: cov-3.0.0, randomly-1.2.3'"}, {"func_args": {"node": "'plugins: cov-3.0.0, randomly-1.2.3'", "level": "2"}, "return_value": "None"}, {"func_args": {"node": "['rootdir: /usr/app/src/test_repos/finnhub-python', 'plugins: cov-3.0.0, randomly-1.2.3']", "level": "1"}, "return_value": "None"}, {"func_args": {"node": "[[], 'cachedir: .tox/py38/.pytest_cache', 'Using --randomly-seed=1642647391', ['rootdir: /usr/app/src/test_repos/finnhub-python', 'plugins: cov-3.0.0, randomly-1.2.3']]", "level": "0"}, "return_value": "None"}, {"func_args": {"node": "[]", "level": "0"}, "return_value": "None"}], "text": "def walk(node, level):\n        if (\n            ((levels is not None) and (level > levels))\n            or isinstance(node, (str, bytes))\n            or ((base_type is not None) and isinstance(node, base_type))\n        ):\n            yield node\n            return\n\n        try:\n            tree = iter(node)\n        except TypeError:\n            yield node\n            return\n        else:\n            for child in tree:\n                yield from walk(child, level + 1)"}, "collapse": {"line": 1177, "args": [{"func_args": {"iterable": "[[], 'cachedir: .tox/py38/.pytest_cache', 'Using --randomly-seed=1642647391', ['rootdir: /usr/app/src/test_repos/finnhub-python', 'plugins: cov-3.0.0, randomly-1.2.3']]", "base_type": "None", "levels": "None"}, "return_value": "'cachedir: .tox/py38/.pytest_cache'"}, {"func_args": {"iterable": "[[], 'cachedir: .tox/py38/.pytest_cache', 'Using --randomly-seed=1642647391', ['rootdir: /usr/app/src/test_repos/finnhub-python', 'plugins: cov-3.0.0, randomly-1.2.3']]", "base_type": "None", "levels": "None"}, "return_value": "'Using --randomly-seed=1642647391'"}, {"func_args": {"iterable": "[[], 'cachedir: .tox/py38/.pytest_cache', 'Using --randomly-seed=1642647391', ['rootdir: /usr/app/src/test_repos/finnhub-python', 'plugins: cov-3.0.0, randomly-1.2.3']]", "base_type": "None", "levels": "None"}, "return_value": "'rootdir: /usr/app/src/test_repos/finnhub-python'"}, {"func_args": {"iterable": "[[], 'cachedir: .tox/py38/.pytest_cache', 'Using --randomly-seed=1642647391', ['rootdir: /usr/app/src/test_repos/finnhub-python', 'plugins: cov-3.0.0, randomly-1.2.3']]", "base_type": "None", "levels": "None"}, "return_value": "'plugins: cov-3.0.0, randomly-1.2.3'"}, {"func_args": {"iterable": "[[], 'cachedir: .tox/py38/.pytest_cache', 'Using --randomly-seed=1642647391', ['rootdir: /usr/app/src/test_repos/finnhub-python', 'plugins: cov-3.0.0, randomly-1.2.3']]", "base_type": "None", "levels": "None"}, "return_value": "None"}, {"func_args": {"iterable": "[]", "base_type": "None", "levels": "None"}, "return_value": "None"}], "text": "def collapse(iterable, base_type=None, levels=None):\n    \"\"\"Flatten an iterable with multiple levels of nesting (e.g., a list of\n    lists of tuples) into non-iterable types.\n\n        >>> iterable = [(1, 2), ([3, 4], [[5], [6]])]\n        >>> list(collapse(iterable))\n        [1, 2, 3, 4, 5, 6]\n\n    Binary and text strings are not considered iterable and\n    will not be collapsed.\n\n    To avoid collapsing other types, specify *base_type*:\n\n        >>> iterable = ['ab', ('cd', 'ef'), ['gh', 'ij']]\n        >>> list(collapse(iterable, base_type=tuple))\n        ['ab', ('cd', 'ef'), 'gh', 'ij']\n\n    Specify *levels* to stop flattening after a certain level:\n\n    >>> iterable = [('a', ['b']), ('c', ['d'])]\n    >>> list(collapse(iterable))  # Fully flattened\n    ['a', 'b', 'c', 'd']\n    >>> list(collapse(iterable, levels=1))  # Only one level flattened\n    ['a', ['b'], 'c', ['d']]\n\n    \"\"\"\n\n    def walk(node, level):\n        if (\n            ((levels is not None) and (level > levels))\n            or isinstance(node, (str, bytes))\n            or ((base_type is not None) and isinstance(node, base_type))\n        ):\n            yield node\n            return\n\n        try:\n            tree = iter(node)\n        except TypeError:\n            yield node\n            return\n        else:\n            for child in tree:\n                yield from walk(child, level + 1)\n\n    yield from walk(iterable, 0)"}, "combinable_files": {"line": 55, "args": [{"func_args": {"data_file": "'/usr/app/src/test_repos/finnhub-python/.coverage'", "data_paths": "None"}, "return_value": "['/usr/app/src/test_repos/finnhub-python/.coverage.cae2a1e14906.85792.877802']"}], "text": "def combinable_files(data_file, data_paths=None):\n    \"\"\"Make a list of data files to be combined.\n\n    `data_file` is a path to a data file.  `data_paths` is a list of files or\n    directories of files.\n\n    Returns a list of absolute file paths.\n    \"\"\"\n    data_dir, local = os.path.split(os.path.abspath(data_file))\n\n    data_paths = data_paths or [data_dir]\n    files_to_combine = []\n    for p in data_paths:\n        if os.path.isfile(p):\n            files_to_combine.append(os.path.abspath(p))\n        elif os.path.isdir(p):\n            pattern = os.path.join(os.path.abspath(p), f\"{local}.*\")\n            files_to_combine.extend(glob.glob(pattern))\n        else:\n            raise NoDataError(f\"Couldn't combine from non-existent path '{p}'\")\n    return files_to_combine"}, "source_encoding": {"line": 184, "args": [{"func_args": {"source": "b'from __future__ import absolute_import\\n\\nfrom finnhub.client import Client\\nfrom finnhub.exceptions import FinnhubAPIException, FinnhubRequestException\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'import json\\nimport requests\\n\\nfrom finnhub.exceptions import FinnhubAPIException\\nfrom finnhub.exceptions import FinnhubRequestException\\n\\n\\nclass Client:\\n    API_URL = \"https://finnhub.io/api/v1\"\\n    DEFAULT_TIMEOUT = 10\\n\\n    def __init__(self, api_key, proxies=None):\\n        self._session = self._init_session(api_key, proxies)\\n\\n    @staticmethod\\n    def _init_session(api_key, proxies):\\n        session = requests.session()\\n        session.headers.update({\"Accept\": \"application/json\",\\n                                \"User-Agent\": \"finnhub/python\"})\\n        session.params[\"token\"] = api_key\\n        if proxies is not None:\\n            session.proxies.update(proxies)\\n\\n        return session\\n\\n    def close(self):\\n        self._session.close()\\n\\n    def __enter__(self):\\n        return self\\n\\n    def __exit__(self, *exc):\\n        self.close()\\n\\n    def _request(self, method, path, **kwargs):\\n        uri = \"{}/{}\".format(self.API_URL, path)\\n        kwargs[\"timeout\"] = kwargs.get(\"timeout\", self.DEFAULT_TIMEOUT)\\n        kwargs[\"params\"] = self._format_params(kwargs.get(\"params\", {}))\\n\\n        response = getattr(self._session, method)(uri, **kwargs)\\n        return self._handle_response(response)\\n\\n    @staticmethod\\n    def _handle_response(response):\\n        if not response.ok:\\n            raise FinnhubAPIException(response)\\n\\n        try:\\n            content_type = response.headers.get(\\'Content-Type\\', \\'\\')\\n            if \\'application/json\\' in content_type:\\n                return response.json()\\n            if \\'text/csv\\' in content_type:\\n                return response.text\\n            if \\'text/plain\\' in content_type:\\n                return response.text\\n            raise FinnhubRequestException(\"Invalid Response: {}\".format(response.text))\\n        except ValueError:\\n            raise FinnhubRequestException(\"Invalid Response: {}\".format(response.text))\\n\\n    @staticmethod\\n    def _merge_two_dicts(first, second):\\n        result = first.copy()\\n        result.update(second)\\n        return result\\n\\n    @staticmethod\\n    def _format_params(params):\\n        return {k: json.dumps(v) if isinstance(v, bool) else v for k, v in params.items()}\\n\\n    def _get(self, path, **kwargs):\\n        return self._request(\"get\", path, **kwargs)\\n\\n    @property\\n    def api_key(self):\\n        return self._session.params.get(\"token\")\\n\\n    @api_key.setter\\n    def api_key(self, token):\\n        self._session.params[\"token\"] = token\\n\\n    def covid19(self):\\n        return self._get(\"/covid19/us\")\\n\\n    def company_profile(self, **params):\\n        return self._get(\"/stock/profile\", params=params)\\n\\n    def company_profile2(self, **params):\\n        return self._get(\"/stock/profile2\", params=params)\\n\\n    def aggregate_indicator(self, symbol, resolution):\\n        return self._get(\"/scan/technical-indicator\", params={\\n            \"symbol\": symbol,\\n            \"resolution\": resolution,\\n        })\\n\\n    def crypto_exchanges(self):\\n        return self._get(\"/crypto/exchange\")\\n\\n    def forex_exchanges(self):\\n        return self._get(\"/forex/exchange\")\\n\\n    def press_releases(self, symbol, _from=None, to=None):\\n        return self._get(\"/press-releases\", params={\\n            \"symbol\": symbol,\\n            \"from\": _from,\\n            \"to\": to\\n        })\\n\\n    def company_executive(self, symbol):\\n        return self._get(\"/stock/executive\", params={\"symbol\": symbol})\\n\\n    def stock_dividends(self, symbol, _from=None, to=None):\\n        return self._get(\"/stock/dividend\", params={\\n            \"symbol\": symbol,\\n            \"from\": _from,\\n            \"to\": to\\n        })\\n\\n    def stock_basic_dividends(self, symbol):\\n        return self._get(\"/stock/dividend2\", params={\"symbol\": symbol})\\n\\n    def stock_symbols(self, exchange):\\n        return self._get(\"/stock/symbol\", params={\"exchange\": exchange})\\n\\n    def recommendation_trends(self, symbol):\\n        return self._get(\"/stock/recommendation\", params={\"symbol\": symbol})\\n\\n    def price_target(self, symbol):\\n        return self._get(\"/stock/price-target\", params={\"symbol\": symbol})\\n\\n    def upgrade_downgrade(self, **params):\\n        return self._get(\"/stock/upgrade-downgrade\", params=params)\\n\\n    def option_chain(self, **params):\\n        return self._get(\"/stock/option-chain\", params=params)\\n\\n    def company_peers(self, symbol):\\n        return self._get(\"/stock/peers\", params={\"symbol\": symbol})\\n\\n    def company_basic_financials(self, symbol, metric):\\n        return self._get(\"/stock/metric\", params={\\n            \"symbol\": symbol,\\n            \"metric\": metric\\n        })\\n\\n    def financials(self, symbol, statement, freq):\\n        return self._get(\"/stock/financials\", params={\\n            \"symbol\": symbol,\\n            \"statement\": statement,\\n            \"freq\": freq\\n        })\\n\\n    def financials_reported(self, **params):\\n        return self._get(\"/stock/financials-reported\", params=params)\\n\\n    def fund_ownership(self, symbol, limit=None):\\n        return self._get(\"/stock/fund-ownership\", params={\\n            \"symbol\": symbol,\\n            \"limit\": limit\\n        })\\n\\n    def company_earnings(self, symbol, limit=None):\\n        return self._get(\"/stock/earnings\", params={\\n            \"symbol\": symbol,\\n            \"limit\": limit\\n        })\\n\\n    def company_revenue_estimates(self, symbol, freq=None):\\n        return self._get(\"/stock/revenue-estimate\", params={\\n            \"symbol\": symbol,\\n            \"freq\": freq\\n        })\\n\\n    def company_ebitda_estimates(self, symbol, freq=None):\\n        return self._get(\"/stock/ebitda-estimate\", params={\\n            \"symbol\": symbol,\\n            \"freq\": freq\\n        })\\n\\n    def company_ebit_estimates(self, symbol, freq=None):\\n        return self._get(\"/stock/ebit-estimate\", params={\\n            \"symbol\": symbol,\\n            \"freq\": freq\\n        })\\n\\n    def company_eps_estimates(self, symbol, freq=None):\\n        return self._get(\"/stock/eps-estimate\", params={\\n            \"symbol\": symbol,\\n            \"freq\": freq\\n        })\\n\\n    def exchange(self):\\n        return self._get(\"/stock/exchange\")\\n\\n    def filings(self, **params):\\n        return self._get(\"/stock/filings\", params=params)\\n\\n    def stock_symbol(self, **params):\\n        return self._get(\"/stock/symbol\", params=params)\\n\\n    def quote(self, symbol):\\n        return self._get(\"/quote\", params={\\n            \"symbol\": symbol\\n        })\\n\\n    def transcripts(self, _id):\\n        return self._get(\"/stock/transcripts\", params={\"id\": _id})\\n\\n    def transcripts_list(self, symbol):\\n        return self._get(\"/stock/transcripts/list\", params={\"symbol\": symbol})\\n\\n    def sim_index(self, **params):\\n        return self._get(\"/stock/similarity-index\", params=params)\\n\\n    def stock_candles(self, symbol, resolution, _from, to, **kwargs):\\n        params = self._merge_two_dicts({\\n            \"symbol\": symbol,\\n            \"resolution\": resolution,\\n            \"from\": _from,\\n            \"to\": to\\n        }, kwargs)\\n\\n        return self._get(\"/stock/candle\", params=params)\\n\\n    def stock_tick(self, symbol, date, limit, skip, _format=\\'json\\', **kwargs):\\n        params = self._merge_two_dicts({\\n            \"symbol\": symbol,\\n            \"date\": date,\\n            \"limit\": limit,\\n            \"skip\": skip,\\n            \"format\": _format\\n        }, kwargs)\\n\\n        return self._get(\"/stock/tick\", params=params)\\n\\n    def stock_nbbo(self, symbol, date, limit, skip, _format=\\'json\\', **kwargs):\\n        params = self._merge_two_dicts({\\n            \"symbol\": symbol,\\n            \"date\": date,\\n            \"limit\": limit,\\n            \"skip\": skip,\\n            \"format\": _format\\n        }, kwargs)\\n\\n        return self._get(\"/stock/bbo\", params=params)\\n\\n    def forex_rates(self, **params):\\n        return self._get(\"/forex/rates\", params=params)\\n\\n    def forex_symbols(self, exchange):\\n        return self._get(\"/forex/symbol\", params={\\n            \"exchange\": exchange\\n        })\\n\\n    def forex_candles(self, symbol, resolution, _from, to, _format=\\'json\\'):\\n        return self._get(\"/forex/candle\", params={\\n            \"symbol\": symbol,\\n            \"resolution\": resolution,\\n            \"from\": _from,\\n            \"to\": to,\\n            \"format\": _format\\n        })\\n\\n    def crypto_symbols(self, exchange):\\n        return self._get(\"/crypto/symbol\", params={\"exchange\": exchange})\\n\\n    def crypto_candles(self, symbol, resolution, _from, to, _format=\\'json\\'):\\n        return self._get(\"/crypto/candle\", params={\\n            \"symbol\": symbol,\\n            \"resolution\": resolution,\\n            \"from\": _from,\\n            \"to\": to,\\n            \"format\": _format\\n        })\\n\\n    def pattern_recognition(self, symbol, resolution):\\n        return self._get(\"/scan/pattern\", params={\\n            \"symbol\": symbol,\\n            \"resolution\": resolution\\n        })\\n\\n    def support_resistance(self, symbol, resolution):\\n        return self._get(\"/scan/support-resistance\", params={\\n            \"symbol\": symbol,\\n            \"resolution\": resolution\\n        })\\n\\n    def technical_indicator(self, symbol, resolution, _from, to, indicator, indicator_fields=None):\\n        indicator_fields = indicator_fields or {}\\n        params = self._merge_two_dicts({\\n            \"symbol\": symbol,\\n            \"resolution\": resolution,\\n            \"from\": _from,\\n            \"to\": to,\\n            \"indicator\": indicator\\n        }, indicator_fields)\\n\\n        return self._get(\"/indicator\", params=params)\\n\\n    def stock_splits(self, symbol, _from, to):\\n        return self._get(\"/stock/split\", params={\\n            \"symbol\": symbol,\\n            \"from\": _from,\\n            \"to\": to\\n        })\\n\\n    def general_news(self, category, min_id=0):\\n        return self._get(\"/news\", params={\\n            \"category\": category,\\n            \"minId\": min_id\\n        })\\n\\n    def company_news(self, symbol, _from, to):\\n        return self._get(\"/company-news\", params={\\n            \"symbol\": symbol,\\n            \"from\": _from,\\n            \"to\": to\\n        })\\n\\n    def news_sentiment(self, symbol):\\n        return self._get(\"/news-sentiment\", params={\\n            \"symbol\": symbol\\n        })\\n\\n    def ownership(self, symbol, limit=None):\\n        return self._get(\"/stock/ownership\", params={\\n            \"symbol\": symbol,\\n            \"limit\": limit\\n        })\\n\\n    def country(self):\\n        return self._get(\"/country\")\\n\\n    def economic_code(self):\\n        return self._get(\"/economic/code\")\\n\\n    def economic_data(self, code):\\n        return self._get(\"/economic\", params={\"code\": code})\\n\\n    def calendar_economic(self):\\n        return self._get(\"/calendar/economic\")\\n\\n    def earnings_calendar(self, _from, to, symbol, international=False):\\n        return self._get(\"/calendar/earnings\", params={\\n            \"from\": _from,\\n            \"to\": to,\\n            \"symbol\": symbol,\\n            \"international\": international\\n        })\\n\\n    def ipo_calendar(self, _from, to):\\n        return self._get(\"/calendar/ipo\", params={\\n            \"from\": _from,\\n            \"to\": to\\n        })\\n\\n    def indices_const(self, **params):\\n        return self._get(\"/index/constituents\", params=params)\\n\\n    def indices_hist_const(self, **params):\\n        return self._get(\"/index/historical-constituents\", params=params)\\n\\n    def etfs_profile(self, symbol):\\n        return self._get(\"/etf/profile\", params={\"symbol\": symbol})\\n\\n    def etfs_holdings(self, symbol):\\n        return self._get(\"/etf/holdings\", params={\"symbol\": symbol})\\n\\n    def etfs_sector_exp(self, symbol):\\n        return self._get(\"/etf/sector\", params={\"symbol\": symbol})\\n\\n    def etfs_country_exp(self, symbol):\\n        return self._get(\"/etf/country\", params={\"symbol\": symbol})\\n\\n    def international_filings(self, symbol=\"\", country=\"\"):\\n        return self._get(\"/stock/international-filings\", params={\"symbol\": symbol, \"country\": country})\\n\\n    def sec_sentiment_analysis(self, access_number):\\n        return self._get(\"/stock/filings-sentiment\", params={\"accessNumber\": access_number})\\n\\n    def sec_similarity_index(self, symbol=\"\", cik=\"\", freq=\"annual\"):\\n        return self._get(\"/stock/similarity-index\", params={\"symbol\": symbol, \"cik\": cik, \"freq\": freq})\\n\\n    def last_bid_ask(self, symbol):\\n        return self._get(\"/stock/bidask\", params={\"symbol\": symbol})\\n\\n    def fda_calendar(self):\\n        return self._get(\"/fda-advisory-committee-calendar\")\\n\\n    def symbol_lookup(self, query):\\n        return self._get(\"/search\", params={\"q\": query})\\n\\n    def stock_insider_transactions(self, symbol, _from=None, to=None):\\n        return self._get(\"/stock/insider-transactions\", params={\"symbol\": symbol, \"from\": _from, \"to\": to})\\n\\n    def mutual_fund_profile(self, symbol):\\n        return self._get(\"/mutual-fund/profile\", params={\"symbol\": symbol})\\n\\n    def mutual_fund_holdings(self, symbol):\\n        return self._get(\"/mutual-fund/holdings\", params={\"symbol\": symbol})\\n\\n    def mutual_fund_sector_exp(self, symbol):\\n        return self._get(\"/mutual-fund/sector\", params={\"symbol\": symbol})\\n\\n    def mutual_fund_country_exp(self, symbol):\\n        return self._get(\"/mutual-fund/country\", params={\"symbol\": symbol})\\n\\n    def stock_revenue_breakdown(self, symbol, cik=\"\"):\\n        return self._get(\"/stock/revenue-breakdown\", params={\"symbol\": symbol, \"cik\": cik})\\n\\n    def stock_social_sentiment(self, symbol, _from=None, to=None):\\n        return self._get(\"/stock/social-sentiment\", params={\"symbol\": symbol, \"from\": _from, \"to\": to})\\n\\n    def stock_investment_theme(self, theme):\\n        return self._get(\"/stock/investment-theme\", params={\"theme\": theme})\\n\\n    def stock_supply_chain(self, symbol):\\n        return self._get(\"/stock/supply-chain\", params={\"symbol\": symbol})\\n\\n    def company_esg_score(self, symbol):\\n        return self._get(\"/stock/esg\", params={\"symbol\": symbol})\\n\\n    def company_earnings_quality_score(self, symbol, freq):\\n        return self._get(\"/stock/earnings-quality-score\", params={\"symbol\": symbol, \\'freq\\': freq})\\n\\n    def crypto_profile(self, symbol):\\n        return self._get(\"/crypto/profile\", params={\"symbol\": symbol})\\n\\n    def stock_uspto_patent(self, symbol, _from=None, to=None):\\n        return self._get(\"/stock/uspto-patent\", params={\"symbol\": symbol, \"from\": _from, \"to\": to})\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'class FinnhubAPIException(Exception):\\n    def __init__(self, response):\\n        super(FinnhubAPIException, self).__init__()\\n\\n        self.code = 0\\n\\n        try:\\n            json_response = response.json()\\n        except ValueError:\\n            self.message = \"JSON error message from Finnhub: {}\".format(response.text)\\n        else:\\n            if \"error\" not in json_response:\\n                self.message = \"Wrong json format from FinnhubAPI\"\\n            else:\\n                self.message = json_response[\"error\"]\\n\\n        self.status_code = response.status_code\\n        self.response = response\\n\\n    def __str__(self):\\n        return \"FinnhubAPIException(status_code: {}): {}\".format(self.status_code, self.message)\\n\\n\\nclass FinnhubRequestException(Exception):\\n    def __init__(self, message):\\n        super(FinnhubRequestException, self).__init__()\\n        self.message = message\\n\\n    def __str__(self):\\n        return \"FinnhubRequestException: {}\".format(self.message)\\n'"}, "return_value": "'utf-8'"}]}, "neuter_encoding_declaration": {"line": 214, "args": [{"func_args": {"source": "'from __future__ import absolute_import\\n\\nfrom finnhub.client import Client\\nfrom finnhub.exceptions import FinnhubAPIException, FinnhubRequestException\\n'"}, "return_value": "'from __future__ import absolute_import\\n\\nfrom finnhub.client import Client\\nfrom finnhub.exceptions import FinnhubAPIException, FinnhubRequestException\\n'"}, {"func_args": {"source": "'import json\\nimport requests\\n\\nfrom finnhub.exceptions import FinnhubAPIException\\nfrom finnhub.exceptions import FinnhubRequestException\\n\\n\\nclass Client:\\n    API_URL = \"https://finnhub.io/api/v1\"\\n    DEFAULT_TIMEOUT = 10\\n\\n    def __init__(self, api_key, proxies=None):\\n        self._session = self._init_session(api_key, proxies)\\n\\n    @staticmethod\\n    def _init_session(api_key, proxies):\\n        session = requests.session()\\n        session.headers.update({\"Accept\": \"application/json\",\\n                                \"User-Agent\": \"finnhub/python\"})\\n        session.params[\"token\"] = api_key\\n        if proxies is not None:\\n            session.proxies.update(proxies)\\n\\n        return session\\n\\n    def close(self):\\n        self._session.close()\\n\\n    def __enter__(self):\\n        return self\\n\\n    def __exit__(self, *exc):\\n        self.close()\\n\\n    def _request(self, method, path, **kwargs):\\n        uri = \"{}/{}\".format(self.API_URL, path)\\n        kwargs[\"timeout\"] = kwargs.get(\"timeout\", self.DEFAULT_TIMEOUT)\\n        kwargs[\"params\"] = self._format_params(kwargs.get(\"params\", {}))\\n\\n        response = getattr(self._session, method)(uri, **kwargs)\\n        return self._handle_response(response)\\n\\n    @staticmethod\\n    def _handle_response(response):\\n        if not response.ok:\\n            raise FinnhubAPIException(response)\\n\\n        try:\\n            content_type = response.headers.get(\\'Content-Type\\', \\'\\')\\n            if \\'application/json\\' in content_type:\\n                return response.json()\\n            if \\'text/csv\\' in content_type:\\n                return response.text\\n            if \\'text/plain\\' in content_type:\\n                return response.text\\n            raise FinnhubRequestException(\"Invalid Response: {}\".format(response.text))\\n        except ValueError:\\n            raise FinnhubRequestException(\"Invalid Response: {}\".format(response.text))\\n\\n    @staticmethod\\n    def _merge_two_dicts(first, second):\\n        result = first.copy()\\n        result.update(second)\\n        return result\\n\\n    @staticmethod\\n    def _format_params(params):\\n        return {k: json.dumps(v) if isinstance(v, bool) else v for k, v in params.items()}\\n\\n    def _get(self, path, **kwargs):\\n        return self._request(\"get\", path, **kwargs)\\n\\n    @property\\n    def api_key(self):\\n        return self._session.params.get(\"token\")\\n\\n    @api_key.setter\\n    def api_key(self, token):\\n        self._session.params[\"token\"] = token\\n\\n    def covid19(self):\\n        return self._get(\"/covid19/us\")\\n\\n    def company_profile(self, **params):\\n        return self._get(\"/stock/profile\", params=params)\\n\\n    def company_profile2(self, **params):\\n        return self._get(\"/stock/profile2\", params=params)\\n\\n    def aggregate_indicator(self, symbol, resolution):\\n        return self._get(\"/scan/technical-indicator\", params={\\n            \"symbol\": symbol,\\n            \"resolution\": resolution,\\n        })\\n\\n    def crypto_exchanges(self):\\n        return self._get(\"/crypto/exchange\")\\n\\n    def forex_exchanges(self):\\n        return self._get(\"/forex/exchange\")\\n\\n    def press_releases(self, symbol, _from=None, to=None):\\n        return self._get(\"/press-releases\", params={\\n            \"symbol\": symbol,\\n            \"from\": _from,\\n            \"to\": to\\n        })\\n\\n    def company_executive(self, symbol):\\n        return self._get(\"/stock/executive\", params={\"symbol\": symbol})\\n\\n    def stock_dividends(self, symbol, _from=None, to=None):\\n        return self._get(\"/stock/dividend\", params={\\n            \"symbol\": symbol,\\n            \"from\": _from,\\n            \"to\": to\\n        })\\n\\n    def stock_basic_dividends(self, symbol):\\n        return self._get(\"/stock/dividend2\", params={\"symbol\": symbol})\\n\\n    def stock_symbols(self, exchange):\\n        return self._get(\"/stock/symbol\", params={\"exchange\": exchange})\\n\\n    def recommendation_trends(self, symbol):\\n        return self._get(\"/stock/recommendation\", params={\"symbol\": symbol})\\n\\n    def price_target(self, symbol):\\n        return self._get(\"/stock/price-target\", params={\"symbol\": symbol})\\n\\n    def upgrade_downgrade(self, **params):\\n        return self._get(\"/stock/upgrade-downgrade\", params=params)\\n\\n    def option_chain(self, **params):\\n        return self._get(\"/stock/option-chain\", params=params)\\n\\n    def company_peers(self, symbol):\\n        return self._get(\"/stock/peers\", params={\"symbol\": symbol})\\n\\n    def company_basic_financials(self, symbol, metric):\\n        return self._get(\"/stock/metric\", params={\\n            \"symbol\": symbol,\\n            \"metric\": metric\\n        })\\n\\n    def financials(self, symbol, statement, freq):\\n        return self._get(\"/stock/financials\", params={\\n            \"symbol\": symbol,\\n            \"statement\": statement,\\n            \"freq\": freq\\n        })\\n\\n    def financials_reported(self, **params):\\n        return self._get(\"/stock/financials-reported\", params=params)\\n\\n    def fund_ownership(self, symbol, limit=None):\\n        return self._get(\"/stock/fund-ownership\", params={\\n            \"symbol\": symbol,\\n            \"limit\": limit\\n        })\\n\\n    def company_earnings(self, symbol, limit=None):\\n        return self._get(\"/stock/earnings\", params={\\n            \"symbol\": symbol,\\n            \"limit\": limit\\n        })\\n\\n    def company_revenue_estimates(self, symbol, freq=None):\\n        return self._get(\"/stock/revenue-estimate\", params={\\n            \"symbol\": symbol,\\n            \"freq\": freq\\n        })\\n\\n    def company_ebitda_estimates(self, symbol, freq=None):\\n        return self._get(\"/stock/ebitda-estimate\", params={\\n            \"symbol\": symbol,\\n            \"freq\": freq\\n        })\\n\\n    def company_ebit_estimates(self, symbol, freq=None):\\n        return self._get(\"/stock/ebit-estimate\", params={\\n            \"symbol\": symbol,\\n            \"freq\": freq\\n        })\\n\\n    def company_eps_estimates(self, symbol, freq=None):\\n        return self._get(\"/stock/eps-estimate\", params={\\n            \"symbol\": symbol,\\n            \"freq\": freq\\n        })\\n\\n    def exchange(self):\\n        return self._get(\"/stock/exchange\")\\n\\n    def filings(self, **params):\\n        return self._get(\"/stock/filings\", params=params)\\n\\n    def stock_symbol(self, **params):\\n        return self._get(\"/stock/symbol\", params=params)\\n\\n    def quote(self, symbol):\\n        return self._get(\"/quote\", params={\\n            \"symbol\": symbol\\n        })\\n\\n    def transcripts(self, _id):\\n        return self._get(\"/stock/transcripts\", params={\"id\": _id})\\n\\n    def transcripts_list(self, symbol):\\n        return self._get(\"/stock/transcripts/list\", params={\"symbol\": symbol})\\n\\n    def sim_index(self, **params):\\n        return self._get(\"/stock/similarity-index\", params=params)\\n\\n    def stock_candles(self, symbol, resolution, _from, to, **kwargs):\\n        params = self._merge_two_dicts({\\n            \"symbol\": symbol,\\n            \"resolution\": resolution,\\n            \"from\": _from,\\n            \"to\": to\\n        }, kwargs)\\n\\n        return self._get(\"/stock/candle\", params=params)\\n\\n    def stock_tick(self, symbol, date, limit, skip, _format=\\'json\\', **kwargs):\\n        params = self._merge_two_dicts({\\n            \"symbol\": symbol,\\n            \"date\": date,\\n            \"limit\": limit,\\n            \"skip\": skip,\\n            \"format\": _format\\n        }, kwargs)\\n\\n        return self._get(\"/stock/tick\", params=params)\\n\\n    def stock_nbbo(self, symbol, date, limit, skip, _format=\\'json\\', **kwargs):\\n        params = self._merge_two_dicts({\\n            \"symbol\": symbol,\\n            \"date\": date,\\n            \"limit\": limit,\\n            \"skip\": skip,\\n            \"format\": _format\\n        }, kwargs)\\n\\n        return self._get(\"/stock/bbo\", params=params)\\n\\n    def forex_rates(self, **params):\\n        return self._get(\"/forex/rates\", params=params)\\n\\n    def forex_symbols(self, exchange):\\n        return self._get(\"/forex/symbol\", params={\\n            \"exchange\": exchange\\n        })\\n\\n    def forex_candles(self, symbol, resolution, _from, to, _format=\\'json\\'):\\n        return self._get(\"/forex/candle\", params={\\n            \"symbol\": symbol,\\n            \"resolution\": resolution,\\n            \"from\": _from,\\n            \"to\": to,\\n            \"format\": _format\\n        })\\n\\n    def crypto_symbols(self, exchange):\\n        return self._get(\"/crypto/symbol\", params={\"exchange\": exchange})\\n\\n    def crypto_candles(self, symbol, resolution, _from, to, _format=\\'json\\'):\\n        return self._get(\"/crypto/candle\", params={\\n            \"symbol\": symbol,\\n            \"resolution\": resolution,\\n            \"from\": _from,\\n            \"to\": to,\\n            \"format\": _format\\n        })\\n\\n    def pattern_recognition(self, symbol, resolution):\\n        return self._get(\"/scan/pattern\", params={\\n            \"symbol\": symbol,\\n            \"resolution\": resolution\\n        })\\n\\n    def support_resistance(self, symbol, resolution):\\n        return self._get(\"/scan/support-resistance\", params={\\n            \"symbol\": symbol,\\n            \"resolution\": resolution\\n        })\\n\\n    def technical_indicator(self, symbol, resolution, _from, to, indicator, indicator_fields=None):\\n        indicator_fields = indicator_fields or {}\\n        params = self._merge_two_dicts({\\n            \"symbol\": symbol,\\n            \"resolution\": resolution,\\n            \"from\": _from,\\n            \"to\": to,\\n            \"indicator\": indicator\\n        }, indicator_fields)\\n\\n        return self._get(\"/indicator\", params=params)\\n\\n    def stock_splits(self, symbol, _from, to):\\n        return self._get(\"/stock/split\", params={\\n            \"symbol\": symbol,\\n            \"from\": _from,\\n            \"to\": to\\n        })\\n\\n    def general_news(self, category, min_id=0):\\n        return self._get(\"/news\", params={\\n            \"category\": category,\\n            \"minId\": min_id\\n        })\\n\\n    def company_news(self, symbol, _from, to):\\n        return self._get(\"/company-news\", params={\\n            \"symbol\": symbol,\\n            \"from\": _from,\\n            \"to\": to\\n        })\\n\\n    def news_sentiment(self, symbol):\\n        return self._get(\"/news-sentiment\", params={\\n            \"symbol\": symbol\\n        })\\n\\n    def ownership(self, symbol, limit=None):\\n        return self._get(\"/stock/ownership\", params={\\n            \"symbol\": symbol,\\n            \"limit\": limit\\n        })\\n\\n    def country(self):\\n        return self._get(\"/country\")\\n\\n    def economic_code(self):\\n        return self._get(\"/economic/code\")\\n\\n    def economic_data(self, code):\\n        return self._get(\"/economic\", params={\"code\": code})\\n\\n    def calendar_economic(self):\\n        return self._get(\"/calendar/economic\")\\n\\n    def earnings_calendar(self, _from, to, symbol, international=False):\\n        return self._get(\"/calendar/earnings\", params={\\n            \"from\": _from,\\n            \"to\": to,\\n            \"symbol\": symbol,\\n            \"international\": international\\n        })\\n\\n    def ipo_calendar(self, _from, to):\\n        return self._get(\"/calendar/ipo\", params={\\n            \"from\": _from,\\n            \"to\": to\\n        })\\n\\n    def indices_const(self, **params):\\n        return self._get(\"/index/constituents\", params=params)\\n\\n    def indices_hist_const(self, **params):\\n        return self._get(\"/index/historical-constituents\", params=params)\\n\\n    def etfs_profile(self, symbol):\\n        return self._get(\"/etf/profile\", params={\"symbol\": symbol})\\n\\n    def etfs_holdings(self, symbol):\\n        return self._get(\"/etf/holdings\", params={\"symbol\": symbol})\\n\\n    def etfs_sector_exp(self, symbol):\\n        return self._get(\"/etf/sector\", params={\"symbol\": symbol})\\n\\n    def etfs_country_exp(self, symbol):\\n        return self._get(\"/etf/country\", params={\"symbol\": symbol})\\n\\n    def international_filings(self, symbol=\"\", country=\"\"):\\n        return self._get(\"/stock/international-filings\", params={\"symbol\": symbol, \"country\": country})\\n\\n    def sec_sentiment_analysis(self, access_number):\\n        return self._get(\"/stock/filings-sentiment\", params={\"accessNumber\": access_number})\\n\\n    def sec_similarity_index(self, symbol=\"\", cik=\"\", freq=\"annual\"):\\n        return self._get(\"/stock/similarity-index\", params={\"symbol\": symbol, \"cik\": cik, \"freq\": freq})\\n\\n    def last_bid_ask(self, symbol):\\n        return self._get(\"/stock/bidask\", params={\"symbol\": symbol})\\n\\n    def fda_calendar(self):\\n        return self._get(\"/fda-advisory-committee-calendar\")\\n\\n    def symbol_lookup(self, query):\\n        return self._get(\"/search\", params={\"q\": query})\\n\\n    def stock_insider_transactions(self, symbol, _from=None, to=None):\\n        return self._get(\"/stock/insider-transactions\", params={\"symbol\": symbol, \"from\": _from, \"to\": to})\\n\\n    def mutual_fund_profile(self, symbol):\\n        return self._get(\"/mutual-fund/profile\", params={\"symbol\": symbol})\\n\\n    def mutual_fund_holdings(self, symbol):\\n        return self._get(\"/mutual-fund/holdings\", params={\"symbol\": symbol})\\n\\n    def mutual_fund_sector_exp(self, symbol):\\n        return self._get(\"/mutual-fund/sector\", params={\"symbol\": symbol})\\n\\n    def mutual_fund_country_exp(self, symbol):\\n        return self._get(\"/mutual-fund/country\", params={\"symbol\": symbol})\\n\\n    def stock_revenue_breakdown(self, symbol, cik=\"\"):\\n        return self._get(\"/stock/revenue-breakdown\", params={\"symbol\": symbol, \"cik\": cik})\\n\\n    def stock_social_sentiment(self, symbol, _from=None, to=None):\\n        return self._get(\"/stock/social-sentiment\", params={\"symbol\": symbol, \"from\": _from, \"to\": to})\\n\\n    def stock_investment_theme(self, theme):\\n        return self._get(\"/stock/investment-theme\", params={\"theme\": theme})\\n\\n    def stock_supply_chain(self, symbol):\\n        return self._get(\"/stock/supply-chain\", params={\"symbol\": symbol})\\n\\n    def company_esg_score(self, symbol):\\n        return self._get(\"/stock/esg\", params={\"symbol\": symbol})\\n\\n    def company_earnings_quality_score(self, symbol, freq):\\n        return self._get(\"/stock/earnings-quality-score\", params={\"symbol\": symbol, \\'freq\\': freq})\\n\\n    def crypto_profile(self, symbol):\\n        return self._get(\"/crypto/profile\", params={\"symbol\": symbol})\\n\\n    def stock_uspto_patent(self, symbol, _from=None, to=None):\\n        return self._get(\"/stock/uspto-patent\", params={\"symbol\": symbol, \"from\": _from, \"to\": to})\\n'"}, "return_value": "'import json\\nimport requests\\n\\nfrom finnhub.exceptions import FinnhubAPIException\\nfrom finnhub.exceptions import FinnhubRequestException\\n\\n\\nclass Client:\\n    API_URL = \"https://finnhub.io/api/v1\"\\n    DEFAULT_TIMEOUT = 10\\n\\n    def __init__(self, api_key, proxies=None):\\n        self._session = self._init_session(api_key, proxies)\\n\\n    @staticmethod\\n    def _init_session(api_key, proxies):\\n        session = requests.session()\\n        session.headers.update({\"Accept\": \"application/json\",\\n                                \"User-Agent\": \"finnhub/python\"})\\n        session.params[\"token\"] = api_key\\n        if proxies is not None:\\n            session.proxies.update(proxies)\\n\\n        return session\\n\\n    def close(self):\\n        self._session.close()\\n\\n    def __enter__(self):\\n        return self\\n\\n    def __exit__(self, *exc):\\n        self.close()\\n\\n    def _request(self, method, path, **kwargs):\\n        uri = \"{}/{}\".format(self.API_URL, path)\\n        kwargs[\"timeout\"] = kwargs.get(\"timeout\", self.DEFAULT_TIMEOUT)\\n        kwargs[\"params\"] = self._format_params(kwargs.get(\"params\", {}))\\n\\n        response = getattr(self._session, method)(uri, **kwargs)\\n        return self._handle_response(response)\\n\\n    @staticmethod\\n    def _handle_response(response):\\n        if not response.ok:\\n            raise FinnhubAPIException(response)\\n\\n        try:\\n            content_type = response.headers.get(\\'Content-Type\\', \\'\\')\\n            if \\'application/json\\' in content_type:\\n                return response.json()\\n            if \\'text/csv\\' in content_type:\\n                return response.text\\n            if \\'text/plain\\' in content_type:\\n                return response.text\\n            raise FinnhubRequestException(\"Invalid Response: {}\".format(response.text))\\n        except ValueError:\\n            raise FinnhubRequestException(\"Invalid Response: {}\".format(response.text))\\n\\n    @staticmethod\\n    def _merge_two_dicts(first, second):\\n        result = first.copy()\\n        result.update(second)\\n        return result\\n\\n    @staticmethod\\n    def _format_params(params):\\n        return {k: json.dumps(v) if isinstance(v, bool) else v for k, v in params.items()}\\n\\n    def _get(self, path, **kwargs):\\n        return self._request(\"get\", path, **kwargs)\\n\\n    @property\\n    def api_key(self):\\n        return self._session.params.get(\"token\")\\n\\n    @api_key.setter\\n    def api_key(self, token):\\n        self._session.params[\"token\"] = token\\n\\n    def covid19(self):\\n        return self._get(\"/covid19/us\")\\n\\n    def company_profile(self, **params):\\n        return self._get(\"/stock/profile\", params=params)\\n\\n    def company_profile2(self, **params):\\n        return self._get(\"/stock/profile2\", params=params)\\n\\n    def aggregate_indicator(self, symbol, resolution):\\n        return self._get(\"/scan/technical-indicator\", params={\\n            \"symbol\": symbol,\\n            \"resolution\": resolution,\\n        })\\n\\n    def crypto_exchanges(self):\\n        return self._get(\"/crypto/exchange\")\\n\\n    def forex_exchanges(self):\\n        return self._get(\"/forex/exchange\")\\n\\n    def press_releases(self, symbol, _from=None, to=None):\\n        return self._get(\"/press-releases\", params={\\n            \"symbol\": symbol,\\n            \"from\": _from,\\n            \"to\": to\\n        })\\n\\n    def company_executive(self, symbol):\\n        return self._get(\"/stock/executive\", params={\"symbol\": symbol})\\n\\n    def stock_dividends(self, symbol, _from=None, to=None):\\n        return self._get(\"/stock/dividend\", params={\\n            \"symbol\": symbol,\\n            \"from\": _from,\\n            \"to\": to\\n        })\\n\\n    def stock_basic_dividends(self, symbol):\\n        return self._get(\"/stock/dividend2\", params={\"symbol\": symbol})\\n\\n    def stock_symbols(self, exchange):\\n        return self._get(\"/stock/symbol\", params={\"exchange\": exchange})\\n\\n    def recommendation_trends(self, symbol):\\n        return self._get(\"/stock/recommendation\", params={\"symbol\": symbol})\\n\\n    def price_target(self, symbol):\\n        return self._get(\"/stock/price-target\", params={\"symbol\": symbol})\\n\\n    def upgrade_downgrade(self, **params):\\n        return self._get(\"/stock/upgrade-downgrade\", params=params)\\n\\n    def option_chain(self, **params):\\n        return self._get(\"/stock/option-chain\", params=params)\\n\\n    def company_peers(self, symbol):\\n        return self._get(\"/stock/peers\", params={\"symbol\": symbol})\\n\\n    def company_basic_financials(self, symbol, metric):\\n        return self._get(\"/stock/metric\", params={\\n            \"symbol\": symbol,\\n            \"metric\": metric\\n        })\\n\\n    def financials(self, symbol, statement, freq):\\n        return self._get(\"/stock/financials\", params={\\n            \"symbol\": symbol,\\n            \"statement\": statement,\\n            \"freq\": freq\\n        })\\n\\n    def financials_reported(self, **params):\\n        return self._get(\"/stock/financials-reported\", params=params)\\n\\n    def fund_ownership(self, symbol, limit=None):\\n        return self._get(\"/stock/fund-ownership\", params={\\n            \"symbol\": symbol,\\n            \"limit\": limit\\n        })\\n\\n    def company_earnings(self, symbol, limit=None):\\n        return self._get(\"/stock/earnings\", params={\\n            \"symbol\": symbol,\\n            \"limit\": limit\\n        })\\n\\n    def company_revenue_estimates(self, symbol, freq=None):\\n        return self._get(\"/stock/revenue-estimate\", params={\\n            \"symbol\": symbol,\\n            \"freq\": freq\\n        })\\n\\n    def company_ebitda_estimates(self, symbol, freq=None):\\n        return self._get(\"/stock/ebitda-estimate\", params={\\n            \"symbol\": symbol,\\n            \"freq\": freq\\n        })\\n\\n    def company_ebit_estimates(self, symbol, freq=None):\\n        return self._get(\"/stock/ebit-estimate\", params={\\n            \"symbol\": symbol,\\n            \"freq\": freq\\n        })\\n\\n    def company_eps_estimates(self, symbol, freq=None):\\n        return self._get(\"/stock/eps-estimate\", params={\\n            \"symbol\": symbol,\\n            \"freq\": freq\\n        })\\n\\n    def exchange(self):\\n        return self._get(\"/stock/exchange\")\\n\\n    def filings(self, **params):\\n        return self._get(\"/stock/filings\", params=params)\\n\\n    def stock_symbol(self, **params):\\n        return self._get(\"/stock/symbol\", params=params)\\n\\n    def quote(self, symbol):\\n        return self._get(\"/quote\", params={\\n            \"symbol\": symbol\\n        })\\n\\n    def transcripts(self, _id):\\n        return self._get(\"/stock/transcripts\", params={\"id\": _id})\\n\\n    def transcripts_list(self, symbol):\\n        return self._get(\"/stock/transcripts/list\", params={\"symbol\": symbol})\\n\\n    def sim_index(self, **params):\\n        return self._get(\"/stock/similarity-index\", params=params)\\n\\n    def stock_candles(self, symbol, resolution, _from, to, **kwargs):\\n        params = self._merge_two_dicts({\\n            \"symbol\": symbol,\\n            \"resolution\": resolution,\\n            \"from\": _from,\\n            \"to\": to\\n        }, kwargs)\\n\\n        return self._get(\"/stock/candle\", params=params)\\n\\n    def stock_tick(self, symbol, date, limit, skip, _format=\\'json\\', **kwargs):\\n        params = self._merge_two_dicts({\\n            \"symbol\": symbol,\\n            \"date\": date,\\n            \"limit\": limit,\\n            \"skip\": skip,\\n            \"format\": _format\\n        }, kwargs)\\n\\n        return self._get(\"/stock/tick\", params=params)\\n\\n    def stock_nbbo(self, symbol, date, limit, skip, _format=\\'json\\', **kwargs):\\n        params = self._merge_two_dicts({\\n            \"symbol\": symbol,\\n            \"date\": date,\\n            \"limit\": limit,\\n            \"skip\": skip,\\n            \"format\": _format\\n        }, kwargs)\\n\\n        return self._get(\"/stock/bbo\", params=params)\\n\\n    def forex_rates(self, **params):\\n        return self._get(\"/forex/rates\", params=params)\\n\\n    def forex_symbols(self, exchange):\\n        return self._get(\"/forex/symbol\", params={\\n            \"exchange\": exchange\\n        })\\n\\n    def forex_candles(self, symbol, resolution, _from, to, _format=\\'json\\'):\\n        return self._get(\"/forex/candle\", params={\\n            \"symbol\": symbol,\\n            \"resolution\": resolution,\\n            \"from\": _from,\\n            \"to\": to,\\n            \"format\": _format\\n        })\\n\\n    def crypto_symbols(self, exchange):\\n        return self._get(\"/crypto/symbol\", params={\"exchange\": exchange})\\n\\n    def crypto_candles(self, symbol, resolution, _from, to, _format=\\'json\\'):\\n        return self._get(\"/crypto/candle\", params={\\n            \"symbol\": symbol,\\n            \"resolution\": resolution,\\n            \"from\": _from,\\n            \"to\": to,\\n            \"format\": _format\\n        })\\n\\n    def pattern_recognition(self, symbol, resolution):\\n        return self._get(\"/scan/pattern\", params={\\n            \"symbol\": symbol,\\n            \"resolution\": resolution\\n        })\\n\\n    def support_resistance(self, symbol, resolution):\\n        return self._get(\"/scan/support-resistance\", params={\\n            \"symbol\": symbol,\\n            \"resolution\": resolution\\n        })\\n\\n    def technical_indicator(self, symbol, resolution, _from, to, indicator, indicator_fields=None):\\n        indicator_fields = indicator_fields or {}\\n        params = self._merge_two_dicts({\\n            \"symbol\": symbol,\\n            \"resolution\": resolution,\\n            \"from\": _from,\\n            \"to\": to,\\n            \"indicator\": indicator\\n        }, indicator_fields)\\n\\n        return self._get(\"/indicator\", params=params)\\n\\n    def stock_splits(self, symbol, _from, to):\\n        return self._get(\"/stock/split\", params={\\n            \"symbol\": symbol,\\n            \"from\": _from,\\n            \"to\": to\\n        })\\n\\n    def general_news(self, category, min_id=0):\\n        return self._get(\"/news\", params={\\n            \"category\": category,\\n            \"minId\": min_id\\n        })\\n\\n    def company_news(self, symbol, _from, to):\\n        return self._get(\"/company-news\", params={\\n            \"symbol\": symbol,\\n            \"from\": _from,\\n            \"to\": to\\n        })\\n\\n    def news_sentiment(self, symbol):\\n        return self._get(\"/news-sentiment\", params={\\n            \"symbol\": symbol\\n        })\\n\\n    def ownership(self, symbol, limit=None):\\n        return self._get(\"/stock/ownership\", params={\\n            \"symbol\": symbol,\\n            \"limit\": limit\\n        })\\n\\n    def country(self):\\n        return self._get(\"/country\")\\n\\n    def economic_code(self):\\n        return self._get(\"/economic/code\")\\n\\n    def economic_data(self, code):\\n        return self._get(\"/economic\", params={\"code\": code})\\n\\n    def calendar_economic(self):\\n        return self._get(\"/calendar/economic\")\\n\\n    def earnings_calendar(self, _from, to, symbol, international=False):\\n        return self._get(\"/calendar/earnings\", params={\\n            \"from\": _from,\\n            \"to\": to,\\n            \"symbol\": symbol,\\n            \"international\": international\\n        })\\n\\n    def ipo_calendar(self, _from, to):\\n        return self._get(\"/calendar/ipo\", params={\\n            \"from\": _from,\\n            \"to\": to\\n        })\\n\\n    def indices_const(self, **params):\\n        return self._get(\"/index/constituents\", params=params)\\n\\n    def indices_hist_const(self, **params):\\n        return self._get(\"/index/historical-constituents\", params=params)\\n\\n    def etfs_profile(self, symbol):\\n        return self._get(\"/etf/profile\", params={\"symbol\": symbol})\\n\\n    def etfs_holdings(self, symbol):\\n        return self._get(\"/etf/holdings\", params={\"symbol\": symbol})\\n\\n    def etfs_sector_exp(self, symbol):\\n        return self._get(\"/etf/sector\", params={\"symbol\": symbol})\\n\\n    def etfs_country_exp(self, symbol):\\n        return self._get(\"/etf/country\", params={\"symbol\": symbol})\\n\\n    def international_filings(self, symbol=\"\", country=\"\"):\\n        return self._get(\"/stock/international-filings\", params={\"symbol\": symbol, \"country\": country})\\n\\n    def sec_sentiment_analysis(self, access_number):\\n        return self._get(\"/stock/filings-sentiment\", params={\"accessNumber\": access_number})\\n\\n    def sec_similarity_index(self, symbol=\"\", cik=\"\", freq=\"annual\"):\\n        return self._get(\"/stock/similarity-index\", params={\"symbol\": symbol, \"cik\": cik, \"freq\": freq})\\n\\n    def last_bid_ask(self, symbol):\\n        return self._get(\"/stock/bidask\", params={\"symbol\": symbol})\\n\\n    def fda_calendar(self):\\n        return self._get(\"/fda-advisory-committee-calendar\")\\n\\n    def symbol_lookup(self, query):\\n        return self._get(\"/search\", params={\"q\": query})\\n\\n    def stock_insider_transactions(self, symbol, _from=None, to=None):\\n        return self._get(\"/stock/insider-transactions\", params={\"symbol\": symbol, \"from\": _from, \"to\": to})\\n\\n    def mutual_fund_profile(self, symbol):\\n        return self._get(\"/mutual-fund/profile\", params={\"symbol\": symbol})\\n\\n    def mutual_fund_holdings(self, symbol):\\n        return self._get(\"/mutual-fund/holdings\", params={\"symbol\": symbol})\\n\\n    def mutual_fund_sector_exp(self, symbol):\\n        return self._get(\"/mutual-fund/sector\", params={\"symbol\": symbol})\\n\\n    def mutual_fund_country_exp(self, symbol):\\n        return self._get(\"/mutual-fund/country\", params={\"symbol\": symbol})\\n\\n    def stock_revenue_breakdown(self, symbol, cik=\"\"):\\n        return self._get(\"/stock/revenue-breakdown\", params={\"symbol\": symbol, \"cik\": cik})\\n\\n    def stock_social_sentiment(self, symbol, _from=None, to=None):\\n        return self._get(\"/stock/social-sentiment\", params={\"symbol\": symbol, \"from\": _from, \"to\": to})\\n\\n    def stock_investment_theme(self, theme):\\n        return self._get(\"/stock/investment-theme\", params={\"theme\": theme})\\n\\n    def stock_supply_chain(self, symbol):\\n        return self._get(\"/stock/supply-chain\", params={\"symbol\": symbol})\\n\\n    def company_esg_score(self, symbol):\\n        return self._get(\"/stock/esg\", params={\"symbol\": symbol})\\n\\n    def company_earnings_quality_score(self, symbol, freq):\\n        return self._get(\"/stock/earnings-quality-score\", params={\"symbol\": symbol, \\'freq\\': freq})\\n\\n    def crypto_profile(self, symbol):\\n        return self._get(\"/crypto/profile\", params={\"symbol\": symbol})\\n\\n    def stock_uspto_patent(self, symbol, _from=None, to=None):\\n        return self._get(\"/stock/uspto-patent\", params={\"symbol\": symbol, \"from\": _from, \"to\": to})\\n'"}, {"func_args": {"source": "'class FinnhubAPIException(Exception):\\n    def __init__(self, response):\\n        super(FinnhubAPIException, self).__init__()\\n\\n        self.code = 0\\n\\n        try:\\n            json_response = response.json()\\n        except ValueError:\\n            self.message = \"JSON error message from Finnhub: {}\".format(response.text)\\n        else:\\n            if \"error\" not in json_response:\\n                self.message = \"Wrong json format from FinnhubAPI\"\\n            else:\\n                self.message = json_response[\"error\"]\\n\\n        self.status_code = response.status_code\\n        self.response = response\\n\\n    def __str__(self):\\n        return \"FinnhubAPIException(status_code: {}): {}\".format(self.status_code, self.message)\\n\\n\\nclass FinnhubRequestException(Exception):\\n    def __init__(self, message):\\n        super(FinnhubRequestException, self).__init__()\\n        self.message = message\\n\\n    def __str__(self):\\n        return \"FinnhubRequestException: {}\".format(self.message)\\n'"}, "return_value": "'class FinnhubAPIException(Exception):\\n    def __init__(self, response):\\n        super(FinnhubAPIException, self).__init__()\\n\\n        self.code = 0\\n\\n        try:\\n            json_response = response.json()\\n        except ValueError:\\n            self.message = \"JSON error message from Finnhub: {}\".format(response.text)\\n        else:\\n            if \"error\" not in json_response:\\n                self.message = \"Wrong json format from FinnhubAPI\"\\n            else:\\n                self.message = json_response[\"error\"]\\n\\n        self.status_code = response.status_code\\n        self.response = response\\n\\n    def __str__(self):\\n        return \"FinnhubAPIException(status_code: {}): {}\".format(self.status_code, self.message)\\n\\n\\nclass FinnhubRequestException(Exception):\\n    def __init__(self, message):\\n        super(FinnhubRequestException, self).__init__()\\n        self.message = message\\n\\n    def __str__(self):\\n        return \"FinnhubRequestException: {}\".format(self.message)\\n'"}]}}