{"_args_converter": {"line": 816, "args": [{"func_args": {"args": "()"}, "return_value": "()"}], "text": "def _args_converter(args: Iterable[str]) -> Tuple[str, ...]:\n    return tuple(args)"}, "_get_plugin_specs_as_list": {"line": 715, "args": [{"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "None"}, "return_value": "[]"}], "text": "def _get_plugin_specs_as_list(\n    specs: Union[None, types.ModuleType, str, Sequence[str]]\n) -> List[str]:\n    \"\"\"Parse a plugins specification into a list of plugin names.\"\"\"\n    # None means empty.\n    if specs is None:\n        return []\n    # Workaround for #3899 - a submodule which happens to be called \"pytest_plugins\".\n    if isinstance(specs, types.ModuleType):\n        return []\n    # Comma-separated list.\n    if isinstance(specs, str):\n        return specs.split(\",\") if specs else []\n    # Direct specification.\n    if isinstance(specs, collections.abc.Sequence):\n        return list(specs)\n    raise UsageError(\n        \"Plugins may be specified as a sequence or a ','-separated string of plugin names. Got: %r\"\n        % specs\n    )"}, "_assertion_supported": {"line": 1511, "args": [{"func_args": {}, "return_value": "True"}], "text": "def _assertion_supported() -> bool:\n    try:\n        assert False\n    except AssertionError:\n        return True\n    else:\n        return False"}, "scope2index": {"line": 803, "args": [{"func_args": {"scope": "'session'", "descr": "\"Fixture 'pytestconfig'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'capfd'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'capfdbinary'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'capsys'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'capsysbinary'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'tmp_path'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'session'", "descr": "\"Fixture 'tmp_path_factory'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'tmpdir'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'session'", "descr": "\"Fixture 'tmpdir_factory'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'monkeypatch'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'recwarn'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'record_property'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'session'", "descr": "\"Fixture 'record_testsuite_property'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'record_xml_attribute'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'session'", "descr": "\"Fixture 'doctest_namespace'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'cache'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'caplog'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'session'", "descr": "\"Fixture 'testrun_uid'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'session'", "descr": "\"Fixture 'worker_id'\"", "where": "None"}, "return_value": "0"}], "text": "def scope2index(scope: str, descr: str, where: Optional[str] = None) -> int:\n    \"\"\"Look up the index of ``scope`` and raise a descriptive value error\n    if not defined.\"\"\"\n    strscopes: Sequence[str] = scopes\n    try:\n        return strscopes.index(scope)\n    except ValueError:\n        fail(\n            \"{} {}got an unexpected scope value '{}'\".format(\n                descr, f\"from {where} \" if where else \"\", scope\n            ),\n            pytrace=False,\n        )"}, "reorder_items": {"line": 270, "args": [{"func_args": {"items": "[]"}, "return_value": "[]"}], "text": "def reorder_items(items: Sequence[nodes.Item]) -> List[nodes.Item]:\n    argkeys_cache: Dict[int, Dict[nodes.Item, Dict[_Key, None]]] = {}\n    items_by_argkey: Dict[int, Dict[_Key, Deque[nodes.Item]]] = {}\n    for scopenum in range(0, scopenum_function):\n        d: Dict[nodes.Item, Dict[_Key, None]] = {}\n        argkeys_cache[scopenum] = d\n        item_d: Dict[_Key, Deque[nodes.Item]] = defaultdict(deque)\n        items_by_argkey[scopenum] = item_d\n        for item in items:\n            keys = dict.fromkeys(get_parametrized_fixture_keys(item, scopenum), None)\n            if keys:\n                d[item] = keys\n                for key in keys:\n                    item_d[key].append(item)\n    items_dict = dict.fromkeys(items, None)\n    return list(reorder_items_atscope(items_dict, argkeys_cache, items_by_argkey, 0))"}, "_format_trimmed": {"line": 1262, "args": [{"func_args": {"format": "' - {}'", "msg": "'django.core.exceptions.ImproperlyConfigured: Requested setting COMPONENTS, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.'", "available_width": "51"}, "return_value": "' - django.core.exceptions.ImproperlyConfigured: ...'"}, {"func_args": {"format": "' - {}'", "msg": "'django.core.exceptions.ImproperlyConfigured: Requested setting COMPONENTS, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.'", "available_width": "53"}, "return_value": "' - django.core.exceptions.ImproperlyConfigured: Re...'"}, {"func_args": {"format": "' - {}'", "msg": "'django.core.exceptions.ImproperlyConfigured: Requested setting COMPONENTS, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.'", "available_width": "40"}, "return_value": "' - django.core.exceptions.ImproperlyC...'"}, {"func_args": {"format": "' - {}'", "msg": "'django.core.exceptions.ImproperlyConfigured: Requested setting COMPONENTS, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.'", "available_width": "52"}, "return_value": "' - django.core.exceptions.ImproperlyConfigured: R...'"}, {"func_args": {"format": "' - {}'", "msg": "'django.core.exceptions.ImproperlyConfigured: Requested setting COMPONENTS, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.'", "available_width": "48"}, "return_value": "' - django.core.exceptions.ImproperlyConfigure...'"}], "text": "def _format_trimmed(format: str, msg: str, available_width: int) -> Optional[str]:\n    \"\"\"Format msg into format, ellipsizing it if doesn't fit in available_width.\n\n    Returns None if even the ellipsis can't fit.\n    \"\"\"\n    # Only use the first line.\n    i = msg.find(\"\\n\")\n    if i != -1:\n        msg = msg[:i]\n\n    ellipsis = \"...\"\n    format_width = wcswidth(format.format(\"\"))\n    if format_width + len(ellipsis) > available_width:\n        return None\n\n    if format_width + wcswidth(msg) > available_width:\n        available_width -= len(ellipsis)\n        msg = msg[:available_width]\n        while format_width + wcswidth(msg) > available_width:\n            msg = msg[:-1]\n        msg += ellipsis\n\n    return format.format(msg)"}, "pluralize": {"line": 1350, "args": [{"func_args": {"count": "5", "noun": "'error'"}, "return_value": "(5, 'errors')"}], "text": "def pluralize(count: int, noun: str) -> Tuple[int, str]:\n    # No need to pluralize words such as `failed` or `passed`.\n    if noun not in [\"error\", \"warnings\", \"test\"]:\n        return count, noun\n\n    # The `warnings` key is plural. To avoid API breakage, we keep it that way but\n    # set it to singular here so we can determine plurality in the same way as we do\n    # for `error`.\n    noun = noun.replace(\"warnings\", \"warning\")\n\n    return count, noun + \"s\" if count != 1 else noun"}, "format_session_duration": {"line": 1377, "args": [{"func_args": {"seconds": "1.1880509853363037"}, "return_value": "'1.19s'"}], "text": "def format_session_duration(seconds: float) -> str:\n    \"\"\"Format the given seconds in a human readable manner to show in the final summary.\"\"\"\n    if seconds < 60:\n        return f\"{seconds:.2f}s\"\n    else:\n        dt = datetime.timedelta(seconds=int(seconds))\n        return f\"{seconds:.2f}s ({dt})\""}, "_get_auto_indent": {"line": 113, "args": [{"func_args": {"auto_indent_option": "None"}, "return_value": "0"}, {"func_args": {"auto_indent_option": "None"}, "return_value": "0"}]}, "_get_stderr_fileno": {"line": 68, "args": [{"func_args": {}, "return_value": "2"}, {"func_args": {}, "return_value": "2"}]}, "get_terminal_width": {"line": 15, "args": [{"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}], "text": "def get_terminal_width() -> int:\n    width, _ = shutil.get_terminal_size(fallback=(80, 24))\n\n    # The Windows get_terminal_size may be bogus, let's sanify a bit.\n    if width < 40:\n        width = 80\n\n    return width"}, "get_dirs_from_args": {"line": 134, "args": [{"func_args": {"args": "[]"}, "return_value": "[]"}], "text": "def get_dirs_from_args(args: Iterable[str]) -> List[Path]:\n    def is_option(x: str) -> bool:\n        return x.startswith(\"-\")\n\n    def get_file_part_from_node_id(x: str) -> str:\n        return x.split(\"::\")[0]\n\n    def get_dir_from_path(path: Path) -> Path:\n        if path.is_dir():\n            return path\n        return path.parent\n\n    def safe_exists(path: Path) -> bool:\n        # This can throw on paths that contain characters unrepresentable at the OS level,\n        # or with invalid syntax on Windows (https://bugs.python.org/issue35306)\n        try:\n            return path.exists()\n        except OSError:\n            return False\n\n    # These look like paths but may not exist\n    possible_paths = (\n        absolutepath(get_file_part_from_node_id(arg))\n        for arg in args\n        if not is_option(arg)\n    )\n\n    return [get_dir_from_path(path) for path in possible_paths if safe_exists(path)]"}, "parts": {"line": 420, "args": [{"func_args": {"s": "'/usr/app/src/test_repos/django-components/django_components/app_settings.py'"}, "return_value": "{'/usr/app', '/usr/app/src/test_repos/django-components/django_components/app_settings.py', '/usr', '/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/django-components/django_components', '/usr/app/src/test_repos/django-components', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/django-components/django_components/apps.py'"}, "return_value": "{'/usr/app', '/usr', '/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/django-components/django_components/apps.py', '/usr/app/src/test_repos/django-components/django_components', '/usr/app/src/test_repos/django-components', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/django-components/django_components/component.py'"}, "return_value": "{'/usr/app', '/usr/app/src/test_repos/django-components/django_components/component.py', '/usr', '/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/django-components/django_components', '/usr/app/src/test_repos/django-components', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/django-components/django_components/component_registry.py'"}, "return_value": "{'/usr/app', '/usr', '/usr/app/src/test_repos/django-components/django_components/component_registry.py', '/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/django-components/django_components', '/usr/app/src/test_repos/django-components', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/django-components/django_components/middleware.py'"}, "return_value": "{'/usr/app/src/test_repos/django-components/django_components/middleware.py', '/usr/app', '/usr', '/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/django-components/django_components', '/usr/app/src/test_repos/django-components', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/django-components/django_components/template_loader.py'"}, "return_value": "{'/usr/app', '/usr', '/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/django-components/django_components/template_loader.py', '/usr/app/src/test_repos/django-components/django_components', '/usr/app/src/test_repos/django-components', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/django-components/django_components/templatetags'"}, "return_value": "{'/usr/app', '/usr/app/src/test_repos/django-components/django_components/templatetags', '/usr', '/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/django-components/django_components', '/usr/app/src/test_repos/django-components', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/django-components/django_components/templatetags/__init__.py'"}, "return_value": "{'/usr/app', '/usr/app/src/test_repos/django-components/django_components/templatetags', '/usr', '/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/django-components/django_components/templatetags/__init__.py', '/usr/app/src/test_repos/django-components/django_components', '/usr/app/src/test_repos/django-components', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/django-components/django_components/templatetags/component_tags.py'"}, "return_value": "{'/usr/app', '/usr/app/src/test_repos/django-components/django_components/templatetags', '/usr/app/src/test_repos/django-components/django_components/templatetags/component_tags.py', '/usr', '/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/django-components/django_components', '/usr/app/src/test_repos/django-components', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/django-components/django_components/templatetags/component_tags.py'"}, "return_value": "{'/usr/app', '/usr/app/src/test_repos/django-components/django_components/templatetags', '/usr/app/src/test_repos/django-components/django_components/templatetags/component_tags.py', '/usr', '/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/django-components/django_components', '/usr/app/src/test_repos/django-components', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/django-components/tests/django_test_setup.py'"}, "return_value": "{'/usr/app/src/test_repos/django-components/tests/django_test_setup.py', '/usr/app', '/usr', '/usr/app/src/test_repos/django-components/tests', '/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/django-components', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/django-components/tests/templates'"}, "return_value": "{'/usr/app', '/usr', '/usr/app/src/test_repos/django-components/tests', '/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/django-components/tests/templates', '/usr/app/src/test_repos/django-components', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/django-components/tests/test_component.py'"}, "return_value": "{'/usr/app', '/usr', '/usr/app/src/test_repos/django-components/tests', '/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/django-components/tests/test_component.py', '/usr/app/src/test_repos/django-components', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/django-components/tests/test_context.py'"}, "return_value": "{'/usr/app', '/usr', '/usr/app/src/test_repos/django-components/tests', '/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/django-components/tests/test_context.py', '/usr/app/src/test_repos/django-components', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/django-components/tests/test_dependency_rendering.py'"}, "return_value": "{'/usr/app', '/usr/app/src/test_repos/django-components/tests/test_dependency_rendering.py', '/usr', '/usr/app/src/test_repos/django-components/tests', '/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/django-components', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/django-components/tests/test_registry.py'"}, "return_value": "{'/usr/app', '/usr', '/usr/app/src/test_repos/django-components/tests/test_registry.py', '/usr/app/src/test_repos/django-components/tests', '/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/django-components', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/django-components/tests/test_templatetags.py'"}, "return_value": "{'/usr/app', '/usr', '/usr/app/src/test_repos/django-components/tests', '/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/django-components/tests/test_templatetags.py', '/usr/app/src/test_repos/django-components', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/django-components/tests/testutils.py'"}, "return_value": "{'/usr/app/src/test_repos/django-components/tests/testutils.py', '/usr/app', '/usr', '/usr/app/src/test_repos/django-components/tests', '/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/django-components', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/django-components/tests/templates/child_template.html'"}, "return_value": "{'/usr/app', '/usr', '/usr/app/src/test_repos/django-components/tests/templates/child_template.html', '/usr/app/src/test_repos/django-components/tests', '/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/django-components/tests/templates', '/usr/app/src/test_repos/django-components', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/django-components/tests/templates/conditional_template.html'"}, "return_value": "{'/usr/app', '/usr', '/usr/app/src/test_repos/django-components/tests', '/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/django-components/tests/templates/conditional_template.html', '/usr/app/src/test_repos/django-components/tests/templates', '/usr/app/src/test_repos/django-components', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/django-components/tests/templates/filtered_template.html'"}, "return_value": "{'/usr/app', '/usr', '/usr/app/src/test_repos/django-components/tests', '/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/django-components/tests/templates/filtered_template.html', '/usr/app/src/test_repos/django-components/tests/templates', '/usr/app/src/test_repos/django-components', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/django-components/tests/templates/iffed_template.html'"}, "return_value": "{'/usr/app', '/usr', '/usr/app/src/test_repos/django-components/tests/templates/iffed_template.html', '/usr/app/src/test_repos/django-components/tests', '/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/django-components/tests/templates', '/usr/app/src/test_repos/django-components', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/django-components/tests/templates/incrementer.html'"}, "return_value": "{'/usr/app', '/usr', '/usr/app/src/test_repos/django-components/tests', '/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/django-components/tests/templates/incrementer.html', '/usr/app/src/test_repos/django-components/tests/templates', '/usr/app/src/test_repos/django-components', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/django-components/tests/templates/mdn_complete_page.html'"}, "return_value": "{'/usr/app', '/usr', '/usr/app/src/test_repos/django-components/tests/templates/mdn_complete_page.html', '/usr/app/src/test_repos/django-components/tests', '/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/django-components/tests/templates', '/usr/app/src/test_repos/django-components', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/django-components/tests/templates/mdn_component_template.html'"}, "return_value": "{'/usr/app', '/usr', '/usr/app/src/test_repos/django-components/tests', '/usr/app/src/test_repos', '/usr/app/src/test_repos/django-components/tests/templates/mdn_component_template.html', '/usr/app/src', '/usr/app/src/test_repos/django-components/tests/templates', '/usr/app/src/test_repos/django-components', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/django-components/tests/templates/nested_slot_template.html'"}, "return_value": "{'/usr/app/src/test_repos/django-components/tests/templates/nested_slot_template.html', '/usr/app', '/usr', '/usr/app/src/test_repos/django-components/tests', '/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/django-components/tests/templates', '/usr/app/src/test_repos/django-components', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/django-components/tests/templates/parent_template.html'"}, "return_value": "{'/usr/app/src/test_repos/django-components/tests/templates/parent_template.html', '/usr/app', '/usr', '/usr/app/src/test_repos/django-components/tests', '/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/django-components/tests/templates', '/usr/app/src/test_repos/django-components', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/django-components/tests/templates/parent_with_args_template.html'"}, "return_value": "{'/usr/app/src/test_repos/django-components/tests/templates/parent_with_args_template.html', '/usr/app', '/usr', '/usr/app/src/test_repos/django-components/tests', '/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/django-components/tests/templates', '/usr/app/src/test_repos/django-components', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/django-components/tests/templates/simple_template.html'"}, "return_value": "{'/usr/app', '/usr', '/usr/app/src/test_repos/django-components/tests', '/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/django-components/tests/templates/simple_template.html', '/usr/app/src/test_repos/django-components/tests/templates', '/usr/app/src/test_repos/django-components', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/django-components/tests/templates/slotted_template.html'"}, "return_value": "{'/usr/app', '/usr', '/usr/app/src/test_repos/django-components/tests', '/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/django-components/tests/templates/slotted_template.html', '/usr/app/src/test_repos/django-components/tests/templates', '/usr/app/src/test_repos/django-components', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/django-components/tests/templates/slotted_template_no_slots.html'"}, "return_value": "{'/usr/app', '/usr', '/usr/app/src/test_repos/django-components/tests', '/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/django-components/tests/templates/slotted_template_no_slots.html', '/usr/app/src/test_repos/django-components/tests/templates', '/usr/app/src/test_repos/django-components', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/django-components/tests/templates/slotted_template_with_missing_variable.html'"}, "return_value": "{'/usr/app', '/usr/app/src/test_repos/django-components/tests/templates/slotted_template_with_missing_variable.html', '/usr', '/usr/app/src/test_repos/django-components/tests', '/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/django-components/tests/templates', '/usr/app/src/test_repos/django-components', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/django-components/tests/templates/svg_dynamic1.svg'"}, "return_value": "{'/usr/app/src/test_repos/django-components/tests/templates/svg_dynamic1.svg', '/usr/app', '/usr', '/usr/app/src/test_repos/django-components/tests', '/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/django-components/tests/templates', '/usr/app/src/test_repos/django-components', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/django-components/tests/templates/svg_dynamic2.svg'"}, "return_value": "{'/usr/app', '/usr', '/usr/app/src/test_repos/django-components/tests/templates/svg_dynamic2.svg', '/usr/app/src/test_repos/django-components/tests', '/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/django-components/tests/templates', '/usr/app/src/test_repos/django-components', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/django-components/tests/templates/template_with_illegal_slot.html'"}, "return_value": "{'/usr/app/src/test_repos/django-components/tests/templates/template_with_illegal_slot.html', '/usr/app', '/usr', '/usr/app/src/test_repos/django-components/tests', '/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/django-components/tests/templates', '/usr/app/src/test_repos/django-components', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/django-components/tests/templates/template_with_provided_and_default_parameters.html'"}, "return_value": "{'/usr/app', '/usr', '/usr/app/src/test_repos/django-components/tests', '/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/django-components/tests/templates/template_with_provided_and_default_parameters.html', '/usr/app/src/test_repos/django-components/tests/templates', '/usr/app/src/test_repos/django-components', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/django-components/tests/templates/variable_display.html'"}, "return_value": "{'/usr/app', '/usr', '/usr/app/src/test_repos/django-components/tests', '/usr/app/src/test_repos', '/usr/app/src', '/usr/app/src/test_repos/django-components/tests/templates/variable_display.html', '/usr/app/src/test_repos/django-components/tests/templates', '/usr/app/src/test_repos/django-components', '/'}"}], "text": "def parts(s: str) -> Set[str]:\n    parts = s.split(sep)\n    return {sep.join(parts[: i + 1]) or sep for i in range(len(parts))}"}, "_ispath": {"line": 25, "args": [{"func_args": {"p": "'/usr/app/src/test_repos/django-components/pyproject.toml'"}, "return_value": "True"}], "text": "def _ispath(p):\n    if isinstance(p, (bytes, basestring)):\n        return True\n    return _detect_pathlib_path(p)"}, "_getpath": {"line": 31, "args": [{"func_args": {"p": "'/usr/app/src/test_repos/django-components/pyproject.toml'"}, "return_value": "'/usr/app/src/test_repos/django-components/pyproject.toml'"}], "text": "def _getpath(p):\n    if (3, 6) <= sys.version_info:\n        import os\n        return os.fspath(p)\n    if _detect_pathlib_path(p):\n        return str(p)\n    return p"}, "_strictly_valid_num": {"line": 89, "args": [{"func_args": {"n": "' 79'"}, "return_value": "True"}, {"func_args": {"n": "\" '\\\\.pyi?$'\""}, "return_value": "True"}, {"func_args": {"n": "\"  '''/(\""}, "return_value": "True"}, {"func_args": {"n": "' \"black\"'"}, "return_value": "True"}, {"func_args": {"n": "' 3'"}, "return_value": "True"}, {"func_args": {"n": "' \"True\"'"}, "return_value": "True"}, {"func_args": {"n": "' \"django_components\"'"}, "return_value": "True"}], "text": "def _strictly_valid_num(n):\n    n = n.strip()\n    if not n:\n        return False\n    if n[0] == '_':\n        return False\n    if n[-1] == '_':\n        return False\n    if \"_.\" in n or \"._\" in n:\n        return False\n    if len(n) == 1:\n        return True\n    if n[0] == '0' and n[1] not in ['.', 'o', 'b', 'x']:\n        return False\n    if n[0] == '+' or n[0] == '-':\n        n = n[1:]\n        if len(n) > 1 and n[0] == '0' and n[1] != '.':\n            return False\n    if '__' in n:\n        return False\n    return True"}, "_unescape": {"line": 608, "args": [{"func_args": {"v": "'\"black\"'"}, "return_value": "'\"black\"'"}, {"func_args": {"v": "'\"True\"'"}, "return_value": "'\"True\"'"}, {"func_args": {"v": "'\"django_components\"'"}, "return_value": "'\"django_components\"'"}], "text": "def _unescape(v):\n    \"\"\"Unescape characters in a TOML string.\"\"\"\n    i = 0\n    backslash = False\n    while i < len(v):\n        if backslash:\n            backslash = False\n            if v[i] in _escapes:\n                v = v[:i - 1] + _escape_to_escapedchars[v[i]] + v[i + 1:]\n            elif v[i] == '\\\\':\n                v = v[:i - 1] + v[i:]\n            elif v[i] == 'u' or v[i] == 'U':\n                i += 1\n            else:\n                raise ValueError(\"Reserved escape sequence used\")\n            continue\n        elif v[i] == '\\\\':\n            backslash = True\n        i += 1\n    return v"}, "iscommentline": {"line": 162, "args": [{"func_args": {"line": "'[tox]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'envlist = \\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tpy{36,37,38,39}-django{22,30,31,32}\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tflake8\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tisort\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}, {"func_args": {"line": "'[gh-actions]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'3.6 = py36-django{22,30,31,32}\\n'"}, "return_value": "False"}, {"func_args": {"line": "'3.7 = py37-django{22,30,31,32}\\n'"}, "return_value": "False"}, {"func_args": {"line": "'3.8 = py38-django{22,30,31,32}\\n'"}, "return_value": "False"}, {"func_args": {"line": "'3.9 = py39-django{22,30,31,32}, flake8, isort\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}, {"func_args": {"line": "'[testenv]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'deps = \\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tpytest\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tpytest-xdist\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tdjango22: Django>=2.2,<2.3\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tdjango30: Django>=3.0,<3.1\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tdjango31: Django>=3.1,<3.2\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tdjango32: Django>=3.2,<3.3\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tflake8\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tisort\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tviztracer \\n'"}, "return_value": "False"}, {"func_args": {"line": "'commands = viztracer --ignore_frozen --log_func_args --log_func_retval -o result0.json -- py.test {posargs}\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}, {"func_args": {"line": "'[testenv:flake8]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'changedir = {toxinidir}\\n'"}, "return_value": "False"}, {"func_args": {"line": "'deps = flake8\\n'"}, "return_value": "False"}, {"func_args": {"line": "'commands = \\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tflake8 .\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}, {"func_args": {"line": "'[testenv:isort]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'changedir = {toxinidir}\\n'"}, "return_value": "False"}, {"func_args": {"line": "'deps = isort\\n'"}, "return_value": "False"}, {"func_args": {"line": "'commands = \\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tisort --check-only --diff django_components\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}, {"func_args": {"line": "'[flake8]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'ignore = E302,W503\\n'"}, "return_value": "False"}, {"func_args": {"line": "'max-line-length = 119\\n'"}, "return_value": "False"}], "text": "def iscommentline(line):\n    c = line.lstrip()[:1]\n    return c in COMMENTCHARS"}, "wcswidth": {"line": 43, "args": [{"func_args": {"s": "''"}, "return_value": "0"}, {"func_args": {"s": "'ERROR tests/test_component.py'"}, "return_value": "29"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'django.core.exceptions.ImproperlyConfigured: Requested setting COMPONENTS, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.'"}, "return_value": "234"}, {"func_args": {"s": "'django.core.exceptions.ImproperlyConfigured: Req'"}, "return_value": "48"}, {"func_args": {"s": "'django.core.exceptions.ImproperlyConfigured: Re'"}, "return_value": "47"}, {"func_args": {"s": "'django.core.exceptions.ImproperlyConfigured: R'"}, "return_value": "46"}, {"func_args": {"s": "'django.core.exceptions.ImproperlyConfigured: '"}, "return_value": "45"}, {"func_args": {"s": "'ERROR tests/test_context.py'"}, "return_value": "27"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'django.core.exceptions.ImproperlyConfigured: Requested setting COMPONENTS, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.'"}, "return_value": "234"}, {"func_args": {"s": "'django.core.exceptions.ImproperlyConfigured: Reque'"}, "return_value": "50"}, {"func_args": {"s": "'django.core.exceptions.ImproperlyConfigured: Requ'"}, "return_value": "49"}, {"func_args": {"s": "'django.core.exceptions.ImproperlyConfigured: Req'"}, "return_value": "48"}, {"func_args": {"s": "'django.core.exceptions.ImproperlyConfigured: Re'"}, "return_value": "47"}, {"func_args": {"s": "'ERROR tests/test_dependency_rendering.py'"}, "return_value": "40"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'django.core.exceptions.ImproperlyConfigured: Requested setting COMPONENTS, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.'"}, "return_value": "234"}, {"func_args": {"s": "'django.core.exceptions.ImproperlyConf'"}, "return_value": "37"}, {"func_args": {"s": "'django.core.exceptions.ImproperlyCon'"}, "return_value": "36"}, {"func_args": {"s": "'django.core.exceptions.ImproperlyCo'"}, "return_value": "35"}, {"func_args": {"s": "'django.core.exceptions.ImproperlyC'"}, "return_value": "34"}, {"func_args": {"s": "'ERROR tests/test_registry.py'"}, "return_value": "28"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'django.core.exceptions.ImproperlyConfigured: Requested setting COMPONENTS, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.'"}, "return_value": "234"}, {"func_args": {"s": "'django.core.exceptions.ImproperlyConfigured: Requ'"}, "return_value": "49"}, {"func_args": {"s": "'django.core.exceptions.ImproperlyConfigured: Req'"}, "return_value": "48"}, {"func_args": {"s": "'django.core.exceptions.ImproperlyConfigured: Re'"}, "return_value": "47"}, {"func_args": {"s": "'django.core.exceptions.ImproperlyConfigured: R'"}, "return_value": "46"}, {"func_args": {"s": "'ERROR tests/test_templatetags.py'"}, "return_value": "32"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'django.core.exceptions.ImproperlyConfigured: Requested setting COMPONENTS, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.'"}, "return_value": "234"}, {"func_args": {"s": "'django.core.exceptions.ImproperlyConfigured: '"}, "return_value": "45"}, {"func_args": {"s": "'django.core.exceptions.ImproperlyConfigured:'"}, "return_value": "44"}, {"func_args": {"s": "'django.core.exceptions.ImproperlyConfigured'"}, "return_value": "43"}, {"func_args": {"s": "'django.core.exceptions.ImproperlyConfigure'"}, "return_value": "42"}], "text": "def wcswidth(s: str) -> int:\n    \"\"\"Determine how many columns are needed to display a string in a terminal.\n\n    Returns -1 if the string contains non-printable characters.\n    \"\"\"\n    width = 0\n    for c in unicodedata.normalize(\"NFC\", s):\n        wc = wcwidth(c)\n        if wc < 0:\n            return -1\n        width += wc\n    return width"}, "wcwidth": {"line": 4, "args": [{"func_args": {"c": "'E'"}, "return_value": "1"}, {"func_args": {"c": "'R'"}, "return_value": "1"}, {"func_args": {"c": "'O'"}, "return_value": "1"}, {"func_args": {"c": "' '"}, "return_value": "1"}, {"func_args": {"c": "'t'"}, "return_value": "1"}, {"func_args": {"c": "'e'"}, "return_value": "1"}, {"func_args": {"c": "'s'"}, "return_value": "1"}, {"func_args": {"c": "'/'"}, "return_value": "1"}, {"func_args": {"c": "'_'"}, "return_value": "1"}, {"func_args": {"c": "'c'"}, "return_value": "1"}, {"func_args": {"c": "'o'"}, "return_value": "1"}, {"func_args": {"c": "'m'"}, "return_value": "1"}, {"func_args": {"c": "'p'"}, "return_value": "1"}, {"func_args": {"c": "'n'"}, "return_value": "1"}, {"func_args": {"c": "'.'"}, "return_value": "1"}, {"func_args": {"c": "'y'"}, "return_value": "1"}, {"func_args": {"c": "'-'"}, "return_value": "1"}, {"func_args": {"c": "'d'"}, "return_value": "1"}, {"func_args": {"c": "'j'"}, "return_value": "1"}, {"func_args": {"c": "'a'"}, "return_value": "1"}, {"func_args": {"c": "'g'"}, "return_value": "1"}, {"func_args": {"c": "'r'"}, "return_value": "1"}, {"func_args": {"c": "'x'"}, "return_value": "1"}, {"func_args": {"c": "'i'"}, "return_value": "1"}, {"func_args": {"c": "'I'"}, "return_value": "1"}, {"func_args": {"c": "'l'"}, "return_value": "1"}, {"func_args": {"c": "'C'"}, "return_value": "1"}, {"func_args": {"c": "'f'"}, "return_value": "1"}, {"func_args": {"c": "'u'"}, "return_value": "1"}, {"func_args": {"c": "':'"}, "return_value": "1"}, {"func_args": {"c": "'q'"}, "return_value": "1"}, {"func_args": {"c": "'M'"}, "return_value": "1"}, {"func_args": {"c": "'P'"}, "return_value": "1"}, {"func_args": {"c": "'N'"}, "return_value": "1"}, {"func_args": {"c": "'T'"}, "return_value": "1"}, {"func_args": {"c": "'S'"}, "return_value": "1"}, {"func_args": {"c": "','"}, "return_value": "1"}, {"func_args": {"c": "'b'"}, "return_value": "1"}, {"func_args": {"c": "'Y'"}, "return_value": "1"}, {"func_args": {"c": "'h'"}, "return_value": "1"}, {"func_args": {"c": "'v'"}, "return_value": "1"}, {"func_args": {"c": "'D'"}, "return_value": "1"}, {"func_args": {"c": "'J'"}, "return_value": "1"}, {"func_args": {"c": "'A'"}, "return_value": "1"}, {"func_args": {"c": "'G'"}, "return_value": "1"}, {"func_args": {"c": "'U'"}, "return_value": "1"}, {"func_args": {"c": "'L'"}, "return_value": "1"}, {"func_args": {"c": "'('"}, "return_value": "1"}, {"func_args": {"c": "')'"}, "return_value": "1"}]}, "_ellipsize": {"line": 29, "args": [{"func_args": {"s": "'<_pytest.config.Config object at 0xffff9597d0a0>'", "maxsize": "240"}, "return_value": "'<_pytest.config.Config object at 0xffff9597d0a0>'"}, {"func_args": {"s": "'<_pytest.config.Config object at 0xffff9597d0a0>'", "maxsize": "240"}, "return_value": "'<_pytest.config.Config object at 0xffff9597d0a0>'"}, {"func_args": {"s": "'<function _main at 0xffff95cd2160>'", "maxsize": "240"}, "return_value": "'<function _main at 0xffff95cd2160>'"}, {"func_args": {"s": "'<function _main at 0xffff95cd2160>'", "maxsize": "240"}, "return_value": "'<function _main at 0xffff95cd2160>'"}, {"func_args": {"s": "'<_pytest.config.Config object at 0xffff9597d0a0>'", "maxsize": "240"}, "return_value": "'<_pytest.config.Config object at 0xffff9597d0a0>'"}, {"func_args": {"s": "'<_pytest.config.Config object at 0xffff9597d0a0>'", "maxsize": "240"}, "return_value": "'<_pytest.config.Config object at 0xffff9597d0a0>'"}, {"func_args": {"s": "'<Session django-components exitstatus=<ExitCode.OK: 0> testsfailed=5 testscollected=0>'", "maxsize": "240"}, "return_value": "'<Session django-components exitstatus=<ExitCode.OK: 0> testsfailed=5 testscollected=0>'"}, {"func_args": {"s": "'<Session django-components exitstatus=<ExitCode.OK: 0> testsfailed=5 testscollected=0>'", "maxsize": "240"}, "return_value": "'<Session django-components exitstatus=<ExitCode.OK: 0> testsfailed=5 testscollected=0>'"}, {"func_args": {"s": "\"<_HookCaller 'pytest_runtestloop'>\"", "maxsize": "240"}, "return_value": "\"<_HookCaller 'pytest_runtestloop'>\""}, {"func_args": {"s": "\"<_HookCaller 'pytest_runtestloop'>\"", "maxsize": "240"}, "return_value": "\"<_HookCaller 'pytest_runtestloop'>\""}, {"func_args": {"s": "'()'", "maxsize": "240"}, "return_value": "'()'"}, {"func_args": {"s": "'<Session django-components exitstatus=<ExitCode.OK: 0> testsfailed=5 testscollected=0>'", "maxsize": "240"}, "return_value": "'<Session django-components exitstatus=<ExitCode.OK: 0> testsfailed=5 testscollected=0>'"}, {"func_args": {"s": "\"{'session': <Session django-components exitstatus=<ExitCode.OK: 0> testsfailed=5 testscollected=0>}\"", "maxsize": "240"}, "return_value": "\"{'session': <Session django-components exitstatus=<ExitCode.OK: 0> testsfailed=5 testscollected=0>}\""}, {"func_args": {"s": "\"'session'\"", "maxsize": "240"}, "return_value": "\"'session'\""}, {"func_args": {"s": "'True'", "maxsize": "240"}, "return_value": "'True'"}, {"func_args": {"s": "'True'", "maxsize": "240"}, "return_value": "'True'"}, {"func_args": {"s": "'<_pytest.config.PytestPluginManager object at 0xffff9b4fac10>'", "maxsize": "240"}, "return_value": "'<_pytest.config.PytestPluginManager object at 0xffff9b4fac10>'"}, {"func_args": {"s": "'<_pytest.config.PytestPluginManager object at 0xffff9b4fac10>'", "maxsize": "240"}, "return_value": "'<_pytest.config.PytestPluginManager object at 0xffff9b4fac10>'"}, {"func_args": {"s": "\"'pytest_runtestloop'\"", "maxsize": "240"}, "return_value": "\"'pytest_runtestloop'\""}, {"func_args": {"s": "\"<HookImpl plugin_name='main', plugin=<module '_pytest.main' from '/usr/app/src/test_repos/django-components/.tox/py38/lib/python3.8/site-packages/_pytest/main.py'>>\"", "maxsize": "240"}, "return_value": "\"<HookImpl plugin_name='main', plugin=<module '_pytest.main' from '/usr/app/src/test_repos/django-components/.tox/py38/lib/python3.8/site-packages/_pytest/main.py'>>\""}, {"func_args": {"s": "\"<HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0xffff93f3dd90>>\"", "maxsize": "240"}, "return_value": "\"<HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0xffff93f3dd90>>\""}, {"func_args": {"s": "\"[<HookImpl plugin_name='main', plugin=<module '_pytest.main' from '/usr/app/src/test_repos/django-components/.tox/py38/lib/python3.8/site-packages/_pytest/main.py'>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0xffff93f3dd90>>]\"", "maxsize": "240"}, "return_value": "\"[<HookImpl plugin_name='main', plugin=<module '_pytest.main' from '/usr/app/src/test_repos/django-components/.tox/py38...t/main.py'>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0xffff93f3dd90>>]\""}, {"func_args": {"s": "'<Session django-components exitstatus=<ExitCode.OK: 0> testsfailed=5 testscollected=0>'", "maxsize": "240"}, "return_value": "'<Session django-components exitstatus=<ExitCode.OK: 0> testsfailed=5 testscollected=0>'"}, {"func_args": {"s": "\"{'session': <Session django-components exitstatus=<ExitCode.OK: 0> testsfailed=5 testscollected=0>}\"", "maxsize": "240"}, "return_value": "\"{'session': <Session django-components exitstatus=<ExitCode.OK: 0> testsfailed=5 testscollected=0>}\""}, {"func_args": {"s": "'True'", "maxsize": "240"}, "return_value": "'True'"}, {"func_args": {"s": "'True'", "maxsize": "240"}, "return_value": "'True'"}, {"func_args": {"s": "'<Session django-components exitstatus=<ExitCode.OK: 0> testsfailed=5 testscollected=0>'", "maxsize": "240"}, "return_value": "'<Session django-components exitstatus=<ExitCode.OK: 0> testsfailed=5 testscollected=0>'"}, {"func_args": {"s": "'<Session django-components exitstatus=<ExitCode.OK: 0> testsfailed=5 testscollected=0>'", "maxsize": "240"}, "return_value": "'<Session django-components exitstatus=<ExitCode.OK: 0> testsfailed=5 testscollected=0>'"}], "text": "def _ellipsize(s: str, maxsize: int) -> str:\n    if len(s) > maxsize:\n        i = max(0, (maxsize - 3) // 2)\n        j = max(0, maxsize - 3 - i)\n        return s[:i] + \"...\" + s[len(s) - j :]\n    return s"}}