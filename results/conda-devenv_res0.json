{"scopemismatch": {"line": 799, "args": [{"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}], "text": "def scopemismatch(currentscope: \"_Scope\", newscope: \"_Scope\") -> bool:\n    return scopes.index(newscope) > scopes.index(currentscope)"}, "parse_num": {"line": 179, "args": [{"func_args": {"maybe_num": "'2'"}, "return_value": "2"}, {"func_args": {"maybe_num": "'1'"}, "return_value": "1"}, {"func_args": {"maybe_num": "'current'"}, "return_value": "-1"}, {"func_args": {"maybe_num": "'0'"}, "return_value": "0"}, {"func_args": {"maybe_num": "'current'"}, "return_value": "-1"}, {"func_args": {"maybe_num": "'0'"}, "return_value": "0"}, {"func_args": {"maybe_num": "'_name_True_0'"}, "return_value": "-1"}, {"func_args": {"maybe_num": "'_directory0'"}, "return_value": "-1"}, {"func_args": {"maybe_num": "'_name_False_current'"}, "return_value": "-1"}, {"func_args": {"maybe_num": "'_name_False_0'"}, "return_value": "-1"}, {"func_args": {"maybe_num": "'_name_True_current'"}, "return_value": "-1"}, {"func_args": {"maybe_num": "'_directorycurrent'"}, "return_value": "-1"}, {"func_args": {"maybe_num": "'5'"}, "return_value": "5"}, {"func_args": {"maybe_num": "'4'"}, "return_value": "4"}, {"func_args": {"maybe_num": "'7'"}, "return_value": "7"}, {"func_args": {"maybe_num": "'9'"}, "return_value": "9"}, {"func_args": {"maybe_num": "'current'"}, "return_value": "-1"}, {"func_args": {"maybe_num": "'8'"}, "return_value": "8"}, {"func_args": {"maybe_num": "'10'"}, "return_value": "10"}, {"func_args": {"maybe_num": "'6'"}, "return_value": "6"}, {"func_args": {"maybe_num": "'5'"}, "return_value": "5"}, {"func_args": {"maybe_num": "'4'"}, "return_value": "4"}, {"func_args": {"maybe_num": "'7'"}, "return_value": "7"}, {"func_args": {"maybe_num": "'9'"}, "return_value": "9"}, {"func_args": {"maybe_num": "'current'"}, "return_value": "-1"}, {"func_args": {"maybe_num": "'8'"}, "return_value": "8"}, {"func_args": {"maybe_num": "'10'"}, "return_value": "10"}, {"func_args": {"maybe_num": "'6'"}, "return_value": "6"}], "text": "def parse_num(maybe_num) -> int:\n    \"\"\"Parse number path suffixes, returns -1 on error.\"\"\"\n    try:\n        return int(maybe_num)\n    except ValueError:\n        return -1"}, "_format_trimmed": {"line": 1262, "args": [{"func_args": {"format": "' - {}'", "msg": "'DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.'", "available_width": "29"}, "return_value": "' - DeprecationWarning: dis...'"}, {"func_args": {"format": "' - {}'", "msg": "'DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.'", "available_width": "34"}, "return_value": "' - DeprecationWarning: distutil...'"}], "text": "def _format_trimmed(format: str, msg: str, available_width: int) -> Optional[str]:\n    \"\"\"Format msg into format, ellipsizing it if doesn't fit in available_width.\n\n    Returns None if even the ellipsis can't fit.\n    \"\"\"\n    # Only use the first line.\n    i = msg.find(\"\\n\")\n    if i != -1:\n        msg = msg[:i]\n\n    ellipsis = \"...\"\n    format_width = wcswidth(format.format(\"\"))\n    if format_width + len(ellipsis) > available_width:\n        return None\n\n    if format_width + wcswidth(msg) > available_width:\n        available_width -= len(ellipsis)\n        msg = msg[:available_width]\n        while format_width + wcswidth(msg) > available_width:\n            msg = msg[:-1]\n        msg += ellipsis\n\n    return format.format(msg)"}, "pluralize": {"line": 1350, "args": [{"func_args": {"count": "2", "noun": "'failed'"}, "return_value": "(2, 'failed')"}, {"func_args": {"count": "64", "noun": "'passed'"}, "return_value": "(64, 'passed')"}], "text": "def pluralize(count: int, noun: str) -> Tuple[int, str]:\n    # No need to pluralize words such as `failed` or `passed`.\n    if noun not in [\"error\", \"warnings\", \"test\"]:\n        return count, noun\n\n    # The `warnings` key is plural. To avoid API breakage, we keep it that way but\n    # set it to singular here so we can determine plurality in the same way as we do\n    # for `error`.\n    noun = noun.replace(\"warnings\", \"warning\")\n\n    return count, noun + \"s\" if count != 1 else noun"}, "format_session_duration": {"line": 1377, "args": [{"func_args": {"seconds": "3.097053289413452"}, "return_value": "'3.10s'"}], "text": "def format_session_duration(seconds: float) -> str:\n    \"\"\"Format the given seconds in a human readable manner to show in the final summary.\"\"\"\n    if seconds < 60:\n        return f\"{seconds:.2f}s\"\n    else:\n        dt = datetime.timedelta(seconds=int(seconds))\n        return f\"{seconds:.2f}s ({dt})\""}, "_istext": {"line": 35, "args": [{"func_args": {"x": "'name: a\\ndependencies:\\n  - a_dependency\\n'"}, "return_value": "True"}, {"func_args": {"x": "'name: a\\ndependencies:\\n  - a_dependency\\n  - channel::another_dependency ==3.14\\n'"}, "return_value": "True"}, {"func_args": {"x": "'name: a\\ndependencies:\\n  - a_dependency\\n  - channel::another_dependency ==3.14\\n'"}, "return_value": "True"}, {"func_args": {"x": "'name: a\\ndependencies:\\n  - a_dependency\\n  - channel::another_dependency ==3.14\\nenvironment:\\n  PYTHONPATH: {{ root }}/source\\n'"}, "return_value": "True"}, {"func_args": {"x": "'{{ min_conda_devenv_version(\"999.9\") }}\\nname: a\\n'"}, "return_value": "True"}, {"func_args": {"x": "'{{ min_conda_devenv_version(\"2.1.2.dev10+g7d602f7.d20220119\") }}\\nname: a\\n'"}, "return_value": "True"}, {"func_args": {"x": "'name: a\\ndependencies:\\n  - python ={{ os.environ[\"PY\"] }}\\n'"}, "return_value": "True"}, {"func_args": {"x": "'name: a\\ndependencies:\\n  - python ={{ get_env(\"PY\", valid=[\"3.6\"]) }}\\n'"}, "return_value": "True"}, {"func_args": {"x": "'\\\\\\n        ==> 2018-06-01 10:58:59 <==\\n        # cmd: D:\\\\Miniconda\\\\Scripts\\\\conda create -n devenv --file requirements_dev.txt\\n        +mirror-conda-forge::argh-0.26.2-py36_1\\n        +mirror-conda-forge::bumpversion-0.5.3-py36_0\\n        +mirror-conda-forge::pathtools-0.1.2-py36_0\\n'"}, "return_value": "True"}], "text": "def _istext(x):\n        return isinstance(x, str)"}, "parse_env_var_args": {"line": 514, "args": [{"func_args": {"env_var_args": "None"}, "return_value": "{}"}, {"func_args": {"env_var_args": "None"}, "return_value": "{}"}, {"func_args": {"env_var_args": "None"}, "return_value": "{}"}, {"func_args": {"env_var_args": "None"}, "return_value": "{}"}, {"func_args": {"env_var_args": "None"}, "return_value": "{}"}, {"func_args": {"env_var_args": "['DEV', 'PY=3.6']"}, "return_value": "{'DEV': '', 'PY': '3.6'}"}, {"func_args": {"env_var_args": "['DEV', 'PY=3.6']"}, "return_value": "{'DEV': '', 'PY': '3.6'}"}, {"func_args": {"env_var_args": "['PY=3.6']"}, "return_value": "{'PY': '3.6'}"}], "text": "def parse_env_var_args(env_var_args):\n    \"\"\"\n    :param List[str] env_var_args:\n        List of arguments in the form \"VAR_NAME\" or \"VAR_NAME=VALUE\"\n    :return: Dict[str,str]\n        Mapping from \"VAR_NAME\" to \"VALUE\" or empty str.\n    \"\"\"\n    env_vars = {}\n    if env_var_args is not None:\n        for arg in env_var_args:\n            split_arg = arg.split(\"=\", 1)\n            if len(split_arg) == 1:\n                env_vars[split_arg[0]] = \"\"\n            elif len(split_arg) == 2:\n                env_vars[split_arg[0]] = split_arg[1]\n\n    return env_vars"}, "preprocess_selector_in_line": {"line": 14, "args": [{"func_args": {"line": "'name: a'"}, "return_value": "'name: a'"}, {"func_args": {"line": "'dependencies:'"}, "return_value": "'dependencies:'"}, {"func_args": {"line": "'  - a_dependency'"}, "return_value": "'  - a_dependency'"}, {"func_args": {"line": "'  - channel::another_dependency ==3.14'"}, "return_value": "'  - channel::another_dependency ==3.14'"}, {"func_args": {"line": "''"}, "return_value": "''"}, {"func_args": {"line": "'name: a'"}, "return_value": "'name: a'"}, {"func_args": {"line": "'dependencies:'"}, "return_value": "'dependencies:'"}, {"func_args": {"line": "'  - a_dependency'"}, "return_value": "'  - a_dependency'"}, {"func_args": {"line": "'  - channel::another_dependency ==3.14'"}, "return_value": "'  - channel::another_dependency ==3.14'"}, {"func_args": {"line": "'environment:'"}, "return_value": "'environment:'"}, {"func_args": {"line": "'  PYTHONPATH: {{ root }}/source'"}, "return_value": "'  PYTHONPATH: {{ root }}/source'"}, {"func_args": {"line": "''"}, "return_value": "''"}, {"func_args": {"line": "'{{ min_conda_devenv_version(\"999.9\") }}'"}, "return_value": "'{{ min_conda_devenv_version(\"999.9\") }}'"}, {"func_args": {"line": "'name: a'"}, "return_value": "'name: a'"}, {"func_args": {"line": "''"}, "return_value": "''"}, {"func_args": {"line": "'{{ min_conda_devenv_version(\"2.1.2.dev10+g7d602f7.d20220119\") }}'"}, "return_value": "'{{ min_conda_devenv_version(\"2.1.2.dev10+g7d602f7.d20220119\") }}'"}, {"func_args": {"line": "'name: a'"}, "return_value": "'name: a'"}, {"func_args": {"line": "''"}, "return_value": "''"}, {"func_args": {"line": "'name: a'"}, "return_value": "'name: a'"}, {"func_args": {"line": "'dependencies:'"}, "return_value": "'dependencies:'"}, {"func_args": {"line": "'  - python ={{ os.environ[\"PY\"] }}'"}, "return_value": "'  - python ={{ os.environ[\"PY\"] }}'"}, {"func_args": {"line": "''"}, "return_value": "''"}, {"func_args": {"line": "'name: a'"}, "return_value": "'name: a'"}, {"func_args": {"line": "'dependencies:'"}, "return_value": "'dependencies:'"}, {"func_args": {"line": "'  - python ={{ get_env(\"PY\", valid=[\"3.6\"]) }}'"}, "return_value": "'  - python ={{ get_env(\"PY\", valid=[\"3.6\"]) }}'"}, {"func_args": {"line": "''"}, "return_value": "''"}], "text": "def preprocess_selector_in_line(line):\n    x = _selector_pattern.search(line)\n    if x is None:\n        return line\n    expr = x.group(1).strip()\n    return f\"{{% if {expr} %}}{line}{{% endif %}}\""}, "preprocess_selectors": {"line": 22, "args": [{"func_args": {"contents": "'name: a\\ndependencies:\\n  - a_dependency\\n  - channel::another_dependency ==3.14\\n'"}, "return_value": "'name: a\\ndependencies:\\n  - a_dependency\\n  - channel::another_dependency ==3.14\\n'"}, {"func_args": {"contents": "'name: a\\ndependencies:\\n  - a_dependency\\n  - channel::another_dependency ==3.14\\nenvironment:\\n  PYTHONPATH: {{ root }}/source\\n'"}, "return_value": "'name: a\\ndependencies:\\n  - a_dependency\\n  - channel::another_dependency ==3.14\\nenvironment:\\n  PYTHONPATH: {{ root }}/source\\n'"}, {"func_args": {"contents": "'{{ min_conda_devenv_version(\"999.9\") }}\\nname: a\\n'"}, "return_value": "'{{ min_conda_devenv_version(\"999.9\") }}\\nname: a\\n'"}, {"func_args": {"contents": "'{{ min_conda_devenv_version(\"2.1.2.dev10+g7d602f7.d20220119\") }}\\nname: a\\n'"}, "return_value": "'{{ min_conda_devenv_version(\"2.1.2.dev10+g7d602f7.d20220119\") }}\\nname: a\\n'"}, {"func_args": {"contents": "'name: a\\ndependencies:\\n  - python ={{ os.environ[\"PY\"] }}\\n'"}, "return_value": "'name: a\\ndependencies:\\n  - python ={{ os.environ[\"PY\"] }}\\n'"}, {"func_args": {"contents": "'name: a\\ndependencies:\\n  - python ={{ get_env(\"PY\", valid=[\"3.6\"]) }}\\n'"}, "return_value": "'name: a\\ndependencies:\\n  - python ={{ get_env(\"PY\", valid=[\"3.6\"]) }}\\n'"}], "text": "def preprocess_selectors(contents):\n    contents = contents.split(\"\\n\")\n    lines = [preprocess_selector_in_line(line) for line in contents]\n    return \"\\n\".join(lines)"}, "render_for_conda_env": {"line": 330, "args": [{"func_args": {"yaml_dict": "{'dependencies': ['a_dependency', 'channel::another_dependency ==3.14'], 'name': 'a'}", "header": "'# generated by conda-devenv, do not modify and do not commit to VCS\\n'"}, "return_value": "'# generated by conda-devenv, do not modify and do not commit to VCS\\ndependencies:\\n- a_dependency\\n- channel::another_dependency ==3.14\\nname: a\\n'"}, {"func_args": {"yaml_dict": "{'dependencies': ['a_dependency', 'channel::another_dependency ==3.14'], 'name': 'a'}", "header": "'# generated by conda-devenv, do not modify and do not commit to VCS\\n'"}, "return_value": "'# generated by conda-devenv, do not modify and do not commit to VCS\\ndependencies:\\n- a_dependency\\n- channel::another_dependency ==3.14\\nname: a\\n'"}, {"func_args": {"yaml_dict": "{'environment': {'PYTHONPATH': '/tmp/pytest-of-root/pytest-10/test_print_full0/source'}}", "header": "''"}, "return_value": "'environment:\\n  PYTHONPATH: /tmp/pytest-of-root/pytest-10/test_print_full0/source\\n'"}, {"func_args": {"yaml_dict": "{'dependencies': ['python =3.6'], 'name': 'a'}", "header": "'# generated by conda-devenv, do not modify and do not commit to VCS\\n'"}, "return_value": "'# generated by conda-devenv, do not modify and do not commit to VCS\\ndependencies:\\n- python =3.6\\nname: a\\n'"}, {"func_args": {"yaml_dict": "{'dependencies': ['python =3.6'], 'name': 'a'}", "header": "'# generated by conda-devenv, do not modify and do not commit to VCS\\n'"}, "return_value": "'# generated by conda-devenv, do not modify and do not commit to VCS\\ndependencies:\\n- python =3.6\\nname: a\\n'"}, {"func_args": {"yaml_dict": "{'name': 'a'}", "header": "'# generated by conda-devenv, do not modify and do not commit to VCS\\n'"}, "return_value": "'# generated by conda-devenv, do not modify and do not commit to VCS\\nname: a\\n'"}], "text": "def render_for_conda_env(yaml_dict, header=DEFAULT_HEADER):\n    import yaml\n\n    contents = header\n    contents += yaml.dump(yaml_dict, default_flow_style=False)\n    return contents"}, "get_env_directory": {"line": 498, "args": [{"func_args": {"env_name": "'my_env'"}, "return_value": "'/tmp/pytest-of-root/pytest-10/test_get_env_directory0/1/envs/my_env'"}, {"func_args": {"env_name": "'my_env'"}, "return_value": "None"}], "text": "def get_env_directory(env_name):\n    \"\"\"\n    :rtype: Optional[str]\n    :return: The environment path if the enviromment exists.\n    \"\"\"\n    envs_dirs = _get_envs_dirs_from_conda()\n\n    for directory in envs_dirs:\n        env = os.path.join(directory, env_name)\n        conda_meta_dir = os.path.join(env, \"conda-meta\")\n        if os.path.isdir(conda_meta_dir):\n            return os.path.normpath(env)\n\n    return None"}, "_get_env": {"line": 42, "args": [{"func_args": {"var_name": "'PY'", "default": "None", "valid": "['3.6']"}, "return_value": "'3.6'"}], "text": "def _get_env(var_name, default=None, valid=None):\n    \"\"\" Get env var value or default value and check against allowed values.\n\n    :param str var_name:\n        Name of the environment variable.\n    :param Optional[str] default:\n        Default value for the variable. If not specified, the method raises\n        an error when the variable is not set.\n    :param Optional[List[str]] valid:\n        List of allowed values of the variable.\n    :return: str\n        Value of the environment variable or default\n    \"\"\"\n    value = os.environ.get(var_name, default)\n\n    if value is None:\n        raise ValueError(f\"Environment variable {var_name} is not set.\")\n\n    if valid is not None and value not in valid:\n        raise ValueError(\n            f\"Allowed values for environment variable {var_name} are {valid}, \"\n            f\"got {value}\"\n        )\n\n    return value"}, "<lambda>": {"line": 293, "args": [{"func_args": {"x": "{'pip': ['some_from_pip >=0.1,>=0.2']}"}, "return_value": "['pip']"}, {"func_args": {"x": "{'pip': ['--editable path/to/first/package', '--editable path/to/second/package', '-e ./path/to/first/package', '-e ./path/to/second/package', 'ConfigAndParse ==0.15.2', 'git+git@github.com:ESSS/conda-devenv.git@0.1', 'hg+ssh://hg@bitbucket.org/mforbes/mmfutils-fork@0.4.12']}"}, "return_value": "['pip']"}]}, "get_terminal_width": {"line": 15, "args": [{"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}], "text": "def get_terminal_width() -> int:\n    width, _ = shutil.get_terminal_size(fallback=(80, 24))\n\n    # The Windows get_terminal_size may be bogus, let's sanify a bit.\n    if width < 40:\n        width = 80\n\n    return width"}, "wcswidth": {"line": 43, "args": [{"func_args": {"s": "'tests/test_main.py ........'"}, "return_value": "27"}, {"func_args": {"s": "'tests/test_main.py .........'"}, "return_value": "28"}, {"func_args": {"s": "'tests/test_main.py ..........'"}, "return_value": "29"}, {"func_args": {"s": "'tests/test_main.py ...........'"}, "return_value": "30"}, {"func_args": {"s": "'tests/test_main.py ...........F'"}, "return_value": "31"}, {"func_args": {"s": "'tests/test_main.py ...........FF'"}, "return_value": "32"}, {"func_args": {"s": "'tests/test_main.py ...........FF.'"}, "return_value": "33"}, {"func_args": {"s": "'tests/test_main.py ...........FF..'"}, "return_value": "34"}, {"func_args": {"s": "'tests/test_main.py ...........FF...'"}, "return_value": "35"}, {"func_args": {"s": "'tests/test_main.py ...........FF....'"}, "return_value": "36"}, {"func_args": {"s": "'tests/test_main.py ...........FF.....'"}, "return_value": "37"}, {"func_args": {"s": "'tests/test_main.py ...........FF......'"}, "return_value": "38"}, {"func_args": {"s": "'tests/test_main.py ...........FF.......'"}, "return_value": "39"}, {"func_args": {"s": "'tests/test_main.py ...........FF........'"}, "return_value": "40"}, {"func_args": {"s": "'tests/test_main.py ...........FF........'"}, "return_value": "40"}, {"func_args": {"s": "'tests/test_merge.py .'"}, "return_value": "21"}, {"func_args": {"s": "'tests/test_merge.py ..'"}, "return_value": "22"}, {"func_args": {"s": "'tests/test_merge.py ...'"}, "return_value": "23"}, {"func_args": {"s": "'tests/test_merge.py ....'"}, "return_value": "24"}, {"func_args": {"s": "'tests/test_merge.py .....'"}, "return_value": "25"}, {"func_args": {"s": "'tests/test_merge.py ......'"}, "return_value": "26"}, {"func_args": {"s": "'tests/test_merge.py .......'"}, "return_value": "27"}, {"func_args": {"s": "'tests/test_merge.py ........'"}, "return_value": "28"}, {"func_args": {"s": "'tests/test_merge.py ........'"}, "return_value": "28"}, {"func_args": {"s": "'tests/test_render.py .'"}, "return_value": "22"}, {"func_args": {"s": "'tests/test_render.py .'"}, "return_value": "22"}, {"func_args": {"s": "'tests/test_truncate_history_file.py .'"}, "return_value": "37"}, {"func_args": {"s": "'tests/test_truncate_history_file.py ..'"}, "return_value": "38"}, {"func_args": {"s": "'FAILED tests/test_main.py::test_min_version_failure'"}, "return_value": "51"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.'"}, "return_value": "92"}, {"func_args": {"s": "'DeprecationWarning: distut'"}, "return_value": "26"}, {"func_args": {"s": "'DeprecationWarning: distu'"}, "return_value": "25"}, {"func_args": {"s": "'DeprecationWarning: dist'"}, "return_value": "24"}, {"func_args": {"s": "'DeprecationWarning: dis'"}, "return_value": "23"}, {"func_args": {"s": "'FAILED tests/test_main.py::test_min_version_ok'"}, "return_value": "46"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.'"}, "return_value": "92"}, {"func_args": {"s": "'DeprecationWarning: distutils V'"}, "return_value": "31"}, {"func_args": {"s": "'DeprecationWarning: distutils '"}, "return_value": "30"}, {"func_args": {"s": "'DeprecationWarning: distutils'"}, "return_value": "29"}, {"func_args": {"s": "'DeprecationWarning: distutil'"}, "return_value": "28"}], "text": "def wcswidth(s: str) -> int:\n    \"\"\"Determine how many columns are needed to display a string in a terminal.\n\n    Returns -1 if the string contains non-printable characters.\n    \"\"\"\n    width = 0\n    for c in unicodedata.normalize(\"NFC\", s):\n        wc = wcwidth(c)\n        if wc < 0:\n            return -1\n        width += wc\n    return width"}, "wcwidth": {"line": 4, "args": [{"func_args": {"c": "'F'"}, "return_value": "1"}, {"func_args": {"c": "'g'"}, "return_value": "1"}, {"func_args": {"c": "'h'"}, "return_value": "1"}, {"func_args": {"c": "'f'"}, "return_value": "1"}, {"func_args": {"c": "'A'"}, "return_value": "1"}, {"func_args": {"c": "'I'"}, "return_value": "1"}, {"func_args": {"c": "'L'"}, "return_value": "1"}, {"func_args": {"c": "'E'"}, "return_value": "1"}, {"func_args": {"c": "'D'"}, "return_value": "1"}, {"func_args": {"c": "':'"}, "return_value": "1"}, {"func_args": {"c": "'-'"}, "return_value": "1"}, {"func_args": {"c": "'W'"}, "return_value": "1"}, {"func_args": {"c": "'V'"}, "return_value": "1"}, {"func_args": {"c": "'U'"}, "return_value": "1"}, {"func_args": {"c": "'k'"}, "return_value": "1"}]}, "_get_stderr_fileno": {"line": 68, "args": [{"func_args": {}, "return_value": "2"}]}, "has_safe_repr": {"line": 124, "args": [{"func_args": {"value": "'999.9'"}, "return_value": "True"}, {"func_args": {"value": "'2.1.2.dev10+g7d602f7.d20220119'"}, "return_value": "True"}, {"func_args": {"value": "'PY'"}, "return_value": "True"}, {"func_args": {"value": "'PY'"}, "return_value": "True"}, {"func_args": {"value": "'3.6'"}, "return_value": "True"}, {"func_args": {"value": "'3.6'"}, "return_value": "True"}, {"func_args": {"value": "['3.6']"}, "return_value": "True"}], "text": "def has_safe_repr(value: t.Any) -> bool:\n    \"\"\"Does the node have a safe representation?\"\"\"\n    if value is None or value is NotImplemented or value is Ellipsis:\n        return True\n\n    if type(value) in {bool, int, float, complex, range, str, Markup}:\n        return True\n\n    if type(value) in {tuple, list, set, frozenset}:\n        return all(has_safe_repr(v) for v in value)\n\n    if type(value) is dict:\n        return all(has_safe_repr(k) and has_safe_repr(v) for k, v in value.items())\n\n    return False"}, "rewrite_traceback_stack": {"line": 14, "args": [{"func_args": {"source": "None"}, "return_value": "DeprecationWarning('distutils Version classes are deprecated. Use packaging.version instead.')"}, {"func_args": {"source": "None"}, "return_value": "DeprecationWarning('distutils Version classes are deprecated. Use packaging.version instead.')"}], "text": "def rewrite_traceback_stack(source: t.Optional[str] = None) -> BaseException:\n    \"\"\"Rewrite the current exception to replace any tracebacks from\n    within compiled template code with tracebacks that look like they\n    came from the template source.\n\n    This must be called within an ``except`` block.\n\n    :param source: For ``TemplateSyntaxError``, the original source if\n        known.\n    :return: The original exception with the rewritten traceback.\n    \"\"\"\n    _, exc_value, tb = sys.exc_info()\n    exc_value = t.cast(BaseException, exc_value)\n    tb = t.cast(TracebackType, tb)\n\n    if isinstance(exc_value, TemplateSyntaxError) and not exc_value.translated:\n        exc_value.translated = True\n        exc_value.source = source\n        # Remove the old traceback, otherwise the frames from the\n        # compiler still show up.\n        exc_value.with_traceback(None)\n        # Outside of runtime, so the frame isn't executing template\n        # code, but it still needs to point at the template.\n        tb = fake_traceback(\n            exc_value, None, exc_value.filename or \"<unknown>\", exc_value.lineno\n        )\n    else:\n        # Skip the frame for the render function.\n        tb = tb.tb_next\n\n    stack = []\n\n    # Build the stack of traceback object, replacing any in template\n    # code with the source file and line information.\n    while tb is not None:\n        # Skip frames decorated with @internalcode. These are internal\n        # calls that aren't useful in template debugging output.\n        if tb.tb_frame.f_code in internal_code:\n            tb = tb.tb_next\n            continue\n\n        template = tb.tb_frame.f_globals.get(\"__jinja_template__\")\n\n        if template is not None:\n            lineno = template.get_corresponding_lineno(tb.tb_lineno)\n            fake_tb = fake_traceback(exc_value, tb, template.filename, lineno)\n            stack.append(fake_tb)\n        else:\n            stack.append(tb)\n\n        tb = tb.tb_next\n\n    tb_next = None\n\n    # Assign tb_next in reverse to avoid circular references.\n    for tb in reversed(stack):\n        tb_next = tb_set_next(tb, tb_next)\n\n    return exc_value.with_traceback(tb_next)"}, "_ellipsize": {"line": 29, "args": [{"func_args": {"s": "\"local('/tmp/pytest-of-root/pytest-10/test_min_version_failure0')\"", "maxsize": "240"}, "return_value": "\"local('/tmp/pytest-of-root/pytest-10/test_min_version_failure0')\""}, {"func_args": {"s": "\"local('/tmp/pytest-of-root/pytest-10/test_min_version_failure0')\"", "maxsize": "240"}, "return_value": "\"local('/tmp/pytest-of-root/pytest-10/test_min_version_failure0')\""}, {"func_args": {"s": "'<_pytest.capture.CaptureFixture object at 0xffff9255aeb0>'", "maxsize": "240"}, "return_value": "'<_pytest.capture.CaptureFixture object at 0xffff9255aeb0>'"}, {"func_args": {"s": "'<_pytest.capture.CaptureFixture object at 0xffff9255aeb0>'", "maxsize": "240"}, "return_value": "'<_pytest.capture.CaptureFixture object at 0xffff9255aeb0>'"}, {"func_args": {"s": "'<[AttributeError(\"\\'LooseVersion\\' object has no attribute \\'vstring\\'\") raised in repr()] LooseVersion object at 0xffff92a43460>'", "maxsize": "240"}, "return_value": "'<[AttributeError(\"\\'LooseVersion\\' object has no attribute \\'vstring\\'\") raised in repr()] LooseVersion object at 0xffff92a43460>'"}, {"func_args": {"s": "'<[AttributeError(\"\\'LooseVersion\\' object has no attribute \\'vstring\\'\") raised in repr()] LooseVersion object at 0xffff92a43460>'", "maxsize": "240"}, "return_value": "'<[AttributeError(\"\\'LooseVersion\\' object has no attribute \\'vstring\\'\") raised in repr()] LooseVersion object at 0xffff92a43460>'"}, {"func_args": {"s": "\"'2.1.2.dev10+g7d602f7.d20220119'\"", "maxsize": "240"}, "return_value": "\"'2.1.2.dev10+g7d602f7.d20220119'\""}, {"func_args": {"s": "\"local('/tmp/pytest-of-root/pytest-10/test_min_version_ok0')\"", "maxsize": "240"}, "return_value": "\"local('/tmp/pytest-of-root/pytest-10/test_min_version_ok0')\""}, {"func_args": {"s": "\"local('/tmp/pytest-of-root/pytest-10/test_min_version_ok0')\"", "maxsize": "240"}, "return_value": "\"local('/tmp/pytest-of-root/pytest-10/test_min_version_ok0')\""}, {"func_args": {"s": "'<_pytest.capture.CaptureFixture object at 0xffff929711f0>'", "maxsize": "240"}, "return_value": "'<_pytest.capture.CaptureFixture object at 0xffff929711f0>'"}, {"func_args": {"s": "'<_pytest.capture.CaptureFixture object at 0xffff929711f0>'", "maxsize": "240"}, "return_value": "'<_pytest.capture.CaptureFixture object at 0xffff929711f0>'"}, {"func_args": {"s": "'<[AttributeError(\"\\'LooseVersion\\' object has no attribute \\'vstring\\'\") raised in repr()] LooseVersion object at 0xffff9255acd0>'", "maxsize": "240"}, "return_value": "'<[AttributeError(\"\\'LooseVersion\\' object has no attribute \\'vstring\\'\") raised in repr()] LooseVersion object at 0xffff9255acd0>'"}, {"func_args": {"s": "'<[AttributeError(\"\\'LooseVersion\\' object has no attribute \\'vstring\\'\") raised in repr()] LooseVersion object at 0xffff9255acd0>'", "maxsize": "240"}, "return_value": "'<[AttributeError(\"\\'LooseVersion\\' object has no attribute \\'vstring\\'\") raised in repr()] LooseVersion object at 0xffff9255acd0>'"}, {"func_args": {"s": "\"'2.1.2.dev10+g7d602f7.d20220119'\"", "maxsize": "240"}, "return_value": "\"'2.1.2.dev10+g7d602f7.d20220119'\""}], "text": "def _ellipsize(s: str, maxsize: int) -> str:\n    if len(s) > maxsize:\n        i = max(0, (maxsize - 3) // 2)\n        j = max(0, maxsize - 3 - i)\n        return s[:i] + \"...\" + s[len(s) - j :]\n    return s"}, "_try_repr_or_str": {"line": 8, "args": [{"func_args": {"obj": "AttributeError(\"'LooseVersion' object has no attribute 'vstring'\")"}, "return_value": "'AttributeError(\"\\'LooseVersion\\' object has no attribute \\'vstring\\'\")'"}, {"func_args": {"obj": "AttributeError(\"'LooseVersion' object has no attribute 'vstring'\")"}, "return_value": "'AttributeError(\"\\'LooseVersion\\' object has no attribute \\'vstring\\'\")'"}], "text": "def _try_repr_or_str(obj: object) -> str:\n    try:\n        return repr(obj)\n    except (KeyboardInterrupt, SystemExit):\n        raise\n    except BaseException:\n        return '{}(\"{}\")'.format(type(obj).__name__, obj)"}}