{"_args_converter": {"line": 816, "args": [{"func_args": {"args": "['--spec', '-s', 'tests/']"}, "return_value": "('--spec', '-s', 'tests/')"}], "text": "def _args_converter(args: Iterable[str]) -> Tuple[str, ...]:\n    return tuple(args)"}, "_get_plugin_specs_as_list": {"line": 715, "args": [{"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "None"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}], "text": "def _get_plugin_specs_as_list(\n    specs: Union[None, types.ModuleType, str, Sequence[str]]\n) -> List[str]:\n    \"\"\"Parse a plugins specification into a list of plugin names.\"\"\"\n    # None means empty.\n    if specs is None:\n        return []\n    # Workaround for #3899 - a submodule which happens to be called \"pytest_plugins\".\n    if isinstance(specs, types.ModuleType):\n        return []\n    # Comma-separated list.\n    if isinstance(specs, str):\n        return specs.split(\",\") if specs else []\n    # Direct specification.\n    if isinstance(specs, collections.abc.Sequence):\n        return list(specs)\n    raise UsageError(\n        \"Plugins may be specified as a sequence or a ','-separated string of plugin names. Got: %r\"\n        % specs\n    )"}, "_assertion_supported": {"line": 1511, "args": [{"func_args": {}, "return_value": "True"}], "text": "def _assertion_supported() -> bool:\n    try:\n        assert False\n    except AssertionError:\n        return True\n    else:\n        return False"}, "scope2index": {"line": 803, "args": [{"func_args": {"scope": "'session'", "descr": "\"Fixture 'pytestconfig'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'capfd'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'capfdbinary'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'capsys'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'capsysbinary'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'tmp_path'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'session'", "descr": "\"Fixture 'tmp_path_factory'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'tmpdir'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'session'", "descr": "\"Fixture 'tmpdir_factory'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'monkeypatch'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'recwarn'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'record_property'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'session'", "descr": "\"Fixture 'record_testsuite_property'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'record_xml_attribute'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'session'", "descr": "\"Fixture 'doctest_namespace'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'cache'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'caplog'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'cov'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'no_cover'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'disconnect_event'\"", "where": "'tests'"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'outbound_session'\"", "where": "'tests'"}, "return_value": "4"}, {"func_args": {"scope": "'class'", "descr": "\"Fixture 'fixture'\"", "where": "'tests/test_lib_esl.py::TestInboundESLBase'"}, "return_value": "3"}, {"func_args": {"scope": "'class'", "descr": "\"Fixture 'fixture'\"", "where": "'tests/test_lib_esl.py::TestInboundESL'"}, "return_value": "3"}, {"func_args": {"scope": "'class'", "descr": "\"Fixture 'fixture'\"", "where": "'tests/test_lib_esl.py::ESLProtocolTest'"}, "return_value": "3"}, {"func_args": {"scope": "'class'", "descr": "\"Fixture 'fixture'\"", "where": "'tests/test_outbound_session.py::TestOutboundSession'"}, "return_value": "3"}, {"func_args": {"scope": "'class'", "descr": "\"Fixture 'fixture'\"", "where": "'tests/test_outbound_session.py::TestWhileConnectedMethod'"}, "return_value": "3"}], "text": "def scope2index(scope: str, descr: str, where: Optional[str] = None) -> int:\n    \"\"\"Look up the index of ``scope`` and raise a descriptive value error\n    if not defined.\"\"\"\n    strscopes: Sequence[str] = scopes\n    try:\n        return strscopes.index(scope)\n    except ValueError:\n        fail(\n            \"{} {}got an unexpected scope value '{}'\".format(\n                descr, f\"from {where} \" if where else \"\", scope\n            ),\n            pytrace=False,\n        )"}, "sort_by_scope": {"line": 1539, "args": [{"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestInboundESL'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestInboundESL'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestInboundESL'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestInboundESL'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestInboundESL'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestInboundESL'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestInboundESL'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestInboundESL'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestInboundESL'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestInboundESL'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestInboundESL'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestInboundESL'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestInboundESL'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestInboundESL'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_ESLProtocolTest'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_ESLProtocolTest'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_ESLProtocolTest'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_ESLProtocolTest'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_ESLProtocolTest'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_ESLProtocolTest'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_ESLProtocolTest'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_ESLProtocolTest'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_ESLProtocolTest'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_ESLProtocolTest'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_ESLProtocolTest'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_ESLProtocolTest'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_ESLProtocolTest'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestOutboundSession'"}, "return_value": "3"}, {"func_args": {"arg_name": "'disconnect_event'"}, "return_value": "4"}, {"func_args": {"arg_name": "'outbound_session'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestOutboundSession'"}, "return_value": "3"}, {"func_args": {"arg_name": "'disconnect_event'"}, "return_value": "4"}, {"func_args": {"arg_name": "'outbound_session'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestWhileConnectedMethod'"}, "return_value": "3"}, {"func_args": {"arg_name": "'disconnect_event'"}, "return_value": "4"}, {"func_args": {"arg_name": "'outbound_session'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestWhileConnectedMethod'"}, "return_value": "3"}, {"func_args": {"arg_name": "'disconnect_event'"}, "return_value": "4"}, {"func_args": {"arg_name": "'outbound_session'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestWhileConnectedMethod'"}, "return_value": "3"}, {"func_args": {"arg_name": "'disconnect_event'"}, "return_value": "4"}, {"func_args": {"arg_name": "'outbound_session'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'unittest_setUpClass_fixture_TestWhileConnectedMethod'"}, "return_value": "3"}, {"func_args": {"arg_name": "'disconnect_event'"}, "return_value": "4"}, {"func_args": {"arg_name": "'outbound_session'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}], "text": "def sort_by_scope(arg_name: str) -> int:\n            try:\n                fixturedefs = arg2fixturedefs[arg_name]\n            except KeyError:\n                return scopes.index(\"function\")\n            else:\n                return fixturedefs[-1].scopenum"}, "scopemismatch": {"line": 799, "args": [{"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}], "text": "def scopemismatch(currentscope: \"_Scope\", newscope: \"_Scope\") -> bool:\n    return scopes.index(newscope) > scopes.index(currentscope)"}, "pluralize": {"line": 1350, "args": [{"func_args": {"count": "33", "noun": "'passed'"}, "return_value": "(33, 'passed')"}, {"func_args": {"count": "1", "noun": "'warnings'"}, "return_value": "(1, 'warning')"}], "text": "def pluralize(count: int, noun: str) -> Tuple[int, str]:\n    # No need to pluralize words such as `failed` or `passed`.\n    if noun not in [\"error\", \"warnings\", \"test\"]:\n        return count, noun\n\n    # The `warnings` key is plural. To avoid API breakage, we keep it that way but\n    # set it to singular here so we can determine plurality in the same way as we do\n    # for `error`.\n    noun = noun.replace(\"warnings\", \"warning\")\n\n    return count, noun + \"s\" if count != 1 else noun"}, "format_session_duration": {"line": 1377, "args": [{"func_args": {"seconds": "2.1943628787994385"}, "return_value": "'2.19s'"}], "text": "def format_session_duration(seconds: float) -> str:\n    \"\"\"Format the given seconds in a human readable manner to show in the final summary.\"\"\"\n    if seconds < 60:\n        return f\"{seconds:.2f}s\"\n    else:\n        dt = datetime.timedelta(seconds=int(seconds))\n        return f\"{seconds:.2f}s ({dt})\""}, "_get_auto_indent": {"line": 113, "args": [{"func_args": {"auto_indent_option": "None"}, "return_value": "0"}, {"func_args": {"auto_indent_option": "None"}, "return_value": "0"}]}, "_get_stderr_fileno": {"line": 68, "args": [{"func_args": {}, "return_value": "2"}, {"func_args": {}, "return_value": "2"}]}, "get_terminal_width": {"line": 15, "args": [{"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}], "text": "def get_terminal_width() -> int:\n    width, _ = shutil.get_terminal_size(fallback=(80, 24))\n\n    # The Windows get_terminal_size may be bogus, let's sanify a bit.\n    if width < 40:\n        width = 80\n\n    return width"}, "is_option": {"line": 135, "args": [{"func_args": {"x": "'tests/'"}, "return_value": "False"}, {"func_args": {"x": "'--spec'"}, "return_value": "True"}], "text": "def is_option(x: str) -> bool:\n        return x.startswith(\"-\")"}, "get_file_part_from_node_id": {"line": 138, "args": [{"func_args": {"x": "'tests/'"}, "return_value": "'tests/'"}], "text": "def get_file_part_from_node_id(x: str) -> str:\n        return x.split(\"::\")[0]"}, "_is_same": {"line": 558, "args": [{"func_args": {"f1": "'/usr/app/src/test_repos/greenswitch/tests/conftest.py'", "f2": "'/usr/app/src/test_repos/greenswitch/tests/conftest.py'"}, "return_value": "True"}, {"func_args": {"f1": "'/usr/app/src/test_repos/greenswitch/tests/test_lib_esl.py'", "f2": "'/usr/app/src/test_repos/greenswitch/tests/test_lib_esl.py'"}, "return_value": "True"}, {"func_args": {"f1": "'/usr/app/src/test_repos/greenswitch/tests/test_outbound_session.py'", "f2": "'/usr/app/src/test_repos/greenswitch/tests/test_outbound_session.py'"}, "return_value": "True"}], "text": "def _is_same(f1: str, f2: str) -> bool:\n        return os.path.samefile(f1, f2)"}, "parts": {"line": 420, "args": [{"func_args": {"s": "'/usr/app/src/test_repos/greenswitch/tests/__pycache__'"}, "return_value": "{'/usr/app/src/test_repos/greenswitch/tests', '/', '/usr/app/src/test_repos', '/usr/app/src/test_repos/greenswitch', '/usr', '/usr/app/src/test_repos/greenswitch/tests/__pycache__', '/usr/app/src', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/greenswitch/tests/conftest.py'"}, "return_value": "{'/usr/app/src/test_repos/greenswitch/tests', '/', '/usr/app/src/test_repos', '/usr/app/src/test_repos/greenswitch', '/usr', '/usr/app/src', '/usr/app', '/usr/app/src/test_repos/greenswitch/tests/conftest.py'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/greenswitch/tests/fakeeslserver.py'"}, "return_value": "{'/usr/app/src/test_repos/greenswitch/tests', '/', '/usr/app/src/test_repos', '/usr/app/src/test_repos/greenswitch', '/usr/app/src/test_repos/greenswitch/tests/fakeeslserver.py', '/usr', '/usr/app/src', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/greenswitch/tests/test_lib_esl.py'"}, "return_value": "{'/usr/app/src/test_repos/greenswitch/tests', '/', '/usr/app/src/test_repos', '/usr/app/src/test_repos/greenswitch', '/usr', '/usr/app/src', '/usr/app/src/test_repos/greenswitch/tests/test_lib_esl.py', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/greenswitch/tests/test_outbound_session.py'"}, "return_value": "{'/usr/app/src/test_repos/greenswitch/tests', '/', '/usr/app/src/test_repos', '/usr/app/src/test_repos/greenswitch', '/usr', '/usr/app/src', '/usr/app/src/test_repos/greenswitch/tests/test_outbound_session.py', '/usr/app'}"}], "text": "def parts(s: str) -> Set[str]:\n    parts = s.split(sep)\n    return {sep.join(parts[: i + 1]) or sep for i in range(len(parts))}"}, "iscommentline": {"line": 162, "args": [{"func_args": {"line": "'[tox]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'envlist = py27,py36,py37,py38,py39,py310\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}, {"func_args": {"line": "'[testenv]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'deps = \\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\t-rrequirements.txt\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\t-rtest_requirements.txt\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tviztracer \\n'"}, "return_value": "False"}, {"func_args": {"line": "'commands = viztracer --ignore_frozen --log_func_args --log_func_retval -o result0.json -- pytest --spec -s tests/\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}], "text": "def iscommentline(line):\n    c = line.lstrip()[:1]\n    return c in COMMENTCHARS"}, "isimportable": {"line": 1026, "args": [{"func_args": {"name": "'tests'"}, "return_value": "True"}], "text": "def isimportable(name):\n    if name and (name[0].isalpha() or name[0] == '_'):\n        name = name.replace(\"_\", '')\n        return not name or name.isalnum()"}, "iterparentnodeids": {"line": 44, "args": [{"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_api_response'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_api_response'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_api_response'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_api_response'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_api_response'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL::test_api_response'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_api_response'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_api_response'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_api_response'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_api_response'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_api_response'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_api_response'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL::test_api_response'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_api_response'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_client_disconnect'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_client_disconnect'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_client_disconnect'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_client_disconnect'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_client_disconnect'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL::test_client_disconnect'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_client_disconnect'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_client_disconnect'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_client_disconnect'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_client_disconnect'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_client_disconnect'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_client_disconnect'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL::test_client_disconnect'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_client_disconnect'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_command_not_found'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_command_not_found'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_command_not_found'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_command_not_found'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_command_not_found'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL::test_command_not_found'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_command_not_found'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_command_not_found'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_command_not_found'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_command_not_found'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_command_not_found'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_command_not_found'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL::test_command_not_found'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_command_not_found'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_connect'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_connect'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_connect'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_connect'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_connect'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL::test_connect'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_connect'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_connect'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_connect'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_connect'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_connect'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_connect'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL::test_connect'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_connect'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_connect_wrong_password'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_connect_wrong_password'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_connect_wrong_password'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_connect_wrong_password'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_connect_wrong_password'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL::test_connect_wrong_password'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_connect_wrong_password'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_connect_wrong_password'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_connect_wrong_password'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_connect_wrong_password'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_connect_wrong_password'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_connect_wrong_password'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL::test_connect_wrong_password'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_connect_wrong_password'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_custom_event'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_custom_event'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_custom_event'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_custom_event'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_custom_event'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL::test_custom_event'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_custom_event'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_custom_event'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_custom_event'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_custom_event'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_custom_event'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_custom_event'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL::test_custom_event'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_custom_event'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL::test_event'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL::test_event'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_socket_data'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_socket_data'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_socket_data'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_socket_data'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_socket_data'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL::test_event_socket_data'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_socket_data'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_socket_data'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_socket_data'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_socket_data'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_socket_data'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_socket_data'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL::test_event_socket_data'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_socket_data'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_with_multiline_channel_variables_content'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_with_multiline_channel_variables_content'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_with_multiline_channel_variables_content'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_with_multiline_channel_variables_content'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_with_multiline_channel_variables_content'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL::test_event_with_multiline_channel_variables_content'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_with_multiline_channel_variables_content'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_with_multiline_channel_variables_content'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_with_multiline_channel_variables_content'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_with_multiline_channel_variables_content'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_with_multiline_channel_variables_content'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_with_multiline_channel_variables_content'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL::test_event_with_multiline_channel_variables_content'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_with_multiline_channel_variables_content'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_without_handler'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_without_handler'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_without_handler'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_without_handler'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_without_handler'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL::test_event_without_handler'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_without_handler'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_without_handler'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_without_handler'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_without_handler'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_without_handler'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_without_handler'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL::test_event_without_handler'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_without_handler'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_register_a_registered_handle'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_register_a_registered_handle'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_register_a_registered_handle'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_register_a_registered_handle'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_register_a_registered_handle'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL::test_register_a_registered_handle'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_register_a_registered_handle'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_register_a_registered_handle'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_register_a_registered_handle'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_register_a_registered_handle'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_register_a_registered_handle'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_register_a_registered_handle'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL::test_register_a_registered_handle'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_register_a_registered_handle'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_register_unregister_handle'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_register_unregister_handle'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_register_unregister_handle'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_register_unregister_handle'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_register_unregister_handle'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL::test_register_unregister_handle'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_register_unregister_handle'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_register_unregister_handle'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_register_unregister_handle'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_register_unregister_handle'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_register_unregister_handle'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_register_unregister_handle'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL::test_register_unregister_handle'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_register_unregister_handle'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_unregister_a_not_registered_handle'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_unregister_a_not_registered_handle'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_unregister_a_not_registered_handle'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_unregister_a_not_registered_handle'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_unregister_a_not_registered_handle'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL::test_unregister_a_not_registered_handle'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_unregister_a_not_registered_handle'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_unregister_a_not_registered_handle'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_unregister_a_not_registered_handle'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_unregister_a_not_registered_handle'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_unregister_a_not_registered_handle'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_unregister_a_not_registered_handle'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL::test_unregister_a_not_registered_handle'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_unregister_a_not_registered_handle'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_z_server_disconnect'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_z_server_disconnect'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_z_server_disconnect'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_z_server_disconnect'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_z_server_disconnect'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL::test_z_server_disconnect'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_z_server_disconnect'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_z_server_disconnect'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_z_server_disconnect'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_z_server_disconnect'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_z_server_disconnect'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_z_server_disconnect'"}, "return_value": "'tests/test_lib_esl.py::TestInboundESL::test_z_server_disconnect'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_z_server_disconnect'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_disconnect_with_linger'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_disconnect_with_linger'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_disconnect_with_linger'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_disconnect_with_linger'"}, "return_value": "'tests/test_lib_esl.py::ESLProtocolTest'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_disconnect_with_linger'"}, "return_value": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_disconnect_with_linger'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_disconnect_with_linger'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_disconnect_with_linger'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_disconnect_with_linger'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_disconnect_with_linger'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_disconnect_with_linger'"}, "return_value": "'tests/test_lib_esl.py::ESLProtocolTest'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_disconnect_with_linger'"}, "return_value": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_disconnect_with_linger'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_disconnect_with_linger'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_rude_rejection'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_rude_rejection'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_rude_rejection'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_rude_rejection'"}, "return_value": "'tests/test_lib_esl.py::ESLProtocolTest'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_rude_rejection'"}, "return_value": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_rude_rejection'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_rude_rejection'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_rude_rejection'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_rude_rejection'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_rude_rejection'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_rude_rejection'"}, "return_value": "'tests/test_lib_esl.py::ESLProtocolTest'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_rude_rejection'"}, "return_value": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_rude_rejection'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_rude_rejection'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_with_packet_loss'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_with_packet_loss'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_with_packet_loss'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_with_packet_loss'"}, "return_value": "'tests/test_lib_esl.py::ESLProtocolTest'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_with_packet_loss'"}, "return_value": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_with_packet_loss'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_with_packet_loss'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_with_packet_loss'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_with_packet_loss'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_with_packet_loss'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_with_packet_loss'"}, "return_value": "'tests/test_lib_esl.py::ESLProtocolTest'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_with_packet_loss'"}, "return_value": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_with_packet_loss'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_with_packet_loss'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_private_safe_exec_handler'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_private_safe_exec_handler'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_private_safe_exec_handler'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_private_safe_exec_handler'"}, "return_value": "'tests/test_lib_esl.py::ESLProtocolTest'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_private_safe_exec_handler'"}, "return_value": "'tests/test_lib_esl.py::ESLProtocolTest::test_private_safe_exec_handler'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_private_safe_exec_handler'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_private_safe_exec_handler'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_private_safe_exec_handler'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_private_safe_exec_handler'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_private_safe_exec_handler'"}, "return_value": "'tests/test_lib_esl.py::ESLProtocolTest'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_private_safe_exec_handler'"}, "return_value": "'tests/test_lib_esl.py::ESLProtocolTest::test_private_safe_exec_handler'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_private_safe_exec_handler'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_quick_sleep_for_falsy_events_queue'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_quick_sleep_for_falsy_events_queue'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_quick_sleep_for_falsy_events_queue'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_quick_sleep_for_falsy_events_queue'"}, "return_value": "'tests/test_lib_esl.py::ESLProtocolTest'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_quick_sleep_for_falsy_events_queue'"}, "return_value": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_quick_sleep_for_falsy_events_queue'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_quick_sleep_for_falsy_events_queue'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_quick_sleep_for_falsy_events_queue'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_quick_sleep_for_falsy_events_queue'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_quick_sleep_for_falsy_events_queue'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_quick_sleep_for_falsy_events_queue'"}, "return_value": "'tests/test_lib_esl.py::ESLProtocolTest'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_quick_sleep_for_falsy_events_queue'"}, "return_value": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_quick_sleep_for_falsy_events_queue'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_quick_sleep_for_falsy_events_queue'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_custom_name'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_custom_name'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_custom_name'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_custom_name'"}, "return_value": "'tests/test_lib_esl.py::ESLProtocolTest'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_custom_name'"}, "return_value": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_custom_name'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_custom_name'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_custom_name'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_custom_name'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_custom_name'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_custom_name'"}, "return_value": "'tests/test_lib_esl.py::ESLProtocolTest'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_custom_name'"}, "return_value": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_custom_name'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_custom_name'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_log_type'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_log_type'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_log_type'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_log_type'"}, "return_value": "'tests/test_lib_esl.py::ESLProtocolTest'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_log_type'"}, "return_value": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_log_type'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_log_type'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_log_type'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_log_type'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_log_type'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_log_type'"}, "return_value": "'tests/test_lib_esl.py::ESLProtocolTest'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_log_type'"}, "return_value": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_log_type'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_log_type'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_no_handlers_will_rely_on_generic'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_no_handlers_will_rely_on_generic'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_no_handlers_will_rely_on_generic'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_no_handlers_will_rely_on_generic'"}, "return_value": "'tests/test_lib_esl.py::ESLProtocolTest'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_no_handlers_will_rely_on_generic'"}, "return_value": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_no_handlers_will_rely_on_generic'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_no_handlers_will_rely_on_generic'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_no_handlers_will_rely_on_generic'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_no_handlers_will_rely_on_generic'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_no_handlers_will_rely_on_generic'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_no_handlers_will_rely_on_generic'"}, "return_value": "'tests/test_lib_esl.py::ESLProtocolTest'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_no_handlers_will_rely_on_generic'"}, "return_value": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_no_handlers_will_rely_on_generic'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_no_handlers_will_rely_on_generic'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_post_handler'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_post_handler'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_post_handler'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_post_handler'"}, "return_value": "'tests/test_lib_esl.py::ESLProtocolTest'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_post_handler'"}, "return_value": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_post_handler'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_post_handler'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_post_handler'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_post_handler'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_post_handler'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_post_handler'"}, "return_value": "'tests/test_lib_esl.py::ESLProtocolTest'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_post_handler'"}, "return_value": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_post_handler'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_post_handler'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_pre_handler'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_pre_handler'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_pre_handler'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_pre_handler'"}, "return_value": "'tests/test_lib_esl.py::ESLProtocolTest'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_pre_handler'"}, "return_value": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_pre_handler'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_pre_handler'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_pre_handler'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_pre_handler'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_pre_handler'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_pre_handler'"}, "return_value": "'tests/test_lib_esl.py::ESLProtocolTest'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_pre_handler'"}, "return_value": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_pre_handler'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_pre_handler'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_receive_events_io_error_handling'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_receive_events_io_error_handling'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_receive_events_io_error_handling'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_receive_events_io_error_handling'"}, "return_value": "'tests/test_lib_esl.py::ESLProtocolTest'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_receive_events_io_error_handling'"}, "return_value": "'tests/test_lib_esl.py::ESLProtocolTest::test_receive_events_io_error_handling'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_receive_events_io_error_handling'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_receive_events_io_error_handling'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_receive_events_io_error_handling'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_receive_events_io_error_handling'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_receive_events_io_error_handling'"}, "return_value": "'tests/test_lib_esl.py::ESLProtocolTest'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_receive_events_io_error_handling'"}, "return_value": "'tests/test_lib_esl.py::ESLProtocolTest::test_receive_events_io_error_handling'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_receive_events_io_error_handling'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_receive_events_without_data_but_connected'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_receive_events_without_data_but_connected'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_receive_events_without_data_but_connected'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_receive_events_without_data_but_connected'"}, "return_value": "'tests/test_lib_esl.py::ESLProtocolTest'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_receive_events_without_data_but_connected'"}, "return_value": "'tests/test_lib_esl.py::ESLProtocolTest::test_receive_events_without_data_but_connected'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_receive_events_without_data_but_connected'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_receive_events_without_data_but_connected'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_receive_events_without_data_but_connected'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_receive_events_without_data_but_connected'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_receive_events_without_data_but_connected'"}, "return_value": "'tests/test_lib_esl.py::ESLProtocolTest'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_receive_events_without_data_but_connected'"}, "return_value": "'tests/test_lib_esl.py::ESLProtocolTest::test_receive_events_without_data_but_connected'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_receive_events_without_data_but_connected'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_stop'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_stop'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_stop'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_stop'"}, "return_value": "'tests/test_lib_esl.py::ESLProtocolTest'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_stop'"}, "return_value": "'tests/test_lib_esl.py::ESLProtocolTest::test_stop'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_stop'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_stop'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_stop'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_stop'"}, "return_value": "'tests/test_lib_esl.py'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_stop'"}, "return_value": "'tests/test_lib_esl.py::ESLProtocolTest'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_stop'"}, "return_value": "'tests/test_lib_esl.py::ESLProtocolTest::test_stop'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_stop'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_disconnected_event'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_disconnected_event'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_disconnected_event'"}, "return_value": "'tests/test_outbound_session.py'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_disconnected_event'"}, "return_value": "'tests/test_outbound_session.py::TestOutboundSession'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_disconnected_event'"}, "return_value": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_disconnected_event'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_disconnected_event'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_disconnected_event'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_disconnected_event'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_disconnected_event'"}, "return_value": "'tests/test_outbound_session.py'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_disconnected_event'"}, "return_value": "'tests/test_outbound_session.py::TestOutboundSession'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_disconnected_event'"}, "return_value": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_disconnected_event'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_disconnected_event'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_disconnected_event'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_disconnected_event'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_disconnected_event'"}, "return_value": "'tests/test_outbound_session.py'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_disconnected_event'"}, "return_value": "'tests/test_outbound_session.py::TestOutboundSession'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_disconnected_event'"}, "return_value": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_disconnected_event'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_disconnected_event'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_disconnected_event'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_disconnected_event'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_disconnected_event'"}, "return_value": "'tests/test_outbound_session.py'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_disconnected_event'"}, "return_value": "'tests/test_outbound_session.py::TestOutboundSession'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_disconnected_event'"}, "return_value": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_disconnected_event'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_disconnected_event'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_hangup_event'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_hangup_event'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_hangup_event'"}, "return_value": "'tests/test_outbound_session.py'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_hangup_event'"}, "return_value": "'tests/test_outbound_session.py::TestOutboundSession'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_hangup_event'"}, "return_value": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_hangup_event'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_hangup_event'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_hangup_event'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_hangup_event'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_hangup_event'"}, "return_value": "'tests/test_outbound_session.py'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_hangup_event'"}, "return_value": "'tests/test_outbound_session.py::TestOutboundSession'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_hangup_event'"}, "return_value": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_hangup_event'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_hangup_event'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_hangup_event'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_hangup_event'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_hangup_event'"}, "return_value": "'tests/test_outbound_session.py'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_hangup_event'"}, "return_value": "'tests/test_outbound_session.py::TestOutboundSession'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_hangup_event'"}, "return_value": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_hangup_event'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_hangup_event'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_hangup_event'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_hangup_event'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_hangup_event'"}, "return_value": "'tests/test_outbound_session.py'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_hangup_event'"}, "return_value": "'tests/test_outbound_session.py::TestOutboundSession'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_hangup_event'"}, "return_value": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_hangup_event'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_hangup_event'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_context_manager'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_context_manager'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_context_manager'"}, "return_value": "'tests/test_outbound_session.py'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_context_manager'"}, "return_value": "'tests/test_outbound_session.py::TestWhileConnectedMethod'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_context_manager'"}, "return_value": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_context_manager'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_context_manager'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_context_manager'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_context_manager'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_context_manager'"}, "return_value": "'tests/test_outbound_session.py'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_context_manager'"}, "return_value": "'tests/test_outbound_session.py::TestWhileConnectedMethod'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_context_manager'"}, "return_value": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_context_manager'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_context_manager'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_context_manager'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_context_manager'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_context_manager'"}, "return_value": "'tests/test_outbound_session.py'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_context_manager'"}, "return_value": "'tests/test_outbound_session.py::TestWhileConnectedMethod'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_context_manager'"}, "return_value": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_context_manager'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_context_manager'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_context_manager'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_context_manager'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_context_manager'"}, "return_value": "'tests/test_outbound_session.py'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_context_manager'"}, "return_value": "'tests/test_outbound_session.py::TestWhileConnectedMethod'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_context_manager'"}, "return_value": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_context_manager'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_context_manager'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_decorator'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_decorator'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_decorator'"}, "return_value": "'tests/test_outbound_session.py'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_decorator'"}, "return_value": "'tests/test_outbound_session.py::TestWhileConnectedMethod'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_decorator'"}, "return_value": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_decorator'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_decorator'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_decorator'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_decorator'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_decorator'"}, "return_value": "'tests/test_outbound_session.py'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_decorator'"}, "return_value": "'tests/test_outbound_session.py::TestWhileConnectedMethod'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_decorator'"}, "return_value": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_decorator'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_decorator'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_decorator'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_decorator'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_decorator'"}, "return_value": "'tests/test_outbound_session.py'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_decorator'"}, "return_value": "'tests/test_outbound_session.py::TestWhileConnectedMethod'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_decorator'"}, "return_value": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_decorator'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_decorator'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_decorator'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_decorator'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_decorator'"}, "return_value": "'tests/test_outbound_session.py'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_decorator'"}, "return_value": "'tests/test_outbound_session.py::TestWhileConnectedMethod'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_decorator'"}, "return_value": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_decorator'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_decorator'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_raise_value_error_while_the_call_is_active'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_raise_value_error_while_the_call_is_active'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_raise_value_error_while_the_call_is_active'"}, "return_value": "'tests/test_outbound_session.py'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_raise_value_error_while_the_call_is_active'"}, "return_value": "'tests/test_outbound_session.py::TestWhileConnectedMethod'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_raise_value_error_while_the_call_is_active'"}, "return_value": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_raise_value_error_while_the_call_is_active'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_raise_value_error_while_the_call_is_active'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_raise_value_error_while_the_call_is_active'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_raise_value_error_while_the_call_is_active'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_raise_value_error_while_the_call_is_active'"}, "return_value": "'tests/test_outbound_session.py'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_raise_value_error_while_the_call_is_active'"}, "return_value": "'tests/test_outbound_session.py::TestWhileConnectedMethod'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_raise_value_error_while_the_call_is_active'"}, "return_value": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_raise_value_error_while_the_call_is_active'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_raise_value_error_while_the_call_is_active'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_raise_value_error_while_the_call_is_active'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_raise_value_error_while_the_call_is_active'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_raise_value_error_while_the_call_is_active'"}, "return_value": "'tests/test_outbound_session.py'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_raise_value_error_while_the_call_is_active'"}, "return_value": "'tests/test_outbound_session.py::TestWhileConnectedMethod'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_raise_value_error_while_the_call_is_active'"}, "return_value": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_raise_value_error_while_the_call_is_active'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_raise_value_error_while_the_call_is_active'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_raise_value_error_while_the_call_is_active'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_raise_value_error_while_the_call_is_active'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_raise_value_error_while_the_call_is_active'"}, "return_value": "'tests/test_outbound_session.py'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_raise_value_error_while_the_call_is_active'"}, "return_value": "'tests/test_outbound_session.py::TestWhileConnectedMethod'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_raise_value_error_while_the_call_is_active'"}, "return_value": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_raise_value_error_while_the_call_is_active'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_raise_value_error_while_the_call_is_active'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_skip_code_execution_if_the_outbound_session_is_disconnected'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_skip_code_execution_if_the_outbound_session_is_disconnected'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_skip_code_execution_if_the_outbound_session_is_disconnected'"}, "return_value": "'tests/test_outbound_session.py'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_skip_code_execution_if_the_outbound_session_is_disconnected'"}, "return_value": "'tests/test_outbound_session.py::TestWhileConnectedMethod'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_skip_code_execution_if_the_outbound_session_is_disconnected'"}, "return_value": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_skip_code_execution_if_the_outbound_session_is_disconnected'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_skip_code_execution_if_the_outbound_session_is_disconnected'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_skip_code_execution_if_the_outbound_session_is_disconnected'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_skip_code_execution_if_the_outbound_session_is_disconnected'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_skip_code_execution_if_the_outbound_session_is_disconnected'"}, "return_value": "'tests/test_outbound_session.py'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_skip_code_execution_if_the_outbound_session_is_disconnected'"}, "return_value": "'tests/test_outbound_session.py::TestWhileConnectedMethod'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_skip_code_execution_if_the_outbound_session_is_disconnected'"}, "return_value": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_skip_code_execution_if_the_outbound_session_is_disconnected'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_skip_code_execution_if_the_outbound_session_is_disconnected'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_skip_code_execution_if_the_outbound_session_is_disconnected'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_skip_code_execution_if_the_outbound_session_is_disconnected'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_skip_code_execution_if_the_outbound_session_is_disconnected'"}, "return_value": "'tests/test_outbound_session.py'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_skip_code_execution_if_the_outbound_session_is_disconnected'"}, "return_value": "'tests/test_outbound_session.py::TestWhileConnectedMethod'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_skip_code_execution_if_the_outbound_session_is_disconnected'"}, "return_value": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_skip_code_execution_if_the_outbound_session_is_disconnected'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_skip_code_execution_if_the_outbound_session_is_disconnected'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_skip_code_execution_if_the_outbound_session_is_disconnected'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_skip_code_execution_if_the_outbound_session_is_disconnected'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_skip_code_execution_if_the_outbound_session_is_disconnected'"}, "return_value": "'tests/test_outbound_session.py'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_skip_code_execution_if_the_outbound_session_is_disconnected'"}, "return_value": "'tests/test_outbound_session.py::TestWhileConnectedMethod'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_skip_code_execution_if_the_outbound_session_is_disconnected'"}, "return_value": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_skip_code_execution_if_the_outbound_session_is_disconnected'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_skip_code_execution_if_the_outbound_session_is_disconnected'"}, "return_value": "None"}], "text": "def iterparentnodeids(nodeid: str) -> Iterator[str]:\n    \"\"\"Return the parent node IDs of a given node ID, inclusive.\n\n    For the node ID\n\n        \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_source\"\n\n    the result would be\n\n        \"\"\n        \"testing\"\n        \"testing/code\"\n        \"testing/code/test_excinfo.py\"\n        \"testing/code/test_excinfo.py::TestFormattedExcinfo\"\n        \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_source\"\n\n    Note that :: parts are only considered at the last / component.\n    \"\"\"\n    pos = 0\n    sep = SEP\n    yield \"\"\n    while True:\n        at = nodeid.find(sep, pos)\n        if at == -1 and sep == SEP:\n            sep = \"::\"\n        elif at == -1:\n            if nodeid:\n                yield nodeid\n            break\n        else:\n            if at:\n                yield nodeid[:at]\n            pos = at + len(sep)"}, "wcswidth": {"line": 43, "args": [{"func_args": {"s": "''"}, "return_value": "0"}], "text": "def wcswidth(s: str) -> int:\n    \"\"\"Determine how many columns are needed to display a string in a terminal.\n\n    Returns -1 if the string contains non-printable characters.\n    \"\"\"\n    width = 0\n    for c in unicodedata.normalize(\"NFC\", s):\n        wc = wcwidth(c)\n        if wc < 0:\n            return -1\n        width += wc\n    return width"}, "_is_ignored": {"line": 90, "args": [{"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_disconnect_with_linger'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_disconnect_with_linger'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_disconnect_with_linger'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_rude_rejection'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_rude_rejection'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_rude_rejection'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_with_packet_loss'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_with_packet_loss'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_with_packet_loss'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_private_safe_exec_handler'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_private_safe_exec_handler'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_private_safe_exec_handler'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_quick_sleep_for_falsy_events_queue'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_quick_sleep_for_falsy_events_queue'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_quick_sleep_for_falsy_events_queue'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_custom_name'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_custom_name'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_custom_name'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_log_type'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_log_type'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_log_type'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_no_handlers_will_rely_on_generic'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_no_handlers_will_rely_on_generic'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_no_handlers_will_rely_on_generic'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_post_handler'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_post_handler'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_post_handler'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_pre_handler'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_pre_handler'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_pre_handler'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_receive_events_io_error_handling'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_receive_events_io_error_handling'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_receive_events_io_error_handling'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_receive_events_without_data_but_connected'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_receive_events_without_data_but_connected'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_receive_events_without_data_but_connected'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_stop'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_stop'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_stop'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_api_response'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_api_response'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_api_response'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_client_disconnect'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_client_disconnect'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_client_disconnect'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_command_not_found'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_command_not_found'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_command_not_found'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_connect'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_connect'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_connect'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_connect_wrong_password'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_connect_wrong_password'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_connect_wrong_password'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_custom_event'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_custom_event'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_custom_event'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_socket_data'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_socket_data'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_socket_data'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_with_multiline_channel_variables_content'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_with_multiline_channel_variables_content'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_with_multiline_channel_variables_content'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_without_handler'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_without_handler'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_without_handler'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_register_a_registered_handle'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_register_a_registered_handle'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_register_a_registered_handle'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_register_unregister_handle'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_register_unregister_handle'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_register_unregister_handle'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_unregister_a_not_registered_handle'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_unregister_a_not_registered_handle'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_unregister_a_not_registered_handle'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_z_server_disconnect'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_z_server_disconnect'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_z_server_disconnect'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_disconnected_event'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_disconnected_event'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_disconnected_event'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_hangup_event'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_hangup_event'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_hangup_event'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_context_manager'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_context_manager'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_context_manager'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_decorator'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_decorator'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_decorator'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_raise_value_error_while_the_call_is_active'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_raise_value_error_while_the_call_is_active'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_raise_value_error_while_the_call_is_active'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_skip_code_execution_if_the_outbound_session_is_disconnected'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_skip_code_execution_if_the_outbound_session_is_disconnected'", "ignore_strings": "['']"}, "return_value": "False"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_skip_code_execution_if_the_outbound_session_is_disconnected'", "ignore_strings": "['']"}, "return_value": "False"}], "text": "def _is_ignored(nodeid, ignore_strings):\n    if ignore_strings:\n        for ignore_string in ignore_strings:\n            if ignore_string and ignore_string in nodeid:\n                return True\n    return False"}, "_is_nodeid_has_test": {"line": 98, "args": [{"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_disconnect_with_linger'"}, "return_value": "True"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_rude_rejection'"}, "return_value": "True"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_with_packet_loss'"}, "return_value": "True"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_private_safe_exec_handler'"}, "return_value": "True"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_quick_sleep_for_falsy_events_queue'"}, "return_value": "True"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_custom_name'"}, "return_value": "True"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_log_type'"}, "return_value": "True"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_no_handlers_will_rely_on_generic'"}, "return_value": "True"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_post_handler'"}, "return_value": "True"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_pre_handler'"}, "return_value": "True"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_receive_events_io_error_handling'"}, "return_value": "True"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_receive_events_without_data_but_connected'"}, "return_value": "True"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_stop'"}, "return_value": "True"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_api_response'"}, "return_value": "True"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_client_disconnect'"}, "return_value": "True"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_command_not_found'"}, "return_value": "True"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_connect'"}, "return_value": "True"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_connect_wrong_password'"}, "return_value": "True"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_custom_event'"}, "return_value": "True"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event'"}, "return_value": "True"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_socket_data'"}, "return_value": "True"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_with_multiline_channel_variables_content'"}, "return_value": "True"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_without_handler'"}, "return_value": "True"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_register_a_registered_handle'"}, "return_value": "True"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_register_unregister_handle'"}, "return_value": "True"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_unregister_a_not_registered_handle'"}, "return_value": "True"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_z_server_disconnect'"}, "return_value": "True"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_disconnected_event'"}, "return_value": "True"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_hangup_event'"}, "return_value": "True"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_context_manager'"}, "return_value": "True"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_decorator'"}, "return_value": "True"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_raise_value_error_while_the_call_is_active'"}, "return_value": "True"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_skip_code_execution_if_the_outbound_session_is_disconnected'"}, "return_value": "True"}], "text": "def _is_nodeid_has_test(nodeid):\n    if len(nodeid.split(\"::\")) >= 2:\n        return True\n    return False"}, "_remove_file_extension": {"line": 155, "args": [{"func_args": {"nodeid": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"nodeid": "'ESLProtocolTest:'"}, "return_value": "'ESLProtocolTest:'"}, {"func_args": {"nodeid": "'handle_event_disconnect_with_linger'"}, "return_value": "'handle_event_disconnect_with_linger'"}, {"func_args": {"nodeid": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"nodeid": "'handle_event_rude_rejection'"}, "return_value": "'handle_event_rude_rejection'"}, {"func_args": {"nodeid": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"nodeid": "'handle_event_with_packet_loss'"}, "return_value": "'handle_event_with_packet_loss'"}, {"func_args": {"nodeid": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"nodeid": "'private_safe_exec_handler'"}, "return_value": "'private_safe_exec_handler'"}, {"func_args": {"nodeid": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"nodeid": "'process_events_quick_sleep_for_falsy_events_queue'"}, "return_value": "'process_events_quick_sleep_for_falsy_events_queue'"}, {"func_args": {"nodeid": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"nodeid": "'process_events_with_custom_name'"}, "return_value": "'process_events_with_custom_name'"}, {"func_args": {"nodeid": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"nodeid": "'process_events_with_log_type'"}, "return_value": "'process_events_with_log_type'"}, {"func_args": {"nodeid": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"nodeid": "'process_events_with_no_handlers_will_rely_on_generic'"}, "return_value": "'process_events_with_no_handlers_will_rely_on_generic'"}, {"func_args": {"nodeid": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"nodeid": "'process_events_with_post_handler'"}, "return_value": "'process_events_with_post_handler'"}, {"func_args": {"nodeid": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"nodeid": "'process_events_with_pre_handler'"}, "return_value": "'process_events_with_pre_handler'"}, {"func_args": {"nodeid": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"nodeid": "'receive_events_io_error_handling'"}, "return_value": "'receive_events_io_error_handling'"}, {"func_args": {"nodeid": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"nodeid": "'receive_events_without_data_but_connected'"}, "return_value": "'receive_events_without_data_but_connected'"}, {"func_args": {"nodeid": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"nodeid": "'stop'"}, "return_value": "'stop'"}, {"func_args": {"nodeid": "'TestInboundESL'"}, "return_value": "'TestInboundESL'"}, {"func_args": {"nodeid": "'InboundESL:'"}, "return_value": "'InboundESL:'"}, {"func_args": {"nodeid": "'api_response'"}, "return_value": "'api_response'"}, {"func_args": {"nodeid": "'TestInboundESL'"}, "return_value": "'TestInboundESL'"}, {"func_args": {"nodeid": "'client_disconnect'"}, "return_value": "'client_disconnect'"}, {"func_args": {"nodeid": "'TestInboundESL'"}, "return_value": "'TestInboundESL'"}, {"func_args": {"nodeid": "'command_not_found'"}, "return_value": "'command_not_found'"}, {"func_args": {"nodeid": "'TestInboundESL'"}, "return_value": "'TestInboundESL'"}, {"func_args": {"nodeid": "'connect'"}, "return_value": "'connect'"}, {"func_args": {"nodeid": "'TestInboundESL'"}, "return_value": "'TestInboundESL'"}, {"func_args": {"nodeid": "'connect_wrong_password'"}, "return_value": "'connect_wrong_password'"}, {"func_args": {"nodeid": "'TestInboundESL'"}, "return_value": "'TestInboundESL'"}, {"func_args": {"nodeid": "'custom_event'"}, "return_value": "'custom_event'"}, {"func_args": {"nodeid": "'TestInboundESL'"}, "return_value": "'TestInboundESL'"}, {"func_args": {"nodeid": "'event'"}, "return_value": "'event'"}, {"func_args": {"nodeid": "'TestInboundESL'"}, "return_value": "'TestInboundESL'"}, {"func_args": {"nodeid": "'event_socket_data'"}, "return_value": "'event_socket_data'"}, {"func_args": {"nodeid": "'TestInboundESL'"}, "return_value": "'TestInboundESL'"}, {"func_args": {"nodeid": "'event_with_multiline_channel_variables_content'"}, "return_value": "'event_with_multiline_channel_variables_content'"}, {"func_args": {"nodeid": "'TestInboundESL'"}, "return_value": "'TestInboundESL'"}, {"func_args": {"nodeid": "'event_without_handler'"}, "return_value": "'event_without_handler'"}, {"func_args": {"nodeid": "'TestInboundESL'"}, "return_value": "'TestInboundESL'"}, {"func_args": {"nodeid": "'register_a_registered_handle'"}, "return_value": "'register_a_registered_handle'"}, {"func_args": {"nodeid": "'TestInboundESL'"}, "return_value": "'TestInboundESL'"}, {"func_args": {"nodeid": "'register_unregister_handle'"}, "return_value": "'register_unregister_handle'"}, {"func_args": {"nodeid": "'TestInboundESL'"}, "return_value": "'TestInboundESL'"}, {"func_args": {"nodeid": "'unregister_a_not_registered_handle'"}, "return_value": "'unregister_a_not_registered_handle'"}, {"func_args": {"nodeid": "'TestInboundESL'"}, "return_value": "'TestInboundESL'"}, {"func_args": {"nodeid": "'z_server_disconnect'"}, "return_value": "'z_server_disconnect'"}, {"func_args": {"nodeid": "'TestOutboundSession'"}, "return_value": "'TestOutboundSession'"}, {"func_args": {"nodeid": "'OutboundSession:'"}, "return_value": "'OutboundSession:'"}, {"func_args": {"nodeid": "'outbound_connected_is_updated_during_on_disconnected_event'"}, "return_value": "'outbound_connected_is_updated_during_on_disconnected_event'"}, {"func_args": {"nodeid": "'TestOutboundSession'"}, "return_value": "'TestOutboundSession'"}, {"func_args": {"nodeid": "'outbound_connected_is_updated_during_on_hangup_event'"}, "return_value": "'outbound_connected_is_updated_during_on_hangup_event'"}, {"func_args": {"nodeid": "'TestWhileConnectedMethod'"}, "return_value": "'TestWhileConnectedMethod'"}, {"func_args": {"nodeid": "'WhileConnectedMethod:'"}, "return_value": "'WhileConnectedMethod:'"}, {"func_args": {"nodeid": "'context_manager'"}, "return_value": "'context_manager'"}, {"func_args": {"nodeid": "'TestWhileConnectedMethod'"}, "return_value": "'TestWhileConnectedMethod'"}, {"func_args": {"nodeid": "'decorator'"}, "return_value": "'decorator'"}, {"func_args": {"nodeid": "'TestWhileConnectedMethod'"}, "return_value": "'TestWhileConnectedMethod'"}, {"func_args": {"nodeid": "'raise_value_error_while_the_call_is_active'"}, "return_value": "'raise_value_error_while_the_call_is_active'"}, {"func_args": {"nodeid": "'TestWhileConnectedMethod'"}, "return_value": "'TestWhileConnectedMethod'"}, {"func_args": {"nodeid": "'skip_code_execution_if_the_outbound_session_is_disconnected'"}, "return_value": "'skip_code_execution_if_the_outbound_session_is_disconnected'"}], "text": "def _remove_file_extension(nodeid):\n    return os.path.splitext(nodeid)[0]"}, "_remove_test_container_prefix": {"line": 151, "args": [{"func_args": {"nodeid": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"nodeid": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"nodeid": "'ESLProtocolTest:'"}, "return_value": "'ESLProtocolTest:'"}, {"func_args": {"nodeid": "'handle_event_disconnect_with_linger'"}, "return_value": "'handle_event_disconnect_with_linger'"}, {"func_args": {"nodeid": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"nodeid": "'handle_event_rude_rejection'"}, "return_value": "'handle_event_rude_rejection'"}, {"func_args": {"nodeid": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"nodeid": "'handle_event_with_packet_loss'"}, "return_value": "'handle_event_with_packet_loss'"}, {"func_args": {"nodeid": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"nodeid": "'private_safe_exec_handler'"}, "return_value": "'private_safe_exec_handler'"}, {"func_args": {"nodeid": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"nodeid": "'process_events_quick_sleep_for_falsy_events_queue'"}, "return_value": "'process_events_quick_sleep_for_falsy_events_queue'"}, {"func_args": {"nodeid": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"nodeid": "'process_events_with_custom_name'"}, "return_value": "'process_events_with_custom_name'"}, {"func_args": {"nodeid": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"nodeid": "'process_events_with_log_type'"}, "return_value": "'process_events_with_log_type'"}, {"func_args": {"nodeid": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"nodeid": "'process_events_with_no_handlers_will_rely_on_generic'"}, "return_value": "'process_events_with_no_handlers_will_rely_on_generic'"}, {"func_args": {"nodeid": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"nodeid": "'process_events_with_post_handler'"}, "return_value": "'process_events_with_post_handler'"}, {"func_args": {"nodeid": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"nodeid": "'process_events_with_pre_handler'"}, "return_value": "'process_events_with_pre_handler'"}, {"func_args": {"nodeid": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"nodeid": "'receive_events_io_error_handling'"}, "return_value": "'receive_events_io_error_handling'"}, {"func_args": {"nodeid": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"nodeid": "'receive_events_without_data_but_connected'"}, "return_value": "'receive_events_without_data_but_connected'"}, {"func_args": {"nodeid": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"nodeid": "'stop'"}, "return_value": "'stop'"}, {"func_args": {"nodeid": "'TestInboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"nodeid": "'TestInboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"nodeid": "'InboundESL:'"}, "return_value": "'InboundESL:'"}, {"func_args": {"nodeid": "'api_response'"}, "return_value": "'api_response'"}, {"func_args": {"nodeid": "'TestInboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"nodeid": "'client_disconnect'"}, "return_value": "'client_disconnect'"}, {"func_args": {"nodeid": "'TestInboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"nodeid": "'command_not_found'"}, "return_value": "'command_not_found'"}, {"func_args": {"nodeid": "'TestInboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"nodeid": "'connect'"}, "return_value": "'connect'"}, {"func_args": {"nodeid": "'TestInboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"nodeid": "'connect_wrong_password'"}, "return_value": "'connect_wrong_password'"}, {"func_args": {"nodeid": "'TestInboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"nodeid": "'custom_event'"}, "return_value": "'custom_event'"}, {"func_args": {"nodeid": "'TestInboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"nodeid": "'event'"}, "return_value": "'event'"}, {"func_args": {"nodeid": "'TestInboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"nodeid": "'event_socket_data'"}, "return_value": "'event_socket_data'"}, {"func_args": {"nodeid": "'TestInboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"nodeid": "'event_with_multiline_channel_variables_content'"}, "return_value": "'event_with_multiline_channel_variables_content'"}, {"func_args": {"nodeid": "'TestInboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"nodeid": "'event_without_handler'"}, "return_value": "'event_without_handler'"}, {"func_args": {"nodeid": "'TestInboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"nodeid": "'register_a_registered_handle'"}, "return_value": "'register_a_registered_handle'"}, {"func_args": {"nodeid": "'TestInboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"nodeid": "'register_unregister_handle'"}, "return_value": "'register_unregister_handle'"}, {"func_args": {"nodeid": "'TestInboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"nodeid": "'unregister_a_not_registered_handle'"}, "return_value": "'unregister_a_not_registered_handle'"}, {"func_args": {"nodeid": "'TestInboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"nodeid": "'z_server_disconnect'"}, "return_value": "'z_server_disconnect'"}, {"func_args": {"nodeid": "'TestOutboundSession'"}, "return_value": "'OutboundSession'"}, {"func_args": {"nodeid": "'TestOutboundSession'"}, "return_value": "'OutboundSession'"}, {"func_args": {"nodeid": "'OutboundSession:'"}, "return_value": "'OutboundSession:'"}, {"func_args": {"nodeid": "'outbound_connected_is_updated_during_on_disconnected_event'"}, "return_value": "'outbound_connected_is_updated_during_on_disconnected_event'"}, {"func_args": {"nodeid": "'TestOutboundSession'"}, "return_value": "'OutboundSession'"}, {"func_args": {"nodeid": "'outbound_connected_is_updated_during_on_hangup_event'"}, "return_value": "'outbound_connected_is_updated_during_on_hangup_event'"}, {"func_args": {"nodeid": "'TestWhileConnectedMethod'"}, "return_value": "'WhileConnectedMethod'"}, {"func_args": {"nodeid": "'TestWhileConnectedMethod'"}, "return_value": "'WhileConnectedMethod'"}, {"func_args": {"nodeid": "'WhileConnectedMethod:'"}, "return_value": "'WhileConnectedMethod:'"}, {"func_args": {"nodeid": "'context_manager'"}, "return_value": "'context_manager'"}, {"func_args": {"nodeid": "'TestWhileConnectedMethod'"}, "return_value": "'WhileConnectedMethod'"}, {"func_args": {"nodeid": "'decorator'"}, "return_value": "'decorator'"}, {"func_args": {"nodeid": "'TestWhileConnectedMethod'"}, "return_value": "'WhileConnectedMethod'"}, {"func_args": {"nodeid": "'raise_value_error_while_the_call_is_active'"}, "return_value": "'raise_value_error_while_the_call_is_active'"}, {"func_args": {"nodeid": "'TestWhileConnectedMethod'"}, "return_value": "'WhileConnectedMethod'"}, {"func_args": {"nodeid": "'skip_code_execution_if_the_outbound_session_is_disconnected'"}, "return_value": "'skip_code_execution_if_the_outbound_session_is_disconnected'"}], "text": "def _remove_test_container_prefix(nodeid):\n    return re.sub(\"^(Test)|(describe)\", \"\", nodeid)"}, "_replace_underscores": {"line": 167, "args": [{"func_args": {"nodeid": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"nodeid": "'ESLProtocolTest:'"}, "return_value": "'ESLProtocolTest:'"}, {"func_args": {"nodeid": "'handle_event_disconnect_with_linger'"}, "return_value": "'handle event disconnect with linger'"}, {"func_args": {"nodeid": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"nodeid": "'handle_event_rude_rejection'"}, "return_value": "'handle event rude rejection'"}, {"func_args": {"nodeid": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"nodeid": "'handle_event_with_packet_loss'"}, "return_value": "'handle event with packet loss'"}, {"func_args": {"nodeid": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"nodeid": "'private_safe_exec_handler'"}, "return_value": "'private safe exec handler'"}, {"func_args": {"nodeid": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"nodeid": "'process_events_quick_sleep_for_falsy_events_queue'"}, "return_value": "'process events quick sleep for falsy events queue'"}, {"func_args": {"nodeid": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"nodeid": "'process_events_with_custom_name'"}, "return_value": "'process events with custom name'"}, {"func_args": {"nodeid": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"nodeid": "'process_events_with_log_type'"}, "return_value": "'process events with log type'"}, {"func_args": {"nodeid": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"nodeid": "'process_events_with_no_handlers_will_rely_on_generic'"}, "return_value": "'process events with no handlers will rely on generic'"}, {"func_args": {"nodeid": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"nodeid": "'process_events_with_post_handler'"}, "return_value": "'process events with post handler'"}, {"func_args": {"nodeid": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"nodeid": "'process_events_with_pre_handler'"}, "return_value": "'process events with pre handler'"}, {"func_args": {"nodeid": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"nodeid": "'receive_events_io_error_handling'"}, "return_value": "'receive events io error handling'"}, {"func_args": {"nodeid": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"nodeid": "'receive_events_without_data_but_connected'"}, "return_value": "'receive events without data but connected'"}, {"func_args": {"nodeid": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"nodeid": "'stop'"}, "return_value": "'stop'"}, {"func_args": {"nodeid": "'InboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"nodeid": "'InboundESL:'"}, "return_value": "'InboundESL:'"}, {"func_args": {"nodeid": "'api_response'"}, "return_value": "'api response'"}, {"func_args": {"nodeid": "'InboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"nodeid": "'client_disconnect'"}, "return_value": "'client disconnect'"}, {"func_args": {"nodeid": "'InboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"nodeid": "'command_not_found'"}, "return_value": "'command not found'"}, {"func_args": {"nodeid": "'InboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"nodeid": "'connect'"}, "return_value": "'connect'"}, {"func_args": {"nodeid": "'InboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"nodeid": "'connect_wrong_password'"}, "return_value": "'connect wrong password'"}, {"func_args": {"nodeid": "'InboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"nodeid": "'custom_event'"}, "return_value": "'custom event'"}, {"func_args": {"nodeid": "'InboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"nodeid": "'event'"}, "return_value": "'event'"}, {"func_args": {"nodeid": "'InboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"nodeid": "'event_socket_data'"}, "return_value": "'event socket data'"}, {"func_args": {"nodeid": "'InboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"nodeid": "'event_with_multiline_channel_variables_content'"}, "return_value": "'event with multiline channel variables content'"}, {"func_args": {"nodeid": "'InboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"nodeid": "'event_without_handler'"}, "return_value": "'event without handler'"}, {"func_args": {"nodeid": "'InboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"nodeid": "'register_a_registered_handle'"}, "return_value": "'register a registered handle'"}, {"func_args": {"nodeid": "'InboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"nodeid": "'register_unregister_handle'"}, "return_value": "'register unregister handle'"}, {"func_args": {"nodeid": "'InboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"nodeid": "'unregister_a_not_registered_handle'"}, "return_value": "'unregister a not registered handle'"}, {"func_args": {"nodeid": "'InboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"nodeid": "'z_server_disconnect'"}, "return_value": "'z server disconnect'"}, {"func_args": {"nodeid": "'OutboundSession'"}, "return_value": "'OutboundSession'"}, {"func_args": {"nodeid": "'OutboundSession:'"}, "return_value": "'OutboundSession:'"}, {"func_args": {"nodeid": "'outbound_connected_is_updated_during_on_disconnected_event'"}, "return_value": "'outbound connected is updated during on disconnected event'"}, {"func_args": {"nodeid": "'OutboundSession'"}, "return_value": "'OutboundSession'"}, {"func_args": {"nodeid": "'outbound_connected_is_updated_during_on_hangup_event'"}, "return_value": "'outbound connected is updated during on hangup event'"}, {"func_args": {"nodeid": "'WhileConnectedMethod'"}, "return_value": "'WhileConnectedMethod'"}, {"func_args": {"nodeid": "'WhileConnectedMethod:'"}, "return_value": "'WhileConnectedMethod:'"}, {"func_args": {"nodeid": "'context_manager'"}, "return_value": "'context manager'"}, {"func_args": {"nodeid": "'WhileConnectedMethod'"}, "return_value": "'WhileConnectedMethod'"}, {"func_args": {"nodeid": "'decorator'"}, "return_value": "'decorator'"}, {"func_args": {"nodeid": "'WhileConnectedMethod'"}, "return_value": "'WhileConnectedMethod'"}, {"func_args": {"nodeid": "'raise_value_error_while_the_call_is_active'"}, "return_value": "'raise value error while the call is active'"}, {"func_args": {"nodeid": "'WhileConnectedMethod'"}, "return_value": "'WhileConnectedMethod'"}, {"func_args": {"nodeid": "'skip_code_execution_if_the_outbound_session_is_disconnected'"}, "return_value": "'skip code execution if the outbound session is disconnected'"}], "text": "def _replace_underscores(nodeid):\n    return nodeid.replace(\"__\", \" \").strip().replace(\"_\", \" \").strip()"}, "_capitalize_first_letter": {"line": 171, "args": [{"func_args": {"s": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"s": "'ESLProtocolTest:'"}, "return_value": "'ESLProtocolTest:'"}, {"func_args": {"s": "'handle event disconnect with linger'"}, "return_value": "'Handle event disconnect with linger'"}, {"func_args": {"s": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"s": "'handle event rude rejection'"}, "return_value": "'Handle event rude rejection'"}, {"func_args": {"s": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"s": "'handle event with packet loss'"}, "return_value": "'Handle event with packet loss'"}, {"func_args": {"s": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"s": "'private safe exec handler'"}, "return_value": "'Private safe exec handler'"}, {"func_args": {"s": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"s": "'process events quick sleep for falsy events queue'"}, "return_value": "'Process events quick sleep for falsy events queue'"}, {"func_args": {"s": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"s": "'process events with custom name'"}, "return_value": "'Process events with custom name'"}, {"func_args": {"s": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"s": "'process events with log type'"}, "return_value": "'Process events with log type'"}, {"func_args": {"s": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"s": "'process events with no handlers will rely on generic'"}, "return_value": "'Process events with no handlers will rely on generic'"}, {"func_args": {"s": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"s": "'process events with post handler'"}, "return_value": "'Process events with post handler'"}, {"func_args": {"s": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"s": "'process events with pre handler'"}, "return_value": "'Process events with pre handler'"}, {"func_args": {"s": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"s": "'receive events io error handling'"}, "return_value": "'Receive events io error handling'"}, {"func_args": {"s": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"s": "'receive events without data but connected'"}, "return_value": "'Receive events without data but connected'"}, {"func_args": {"s": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"s": "'stop'"}, "return_value": "'Stop'"}, {"func_args": {"s": "'InboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"s": "'InboundESL:'"}, "return_value": "'InboundESL:'"}, {"func_args": {"s": "'api response'"}, "return_value": "'Api response'"}, {"func_args": {"s": "'InboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"s": "'client disconnect'"}, "return_value": "'Client disconnect'"}, {"func_args": {"s": "'InboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"s": "'command not found'"}, "return_value": "'Command not found'"}, {"func_args": {"s": "'InboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"s": "'connect'"}, "return_value": "'Connect'"}, {"func_args": {"s": "'InboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"s": "'connect wrong password'"}, "return_value": "'Connect wrong password'"}, {"func_args": {"s": "'InboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"s": "'custom event'"}, "return_value": "'Custom event'"}, {"func_args": {"s": "'InboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"s": "'event'"}, "return_value": "'Event'"}, {"func_args": {"s": "'InboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"s": "'event socket data'"}, "return_value": "'Event socket data'"}, {"func_args": {"s": "'InboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"s": "'event with multiline channel variables content'"}, "return_value": "'Event with multiline channel variables content'"}, {"func_args": {"s": "'InboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"s": "'event without handler'"}, "return_value": "'Event without handler'"}, {"func_args": {"s": "'InboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"s": "'register a registered handle'"}, "return_value": "'Register a registered handle'"}, {"func_args": {"s": "'InboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"s": "'register unregister handle'"}, "return_value": "'Register unregister handle'"}, {"func_args": {"s": "'InboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"s": "'unregister a not registered handle'"}, "return_value": "'Unregister a not registered handle'"}, {"func_args": {"s": "'InboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"s": "'z server disconnect'"}, "return_value": "'Z server disconnect'"}, {"func_args": {"s": "'OutboundSession'"}, "return_value": "'OutboundSession'"}, {"func_args": {"s": "'OutboundSession:'"}, "return_value": "'OutboundSession:'"}, {"func_args": {"s": "'outbound connected is updated during on disconnected event'"}, "return_value": "'Outbound connected is updated during on disconnected event'"}, {"func_args": {"s": "'OutboundSession'"}, "return_value": "'OutboundSession'"}, {"func_args": {"s": "'outbound connected is updated during on hangup event'"}, "return_value": "'Outbound connected is updated during on hangup event'"}, {"func_args": {"s": "'WhileConnectedMethod'"}, "return_value": "'WhileConnectedMethod'"}, {"func_args": {"s": "'WhileConnectedMethod:'"}, "return_value": "'WhileConnectedMethod:'"}, {"func_args": {"s": "'context manager'"}, "return_value": "'Context manager'"}, {"func_args": {"s": "'WhileConnectedMethod'"}, "return_value": "'WhileConnectedMethod'"}, {"func_args": {"s": "'decorator'"}, "return_value": "'Decorator'"}, {"func_args": {"s": "'WhileConnectedMethod'"}, "return_value": "'WhileConnectedMethod'"}, {"func_args": {"s": "'raise value error while the call is active'"}, "return_value": "'Raise value error while the call is active'"}, {"func_args": {"s": "'WhileConnectedMethod'"}, "return_value": "'WhileConnectedMethod'"}, {"func_args": {"s": "'skip code execution if the outbound session is disconnected'"}, "return_value": "'Skip code execution if the outbound session is disconnected'"}], "text": "def _capitalize_first_letter(s):\n    return s[:1].capitalize() + s[1:]"}, "prettify": {"line": 104, "args": [{"func_args": {"string": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"string": "'ESLProtocolTest:'"}, "return_value": "'ESLProtocolTest:'"}, {"func_args": {"string": "'handle_event_disconnect_with_linger'"}, "return_value": "'Handle event disconnect with linger'"}, {"func_args": {"string": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"string": "'handle_event_rude_rejection'"}, "return_value": "'Handle event rude rejection'"}, {"func_args": {"string": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"string": "'handle_event_with_packet_loss'"}, "return_value": "'Handle event with packet loss'"}, {"func_args": {"string": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"string": "'private_safe_exec_handler'"}, "return_value": "'Private safe exec handler'"}, {"func_args": {"string": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"string": "'process_events_quick_sleep_for_falsy_events_queue'"}, "return_value": "'Process events quick sleep for falsy events queue'"}, {"func_args": {"string": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"string": "'process_events_with_custom_name'"}, "return_value": "'Process events with custom name'"}, {"func_args": {"string": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"string": "'process_events_with_log_type'"}, "return_value": "'Process events with log type'"}, {"func_args": {"string": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"string": "'process_events_with_no_handlers_will_rely_on_generic'"}, "return_value": "'Process events with no handlers will rely on generic'"}, {"func_args": {"string": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"string": "'process_events_with_post_handler'"}, "return_value": "'Process events with post handler'"}, {"func_args": {"string": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"string": "'process_events_with_pre_handler'"}, "return_value": "'Process events with pre handler'"}, {"func_args": {"string": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"string": "'receive_events_io_error_handling'"}, "return_value": "'Receive events io error handling'"}, {"func_args": {"string": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"string": "'receive_events_without_data_but_connected'"}, "return_value": "'Receive events without data but connected'"}, {"func_args": {"string": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest'"}, {"func_args": {"string": "'stop'"}, "return_value": "'Stop'"}, {"func_args": {"string": "'TestInboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"string": "'InboundESL:'"}, "return_value": "'InboundESL:'"}, {"func_args": {"string": "'api_response'"}, "return_value": "'Api response'"}, {"func_args": {"string": "'TestInboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"string": "'client_disconnect'"}, "return_value": "'Client disconnect'"}, {"func_args": {"string": "'TestInboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"string": "'command_not_found'"}, "return_value": "'Command not found'"}, {"func_args": {"string": "'TestInboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"string": "'connect'"}, "return_value": "'Connect'"}, {"func_args": {"string": "'TestInboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"string": "'connect_wrong_password'"}, "return_value": "'Connect wrong password'"}, {"func_args": {"string": "'TestInboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"string": "'custom_event'"}, "return_value": "'Custom event'"}, {"func_args": {"string": "'TestInboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"string": "'event'"}, "return_value": "'Event'"}, {"func_args": {"string": "'TestInboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"string": "'event_socket_data'"}, "return_value": "'Event socket data'"}, {"func_args": {"string": "'TestInboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"string": "'event_with_multiline_channel_variables_content'"}, "return_value": "'Event with multiline channel variables content'"}, {"func_args": {"string": "'TestInboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"string": "'event_without_handler'"}, "return_value": "'Event without handler'"}, {"func_args": {"string": "'TestInboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"string": "'register_a_registered_handle'"}, "return_value": "'Register a registered handle'"}, {"func_args": {"string": "'TestInboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"string": "'register_unregister_handle'"}, "return_value": "'Register unregister handle'"}, {"func_args": {"string": "'TestInboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"string": "'unregister_a_not_registered_handle'"}, "return_value": "'Unregister a not registered handle'"}, {"func_args": {"string": "'TestInboundESL'"}, "return_value": "'InboundESL'"}, {"func_args": {"string": "'z_server_disconnect'"}, "return_value": "'Z server disconnect'"}, {"func_args": {"string": "'TestOutboundSession'"}, "return_value": "'OutboundSession'"}, {"func_args": {"string": "'OutboundSession:'"}, "return_value": "'OutboundSession:'"}, {"func_args": {"string": "'outbound_connected_is_updated_during_on_disconnected_event'"}, "return_value": "'Outbound connected is updated during on disconnected event'"}, {"func_args": {"string": "'TestOutboundSession'"}, "return_value": "'OutboundSession'"}, {"func_args": {"string": "'outbound_connected_is_updated_during_on_hangup_event'"}, "return_value": "'Outbound connected is updated during on hangup event'"}, {"func_args": {"string": "'TestWhileConnectedMethod'"}, "return_value": "'WhileConnectedMethod'"}, {"func_args": {"string": "'WhileConnectedMethod:'"}, "return_value": "'WhileConnectedMethod:'"}, {"func_args": {"string": "'context_manager'"}, "return_value": "'Context manager'"}, {"func_args": {"string": "'TestWhileConnectedMethod'"}, "return_value": "'WhileConnectedMethod'"}, {"func_args": {"string": "'decorator'"}, "return_value": "'Decorator'"}, {"func_args": {"string": "'TestWhileConnectedMethod'"}, "return_value": "'WhileConnectedMethod'"}, {"func_args": {"string": "'raise_value_error_while_the_call_is_active'"}, "return_value": "'Raise value error while the call is active'"}, {"func_args": {"string": "'TestWhileConnectedMethod'"}, "return_value": "'WhileConnectedMethod'"}, {"func_args": {"string": "'skip_code_execution_if_the_outbound_session_is_disconnected'"}, "return_value": "'Skip code execution if the outbound session is disconnected'"}], "text": "def prettify(string):\n    return _capitalize_first_letter(\n        _replace_underscores(\n            _remove_test_container_prefix(\n                _remove_file_extension(string))))"}, "_get_test_path": {"line": 119, "args": [{"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_disconnect_with_linger'", "header": "'{module_path}:'"}, "return_value": "'tests/test_lib_esl.py:'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_rude_rejection'", "header": "'{module_path}:'"}, "return_value": "'tests/test_lib_esl.py:'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_with_packet_loss'", "header": "'{module_path}:'"}, "return_value": "'tests/test_lib_esl.py:'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_private_safe_exec_handler'", "header": "'{module_path}:'"}, "return_value": "'tests/test_lib_esl.py:'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_quick_sleep_for_falsy_events_queue'", "header": "'{module_path}:'"}, "return_value": "'tests/test_lib_esl.py:'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_custom_name'", "header": "'{module_path}:'"}, "return_value": "'tests/test_lib_esl.py:'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_log_type'", "header": "'{module_path}:'"}, "return_value": "'tests/test_lib_esl.py:'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_no_handlers_will_rely_on_generic'", "header": "'{module_path}:'"}, "return_value": "'tests/test_lib_esl.py:'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_post_handler'", "header": "'{module_path}:'"}, "return_value": "'tests/test_lib_esl.py:'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_pre_handler'", "header": "'{module_path}:'"}, "return_value": "'tests/test_lib_esl.py:'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_receive_events_io_error_handling'", "header": "'{module_path}:'"}, "return_value": "'tests/test_lib_esl.py:'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_receive_events_without_data_but_connected'", "header": "'{module_path}:'"}, "return_value": "'tests/test_lib_esl.py:'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_stop'", "header": "'{module_path}:'"}, "return_value": "'tests/test_lib_esl.py:'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_api_response'", "header": "'{module_path}:'"}, "return_value": "'tests/test_lib_esl.py:'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_client_disconnect'", "header": "'{module_path}:'"}, "return_value": "'tests/test_lib_esl.py:'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_command_not_found'", "header": "'{module_path}:'"}, "return_value": "'tests/test_lib_esl.py:'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_connect'", "header": "'{module_path}:'"}, "return_value": "'tests/test_lib_esl.py:'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_connect_wrong_password'", "header": "'{module_path}:'"}, "return_value": "'tests/test_lib_esl.py:'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_custom_event'", "header": "'{module_path}:'"}, "return_value": "'tests/test_lib_esl.py:'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event'", "header": "'{module_path}:'"}, "return_value": "'tests/test_lib_esl.py:'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_socket_data'", "header": "'{module_path}:'"}, "return_value": "'tests/test_lib_esl.py:'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_with_multiline_channel_variables_content'", "header": "'{module_path}:'"}, "return_value": "'tests/test_lib_esl.py:'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_without_handler'", "header": "'{module_path}:'"}, "return_value": "'tests/test_lib_esl.py:'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_register_a_registered_handle'", "header": "'{module_path}:'"}, "return_value": "'tests/test_lib_esl.py:'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_register_unregister_handle'", "header": "'{module_path}:'"}, "return_value": "'tests/test_lib_esl.py:'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_unregister_a_not_registered_handle'", "header": "'{module_path}:'"}, "return_value": "'tests/test_lib_esl.py:'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_z_server_disconnect'", "header": "'{module_path}:'"}, "return_value": "'tests/test_lib_esl.py:'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_disconnected_event'", "header": "'{module_path}:'"}, "return_value": "'tests/test_outbound_session.py:'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_hangup_event'", "header": "'{module_path}:'"}, "return_value": "'tests/test_outbound_session.py:'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_context_manager'", "header": "'{module_path}:'"}, "return_value": "'tests/test_outbound_session.py:'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_decorator'", "header": "'{module_path}:'"}, "return_value": "'tests/test_outbound_session.py:'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_raise_value_error_while_the_call_is_active'", "header": "'{module_path}:'"}, "return_value": "'tests/test_outbound_session.py:'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_skip_code_execution_if_the_outbound_session_is_disconnected'", "header": "'{module_path}:'"}, "return_value": "'tests/test_outbound_session.py:'"}], "text": "def _get_test_path(nodeid, header):\n    levels = nodeid.split(\"::\")\n\n    module_path = levels[0]\n    module_name = os.path.split(levels[0])[1]\n\n    if len(levels) > 2:\n        class_name = levels[1]\n        test_case = prettify(class_name)\n    else:\n        class_name = ''\n        test_case = prettify(module_name)\n\n    return header.format(\n        path=levels[0],\n        module_name=module_name,\n        module_path=module_path,\n        class_name=class_name,\n        test_case=test_case\n    )"}, "_append_colon": {"line": 175, "args": [{"func_args": {"string": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest:'"}, {"func_args": {"string": "'InboundESL'"}, "return_value": "'InboundESL:'"}, {"func_args": {"string": "'OutboundSession'"}, "return_value": "'OutboundSession:'"}, {"func_args": {"string": "'WhileConnectedMethod'"}, "return_value": "'WhileConnectedMethod:'"}], "text": "def _append_colon(string):\n    return \"{}:\".format(string)"}, "prettify_description": {"line": 115, "args": [{"func_args": {"string": "'ESLProtocolTest'"}, "return_value": "'ESLProtocolTest:'"}, {"func_args": {"string": "'TestInboundESL'"}, "return_value": "'InboundESL:'"}, {"func_args": {"string": "'TestOutboundSession'"}, "return_value": "'OutboundSession:'"}, {"func_args": {"string": "'TestWhileConnectedMethod'"}, "return_value": "'WhileConnectedMethod:'"}], "text": "def prettify_description(string):\n    return prettify(_append_colon(_remove_test_container_prefix(string)))"}, "_remove_module_name": {"line": 159, "args": [{"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_disconnect_with_linger'"}, "return_value": "'test_handle_event_disconnect_with_linger'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_rude_rejection'"}, "return_value": "'test_handle_event_rude_rejection'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_with_packet_loss'"}, "return_value": "'test_handle_event_with_packet_loss'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_private_safe_exec_handler'"}, "return_value": "'test_private_safe_exec_handler'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_quick_sleep_for_falsy_events_queue'"}, "return_value": "'test_process_events_quick_sleep_for_falsy_events_queue'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_custom_name'"}, "return_value": "'test_process_events_with_custom_name'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_log_type'"}, "return_value": "'test_process_events_with_log_type'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_no_handlers_will_rely_on_generic'"}, "return_value": "'test_process_events_with_no_handlers_will_rely_on_generic'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_post_handler'"}, "return_value": "'test_process_events_with_post_handler'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_pre_handler'"}, "return_value": "'test_process_events_with_pre_handler'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_receive_events_io_error_handling'"}, "return_value": "'test_receive_events_io_error_handling'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_receive_events_without_data_but_connected'"}, "return_value": "'test_receive_events_without_data_but_connected'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_stop'"}, "return_value": "'test_stop'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_api_response'"}, "return_value": "'test_api_response'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_client_disconnect'"}, "return_value": "'test_client_disconnect'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_command_not_found'"}, "return_value": "'test_command_not_found'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_connect'"}, "return_value": "'test_connect'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_connect_wrong_password'"}, "return_value": "'test_connect_wrong_password'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_custom_event'"}, "return_value": "'test_custom_event'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event'"}, "return_value": "'test_event'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_socket_data'"}, "return_value": "'test_event_socket_data'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_with_multiline_channel_variables_content'"}, "return_value": "'test_event_with_multiline_channel_variables_content'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_without_handler'"}, "return_value": "'test_event_without_handler'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_register_a_registered_handle'"}, "return_value": "'test_register_a_registered_handle'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_register_unregister_handle'"}, "return_value": "'test_register_unregister_handle'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_unregister_a_not_registered_handle'"}, "return_value": "'test_unregister_a_not_registered_handle'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_z_server_disconnect'"}, "return_value": "'test_z_server_disconnect'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_disconnected_event'"}, "return_value": "'test_outbound_connected_is_updated_during_on_disconnected_event'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_hangup_event'"}, "return_value": "'test_outbound_connected_is_updated_during_on_hangup_event'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_context_manager'"}, "return_value": "'test_context_manager'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_decorator'"}, "return_value": "'test_decorator'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_raise_value_error_while_the_call_is_active'"}, "return_value": "'test_raise_value_error_while_the_call_is_active'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_skip_code_execution_if_the_outbound_session_is_disconnected'"}, "return_value": "'test_skip_code_execution_if_the_outbound_session_is_disconnected'"}], "text": "def _remove_module_name(nodeid):\n    return nodeid.rsplit(\"::\", 1)[1]"}, "_remove_test_prefix": {"line": 163, "args": [{"func_args": {"nodeid": "'test_handle_event_disconnect_with_linger'"}, "return_value": "'handle_event_disconnect_with_linger'"}, {"func_args": {"nodeid": "'test_handle_event_rude_rejection'"}, "return_value": "'handle_event_rude_rejection'"}, {"func_args": {"nodeid": "'test_handle_event_with_packet_loss'"}, "return_value": "'handle_event_with_packet_loss'"}, {"func_args": {"nodeid": "'test_private_safe_exec_handler'"}, "return_value": "'private_safe_exec_handler'"}, {"func_args": {"nodeid": "'test_process_events_quick_sleep_for_falsy_events_queue'"}, "return_value": "'process_events_quick_sleep_for_falsy_events_queue'"}, {"func_args": {"nodeid": "'test_process_events_with_custom_name'"}, "return_value": "'process_events_with_custom_name'"}, {"func_args": {"nodeid": "'test_process_events_with_log_type'"}, "return_value": "'process_events_with_log_type'"}, {"func_args": {"nodeid": "'test_process_events_with_no_handlers_will_rely_on_generic'"}, "return_value": "'process_events_with_no_handlers_will_rely_on_generic'"}, {"func_args": {"nodeid": "'test_process_events_with_post_handler'"}, "return_value": "'process_events_with_post_handler'"}, {"func_args": {"nodeid": "'test_process_events_with_pre_handler'"}, "return_value": "'process_events_with_pre_handler'"}, {"func_args": {"nodeid": "'test_receive_events_io_error_handling'"}, "return_value": "'receive_events_io_error_handling'"}, {"func_args": {"nodeid": "'test_receive_events_without_data_but_connected'"}, "return_value": "'receive_events_without_data_but_connected'"}, {"func_args": {"nodeid": "'test_stop'"}, "return_value": "'stop'"}, {"func_args": {"nodeid": "'test_api_response'"}, "return_value": "'api_response'"}, {"func_args": {"nodeid": "'test_client_disconnect'"}, "return_value": "'client_disconnect'"}, {"func_args": {"nodeid": "'test_command_not_found'"}, "return_value": "'command_not_found'"}, {"func_args": {"nodeid": "'test_connect'"}, "return_value": "'connect'"}, {"func_args": {"nodeid": "'test_connect_wrong_password'"}, "return_value": "'connect_wrong_password'"}, {"func_args": {"nodeid": "'test_custom_event'"}, "return_value": "'custom_event'"}, {"func_args": {"nodeid": "'test_event'"}, "return_value": "'event'"}, {"func_args": {"nodeid": "'test_event_socket_data'"}, "return_value": "'event_socket_data'"}, {"func_args": {"nodeid": "'test_event_with_multiline_channel_variables_content'"}, "return_value": "'event_with_multiline_channel_variables_content'"}, {"func_args": {"nodeid": "'test_event_without_handler'"}, "return_value": "'event_without_handler'"}, {"func_args": {"nodeid": "'test_register_a_registered_handle'"}, "return_value": "'register_a_registered_handle'"}, {"func_args": {"nodeid": "'test_register_unregister_handle'"}, "return_value": "'register_unregister_handle'"}, {"func_args": {"nodeid": "'test_unregister_a_not_registered_handle'"}, "return_value": "'unregister_a_not_registered_handle'"}, {"func_args": {"nodeid": "'test_z_server_disconnect'"}, "return_value": "'z_server_disconnect'"}, {"func_args": {"nodeid": "'test_outbound_connected_is_updated_during_on_disconnected_event'"}, "return_value": "'outbound_connected_is_updated_during_on_disconnected_event'"}, {"func_args": {"nodeid": "'test_outbound_connected_is_updated_during_on_hangup_event'"}, "return_value": "'outbound_connected_is_updated_during_on_hangup_event'"}, {"func_args": {"nodeid": "'test_context_manager'"}, "return_value": "'context_manager'"}, {"func_args": {"nodeid": "'test_decorator'"}, "return_value": "'decorator'"}, {"func_args": {"nodeid": "'test_raise_value_error_while_the_call_is_active'"}, "return_value": "'raise_value_error_while_the_call_is_active'"}, {"func_args": {"nodeid": "'test_skip_code_execution_if_the_outbound_session_is_disconnected'"}, "return_value": "'skip_code_execution_if_the_outbound_session_is_disconnected'"}], "text": "def _remove_test_prefix(nodeid):\n    return re.sub(\"^test_+\", \"\", nodeid)"}, "prettify_test": {"line": 111, "args": [{"func_args": {"string": "'test_handle_event_disconnect_with_linger'"}, "return_value": "'Handle event disconnect with linger'"}, {"func_args": {"string": "'test_handle_event_rude_rejection'"}, "return_value": "'Handle event rude rejection'"}, {"func_args": {"string": "'test_handle_event_with_packet_loss'"}, "return_value": "'Handle event with packet loss'"}, {"func_args": {"string": "'test_private_safe_exec_handler'"}, "return_value": "'Private safe exec handler'"}, {"func_args": {"string": "'test_process_events_quick_sleep_for_falsy_events_queue'"}, "return_value": "'Process events quick sleep for falsy events queue'"}, {"func_args": {"string": "'test_process_events_with_custom_name'"}, "return_value": "'Process events with custom name'"}, {"func_args": {"string": "'test_process_events_with_log_type'"}, "return_value": "'Process events with log type'"}, {"func_args": {"string": "'test_process_events_with_no_handlers_will_rely_on_generic'"}, "return_value": "'Process events with no handlers will rely on generic'"}, {"func_args": {"string": "'test_process_events_with_post_handler'"}, "return_value": "'Process events with post handler'"}, {"func_args": {"string": "'test_process_events_with_pre_handler'"}, "return_value": "'Process events with pre handler'"}, {"func_args": {"string": "'test_receive_events_io_error_handling'"}, "return_value": "'Receive events io error handling'"}, {"func_args": {"string": "'test_receive_events_without_data_but_connected'"}, "return_value": "'Receive events without data but connected'"}, {"func_args": {"string": "'test_stop'"}, "return_value": "'Stop'"}, {"func_args": {"string": "'test_api_response'"}, "return_value": "'Api response'"}, {"func_args": {"string": "'test_client_disconnect'"}, "return_value": "'Client disconnect'"}, {"func_args": {"string": "'test_command_not_found'"}, "return_value": "'Command not found'"}, {"func_args": {"string": "'test_connect'"}, "return_value": "'Connect'"}, {"func_args": {"string": "'test_connect_wrong_password'"}, "return_value": "'Connect wrong password'"}, {"func_args": {"string": "'test_custom_event'"}, "return_value": "'Custom event'"}, {"func_args": {"string": "'test_event'"}, "return_value": "'Event'"}, {"func_args": {"string": "'test_event_socket_data'"}, "return_value": "'Event socket data'"}, {"func_args": {"string": "'test_event_with_multiline_channel_variables_content'"}, "return_value": "'Event with multiline channel variables content'"}, {"func_args": {"string": "'test_event_without_handler'"}, "return_value": "'Event without handler'"}, {"func_args": {"string": "'test_register_a_registered_handle'"}, "return_value": "'Register a registered handle'"}, {"func_args": {"string": "'test_register_unregister_handle'"}, "return_value": "'Register unregister handle'"}, {"func_args": {"string": "'test_unregister_a_not_registered_handle'"}, "return_value": "'Unregister a not registered handle'"}, {"func_args": {"string": "'test_z_server_disconnect'"}, "return_value": "'Z server disconnect'"}, {"func_args": {"string": "'test_outbound_connected_is_updated_during_on_disconnected_event'"}, "return_value": "'Outbound connected is updated during on disconnected event'"}, {"func_args": {"string": "'test_outbound_connected_is_updated_during_on_hangup_event'"}, "return_value": "'Outbound connected is updated during on hangup event'"}, {"func_args": {"string": "'test_context_manager'"}, "return_value": "'Context manager'"}, {"func_args": {"string": "'test_decorator'"}, "return_value": "'Decorator'"}, {"func_args": {"string": "'test_raise_value_error_while_the_call_is_active'"}, "return_value": "'Raise value error while the call is active'"}, {"func_args": {"string": "'test_skip_code_execution_if_the_outbound_session_is_disconnected'"}, "return_value": "'Skip code execution if the outbound session is disconnected'"}], "text": "def prettify_test(string):\n    return prettify(_remove_test_prefix(string))"}, "_get_test_name": {"line": 179, "args": [{"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_disconnect_with_linger'"}, "return_value": "'Handle event disconnect with linger'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_rude_rejection'"}, "return_value": "'Handle event rude rejection'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_handle_event_with_packet_loss'"}, "return_value": "'Handle event with packet loss'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_private_safe_exec_handler'"}, "return_value": "'Private safe exec handler'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_quick_sleep_for_falsy_events_queue'"}, "return_value": "'Process events quick sleep for falsy events queue'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_custom_name'"}, "return_value": "'Process events with custom name'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_log_type'"}, "return_value": "'Process events with log type'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_no_handlers_will_rely_on_generic'"}, "return_value": "'Process events with no handlers will rely on generic'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_post_handler'"}, "return_value": "'Process events with post handler'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_process_events_with_pre_handler'"}, "return_value": "'Process events with pre handler'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_receive_events_io_error_handling'"}, "return_value": "'Receive events io error handling'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_receive_events_without_data_but_connected'"}, "return_value": "'Receive events without data but connected'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::ESLProtocolTest::test_stop'"}, "return_value": "'Stop'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_api_response'"}, "return_value": "'Api response'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_client_disconnect'"}, "return_value": "'Client disconnect'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_command_not_found'"}, "return_value": "'Command not found'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_connect'"}, "return_value": "'Connect'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_connect_wrong_password'"}, "return_value": "'Connect wrong password'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_custom_event'"}, "return_value": "'Custom event'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event'"}, "return_value": "'Event'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_socket_data'"}, "return_value": "'Event socket data'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_with_multiline_channel_variables_content'"}, "return_value": "'Event with multiline channel variables content'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_event_without_handler'"}, "return_value": "'Event without handler'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_register_a_registered_handle'"}, "return_value": "'Register a registered handle'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_register_unregister_handle'"}, "return_value": "'Register unregister handle'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_unregister_a_not_registered_handle'"}, "return_value": "'Unregister a not registered handle'"}, {"func_args": {"nodeid": "'tests/test_lib_esl.py::TestInboundESL::test_z_server_disconnect'"}, "return_value": "'Z server disconnect'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_disconnected_event'"}, "return_value": "'Outbound connected is updated during on disconnected event'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestOutboundSession::test_outbound_connected_is_updated_during_on_hangup_event'"}, "return_value": "'Outbound connected is updated during on hangup event'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_context_manager'"}, "return_value": "'Context manager'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_decorator'"}, "return_value": "'Decorator'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_raise_value_error_while_the_call_is_active'"}, "return_value": "'Raise value error while the call is active'"}, {"func_args": {"nodeid": "'tests/test_outbound_session.py::TestWhileConnectedMethod::test_skip_code_execution_if_the_outbound_session_is_disconnected'"}, "return_value": "'Skip code execution if the outbound session is disconnected'"}], "text": "def _get_test_name(nodeid):\n    test_name = prettify_test(_remove_module_name(nodeid))\n    if test_name[:1] == ' ':\n        test_name_parts = test_name.split('  ')\n        if len(test_name_parts) == 1:\n            return test_name.strip().capitalize()\n        return 'The ({0}) {1}'.format(test_name_parts[0][1:].replace(' ', '_'), test_name_parts[1])\n    return test_name"}, "validate_anything": {"line": 108, "args": [{"func_args": {"value": "None"}, "return_value": "None"}, {"func_args": {"value": "True"}, "return_value": "True"}], "text": "def validate_anything(value):\n    return value"}, "validate_bool": {"line": 90, "args": [{"func_args": {"value": "True"}, "return_value": "True"}], "text": "def validate_bool(value):\n    \"\"\"\n    This is a boolean value.\n\n    In the environment variable, it may be given as ``1``, ``true``,\n    ``on`` or ``yes`` for `True`, or ``0``, ``false``, ``off``, or\n    ``no`` for `False`.\n    \"\"\"\n    if isinstance(value, string_types):\n        value = value.lower().strip()\n        if value in ('1', 'true', 'on', 'yes'):\n            value = True\n        elif value in ('0', 'false', 'off', 'no') or not value:\n            value = False\n        else:\n            raise ValueError(\"Invalid boolean string: %r\" % (value,))\n    return bool(value)"}, "_is_magic": {"line": 273, "args": [{"func_args": {"name": "'makefile'"}, "return_value": "False"}, {"func_args": {"name": "'makefile'"}, "return_value": "False"}, {"func_args": {"name": "'makefile'"}, "return_value": "False"}, {"func_args": {"name": "'makefile'"}, "return_value": "False"}, {"func_args": {"name": "'makefile'"}, "return_value": "False"}, {"func_args": {"name": "'makefile'"}, "return_value": "False"}], "text": "def _is_magic(name):\n    return '__%s__' % name[2:-2] == name"}}