{"_args_converter": {"line": 816, "args": [{"func_args": {"args": "()"}, "return_value": "()"}], "text": "def _args_converter(args: Iterable[str]) -> Tuple[str, ...]:\n    return tuple(args)"}, "_get_plugin_specs_as_list": {"line": 715, "args": [{"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "None"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}], "text": "def _get_plugin_specs_as_list(\n    specs: Union[None, types.ModuleType, str, Sequence[str]]\n) -> List[str]:\n    \"\"\"Parse a plugins specification into a list of plugin names.\"\"\"\n    # None means empty.\n    if specs is None:\n        return []\n    # Workaround for #3899 - a submodule which happens to be called \"pytest_plugins\".\n    if isinstance(specs, types.ModuleType):\n        return []\n    # Comma-separated list.\n    if isinstance(specs, str):\n        return specs.split(\",\") if specs else []\n    # Direct specification.\n    if isinstance(specs, collections.abc.Sequence):\n        return list(specs)\n    raise UsageError(\n        \"Plugins may be specified as a sequence or a ','-separated string of plugin names. Got: %r\"\n        % specs\n    )"}, "_assertion_supported": {"line": 1511, "args": [{"func_args": {}, "return_value": "True"}], "text": "def _assertion_supported() -> bool:\n    try:\n        assert False\n    except AssertionError:\n        return True\n    else:\n        return False"}, "callbinrepr": {"line": 125, "args": [{"func_args": {"op": "'=='", "left": "b'No such file as -m\\n'", "right": "b''"}, "return_value": "\"b'No such file as -m\\\\n' == b''\\n~Full diff:\\n~- b''\\n~+ b'No such file as -m\\\\n'\""}], "text": "def callbinrepr(op, left: object, right: object) -> Optional[str]:\n        \"\"\"Call the pytest_assertrepr_compare hook and prepare the result.\n\n        This uses the first result from the hook and then ensures the\n        following:\n        * Overly verbose explanations are truncated unless configured otherwise\n          (eg. if running in verbose mode).\n        * Embedded newlines are escaped to help util.format_explanation()\n          later.\n        * If the rewrite mode is used embedded %-characters are replaced\n          to protect later % formatting.\n\n        The result can be formatted by util.format_explanation() for\n        pretty printing.\n        \"\"\"\n        hook_result = ihook.pytest_assertrepr_compare(\n            config=item.config, op=op, left=left, right=right\n        )\n        for new_expl in hook_result:\n            if new_expl:\n                new_expl = truncate.truncate_if_required(new_expl, item)\n                new_expl = [line.replace(\"\\n\", \"\\\\n\") for line in new_expl]\n                res = \"\\n~\".join(new_expl)\n                if item.config.getvalue(\"assertmode\") == \"rewrite\":\n                    res = res.replace(\"%\", \"%%\")\n                return res\n        return None"}, "validate_basetemp": {"line": 227, "args": [{"func_args": {"path": "'.pytest'"}, "return_value": "'.pytest'"}, {"func_args": {"path": "'.pytest'"}, "return_value": "'.pytest'"}, {"func_args": {"path": "'.pytest'"}, "return_value": "'.pytest'"}, {"func_args": {"path": "'.pytest'"}, "return_value": "'.pytest'"}, {"func_args": {"path": "'.pytest'"}, "return_value": "'.pytest'"}], "text": "def validate_basetemp(path: str) -> str:\n    # GH 7119\n    msg = \"basetemp must not be empty, the current working directory or any parent directory of it\"\n\n    # empty path\n    if not path:\n        raise argparse.ArgumentTypeError(msg)\n\n    def is_ancestor(base: Path, query: Path) -> bool:\n        \"\"\"Return whether query is an ancestor of base.\"\"\"\n        if base == query:\n            return True\n        for parent in base.parents:\n            if parent == query:\n                return True\n        return False\n\n    # check if path is an ancestor of cwd\n    if is_ancestor(Path.cwd(), Path(path).absolute()):\n        raise argparse.ArgumentTypeError(msg)\n\n    # check symlinks for ancestors\n    if is_ancestor(Path.cwd().resolve(), Path(path).resolve()):\n        raise argparse.ArgumentTypeError(msg)\n\n    return path"}, "scope2index": {"line": 803, "args": [{"func_args": {"scope": "'session'", "descr": "\"Fixture 'pytestconfig'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'capfd'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'capfdbinary'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'capsys'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'capsysbinary'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'tmp_path'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'session'", "descr": "\"Fixture 'tmp_path_factory'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'tmpdir'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'session'", "descr": "\"Fixture 'tmpdir_factory'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'monkeypatch'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'recwarn'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'record_property'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'session'", "descr": "\"Fixture 'record_testsuite_property'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'record_xml_attribute'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'session'", "descr": "\"Fixture 'doctest_namespace'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'cache'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'caplog'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'cov'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'no_cover'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'check_fixture'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'build_path'\"", "where": "'tests'"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'root_path'\"", "where": "'tests'"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'site'\"", "where": "'tests'"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'template_path'\"", "where": "'tests'"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "'parametrize() call in test_srcpath'", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'get_direct_param_fixture_func'\"", "where": "''"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'get_direct_param_fixture_func'\"", "where": "''"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "'parametrize() call in test_outpath'", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'get_direct_param_fixture_func'\"", "where": "''"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'get_direct_param_fixture_func'\"", "where": "''"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "'parametrize() call in test_watch'", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'get_direct_param_fixture_func'\"", "where": "''"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'get_direct_param_fixture_func'\"", "where": "''"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "'parametrize() call in test_entrypoints_no_args'", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'get_direct_param_fixture_func'\"", "where": "''"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'example_name'\"", "where": "'tests/test_examples.py'"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "'parametrize() call in test_example'", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'reloader'\"", "where": "'tests/test_reloader.py'"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "'parametrize() call in test_is_ignored'", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'get_direct_param_fixture_func'\"", "where": "''"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'get_direct_param_fixture_func'\"", "where": "''"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "'parametrize() call in test_is_partial'", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'get_direct_param_fixture_func'\"", "where": "''"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'get_direct_param_fixture_func'\"", "where": "''"}, "return_value": "4"}], "text": "def scope2index(scope: str, descr: str, where: Optional[str] = None) -> int:\n    \"\"\"Look up the index of ``scope`` and raise a descriptive value error\n    if not defined.\"\"\"\n    strscopes: Sequence[str] = scopes\n    try:\n        return strscopes.index(scope)\n    except ValueError:\n        fail(\n            \"{} {}got an unexpected scope value '{}'\".format(\n                descr, f\"from {where} \" if where else \"\", scope\n            ),\n            pytrace=False,\n        )"}, "sort_by_scope": {"line": 1539, "args": [{"func_args": {"arg_name": "'srcpath'"}, "return_value": "4"}, {"func_args": {"arg_name": "'expected'"}, "return_value": "4"}, {"func_args": {"arg_name": "'outpath'"}, "return_value": "4"}, {"func_args": {"arg_name": "'expected'"}, "return_value": "4"}, {"func_args": {"arg_name": "'command'"}, "return_value": "4"}, {"func_args": {"arg_name": "'expected'"}, "return_value": "4"}, {"func_args": {"arg_name": "'command'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'example_name'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path_factory'"}, "return_value": "0"}, {"func_args": {"arg_name": "'reloader'"}, "return_value": "4"}, {"func_args": {"arg_name": "'root_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'template_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'site'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'build_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path_factory'"}, "return_value": "0"}, {"func_args": {"arg_name": "'monkeypatch'"}, "return_value": "4"}, {"func_args": {"arg_name": "'reloader'"}, "return_value": "4"}, {"func_args": {"arg_name": "'template_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'site'"}, "return_value": "4"}, {"func_args": {"arg_name": "'root_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'build_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path_factory'"}, "return_value": "0"}, {"func_args": {"arg_name": "'monkeypatch'"}, "return_value": "4"}, {"func_args": {"arg_name": "'reloader'"}, "return_value": "4"}, {"func_args": {"arg_name": "'template_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'site'"}, "return_value": "4"}, {"func_args": {"arg_name": "'root_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'build_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path_factory'"}, "return_value": "0"}, {"func_args": {"arg_name": "'site'"}, "return_value": "4"}, {"func_args": {"arg_name": "'template_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'build_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'root_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path_factory'"}, "return_value": "0"}, {"func_args": {"arg_name": "'site'"}, "return_value": "4"}, {"func_args": {"arg_name": "'template_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'build_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'root_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path_factory'"}, "return_value": "0"}, {"func_args": {"arg_name": "'site'"}, "return_value": "4"}, {"func_args": {"arg_name": "'template_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'build_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'root_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path_factory'"}, "return_value": "0"}, {"func_args": {"arg_name": "'site'"}, "return_value": "4"}, {"func_args": {"arg_name": "'template_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'build_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'root_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path_factory'"}, "return_value": "0"}, {"func_args": {"arg_name": "'monkeypatch'"}, "return_value": "4"}, {"func_args": {"arg_name": "'site'"}, "return_value": "4"}, {"func_args": {"arg_name": "'template_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'build_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'root_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path_factory'"}, "return_value": "0"}, {"func_args": {"arg_name": "'site'"}, "return_value": "4"}, {"func_args": {"arg_name": "'build_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'template_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'root_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path_factory'"}, "return_value": "0"}, {"func_args": {"arg_name": "'site'"}, "return_value": "4"}, {"func_args": {"arg_name": "'build_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'template_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'root_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path_factory'"}, "return_value": "0"}, {"func_args": {"arg_name": "'template_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'build_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'root_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path_factory'"}, "return_value": "0"}, {"func_args": {"arg_name": "'site'"}, "return_value": "4"}, {"func_args": {"arg_name": "'build_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'template_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'root_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path_factory'"}, "return_value": "0"}, {"func_args": {"arg_name": "'monkeypatch'"}, "return_value": "4"}, {"func_args": {"arg_name": "'site'"}, "return_value": "4"}, {"func_args": {"arg_name": "'template_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'build_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'root_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path_factory'"}, "return_value": "0"}, {"func_args": {"arg_name": "'monkeypatch'"}, "return_value": "4"}, {"func_args": {"arg_name": "'site'"}, "return_value": "4"}, {"func_args": {"arg_name": "'template_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'build_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'root_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path_factory'"}, "return_value": "0"}, {"func_args": {"arg_name": "'site'"}, "return_value": "4"}, {"func_args": {"arg_name": "'name'"}, "return_value": "4"}, {"func_args": {"arg_name": "'expected'"}, "return_value": "4"}, {"func_args": {"arg_name": "'template_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'build_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'root_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path_factory'"}, "return_value": "0"}, {"func_args": {"arg_name": "'site'"}, "return_value": "4"}, {"func_args": {"arg_name": "'name'"}, "return_value": "4"}, {"func_args": {"arg_name": "'expected'"}, "return_value": "4"}, {"func_args": {"arg_name": "'template_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'build_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'root_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path_factory'"}, "return_value": "0"}, {"func_args": {"arg_name": "'root_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path_factory'"}, "return_value": "0"}, {"func_args": {"arg_name": "'root_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path_factory'"}, "return_value": "0"}, {"func_args": {"arg_name": "'root_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path_factory'"}, "return_value": "0"}, {"func_args": {"arg_name": "'root_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path_factory'"}, "return_value": "0"}], "text": "def sort_by_scope(arg_name: str) -> int:\n            try:\n                fixturedefs = arg2fixturedefs[arg_name]\n            except KeyError:\n                return scopes.index(\"function\")\n            else:\n                return fixturedefs[-1].scopenum"}, "scopemismatch": {"line": 799, "args": [{"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}], "text": "def scopemismatch(currentscope: \"_Scope\", newscope: \"_Scope\") -> bool:\n    return scopes.index(newscope) > scopes.index(currentscope)"}, "mkrel": {"line": 859, "args": [{"func_args": {"nodeid": "'tests/test_cli.py::test_srcpath[None-/cwd/templates]'"}, "return_value": "'tests/test_cli.py::test_srcpath[None-/cwd/templates]'"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_srcpath[None-/cwd/templates]'"}, "return_value": "'tests/test_cli.py::test_srcpath[None-/cwd/templates]'"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_srcpath[.-/cwd]'"}, "return_value": "'tests/test_cli.py::test_srcpath[.-/cwd]'"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_srcpath[.-/cwd]'"}, "return_value": "'tests/test_cli.py::test_srcpath[.-/cwd]'"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_srcpath[src-/cwd/src]'"}, "return_value": "'tests/test_cli.py::test_srcpath[src-/cwd/src]'"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_srcpath[src-/cwd/src]'"}, "return_value": "'tests/test_cli.py::test_srcpath[src-/cwd/src]'"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_srcpath[./src-/cwd/src]'"}, "return_value": "'tests/test_cli.py::test_srcpath[./src-/cwd/src]'"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_srcpath[./src-/cwd/src]'"}, "return_value": "'tests/test_cli.py::test_srcpath[./src-/cwd/src]'"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_srcpath[/foo/src-/foo/src]'"}, "return_value": "'tests/test_cli.py::test_srcpath[/foo/src-/foo/src]'"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_srcpath[/foo/src-/foo/src]'"}, "return_value": "'tests/test_cli.py::test_srcpath[/foo/src-/foo/src]'"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_outpath[None-/cwd]'"}, "return_value": "'tests/test_cli.py::test_outpath[None-/cwd]'"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_outpath[None-/cwd]'"}, "return_value": "'tests/test_cli.py::test_outpath[None-/cwd]'"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_outpath[.-/cwd]'"}, "return_value": "'tests/test_cli.py::test_outpath[.-/cwd]'"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_outpath[.-/cwd]'"}, "return_value": "'tests/test_cli.py::test_outpath[.-/cwd]'"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_outpath[src-/cwd/src]'"}, "return_value": "'tests/test_cli.py::test_outpath[src-/cwd/src]'"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_outpath[src-/cwd/src]'"}, "return_value": "'tests/test_cli.py::test_outpath[src-/cwd/src]'"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_outpath[./src-/cwd/src]'"}, "return_value": "'tests/test_cli.py::test_outpath[./src-/cwd/src]'"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_outpath[./src-/cwd/src]'"}, "return_value": "'tests/test_cli.py::test_outpath[./src-/cwd/src]'"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_outpath[/foo/src-/foo/src]'"}, "return_value": "'tests/test_cli.py::test_outpath[/foo/src-/foo/src]'"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_outpath[/foo/src-/foo/src]'"}, "return_value": "'tests/test_cli.py::test_outpath[/foo/src-/foo/src]'"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_log'"}, "return_value": "'tests/test_cli.py::test_log'"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_log'"}, "return_value": "'tests/test_cli.py::test_log'"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_watch[build-False]'"}, "return_value": "'tests/test_cli.py::test_watch[build-False]'"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_watch[build-False]'"}, "return_value": "'tests/test_cli.py::test_watch[build-False]'"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_watch[watch-True]'"}, "return_value": "'tests/test_cli.py::test_watch[watch-True]'"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_watch[watch-True]'"}, "return_value": "'tests/test_cli.py::test_watch[watch-True]'"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_nonexistent_srcpath'"}, "return_value": "'tests/test_cli.py::test_nonexistent_srcpath'"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_nonexistent_srcpath'"}, "return_value": "'tests/test_cli.py::test_nonexistent_srcpath'"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_entrypoints_no_args[command0]'"}, "return_value": "'tests/test_cli.py::test_entrypoints_no_args[command0]'"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_entrypoints_no_args[command0]'"}, "return_value": "'tests/test_cli.py::test_entrypoints_no_args[command0]'"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_entrypoints_no_args[command1]'"}, "return_value": "'tests/test_cli.py::test_entrypoints_no_args[command1]'"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_entrypoints_no_args[command1]'"}, "return_value": "'tests/test_cli.py::test_entrypoints_no_args[command1]'"}, {"func_args": {"nodeid": "'tests/test_examples.py::test_example[markdown]'"}, "return_value": "'tests/test_examples.py::test_example[markdown]'"}, {"func_args": {"nodeid": "'tests/test_examples.py::test_example[markdown]'"}, "return_value": "'tests/test_examples.py::test_example[markdown]'"}, {"func_args": {"nodeid": "'tests/test_examples.py::test_example[minimal-python]'"}, "return_value": "'tests/test_examples.py::test_example[minimal-python]'"}, {"func_args": {"nodeid": "'tests/test_examples.py::test_example[minimal-python]'"}, "return_value": "'tests/test_examples.py::test_example[minimal-python]'"}, {"func_args": {"nodeid": "'tests/test_examples.py::test_example[simple]'"}, "return_value": "'tests/test_examples.py::test_example[simple]'"}, {"func_args": {"nodeid": "'tests/test_examples.py::test_example[simple]'"}, "return_value": "'tests/test_examples.py::test_example[simple]'"}, {"func_args": {"nodeid": "'tests/test_meta.py::test_versions_match'"}, "return_value": "'tests/test_meta.py::test_versions_match'"}, {"func_args": {"nodeid": "'tests/test_meta.py::test_versions_match'"}, "return_value": "'tests/test_meta.py::test_versions_match'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_should_handle'"}, "return_value": "'tests/test_reloader.py::test_should_handle'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_should_handle'"}, "return_value": "'tests/test_reloader.py::test_should_handle'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler'"}, "return_value": "'tests/test_reloader.py::test_event_handler'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler'"}, "return_value": "'tests/test_reloader.py::test_event_handler'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler_static'"}, "return_value": "'tests/test_reloader.py::test_event_handler_static'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler_static'"}, "return_value": "'tests/test_reloader.py::test_event_handler_static'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_template_names'"}, "return_value": "'tests/test_staticjinja.py::test_template_names'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_template_names'"}, "return_value": "'tests/test_staticjinja.py::test_template_names'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_templates'"}, "return_value": "'tests/test_staticjinja.py::test_templates'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_templates'"}, "return_value": "'tests/test_staticjinja.py::test_templates'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_context'"}, "return_value": "'tests/test_staticjinja.py::test_get_context'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_context'"}, "return_value": "'tests/test_staticjinja.py::test_get_context'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_rule'"}, "return_value": "'tests/test_staticjinja.py::test_get_rule'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_rule'"}, "return_value": "'tests/test_staticjinja.py::test_get_rule'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_dependents'"}, "return_value": "'tests/test_staticjinja.py::test_get_dependents'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_dependents'"}, "return_value": "'tests/test_staticjinja.py::test_get_dependents'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template'"}, "return_value": "'tests/test_staticjinja.py::test_render_template'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template'"}, "return_value": "'tests/test_staticjinja.py::test_render_template'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_nested_template'"}, "return_value": "'tests/test_staticjinja.py::test_render_nested_template'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_nested_template'"}, "return_value": "'tests/test_staticjinja.py::test_render_nested_template'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template_with_env_globals'"}, "return_value": "'tests/test_staticjinja.py::test_render_template_with_env_globals'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template_with_env_globals'"}, "return_value": "'tests/test_staticjinja.py::test_render_template_with_env_globals'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_templates'"}, "return_value": "'tests/test_staticjinja.py::test_render_templates'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_templates'"}, "return_value": "'tests/test_staticjinja.py::test_render_templates'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_build'"}, "return_value": "'tests/test_staticjinja.py::test_build'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_build'"}, "return_value": "'tests/test_staticjinja.py::test_build'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_with_reloader'"}, "return_value": "'tests/test_staticjinja.py::test_with_reloader'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_with_reloader'"}, "return_value": "'tests/test_staticjinja.py::test_with_reloader'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored[index.html-False]'"}, "return_value": "'tests/test_staticjinja.py::test_is_ignored[index.html-False]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored[index.html-False]'"}, "return_value": "'tests/test_staticjinja.py::test_is_ignored[index.html-False]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored[.index.html-True]'"}, "return_value": "'tests/test_staticjinja.py::test_is_ignored[.index.html-True]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored[.index.html-True]'"}, "return_value": "'tests/test_staticjinja.py::test_is_ignored[.index.html-True]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored[_index.html-False]'"}, "return_value": "'tests/test_staticjinja.py::test_is_ignored[_index.html-False]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored[_index.html-False]'"}, "return_value": "'tests/test_staticjinja.py::test_is_ignored[_index.html-False]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored[normal/index.html-False]'"}, "return_value": "'tests/test_staticjinja.py::test_is_ignored[normal/index.html-False]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored[normal/index.html-False]'"}, "return_value": "'tests/test_staticjinja.py::test_is_ignored[normal/index.html-False]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored[.dotted/index.html-True]'"}, "return_value": "'tests/test_staticjinja.py::test_is_ignored[.dotted/index.html-True]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored[.dotted/index.html-True]'"}, "return_value": "'tests/test_staticjinja.py::test_is_ignored[.dotted/index.html-True]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored[normal/.index.html-True]'"}, "return_value": "'tests/test_staticjinja.py::test_is_ignored[normal/.index.html-True]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored[normal/.index.html-True]'"}, "return_value": "'tests/test_staticjinja.py::test_is_ignored[normal/.index.html-True]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored[_undered/index.html-False]'"}, "return_value": "'tests/test_staticjinja.py::test_is_ignored[_undered/index.html-False]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored[_undered/index.html-False]'"}, "return_value": "'tests/test_staticjinja.py::test_is_ignored[_undered/index.html-False]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored[undered/_index.html-False]'"}, "return_value": "'tests/test_staticjinja.py::test_is_ignored[undered/_index.html-False]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored[undered/_index.html-False]'"}, "return_value": "'tests/test_staticjinja.py::test_is_ignored[undered/_index.html-False]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored[normal/normal2/index.html-False]'"}, "return_value": "'tests/test_staticjinja.py::test_is_ignored[normal/normal2/index.html-False]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored[normal/normal2/index.html-False]'"}, "return_value": "'tests/test_staticjinja.py::test_is_ignored[normal/normal2/index.html-False]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored[.dotted/normal/index.html-True]'"}, "return_value": "'tests/test_staticjinja.py::test_is_ignored[.dotted/normal/index.html-True]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored[.dotted/normal/index.html-True]'"}, "return_value": "'tests/test_staticjinja.py::test_is_ignored[.dotted/normal/index.html-True]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored[normal/.dotted/index.html-True]'"}, "return_value": "'tests/test_staticjinja.py::test_is_ignored[normal/.dotted/index.html-True]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored[normal/.dotted/index.html-True]'"}, "return_value": "'tests/test_staticjinja.py::test_is_ignored[normal/.dotted/index.html-True]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored[normal/normal2/.index.html-True]'"}, "return_value": "'tests/test_staticjinja.py::test_is_ignored[normal/normal2/.index.html-True]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored[normal/normal2/.index.html-True]'"}, "return_value": "'tests/test_staticjinja.py::test_is_ignored[normal/normal2/.index.html-True]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored[_undered/normal/index.html-False]'"}, "return_value": "'tests/test_staticjinja.py::test_is_ignored[_undered/normal/index.html-False]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored[_undered/normal/index.html-False]'"}, "return_value": "'tests/test_staticjinja.py::test_is_ignored[_undered/normal/index.html-False]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored[normal/_undered/index.html-False]'"}, "return_value": "'tests/test_staticjinja.py::test_is_ignored[normal/_undered/index.html-False]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored[normal/_undered/index.html-False]'"}, "return_value": "'tests/test_staticjinja.py::test_is_ignored[normal/_undered/index.html-False]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored[normal/normal2/_index.html-False]'"}, "return_value": "'tests/test_staticjinja.py::test_is_ignored[normal/normal2/_index.html-False]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored[normal/normal2/_index.html-False]'"}, "return_value": "'tests/test_staticjinja.py::test_is_ignored[normal/normal2/_index.html-False]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial[index.html-False]'"}, "return_value": "'tests/test_staticjinja.py::test_is_partial[index.html-False]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial[index.html-False]'"}, "return_value": "'tests/test_staticjinja.py::test_is_partial[index.html-False]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial[.index.html-False]'"}, "return_value": "'tests/test_staticjinja.py::test_is_partial[.index.html-False]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial[.index.html-False]'"}, "return_value": "'tests/test_staticjinja.py::test_is_partial[.index.html-False]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial[_index.html-True]'"}, "return_value": "'tests/test_staticjinja.py::test_is_partial[_index.html-True]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial[_index.html-True]'"}, "return_value": "'tests/test_staticjinja.py::test_is_partial[_index.html-True]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial[normal/index.html-False]'"}, "return_value": "'tests/test_staticjinja.py::test_is_partial[normal/index.html-False]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial[normal/index.html-False]'"}, "return_value": "'tests/test_staticjinja.py::test_is_partial[normal/index.html-False]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial[.dotted/index.html-False]'"}, "return_value": "'tests/test_staticjinja.py::test_is_partial[.dotted/index.html-False]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial[.dotted/index.html-False]'"}, "return_value": "'tests/test_staticjinja.py::test_is_partial[.dotted/index.html-False]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial[normal/.index.html-False]'"}, "return_value": "'tests/test_staticjinja.py::test_is_partial[normal/.index.html-False]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial[normal/.index.html-False]'"}, "return_value": "'tests/test_staticjinja.py::test_is_partial[normal/.index.html-False]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial[_undered/index.html-True]'"}, "return_value": "'tests/test_staticjinja.py::test_is_partial[_undered/index.html-True]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial[_undered/index.html-True]'"}, "return_value": "'tests/test_staticjinja.py::test_is_partial[_undered/index.html-True]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial[undered/_index.html-True]'"}, "return_value": "'tests/test_staticjinja.py::test_is_partial[undered/_index.html-True]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial[undered/_index.html-True]'"}, "return_value": "'tests/test_staticjinja.py::test_is_partial[undered/_index.html-True]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial[normal/normal2/index.html-False]'"}, "return_value": "'tests/test_staticjinja.py::test_is_partial[normal/normal2/index.html-False]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial[normal/normal2/index.html-False]'"}, "return_value": "'tests/test_staticjinja.py::test_is_partial[normal/normal2/index.html-False]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial[.dotted/normal/index.html-False]'"}, "return_value": "'tests/test_staticjinja.py::test_is_partial[.dotted/normal/index.html-False]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial[.dotted/normal/index.html-False]'"}, "return_value": "'tests/test_staticjinja.py::test_is_partial[.dotted/normal/index.html-False]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial[normal/.dotted/index.html-False]'"}, "return_value": "'tests/test_staticjinja.py::test_is_partial[normal/.dotted/index.html-False]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial[normal/.dotted/index.html-False]'"}, "return_value": "'tests/test_staticjinja.py::test_is_partial[normal/.dotted/index.html-False]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial[normal/normal2/.index.html-False]'"}, "return_value": "'tests/test_staticjinja.py::test_is_partial[normal/normal2/.index.html-False]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial[normal/normal2/.index.html-False]'"}, "return_value": "'tests/test_staticjinja.py::test_is_partial[normal/normal2/.index.html-False]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial[_undered/normal/index.html-True]'"}, "return_value": "'tests/test_staticjinja.py::test_is_partial[_undered/normal/index.html-True]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial[_undered/normal/index.html-True]'"}, "return_value": "'tests/test_staticjinja.py::test_is_partial[_undered/normal/index.html-True]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial[normal/_undered/index.html-True]'"}, "return_value": "'tests/test_staticjinja.py::test_is_partial[normal/_undered/index.html-True]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial[normal/_undered/index.html-True]'"}, "return_value": "'tests/test_staticjinja.py::test_is_partial[normal/_undered/index.html-True]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial[normal/normal2/_index.html-True]'"}, "return_value": "'tests/test_staticjinja.py::test_is_partial[normal/normal2/_index.html-True]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial[normal/normal2/_index.html-True]'"}, "return_value": "'tests/test_staticjinja.py::test_is_partial[normal/normal2/_index.html-True]'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_absolute'"}, "return_value": "'tests/test_staticjinja.py::test_path_absolute'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_absolute'"}, "return_value": "'tests/test_staticjinja.py::test_path_absolute'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_relative_warning'"}, "return_value": "'tests/test_staticjinja.py::test_path_relative_warning'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_relative_warning'"}, "return_value": "'tests/test_staticjinja.py::test_path_relative_warning'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_relative_no_warning'"}, "return_value": "'tests/test_staticjinja.py::test_path_relative_no_warning'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_relative_no_warning'"}, "return_value": "'tests/test_staticjinja.py::test_path_relative_no_warning'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_followlinks'"}, "return_value": "'tests/test_staticjinja.py::test_followlinks'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_followlinks'"}, "return_value": "'tests/test_staticjinja.py::test_followlinks'"}], "text": "def mkrel(nodeid):\n            line = self.config.cwd_relative_nodeid(nodeid)\n            if domain and line.endswith(domain):\n                line = line[: -len(domain)]\n                values = domain.split(\"[\")\n                values[0] = values[0].replace(\".\", \"::\")  # don't replace '.' in params\n                line += \"[\".join(values)\n            return line"}, "_format_trimmed": {"line": 1262, "args": [{"func_args": {"format": "' - {}'", "msg": "\"AssertionError: assert b'No such file as -m\\\\n' == b''\\n  Full diff:\\n  - b''\\n  + b'No such file as -m\\\\n'\"", "available_width": "20"}, "return_value": "' - AssertionError...'"}], "text": "def _format_trimmed(format: str, msg: str, available_width: int) -> Optional[str]:\n    \"\"\"Format msg into format, ellipsizing it if doesn't fit in available_width.\n\n    Returns None if even the ellipsis can't fit.\n    \"\"\"\n    # Only use the first line.\n    i = msg.find(\"\\n\")\n    if i != -1:\n        msg = msg[:i]\n\n    ellipsis = \"...\"\n    format_width = wcswidth(format.format(\"\"))\n    if format_width + len(ellipsis) > available_width:\n        return None\n\n    if format_width + wcswidth(msg) > available_width:\n        available_width -= len(ellipsis)\n        msg = msg[:available_width]\n        while format_width + wcswidth(msg) > available_width:\n            msg = msg[:-1]\n        msg += ellipsis\n\n    return format.format(msg)"}, "pluralize": {"line": 1350, "args": [{"func_args": {"count": "1", "noun": "'failed'"}, "return_value": "(1, 'failed')"}, {"func_args": {"count": "67", "noun": "'passed'"}, "return_value": "(67, 'passed')"}], "text": "def pluralize(count: int, noun: str) -> Tuple[int, str]:\n    # No need to pluralize words such as `failed` or `passed`.\n    if noun not in [\"error\", \"warnings\", \"test\"]:\n        return count, noun\n\n    # The `warnings` key is plural. To avoid API breakage, we keep it that way but\n    # set it to singular here so we can determine plurality in the same way as we do\n    # for `error`.\n    noun = noun.replace(\"warnings\", \"warning\")\n\n    return count, noun + \"s\" if count != 1 else noun"}, "format_session_duration": {"line": 1377, "args": [{"func_args": {"seconds": "2.262122631072998"}, "return_value": "'2.26s'"}], "text": "def format_session_duration(seconds: float) -> str:\n    \"\"\"Format the given seconds in a human readable manner to show in the final summary.\"\"\"\n    if seconds < 60:\n        return f\"{seconds:.2f}s\"\n    else:\n        dt = datetime.timedelta(seconds=int(seconds))\n        return f\"{seconds:.2f}s ({dt})\""}, "_get_allow_unicode_flag": {"line": 681, "args": [{"func_args": {}, "return_value": "2048"}, {"func_args": {}, "return_value": "2048"}, {"func_args": {}, "return_value": "2048"}, {"func_args": {}, "return_value": "2048"}, {"func_args": {}, "return_value": "2048"}, {"func_args": {}, "return_value": "2048"}, {"func_args": {}, "return_value": "2048"}], "text": "def _get_allow_unicode_flag() -> int:\n    \"\"\"Register and return the ALLOW_UNICODE flag.\"\"\"\n    import doctest\n\n    return doctest.register_optionflag(\"ALLOW_UNICODE\")"}, "_get_allow_bytes_flag": {"line": 688, "args": [{"func_args": {}, "return_value": "4096"}, {"func_args": {}, "return_value": "4096"}, {"func_args": {}, "return_value": "4096"}, {"func_args": {}, "return_value": "4096"}, {"func_args": {}, "return_value": "4096"}, {"func_args": {}, "return_value": "4096"}, {"func_args": {}, "return_value": "4096"}], "text": "def _get_allow_bytes_flag() -> int:\n    \"\"\"Register and return the ALLOW_BYTES flag.\"\"\"\n    import doctest\n\n    return doctest.register_optionflag(\"ALLOW_BYTES\")"}, "_get_number_flag": {"line": 695, "args": [{"func_args": {}, "return_value": "8192"}, {"func_args": {}, "return_value": "8192"}, {"func_args": {}, "return_value": "8192"}, {"func_args": {}, "return_value": "8192"}, {"func_args": {}, "return_value": "8192"}, {"func_args": {}, "return_value": "8192"}, {"func_args": {}, "return_value": "8192"}], "text": "def _get_number_flag() -> int:\n    \"\"\"Register and return the NUMBER flag.\"\"\"\n    import doctest\n\n    return doctest.register_optionflag(\"NUMBER\")"}, "_get_flag_lookup": {"line": 374, "args": [{"func_args": {}, "return_value": "{'DONT_ACCEPT_TRUE_FOR_1': 1, 'DONT_ACCEPT_BLANKLINE': 2, 'NORMALIZE_WHITESPACE': 4, 'ELLIPSIS': 8, 'IGNORE_EXCEPTION_DETAIL': 32, 'COMPARISON_FLAGS': 63, 'ALLOW_UNICODE': 2048, 'ALLOW_BYTES': 4096, 'NUMBER': 8192}"}, {"func_args": {}, "return_value": "{'DONT_ACCEPT_TRUE_FOR_1': 1, 'DONT_ACCEPT_BLANKLINE': 2, 'NORMALIZE_WHITESPACE': 4, 'ELLIPSIS': 8, 'IGNORE_EXCEPTION_DETAIL': 32, 'COMPARISON_FLAGS': 63, 'ALLOW_UNICODE': 2048, 'ALLOW_BYTES': 4096, 'NUMBER': 8192}"}, {"func_args": {}, "return_value": "{'DONT_ACCEPT_TRUE_FOR_1': 1, 'DONT_ACCEPT_BLANKLINE': 2, 'NORMALIZE_WHITESPACE': 4, 'ELLIPSIS': 8, 'IGNORE_EXCEPTION_DETAIL': 32, 'COMPARISON_FLAGS': 63, 'ALLOW_UNICODE': 2048, 'ALLOW_BYTES': 4096, 'NUMBER': 8192}"}, {"func_args": {}, "return_value": "{'DONT_ACCEPT_TRUE_FOR_1': 1, 'DONT_ACCEPT_BLANKLINE': 2, 'NORMALIZE_WHITESPACE': 4, 'ELLIPSIS': 8, 'IGNORE_EXCEPTION_DETAIL': 32, 'COMPARISON_FLAGS': 63, 'ALLOW_UNICODE': 2048, 'ALLOW_BYTES': 4096, 'NUMBER': 8192}"}, {"func_args": {}, "return_value": "{'DONT_ACCEPT_TRUE_FOR_1': 1, 'DONT_ACCEPT_BLANKLINE': 2, 'NORMALIZE_WHITESPACE': 4, 'ELLIPSIS': 8, 'IGNORE_EXCEPTION_DETAIL': 32, 'COMPARISON_FLAGS': 63, 'ALLOW_UNICODE': 2048, 'ALLOW_BYTES': 4096, 'NUMBER': 8192}"}, {"func_args": {}, "return_value": "{'DONT_ACCEPT_TRUE_FOR_1': 1, 'DONT_ACCEPT_BLANKLINE': 2, 'NORMALIZE_WHITESPACE': 4, 'ELLIPSIS': 8, 'IGNORE_EXCEPTION_DETAIL': 32, 'COMPARISON_FLAGS': 63, 'ALLOW_UNICODE': 2048, 'ALLOW_BYTES': 4096, 'NUMBER': 8192}"}, {"func_args": {}, "return_value": "{'DONT_ACCEPT_TRUE_FOR_1': 1, 'DONT_ACCEPT_BLANKLINE': 2, 'NORMALIZE_WHITESPACE': 4, 'ELLIPSIS': 8, 'IGNORE_EXCEPTION_DETAIL': 32, 'COMPARISON_FLAGS': 63, 'ALLOW_UNICODE': 2048, 'ALLOW_BYTES': 4096, 'NUMBER': 8192}"}], "text": "def _get_flag_lookup() -> Dict[str, int]:\n    import doctest\n\n    return dict(\n        DONT_ACCEPT_TRUE_FOR_1=doctest.DONT_ACCEPT_TRUE_FOR_1,\n        DONT_ACCEPT_BLANKLINE=doctest.DONT_ACCEPT_BLANKLINE,\n        NORMALIZE_WHITESPACE=doctest.NORMALIZE_WHITESPACE,\n        ELLIPSIS=doctest.ELLIPSIS,\n        IGNORE_EXCEPTION_DETAIL=doctest.IGNORE_EXCEPTION_DETAIL,\n        COMPARISON_FLAGS=doctest.COMPARISON_FLAGS,\n        ALLOW_UNICODE=_get_allow_unicode_flag(),\n        ALLOW_BYTES=_get_allow_bytes_flag(),\n        NUMBER=_get_number_flag(),\n    )"}, "_get_auto_indent": {"line": 113, "args": [{"func_args": {"auto_indent_option": "None"}, "return_value": "0"}, {"func_args": {"auto_indent_option": "None"}, "return_value": "0"}]}, "_get_stderr_fileno": {"line": 68, "args": [{"func_args": {}, "return_value": "2"}, {"func_args": {}, "return_value": "2"}]}, "get_terminal_width": {"line": 15, "args": [{"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}], "text": "def get_terminal_width() -> int:\n    width, _ = shutil.get_terminal_size(fallback=(80, 24))\n\n    # The Windows get_terminal_size may be bogus, let's sanify a bit.\n    if width < 40:\n        width = 80\n\n    return width"}, "get_dirs_from_args": {"line": 134, "args": [{"func_args": {"args": "[]"}, "return_value": "[]"}], "text": "def get_dirs_from_args(args: Iterable[str]) -> List[Path]:\n    def is_option(x: str) -> bool:\n        return x.startswith(\"-\")\n\n    def get_file_part_from_node_id(x: str) -> str:\n        return x.split(\"::\")[0]\n\n    def get_dir_from_path(path: Path) -> Path:\n        if path.is_dir():\n            return path\n        return path.parent\n\n    def safe_exists(path: Path) -> bool:\n        # This can throw on paths that contain characters unrepresentable at the OS level,\n        # or with invalid syntax on Windows (https://bugs.python.org/issue35306)\n        try:\n            return path.exists()\n        except OSError:\n            return False\n\n    # These look like paths but may not exist\n    possible_paths = (\n        absolutepath(get_file_part_from_node_id(arg))\n        for arg in args\n        if not is_option(arg)\n    )\n\n    return [get_dir_from_path(path) for path in possible_paths if safe_exists(path)]"}, "_is_same": {"line": 558, "args": [{"func_args": {"f1": "'/usr/app/src/test_repos/staticjinja/tests/conftest.py'", "f2": "'/usr/app/src/test_repos/staticjinja/tests/conftest.py'"}, "return_value": "True"}, {"func_args": {"f1": "'/usr/app/src/test_repos/staticjinja/tests/test_cli.py'", "f2": "'/usr/app/src/test_repos/staticjinja/tests/test_cli.py'"}, "return_value": "True"}, {"func_args": {"f1": "'/usr/app/src/test_repos/staticjinja/tests/test_cli.py'", "f2": "'/usr/app/src/test_repos/staticjinja/tests/test_cli.py'"}, "return_value": "True"}, {"func_args": {"f1": "'/usr/app/src/test_repos/staticjinja/tests/test_examples.py'", "f2": "'/usr/app/src/test_repos/staticjinja/tests/test_examples.py'"}, "return_value": "True"}, {"func_args": {"f1": "'/usr/app/src/test_repos/staticjinja/tests/test_examples.py'", "f2": "'/usr/app/src/test_repos/staticjinja/tests/test_examples.py'"}, "return_value": "True"}, {"func_args": {"f1": "'/usr/app/src/test_repos/staticjinja/tests/test_meta.py'", "f2": "'/usr/app/src/test_repos/staticjinja/tests/test_meta.py'"}, "return_value": "True"}, {"func_args": {"f1": "'/usr/app/src/test_repos/staticjinja/tests/test_meta.py'", "f2": "'/usr/app/src/test_repos/staticjinja/tests/test_meta.py'"}, "return_value": "True"}, {"func_args": {"f1": "'/usr/app/src/test_repos/staticjinja/tests/test_reloader.py'", "f2": "'/usr/app/src/test_repos/staticjinja/tests/test_reloader.py'"}, "return_value": "True"}, {"func_args": {"f1": "'/usr/app/src/test_repos/staticjinja/tests/test_reloader.py'", "f2": "'/usr/app/src/test_repos/staticjinja/tests/test_reloader.py'"}, "return_value": "True"}, {"func_args": {"f1": "'/usr/app/src/test_repos/staticjinja/tests/test_staticjinja.py'", "f2": "'/usr/app/src/test_repos/staticjinja/tests/test_staticjinja.py'"}, "return_value": "True"}, {"func_args": {"f1": "'/usr/app/src/test_repos/staticjinja/tests/test_staticjinja.py'", "f2": "'/usr/app/src/test_repos/staticjinja/tests/test_staticjinja.py'"}, "return_value": "True"}], "text": "def _is_same(f1: str, f2: str) -> bool:\n        return os.path.samefile(f1, f2)"}, "parts": {"line": 420, "args": [{"func_args": {"s": "'/usr/app/src/test_repos/staticjinja/tests/__pycache__'"}, "return_value": "{'/usr/app/src/test_repos/staticjinja/tests/__pycache__', '/', '/usr/app', '/usr/app/src/test_repos', '/usr/app/src/test_repos/staticjinja/tests', '/usr/app/src/test_repos/staticjinja', '/usr/app/src', '/usr'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/staticjinja/tests/conftest.py'"}, "return_value": "{'/', '/usr/app', '/usr/app/src/test_repos', '/usr/app/src/test_repos/staticjinja/tests', '/usr/app/src/test_repos/staticjinja', '/usr/app/src', '/usr/app/src/test_repos/staticjinja/tests/conftest.py', '/usr'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/staticjinja/tests/test_cli.py'"}, "return_value": "{'/', '/usr/app', '/usr/app/src/test_repos', '/usr/app/src/test_repos/staticjinja/tests', '/usr/app/src/test_repos/staticjinja', '/usr/app/src', '/usr/app/src/test_repos/staticjinja/tests/test_cli.py', '/usr'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/staticjinja/tests/test_examples.py'"}, "return_value": "{'/usr/app/src/test_repos/staticjinja/tests/test_examples.py', '/', '/usr/app', '/usr/app/src/test_repos', '/usr/app/src/test_repos/staticjinja/tests', '/usr/app/src/test_repos/staticjinja', '/usr/app/src', '/usr'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/staticjinja/tests/test_meta.py'"}, "return_value": "{'/', '/usr/app', '/usr/app/src/test_repos', '/usr/app/src/test_repos/staticjinja/tests', '/usr/app/src/test_repos/staticjinja/tests/test_meta.py', '/usr/app/src/test_repos/staticjinja', '/usr/app/src', '/usr'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/staticjinja/tests/test_reloader.py'"}, "return_value": "{'/', '/usr/app', '/usr/app/src/test_repos/staticjinja/tests/test_reloader.py', '/usr/app/src/test_repos', '/usr/app/src/test_repos/staticjinja/tests', '/usr/app/src/test_repos/staticjinja', '/usr/app/src', '/usr'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/staticjinja/tests/test_staticjinja.py'"}, "return_value": "{'/', '/usr/app', '/usr/app/src/test_repos', '/usr/app/src/test_repos/staticjinja/tests/test_staticjinja.py', '/usr/app/src/test_repos/staticjinja/tests', '/usr/app/src/test_repos/staticjinja', '/usr/app/src', '/usr'}"}], "text": "def parts(s: str) -> Set[str]:\n    parts = s.split(sep)\n    return {sep.join(parts[: i + 1]) or sep for i in range(len(parts))}"}, "parse_num": {"line": 179, "args": [{"func_args": {"maybe_num": "'current'"}, "return_value": "-1"}, {"func_args": {"maybe_num": "'0'"}, "return_value": "0"}, {"func_args": {"maybe_num": "'current'"}, "return_value": "-1"}, {"func_args": {"maybe_num": "'0'"}, "return_value": "0"}, {"func_args": {"maybe_num": "'1'"}, "return_value": "1"}, {"func_args": {"maybe_num": "'current'"}, "return_value": "-1"}, {"func_args": {"maybe_num": "'0'"}, "return_value": "0"}, {"func_args": {"maybe_num": "'current'"}, "return_value": "-1"}, {"func_args": {"maybe_num": "'1'"}, "return_value": "1"}, {"func_args": {"maybe_num": "'0'"}, "return_value": "0"}], "text": "def parse_num(maybe_num) -> int:\n    \"\"\"Parse number path suffixes, returns -1 on error.\"\"\"\n    try:\n        return int(maybe_num)\n    except ValueError:\n        return -1"}, "_ispath": {"line": 25, "args": [{"func_args": {"p": "'/usr/app/src/test_repos/staticjinja/pyproject.toml'"}, "return_value": "True"}], "text": "def _ispath(p):\n    if isinstance(p, (bytes, basestring)):\n        return True\n    return _detect_pathlib_path(p)"}, "_getpath": {"line": 31, "args": [{"func_args": {"p": "'/usr/app/src/test_repos/staticjinja/pyproject.toml'"}, "return_value": "'/usr/app/src/test_repos/staticjinja/pyproject.toml'"}], "text": "def _getpath(p):\n    if (3, 6) <= sys.version_info:\n        import os\n        return os.fspath(p)\n    if _detect_pathlib_path(p):\n        return str(p)\n    return p"}, "_strictly_valid_num": {"line": 89, "args": [{"func_args": {"n": "' \"staticjinja\"'"}, "return_value": "True"}, {"func_args": {"n": "' \"4.1.2\"'"}, "return_value": "True"}, {"func_args": {"n": "' \"jinja based static site generator\"'"}, "return_value": "True"}, {"func_args": {"n": "' [     \"Ceasar Bautista <cbautista2010@gmail.com>\", ]'"}, "return_value": "True"}, {"func_args": {"n": "' [     \"Nick Crews <nicholas.b.crews@gmail.com>\", ]'"}, "return_value": "True"}, {"func_args": {"n": "' \"MIT\"'"}, "return_value": "True"}, {"func_args": {"n": "' \"README.rst\"'"}, "return_value": "True"}, {"func_args": {"n": "' \"https://github.com/staticjinja/staticjinja\"'"}, "return_value": "True"}, {"func_args": {"n": "' \"https://github.com/staticjinja/staticjinja\"'"}, "return_value": "True"}, {"func_args": {"n": "' \"https://staticjinja.readthedocs.io\"'"}, "return_value": "True"}, {"func_args": {"n": "' [\"jinja\", \"static\", \"website\"]'"}, "return_value": "True"}, {"func_args": {"n": "' [     \"Intended Audience :: Developers\",     \"License :: OSI Approved :: MIT License\",     \"Operating System :: OS Independent\",     \"Programming Language :: Python\",     \"Programming Language :: Python :: 3\",     \"Programming Language :: Python :: 3.6\",     \"Programming Language :: Python :: 3.7\",     \"Programming Language :: Python :: 3.8\",     \"Programming Language :: Python :: 3.9\",     \"Topic :: Software Development :: Libraries :: Python Modules\",     \"Development Status :: 5 - Production/Stable\", ]'"}, "return_value": "True"}, {"func_args": {"n": "' \"^3.6.2\"'"}, "return_value": "True"}, {"func_args": {"n": "' \"^0.7.2\"'"}, "return_value": "True"}, {"func_args": {"n": "' \"^0.0.5\"'"}, "return_value": "True"}, {"func_args": {"n": "' \">=2.10.1, < 4\"'"}, "return_value": "True"}, {"func_args": {"n": "' { version = \"^21.12b0\", optional = true }'"}, "return_value": "True"}, {"func_args": {"n": "' \"^21.12b0\"'"}, "return_value": "True"}, {"func_args": {"n": "' true '"}, "return_value": "True"}, {"func_args": {"n": "' { version = \"^3.8.4\", optional = true }'"}, "return_value": "True"}, {"func_args": {"n": "' \"^3.8.4\"'"}, "return_value": "True"}, {"func_args": {"n": "' true '"}, "return_value": "True"}, {"func_args": {"n": "' { version = \"^3.3.3\", optional = true }'"}, "return_value": "True"}, {"func_args": {"n": "' \"^3.3.3\"'"}, "return_value": "True"}, {"func_args": {"n": "' true '"}, "return_value": "True"}, {"func_args": {"n": "' { version = \"^6.0.0\", optional = true }'"}, "return_value": "True"}, {"func_args": {"n": "' \"^6.0.0\"'"}, "return_value": "True"}, {"func_args": {"n": "' true '"}, "return_value": "True"}, {"func_args": {"n": "' { version = \"^1.0.1\", optional = true }'"}, "return_value": "True"}, {"func_args": {"n": "' \"^1.0.1\"'"}, "return_value": "True"}, {"func_args": {"n": "' true '"}, "return_value": "True"}, {"func_args": {"n": "' { version = \"^2.5\", optional = true }'"}, "return_value": "True"}, {"func_args": {"n": "' \"^2.5\"'"}, "return_value": "True"}, {"func_args": {"n": "' true '"}, "return_value": "True"}, {"func_args": {"n": "' { version = \"^4.1.1\", optional = true }'"}, "return_value": "True"}, {"func_args": {"n": "' \"^4.1.1\"'"}, "return_value": "True"}, {"func_args": {"n": "' true '"}, "return_value": "True"}, {"func_args": {"n": "' { version = \"^0.5.1\", optional = true }'"}, "return_value": "True"}, {"func_args": {"n": "' \"^0.5.1\"'"}, "return_value": "True"}, {"func_args": {"n": "' true '"}, "return_value": "True"}, {"func_args": {"n": "' { version = \"^0.5.8\", optional = true }'"}, "return_value": "True"}, {"func_args": {"n": "' \"^0.5.8\"'"}, "return_value": "True"}, {"func_args": {"n": "' true '"}, "return_value": "True"}, {"func_args": {"n": "' { version = \"^3.0.0\", optional = true }'"}, "return_value": "True"}, {"func_args": {"n": "' \"^3.0.0\"'"}, "return_value": "True"}, {"func_args": {"n": "' true '"}, "return_value": "True"}, {"func_args": {"n": "' { version = \"^3.3.0\", optional = true }'"}, "return_value": "True"}, {"func_args": {"n": "' \"^3.3.0\"'"}, "return_value": "True"}, {"func_args": {"n": "' true '"}, "return_value": "True"}, {"func_args": {"n": "' [     \"black\",     \"flake8\",     \"markdown\",     \"pytest\",     \"pytest-check\",     \"pytest-cov\",     \"sphinx\",     \"sphinx-rtd-theme\",     \"tomlkit\",     \"tox\",     \"twine\", ]'"}, "return_value": "True"}, {"func_args": {"n": "' \"staticjinja.cli:main\"'"}, "return_value": "True"}, {"func_args": {"n": "' [\"poetry-core>=1.0.0\"]'"}, "return_value": "True"}, {"func_args": {"n": "' \"poetry.core.masonry.api\"'"}, "return_value": "True"}], "text": "def _strictly_valid_num(n):\n    n = n.strip()\n    if not n:\n        return False\n    if n[0] == '_':\n        return False\n    if n[-1] == '_':\n        return False\n    if \"_.\" in n or \"._\" in n:\n        return False\n    if len(n) == 1:\n        return True\n    if n[0] == '0' and n[1] not in ['.', 'o', 'b', 'x']:\n        return False\n    if n[0] == '+' or n[0] == '-':\n        n = n[1:]\n        if len(n) > 1 and n[0] == '0' and n[1] != '.':\n            return False\n    if '__' in n:\n        return False\n    return True"}, "_unescape": {"line": 608, "args": [{"func_args": {"v": "'\"staticjinja\"'"}, "return_value": "'\"staticjinja\"'"}, {"func_args": {"v": "'\"4.1.2\"'"}, "return_value": "'\"4.1.2\"'"}, {"func_args": {"v": "'\"jinja based static site generator\"'"}, "return_value": "'\"jinja based static site generator\"'"}, {"func_args": {"v": "'\"Ceasar Bautista <cbautista2010@gmail.com>\"'"}, "return_value": "'\"Ceasar Bautista <cbautista2010@gmail.com>\"'"}, {"func_args": {"v": "'\"Nick Crews <nicholas.b.crews@gmail.com>\"'"}, "return_value": "'\"Nick Crews <nicholas.b.crews@gmail.com>\"'"}, {"func_args": {"v": "'\"MIT\"'"}, "return_value": "'\"MIT\"'"}, {"func_args": {"v": "'\"README.rst\"'"}, "return_value": "'\"README.rst\"'"}, {"func_args": {"v": "'\"https://github.com/staticjinja/staticjinja\"'"}, "return_value": "'\"https://github.com/staticjinja/staticjinja\"'"}, {"func_args": {"v": "'\"https://github.com/staticjinja/staticjinja\"'"}, "return_value": "'\"https://github.com/staticjinja/staticjinja\"'"}, {"func_args": {"v": "'\"https://staticjinja.readthedocs.io\"'"}, "return_value": "'\"https://staticjinja.readthedocs.io\"'"}, {"func_args": {"v": "'\"jinja\"'"}, "return_value": "'\"jinja\"'"}, {"func_args": {"v": "'\"static\"'"}, "return_value": "'\"static\"'"}, {"func_args": {"v": "'\"website\"'"}, "return_value": "'\"website\"'"}, {"func_args": {"v": "'\"Intended Audience :: Developers\"'"}, "return_value": "'\"Intended Audience :: Developers\"'"}, {"func_args": {"v": "'\"License :: OSI Approved :: MIT License\"'"}, "return_value": "'\"License :: OSI Approved :: MIT License\"'"}, {"func_args": {"v": "'\"Operating System :: OS Independent\"'"}, "return_value": "'\"Operating System :: OS Independent\"'"}, {"func_args": {"v": "'\"Programming Language :: Python\"'"}, "return_value": "'\"Programming Language :: Python\"'"}, {"func_args": {"v": "'\"Programming Language :: Python :: 3\"'"}, "return_value": "'\"Programming Language :: Python :: 3\"'"}, {"func_args": {"v": "'\"Programming Language :: Python :: 3.6\"'"}, "return_value": "'\"Programming Language :: Python :: 3.6\"'"}, {"func_args": {"v": "'\"Programming Language :: Python :: 3.7\"'"}, "return_value": "'\"Programming Language :: Python :: 3.7\"'"}, {"func_args": {"v": "'\"Programming Language :: Python :: 3.8\"'"}, "return_value": "'\"Programming Language :: Python :: 3.8\"'"}, {"func_args": {"v": "'\"Programming Language :: Python :: 3.9\"'"}, "return_value": "'\"Programming Language :: Python :: 3.9\"'"}, {"func_args": {"v": "'\"Topic :: Software Development :: Libraries :: Python Modules\"'"}, "return_value": "'\"Topic :: Software Development :: Libraries :: Python Modules\"'"}, {"func_args": {"v": "'\"Development Status :: 5 - Production/Stable\"'"}, "return_value": "'\"Development Status :: 5 - Production/Stable\"'"}, {"func_args": {"v": "'\"^3.6.2\"'"}, "return_value": "'\"^3.6.2\"'"}, {"func_args": {"v": "'\"^0.7.2\"'"}, "return_value": "'\"^0.7.2\"'"}, {"func_args": {"v": "'\"^0.0.5\"'"}, "return_value": "'\"^0.0.5\"'"}, {"func_args": {"v": "'\">=2.10.1, < 4\"'"}, "return_value": "'\">=2.10.1, < 4\"'"}, {"func_args": {"v": "'\"^21.12b0\"'"}, "return_value": "'\"^21.12b0\"'"}, {"func_args": {"v": "'\"^3.8.4\"'"}, "return_value": "'\"^3.8.4\"'"}, {"func_args": {"v": "'\"^3.3.3\"'"}, "return_value": "'\"^3.3.3\"'"}, {"func_args": {"v": "'\"^6.0.0\"'"}, "return_value": "'\"^6.0.0\"'"}, {"func_args": {"v": "'\"^1.0.1\"'"}, "return_value": "'\"^1.0.1\"'"}, {"func_args": {"v": "'\"^2.5\"'"}, "return_value": "'\"^2.5\"'"}, {"func_args": {"v": "'\"^4.1.1\"'"}, "return_value": "'\"^4.1.1\"'"}, {"func_args": {"v": "'\"^0.5.1\"'"}, "return_value": "'\"^0.5.1\"'"}, {"func_args": {"v": "'\"^0.5.8\"'"}, "return_value": "'\"^0.5.8\"'"}, {"func_args": {"v": "'\"^3.0.0\"'"}, "return_value": "'\"^3.0.0\"'"}, {"func_args": {"v": "'\"^3.3.0\"'"}, "return_value": "'\"^3.3.0\"'"}, {"func_args": {"v": "'\"black\"'"}, "return_value": "'\"black\"'"}, {"func_args": {"v": "'\"flake8\"'"}, "return_value": "'\"flake8\"'"}, {"func_args": {"v": "'\"markdown\"'"}, "return_value": "'\"markdown\"'"}, {"func_args": {"v": "'\"pytest\"'"}, "return_value": "'\"pytest\"'"}, {"func_args": {"v": "'\"pytest-check\"'"}, "return_value": "'\"pytest-check\"'"}, {"func_args": {"v": "'\"pytest-cov\"'"}, "return_value": "'\"pytest-cov\"'"}, {"func_args": {"v": "'\"sphinx\"'"}, "return_value": "'\"sphinx\"'"}, {"func_args": {"v": "'\"sphinx-rtd-theme\"'"}, "return_value": "'\"sphinx-rtd-theme\"'"}, {"func_args": {"v": "'\"tomlkit\"'"}, "return_value": "'\"tomlkit\"'"}, {"func_args": {"v": "'\"tox\"'"}, "return_value": "'\"tox\"'"}, {"func_args": {"v": "'\"twine\"'"}, "return_value": "'\"twine\"'"}, {"func_args": {"v": "'\"staticjinja.cli:main\"'"}, "return_value": "'\"staticjinja.cli:main\"'"}, {"func_args": {"v": "'\"poetry-core>=1.0.0\"'"}, "return_value": "'\"poetry-core>=1.0.0\"'"}, {"func_args": {"v": "'\"poetry.core.masonry.api\"'"}, "return_value": "'\"poetry.core.masonry.api\"'"}], "text": "def _unescape(v):\n    \"\"\"Unescape characters in a TOML string.\"\"\"\n    i = 0\n    backslash = False\n    while i < len(v):\n        if backslash:\n            backslash = False\n            if v[i] in _escapes:\n                v = v[:i - 1] + _escape_to_escapedchars[v[i]] + v[i + 1:]\n            elif v[i] == '\\\\':\n                v = v[:i - 1] + v[i:]\n            elif v[i] == 'u' or v[i] == 'U':\n                i += 1\n            else:\n                raise ValueError(\"Reserved escape sequence used\")\n            continue\n        elif v[i] == '\\\\':\n            backslash = True\n        i += 1\n    return v"}, "iscommentline": {"line": 162, "args": [{"func_args": {"line": "'[tox]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'isolated_build = True\\n'"}, "return_value": "False"}, {"func_args": {"line": "'envlist = py{36,37,38,39}\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}, {"func_args": {"line": "'[testenv]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'description = Run tests\\n'"}, "return_value": "False"}, {"func_args": {"line": "'extras = dev\\n'"}, "return_value": "False"}, {"func_args": {"line": "'commands = viztracer --ignore_frozen --log_func_args --log_func_retval -o result0.json -- pytest\\n'"}, "return_value": "False"}, {"func_args": {"line": "'deps = \\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tviztracer \\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}, {"func_args": {"line": "'[tool:pytest]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'addopts = -vv --doctest-modules --ignore setup.py --basetemp=.pytest\\n'"}, "return_value": "False"}, {"func_args": {"line": "'testpaths = tests\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}, {"func_args": {"line": "'# Settings for running test coverage, used by pytest coverage plugin\\n'"}, "return_value": "True"}, {"func_args": {"line": "'# (in the `pytest-cov` package)\\n'"}, "return_value": "True"}, {"func_args": {"line": "'[coverage:run]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'# Measure branch coverage in addition to statement coverage.\\n'"}, "return_value": "True"}, {"func_args": {"line": "'branch = True\\n'"}, "return_value": "False"}, {"func_args": {"line": "'# Measure coverage in the staticjinja directory/package\\n'"}, "return_value": "True"}, {"func_args": {"line": "'source = staticjinja\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}, {"func_args": {"line": "'# When `coverage html` is run, where the report html is placed.\\n'"}, "return_value": "True"}, {"func_args": {"line": "'[coverage:html]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'directory = .htmlcov\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}, {"func_args": {"line": "'[flake8]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'# Make flake8 play nicely with Black\\n'"}, "return_value": "True"}, {"func_args": {"line": "'max-line-length = 88\\n'"}, "return_value": "False"}], "text": "def iscommentline(line):\n    c = line.lstrip()[:1]\n    return c in COMMENTCHARS"}, "_call_reprcompare": {"line": 470, "args": [{"func_args": {"ops": "('==',)", "results": "(False,)", "expls": "('%(py2)s\\n{%(py2)s = %(py0)s.stdout\\n} == %(py5)s',)", "each_obj": "(b'No such file as -m\\n', b'')"}, "return_value": "\"b'No such file as -m\\\\n' == b''\\n~Full diff:\\n~- b''\\n~+ b'No such file as -m\\\\n'\""}], "text": "def _call_reprcompare(\n    ops: Sequence[str],\n    results: Sequence[bool],\n    expls: Sequence[str],\n    each_obj: Sequence[object],\n) -> str:\n    for i, res, expl in zip(range(len(ops)), results, expls):\n        try:\n            done = not res\n        except Exception:\n            done = True\n        if done:\n            break\n    if util._reprcompare is not None:\n        custom = util._reprcompare(ops[i], each_obj[i], each_obj[i + 1])\n        if custom is not None:\n            return custom\n    return expl"}, "isimportable": {"line": 1026, "args": [{"func_args": {"name": "'tests'"}, "return_value": "True"}], "text": "def isimportable(name):\n    if name and (name[0].isalpha() or name[0] == '_'):\n        name = name.replace(\"_\", '')\n        return not name or name.isalnum()"}, "_parse_parametrize_args": {"line": 135, "args": [{"func_args": {"argnames": "'srcpath, expected'", "argvalues": "[(None, '/cwd/templates'), ('.', '/cwd'), ('src', '/cwd/src'), ('./src', '/cwd/src'), ('/foo/src', '/foo/src')]", "args": "()", "kwargs": "{}"}, "return_value": "(['srcpath', 'expected'], False)"}, {"func_args": {"argnames": "'srcpath, expected'", "argvalues": "[(None, '/cwd/templates'), ('.', '/cwd'), ('src', '/cwd/src'), ('./src', '/cwd/src'), ('/foo/src', '/foo/src')]", "args": "()", "kwargs": "{}"}, "return_value": "(['srcpath', 'expected'], False)"}, {"func_args": {"argnames": "'outpath, expected'", "argvalues": "[(None, '/cwd'), ('.', '/cwd'), ('src', '/cwd/src'), ('./src', '/cwd/src'), ('/foo/src', '/foo/src')]", "args": "()", "kwargs": "{}"}, "return_value": "(['outpath', 'expected'], False)"}, {"func_args": {"argnames": "'outpath, expected'", "argvalues": "[(None, '/cwd'), ('.', '/cwd'), ('src', '/cwd/src'), ('./src', '/cwd/src'), ('/foo/src', '/foo/src')]", "args": "()", "kwargs": "{}"}, "return_value": "(['outpath', 'expected'], False)"}, {"func_args": {"argnames": "'command, expected'", "argvalues": "[('build', False), ('watch', True)]", "args": "()", "kwargs": "{}"}, "return_value": "(['command', 'expected'], False)"}, {"func_args": {"argnames": "'command, expected'", "argvalues": "[('build', False), ('watch', True)]", "args": "()", "kwargs": "{}"}, "return_value": "(['command', 'expected'], False)"}, {"func_args": {"argnames": "'command'", "argvalues": "[['staticjinja'], ['/usr/app/src/test_repos/staticjinja/.tox/py38/bin/python', '-m', 'staticjinja']]", "args": "()", "kwargs": "{}"}, "return_value": "(['command'], True)"}, {"func_args": {"argnames": "'command'", "argvalues": "[['staticjinja'], ['/usr/app/src/test_repos/staticjinja/.tox/py38/bin/python', '-m', 'staticjinja']]", "args": "()", "kwargs": "{}"}, "return_value": "(['command'], True)"}, {"func_args": {"argnames": "'example_name'", "argvalues": "('markdown', 'minimal-python', 'simple')", "args": "()", "kwargs": "{}"}, "return_value": "(['example_name'], True)"}, {"func_args": {"argnames": "'name, expected'", "argvalues": "[('index.html', False), ('.index.html', True), ('_index.html', False), ('normal/index.html', False), ('.dotted/index.html', True), ('normal/.index.html', True), ('_undered/index.html', False), ('undered/_index.html', False), ('normal/normal2/index.html', False), ('.dotted/normal/index.html', True), ('normal/.dotted/index.html', True), ('normal/normal2/.index.html', True), ('_undered/normal/index.html', False), ('normal/_undered/index.html', False), ('normal/normal2/_index.html', False)]", "args": "()", "kwargs": "{}"}, "return_value": "(['name', 'expected'], False)"}, {"func_args": {"argnames": "'name, expected'", "argvalues": "[('index.html', False), ('.index.html', True), ('_index.html', False), ('normal/index.html', False), ('.dotted/index.html', True), ('normal/.index.html', True), ('_undered/index.html', False), ('undered/_index.html', False), ('normal/normal2/index.html', False), ('.dotted/normal/index.html', True), ('normal/.dotted/index.html', True), ('normal/normal2/.index.html', True), ('_undered/normal/index.html', False), ('normal/_undered/index.html', False), ('normal/normal2/_index.html', False)]", "args": "()", "kwargs": "{}"}, "return_value": "(['name', 'expected'], False)"}, {"func_args": {"argnames": "'name, expected'", "argvalues": "[('index.html', False), ('.index.html', True), ('_index.html', False), ('normal/index.html', False), ('.dotted/index.html', True), ('normal/.index.html', True), ('_undered/index.html', False), ('undered/_index.html', False), ('normal/normal2/index.html', False), ('.dotted/normal/index.html', True), ('normal/.dotted/index.html', True), ('normal/normal2/.index.html', True), ('_undered/normal/index.html', False), ('normal/_undered/index.html', False), ('normal/normal2/_index.html', False)]", "args": "()", "kwargs": "{}"}, "return_value": "(['name', 'expected'], False)"}, {"func_args": {"argnames": "'name, expected'", "argvalues": "[('index.html', False), ('.index.html', True), ('_index.html', False), ('normal/index.html', False), ('.dotted/index.html', True), ('normal/.index.html', True), ('_undered/index.html', False), ('undered/_index.html', False), ('normal/normal2/index.html', False), ('.dotted/normal/index.html', True), ('normal/.dotted/index.html', True), ('normal/normal2/.index.html', True), ('_undered/normal/index.html', False), ('normal/_undered/index.html', False), ('normal/normal2/_index.html', False)]", "args": "()", "kwargs": "{}"}, "return_value": "(['name', 'expected'], False)"}, {"func_args": {"argnames": "'name, expected'", "argvalues": "[('index.html', False), ('.index.html', True), ('_index.html', False), ('normal/index.html', False), ('.dotted/index.html', True), ('normal/.index.html', True), ('_undered/index.html', False), ('undered/_index.html', False), ('normal/normal2/index.html', False), ('.dotted/normal/index.html', True), ('normal/.dotted/index.html', True), ('normal/normal2/.index.html', True), ('_undered/normal/index.html', False), ('normal/_undered/index.html', False), ('normal/normal2/_index.html', False)]", "args": "()", "kwargs": "{}"}, "return_value": "(['name', 'expected'], False)"}, {"func_args": {"argnames": "'name, expected'", "argvalues": "[('index.html', False), ('.index.html', True), ('_index.html', False), ('normal/index.html', False), ('.dotted/index.html', True), ('normal/.index.html', True), ('_undered/index.html', False), ('undered/_index.html', False), ('normal/normal2/index.html', False), ('.dotted/normal/index.html', True), ('normal/.dotted/index.html', True), ('normal/normal2/.index.html', True), ('_undered/normal/index.html', False), ('normal/_undered/index.html', False), ('normal/normal2/_index.html', False)]", "args": "()", "kwargs": "{}"}, "return_value": "(['name', 'expected'], False)"}, {"func_args": {"argnames": "'name, expected'", "argvalues": "[('index.html', False), ('.index.html', True), ('_index.html', False), ('normal/index.html', False), ('.dotted/index.html', True), ('normal/.index.html', True), ('_undered/index.html', False), ('undered/_index.html', False), ('normal/normal2/index.html', False), ('.dotted/normal/index.html', True), ('normal/.dotted/index.html', True), ('normal/normal2/.index.html', True), ('_undered/normal/index.html', False), ('normal/_undered/index.html', False), ('normal/normal2/_index.html', False)]", "args": "()", "kwargs": "{}"}, "return_value": "(['name', 'expected'], False)"}, {"func_args": {"argnames": "'name, expected'", "argvalues": "[('index.html', False), ('.index.html', True), ('_index.html', False), ('normal/index.html', False), ('.dotted/index.html', True), ('normal/.index.html', True), ('_undered/index.html', False), ('undered/_index.html', False), ('normal/normal2/index.html', False), ('.dotted/normal/index.html', True), ('normal/.dotted/index.html', True), ('normal/normal2/.index.html', True), ('_undered/normal/index.html', False), ('normal/_undered/index.html', False), ('normal/normal2/_index.html', False)]", "args": "()", "kwargs": "{}"}, "return_value": "(['name', 'expected'], False)"}, {"func_args": {"argnames": "'name, expected'", "argvalues": "[('index.html', False), ('.index.html', False), ('_index.html', True), ('normal/index.html', False), ('.dotted/index.html', False), ('normal/.index.html', False), ('_undered/index.html', True), ('undered/_index.html', True), ('normal/normal2/index.html', False), ('.dotted/normal/index.html', False), ('normal/.dotted/index.html', False), ('normal/normal2/.index.html', False), ('_undered/normal/index.html', True), ('normal/_undered/index.html', True), ('normal/normal2/_index.html', True)]", "args": "()", "kwargs": "{}"}, "return_value": "(['name', 'expected'], False)"}, {"func_args": {"argnames": "'name, expected'", "argvalues": "[('index.html', False), ('.index.html', False), ('_index.html', True), ('normal/index.html', False), ('.dotted/index.html', False), ('normal/.index.html', False), ('_undered/index.html', True), ('undered/_index.html', True), ('normal/normal2/index.html', False), ('.dotted/normal/index.html', False), ('normal/.dotted/index.html', False), ('normal/normal2/.index.html', False), ('_undered/normal/index.html', True), ('normal/_undered/index.html', True), ('normal/normal2/_index.html', True)]", "args": "()", "kwargs": "{}"}, "return_value": "(['name', 'expected'], False)"}, {"func_args": {"argnames": "'name, expected'", "argvalues": "[('index.html', False), ('.index.html', False), ('_index.html', True), ('normal/index.html', False), ('.dotted/index.html', False), ('normal/.index.html', False), ('_undered/index.html', True), ('undered/_index.html', True), ('normal/normal2/index.html', False), ('.dotted/normal/index.html', False), ('normal/.dotted/index.html', False), ('normal/normal2/.index.html', False), ('_undered/normal/index.html', True), ('normal/_undered/index.html', True), ('normal/normal2/_index.html', True)]", "args": "()", "kwargs": "{}"}, "return_value": "(['name', 'expected'], False)"}, {"func_args": {"argnames": "'name, expected'", "argvalues": "[('index.html', False), ('.index.html', False), ('_index.html', True), ('normal/index.html', False), ('.dotted/index.html', False), ('normal/.index.html', False), ('_undered/index.html', True), ('undered/_index.html', True), ('normal/normal2/index.html', False), ('.dotted/normal/index.html', False), ('normal/.dotted/index.html', False), ('normal/normal2/.index.html', False), ('_undered/normal/index.html', True), ('normal/_undered/index.html', True), ('normal/normal2/_index.html', True)]", "args": "()", "kwargs": "{}"}, "return_value": "(['name', 'expected'], False)"}, {"func_args": {"argnames": "'name, expected'", "argvalues": "[('index.html', False), ('.index.html', False), ('_index.html', True), ('normal/index.html', False), ('.dotted/index.html', False), ('normal/.index.html', False), ('_undered/index.html', True), ('undered/_index.html', True), ('normal/normal2/index.html', False), ('.dotted/normal/index.html', False), ('normal/.dotted/index.html', False), ('normal/normal2/.index.html', False), ('_undered/normal/index.html', True), ('normal/_undered/index.html', True), ('normal/normal2/_index.html', True)]", "args": "()", "kwargs": "{}"}, "return_value": "(['name', 'expected'], False)"}, {"func_args": {"argnames": "'name, expected'", "argvalues": "[('index.html', False), ('.index.html', False), ('_index.html', True), ('normal/index.html', False), ('.dotted/index.html', False), ('normal/.index.html', False), ('_undered/index.html', True), ('undered/_index.html', True), ('normal/normal2/index.html', False), ('.dotted/normal/index.html', False), ('normal/.dotted/index.html', False), ('normal/normal2/.index.html', False), ('_undered/normal/index.html', True), ('normal/_undered/index.html', True), ('normal/normal2/_index.html', True)]", "args": "()", "kwargs": "{}"}, "return_value": "(['name', 'expected'], False)"}, {"func_args": {"argnames": "'name, expected'", "argvalues": "[('index.html', False), ('.index.html', False), ('_index.html', True), ('normal/index.html', False), ('.dotted/index.html', False), ('normal/.index.html', False), ('_undered/index.html', True), ('undered/_index.html', True), ('normal/normal2/index.html', False), ('.dotted/normal/index.html', False), ('normal/.dotted/index.html', False), ('normal/normal2/.index.html', False), ('_undered/normal/index.html', True), ('normal/_undered/index.html', True), ('normal/normal2/_index.html', True)]", "args": "()", "kwargs": "{}"}, "return_value": "(['name', 'expected'], False)"}, {"func_args": {"argnames": "'name, expected'", "argvalues": "[('index.html', False), ('.index.html', False), ('_index.html', True), ('normal/index.html', False), ('.dotted/index.html', False), ('normal/.index.html', False), ('_undered/index.html', True), ('undered/_index.html', True), ('normal/normal2/index.html', False), ('.dotted/normal/index.html', False), ('normal/.dotted/index.html', False), ('normal/normal2/.index.html', False), ('_undered/normal/index.html', True), ('normal/_undered/index.html', True), ('normal/normal2/_index.html', True)]", "args": "()", "kwargs": "{}"}, "return_value": "(['name', 'expected'], False)"}]}, "iterparentnodeids": {"line": 44, "args": [{"func_args": {"nodeid": "'tests/test_cli.py::test_srcpath'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_srcpath'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_srcpath'"}, "return_value": "'tests/test_cli.py'"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_srcpath'"}, "return_value": "'tests/test_cli.py::test_srcpath'"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_srcpath'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_outpath'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_outpath'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_outpath'"}, "return_value": "'tests/test_cli.py'"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_outpath'"}, "return_value": "'tests/test_cli.py::test_outpath'"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_outpath'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_log'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_log'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_log'"}, "return_value": "'tests/test_cli.py'"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_log'"}, "return_value": "'tests/test_cli.py::test_log'"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_log'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_watch'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_watch'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_watch'"}, "return_value": "'tests/test_cli.py'"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_watch'"}, "return_value": "'tests/test_cli.py::test_watch'"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_watch'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_nonexistent_srcpath'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_nonexistent_srcpath'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_nonexistent_srcpath'"}, "return_value": "'tests/test_cli.py'"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_nonexistent_srcpath'"}, "return_value": "'tests/test_cli.py::test_nonexistent_srcpath'"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_nonexistent_srcpath'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_entrypoints_no_args'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_entrypoints_no_args'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_entrypoints_no_args'"}, "return_value": "'tests/test_cli.py'"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_entrypoints_no_args'"}, "return_value": "'tests/test_cli.py::test_entrypoints_no_args'"}, {"func_args": {"nodeid": "'tests/test_cli.py::test_entrypoints_no_args'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_examples.py::test_example'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_examples.py::test_example'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_examples.py::test_example'"}, "return_value": "'tests/test_examples.py'"}, {"func_args": {"nodeid": "'tests/test_examples.py::test_example'"}, "return_value": "'tests/test_examples.py::test_example'"}, {"func_args": {"nodeid": "'tests/test_examples.py::test_example'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_examples.py::test_example'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_examples.py::test_example'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_examples.py::test_example'"}, "return_value": "'tests/test_examples.py'"}, {"func_args": {"nodeid": "'tests/test_examples.py::test_example'"}, "return_value": "'tests/test_examples.py::test_example'"}, {"func_args": {"nodeid": "'tests/test_examples.py::test_example'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_examples.py::test_example'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_examples.py::test_example'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_examples.py::test_example'"}, "return_value": "'tests/test_examples.py'"}, {"func_args": {"nodeid": "'tests/test_examples.py::test_example'"}, "return_value": "'tests/test_examples.py::test_example'"}, {"func_args": {"nodeid": "'tests/test_examples.py::test_example'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_examples.py::test_example'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_examples.py::test_example'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_examples.py::test_example'"}, "return_value": "'tests/test_examples.py'"}, {"func_args": {"nodeid": "'tests/test_examples.py::test_example'"}, "return_value": "'tests/test_examples.py::test_example'"}, {"func_args": {"nodeid": "'tests/test_examples.py::test_example'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_meta.py::test_versions_match'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_meta.py::test_versions_match'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_meta.py::test_versions_match'"}, "return_value": "'tests/test_meta.py'"}, {"func_args": {"nodeid": "'tests/test_meta.py::test_versions_match'"}, "return_value": "'tests/test_meta.py::test_versions_match'"}, {"func_args": {"nodeid": "'tests/test_meta.py::test_versions_match'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_should_handle'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_should_handle'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_should_handle'"}, "return_value": "'tests/test_reloader.py'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_should_handle'"}, "return_value": "'tests/test_reloader.py::test_should_handle'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_should_handle'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_should_handle'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_should_handle'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_should_handle'"}, "return_value": "'tests/test_reloader.py'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_should_handle'"}, "return_value": "'tests/test_reloader.py::test_should_handle'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_should_handle'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_should_handle'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_should_handle'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_should_handle'"}, "return_value": "'tests/test_reloader.py'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_should_handle'"}, "return_value": "'tests/test_reloader.py::test_should_handle'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_should_handle'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_should_handle'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_should_handle'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_should_handle'"}, "return_value": "'tests/test_reloader.py'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_should_handle'"}, "return_value": "'tests/test_reloader.py::test_should_handle'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_should_handle'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_should_handle'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_should_handle'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_should_handle'"}, "return_value": "'tests/test_reloader.py'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_should_handle'"}, "return_value": "'tests/test_reloader.py::test_should_handle'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_should_handle'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_should_handle'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_should_handle'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_should_handle'"}, "return_value": "'tests/test_reloader.py'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_should_handle'"}, "return_value": "'tests/test_reloader.py::test_should_handle'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_should_handle'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_should_handle'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_should_handle'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_should_handle'"}, "return_value": "'tests/test_reloader.py'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_should_handle'"}, "return_value": "'tests/test_reloader.py::test_should_handle'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_should_handle'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_should_handle'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_should_handle'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_should_handle'"}, "return_value": "'tests/test_reloader.py'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_should_handle'"}, "return_value": "'tests/test_reloader.py::test_should_handle'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_should_handle'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler'"}, "return_value": "'tests/test_reloader.py'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler'"}, "return_value": "'tests/test_reloader.py::test_event_handler'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler'"}, "return_value": "'tests/test_reloader.py'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler'"}, "return_value": "'tests/test_reloader.py::test_event_handler'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler'"}, "return_value": "'tests/test_reloader.py'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler'"}, "return_value": "'tests/test_reloader.py::test_event_handler'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler'"}, "return_value": "'tests/test_reloader.py'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler'"}, "return_value": "'tests/test_reloader.py::test_event_handler'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler'"}, "return_value": "'tests/test_reloader.py'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler'"}, "return_value": "'tests/test_reloader.py::test_event_handler'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler'"}, "return_value": "'tests/test_reloader.py'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler'"}, "return_value": "'tests/test_reloader.py::test_event_handler'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler'"}, "return_value": "'tests/test_reloader.py'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler'"}, "return_value": "'tests/test_reloader.py::test_event_handler'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler'"}, "return_value": "'tests/test_reloader.py'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler'"}, "return_value": "'tests/test_reloader.py::test_event_handler'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler'"}, "return_value": "'tests/test_reloader.py'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler'"}, "return_value": "'tests/test_reloader.py::test_event_handler'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler_static'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler_static'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler_static'"}, "return_value": "'tests/test_reloader.py'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler_static'"}, "return_value": "'tests/test_reloader.py::test_event_handler_static'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler_static'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler_static'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler_static'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler_static'"}, "return_value": "'tests/test_reloader.py'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler_static'"}, "return_value": "'tests/test_reloader.py::test_event_handler_static'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler_static'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler_static'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler_static'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler_static'"}, "return_value": "'tests/test_reloader.py'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler_static'"}, "return_value": "'tests/test_reloader.py::test_event_handler_static'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler_static'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler_static'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler_static'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler_static'"}, "return_value": "'tests/test_reloader.py'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler_static'"}, "return_value": "'tests/test_reloader.py::test_event_handler_static'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler_static'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler_static'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler_static'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler_static'"}, "return_value": "'tests/test_reloader.py'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler_static'"}, "return_value": "'tests/test_reloader.py::test_event_handler_static'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler_static'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler_static'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler_static'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler_static'"}, "return_value": "'tests/test_reloader.py'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler_static'"}, "return_value": "'tests/test_reloader.py::test_event_handler_static'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler_static'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler_static'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler_static'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler_static'"}, "return_value": "'tests/test_reloader.py'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler_static'"}, "return_value": "'tests/test_reloader.py::test_event_handler_static'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler_static'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler_static'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler_static'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler_static'"}, "return_value": "'tests/test_reloader.py'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler_static'"}, "return_value": "'tests/test_reloader.py::test_event_handler_static'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler_static'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler_static'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler_static'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler_static'"}, "return_value": "'tests/test_reloader.py'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler_static'"}, "return_value": "'tests/test_reloader.py::test_event_handler_static'"}, {"func_args": {"nodeid": "'tests/test_reloader.py::test_event_handler_static'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_template_names'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_template_names'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_template_names'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_template_names'"}, "return_value": "'tests/test_staticjinja.py::test_template_names'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_template_names'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_template_names'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_template_names'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_template_names'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_template_names'"}, "return_value": "'tests/test_staticjinja.py::test_template_names'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_template_names'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_template_names'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_template_names'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_template_names'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_template_names'"}, "return_value": "'tests/test_staticjinja.py::test_template_names'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_template_names'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_template_names'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_template_names'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_template_names'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_template_names'"}, "return_value": "'tests/test_staticjinja.py::test_template_names'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_template_names'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_template_names'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_template_names'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_template_names'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_template_names'"}, "return_value": "'tests/test_staticjinja.py::test_template_names'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_template_names'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_template_names'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_template_names'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_template_names'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_template_names'"}, "return_value": "'tests/test_staticjinja.py::test_template_names'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_template_names'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_template_names'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_template_names'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_template_names'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_template_names'"}, "return_value": "'tests/test_staticjinja.py::test_template_names'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_template_names'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_templates'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_templates'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_templates'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_templates'"}, "return_value": "'tests/test_staticjinja.py::test_templates'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_templates'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_templates'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_templates'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_templates'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_templates'"}, "return_value": "'tests/test_staticjinja.py::test_templates'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_templates'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_templates'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_templates'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_templates'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_templates'"}, "return_value": "'tests/test_staticjinja.py::test_templates'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_templates'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_templates'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_templates'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_templates'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_templates'"}, "return_value": "'tests/test_staticjinja.py::test_templates'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_templates'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_templates'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_templates'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_templates'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_templates'"}, "return_value": "'tests/test_staticjinja.py::test_templates'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_templates'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_templates'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_templates'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_templates'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_templates'"}, "return_value": "'tests/test_staticjinja.py::test_templates'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_templates'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_templates'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_templates'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_templates'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_templates'"}, "return_value": "'tests/test_staticjinja.py::test_templates'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_templates'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_context'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_context'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_context'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_context'"}, "return_value": "'tests/test_staticjinja.py::test_get_context'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_context'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_context'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_context'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_context'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_context'"}, "return_value": "'tests/test_staticjinja.py::test_get_context'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_context'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_context'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_context'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_context'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_context'"}, "return_value": "'tests/test_staticjinja.py::test_get_context'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_context'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_context'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_context'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_context'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_context'"}, "return_value": "'tests/test_staticjinja.py::test_get_context'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_context'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_context'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_context'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_context'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_context'"}, "return_value": "'tests/test_staticjinja.py::test_get_context'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_context'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_context'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_context'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_context'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_context'"}, "return_value": "'tests/test_staticjinja.py::test_get_context'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_context'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_context'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_context'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_context'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_context'"}, "return_value": "'tests/test_staticjinja.py::test_get_context'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_context'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_rule'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_rule'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_rule'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_rule'"}, "return_value": "'tests/test_staticjinja.py::test_get_rule'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_rule'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_rule'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_rule'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_rule'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_rule'"}, "return_value": "'tests/test_staticjinja.py::test_get_rule'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_rule'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_rule'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_rule'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_rule'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_rule'"}, "return_value": "'tests/test_staticjinja.py::test_get_rule'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_rule'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_rule'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_rule'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_rule'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_rule'"}, "return_value": "'tests/test_staticjinja.py::test_get_rule'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_rule'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_rule'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_rule'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_rule'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_rule'"}, "return_value": "'tests/test_staticjinja.py::test_get_rule'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_rule'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_rule'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_rule'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_rule'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_rule'"}, "return_value": "'tests/test_staticjinja.py::test_get_rule'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_rule'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_rule'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_rule'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_rule'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_rule'"}, "return_value": "'tests/test_staticjinja.py::test_get_rule'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_rule'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_dependents'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_dependents'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_dependents'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_dependents'"}, "return_value": "'tests/test_staticjinja.py::test_get_dependents'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_dependents'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_dependents'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_dependents'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_dependents'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_dependents'"}, "return_value": "'tests/test_staticjinja.py::test_get_dependents'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_dependents'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_dependents'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_dependents'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_dependents'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_dependents'"}, "return_value": "'tests/test_staticjinja.py::test_get_dependents'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_dependents'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_dependents'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_dependents'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_dependents'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_dependents'"}, "return_value": "'tests/test_staticjinja.py::test_get_dependents'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_dependents'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_dependents'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_dependents'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_dependents'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_dependents'"}, "return_value": "'tests/test_staticjinja.py::test_get_dependents'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_dependents'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_dependents'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_dependents'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_dependents'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_dependents'"}, "return_value": "'tests/test_staticjinja.py::test_get_dependents'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_dependents'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_dependents'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_dependents'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_dependents'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_dependents'"}, "return_value": "'tests/test_staticjinja.py::test_get_dependents'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_dependents'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_dependents'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_dependents'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_dependents'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_dependents'"}, "return_value": "'tests/test_staticjinja.py::test_get_dependents'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_get_dependents'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template'"}, "return_value": "'tests/test_staticjinja.py::test_render_template'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template'"}, "return_value": "'tests/test_staticjinja.py::test_render_template'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template'"}, "return_value": "'tests/test_staticjinja.py::test_render_template'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template'"}, "return_value": "'tests/test_staticjinja.py::test_render_template'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template'"}, "return_value": "'tests/test_staticjinja.py::test_render_template'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template'"}, "return_value": "'tests/test_staticjinja.py::test_render_template'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template'"}, "return_value": "'tests/test_staticjinja.py::test_render_template'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_nested_template'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_nested_template'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_nested_template'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_nested_template'"}, "return_value": "'tests/test_staticjinja.py::test_render_nested_template'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_nested_template'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_nested_template'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_nested_template'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_nested_template'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_nested_template'"}, "return_value": "'tests/test_staticjinja.py::test_render_nested_template'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_nested_template'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_nested_template'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_nested_template'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_nested_template'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_nested_template'"}, "return_value": "'tests/test_staticjinja.py::test_render_nested_template'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_nested_template'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_nested_template'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_nested_template'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_nested_template'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_nested_template'"}, "return_value": "'tests/test_staticjinja.py::test_render_nested_template'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_nested_template'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_nested_template'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_nested_template'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_nested_template'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_nested_template'"}, "return_value": "'tests/test_staticjinja.py::test_render_nested_template'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_nested_template'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_nested_template'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_nested_template'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_nested_template'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_nested_template'"}, "return_value": "'tests/test_staticjinja.py::test_render_nested_template'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_nested_template'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_nested_template'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_nested_template'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_nested_template'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_nested_template'"}, "return_value": "'tests/test_staticjinja.py::test_render_nested_template'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_nested_template'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template_with_env_globals'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template_with_env_globals'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template_with_env_globals'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template_with_env_globals'"}, "return_value": "'tests/test_staticjinja.py::test_render_template_with_env_globals'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template_with_env_globals'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template_with_env_globals'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template_with_env_globals'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template_with_env_globals'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template_with_env_globals'"}, "return_value": "'tests/test_staticjinja.py::test_render_template_with_env_globals'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template_with_env_globals'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template_with_env_globals'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template_with_env_globals'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template_with_env_globals'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template_with_env_globals'"}, "return_value": "'tests/test_staticjinja.py::test_render_template_with_env_globals'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template_with_env_globals'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template_with_env_globals'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template_with_env_globals'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template_with_env_globals'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template_with_env_globals'"}, "return_value": "'tests/test_staticjinja.py::test_render_template_with_env_globals'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template_with_env_globals'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template_with_env_globals'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template_with_env_globals'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template_with_env_globals'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template_with_env_globals'"}, "return_value": "'tests/test_staticjinja.py::test_render_template_with_env_globals'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template_with_env_globals'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template_with_env_globals'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template_with_env_globals'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template_with_env_globals'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template_with_env_globals'"}, "return_value": "'tests/test_staticjinja.py::test_render_template_with_env_globals'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_template_with_env_globals'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_templates'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_templates'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_templates'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_templates'"}, "return_value": "'tests/test_staticjinja.py::test_render_templates'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_templates'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_templates'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_templates'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_templates'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_templates'"}, "return_value": "'tests/test_staticjinja.py::test_render_templates'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_templates'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_templates'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_templates'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_templates'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_templates'"}, "return_value": "'tests/test_staticjinja.py::test_render_templates'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_templates'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_templates'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_templates'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_templates'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_templates'"}, "return_value": "'tests/test_staticjinja.py::test_render_templates'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_templates'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_templates'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_templates'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_templates'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_templates'"}, "return_value": "'tests/test_staticjinja.py::test_render_templates'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_templates'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_templates'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_templates'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_templates'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_templates'"}, "return_value": "'tests/test_staticjinja.py::test_render_templates'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_templates'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_templates'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_templates'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_templates'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_templates'"}, "return_value": "'tests/test_staticjinja.py::test_render_templates'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_render_templates'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_build'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_build'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_build'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_build'"}, "return_value": "'tests/test_staticjinja.py::test_build'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_build'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_build'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_build'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_build'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_build'"}, "return_value": "'tests/test_staticjinja.py::test_build'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_build'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_build'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_build'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_build'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_build'"}, "return_value": "'tests/test_staticjinja.py::test_build'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_build'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_build'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_build'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_build'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_build'"}, "return_value": "'tests/test_staticjinja.py::test_build'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_build'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_build'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_build'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_build'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_build'"}, "return_value": "'tests/test_staticjinja.py::test_build'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_build'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_build'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_build'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_build'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_build'"}, "return_value": "'tests/test_staticjinja.py::test_build'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_build'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_build'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_build'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_build'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_build'"}, "return_value": "'tests/test_staticjinja.py::test_build'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_build'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_build'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_build'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_build'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_build'"}, "return_value": "'tests/test_staticjinja.py::test_build'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_build'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_with_reloader'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_with_reloader'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_with_reloader'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_with_reloader'"}, "return_value": "'tests/test_staticjinja.py::test_with_reloader'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_with_reloader'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_with_reloader'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_with_reloader'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_with_reloader'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_with_reloader'"}, "return_value": "'tests/test_staticjinja.py::test_with_reloader'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_with_reloader'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_with_reloader'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_with_reloader'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_with_reloader'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_with_reloader'"}, "return_value": "'tests/test_staticjinja.py::test_with_reloader'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_with_reloader'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_with_reloader'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_with_reloader'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_with_reloader'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_with_reloader'"}, "return_value": "'tests/test_staticjinja.py::test_with_reloader'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_with_reloader'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_with_reloader'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_with_reloader'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_with_reloader'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_with_reloader'"}, "return_value": "'tests/test_staticjinja.py::test_with_reloader'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_with_reloader'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_with_reloader'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_with_reloader'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_with_reloader'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_with_reloader'"}, "return_value": "'tests/test_staticjinja.py::test_with_reloader'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_with_reloader'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_with_reloader'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_with_reloader'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_with_reloader'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_with_reloader'"}, "return_value": "'tests/test_staticjinja.py::test_with_reloader'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_with_reloader'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_with_reloader'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_with_reloader'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_with_reloader'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_with_reloader'"}, "return_value": "'tests/test_staticjinja.py::test_with_reloader'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_with_reloader'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored'"}, "return_value": "'tests/test_staticjinja.py::test_is_ignored'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored'"}, "return_value": "'tests/test_staticjinja.py::test_is_ignored'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored'"}, "return_value": "'tests/test_staticjinja.py::test_is_ignored'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored'"}, "return_value": "'tests/test_staticjinja.py::test_is_ignored'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored'"}, "return_value": "'tests/test_staticjinja.py::test_is_ignored'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored'"}, "return_value": "'tests/test_staticjinja.py::test_is_ignored'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored'"}, "return_value": "'tests/test_staticjinja.py::test_is_ignored'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_ignored'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial'"}, "return_value": "'tests/test_staticjinja.py::test_is_partial'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial'"}, "return_value": "'tests/test_staticjinja.py::test_is_partial'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial'"}, "return_value": "'tests/test_staticjinja.py::test_is_partial'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial'"}, "return_value": "'tests/test_staticjinja.py::test_is_partial'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial'"}, "return_value": "'tests/test_staticjinja.py::test_is_partial'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial'"}, "return_value": "'tests/test_staticjinja.py::test_is_partial'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial'"}, "return_value": "'tests/test_staticjinja.py::test_is_partial'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_is_partial'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_absolute'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_absolute'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_absolute'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_absolute'"}, "return_value": "'tests/test_staticjinja.py::test_path_absolute'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_absolute'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_absolute'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_absolute'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_absolute'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_absolute'"}, "return_value": "'tests/test_staticjinja.py::test_path_absolute'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_absolute'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_absolute'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_absolute'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_absolute'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_absolute'"}, "return_value": "'tests/test_staticjinja.py::test_path_absolute'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_absolute'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_absolute'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_absolute'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_absolute'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_absolute'"}, "return_value": "'tests/test_staticjinja.py::test_path_absolute'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_absolute'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_relative_warning'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_relative_warning'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_relative_warning'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_relative_warning'"}, "return_value": "'tests/test_staticjinja.py::test_path_relative_warning'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_relative_warning'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_relative_warning'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_relative_warning'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_relative_warning'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_relative_warning'"}, "return_value": "'tests/test_staticjinja.py::test_path_relative_warning'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_relative_warning'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_relative_warning'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_relative_warning'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_relative_warning'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_relative_warning'"}, "return_value": "'tests/test_staticjinja.py::test_path_relative_warning'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_relative_warning'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_relative_warning'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_relative_warning'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_relative_warning'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_relative_warning'"}, "return_value": "'tests/test_staticjinja.py::test_path_relative_warning'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_relative_warning'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_relative_no_warning'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_relative_no_warning'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_relative_no_warning'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_relative_no_warning'"}, "return_value": "'tests/test_staticjinja.py::test_path_relative_no_warning'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_relative_no_warning'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_relative_no_warning'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_relative_no_warning'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_relative_no_warning'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_relative_no_warning'"}, "return_value": "'tests/test_staticjinja.py::test_path_relative_no_warning'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_relative_no_warning'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_relative_no_warning'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_relative_no_warning'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_relative_no_warning'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_relative_no_warning'"}, "return_value": "'tests/test_staticjinja.py::test_path_relative_no_warning'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_relative_no_warning'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_relative_no_warning'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_relative_no_warning'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_relative_no_warning'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_relative_no_warning'"}, "return_value": "'tests/test_staticjinja.py::test_path_relative_no_warning'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_path_relative_no_warning'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_followlinks'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_followlinks'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_followlinks'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_followlinks'"}, "return_value": "'tests/test_staticjinja.py::test_followlinks'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_followlinks'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_followlinks'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_followlinks'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_followlinks'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_followlinks'"}, "return_value": "'tests/test_staticjinja.py::test_followlinks'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_followlinks'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_followlinks'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_followlinks'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_followlinks'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_followlinks'"}, "return_value": "'tests/test_staticjinja.py::test_followlinks'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_followlinks'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_followlinks'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_followlinks'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_followlinks'"}, "return_value": "'tests/test_staticjinja.py'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_followlinks'"}, "return_value": "'tests/test_staticjinja.py::test_followlinks'"}, {"func_args": {"nodeid": "'tests/test_staticjinja.py::test_followlinks'"}, "return_value": "None"}], "text": "def iterparentnodeids(nodeid: str) -> Iterator[str]:\n    \"\"\"Return the parent node IDs of a given node ID, inclusive.\n\n    For the node ID\n\n        \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_source\"\n\n    the result would be\n\n        \"\"\n        \"testing\"\n        \"testing/code\"\n        \"testing/code/test_excinfo.py\"\n        \"testing/code/test_excinfo.py::TestFormattedExcinfo\"\n        \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_source\"\n\n    Note that :: parts are only considered at the last / component.\n    \"\"\"\n    pos = 0\n    sep = SEP\n    yield \"\"\n    while True:\n        at = nodeid.find(sep, pos)\n        if at == -1 and sep == SEP:\n            sep = \"::\"\n        elif at == -1:\n            if nodeid:\n                yield nodeid\n            break\n        else:\n            if at:\n                yield nodeid[:at]\n            pos = at + len(sep)"}, "get_failures": {"line": 38, "args": [{"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}, {"func_args": {}, "return_value": "[]"}], "text": "def get_failures():\n    return _failures"}, "wrapper": {"line": 78, "args": [{"func_args": {"args": "([], [])", "kwds": "{}"}, "return_value": "True"}, {"func_args": {"args": "([], [])", "kwds": "{}"}, "return_value": "True"}, {"func_args": {"args": "([], [])", "kwds": "{}"}, "return_value": "True"}, {"func_args": {"args": "([], [])", "kwds": "{}"}, "return_value": "True"}, {"func_args": {"args": "([], [])", "kwds": "{}"}, "return_value": "True"}, {"func_args": {"args": "([], [])", "kwds": "{}"}, "return_value": "True"}, {"func_args": {"args": "([], [])", "kwds": "{}"}, "return_value": "True"}, {"func_args": {"args": "([], [])", "kwds": "{}"}, "return_value": "True"}, {"func_args": {"args": "([], [])", "kwds": "{}"}, "return_value": "True"}, {"func_args": {"args": "([], [])", "kwds": "{}"}, "return_value": "True"}, {"func_args": {"args": "([], [])", "kwds": "{}"}, "return_value": "True"}, {"func_args": {"args": "([], [])", "kwds": "{}"}, "return_value": "True"}, {"func_args": {"args": "([], [])", "kwds": "{}"}, "return_value": "True"}, {"func_args": {"args": "([], [])", "kwds": "{}"}, "return_value": "True"}, {"func_args": {"args": "([], [])", "kwds": "{}"}, "return_value": "True"}, {"func_args": {"args": "([], [])", "kwds": "{}"}, "return_value": "True"}, {"func_args": {"args": "([], [])", "kwds": "{}"}, "return_value": "True"}, {"func_args": {"args": "([], [])", "kwds": "{}"}, "return_value": "True"}, {"func_args": {"args": "([], [])", "kwds": "{}"}, "return_value": "True"}, {"func_args": {"args": "([], [])", "kwds": "{}"}, "return_value": "True"}, {"func_args": {"args": "([], [])", "kwds": "{}"}, "return_value": "True"}, {"func_args": {"args": "([], [])", "kwds": "{}"}, "return_value": "True"}, {"func_args": {"args": "([], [])", "kwds": "{}"}, "return_value": "True"}, {"func_args": {"args": "([], [])", "kwds": "{}"}, "return_value": "True"}, {"func_args": {"args": "([], [])", "kwds": "{}"}, "return_value": "True"}, {"func_args": {"args": "([], [])", "kwds": "{}"}, "return_value": "True"}, {"func_args": {"args": "([], [])", "kwds": "{}"}, "return_value": "True"}, {"func_args": {"args": "([], [])", "kwds": "{}"}, "return_value": "True"}, {"func_args": {"args": "([], [])", "kwds": "{}"}, "return_value": "True"}, {"func_args": {"args": "([], [])", "kwds": "{}"}, "return_value": "True"}, {"func_args": {"args": "([], [])", "kwds": "{}"}, "return_value": "True"}, {"func_args": {"args": "([], [])", "kwds": "{}"}, "return_value": "True"}, {"func_args": {"args": "([], [])", "kwds": "{}"}, "return_value": "True"}, {"func_args": {"args": "([], [])", "kwds": "{}"}, "return_value": "True"}, {"func_args": {"args": "([], [])", "kwds": "{}"}, "return_value": "True"}, {"func_args": {"args": "([], [])", "kwds": "{}"}, "return_value": "True"}, {"func_args": {"args": "([], [])", "kwds": "{}"}, "return_value": "True"}, {"func_args": {"args": "([], [])", "kwds": "{}"}, "return_value": "True"}, {"func_args": {"args": "([], [])", "kwds": "{}"}, "return_value": "True"}, {"func_args": {"args": "([], [])", "kwds": "{}"}, "return_value": "True"}, {"func_args": {"args": "([], [])", "kwds": "{}"}, "return_value": "True"}, {"func_args": {"args": "([], [])", "kwds": "{}"}, "return_value": "True"}, {"func_args": {"args": "([], [])", "kwds": "{}"}, "return_value": "True"}, {"func_args": {"args": "([], [])", "kwds": "{}"}, "return_value": "True"}, {"func_args": {"args": "([], [])", "kwds": "{}"}, "return_value": "True"}, {"func_args": {"args": "([], [])", "kwds": "{}"}, "return_value": "True"}, {"func_args": {"args": "([], [])", "kwds": "{}"}, "return_value": "True"}, {"func_args": {"args": "([], [])", "kwds": "{}"}, "return_value": "True"}]}, "_translate_non_printable": {"line": 204, "args": [{"func_args": {"s": "'/cwd/templates'"}, "return_value": "'/cwd/templates'"}, {"func_args": {"s": "'.'"}, "return_value": "'.'"}, {"func_args": {"s": "'/cwd'"}, "return_value": "'/cwd'"}, {"func_args": {"s": "'src'"}, "return_value": "'src'"}, {"func_args": {"s": "'/cwd/src'"}, "return_value": "'/cwd/src'"}, {"func_args": {"s": "'./src'"}, "return_value": "'./src'"}, {"func_args": {"s": "'/cwd/src'"}, "return_value": "'/cwd/src'"}, {"func_args": {"s": "'/foo/src'"}, "return_value": "'/foo/src'"}, {"func_args": {"s": "'/foo/src'"}, "return_value": "'/foo/src'"}, {"func_args": {"s": "'/cwd'"}, "return_value": "'/cwd'"}, {"func_args": {"s": "'.'"}, "return_value": "'.'"}, {"func_args": {"s": "'/cwd'"}, "return_value": "'/cwd'"}, {"func_args": {"s": "'src'"}, "return_value": "'src'"}, {"func_args": {"s": "'/cwd/src'"}, "return_value": "'/cwd/src'"}, {"func_args": {"s": "'./src'"}, "return_value": "'./src'"}, {"func_args": {"s": "'/cwd/src'"}, "return_value": "'/cwd/src'"}, {"func_args": {"s": "'/foo/src'"}, "return_value": "'/foo/src'"}, {"func_args": {"s": "'/foo/src'"}, "return_value": "'/foo/src'"}, {"func_args": {"s": "'build'"}, "return_value": "'build'"}, {"func_args": {"s": "'watch'"}, "return_value": "'watch'"}, {"func_args": {"s": "'markdown'"}, "return_value": "'markdown'"}, {"func_args": {"s": "'minimal-python'"}, "return_value": "'minimal-python'"}, {"func_args": {"s": "'simple'"}, "return_value": "'simple'"}, {"func_args": {"s": "'index.html'"}, "return_value": "'index.html'"}, {"func_args": {"s": "'.index.html'"}, "return_value": "'.index.html'"}, {"func_args": {"s": "'_index.html'"}, "return_value": "'_index.html'"}, {"func_args": {"s": "'normal/index.html'"}, "return_value": "'normal/index.html'"}, {"func_args": {"s": "'.dotted/index.html'"}, "return_value": "'.dotted/index.html'"}, {"func_args": {"s": "'normal/.index.html'"}, "return_value": "'normal/.index.html'"}, {"func_args": {"s": "'_undered/index.html'"}, "return_value": "'_undered/index.html'"}, {"func_args": {"s": "'undered/_index.html'"}, "return_value": "'undered/_index.html'"}, {"func_args": {"s": "'normal/normal2/index.html'"}, "return_value": "'normal/normal2/index.html'"}, {"func_args": {"s": "'.dotted/normal/index.html'"}, "return_value": "'.dotted/normal/index.html'"}, {"func_args": {"s": "'normal/.dotted/index.html'"}, "return_value": "'normal/.dotted/index.html'"}, {"func_args": {"s": "'normal/normal2/.index.html'"}, "return_value": "'normal/normal2/.index.html'"}, {"func_args": {"s": "'_undered/normal/index.html'"}, "return_value": "'_undered/normal/index.html'"}, {"func_args": {"s": "'normal/_undered/index.html'"}, "return_value": "'normal/_undered/index.html'"}, {"func_args": {"s": "'normal/normal2/_index.html'"}, "return_value": "'normal/normal2/_index.html'"}, {"func_args": {"s": "'index.html'"}, "return_value": "'index.html'"}, {"func_args": {"s": "'.index.html'"}, "return_value": "'.index.html'"}, {"func_args": {"s": "'_index.html'"}, "return_value": "'_index.html'"}, {"func_args": {"s": "'normal/index.html'"}, "return_value": "'normal/index.html'"}, {"func_args": {"s": "'.dotted/index.html'"}, "return_value": "'.dotted/index.html'"}, {"func_args": {"s": "'normal/.index.html'"}, "return_value": "'normal/.index.html'"}, {"func_args": {"s": "'_undered/index.html'"}, "return_value": "'_undered/index.html'"}, {"func_args": {"s": "'undered/_index.html'"}, "return_value": "'undered/_index.html'"}, {"func_args": {"s": "'normal/normal2/index.html'"}, "return_value": "'normal/normal2/index.html'"}, {"func_args": {"s": "'.dotted/normal/index.html'"}, "return_value": "'.dotted/normal/index.html'"}, {"func_args": {"s": "'normal/.dotted/index.html'"}, "return_value": "'normal/.dotted/index.html'"}, {"func_args": {"s": "'normal/normal2/.index.html'"}, "return_value": "'normal/normal2/.index.html'"}, {"func_args": {"s": "'_undered/normal/index.html'"}, "return_value": "'_undered/normal/index.html'"}, {"func_args": {"s": "'normal/_undered/index.html'"}, "return_value": "'normal/_undered/index.html'"}, {"func_args": {"s": "'normal/normal2/_index.html'"}, "return_value": "'normal/normal2/_index.html'"}], "text": "def _translate_non_printable(s: str) -> str:\n    return s.translate(_non_printable_ascii_translate_table)"}, "ascii_escaped": {"line": 215, "args": [{"func_args": {"val": "'/cwd/templates'"}, "return_value": "'/cwd/templates'"}, {"func_args": {"val": "'.'"}, "return_value": "'.'"}, {"func_args": {"val": "'/cwd'"}, "return_value": "'/cwd'"}, {"func_args": {"val": "'src'"}, "return_value": "'src'"}, {"func_args": {"val": "'/cwd/src'"}, "return_value": "'/cwd/src'"}, {"func_args": {"val": "'./src'"}, "return_value": "'./src'"}, {"func_args": {"val": "'/cwd/src'"}, "return_value": "'/cwd/src'"}, {"func_args": {"val": "'/foo/src'"}, "return_value": "'/foo/src'"}, {"func_args": {"val": "'/foo/src'"}, "return_value": "'/foo/src'"}, {"func_args": {"val": "'/cwd'"}, "return_value": "'/cwd'"}, {"func_args": {"val": "'.'"}, "return_value": "'.'"}, {"func_args": {"val": "'/cwd'"}, "return_value": "'/cwd'"}, {"func_args": {"val": "'src'"}, "return_value": "'src'"}, {"func_args": {"val": "'/cwd/src'"}, "return_value": "'/cwd/src'"}, {"func_args": {"val": "'./src'"}, "return_value": "'./src'"}, {"func_args": {"val": "'/cwd/src'"}, "return_value": "'/cwd/src'"}, {"func_args": {"val": "'/foo/src'"}, "return_value": "'/foo/src'"}, {"func_args": {"val": "'/foo/src'"}, "return_value": "'/foo/src'"}, {"func_args": {"val": "'build'"}, "return_value": "'build'"}, {"func_args": {"val": "'watch'"}, "return_value": "'watch'"}, {"func_args": {"val": "'markdown'"}, "return_value": "'markdown'"}, {"func_args": {"val": "'minimal-python'"}, "return_value": "'minimal-python'"}, {"func_args": {"val": "'simple'"}, "return_value": "'simple'"}, {"func_args": {"val": "'index.html'"}, "return_value": "'index.html'"}, {"func_args": {"val": "'.index.html'"}, "return_value": "'.index.html'"}, {"func_args": {"val": "'_index.html'"}, "return_value": "'_index.html'"}, {"func_args": {"val": "'normal/index.html'"}, "return_value": "'normal/index.html'"}, {"func_args": {"val": "'.dotted/index.html'"}, "return_value": "'.dotted/index.html'"}, {"func_args": {"val": "'normal/.index.html'"}, "return_value": "'normal/.index.html'"}, {"func_args": {"val": "'_undered/index.html'"}, "return_value": "'_undered/index.html'"}, {"func_args": {"val": "'undered/_index.html'"}, "return_value": "'undered/_index.html'"}, {"func_args": {"val": "'normal/normal2/index.html'"}, "return_value": "'normal/normal2/index.html'"}, {"func_args": {"val": "'.dotted/normal/index.html'"}, "return_value": "'.dotted/normal/index.html'"}, {"func_args": {"val": "'normal/.dotted/index.html'"}, "return_value": "'normal/.dotted/index.html'"}, {"func_args": {"val": "'normal/normal2/.index.html'"}, "return_value": "'normal/normal2/.index.html'"}, {"func_args": {"val": "'_undered/normal/index.html'"}, "return_value": "'_undered/normal/index.html'"}, {"func_args": {"val": "'normal/_undered/index.html'"}, "return_value": "'normal/_undered/index.html'"}, {"func_args": {"val": "'normal/normal2/_index.html'"}, "return_value": "'normal/normal2/_index.html'"}, {"func_args": {"val": "'index.html'"}, "return_value": "'index.html'"}, {"func_args": {"val": "'.index.html'"}, "return_value": "'.index.html'"}, {"func_args": {"val": "'_index.html'"}, "return_value": "'_index.html'"}, {"func_args": {"val": "'normal/index.html'"}, "return_value": "'normal/index.html'"}, {"func_args": {"val": "'.dotted/index.html'"}, "return_value": "'.dotted/index.html'"}, {"func_args": {"val": "'normal/.index.html'"}, "return_value": "'normal/.index.html'"}, {"func_args": {"val": "'_undered/index.html'"}, "return_value": "'_undered/index.html'"}, {"func_args": {"val": "'undered/_index.html'"}, "return_value": "'undered/_index.html'"}, {"func_args": {"val": "'normal/normal2/index.html'"}, "return_value": "'normal/normal2/index.html'"}, {"func_args": {"val": "'.dotted/normal/index.html'"}, "return_value": "'.dotted/normal/index.html'"}, {"func_args": {"val": "'normal/.dotted/index.html'"}, "return_value": "'normal/.dotted/index.html'"}, {"func_args": {"val": "'normal/normal2/.index.html'"}, "return_value": "'normal/normal2/.index.html'"}, {"func_args": {"val": "'_undered/normal/index.html'"}, "return_value": "'_undered/normal/index.html'"}, {"func_args": {"val": "'normal/_undered/index.html'"}, "return_value": "'normal/_undered/index.html'"}, {"func_args": {"val": "'normal/normal2/_index.html'"}, "return_value": "'normal/normal2/_index.html'"}], "text": "def ascii_escaped(val: Union[bytes, str]) -> str:\n    r\"\"\"If val is pure ASCII, return it as an str, otherwise, escape\n    bytes objects into a sequence of escaped bytes:\n\n    b'\\xc3\\xb4\\xc5\\xd6' -> r'\\xc3\\xb4\\xc5\\xd6'\n\n    and escapes unicode objects into a sequence of escaped unicode\n    ids, e.g.:\n\n    r'4\\nV\\U00043efa\\x0eMXWB\\x1e\\u3028\\u15fd\\xcd\\U0007d944'\n\n    Note:\n       The obvious \"v.decode('unicode-escape')\" will return\n       valid UTF-8 unicode if it finds them in bytes, but we\n       want to return escaped bytes for any byte, even if they match\n       a UTF-8 string.\n    \"\"\"\n    if isinstance(val, bytes):\n        ret = _bytes_to_ascii(val)\n    else:\n        ret = val.encode(\"unicode_escape\").decode(\"ascii\")\n    return _translate_non_printable(ret)"}, "wcswidth": {"line": 43, "args": [{"func_args": {"s": "''"}, "return_value": "0"}, {"func_args": {"s": "'tests/test_cli.py::test_srcpath[None-/cwd/templates] PASSED'"}, "return_value": "59"}, {"func_args": {"s": "'tests/test_cli.py::test_srcpath[.-/cwd] PASSED'"}, "return_value": "46"}, {"func_args": {"s": "'tests/test_cli.py::test_srcpath[src-/cwd/src] PASSED'"}, "return_value": "52"}, {"func_args": {"s": "'tests/test_cli.py::test_srcpath[./src-/cwd/src] PASSED'"}, "return_value": "54"}, {"func_args": {"s": "'tests/test_cli.py::test_srcpath[/foo/src-/foo/src] PASSED'"}, "return_value": "57"}, {"func_args": {"s": "'tests/test_cli.py::test_outpath[None-/cwd] PASSED'"}, "return_value": "49"}, {"func_args": {"s": "'tests/test_cli.py::test_outpath[.-/cwd] PASSED'"}, "return_value": "46"}, {"func_args": {"s": "'tests/test_cli.py::test_outpath[src-/cwd/src] PASSED'"}, "return_value": "52"}, {"func_args": {"s": "'tests/test_cli.py::test_outpath[./src-/cwd/src] PASSED'"}, "return_value": "54"}, {"func_args": {"s": "'tests/test_cli.py::test_outpath[/foo/src-/foo/src] PASSED'"}, "return_value": "57"}, {"func_args": {"s": "'tests/test_cli.py::test_log PASSED'"}, "return_value": "34"}, {"func_args": {"s": "'tests/test_cli.py::test_watch[build-False] PASSED'"}, "return_value": "49"}, {"func_args": {"s": "'tests/test_cli.py::test_watch[watch-True] PASSED'"}, "return_value": "48"}, {"func_args": {"s": "'tests/test_cli.py::test_nonexistent_srcpath PASSED'"}, "return_value": "50"}, {"func_args": {"s": "'tests/test_cli.py::test_entrypoints_no_args[command0] PASSED'"}, "return_value": "60"}, {"func_args": {"s": "'tests/test_cli.py::test_entrypoints_no_args[command1] FAILED'"}, "return_value": "60"}, {"func_args": {"s": "'tests/test_examples.py::test_example[markdown] PASSED'"}, "return_value": "53"}, {"func_args": {"s": "'tests/test_examples.py::test_example[minimal-python] PASSED'"}, "return_value": "59"}, {"func_args": {"s": "'tests/test_examples.py::test_example[simple] PASSED'"}, "return_value": "51"}, {"func_args": {"s": "'tests/test_meta.py::test_versions_match PASSED'"}, "return_value": "46"}, {"func_args": {"s": "'tests/test_reloader.py::test_should_handle PASSED'"}, "return_value": "49"}, {"func_args": {"s": "'tests/test_reloader.py::test_event_handler PASSED'"}, "return_value": "49"}, {"func_args": {"s": "'tests/test_reloader.py::test_event_handler_static PASSED'"}, "return_value": "56"}, {"func_args": {"s": "'tests/test_staticjinja.py::test_template_names PASSED'"}, "return_value": "53"}, {"func_args": {"s": "'tests/test_staticjinja.py::test_templates PASSED'"}, "return_value": "48"}, {"func_args": {"s": "'tests/test_staticjinja.py::test_get_context PASSED'"}, "return_value": "50"}, {"func_args": {"s": "'tests/test_staticjinja.py::test_get_rule PASSED'"}, "return_value": "47"}, {"func_args": {"s": "'tests/test_staticjinja.py::test_get_dependents PASSED'"}, "return_value": "53"}, {"func_args": {"s": "'tests/test_staticjinja.py::test_render_template PASSED'"}, "return_value": "54"}, {"func_args": {"s": "'tests/test_staticjinja.py::test_render_nested_template PASSED'"}, "return_value": "61"}, {"func_args": {"s": "'tests/test_staticjinja.py::test_render_template_with_env_globals PASSED'"}, "return_value": "71"}, {"func_args": {"s": "'tests/test_staticjinja.py::test_render_templates PASSED'"}, "return_value": "55"}, {"func_args": {"s": "'tests/test_staticjinja.py::test_build PASSED'"}, "return_value": "44"}, {"func_args": {"s": "'tests/test_staticjinja.py::test_with_reloader PASSED'"}, "return_value": "52"}, {"func_args": {"s": "'tests/test_staticjinja.py::test_is_ignored[index.html-False] PASSED'"}, "return_value": "67"}, {"func_args": {"s": "'tests/test_staticjinja.py::test_is_ignored[.index.html-True] PASSED'"}, "return_value": "67"}, {"func_args": {"s": "'tests/test_staticjinja.py::test_is_ignored[_index.html-False] PASSED'"}, "return_value": "68"}, {"func_args": {"s": "'tests/test_staticjinja.py::test_is_ignored[normal/index.html-False] PASSED'"}, "return_value": "74"}, {"func_args": {"s": "'tests/test_staticjinja.py::test_is_ignored[.dotted/index.html-True] PASSED'"}, "return_value": "74"}, {"func_args": {"s": "'tests/test_staticjinja.py::test_is_ignored[normal/.index.html-True] PASSED'"}, "return_value": "74"}, {"func_args": {"s": "'tests/test_staticjinja.py::test_is_ignored[_undered/index.html-False] PASSED'"}, "return_value": "76"}, {"func_args": {"s": "'tests/test_staticjinja.py::test_is_ignored[undered/_index.html-False] PASSED'"}, "return_value": "76"}, {"func_args": {"s": "'tests/test_staticjinja.py::test_is_ignored[normal/normal2/index.html-False] PASSED'"}, "return_value": "82"}, {"func_args": {"s": "'tests/test_staticjinja.py::test_is_ignored[.dotted/normal/index.html-True] PASSED'"}, "return_value": "81"}, {"func_args": {"s": "'tests/test_staticjinja.py::test_is_ignored[normal/.dotted/index.html-True] PASSED'"}, "return_value": "81"}, {"func_args": {"s": "'tests/test_staticjinja.py::test_is_ignored[normal/normal2/.index.html-True] PASSED'"}, "return_value": "82"}, {"func_args": {"s": "'tests/test_staticjinja.py::test_is_ignored[_undered/normal/index.html-False] PASSED'"}, "return_value": "83"}, {"func_args": {"s": "'tests/test_staticjinja.py::test_is_ignored[normal/_undered/index.html-False] PASSED'"}, "return_value": "83"}, {"func_args": {"s": "'tests/test_staticjinja.py::test_is_ignored[normal/normal2/_index.html-False] PASSED'"}, "return_value": "83"}, {"func_args": {"s": "'tests/test_staticjinja.py::test_is_partial[index.html-False] PASSED'"}, "return_value": "67"}, {"func_args": {"s": "'tests/test_staticjinja.py::test_is_partial[.index.html-False] PASSED'"}, "return_value": "68"}, {"func_args": {"s": "'tests/test_staticjinja.py::test_is_partial[_index.html-True] PASSED'"}, "return_value": "67"}, {"func_args": {"s": "'tests/test_staticjinja.py::test_is_partial[normal/index.html-False] PASSED'"}, "return_value": "74"}, {"func_args": {"s": "'tests/test_staticjinja.py::test_is_partial[.dotted/index.html-False] PASSED'"}, "return_value": "75"}, {"func_args": {"s": "'tests/test_staticjinja.py::test_is_partial[normal/.index.html-False] PASSED'"}, "return_value": "75"}, {"func_args": {"s": "'tests/test_staticjinja.py::test_is_partial[_undered/index.html-True] PASSED'"}, "return_value": "75"}, {"func_args": {"s": "'tests/test_staticjinja.py::test_is_partial[undered/_index.html-True] PASSED'"}, "return_value": "75"}, {"func_args": {"s": "'tests/test_staticjinja.py::test_is_partial[normal/normal2/index.html-False] PASSED'"}, "return_value": "82"}, {"func_args": {"s": "'tests/test_staticjinja.py::test_is_partial[.dotted/normal/index.html-False] PASSED'"}, "return_value": "82"}, {"func_args": {"s": "'tests/test_staticjinja.py::test_is_partial[normal/.dotted/index.html-False] PASSED'"}, "return_value": "82"}, {"func_args": {"s": "'tests/test_staticjinja.py::test_is_partial[normal/normal2/.index.html-False] PASSED'"}, "return_value": "83"}, {"func_args": {"s": "'tests/test_staticjinja.py::test_is_partial[_undered/normal/index.html-True] PASSED'"}, "return_value": "82"}, {"func_args": {"s": "'tests/test_staticjinja.py::test_is_partial[normal/_undered/index.html-True] PASSED'"}, "return_value": "82"}, {"func_args": {"s": "'tests/test_staticjinja.py::test_is_partial[normal/normal2/_index.html-True] PASSED'"}, "return_value": "82"}, {"func_args": {"s": "'tests/test_staticjinja.py::test_path_absolute PASSED'"}, "return_value": "52"}, {"func_args": {"s": "'tests/test_staticjinja.py::test_path_relative_warning PASSED'"}, "return_value": "60"}, {"func_args": {"s": "'tests/test_staticjinja.py::test_path_relative_no_warning PASSED'"}, "return_value": "63"}, {"func_args": {"s": "'tests/test_staticjinja.py::test_followlinks PASSED'"}, "return_value": "50"}, {"func_args": {"s": "'FAILED tests/test_cli.py::test_entrypoints_no_args[command1]'"}, "return_value": "60"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "\"AssertionError: assert b'No such file as -m\\\\n' == b''\""}, "return_value": "53"}, {"func_args": {"s": "'AssertionError: a'"}, "return_value": "17"}, {"func_args": {"s": "'AssertionError: '"}, "return_value": "16"}, {"func_args": {"s": "'AssertionError:'"}, "return_value": "15"}, {"func_args": {"s": "'AssertionError'"}, "return_value": "14"}], "text": "def wcswidth(s: str) -> int:\n    \"\"\"Determine how many columns are needed to display a string in a terminal.\n\n    Returns -1 if the string contains non-printable characters.\n    \"\"\"\n    width = 0\n    for c in unicodedata.normalize(\"NFC\", s):\n        wc = wcwidth(c)\n        if wc < 0:\n            return -1\n        width += wc\n    return width"}, "wcwidth": {"line": 4, "args": [{"func_args": {"c": "'t'"}, "return_value": "1"}, {"func_args": {"c": "'e'"}, "return_value": "1"}, {"func_args": {"c": "'s'"}, "return_value": "1"}, {"func_args": {"c": "'/'"}, "return_value": "1"}, {"func_args": {"c": "'_'"}, "return_value": "1"}, {"func_args": {"c": "'c'"}, "return_value": "1"}, {"func_args": {"c": "'l'"}, "return_value": "1"}, {"func_args": {"c": "'i'"}, "return_value": "1"}, {"func_args": {"c": "'.'"}, "return_value": "1"}, {"func_args": {"c": "'p'"}, "return_value": "1"}, {"func_args": {"c": "'y'"}, "return_value": "1"}, {"func_args": {"c": "':'"}, "return_value": "1"}, {"func_args": {"c": "'r'"}, "return_value": "1"}, {"func_args": {"c": "'a'"}, "return_value": "1"}, {"func_args": {"c": "'h'"}, "return_value": "1"}, {"func_args": {"c": "'['"}, "return_value": "1"}, {"func_args": {"c": "'N'"}, "return_value": "1"}, {"func_args": {"c": "'o'"}, "return_value": "1"}, {"func_args": {"c": "'n'"}, "return_value": "1"}, {"func_args": {"c": "'-'"}, "return_value": "1"}, {"func_args": {"c": "'w'"}, "return_value": "1"}, {"func_args": {"c": "'d'"}, "return_value": "1"}, {"func_args": {"c": "'m'"}, "return_value": "1"}, {"func_args": {"c": "']'"}, "return_value": "1"}, {"func_args": {"c": "' '"}, "return_value": "1"}, {"func_args": {"c": "'P'"}, "return_value": "1"}, {"func_args": {"c": "'A'"}, "return_value": "1"}, {"func_args": {"c": "'S'"}, "return_value": "1"}, {"func_args": {"c": "'E'"}, "return_value": "1"}, {"func_args": {"c": "'D'"}, "return_value": "1"}, {"func_args": {"c": "'f'"}, "return_value": "1"}, {"func_args": {"c": "'u'"}, "return_value": "1"}, {"func_args": {"c": "'g'"}, "return_value": "1"}, {"func_args": {"c": "'b'"}, "return_value": "1"}, {"func_args": {"c": "'F'"}, "return_value": "1"}, {"func_args": {"c": "'T'"}, "return_value": "1"}, {"func_args": {"c": "'x'"}, "return_value": "1"}, {"func_args": {"c": "'0'"}, "return_value": "1"}, {"func_args": {"c": "'1'"}, "return_value": "1"}, {"func_args": {"c": "'I'"}, "return_value": "1"}, {"func_args": {"c": "'L'"}, "return_value": "1"}, {"func_args": {"c": "'k'"}, "return_value": "1"}, {"func_args": {"c": "'v'"}, "return_value": "1"}, {"func_args": {"c": "'j'"}, "return_value": "1"}, {"func_args": {"c": "'2'"}, "return_value": "1"}, {"func_args": {"c": "\"'\""}, "return_value": "1"}, {"func_args": {"c": "'\\\\'"}, "return_value": "1"}, {"func_args": {"c": "'='"}, "return_value": "1"}]}, "parse_section": {"line": 627, "args": [{"func_args": {"name": "'usage:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Usage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version']"}, {"func_args": {"name": "'options:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Options:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.']"}, {"func_args": {"name": "'options:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Options:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.']"}, {"func_args": {"name": "'options:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Options:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.']"}, {"func_args": {"name": "'usage:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Usage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version']"}, {"func_args": {"name": "'options:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Options:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.']"}, {"func_args": {"name": "'options:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Options:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.']"}, {"func_args": {"name": "'options:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Options:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.']"}, {"func_args": {"name": "'usage:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Usage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version']"}, {"func_args": {"name": "'options:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Options:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.']"}, {"func_args": {"name": "'options:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Options:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.']"}, {"func_args": {"name": "'options:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Options:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.']"}, {"func_args": {"name": "'usage:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Usage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version']"}, {"func_args": {"name": "'options:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Options:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.']"}, {"func_args": {"name": "'options:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Options:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.']"}, {"func_args": {"name": "'options:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Options:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.']"}, {"func_args": {"name": "'usage:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Usage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version']"}, {"func_args": {"name": "'options:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Options:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.']"}, {"func_args": {"name": "'options:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Options:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.']"}, {"func_args": {"name": "'options:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Options:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.']"}, {"func_args": {"name": "'usage:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Usage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version']"}, {"func_args": {"name": "'options:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Options:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.']"}, {"func_args": {"name": "'options:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Options:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.']"}, {"func_args": {"name": "'options:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Options:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.']"}, {"func_args": {"name": "'usage:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Usage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version']"}, {"func_args": {"name": "'options:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Options:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.']"}, {"func_args": {"name": "'options:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Options:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.']"}, {"func_args": {"name": "'options:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Options:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.']"}, {"func_args": {"name": "'usage:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Usage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version']"}, {"func_args": {"name": "'options:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Options:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.']"}, {"func_args": {"name": "'options:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Options:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.']"}, {"func_args": {"name": "'options:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Options:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.']"}, {"func_args": {"name": "'usage:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Usage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version']"}, {"func_args": {"name": "'options:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Options:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.']"}, {"func_args": {"name": "'options:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Options:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.']"}, {"func_args": {"name": "'options:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Options:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.']"}, {"func_args": {"name": "'usage:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Usage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version']"}, {"func_args": {"name": "'options:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Options:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.']"}, {"func_args": {"name": "'options:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Options:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.']"}, {"func_args": {"name": "'options:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Options:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.']"}, {"func_args": {"name": "'usage:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Usage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version']"}, {"func_args": {"name": "'options:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Options:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.']"}, {"func_args": {"name": "'options:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Options:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.']"}, {"func_args": {"name": "'options:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Options:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.']"}, {"func_args": {"name": "'usage:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Usage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version']"}, {"func_args": {"name": "'options:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Options:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.']"}, {"func_args": {"name": "'options:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Options:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.']"}, {"func_args": {"name": "'options:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Options:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.']"}, {"func_args": {"name": "'usage:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Usage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version']"}, {"func_args": {"name": "'options:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Options:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.']"}, {"func_args": {"name": "'options:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Options:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.']"}, {"func_args": {"name": "'options:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Options:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.']"}, {"func_args": {"name": "'usage:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Usage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version']"}, {"func_args": {"name": "'options:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Options:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.']"}, {"func_args": {"name": "'options:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Options:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.']"}, {"func_args": {"name": "'options:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Options:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.']"}, {"func_args": {"name": "'usage:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Usage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version']"}, {"func_args": {"name": "'options:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Options:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.']"}, {"func_args": {"name": "'options:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Options:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.']"}, {"func_args": {"name": "'options:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Options:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.']"}, {"func_args": {"name": "'usage:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Usage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version']"}, {"func_args": {"name": "'options:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Options:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.']"}, {"func_args": {"name": "'options:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Options:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.']"}, {"func_args": {"name": "'options:'", "source": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'"}, "return_value": "['Options:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.']"}], "text": "def parse_section(name: str, source: str) -> List[str]:\n    pattern = re.compile(\"^([^\\n]*\" + name + \"[^\\n]*\\n?(?:[ \\t].*?(?:\\n|$))*)\", re.IGNORECASE | re.MULTILINE)\n    r = [s.strip() for s in pattern.findall(source) if s.strip().lower() != name.lower()]\n    return r"}, "formal_usage": {"line": 633, "args": [{"func_args": {"section": "'Usage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version'"}, "return_value": "'( build [options] ) | ( watch [options] ) | ( -h | --help ) | ( --version )'"}, {"func_args": {"section": "'Usage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version'"}, "return_value": "'( build [options] ) | ( watch [options] ) | ( -h | --help ) | ( --version )'"}, {"func_args": {"section": "'Usage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version'"}, "return_value": "'( build [options] ) | ( watch [options] ) | ( -h | --help ) | ( --version )'"}, {"func_args": {"section": "'Usage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version'"}, "return_value": "'( build [options] ) | ( watch [options] ) | ( -h | --help ) | ( --version )'"}, {"func_args": {"section": "'Usage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version'"}, "return_value": "'( build [options] ) | ( watch [options] ) | ( -h | --help ) | ( --version )'"}, {"func_args": {"section": "'Usage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version'"}, "return_value": "'( build [options] ) | ( watch [options] ) | ( -h | --help ) | ( --version )'"}, {"func_args": {"section": "'Usage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version'"}, "return_value": "'( build [options] ) | ( watch [options] ) | ( -h | --help ) | ( --version )'"}, {"func_args": {"section": "'Usage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version'"}, "return_value": "'( build [options] ) | ( watch [options] ) | ( -h | --help ) | ( --version )'"}, {"func_args": {"section": "'Usage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version'"}, "return_value": "'( build [options] ) | ( watch [options] ) | ( -h | --help ) | ( --version )'"}, {"func_args": {"section": "'Usage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version'"}, "return_value": "'( build [options] ) | ( watch [options] ) | ( -h | --help ) | ( --version )'"}, {"func_args": {"section": "'Usage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version'"}, "return_value": "'( build [options] ) | ( watch [options] ) | ( -h | --help ) | ( --version )'"}, {"func_args": {"section": "'Usage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version'"}, "return_value": "'( build [options] ) | ( watch [options] ) | ( -h | --help ) | ( --version )'"}, {"func_args": {"section": "'Usage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version'"}, "return_value": "'( build [options] ) | ( watch [options] ) | ( -h | --help ) | ( --version )'"}, {"func_args": {"section": "'Usage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version'"}, "return_value": "'( build [options] ) | ( watch [options] ) | ( -h | --help ) | ( --version )'"}, {"func_args": {"section": "'Usage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version'"}, "return_value": "'( build [options] ) | ( watch [options] ) | ( -h | --help ) | ( --version )'"}, {"func_args": {"section": "'Usage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version'"}, "return_value": "'( build [options] ) | ( watch [options] ) | ( -h | --help ) | ( --version )'"}], "text": "def formal_usage(section: str) -> str:\n    _, _, section = section.partition(\":\")  # drop \"usage:\"\n    pu = section.split()\n    return \"( \" + \" \".join(\") | (\" if s == pu[0] else s for s in pu[1:]) + \" )\""}, "from_pattern": {"line": 380, "args": [{"func_args": {"source": "'( build [options] ) | ( watch [options] ) | ( -h | --help ) | ( --version )'"}, "return_value": "['(', 'build', '[', 'options', ']', ')', '|', '(', 'watch', '[', 'options', ']', ')', '|', '(', '-h', '|', '--help', ')', '|', '(', '--version', ')']"}, {"func_args": {"source": "'( build [options] ) | ( watch [options] ) | ( -h | --help ) | ( --version )'"}, "return_value": "['(', 'build', '[', 'options', ']', ')', '|', '(', 'watch', '[', 'options', ']', ')', '|', '(', '-h', '|', '--help', ')', '|', '(', '--version', ')']"}, {"func_args": {"source": "'( build [options] ) | ( watch [options] ) | ( -h | --help ) | ( --version )'"}, "return_value": "['(', 'build', '[', 'options', ']', ')', '|', '(', 'watch', '[', 'options', ']', ')', '|', '(', '-h', '|', '--help', ')', '|', '(', '--version', ')']"}, {"func_args": {"source": "'( build [options] ) | ( watch [options] ) | ( -h | --help ) | ( --version )'"}, "return_value": "['(', 'build', '[', 'options', ']', ')', '|', '(', 'watch', '[', 'options', ']', ')', '|', '(', '-h', '|', '--help', ')', '|', '(', '--version', ')']"}, {"func_args": {"source": "'( build [options] ) | ( watch [options] ) | ( -h | --help ) | ( --version )'"}, "return_value": "['(', 'build', '[', 'options', ']', ')', '|', '(', 'watch', '[', 'options', ']', ')', '|', '(', '-h', '|', '--help', ')', '|', '(', '--version', ')']"}, {"func_args": {"source": "'( build [options] ) | ( watch [options] ) | ( -h | --help ) | ( --version )'"}, "return_value": "['(', 'build', '[', 'options', ']', ')', '|', '(', 'watch', '[', 'options', ']', ')', '|', '(', '-h', '|', '--help', ')', '|', '(', '--version', ')']"}, {"func_args": {"source": "'( build [options] ) | ( watch [options] ) | ( -h | --help ) | ( --version )'"}, "return_value": "['(', 'build', '[', 'options', ']', ')', '|', '(', 'watch', '[', 'options', ']', ')', '|', '(', '-h', '|', '--help', ')', '|', '(', '--version', ')']"}, {"func_args": {"source": "'( build [options] ) | ( watch [options] ) | ( -h | --help ) | ( --version )'"}, "return_value": "['(', 'build', '[', 'options', ']', ')', '|', '(', 'watch', '[', 'options', ']', ')', '|', '(', '-h', '|', '--help', ')', '|', '(', '--version', ')']"}, {"func_args": {"source": "'( build [options] ) | ( watch [options] ) | ( -h | --help ) | ( --version )'"}, "return_value": "['(', 'build', '[', 'options', ']', ')', '|', '(', 'watch', '[', 'options', ']', ')', '|', '(', '-h', '|', '--help', ')', '|', '(', '--version', ')']"}, {"func_args": {"source": "'( build [options] ) | ( watch [options] ) | ( -h | --help ) | ( --version )'"}, "return_value": "['(', 'build', '[', 'options', ']', ')', '|', '(', 'watch', '[', 'options', ']', ')', '|', '(', '-h', '|', '--help', ')', '|', '(', '--version', ')']"}, {"func_args": {"source": "'( build [options] ) | ( watch [options] ) | ( -h | --help ) | ( --version )'"}, "return_value": "['(', 'build', '[', 'options', ']', ')', '|', '(', 'watch', '[', 'options', ']', ')', '|', '(', '-h', '|', '--help', ')', '|', '(', '--version', ')']"}, {"func_args": {"source": "'( build [options] ) | ( watch [options] ) | ( -h | --help ) | ( --version )'"}, "return_value": "['(', 'build', '[', 'options', ']', ')', '|', '(', 'watch', '[', 'options', ']', ')', '|', '(', '-h', '|', '--help', ')', '|', '(', '--version', ')']"}, {"func_args": {"source": "'( build [options] ) | ( watch [options] ) | ( -h | --help ) | ( --version )'"}, "return_value": "['(', 'build', '[', 'options', ']', ')', '|', '(', 'watch', '[', 'options', ']', ')', '|', '(', '-h', '|', '--help', ')', '|', '(', '--version', ')']"}, {"func_args": {"source": "'( build [options] ) | ( watch [options] ) | ( -h | --help ) | ( --version )'"}, "return_value": "['(', 'build', '[', 'options', ']', ')', '|', '(', 'watch', '[', 'options', ']', ')', '|', '(', '-h', '|', '--help', ')', '|', '(', '--version', ')']"}, {"func_args": {"source": "'( build [options] ) | ( watch [options] ) | ( -h | --help ) | ( --version )'"}, "return_value": "['(', 'build', '[', 'options', ']', ')', '|', '(', 'watch', '[', 'options', ']', ')', '|', '(', '-h', '|', '--help', ')', '|', '(', '--version', ')']"}, {"func_args": {"source": "'( build [options] ) | ( watch [options] ) | ( -h | --help ) | ( --version )'"}, "return_value": "['(', 'build', '[', 'options', ']', ')', '|', '(', 'watch', '[', 'options', ']', ')', '|', '(', '-h', '|', '--help', ')', '|', '(', '--version', ')']"}]}, "docopt": {"line": 656, "args": [{"func_args": {"docstring": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'", "argv": "['build']", "default_help": "True", "version": "'4.1.2'", "options_first": "False", "more_magic": "False"}, "return_value": "{'--help': False,\n '--log': 'info',\n '--outpath': './',\n '--srcpath': './templates',\n '--static': None,\n '--version': False,\n 'build': True,\n 'watch': False}"}, {"func_args": {"docstring": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'", "argv": "['build', '--srcpath=.']", "default_help": "True", "version": "'4.1.2'", "options_first": "False", "more_magic": "False"}, "return_value": "{'--help': False,\n '--log': 'info',\n '--outpath': './',\n '--srcpath': '.',\n '--static': None,\n '--version': False,\n 'build': True,\n 'watch': False}"}, {"func_args": {"docstring": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'", "argv": "['build', '--srcpath=src']", "default_help": "True", "version": "'4.1.2'", "options_first": "False", "more_magic": "False"}, "return_value": "{'--help': False,\n '--log': 'info',\n '--outpath': './',\n '--srcpath': 'src',\n '--static': None,\n '--version': False,\n 'build': True,\n 'watch': False}"}, {"func_args": {"docstring": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'", "argv": "['build', '--srcpath=./src']", "default_help": "True", "version": "'4.1.2'", "options_first": "False", "more_magic": "False"}, "return_value": "{'--help': False,\n '--log': 'info',\n '--outpath': './',\n '--srcpath': './src',\n '--static': None,\n '--version': False,\n 'build': True,\n 'watch': False}"}, {"func_args": {"docstring": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'", "argv": "['build', '--srcpath=/foo/src']", "default_help": "True", "version": "'4.1.2'", "options_first": "False", "more_magic": "False"}, "return_value": "{'--help': False,\n '--log': 'info',\n '--outpath': './',\n '--srcpath': '/foo/src',\n '--static': None,\n '--version': False,\n 'build': True,\n 'watch': False}"}, {"func_args": {"docstring": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'", "argv": "['build']", "default_help": "True", "version": "'4.1.2'", "options_first": "False", "more_magic": "False"}, "return_value": "{'--help': False,\n '--log': 'info',\n '--outpath': './',\n '--srcpath': './templates',\n '--static': None,\n '--version': False,\n 'build': True,\n 'watch': False}"}, {"func_args": {"docstring": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'", "argv": "['build', '--outpath=.']", "default_help": "True", "version": "'4.1.2'", "options_first": "False", "more_magic": "False"}, "return_value": "{'--help': False,\n '--log': 'info',\n '--outpath': '.',\n '--srcpath': './templates',\n '--static': None,\n '--version': False,\n 'build': True,\n 'watch': False}"}, {"func_args": {"docstring": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'", "argv": "['build', '--outpath=src']", "default_help": "True", "version": "'4.1.2'", "options_first": "False", "more_magic": "False"}, "return_value": "{'--help': False,\n '--log': 'info',\n '--outpath': 'src',\n '--srcpath': './templates',\n '--static': None,\n '--version': False,\n 'build': True,\n 'watch': False}"}, {"func_args": {"docstring": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'", "argv": "['build', '--outpath=./src']", "default_help": "True", "version": "'4.1.2'", "options_first": "False", "more_magic": "False"}, "return_value": "{'--help': False,\n '--log': 'info',\n '--outpath': './src',\n '--srcpath': './templates',\n '--static': None,\n '--version': False,\n 'build': True,\n 'watch': False}"}, {"func_args": {"docstring": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'", "argv": "['build', '--outpath=/foo/src']", "default_help": "True", "version": "'4.1.2'", "options_first": "False", "more_magic": "False"}, "return_value": "{'--help': False,\n '--log': 'info',\n '--outpath': '/foo/src',\n '--srcpath': './templates',\n '--static': None,\n '--version': False,\n 'build': True,\n 'watch': False}"}, {"func_args": {"docstring": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'", "argv": "['build', '--log=critical']", "default_help": "True", "version": "'4.1.2'", "options_first": "False", "more_magic": "False"}, "return_value": "{'--help': False,\n '--log': 'critical',\n '--outpath': './',\n '--srcpath': './templates',\n '--static': None,\n '--version': False,\n 'build': True,\n 'watch': False}"}, {"func_args": {"docstring": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'", "argv": "['build']", "default_help": "True", "version": "'4.1.2'", "options_first": "False", "more_magic": "False"}, "return_value": "{'--help': False,\n '--log': 'info',\n '--outpath': './',\n '--srcpath': './templates',\n '--static': None,\n '--version': False,\n 'build': True,\n 'watch': False}"}, {"func_args": {"docstring": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'", "argv": "['build', '--log=junk']", "default_help": "True", "version": "'4.1.2'", "options_first": "False", "more_magic": "False"}, "return_value": "{'--help': False,\n '--log': 'junk',\n '--outpath': './',\n '--srcpath': './templates',\n '--static': None,\n '--version': False,\n 'build': True,\n 'watch': False}"}, {"func_args": {"docstring": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'", "argv": "['build']", "default_help": "True", "version": "'4.1.2'", "options_first": "False", "more_magic": "False"}, "return_value": "{'--help': False,\n '--log': 'info',\n '--outpath': './',\n '--srcpath': './templates',\n '--static': None,\n '--version': False,\n 'build': True,\n 'watch': False}"}, {"func_args": {"docstring": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'", "argv": "['watch']", "default_help": "True", "version": "'4.1.2'", "options_first": "False", "more_magic": "False"}, "return_value": "{'--help': False,\n '--log': 'info',\n '--outpath': './',\n '--srcpath': './templates',\n '--static': None,\n '--version': False,\n 'build': False,\n 'watch': True}"}, {"func_args": {"docstring": "'staticjinja\\n\\nUsage:\\n  staticjinja build [options]\\n  staticjinja watch [options]\\n  staticjinja -h | --help\\n  staticjinja --version\\n\\nCommands:\\n  build      Render the site\\n  watch      Render the site, and re-render on changes to <srcpath>\\n\\nOptions:\\n  --srcpath=<srcpath>   Directory in which to build from [default: ./templates]\\n  --outpath=<outpath>   Directory in which to build to [default: ./]\\n  --static=<a,b,c>      Directory(s) within <srcpath> containing static files\\n  --log=<level>         Log level {debug,info,warn,error,critical} [default: info]\\n  -h --help             Show this screen.\\n  --version             Show version.\\n'", "argv": "['build', '--srcpath=/I/definitely/dont/exist']", "default_help": "True", "version": "'4.1.2'", "options_first": "False", "more_magic": "False"}, "return_value": "{'--help': False,\n '--log': 'info',\n '--outpath': './',\n '--srcpath': '/I/definitely/dont/exist',\n '--static': None,\n '--version': False,\n 'build': True,\n 'watch': False}"}], "text": "def docopt(\n    docstring: Optional[str] = None,\n    argv: Optional[Union[List[str], str]] = None,\n    default_help: bool = True,\n    version: Any = None,\n    options_first: bool = False,\n    more_magic: bool = False,\n) -> ParsedOptions:\n    \"\"\"Parse `argv` based on command-line interface described in `doc`.\n\n    `docopt` creates your command-line interface based on its\n    description that you pass as `docstring`. Such description can contain\n    --options, <positional-argument>, commands, which could be\n    [optional], (required), (mutually | exclusive) or repeated...\n\n    Parameters\n    ----------\n    docstring : str (default: first __doc__ in parent scope)\n        Description of your command-line interface.\n    argv : list of str, optional\n        Argument vector to be parsed. sys.argv[1:] is used if not\n        provided.\n    default_help : bool (default: True)\n        Set to False to disable automatic help on -h or --help\n        options.\n    version : any object\n        If passed, the object will be printed if --version is in\n        `argv`.\n    options_first : bool (default: False)\n        Set to True to require options precede positional arguments,\n        i.e. to forbid options and positional arguments intermix.\n    more_magic : bool (default: False)\n        Try to be extra-helpful; pull results into globals() of caller as 'arguments',\n        offer advanced pattern-matching and spellcheck.\n        Also activates if `docopt` aliased to a name containing 'magic'.\n\n    Returns\n    -------\n    arguments: dict-like\n        A dictionary, where keys are names of command-line elements\n        such as e.g. \"--verbose\" and \"<path>\", and values are the\n        parsed values of those elements. Also supports dot acccess.\n\n    Example\n    -------\n    >>> from docopt import docopt\n    >>> doc = '''\n    ... Usage:\n    ...     my_program tcp <host> <port> [--timeout=<seconds>]\n    ...     my_program serial <port> [--baud=<n>] [--timeout=<seconds>]\n    ...     my_program (-h | --help | --version)\n    ...\n    ... Options:\n    ...     -h, --help  Show this screen and exit.\n    ...     --baud=<n>  Baudrate [default: 9600]\n    ... '''\n    >>> argv = ['tcp', '127.0.0.1', '80', '--timeout', '30']\n    >>> docopt(doc, argv)\n    {'--baud': '9600',\n     '--help': False,\n     '--timeout': '30',\n     '--version': False,\n     '<host>': '127.0.0.1',\n     '<port>': '80',\n     'serial': False,\n     'tcp': True}\n\n    \"\"\"\n    argv = sys.argv[1:] if argv is None else argv\n    maybe_frame = inspect.currentframe()\n    if maybe_frame:\n        parent_frame = doc_parent_frame = magic_parent_frame = maybe_frame.f_back\n    if not more_magic:  # make sure 'magic' isn't in the calling name\n        while not more_magic and magic_parent_frame:\n            imported_as = {v: k for k, v in magic_parent_frame.f_globals.items() if hasattr(v, \"__name__\") and v.__name__ == docopt.__name__}.get(docopt)\n            if imported_as and \"magic\" in imported_as:\n                more_magic = True\n            else:\n                magic_parent_frame = magic_parent_frame.f_back\n    if not docstring:  # go look for one, if none exists, raise Exception\n        while not docstring and doc_parent_frame:\n            docstring = doc_parent_frame.f_locals.get(\"__doc__\")\n            if not docstring:\n                doc_parent_frame = doc_parent_frame.f_back\n        if not docstring:\n            raise DocoptLanguageError(\"Either __doc__ must be defined in the scope of a parent or passed as the first argument.\")\n    output_value_assigned = False\n    if more_magic and parent_frame:\n        import dis\n\n        instrs = dis.get_instructions(parent_frame.f_code)\n        for instr in instrs:\n            if instr.offset == parent_frame.f_lasti:\n                break\n        assert instr.opname.startswith(\"CALL_\")\n        MAYBE_STORE = next(instrs)\n        if MAYBE_STORE and (MAYBE_STORE.opname.startswith(\"STORE\") or MAYBE_STORE.opname.startswith(\"RETURN\")):\n            output_value_assigned = True\n    usage_sections = parse_section(\"usage:\", docstring)\n    if len(usage_sections) == 0:\n        raise DocoptLanguageError('\"usage:\" section (case-insensitive) not found. Perhaps missing indentation?')\n    if len(usage_sections) > 1:\n        raise DocoptLanguageError('More than one \"usage:\" (case-insensitive).')\n    options_pattern = re.compile(r\"\\n\\s*?options:\", re.IGNORECASE)\n    if options_pattern.search(usage_sections[0]):\n        raise DocoptExit(\"Warning: options (case-insensitive) was found in usage.\" \"Use a blank line between each section..\")\n    DocoptExit.usage = usage_sections[0]\n    options = parse_defaults(docstring)\n    pattern = parse_pattern(formal_usage(DocoptExit.usage), options)\n    pattern_options = set(pattern.flat(Option))\n    for options_shortcut in pattern.flat(OptionsShortcut):\n        doc_options = parse_defaults(docstring)\n        options_shortcut.children = [opt for opt in doc_options if opt not in pattern_options]\n    parsed_arg_vector = parse_argv(Tokens(argv), list(options), options_first, more_magic)\n    extras(default_help, version, parsed_arg_vector, docstring)\n    matched, left, collected = pattern.fix().match(parsed_arg_vector)\n    if matched and left == []:\n        output_obj = ParsedOptions((a.name, a.value) for a in (pattern.flat() + collected))\n        target_parent_frame = parent_frame or magic_parent_frame or doc_parent_frame\n        if more_magic and target_parent_frame and not output_value_assigned:\n            if not target_parent_frame.f_globals.get(\"arguments\"):\n                target_parent_frame.f_globals[\"arguments\"] = output_obj\n        return output_obj\n    if left:\n        raise DocoptExit(f\"Warning: found unmatched (duplicate?) arguments {left}\")\n    raise DocoptExit(collected=collected, left=left)"}, "resolve": {"line": 58, "args": [{"func_args": {"path": "'./templates'"}, "return_value": "'/cwd/templates'"}, {"func_args": {"path": "'./'"}, "return_value": "'/cwd'"}, {"func_args": {"path": "'.'"}, "return_value": "'/cwd'"}, {"func_args": {"path": "'./'"}, "return_value": "'/cwd'"}, {"func_args": {"path": "'src'"}, "return_value": "'/cwd/src'"}, {"func_args": {"path": "'./'"}, "return_value": "'/cwd'"}, {"func_args": {"path": "'./src'"}, "return_value": "'/cwd/src'"}, {"func_args": {"path": "'./'"}, "return_value": "'/cwd'"}, {"func_args": {"path": "'/foo/src'"}, "return_value": "'/foo/src'"}, {"func_args": {"path": "'./'"}, "return_value": "'/cwd'"}, {"func_args": {"path": "'./templates'"}, "return_value": "'/cwd/templates'"}, {"func_args": {"path": "'./'"}, "return_value": "'/cwd'"}, {"func_args": {"path": "'./templates'"}, "return_value": "'/cwd/templates'"}, {"func_args": {"path": "'.'"}, "return_value": "'/cwd'"}, {"func_args": {"path": "'./templates'"}, "return_value": "'/cwd/templates'"}, {"func_args": {"path": "'src'"}, "return_value": "'/cwd/src'"}, {"func_args": {"path": "'./templates'"}, "return_value": "'/cwd/templates'"}, {"func_args": {"path": "'./src'"}, "return_value": "'/cwd/src'"}, {"func_args": {"path": "'./templates'"}, "return_value": "'/cwd/templates'"}, {"func_args": {"path": "'/foo/src'"}, "return_value": "'/foo/src'"}, {"func_args": {"path": "'./templates'"}, "return_value": "'/cwd/templates'"}, {"func_args": {"path": "'./'"}, "return_value": "'/cwd'"}, {"func_args": {"path": "'./templates'"}, "return_value": "'/cwd/templates'"}, {"func_args": {"path": "'./'"}, "return_value": "'/cwd'"}, {"func_args": {"path": "'./templates'"}, "return_value": "'/cwd/templates'"}, {"func_args": {"path": "'./'"}, "return_value": "'/cwd'"}, {"func_args": {"path": "'./templates'"}, "return_value": "'/cwd/templates'"}, {"func_args": {"path": "'./'"}, "return_value": "'/cwd'"}, {"func_args": {"path": "'/I/definitely/dont/exist'"}, "return_value": "'/I/definitely/dont/exist'"}], "text": "def resolve(path):\n        if not os.path.isabs(path):\n            path = os.path.join(os.getcwd(), path)\n        return os.path.normpath(path)"}, "split_template_path": {"line": 23, "args": [{"func_args": {"template": "'template1.html'"}, "return_value": "['template1.html']"}, {"func_args": {"template": "'favicon.ico'"}, "return_value": "['favicon.ico']"}, {"func_args": {"template": "'static_css/hello.css'"}, "return_value": "['static_css', 'hello.css']"}, {"func_args": {"template": "'static_js/hello.js'"}, "return_value": "['static_js', 'hello.js']"}, {"func_args": {"template": "'sub/template3.html'"}, "return_value": "['sub', 'template3.html']"}, {"func_args": {"template": "'template1.html'"}, "return_value": "['template1.html']"}, {"func_args": {"template": "'template2.html'"}, "return_value": "['template2.html']"}, {"func_args": {"template": "'template4.html'"}, "return_value": "['template4.html']"}, {"func_args": {"template": "'template1.html'"}, "return_value": "['template1.html']"}, {"func_args": {"template": "'template2.html'"}, "return_value": "['template2.html']"}, {"func_args": {"template": "'sub/template3.html'"}, "return_value": "['sub', 'template3.html']"}, {"func_args": {"template": "'template4.html'"}, "return_value": "['template4.html']"}, {"func_args": {"template": "'template1.html'"}, "return_value": "['template1.html']"}, {"func_args": {"template": "'sub/template3.html'"}, "return_value": "['sub', 'template3.html']"}, {"func_args": {"template": "'template.html'"}, "return_value": "['template.html']"}, {"func_args": {"template": "'favicon.ico'"}, "return_value": "['favicon.ico']"}, {"func_args": {"template": "'static_css/hello.css'"}, "return_value": "['static_css', 'hello.css']"}, {"func_args": {"template": "'static_js/hello.js'"}, "return_value": "['static_js', 'hello.js']"}, {"func_args": {"template": "'sub/template3.html'"}, "return_value": "['sub', 'template3.html']"}, {"func_args": {"template": "'template1.html'"}, "return_value": "['template1.html']"}, {"func_args": {"template": "'template2.html'"}, "return_value": "['template2.html']"}, {"func_args": {"template": "'template4.html'"}, "return_value": "['template4.html']"}, {"func_args": {"template": "'favicon.ico'"}, "return_value": "['favicon.ico']"}, {"func_args": {"template": "'static_css/hello.css'"}, "return_value": "['static_css', 'hello.css']"}, {"func_args": {"template": "'static_js/hello.js'"}, "return_value": "['static_js', 'hello.js']"}, {"func_args": {"template": "'sub/template3.html'"}, "return_value": "['sub', 'template3.html']"}, {"func_args": {"template": "'template1.html'"}, "return_value": "['template1.html']"}, {"func_args": {"template": "'template2.html'"}, "return_value": "['template2.html']"}, {"func_args": {"template": "'template4.html'"}, "return_value": "['template4.html']"}, {"func_args": {"template": "'favicon.ico'"}, "return_value": "['favicon.ico']"}, {"func_args": {"template": "'static_css/hello.css'"}, "return_value": "['static_css', 'hello.css']"}, {"func_args": {"template": "'static_js/hello.js'"}, "return_value": "['static_js', 'hello.js']"}, {"func_args": {"template": "'sub/template3.html'"}, "return_value": "['sub', 'template3.html']"}, {"func_args": {"template": "'template1.html'"}, "return_value": "['template1.html']"}, {"func_args": {"template": "'template2.html'"}, "return_value": "['template2.html']"}, {"func_args": {"template": "'template4.html'"}, "return_value": "['template4.html']"}], "text": "def split_template_path(template: str) -> t.List[str]:\n    \"\"\"Split a path into segments and perform a sanity check.  If it detects\n    '..' in the path it will raise a `TemplateNotFound` error.\n    \"\"\"\n    pieces = []\n    for piece in template.split(\"/\"):\n        if (\n            os.path.sep in piece\n            or (os.path.altsep and os.path.altsep in piece)\n            or piece == os.path.pardir\n        ):\n            raise TemplateNotFound(template)\n        elif piece and piece != \".\":\n            pieces.append(piece)\n    return pieces"}, "uptodate": {"line": 206, "args": [{"func_args": {}, "return_value": "True"}, {"func_args": {}, "return_value": "True"}, {"func_args": {}, "return_value": "True"}, {"func_args": {}, "return_value": "True"}, {"func_args": {}, "return_value": "True"}, {"func_args": {}, "return_value": "True"}, {"func_args": {}, "return_value": "True"}, {"func_args": {}, "return_value": "True"}, {"func_args": {}, "return_value": "True"}], "text": "def uptodate() -> bool:\n                try:\n                    return os.path.getmtime(filename) == mtime\n                except OSError:\n                    return False"}, "safeformat": {"line": 65, "args": [{"func_args": {"obj": "b'No such file as -m\\n'"}, "return_value": "\"b'No such file as -m\\\\n'\""}, {"func_args": {"obj": "b''"}, "return_value": "\"b''\""}], "text": "def safeformat(obj: object) -> str:\n    \"\"\"Return a pretty printed string for the given object.\n\n    Failing __repr__ functions of user instances will be represented\n    with a short exception info.\n    \"\"\"\n    try:\n        return pprint.pformat(obj)\n    except Exception as exc:\n        return _format_repr_exception(exc, obj)"}, "_ellipsize": {"line": 29, "args": [{"func_args": {"s": "\"CompletedProcess(args=['viztracer', '--quiet', '--ignore_frozen', '--log_func_args', '--log_func_retval', '-o', 'result0.json', '--subprocess_child', '--dump_raw', '-o', '/tmp/tmphjnbjlgc/result.json', '--', '-m', 'staticjinja'], returncode=1, stdout=b'No such file as -m\\\\n', stderr=b'')\"", "maxsize": "240"}, "return_value": "\"CompletedProcess(args=['viztracer', '--quiet', '--ignore_frozen', '--log_func_args', '--log_func_retval', '-o', 'resul..., '/tmp/tmphjnbjlgc/result.json', '--', '-m', 'staticjinja'], returncode=1, stdout=b'No such file as -m\\\\n', stderr=b'')\""}, {"func_args": {"s": "\"CompletedProcess(args=['viztracer', '--quiet', '--ignore_frozen', '--log_func_args', '--log_func_retval', '-o', 'resul..., '/tmp/tmphjnbjlgc/result.json', '--', '-m', 'staticjinja'], returncode=1, stdout=b'No such file as -m\\\\n', stderr=b'')\"", "maxsize": "240"}, "return_value": "\"CompletedProcess(args=['viztracer', '--quiet', '--ignore_frozen', '--log_func_args', '--log_func_retval', '-o', 'resul..., '/tmp/tmphjnbjlgc/result.json', '--', '-m', 'staticjinja'], returncode=1, stdout=b'No such file as -m\\\\n', stderr=b'')\""}, {"func_args": {"s": "\"b'No such file as -m\\\\n'\"", "maxsize": "240"}, "return_value": "\"b'No such file as -m\\\\n'\""}, {"func_args": {"s": "\"b'No such file as -m\\\\n'\"", "maxsize": "240"}, "return_value": "\"b'No such file as -m\\\\n'\""}, {"func_args": {"s": "\"b''\"", "maxsize": "240"}, "return_value": "\"b''\""}, {"func_args": {"s": "\"b''\"", "maxsize": "240"}, "return_value": "\"b''\""}, {"func_args": {"s": "'AssertionError(\"assert b\\'No such file as -m\\\\\\\\n\\' == b\\'\\'\\\\n  Full diff:\\\\n  - b\\'\\'\\\\n  + b\\'No such file as -m\\\\\\\\n\\'\")'", "maxsize": "240"}, "return_value": "'AssertionError(\"assert b\\'No such file as -m\\\\\\\\n\\' == b\\'\\'\\\\n  Full diff:\\\\n  - b\\'\\'\\\\n  + b\\'No such file as -m\\\\\\\\n\\'\")'"}, {"func_args": {"s": "'AssertionError(\"assert b\\'No such file as -m\\\\\\\\n\\' == b\\'\\'\\\\n  Full diff:\\\\n  - b\\'\\'\\\\n  + b\\'No such file as -m\\\\\\\\n\\'\")'", "maxsize": "240"}, "return_value": "'AssertionError(\"assert b\\'No such file as -m\\\\\\\\n\\' == b\\'\\'\\\\n  Full diff:\\\\n  - b\\'\\'\\\\n  + b\\'No such file as -m\\\\\\\\n\\'\")'"}, {"func_args": {"s": "\"['/usr/app/src/test_repos/staticjinja/.tox/py38/bin/python', '-m', 'staticjinja']\"", "maxsize": "240"}, "return_value": "\"['/usr/app/src/test_repos/staticjinja/.tox/py38/bin/python', '-m', 'staticjinja']\""}], "text": "def _ellipsize(s: str, maxsize: int) -> str:\n    if len(s) > maxsize:\n        i = max(0, (maxsize - 3) // 2)\n        j = max(0, maxsize - 3 - i)\n        return s[:i] + \"...\" + s[len(s) - j :]\n    return s"}, "istext": {"line": 100, "args": [{"func_args": {"x": "b'No such file as -m\\n'"}, "return_value": "False"}, {"func_args": {"x": "b'No such file as -m\\n'"}, "return_value": "False"}, {"func_args": {"x": "b''"}, "return_value": "False"}], "text": "def istext(x: Any) -> bool:\n    return isinstance(x, str)"}, "isdatacls": {"line": 116, "args": [{"func_args": {"obj": "b'No such file as -m\\n'"}, "return_value": "False"}], "text": "def isdatacls(obj: Any) -> bool:\n    return getattr(obj, \"__dataclass_fields__\", None) is not None"}, "isattrs": {"line": 120, "args": [{"func_args": {"obj": "b'No such file as -m\\n'"}, "return_value": "False"}], "text": "def isattrs(obj: Any) -> bool:\n    return getattr(obj, \"__attrs_attrs__\", None) is not None"}, "isnamedtuple": {"line": 112, "args": [{"func_args": {"obj": "b'No such file as -m\\n'"}, "return_value": "False"}], "text": "def isnamedtuple(obj: Any) -> bool:\n    return isinstance(obj, tuple) and getattr(obj, \"_fields\", None) is not None"}, "issequence": {"line": 96, "args": [{"func_args": {"x": "b'No such file as -m\\n'"}, "return_value": "True"}, {"func_args": {"x": "b''"}, "return_value": "True"}], "text": "def issequence(x: Any) -> bool:\n    return isinstance(x, collections.abc.Sequence) and not isinstance(x, str)"}, "_compare_eq_sequence": {"line": 302, "args": [{"func_args": {"left": "b'No such file as -m\\n'", "right": "b''", "verbose": "2"}, "return_value": "[]"}], "text": "def _compare_eq_sequence(\n    left: Sequence[Any], right: Sequence[Any], verbose: int = 0\n) -> List[str]:\n    comparing_bytes = isinstance(left, bytes) and isinstance(right, bytes)\n    explanation: List[str] = []\n    len_left = len(left)\n    len_right = len(right)\n    for i in range(min(len_left, len_right)):\n        if left[i] != right[i]:\n            if comparing_bytes:\n                # when comparing bytes, we want to see their ascii representation\n                # instead of their numeric values (#5260)\n                # using a slice gives us the ascii representation:\n                # >>> s = b'foo'\n                # >>> s[0]\n                # 102\n                # >>> s[0:1]\n                # b'f'\n                left_value = left[i : i + 1]\n                right_value = right[i : i + 1]\n            else:\n                left_value = left[i]\n                right_value = right[i]\n\n            explanation += [f\"At index {i} diff: {left_value!r} != {right_value!r}\"]\n            break\n\n    if comparing_bytes:\n        # when comparing bytes, it doesn't help to show the \"sides contain one or more\n        # items\" longer explanation, so skip it\n\n        return explanation\n\n    len_diff = len_left - len_right\n    if len_diff:\n        if len_diff > 0:\n            dir_with_more = \"Left\"\n            extra = saferepr(left[len_right])\n        else:\n            len_diff = 0 - len_diff\n            dir_with_more = \"Right\"\n            extra = saferepr(right[len_left])\n\n        if len_diff == 1:\n            explanation += [f\"{dir_with_more} contains one more item: {extra}\"]\n        else:\n            explanation += [\n                \"%s contains %d more items, first extra item: %s\"\n                % (dir_with_more, len_diff, extra)\n            ]\n    return explanation"}, "isiterable": {"line": 124, "args": [{"func_args": {"obj": "b'No such file as -m\\n'"}, "return_value": "True"}, {"func_args": {"obj": "b''"}, "return_value": "True"}], "text": "def isiterable(obj: Any) -> bool:\n    try:\n        iter(obj)\n        return not istext(obj)\n    except TypeError:\n        return False"}, "_compare_eq_iterable": {"line": 271, "args": [{"func_args": {"left": "b'No such file as -m\\n'", "right": "b''", "verbose": "2"}, "return_value": "['Full diff:', \"- b''\", \"+ b'No such file as -m\\\\n'\"]"}], "text": "def _compare_eq_iterable(\n    left: Iterable[Any], right: Iterable[Any], verbose: int = 0\n) -> List[str]:\n    if not verbose:\n        return [\"Use -v to get the full diff\"]\n    # dynamic import to speedup pytest\n    import difflib\n\n    left_formatting = pprint.pformat(left).splitlines()\n    right_formatting = pprint.pformat(right).splitlines()\n\n    # Re-format for different output lengths.\n    lines_left = len(left_formatting)\n    lines_right = len(right_formatting)\n    if lines_left != lines_right:\n        left_formatting = _pformat_dispatch(left).splitlines()\n        right_formatting = _pformat_dispatch(right).splitlines()\n\n    if lines_left > 1 or lines_right > 1:\n        _surrounding_parens_on_own_lines(left_formatting)\n        _surrounding_parens_on_own_lines(right_formatting)\n\n    explanation = [\"Full diff:\"]\n    # \"right\" is the expected base against which we compare \"left\",\n    # see https://github.com/pytest-dev/pytest/issues/3333\n    explanation.extend(\n        line.rstrip() for line in difflib.ndiff(right_formatting, left_formatting)\n    )\n    return explanation"}, "_compare_eq_any": {"line": 172, "args": [{"func_args": {"left": "b'No such file as -m\\n'", "right": "b''", "verbose": "2"}, "return_value": "['Full diff:', \"- b''\", \"+ b'No such file as -m\\\\n'\"]"}], "text": "def _compare_eq_any(left: Any, right: Any, verbose: int = 0) -> List[str]:\n    explanation = []\n    if istext(left) and istext(right):\n        explanation = _diff_text(left, right, verbose)\n    else:\n        if type(left) == type(right) and (\n            isdatacls(left) or isattrs(left) or isnamedtuple(left)\n        ):\n            # Note: unlike dataclasses/attrs, namedtuples compare only the\n            # field values, not the type or field names. But this branch\n            # intentionally only handles the same-type case, which was often\n            # used in older code bases before dataclasses/attrs were available.\n            explanation = _compare_eq_cls(left, right, verbose)\n        elif issequence(left) and issequence(right):\n            explanation = _compare_eq_sequence(left, right, verbose)\n        elif isset(left) and isset(right):\n            explanation = _compare_eq_set(left, right, verbose)\n        elif isdict(left) and isdict(right):\n            explanation = _compare_eq_dict(left, right, verbose)\n        elif verbose > 0:\n            explanation = _compare_eq_verbose(left, right)\n        if isiterable(left) and isiterable(right):\n            expl = _compare_eq_iterable(left, right, verbose)\n            explanation.extend(expl)\n    return explanation"}, "_split_explanation": {"line": 44, "args": [{"func_args": {"explanation": "\"assert b'No such file as -m\\\\n' == b''\\n~Full diff:\\n~- b''\\n~+ b'No such file as -m\\\\n'\""}, "return_value": "[\"assert b'No such file as -m\\\\n' == b''\", '~Full diff:', \"~- b''\", \"~+ b'No such file as -m\\\\n'\"]"}], "text": "def _split_explanation(explanation: str) -> List[str]:\n    r\"\"\"Return a list of individual lines in the explanation.\n\n    This will return a list of lines split on '\\n{', '\\n}' and '\\n~'.\n    Any other newlines will be escaped and appear in the line as the\n    literal '\\n' characters.\n    \"\"\"\n    raw_lines = (explanation or \"\").split(\"\\n\")\n    lines = [raw_lines[0]]\n    for values in raw_lines[1:]:\n        if values and values[0] in [\"{\", \"}\", \"~\", \">\"]:\n            lines.append(values)\n        else:\n            lines[-1] += \"\\\\n\" + values\n    return lines"}, "_format_lines": {"line": 61, "args": [{"func_args": {"lines": "[\"assert b'No such file as -m\\\\n' == b''\", '~Full diff:', \"~- b''\", \"~+ b'No such file as -m\\\\n'\"]"}, "return_value": "[\"assert b'No such file as -m\\\\n' == b''\", '  Full diff:', \"  - b''\", \"  + b'No such file as -m\\\\n'\"]"}], "text": "def _format_lines(lines: Sequence[str]) -> List[str]:\n    \"\"\"Format the individual lines.\n\n    This will replace the '{', '}' and '~' characters of our mini formatting\n    language with the proper 'where ...', 'and ...' and ' + ...' text, taking\n    care of indentation along the way.\n\n    Return a list of formatted lines.\n    \"\"\"\n    result = list(lines[:1])\n    stack = [0]\n    stackcnt = [0]\n    for line in lines[1:]:\n        if line.startswith(\"{\"):\n            if stackcnt[-1]:\n                s = \"and   \"\n            else:\n                s = \"where \"\n            stack.append(len(result))\n            stackcnt[-1] += 1\n            stackcnt.append(0)\n            result.append(\" +\" + \"  \" * (len(stack) - 1) + s + line[1:])\n        elif line.startswith(\"}\"):\n            stack.pop()\n            stackcnt.pop()\n            result[stack[-1]] += line[1:]\n        else:\n            assert line[0] in [\"~\", \">\"]\n            stack[-1] += 1\n            indent = len(stack) if line.startswith(\"~\") else len(stack) - 1\n            result.append(\"  \" * indent + line[1:])\n    assert len(stack) == 1\n    return result"}, "format_explanation": {"line": 29, "args": [{"func_args": {"explanation": "\"assert b'No such file as -m\\\\n' == b''\\n~Full diff:\\n~- b''\\n~+ b'No such file as -m\\\\n'\""}, "return_value": "\"assert b'No such file as -m\\\\n' == b''\\n  Full diff:\\n  - b''\\n  + b'No such file as -m\\\\n'\""}], "text": "def format_explanation(explanation: str) -> str:\n    r\"\"\"Format an explanation.\n\n    Normally all embedded newlines are escaped, however there are\n    three exceptions: \\n{, \\n} and \\n~.  The first two are intended\n    cover nested explanations, see function and attribute explanations\n    for examples (.visit_Call(), visit_Attribute()).  The last one is\n    for when one explanation needs to span multiple lines, e.g. when\n    displaying diffs.\n    \"\"\"\n    lines = _split_explanation(explanation)\n    result = _format_lines(lines)\n    return \"\\n\".join(result)"}, "decode": {"line": 151, "args": [{"func_args": {"string": "'[tool.poetry]\\nname = \"staticjinja\"\\nversion = \"4.1.2\" # This needs to match what is in the source code.\\ndescription = \"jinja based static site generator\"\\nauthors = [\\n    \"Ceasar Bautista <cbautista2010@gmail.com>\",\\n]\\nmaintainers = [\\n    \"Nick Crews <nicholas.b.crews@gmail.com>\",\\n]\\nlicense = \"MIT\"\\n\\nreadme = \"README.rst\"\\n\\nhomepage = \"https://github.com/staticjinja/staticjinja\"\\nrepository = \"https://github.com/staticjinja/staticjinja\"\\ndocumentation = \"https://staticjinja.readthedocs.io\"\\n\\nkeywords = [\"jinja\", \"static\", \"website\"]\\nclassifiers = [\\n    \"Intended Audience :: Developers\",\\n    \"License :: OSI Approved :: MIT License\",\\n    \"Operating System :: OS Independent\",\\n    \"Programming Language :: Python\",\\n    \"Programming Language :: Python :: 3\",\\n    \"Programming Language :: Python :: 3.6\",\\n    \"Programming Language :: Python :: 3.7\",\\n    \"Programming Language :: Python :: 3.8\",\\n    \"Programming Language :: Python :: 3.9\",\\n    \"Topic :: Software Development :: Libraries :: Python Modules\",\\n    \"Development Status :: 5 - Production/Stable\",\\n]\\n\\n[tool.poetry.dependencies]\\npython = \"^3.6.2\"\\ndocopt-ng = \"^0.7.2\"\\neasywatch = \"^0.0.5\"\\njinja2 = \">=2.10.1, < 4\"\\n\\n# Dev dependencies\\nblack = { version = \"^21.12b0\", optional = true }\\nflake8 = { version = \"^3.8.4\", optional = true }\\nmarkdown = { version = \"^3.3.3\", optional = true }\\npytest = { version = \"^6.0.0\", optional = true }\\npytest-check = { version = \"^1.0.1\", optional = true }\\npytest-cov = { version = \"^2.5\", optional = true }\\nsphinx = { version = \"^4.1.1\", optional = true }\\nsphinx-rtd-theme = { version = \"^0.5.1\", optional = true }\\ntomlkit = { version = \"^0.5.8\", optional = true }\\ntox = { version = \"^3.0.0\", optional = true }\\ntwine = { version = \"^3.3.0\", optional = true }\\n\\n[tool.poetry.extras]\\ndev = [\\n    \"black\",\\n    \"flake8\",\\n    \"markdown\",\\n    \"pytest\",\\n    \"pytest-check\",\\n    \"pytest-cov\",\\n    \"sphinx\",\\n    \"sphinx-rtd-theme\",\\n    \"tomlkit\",\\n    \"tox\",\\n    \"twine\",\\n]\\n\\n[tool.poetry.scripts]\\nstaticjinja = \"staticjinja.cli:main\"\\n\\n[build-system]\\nrequires = [\"poetry-core>=1.0.0\"]\\nbuild-backend = \"poetry.core.masonry.api\"'", "encodings": "None"}, "return_value": "'[tool.poetry]\\nname = \"staticjinja\"\\nversion = \"4.1.2\" # This needs to match what is in the source code.\\ndescription = \"jinja based static site generator\"\\nauthors = [\\n    \"Ceasar Bautista <cbautista2010@gmail.com>\",\\n]\\nmaintainers = [\\n    \"Nick Crews <nicholas.b.crews@gmail.com>\",\\n]\\nlicense = \"MIT\"\\n\\nreadme = \"README.rst\"\\n\\nhomepage = \"https://github.com/staticjinja/staticjinja\"\\nrepository = \"https://github.com/staticjinja/staticjinja\"\\ndocumentation = \"https://staticjinja.readthedocs.io\"\\n\\nkeywords = [\"jinja\", \"static\", \"website\"]\\nclassifiers = [\\n    \"Intended Audience :: Developers\",\\n    \"License :: OSI Approved :: MIT License\",\\n    \"Operating System :: OS Independent\",\\n    \"Programming Language :: Python\",\\n    \"Programming Language :: Python :: 3\",\\n    \"Programming Language :: Python :: 3.6\",\\n    \"Programming Language :: Python :: 3.7\",\\n    \"Programming Language :: Python :: 3.8\",\\n    \"Programming Language :: Python :: 3.9\",\\n    \"Topic :: Software Development :: Libraries :: Python Modules\",\\n    \"Development Status :: 5 - Production/Stable\",\\n]\\n\\n[tool.poetry.dependencies]\\npython = \"^3.6.2\"\\ndocopt-ng = \"^0.7.2\"\\neasywatch = \"^0.0.5\"\\njinja2 = \">=2.10.1, < 4\"\\n\\n# Dev dependencies\\nblack = { version = \"^21.12b0\", optional = true }\\nflake8 = { version = \"^3.8.4\", optional = true }\\nmarkdown = { version = \"^3.3.3\", optional = true }\\npytest = { version = \"^6.0.0\", optional = true }\\npytest-check = { version = \"^1.0.1\", optional = true }\\npytest-cov = { version = \"^2.5\", optional = true }\\nsphinx = { version = \"^4.1.1\", optional = true }\\nsphinx-rtd-theme = { version = \"^0.5.1\", optional = true }\\ntomlkit = { version = \"^0.5.8\", optional = true }\\ntox = { version = \"^3.0.0\", optional = true }\\ntwine = { version = \"^3.3.0\", optional = true }\\n\\n[tool.poetry.extras]\\ndev = [\\n    \"black\",\\n    \"flake8\",\\n    \"markdown\",\\n    \"pytest\",\\n    \"pytest-check\",\\n    \"pytest-cov\",\\n    \"sphinx\",\\n    \"sphinx-rtd-theme\",\\n    \"tomlkit\",\\n    \"tox\",\\n    \"twine\",\\n]\\n\\n[tool.poetry.scripts]\\nstaticjinja = \"staticjinja.cli:main\"\\n\\n[build-system]\\nrequires = [\"poetry-core>=1.0.0\"]\\nbuild-backend = \"poetry.core.masonry.api\"'"}], "text": "def decode(string, encodings=None):\n    if not PY2 and not isinstance(string, bytes):\n        return string\n\n    if PY2 and isinstance(string, unicode):\n        return string\n\n    encodings = encodings or [\"utf-8\", \"latin1\", \"ascii\"]\n\n    for encoding in encodings:\n        try:\n            return string.decode(encoding)\n        except (UnicodeEncodeError, UnicodeDecodeError):\n            pass\n\n    return string.decode(encodings[0], errors=\"ignore\")"}, "parse": {"line": 46, "args": [{"func_args": {"string": "'[tool.poetry]\\nname = \"staticjinja\"\\nversion = \"4.1.2\" # This needs to match what is in the source code.\\ndescription = \"jinja based static site generator\"\\nauthors = [\\n    \"Ceasar Bautista <cbautista2010@gmail.com>\",\\n]\\nmaintainers = [\\n    \"Nick Crews <nicholas.b.crews@gmail.com>\",\\n]\\nlicense = \"MIT\"\\n\\nreadme = \"README.rst\"\\n\\nhomepage = \"https://github.com/staticjinja/staticjinja\"\\nrepository = \"https://github.com/staticjinja/staticjinja\"\\ndocumentation = \"https://staticjinja.readthedocs.io\"\\n\\nkeywords = [\"jinja\", \"static\", \"website\"]\\nclassifiers = [\\n    \"Intended Audience :: Developers\",\\n    \"License :: OSI Approved :: MIT License\",\\n    \"Operating System :: OS Independent\",\\n    \"Programming Language :: Python\",\\n    \"Programming Language :: Python :: 3\",\\n    \"Programming Language :: Python :: 3.6\",\\n    \"Programming Language :: Python :: 3.7\",\\n    \"Programming Language :: Python :: 3.8\",\\n    \"Programming Language :: Python :: 3.9\",\\n    \"Topic :: Software Development :: Libraries :: Python Modules\",\\n    \"Development Status :: 5 - Production/Stable\",\\n]\\n\\n[tool.poetry.dependencies]\\npython = \"^3.6.2\"\\ndocopt-ng = \"^0.7.2\"\\neasywatch = \"^0.0.5\"\\njinja2 = \">=2.10.1, < 4\"\\n\\n# Dev dependencies\\nblack = { version = \"^21.12b0\", optional = true }\\nflake8 = { version = \"^3.8.4\", optional = true }\\nmarkdown = { version = \"^3.3.3\", optional = true }\\npytest = { version = \"^6.0.0\", optional = true }\\npytest-check = { version = \"^1.0.1\", optional = true }\\npytest-cov = { version = \"^2.5\", optional = true }\\nsphinx = { version = \"^4.1.1\", optional = true }\\nsphinx-rtd-theme = { version = \"^0.5.1\", optional = true }\\ntomlkit = { version = \"^0.5.8\", optional = true }\\ntox = { version = \"^3.0.0\", optional = true }\\ntwine = { version = \"^3.3.0\", optional = true }\\n\\n[tool.poetry.extras]\\ndev = [\\n    \"black\",\\n    \"flake8\",\\n    \"markdown\",\\n    \"pytest\",\\n    \"pytest-check\",\\n    \"pytest-cov\",\\n    \"sphinx\",\\n    \"sphinx-rtd-theme\",\\n    \"tomlkit\",\\n    \"tox\",\\n    \"twine\",\\n]\\n\\n[tool.poetry.scripts]\\nstaticjinja = \"staticjinja.cli:main\"\\n\\n[build-system]\\nrequires = [\"poetry-core>=1.0.0\"]\\nbuild-backend = \"poetry.core.masonry.api\"'"}, "return_value": "{'tool': {'poetry': {'name': 'staticjinja', 'version': '4.1.2', 'description': 'jinja based static site generator', 'authors': ['Ceasar Bautista <cbautista2010@gmail.com>'], 'maintainers': ['Nick Crews <nicholas.b.crews@gmail.com>'], 'license': 'MIT', 'readme': 'README.rst', 'homepage': 'https://github.com/staticjinja/staticjinja', 'repository': 'https://github.com/staticjinja/staticjinja', 'documentation': 'https://staticjinja.readthedocs.io', 'keywords': ['jinja', 'static', 'website'], 'classifiers': ['Intended Audience :: Developers', 'License :: OSI Approved :: MIT License', 'Operating System :: OS Independent', 'Programming Language :: Python', 'Programming Language :: Python :: 3', 'Programming Language :: Python :: 3.6', 'Programming Language :: Python :: 3.7', 'Programming Language :: Python :: 3.8', 'Programming Language :: Python :: 3.9', 'Topic :: Software Development :: Libraries :: Python Modules', 'Development Status :: 5 - Production/Stable'], 'dependencies': {'python': '^3.6.2', 'docopt-ng': '^0.7.2', 'easywatch': '^0.0.5', 'jinja2': '>=2.10.1, < 4', 'black': {'version': '^21.12b0', 'optional': True}, 'flake8': {'version': '^3.8.4', 'optional': True}, 'markdown': {'version': '^3.3.3', 'optional': True}, 'pytest': {'version': '^6.0.0', 'optional': True}, 'pytest-check': {'version': '^1.0.1', 'optional': True}, 'pytest-cov': {'version': '^2.5', 'optional': True}, 'sphinx': {'version': '^4.1.1', 'optional': True}, 'sphinx-rtd-theme': {'version': '^0.5.1', 'optional': True}, 'tomlkit': {'version': '^0.5.8', 'optional': True}, 'tox': {'version': '^3.0.0', 'optional': True}, 'twine': {'version': '^3.3.0', 'optional': True}}, 'extras': {'dev': ['black', 'flake8', 'markdown', 'pytest', 'pytest-check', 'pytest-cov', 'sphinx', 'sphinx-rtd-theme', 'tomlkit', 'tox', 'twine']}, 'scripts': {'staticjinja': 'staticjinja.cli:main'}}}, 'build-system': {'requires': ['poetry-core>=1.0.0'], 'build-backend': 'poetry.core.masonry.api'}}"}], "text": "def parse(string):  # type: (str) -> _TOMLDocument\n    \"\"\"\n    Parses a string into a TOMLDocument.\n    \"\"\"\n    return Parser(string).parse()"}}