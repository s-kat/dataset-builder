{"bool_or_none": {"line": 174, "args": [{"func_args": {"b": "True"}, "return_value": "True"}, {"func_args": {"b": "True"}, "return_value": "True"}, {"func_args": {"b": "True"}, "return_value": "True"}, {"func_args": {"b": "True"}, "return_value": "True"}, {"func_args": {"b": "True"}, "return_value": "True"}], "text": "def bool_or_none(b):\n    \"\"\"Return bool(b), but preserve None.\"\"\"\n    if b is None:\n        return None\n    else:\n        return bool(b)"}, "tryint": {"line": 370, "args": [{"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale'"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/.tox/py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/.tox/py'"}, {"func_args": {"s": "'38'"}, "return_value": "38"}, {"func_args": {"s": "'/lib/python'"}, "return_value": "'/lib/python'"}, {"func_args": {"s": "'3'"}, "return_value": "3"}, {"func_args": {"s": "'.'"}, "return_value": "'.'"}, {"func_args": {"s": "'8'"}, "return_value": "8"}, {"func_args": {"s": "'/site-packages/coverage'"}, "return_value": "'/site-packages/coverage'"}, {"func_args": {"s": "'/root/.local/lib/python'"}, "return_value": "'/root/.local/lib/python'"}, {"func_args": {"s": "'3'"}, "return_value": "3"}, {"func_args": {"s": "'.'"}, "return_value": "'.'"}, {"func_args": {"s": "'8'"}, "return_value": "8"}, {"func_args": {"s": "'/site-packages'"}, "return_value": "'/site-packages'"}, {"func_args": {"s": "'/root/.local/bin'"}, "return_value": "'/root/.local/bin'"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/.tox/py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/.tox/py'"}, {"func_args": {"s": "'38'"}, "return_value": "38"}, {"func_args": {"s": "'/lib/python'"}, "return_value": "'/lib/python'"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/.tox/py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/.tox/py'"}, {"func_args": {"s": "'38'"}, "return_value": "38"}, {"func_args": {"s": "'/bin'"}, "return_value": "'/bin'"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/.tox/py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/.tox/py'"}, {"func_args": {"s": "'38'"}, "return_value": "38"}, {"func_args": {"s": "'/lib/python'"}, "return_value": "'/lib/python'"}, {"func_args": {"s": "'3'"}, "return_value": "3"}, {"func_args": {"s": "'.'"}, "return_value": "'.'"}, {"func_args": {"s": "'8'"}, "return_value": "8"}, {"func_args": {"s": "'/site-packages'"}, "return_value": "'/site-packages'"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale'"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/.tox/py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/.tox/py'"}, {"func_args": {"s": "'38'"}, "return_value": "38"}, {"func_args": {"s": "'/lib/python'"}, "return_value": "'/lib/python'"}, {"func_args": {"s": "'3'"}, "return_value": "3"}, {"func_args": {"s": "'.'"}, "return_value": "'.'"}, {"func_args": {"s": "'8'"}, "return_value": "8"}, {"func_args": {"s": "'/site-packages/coverage'"}, "return_value": "'/site-packages/coverage'"}, {"func_args": {"s": "'/root/.local/lib/python'"}, "return_value": "'/root/.local/lib/python'"}, {"func_args": {"s": "'3'"}, "return_value": "3"}, {"func_args": {"s": "'.'"}, "return_value": "'.'"}, {"func_args": {"s": "'8'"}, "return_value": "8"}, {"func_args": {"s": "'/site-packages'"}, "return_value": "'/site-packages'"}, {"func_args": {"s": "'/root/.local/bin'"}, "return_value": "'/root/.local/bin'"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/.tox/py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/.tox/py'"}, {"func_args": {"s": "'38'"}, "return_value": "38"}, {"func_args": {"s": "'/lib/python'"}, "return_value": "'/lib/python'"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/.tox/py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/.tox/py'"}, {"func_args": {"s": "'38'"}, "return_value": "38"}, {"func_args": {"s": "'/bin'"}, "return_value": "'/bin'"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/.tox/py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/.tox/py'"}, {"func_args": {"s": "'38'"}, "return_value": "38"}, {"func_args": {"s": "'/lib/python'"}, "return_value": "'/lib/python'"}, {"func_args": {"s": "'3'"}, "return_value": "3"}, {"func_args": {"s": "'.'"}, "return_value": "'.'"}, {"func_args": {"s": "'8'"}, "return_value": "8"}, {"func_args": {"s": "'/site-packages'"}, "return_value": "'/site-packages'"}, {"func_args": {"s": "'yamale/__init__.py                               '"}, "return_value": "'yamale/__init__.py                               '"}, {"func_args": {"s": "'3'"}, "return_value": "3"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'   '"}, "return_value": "'   '"}, {"func_args": {"s": "'100'"}, "return_value": "100"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'yamale/command_line.py                          '"}, "return_value": "'yamale/command_line.py                          '"}, {"func_args": {"s": "'86'"}, "return_value": "86"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'19'"}, "return_value": "19"}, {"func_args": {"s": "'    '"}, "return_value": "'    '"}, {"func_args": {"s": "'78'"}, "return_value": "78"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'32'"}, "return_value": "32"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'42'"}, "return_value": "42"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'47'"}, "return_value": "47"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'67'"}, "return_value": "67"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'85'"}, "return_value": "85"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'109'"}, "return_value": "109"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'126'"}, "return_value": "126"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'130'"}, "return_value": "130"}, {"func_args": {"s": "''"}, "return_value": "''"}, {"func_args": {"s": "'yamale/readers/__init__.py                       '"}, "return_value": "'yamale/readers/__init__.py                       '"}, {"func_args": {"s": "'2'"}, "return_value": "2"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'   '"}, "return_value": "'   '"}, {"func_args": {"s": "'100'"}, "return_value": "100"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'yamale/readers/tests/__init__.py                 '"}, "return_value": "'yamale/readers/tests/__init__.py                 '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'   '"}, "return_value": "'   '"}, {"func_args": {"s": "'100'"}, "return_value": "100"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'yamale/readers/tests/test_bad_file.py            '"}, "return_value": "'yamale/readers/tests/test_bad_file.py            '"}, {"func_args": {"s": "'8'"}, "return_value": "8"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'   '"}, "return_value": "'   '"}, {"func_args": {"s": "'100'"}, "return_value": "100"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'yamale/readers/tests/test_yaml.py               '"}, "return_value": "'yamale/readers/tests/test_yaml.py               '"}, {"func_args": {"s": "'37'"}, "return_value": "37"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'   '"}, "return_value": "'   '"}, {"func_args": {"s": "'100'"}, "return_value": "100"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'yamale/readers/yaml_reader.py                   '"}, "return_value": "'yamale/readers/yaml_reader.py                   '"}, {"func_args": {"s": "'25'"}, "return_value": "25"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'4'"}, "return_value": "4"}, {"func_args": {"s": "'    '"}, "return_value": "'    '"}, {"func_args": {"s": "'84'"}, "return_value": "84"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'9'"}, "return_value": "9"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'10'"}, "return_value": "10"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'29'"}, "return_value": "29"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'30'"}, "return_value": "30"}, {"func_args": {"s": "''"}, "return_value": "''"}, {"func_args": {"s": "'yamale/schema/__init__.py                        '"}, "return_value": "'yamale/schema/__init__.py                        '"}, {"func_args": {"s": "'1'"}, "return_value": "1"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'   '"}, "return_value": "'   '"}, {"func_args": {"s": "'100'"}, "return_value": "100"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'yamale/schema/datapath.py                       '"}, "return_value": "'yamale/schema/datapath.py                       '"}, {"func_args": {"s": "'11'"}, "return_value": "11"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'1'"}, "return_value": "1"}, {"func_args": {"s": "'    '"}, "return_value": "'    '"}, {"func_args": {"s": "'91'"}, "return_value": "91"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'15'"}, "return_value": "15"}, {"func_args": {"s": "''"}, "return_value": "''"}, {"func_args": {"s": "'yamale/schema/schema.py                        '"}, "return_value": "'yamale/schema/schema.py                        '"}, {"func_args": {"s": "'134'"}, "return_value": "134"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'3'"}, "return_value": "3"}, {"func_args": {"s": "'    '"}, "return_value": "'    '"}, {"func_args": {"s": "'98'"}, "return_value": "98"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'123'"}, "return_value": "123"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'165'"}, "return_value": "165"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'205'"}, "return_value": "205"}, {"func_args": {"s": "''"}, "return_value": "''"}, {"func_args": {"s": "'yamale/schema/validationresults.py              '"}, "return_value": "'yamale/schema/validationresults.py              '"}, {"func_args": {"s": "'24'"}, "return_value": "24"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'1'"}, "return_value": "1"}, {"func_args": {"s": "'    '"}, "return_value": "'    '"}, {"func_args": {"s": "'96'"}, "return_value": "96"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'20'"}, "return_value": "20"}, {"func_args": {"s": "''"}, "return_value": "''"}, {"func_args": {"s": "'yamale/syntax/__init__.py                        '"}, "return_value": "'yamale/syntax/__init__.py                        '"}, {"func_args": {"s": "'1'"}, "return_value": "1"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'   '"}, "return_value": "'   '"}, {"func_args": {"s": "'100'"}, "return_value": "100"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'yamale/syntax/parser.py                         '"}, "return_value": "'yamale/syntax/parser.py                         '"}, {"func_args": {"s": "'30'"}, "return_value": "30"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'   '"}, "return_value": "'   '"}, {"func_args": {"s": "'100'"}, "return_value": "100"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'yamale/syntax/tests/__init__.py                  '"}, "return_value": "'yamale/syntax/tests/__init__.py                  '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'   '"}, "return_value": "'   '"}, {"func_args": {"s": "'100'"}, "return_value": "100"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'yamale/syntax/tests/test_parser.py              '"}, "return_value": "'yamale/syntax/tests/test_parser.py              '"}, {"func_args": {"s": "'27'"}, "return_value": "27"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'   '"}, "return_value": "'   '"}, {"func_args": {"s": "'100'"}, "return_value": "100"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'yamale/tests/__init__.py                         '"}, "return_value": "'yamale/tests/__init__.py                         '"}, {"func_args": {"s": "'4'"}, "return_value": "4"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'   '"}, "return_value": "'   '"}, {"func_args": {"s": "'100'"}, "return_value": "100"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'yamale/tests/test_command_line.py               '"}, "return_value": "'yamale/tests/test_command_line.py               '"}, {"func_args": {"s": "'50'"}, "return_value": "50"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'   '"}, "return_value": "'   '"}, {"func_args": {"s": "'100'"}, "return_value": "100"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'yamale/tests/test_functional.py                '"}, "return_value": "'yamale/tests/test_functional.py                '"}, {"func_args": {"s": "'162'"}, "return_value": "162"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'   '"}, "return_value": "'   '"}, {"func_args": {"s": "'100'"}, "return_value": "100"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'yamale/tests/test_meta_test.py                  '"}, "return_value": "'yamale/tests/test_meta_test.py                  '"}, {"func_args": {"s": "'56'"}, "return_value": "56"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'   '"}, "return_value": "'   '"}, {"func_args": {"s": "'100'"}, "return_value": "100"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'yamale/util.py                                  '"}, "return_value": "'yamale/util.py                                  '"}, {"func_args": {"s": "'40'"}, "return_value": "40"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'8'"}, "return_value": "8"}, {"func_args": {"s": "'    '"}, "return_value": "'    '"}, {"func_args": {"s": "'80'"}, "return_value": "80"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'4'"}, "return_value": "4"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'5'"}, "return_value": "5"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'12'"}, "return_value": "12"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'16'"}, "return_value": "16"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'67'"}, "return_value": "67"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'73'"}, "return_value": "73"}, {"func_args": {"s": "''"}, "return_value": "''"}, {"func_args": {"s": "'yamale/validators/__init__.py                    '"}, "return_value": "'yamale/validators/__init__.py                    '"}, {"func_args": {"s": "'2'"}, "return_value": "2"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'   '"}, "return_value": "'   '"}, {"func_args": {"s": "'100'"}, "return_value": "100"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'yamale/validators/base.py                       '"}, "return_value": "'yamale/validators/base.py                       '"}, {"func_args": {"s": "'49'"}, "return_value": "49"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'3'"}, "return_value": "3"}, {"func_args": {"s": "'    '"}, "return_value": "'    '"}, {"func_args": {"s": "'94'"}, "return_value": "94"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'29'"}, "return_value": "29"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'42'"}, "return_value": "42"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'80'"}, "return_value": "80"}, {"func_args": {"s": "''"}, "return_value": "''"}, {"func_args": {"s": "'yamale/validators/constraints.py               '"}, "return_value": "'yamale/validators/constraints.py               '"}, {"func_args": {"s": "'179'"}, "return_value": "179"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'13'"}, "return_value": "13"}, {"func_args": {"s": "'    '"}, "return_value": "'    '"}, {"func_args": {"s": "'93'"}, "return_value": "93"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'45'"}, "return_value": "45"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'47'"}, "return_value": "47"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'59'"}, "return_value": "59"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'138'"}, "return_value": "138"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'159'"}, "return_value": "159"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'184'"}, "return_value": "184"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'218'"}, "return_value": "218"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'234'"}, "return_value": "234"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'236'"}, "return_value": "236"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'260'"}, "return_value": "260"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'261'"}, "return_value": "261"}, {"func_args": {"s": "''"}, "return_value": "''"}, {"func_args": {"s": "'yamale/validators/tests/__init__.py              '"}, "return_value": "'yamale/validators/tests/__init__.py              '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'   '"}, "return_value": "'   '"}, {"func_args": {"s": "'100'"}, "return_value": "100"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'yamale/validators/tests/test_constraint.py     '"}, "return_value": "'yamale/validators/tests/test_constraint.py     '"}, {"func_args": {"s": "'118'"}, "return_value": "118"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'   '"}, "return_value": "'   '"}, {"func_args": {"s": "'100'"}, "return_value": "100"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'yamale/validators/tests/test_validate.py       '"}, "return_value": "'yamale/validators/tests/test_validate.py       '"}, {"func_args": {"s": "'110'"}, "return_value": "110"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'   '"}, "return_value": "'   '"}, {"func_args": {"s": "'100'"}, "return_value": "100"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'yamale/validators/validators.py                '"}, "return_value": "'yamale/validators/validators.py                '"}, {"func_args": {"s": "'142'"}, "return_value": "142"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'3'"}, "return_value": "3"}, {"func_args": {"s": "'    '"}, "return_value": "'    '"}, {"func_args": {"s": "'98'"}, "return_value": "98"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'11'"}, "return_value": "11"}, {"func_args": {"s": "'-'"}, "return_value": "'-'"}, {"func_args": {"s": "'12'"}, "return_value": "12"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'132'"}, "return_value": "132"}, {"func_args": {"s": "''"}, "return_value": "''"}, {"func_args": {"s": "'yamale/yamale.py                                '"}, "return_value": "'yamale/yamale.py                                '"}, {"func_args": {"s": "'32'"}, "return_value": "32"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'   '"}, "return_value": "'   '"}, {"func_args": {"s": "'100'"}, "return_value": "100"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'yamale/yamale_error.py                           '"}, "return_value": "'yamale/yamale_error.py                           '"}, {"func_args": {"s": "'5'"}, "return_value": "5"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'   '"}, "return_value": "'   '"}, {"func_args": {"s": "'100'"}, "return_value": "100"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'yamale/yamale_testcase.py                       '"}, "return_value": "'yamale/yamale_testcase.py                       '"}, {"func_args": {"s": "'28'"}, "return_value": "28"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'2'"}, "return_value": "2"}, {"func_args": {"s": "'    '"}, "return_value": "'    '"}, {"func_args": {"s": "'93'"}, "return_value": "93"}, {"func_args": {"s": "'%   '"}, "return_value": "'%   '"}, {"func_args": {"s": "'27'"}, "return_value": "27"}, {"func_args": {"s": "', '"}, "return_value": "', '"}, {"func_args": {"s": "'47'"}, "return_value": "47"}, {"func_args": {"s": "''"}, "return_value": "''"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale'"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/.tox/py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/.tox/py'"}, {"func_args": {"s": "'38'"}, "return_value": "38"}, {"func_args": {"s": "'/lib/python'"}, "return_value": "'/lib/python'"}, {"func_args": {"s": "'3'"}, "return_value": "3"}, {"func_args": {"s": "'.'"}, "return_value": "'.'"}, {"func_args": {"s": "'8'"}, "return_value": "8"}, {"func_args": {"s": "'/site-packages/coverage'"}, "return_value": "'/site-packages/coverage'"}, {"func_args": {"s": "'/root/.local/lib/python'"}, "return_value": "'/root/.local/lib/python'"}, {"func_args": {"s": "'3'"}, "return_value": "3"}, {"func_args": {"s": "'.'"}, "return_value": "'.'"}, {"func_args": {"s": "'8'"}, "return_value": "8"}, {"func_args": {"s": "'/site-packages'"}, "return_value": "'/site-packages'"}, {"func_args": {"s": "'/root/.local/bin'"}, "return_value": "'/root/.local/bin'"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/.tox/py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/.tox/py'"}, {"func_args": {"s": "'38'"}, "return_value": "38"}, {"func_args": {"s": "'/lib/python'"}, "return_value": "'/lib/python'"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/.tox/py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/.tox/py'"}, {"func_args": {"s": "'38'"}, "return_value": "38"}, {"func_args": {"s": "'/bin'"}, "return_value": "'/bin'"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/.tox/py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/.tox/py'"}, {"func_args": {"s": "'38'"}, "return_value": "38"}, {"func_args": {"s": "'/lib/python'"}, "return_value": "'/lib/python'"}, {"func_args": {"s": "'3'"}, "return_value": "3"}, {"func_args": {"s": "'.'"}, "return_value": "'.'"}, {"func_args": {"s": "'8'"}, "return_value": "8"}, {"func_args": {"s": "'/site-packages'"}, "return_value": "'/site-packages'"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale'"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/.tox/py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/.tox/py'"}, {"func_args": {"s": "'38'"}, "return_value": "38"}, {"func_args": {"s": "'/lib/python'"}, "return_value": "'/lib/python'"}, {"func_args": {"s": "'3'"}, "return_value": "3"}, {"func_args": {"s": "'.'"}, "return_value": "'.'"}, {"func_args": {"s": "'8'"}, "return_value": "8"}, {"func_args": {"s": "'/site-packages/coverage'"}, "return_value": "'/site-packages/coverage'"}, {"func_args": {"s": "'/root/.local/lib/python'"}, "return_value": "'/root/.local/lib/python'"}, {"func_args": {"s": "'3'"}, "return_value": "3"}, {"func_args": {"s": "'.'"}, "return_value": "'.'"}, {"func_args": {"s": "'8'"}, "return_value": "8"}, {"func_args": {"s": "'/site-packages'"}, "return_value": "'/site-packages'"}, {"func_args": {"s": "'/root/.local/bin'"}, "return_value": "'/root/.local/bin'"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/.tox/py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/.tox/py'"}, {"func_args": {"s": "'38'"}, "return_value": "38"}, {"func_args": {"s": "'/lib/python'"}, "return_value": "'/lib/python'"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/.tox/py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/.tox/py'"}, {"func_args": {"s": "'38'"}, "return_value": "38"}, {"func_args": {"s": "'/bin'"}, "return_value": "'/bin'"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/.tox/py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/.tox/py'"}, {"func_args": {"s": "'38'"}, "return_value": "38"}, {"func_args": {"s": "'/lib/python'"}, "return_value": "'/lib/python'"}, {"func_args": {"s": "'3'"}, "return_value": "3"}, {"func_args": {"s": "'.'"}, "return_value": "'.'"}, {"func_args": {"s": "'8'"}, "return_value": "8"}, {"func_args": {"s": "'/site-packages'"}, "return_value": "'/site-packages'"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale'"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/.tox/py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/.tox/py'"}, {"func_args": {"s": "'38'"}, "return_value": "38"}, {"func_args": {"s": "'/lib/python'"}, "return_value": "'/lib/python'"}, {"func_args": {"s": "'3'"}, "return_value": "3"}, {"func_args": {"s": "'.'"}, "return_value": "'.'"}, {"func_args": {"s": "'8'"}, "return_value": "8"}, {"func_args": {"s": "'/site-packages/coverage'"}, "return_value": "'/site-packages/coverage'"}, {"func_args": {"s": "'/root/.local/lib/python'"}, "return_value": "'/root/.local/lib/python'"}, {"func_args": {"s": "'3'"}, "return_value": "3"}, {"func_args": {"s": "'.'"}, "return_value": "'.'"}, {"func_args": {"s": "'8'"}, "return_value": "8"}, {"func_args": {"s": "'/site-packages'"}, "return_value": "'/site-packages'"}, {"func_args": {"s": "'/root/.local/bin'"}, "return_value": "'/root/.local/bin'"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/.tox/py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/.tox/py'"}, {"func_args": {"s": "'38'"}, "return_value": "38"}, {"func_args": {"s": "'/lib/python'"}, "return_value": "'/lib/python'"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/.tox/py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/.tox/py'"}, {"func_args": {"s": "'38'"}, "return_value": "38"}, {"func_args": {"s": "'/bin'"}, "return_value": "'/bin'"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/.tox/py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/.tox/py'"}, {"func_args": {"s": "'38'"}, "return_value": "38"}, {"func_args": {"s": "'/lib/python'"}, "return_value": "'/lib/python'"}, {"func_args": {"s": "'3'"}, "return_value": "3"}, {"func_args": {"s": "'.'"}, "return_value": "'.'"}, {"func_args": {"s": "'8'"}, "return_value": "8"}, {"func_args": {"s": "'/site-packages'"}, "return_value": "'/site-packages'"}], "text": "def tryint(s):\n        \"\"\"If `s` is a number, return an int, else `s` unchanged.\"\"\"\n        try:\n            return int(s)\n        except ValueError:\n            return s"}, "human_key": {"line": 366, "args": [{"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "['/usr/app/src/test_repos/Yamale/yamale']"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/coverage'"}, "return_value": "['/usr/app/src/test_repos/Yamale/.tox/py', 38, '/lib/python', 3, '.', 8, '/site-packages/coverage']"}, {"func_args": {"s": "'/root/.local/lib/python3.8/site-packages'"}, "return_value": "['/root/.local/lib/python', 3, '.', 8, '/site-packages']"}, {"func_args": {"s": "'/root/.local/bin'"}, "return_value": "['/root/.local/bin']"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/.tox/py38/lib/python'"}, "return_value": "['/usr/app/src/test_repos/Yamale/.tox/py', 38, '/lib/python']"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/.tox/py38/bin'"}, "return_value": "['/usr/app/src/test_repos/Yamale/.tox/py', 38, '/bin']"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages'"}, "return_value": "['/usr/app/src/test_repos/Yamale/.tox/py', 38, '/lib/python', 3, '.', 8, '/site-packages']"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "['/usr/app/src/test_repos/Yamale/yamale']"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/coverage'"}, "return_value": "['/usr/app/src/test_repos/Yamale/.tox/py', 38, '/lib/python', 3, '.', 8, '/site-packages/coverage']"}, {"func_args": {"s": "'/root/.local/lib/python3.8/site-packages'"}, "return_value": "['/root/.local/lib/python', 3, '.', 8, '/site-packages']"}, {"func_args": {"s": "'/root/.local/bin'"}, "return_value": "['/root/.local/bin']"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/.tox/py38/lib/python'"}, "return_value": "['/usr/app/src/test_repos/Yamale/.tox/py', 38, '/lib/python']"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/.tox/py38/bin'"}, "return_value": "['/usr/app/src/test_repos/Yamale/.tox/py', 38, '/bin']"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages'"}, "return_value": "['/usr/app/src/test_repos/Yamale/.tox/py', 38, '/lib/python', 3, '.', 8, '/site-packages']"}, {"func_args": {"s": "'yamale/__init__.py                               3      0   100%   '"}, "return_value": "['yamale/__init__.py                               ', 3, '      ', 0, '   ', 100, '%   ']"}, {"func_args": {"s": "'yamale/command_line.py                          86     19    78%   32, 42, 47, 67, 85, 109-126, 130'"}, "return_value": "['yamale/command_line.py                          ', 86, '     ', 19, '    ', 78, '%   ', 32, ', ', 42, ', ', 47, ', ', 67, ', ', 85, ', ', 109, '-', 126, ', ', 130, '']"}, {"func_args": {"s": "'yamale/readers/__init__.py                       2      0   100%   '"}, "return_value": "['yamale/readers/__init__.py                       ', 2, '      ', 0, '   ', 100, '%   ']"}, {"func_args": {"s": "'yamale/readers/tests/__init__.py                 0      0   100%   '"}, "return_value": "['yamale/readers/tests/__init__.py                 ', 0, '      ', 0, '   ', 100, '%   ']"}, {"func_args": {"s": "'yamale/readers/tests/test_bad_file.py            8      0   100%   '"}, "return_value": "['yamale/readers/tests/test_bad_file.py            ', 8, '      ', 0, '   ', 100, '%   ']"}, {"func_args": {"s": "'yamale/readers/tests/test_yaml.py               37      0   100%   '"}, "return_value": "['yamale/readers/tests/test_yaml.py               ', 37, '      ', 0, '   ', 100, '%   ']"}, {"func_args": {"s": "'yamale/readers/yaml_reader.py                   25      4    84%   9-10, 29-30'"}, "return_value": "['yamale/readers/yaml_reader.py                   ', 25, '      ', 4, '    ', 84, '%   ', 9, '-', 10, ', ', 29, '-', 30, '']"}, {"func_args": {"s": "'yamale/schema/__init__.py                        1      0   100%   '"}, "return_value": "['yamale/schema/__init__.py                        ', 1, '      ', 0, '   ', 100, '%   ']"}, {"func_args": {"s": "'yamale/schema/datapath.py                       11      1    91%   15'"}, "return_value": "['yamale/schema/datapath.py                       ', 11, '      ', 1, '    ', 91, '%   ', 15, '']"}, {"func_args": {"s": "'yamale/schema/schema.py                        134      3    98%   123, 165, 205'"}, "return_value": "['yamale/schema/schema.py                        ', 134, '      ', 3, '    ', 98, '%   ', 123, ', ', 165, ', ', 205, '']"}, {"func_args": {"s": "'yamale/schema/validationresults.py              24      1    96%   20'"}, "return_value": "['yamale/schema/validationresults.py              ', 24, '      ', 1, '    ', 96, '%   ', 20, '']"}, {"func_args": {"s": "'yamale/syntax/__init__.py                        1      0   100%   '"}, "return_value": "['yamale/syntax/__init__.py                        ', 1, '      ', 0, '   ', 100, '%   ']"}, {"func_args": {"s": "'yamale/syntax/parser.py                         30      0   100%   '"}, "return_value": "['yamale/syntax/parser.py                         ', 30, '      ', 0, '   ', 100, '%   ']"}, {"func_args": {"s": "'yamale/syntax/tests/__init__.py                  0      0   100%   '"}, "return_value": "['yamale/syntax/tests/__init__.py                  ', 0, '      ', 0, '   ', 100, '%   ']"}, {"func_args": {"s": "'yamale/syntax/tests/test_parser.py              27      0   100%   '"}, "return_value": "['yamale/syntax/tests/test_parser.py              ', 27, '      ', 0, '   ', 100, '%   ']"}, {"func_args": {"s": "'yamale/tests/__init__.py                         4      0   100%   '"}, "return_value": "['yamale/tests/__init__.py                         ', 4, '      ', 0, '   ', 100, '%   ']"}, {"func_args": {"s": "'yamale/tests/test_command_line.py               50      0   100%   '"}, "return_value": "['yamale/tests/test_command_line.py               ', 50, '      ', 0, '   ', 100, '%   ']"}, {"func_args": {"s": "'yamale/tests/test_functional.py                162      0   100%   '"}, "return_value": "['yamale/tests/test_functional.py                ', 162, '      ', 0, '   ', 100, '%   ']"}, {"func_args": {"s": "'yamale/tests/test_meta_test.py                  56      0   100%   '"}, "return_value": "['yamale/tests/test_meta_test.py                  ', 56, '      ', 0, '   ', 100, '%   ']"}, {"func_args": {"s": "'yamale/util.py                                  40      8    80%   4-5, 12-16, 67, 73'"}, "return_value": "['yamale/util.py                                  ', 40, '      ', 8, '    ', 80, '%   ', 4, '-', 5, ', ', 12, '-', 16, ', ', 67, ', ', 73, '']"}, {"func_args": {"s": "'yamale/validators/__init__.py                    2      0   100%   '"}, "return_value": "['yamale/validators/__init__.py                    ', 2, '      ', 0, '   ', 100, '%   ']"}, {"func_args": {"s": "'yamale/validators/base.py                       49      3    94%   29, 42, 80'"}, "return_value": "['yamale/validators/base.py                       ', 49, '      ', 3, '    ', 94, '%   ', 29, ', ', 42, ', ', 80, '']"}, {"func_args": {"s": "'yamale/validators/constraints.py               179     13    93%   45-47, 59, 138, 159, 184, 218, 234-236, 260-261'"}, "return_value": "['yamale/validators/constraints.py               ', 179, '     ', 13, '    ', 93, '%   ', 45, '-', 47, ', ', 59, ', ', 138, ', ', 159, ', ', 184, ', ', 218, ', ', 234, '-', 236, ', ', 260, '-', 261, '']"}, {"func_args": {"s": "'yamale/validators/tests/__init__.py              0      0   100%   '"}, "return_value": "['yamale/validators/tests/__init__.py              ', 0, '      ', 0, '   ', 100, '%   ']"}, {"func_args": {"s": "'yamale/validators/tests/test_constraint.py     118      0   100%   '"}, "return_value": "['yamale/validators/tests/test_constraint.py     ', 118, '      ', 0, '   ', 100, '%   ']"}, {"func_args": {"s": "'yamale/validators/tests/test_validate.py       110      0   100%   '"}, "return_value": "['yamale/validators/tests/test_validate.py       ', 110, '      ', 0, '   ', 100, '%   ']"}, {"func_args": {"s": "'yamale/validators/validators.py                142      3    98%   11-12, 132'"}, "return_value": "['yamale/validators/validators.py                ', 142, '      ', 3, '    ', 98, '%   ', 11, '-', 12, ', ', 132, '']"}, {"func_args": {"s": "'yamale/yamale.py                                32      0   100%   '"}, "return_value": "['yamale/yamale.py                                ', 32, '      ', 0, '   ', 100, '%   ']"}, {"func_args": {"s": "'yamale/yamale_error.py                           5      0   100%   '"}, "return_value": "['yamale/yamale_error.py                           ', 5, '      ', 0, '   ', 100, '%   ']"}, {"func_args": {"s": "'yamale/yamale_testcase.py                       28      2    93%   27, 47'"}, "return_value": "['yamale/yamale_testcase.py                       ', 28, '      ', 2, '    ', 93, '%   ', 27, ', ', 47, '']"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "['/usr/app/src/test_repos/Yamale/yamale']"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/coverage'"}, "return_value": "['/usr/app/src/test_repos/Yamale/.tox/py', 38, '/lib/python', 3, '.', 8, '/site-packages/coverage']"}, {"func_args": {"s": "'/root/.local/lib/python3.8/site-packages'"}, "return_value": "['/root/.local/lib/python', 3, '.', 8, '/site-packages']"}, {"func_args": {"s": "'/root/.local/bin'"}, "return_value": "['/root/.local/bin']"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/.tox/py38/lib/python'"}, "return_value": "['/usr/app/src/test_repos/Yamale/.tox/py', 38, '/lib/python']"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/.tox/py38/bin'"}, "return_value": "['/usr/app/src/test_repos/Yamale/.tox/py', 38, '/bin']"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages'"}, "return_value": "['/usr/app/src/test_repos/Yamale/.tox/py', 38, '/lib/python', 3, '.', 8, '/site-packages']"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "['/usr/app/src/test_repos/Yamale/yamale']"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/coverage'"}, "return_value": "['/usr/app/src/test_repos/Yamale/.tox/py', 38, '/lib/python', 3, '.', 8, '/site-packages/coverage']"}, {"func_args": {"s": "'/root/.local/lib/python3.8/site-packages'"}, "return_value": "['/root/.local/lib/python', 3, '.', 8, '/site-packages']"}, {"func_args": {"s": "'/root/.local/bin'"}, "return_value": "['/root/.local/bin']"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/.tox/py38/lib/python'"}, "return_value": "['/usr/app/src/test_repos/Yamale/.tox/py', 38, '/lib/python']"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/.tox/py38/bin'"}, "return_value": "['/usr/app/src/test_repos/Yamale/.tox/py', 38, '/bin']"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages'"}, "return_value": "['/usr/app/src/test_repos/Yamale/.tox/py', 38, '/lib/python', 3, '.', 8, '/site-packages']"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "['/usr/app/src/test_repos/Yamale/yamale']"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/coverage'"}, "return_value": "['/usr/app/src/test_repos/Yamale/.tox/py', 38, '/lib/python', 3, '.', 8, '/site-packages/coverage']"}, {"func_args": {"s": "'/root/.local/lib/python3.8/site-packages'"}, "return_value": "['/root/.local/lib/python', 3, '.', 8, '/site-packages']"}, {"func_args": {"s": "'/root/.local/bin'"}, "return_value": "['/root/.local/bin']"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/.tox/py38/lib/python'"}, "return_value": "['/usr/app/src/test_repos/Yamale/.tox/py', 38, '/lib/python']"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/.tox/py38/bin'"}, "return_value": "['/usr/app/src/test_repos/Yamale/.tox/py', 38, '/bin']"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages'"}, "return_value": "['/usr/app/src/test_repos/Yamale/.tox/py', 38, '/lib/python', 3, '.', 8, '/site-packages']"}], "text": "def human_key(s):\n    \"\"\"Turn a string into a list of string and number chunks.\n        \"z23a\" -> [\"z\", 23, \"a\"]\n    \"\"\"\n    def tryint(s):\n        \"\"\"If `s` is a number, return an int, else `s` unchanged.\"\"\"\n        try:\n            return int(s)\n        except ValueError:\n            return s\n\n    return [tryint(c) for c in re.split(r\"(\\d+)\", s)]"}, "human_sorted": {"line": 379, "args": [{"func_args": {"strings": "['/usr/app/src/test_repos/Yamale/yamale']"}, "return_value": "['/usr/app/src/test_repos/Yamale/yamale']"}, {"func_args": {"strings": "{'/usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/coverage'}"}, "return_value": "['/usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/coverage']"}, {"func_args": {"strings": "{'/root/.local/lib/python3.8/site-packages', '/root/.local/bin', '/usr/app/src/test_repos/Yamale/.tox/py38/lib/python', '/usr/app/src/test_repos/Yamale/.tox/py38/bin', '/usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages'}"}, "return_value": "['/root/.local/bin', '/root/.local/lib/python3.8/site-packages', '/usr/app/src/test_repos/Yamale/.tox/py38/bin', '/usr/app/src/test_repos/Yamale/.tox/py38/lib/python', '/usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages']"}, {"func_args": {"strings": "['/usr/app/src/test_repos/Yamale/yamale']"}, "return_value": "['/usr/app/src/test_repos/Yamale/yamale']"}, {"func_args": {"strings": "{'/usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/coverage'}"}, "return_value": "['/usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/coverage']"}, {"func_args": {"strings": "{'/root/.local/lib/python3.8/site-packages', '/root/.local/bin', '/usr/app/src/test_repos/Yamale/.tox/py38/lib/python', '/usr/app/src/test_repos/Yamale/.tox/py38/bin', '/usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages'}"}, "return_value": "['/root/.local/bin', '/root/.local/lib/python3.8/site-packages', '/usr/app/src/test_repos/Yamale/.tox/py38/bin', '/usr/app/src/test_repos/Yamale/.tox/py38/lib/python', '/usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages']"}, {"func_args": {"strings": "['/usr/app/src/test_repos/Yamale/yamale']"}, "return_value": "['/usr/app/src/test_repos/Yamale/yamale']"}, {"func_args": {"strings": "{'/usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/coverage'}"}, "return_value": "['/usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/coverage']"}, {"func_args": {"strings": "{'/root/.local/lib/python3.8/site-packages', '/root/.local/bin', '/usr/app/src/test_repos/Yamale/.tox/py38/lib/python', '/usr/app/src/test_repos/Yamale/.tox/py38/bin', '/usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages'}"}, "return_value": "['/root/.local/bin', '/root/.local/lib/python3.8/site-packages', '/usr/app/src/test_repos/Yamale/.tox/py38/bin', '/usr/app/src/test_repos/Yamale/.tox/py38/lib/python', '/usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages']"}, {"func_args": {"strings": "['/usr/app/src/test_repos/Yamale/yamale']"}, "return_value": "['/usr/app/src/test_repos/Yamale/yamale']"}, {"func_args": {"strings": "{'/usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/coverage'}"}, "return_value": "['/usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/coverage']"}, {"func_args": {"strings": "{'/root/.local/lib/python3.8/site-packages', '/root/.local/bin', '/usr/app/src/test_repos/Yamale/.tox/py38/lib/python', '/usr/app/src/test_repos/Yamale/.tox/py38/bin', '/usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages'}"}, "return_value": "['/root/.local/bin', '/root/.local/lib/python3.8/site-packages', '/usr/app/src/test_repos/Yamale/.tox/py38/bin', '/usr/app/src/test_repos/Yamale/.tox/py38/lib/python', '/usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages']"}, {"func_args": {"strings": "['/usr/app/src/test_repos/Yamale/yamale']"}, "return_value": "['/usr/app/src/test_repos/Yamale/yamale']"}, {"func_args": {"strings": "{'/usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/coverage'}"}, "return_value": "['/usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/coverage']"}, {"func_args": {"strings": "{'/root/.local/lib/python3.8/site-packages', '/root/.local/bin', '/usr/app/src/test_repos/Yamale/.tox/py38/lib/python', '/usr/app/src/test_repos/Yamale/.tox/py38/bin', '/usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages'}"}, "return_value": "['/root/.local/bin', '/root/.local/lib/python3.8/site-packages', '/usr/app/src/test_repos/Yamale/.tox/py38/bin', '/usr/app/src/test_repos/Yamale/.tox/py38/lib/python', '/usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages']"}], "text": "def human_sorted(strings):\n    \"\"\"Sort the given iterable of strings the way that humans expect.\n\n    Numeric components in the strings are sorted as numbers.\n\n    Returns the sorted list.\n\n    \"\"\"\n    return sorted(strings, key=human_key)"}, "join_regex": {"line": 182, "args": [{"func_args": {"regexes": "['#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)']"}, "return_value": "'(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}], "text": "def join_regex(regexes):\n    \"\"\"Combine a list of regexes into one that matches any of them.\"\"\"\n    return \"|\".join(f\"(?:{r})\" for r in regexes)"}, "nice_pair": {"line": 140, "args": [{"func_args": {"pair": "(32, 32)"}, "return_value": "'32'"}, {"func_args": {"pair": "(42, 42)"}, "return_value": "'42'"}, {"func_args": {"pair": "(47, 47)"}, "return_value": "'47'"}, {"func_args": {"pair": "(67, 67)"}, "return_value": "'67'"}, {"func_args": {"pair": "(85, 85)"}, "return_value": "'85'"}, {"func_args": {"pair": "(109, 126)"}, "return_value": "'109-126'"}, {"func_args": {"pair": "(130, 130)"}, "return_value": "'130'"}, {"func_args": {"pair": "(9, 10)"}, "return_value": "'9-10'"}, {"func_args": {"pair": "(29, 30)"}, "return_value": "'29-30'"}, {"func_args": {"pair": "(15, 15)"}, "return_value": "'15'"}, {"func_args": {"pair": "(123, 123)"}, "return_value": "'123'"}, {"func_args": {"pair": "(165, 165)"}, "return_value": "'165'"}, {"func_args": {"pair": "(205, 205)"}, "return_value": "'205'"}, {"func_args": {"pair": "(20, 20)"}, "return_value": "'20'"}, {"func_args": {"pair": "(4, 5)"}, "return_value": "'4-5'"}, {"func_args": {"pair": "(12, 16)"}, "return_value": "'12-16'"}, {"func_args": {"pair": "(67, 67)"}, "return_value": "'67'"}, {"func_args": {"pair": "(73, 73)"}, "return_value": "'73'"}, {"func_args": {"pair": "(29, 29)"}, "return_value": "'29'"}, {"func_args": {"pair": "(42, 42)"}, "return_value": "'42'"}, {"func_args": {"pair": "(80, 80)"}, "return_value": "'80'"}, {"func_args": {"pair": "(45, 47)"}, "return_value": "'45-47'"}, {"func_args": {"pair": "(59, 59)"}, "return_value": "'59'"}, {"func_args": {"pair": "(138, 138)"}, "return_value": "'138'"}, {"func_args": {"pair": "(159, 159)"}, "return_value": "'159'"}, {"func_args": {"pair": "(184, 184)"}, "return_value": "'184'"}, {"func_args": {"pair": "(218, 218)"}, "return_value": "'218'"}, {"func_args": {"pair": "(234, 236)"}, "return_value": "'234-236'"}, {"func_args": {"pair": "(260, 261)"}, "return_value": "'260-261'"}, {"func_args": {"pair": "(11, 12)"}, "return_value": "'11-12'"}, {"func_args": {"pair": "(132, 132)"}, "return_value": "'132'"}, {"func_args": {"pair": "(27, 27)"}, "return_value": "'27'"}, {"func_args": {"pair": "(47, 47)"}, "return_value": "'47'"}], "text": "def nice_pair(pair):\n    \"\"\"Make a nice string representation of a pair of numbers.\n\n    If the numbers are equal, just return the number, otherwise return the pair\n    with a dash between them, indicating the range.\n\n    \"\"\"\n    start, end = pair\n    if start == end:\n        return \"%d\" % start\n    else:\n        return \"%d-%d\" % (start, end)"}, "<lambda>": {"line": 394, "args": [{"func_args": {"pair": "('yamale/__init__.py                               3      0   100%   ', ('yamale/__init__.py', 3, 0, '100', '', 100.0))"}, "return_value": "(['yamale/__init__.py                               ', 3, '      ', 0, '   ', 100, '%   '], ('yamale/__init__.py', 3, 0, '100', '', 100.0))"}, {"func_args": {"pair": "('yamale/command_line.py                          86     19    78%   32, 42, 47, 67, 85, 109-126, 130', ('yamale/command_line.py', 86, 19, '78', '32, 42, 47, 67, 85, 109-126, 130', 77.90697674418605))"}, "return_value": "(['yamale/command_line.py                          ', 86, '     ', 19, '    ', 78, '%   ', 32, ', ', 42, ', ', 47, ', ', 67, ', ', 85, ', ', 109, '-', 126, ', ', 130, ''], ('yamale/command_line.py', 86, 19, '78', '32, 42, 47, 67, 85, 109-126, 130', 77.90697674418605))"}, {"func_args": {"pair": "('yamale/readers/__init__.py                       2      0   100%   ', ('yamale/readers/__init__.py', 2, 0, '100', '', 100.0))"}, "return_value": "(['yamale/readers/__init__.py                       ', 2, '      ', 0, '   ', 100, '%   '], ('yamale/readers/__init__.py', 2, 0, '100', '', 100.0))"}, {"func_args": {"pair": "('yamale/readers/tests/__init__.py                 0      0   100%   ', ('yamale/readers/tests/__init__.py', 0, 0, '100', '', 100.0))"}, "return_value": "(['yamale/readers/tests/__init__.py                 ', 0, '      ', 0, '   ', 100, '%   '], ('yamale/readers/tests/__init__.py', 0, 0, '100', '', 100.0))"}, {"func_args": {"pair": "('yamale/readers/tests/test_bad_file.py            8      0   100%   ', ('yamale/readers/tests/test_bad_file.py', 8, 0, '100', '', 100.0))"}, "return_value": "(['yamale/readers/tests/test_bad_file.py            ', 8, '      ', 0, '   ', 100, '%   '], ('yamale/readers/tests/test_bad_file.py', 8, 0, '100', '', 100.0))"}, {"func_args": {"pair": "('yamale/readers/tests/test_yaml.py               37      0   100%   ', ('yamale/readers/tests/test_yaml.py', 37, 0, '100', '', 100.0))"}, "return_value": "(['yamale/readers/tests/test_yaml.py               ', 37, '      ', 0, '   ', 100, '%   '], ('yamale/readers/tests/test_yaml.py', 37, 0, '100', '', 100.0))"}, {"func_args": {"pair": "('yamale/readers/yaml_reader.py                   25      4    84%   9-10, 29-30', ('yamale/readers/yaml_reader.py', 25, 4, '84', '9-10, 29-30', 84.0))"}, "return_value": "(['yamale/readers/yaml_reader.py                   ', 25, '      ', 4, '    ', 84, '%   ', 9, '-', 10, ', ', 29, '-', 30, ''], ('yamale/readers/yaml_reader.py', 25, 4, '84', '9-10, 29-30', 84.0))"}, {"func_args": {"pair": "('yamale/schema/__init__.py                        1      0   100%   ', ('yamale/schema/__init__.py', 1, 0, '100', '', 100.0))"}, "return_value": "(['yamale/schema/__init__.py                        ', 1, '      ', 0, '   ', 100, '%   '], ('yamale/schema/__init__.py', 1, 0, '100', '', 100.0))"}, {"func_args": {"pair": "('yamale/schema/datapath.py                       11      1    91%   15', ('yamale/schema/datapath.py', 11, 1, '91', '15', 90.9090909090909))"}, "return_value": "(['yamale/schema/datapath.py                       ', 11, '      ', 1, '    ', 91, '%   ', 15, ''], ('yamale/schema/datapath.py', 11, 1, '91', '15', 90.9090909090909))"}, {"func_args": {"pair": "('yamale/schema/schema.py                        134      3    98%   123, 165, 205', ('yamale/schema/schema.py', 134, 3, '98', '123, 165, 205', 97.76119402985074))"}, "return_value": "(['yamale/schema/schema.py                        ', 134, '      ', 3, '    ', 98, '%   ', 123, ', ', 165, ', ', 205, ''], ('yamale/schema/schema.py', 134, 3, '98', '123, 165, 205', 97.76119402985074))"}, {"func_args": {"pair": "('yamale/schema/validationresults.py              24      1    96%   20', ('yamale/schema/validationresults.py', 24, 1, '96', '20', 95.83333333333333))"}, "return_value": "(['yamale/schema/validationresults.py              ', 24, '      ', 1, '    ', 96, '%   ', 20, ''], ('yamale/schema/validationresults.py', 24, 1, '96', '20', 95.83333333333333))"}, {"func_args": {"pair": "('yamale/syntax/__init__.py                        1      0   100%   ', ('yamale/syntax/__init__.py', 1, 0, '100', '', 100.0))"}, "return_value": "(['yamale/syntax/__init__.py                        ', 1, '      ', 0, '   ', 100, '%   '], ('yamale/syntax/__init__.py', 1, 0, '100', '', 100.0))"}, {"func_args": {"pair": "('yamale/syntax/parser.py                         30      0   100%   ', ('yamale/syntax/parser.py', 30, 0, '100', '', 100.0))"}, "return_value": "(['yamale/syntax/parser.py                         ', 30, '      ', 0, '   ', 100, '%   '], ('yamale/syntax/parser.py', 30, 0, '100', '', 100.0))"}, {"func_args": {"pair": "('yamale/syntax/tests/__init__.py                  0      0   100%   ', ('yamale/syntax/tests/__init__.py', 0, 0, '100', '', 100.0))"}, "return_value": "(['yamale/syntax/tests/__init__.py                  ', 0, '      ', 0, '   ', 100, '%   '], ('yamale/syntax/tests/__init__.py', 0, 0, '100', '', 100.0))"}, {"func_args": {"pair": "('yamale/syntax/tests/test_parser.py              27      0   100%   ', ('yamale/syntax/tests/test_parser.py', 27, 0, '100', '', 100.0))"}, "return_value": "(['yamale/syntax/tests/test_parser.py              ', 27, '      ', 0, '   ', 100, '%   '], ('yamale/syntax/tests/test_parser.py', 27, 0, '100', '', 100.0))"}, {"func_args": {"pair": "('yamale/tests/__init__.py                         4      0   100%   ', ('yamale/tests/__init__.py', 4, 0, '100', '', 100.0))"}, "return_value": "(['yamale/tests/__init__.py                         ', 4, '      ', 0, '   ', 100, '%   '], ('yamale/tests/__init__.py', 4, 0, '100', '', 100.0))"}, {"func_args": {"pair": "('yamale/tests/test_command_line.py               50      0   100%   ', ('yamale/tests/test_command_line.py', 50, 0, '100', '', 100.0))"}, "return_value": "(['yamale/tests/test_command_line.py               ', 50, '      ', 0, '   ', 100, '%   '], ('yamale/tests/test_command_line.py', 50, 0, '100', '', 100.0))"}, {"func_args": {"pair": "('yamale/tests/test_functional.py                162      0   100%   ', ('yamale/tests/test_functional.py', 162, 0, '100', '', 100.0))"}, "return_value": "(['yamale/tests/test_functional.py                ', 162, '      ', 0, '   ', 100, '%   '], ('yamale/tests/test_functional.py', 162, 0, '100', '', 100.0))"}, {"func_args": {"pair": "('yamale/tests/test_meta_test.py                  56      0   100%   ', ('yamale/tests/test_meta_test.py', 56, 0, '100', '', 100.0))"}, "return_value": "(['yamale/tests/test_meta_test.py                  ', 56, '      ', 0, '   ', 100, '%   '], ('yamale/tests/test_meta_test.py', 56, 0, '100', '', 100.0))"}, {"func_args": {"pair": "('yamale/util.py                                  40      8    80%   4-5, 12-16, 67, 73', ('yamale/util.py', 40, 8, '80', '4-5, 12-16, 67, 73', 80.0))"}, "return_value": "(['yamale/util.py                                  ', 40, '      ', 8, '    ', 80, '%   ', 4, '-', 5, ', ', 12, '-', 16, ', ', 67, ', ', 73, ''], ('yamale/util.py', 40, 8, '80', '4-5, 12-16, 67, 73', 80.0))"}, {"func_args": {"pair": "('yamale/validators/__init__.py                    2      0   100%   ', ('yamale/validators/__init__.py', 2, 0, '100', '', 100.0))"}, "return_value": "(['yamale/validators/__init__.py                    ', 2, '      ', 0, '   ', 100, '%   '], ('yamale/validators/__init__.py', 2, 0, '100', '', 100.0))"}, {"func_args": {"pair": "('yamale/validators/base.py                       49      3    94%   29, 42, 80', ('yamale/validators/base.py', 49, 3, '94', '29, 42, 80', 93.87755102040816))"}, "return_value": "(['yamale/validators/base.py                       ', 49, '      ', 3, '    ', 94, '%   ', 29, ', ', 42, ', ', 80, ''], ('yamale/validators/base.py', 49, 3, '94', '29, 42, 80', 93.87755102040816))"}, {"func_args": {"pair": "('yamale/validators/constraints.py               179     13    93%   45-47, 59, 138, 159, 184, 218, 234-236, 260-261', ('yamale/validators/constraints.py', 179, 13, '93', '45-47, 59, 138, 159, 184, 218, 234-236, 260-261', 92.73743016759776))"}, "return_value": "(['yamale/validators/constraints.py               ', 179, '     ', 13, '    ', 93, '%   ', 45, '-', 47, ', ', 59, ', ', 138, ', ', 159, ', ', 184, ', ', 218, ', ', 234, '-', 236, ', ', 260, '-', 261, ''], ('yamale/validators/constraints.py', 179, 13, '93', '45-47, 59, 138, 159, 184, 218, 234-236, 260-261', 92.73743016759776))"}, {"func_args": {"pair": "('yamale/validators/tests/__init__.py              0      0   100%   ', ('yamale/validators/tests/__init__.py', 0, 0, '100', '', 100.0))"}, "return_value": "(['yamale/validators/tests/__init__.py              ', 0, '      ', 0, '   ', 100, '%   '], ('yamale/validators/tests/__init__.py', 0, 0, '100', '', 100.0))"}, {"func_args": {"pair": "('yamale/validators/tests/test_constraint.py     118      0   100%   ', ('yamale/validators/tests/test_constraint.py', 118, 0, '100', '', 100.0))"}, "return_value": "(['yamale/validators/tests/test_constraint.py     ', 118, '      ', 0, '   ', 100, '%   '], ('yamale/validators/tests/test_constraint.py', 118, 0, '100', '', 100.0))"}, {"func_args": {"pair": "('yamale/validators/tests/test_validate.py       110      0   100%   ', ('yamale/validators/tests/test_validate.py', 110, 0, '100', '', 100.0))"}, "return_value": "(['yamale/validators/tests/test_validate.py       ', 110, '      ', 0, '   ', 100, '%   '], ('yamale/validators/tests/test_validate.py', 110, 0, '100', '', 100.0))"}, {"func_args": {"pair": "('yamale/validators/validators.py                142      3    98%   11-12, 132', ('yamale/validators/validators.py', 142, 3, '98', '11-12, 132', 97.88732394366197))"}, "return_value": "(['yamale/validators/validators.py                ', 142, '      ', 3, '    ', 98, '%   ', 11, '-', 12, ', ', 132, ''], ('yamale/validators/validators.py', 142, 3, '98', '11-12, 132', 97.88732394366197))"}, {"func_args": {"pair": "('yamale/yamale.py                                32      0   100%   ', ('yamale/yamale.py', 32, 0, '100', '', 100.0))"}, "return_value": "(['yamale/yamale.py                                ', 32, '      ', 0, '   ', 100, '%   '], ('yamale/yamale.py', 32, 0, '100', '', 100.0))"}, {"func_args": {"pair": "('yamale/yamale_error.py                           5      0   100%   ', ('yamale/yamale_error.py', 5, 0, '100', '', 100.0))"}, "return_value": "(['yamale/yamale_error.py                           ', 5, '      ', 0, '   ', 100, '%   '], ('yamale/yamale_error.py', 5, 0, '100', '', 100.0))"}, {"func_args": {"pair": "('yamale/yamale_testcase.py                       28      2    93%   27, 47', ('yamale/yamale_testcase.py', 28, 2, '93', '27, 47', 92.85714285714286))"}, "return_value": "(['yamale/yamale_testcase.py                       ', 28, '      ', 2, '    ', 93, '%   ', 27, ', ', 47, ''], ('yamale/yamale_testcase.py', 28, 2, '93', '27, 47', 92.85714285714286))"}]}, "human_sorted_items": {"line": 389, "args": [{"func_args": {"items": "[('yamale/__init__.py                               3      0   100%   ', ('yamale/__init__.py', 3, 0, '100', '', 100.0)), ('yamale/command_line.py                          86     19    78%   32, 42, 47, 67, 85, 109-126, 130', ('yamale/command_line.py', 86, 19, '78', '32, 42, 47, 67, 85, 109-126, 130', 77.90697674418605)), ('yamale/readers/__init__.py                       2      0   100%   ', ('yamale/readers/__init__.py', 2, 0, '100', '', 100.0)), ('yamale/readers/tests/__init__.py                 0      0   100%   ', ('yamale/readers/tests/__init__.py', 0, 0, '100', '', 100.0)), ('yamale/readers/tests/test_bad_file.py            8      0   100%   ', ('yamale/readers/tests/test_bad_file.py', 8, 0, '100', '', 100.0)), ('yamale/readers/tests/test_yaml.py               37      0   100%   ', ('yamale/readers/tests/test_yaml.py', 37, 0, '100', '', 100.0)), ('yamale/readers/yaml_reader.py                   25      4    84%   9-10, 29-30', ('yamale/readers/yaml_reader.py', 25, 4, '84', '9-10, 29-30', 84.0)), ('yamale/schema/__init__.py                        1      0   100%   ', ('yamale/schema/__init__.py', 1, 0, '100', '', 100.0)), ('yamale/schema/datapath.py                       11      1    91%   15', ('yamale/schema/datapath.py', 11, 1, '91', '15', 90.9090909090909)), ('yamale/schema/schema.py                        134      3    98%   123, 165, 205', ('yamale/schema/schema.py', 134, 3, '98', '123, 165, 205', 97.76119402985074)), ('yamale/schema/validationresults.py              24      1    96%   20', ('yamale/schema/validationresults.py', 24, 1, '96', '20', 95.83333333333333)), ('yamale/syntax/__init__.py                        1      0   100%   ', ('yamale/syntax/__init__.py', 1, 0, '100', '', 100.0)), ('yamale/syntax/parser.py                         30      0   100%   ', ('yamale/syntax/parser.py', 30, 0, '100', '', 100.0)), ('yamale/syntax/tests/__init__.py                  0      0   100%   ', ('yamale/syntax/tests/__init__.py', 0, 0, '100', '', 100.0)), ('yamale/syntax/tests/test_parser.py              27      0   100%   ', ('yamale/syntax/tests/test_parser.py', 27, 0, '100', '', 100.0)), ('yamale/tests/__init__.py                         4      0   100%   ', ('yamale/tests/__init__.py', 4, 0, '100', '', 100.0)), ('yamale/tests/test_command_line.py               50      0   100%   ', ('yamale/tests/test_command_line.py', 50, 0, '100', '', 100.0)), ('yamale/tests/test_functional.py                162      0   100%   ', ('yamale/tests/test_functional.py', 162, 0, '100', '', 100.0)), ('yamale/tests/test_meta_test.py                  56      0   100%   ', ('yamale/tests/test_meta_test.py', 56, 0, '100', '', 100.0)), ('yamale/util.py                                  40      8    80%   4-5, 12-16, 67, 73', ('yamale/util.py', 40, 8, '80', '4-5, 12-16, 67, 73', 80.0)), ('yamale/validators/__init__.py                    2      0   100%   ', ('yamale/validators/__init__.py', 2, 0, '100', '', 100.0)), ('yamale/validators/base.py                       49      3    94%   29, 42, 80', ('yamale/validators/base.py', 49, 3, '94', '29, 42, 80', 93.87755102040816)), ('yamale/validators/constraints.py               179     13    93%   45-47, 59, 138, 159, 184, 218, 234-236, 260-261', ('yamale/validators/constraints.py', 179, 13, '93', '45-47, 59, 138, 159, 184, 218, 234-236, 260-261', 92.73743016759776)), ('yamale/validators/tests/__init__.py              0      0   100%   ', ('yamale/validators/tests/__init__.py', 0, 0, '100', '', 100.0)), ('yamale/validators/tests/test_constraint.py     118      0   100%   ', ('yamale/validators/tests/test_constraint.py', 118, 0, '100', '', 100.0)), ('yamale/validators/tests/test_validate.py       110      0   100%   ', ('yamale/validators/tests/test_validate.py', 110, 0, '100', '', 100.0)), ('yamale/validators/validators.py                142      3    98%   11-12, 132', ('yamale/validators/validators.py', 142, 3, '98', '11-12, 132', 97.88732394366197)), ('yamale/yamale.py                                32      0   100%   ', ('yamale/yamale.py', 32, 0, '100', '', 100.0)), ('yamale/yamale_error.py                           5      0   100%   ', ('yamale/yamale_error.py', 5, 0, '100', '', 100.0)), ('yamale/yamale_testcase.py                       28      2    93%   27, 47', ('yamale/yamale_testcase.py', 28, 2, '93', '27, 47', 92.85714285714286))]", "reverse": "False"}, "return_value": "[('yamale/__init__.py                               3      0   100%   ', ('yamale/__init__.py', 3, 0, '100', '', 100.0)), ('yamale/command_line.py                          86     19    78%   32, 42, 47, 67, 85, 109-126, 130', ('yamale/command_line.py', 86, 19, '78', '32, 42, 47, 67, 85, 109-126, 130', 77.90697674418605)), ('yamale/readers/__init__.py                       2      0   100%   ', ('yamale/readers/__init__.py', 2, 0, '100', '', 100.0)), ('yamale/readers/tests/__init__.py                 0      0   100%   ', ('yamale/readers/tests/__init__.py', 0, 0, '100', '', 100.0)), ('yamale/readers/tests/test_bad_file.py            8      0   100%   ', ('yamale/readers/tests/test_bad_file.py', 8, 0, '100', '', 100.0)), ('yamale/readers/tests/test_yaml.py               37      0   100%   ', ('yamale/readers/tests/test_yaml.py', 37, 0, '100', '', 100.0)), ('yamale/readers/yaml_reader.py                   25      4    84%   9-10, 29-30', ('yamale/readers/yaml_reader.py', 25, 4, '84', '9-10, 29-30', 84.0)), ('yamale/schema/__init__.py                        1      0   100%   ', ('yamale/schema/__init__.py', 1, 0, '100', '', 100.0)), ('yamale/schema/datapath.py                       11      1    91%   15', ('yamale/schema/datapath.py', 11, 1, '91', '15', 90.9090909090909)), ('yamale/schema/schema.py                        134      3    98%   123, 165, 205', ('yamale/schema/schema.py', 134, 3, '98', '123, 165, 205', 97.76119402985074)), ('yamale/schema/validationresults.py              24      1    96%   20', ('yamale/schema/validationresults.py', 24, 1, '96', '20', 95.83333333333333)), ('yamale/syntax/__init__.py                        1      0   100%   ', ('yamale/syntax/__init__.py', 1, 0, '100', '', 100.0)), ('yamale/syntax/parser.py                         30      0   100%   ', ('yamale/syntax/parser.py', 30, 0, '100', '', 100.0)), ('yamale/syntax/tests/__init__.py                  0      0   100%   ', ('yamale/syntax/tests/__init__.py', 0, 0, '100', '', 100.0)), ('yamale/syntax/tests/test_parser.py              27      0   100%   ', ('yamale/syntax/tests/test_parser.py', 27, 0, '100', '', 100.0)), ('yamale/tests/__init__.py                         4      0   100%   ', ('yamale/tests/__init__.py', 4, 0, '100', '', 100.0)), ('yamale/tests/test_command_line.py               50      0   100%   ', ('yamale/tests/test_command_line.py', 50, 0, '100', '', 100.0)), ('yamale/tests/test_functional.py                162      0   100%   ', ('yamale/tests/test_functional.py', 162, 0, '100', '', 100.0)), ('yamale/tests/test_meta_test.py                  56      0   100%   ', ('yamale/tests/test_meta_test.py', 56, 0, '100', '', 100.0)), ('yamale/util.py                                  40      8    80%   4-5, 12-16, 67, 73', ('yamale/util.py', 40, 8, '80', '4-5, 12-16, 67, 73', 80.0)), ('yamale/validators/__init__.py                    2      0   100%   ', ('yamale/validators/__init__.py', 2, 0, '100', '', 100.0)), ('yamale/validators/base.py                       49      3    94%   29, 42, 80', ('yamale/validators/base.py', 49, 3, '94', '29, 42, 80', 93.87755102040816)), ('yamale/validators/constraints.py               179     13    93%   45-47, 59, 138, 159, 184, 218, 234-236, 260-261', ('yamale/validators/constraints.py', 179, 13, '93', '45-47, 59, 138, 159, 184, 218, 234-236, 260-261', 92.73743016759776)), ('yamale/validators/tests/__init__.py              0      0   100%   ', ('yamale/validators/tests/__init__.py', 0, 0, '100', '', 100.0)), ('yamale/validators/tests/test_constraint.py     118      0   100%   ', ('yamale/validators/tests/test_constraint.py', 118, 0, '100', '', 100.0)), ('yamale/validators/tests/test_validate.py       110      0   100%   ', ('yamale/validators/tests/test_validate.py', 110, 0, '100', '', 100.0)), ('yamale/validators/validators.py                142      3    98%   11-12, 132', ('yamale/validators/validators.py', 142, 3, '98', '11-12, 132', 97.88732394366197)), ('yamale/yamale.py                                32      0   100%   ', ('yamale/yamale.py', 32, 0, '100', '', 100.0)), ('yamale/yamale_error.py                           5      0   100%   ', ('yamale/yamale_error.py', 5, 0, '100', '', 100.0)), ('yamale/yamale_testcase.py                       28      2    93%   27, 47', ('yamale/yamale_testcase.py', 28, 2, '93', '27, 47', 92.85714285714286))]"}], "text": "def human_sorted_items(items, reverse=False):\n    \"\"\"Sort the (string, value) items the way humans expect.\n\n    Returns the sorted list of items.\n    \"\"\"\n    return sorted(items, key=lambda pair: (human_key(pair[0]), pair[1]), reverse=reverse)"}, "config_files_to_try": {"line": 492, "args": [{"func_args": {"config_file": "True"}, "return_value": "[('.coveragerc', True, False), ('setup.cfg', False, False), ('tox.ini', False, False), ('pyproject.toml', False, False)]"}, {"func_args": {"config_file": "True"}, "return_value": "[('.coveragerc', True, False), ('setup.cfg', False, False), ('tox.ini', False, False), ('pyproject.toml', False, False)]"}, {"func_args": {"config_file": "True"}, "return_value": "[('.coveragerc', True, False), ('setup.cfg', False, False), ('tox.ini', False, False), ('pyproject.toml', False, False)]"}, {"func_args": {"config_file": "True"}, "return_value": "[('.coveragerc', True, False), ('setup.cfg', False, False), ('tox.ini', False, False), ('pyproject.toml', False, False)]"}, {"func_args": {"config_file": "True"}, "return_value": "[('.coveragerc', True, False), ('setup.cfg', False, False), ('tox.ini', False, False), ('pyproject.toml', False, False)]"}], "text": "def config_files_to_try(config_file):\n    \"\"\"What config files should we try to read?\n\n    Returns a list of tuples:\n        (filename, is_our_file, was_file_specified)\n    \"\"\"\n\n    # Some API users were specifying \".coveragerc\" to mean the same as\n    # True, so make it so.\n    if config_file == \".coveragerc\":\n        config_file = True\n    specified_file = (config_file is not True)\n    if not specified_file:\n        # No file was specified. Check COVERAGE_RCFILE.\n        config_file = os.environ.get('COVERAGE_RCFILE')\n        if config_file:\n            specified_file = True\n    if not specified_file:\n        # Still no file specified. Default to .coveragerc\n        config_file = \".coveragerc\"\n    files_to_try = [\n        (config_file, True, specified_file),\n        (\"setup.cfg\", False, False),\n        (\"tox.ini\", False, False),\n        (\"pyproject.toml\", False, False),\n    ]\n    return files_to_try"}, "short_stack": {"line": 136, "args": [{"func_args": {"limit": "None", "skip": "0"}, "return_value": "'                      <module> : /usr/app/src/test_repos/Yamale/.tox/py38/bin/viztracer:8\\n                          main : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/viztracer/main.py:523\\n                           run : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/viztracer/main.py:332\\n                   run_command : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/viztracer/main.py:438\\n                      run_code : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/viztracer/main.py:355\\n                      <module> : /usr/app/src/test_repos/Yamale/.tox/py38/bin/py.test:8\\n                          main : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/config/__init__.py:124\\n                      __call__ : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/hooks.py:286\\n                     _hookexec : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:93\\n                      <lambda> : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:84\\n                    _multicall : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/callers.py:187\\n           pytest_cmdline_main : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/main.py:240\\n                  wrap_session : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/main.py:191\\n                         _main : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/main.py:247\\n                      __call__ : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/hooks.py:286\\n                     _hookexec : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:93\\n                      <lambda> : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:84\\n                    _multicall : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/callers.py:187\\n            pytest_runtestloop : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/main.py:272\\n                      __call__ : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/hooks.py:286\\n                     _hookexec : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:93\\n                      <lambda> : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:84\\n                    _multicall : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/callers.py:187\\n       pytest_runtest_protocol : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/runner.py:85\\n               runtestprotocol : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/runner.py:100\\n               call_and_report : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/runner.py:186\\n             call_runtest_hook : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/runner.py:216\\n                     from_call : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/runner.py:244\\n                      <lambda> : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/runner.py:217\\n                      __call__ : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/hooks.py:286\\n                     _hookexec : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:93\\n                      <lambda> : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:84\\n                    _multicall : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/callers.py:187\\n           pytest_runtest_call : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/runner.py:135\\n                       runtest : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/python.py:1477\\n                      __call__ : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/hooks.py:286\\n                     _hookexec : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:93\\n                      <lambda> : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:84\\n                    _multicall : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/callers.py:187\\n            pytest_pyfunc_call : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/python.py:182\\n                  test_bad_dir : /usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py:67\\n                       _router : /usr/app/src/test_repos/Yamale/yamale/command_line.py:105\\n                 _validate_dir : /usr/app/src/test_repos/Yamale/yamale/command_line.py:72\\n                          Pool : /usr/local/lib/python3.8/multiprocessing/context.py:119\\n                      __init__ : /usr/local/lib/python3.8/multiprocessing/pool.py:212\\n              _repopulate_pool : /usr/local/lib/python3.8/multiprocessing/pool.py:303\\n       _repopulate_pool_static : /usr/local/lib/python3.8/multiprocessing/pool.py:326\\n                         start : /usr/local/lib/python3.8/multiprocessing/process.py:121\\n                        _Popen : /usr/local/lib/python3.8/multiprocessing/context.py:277\\n                      __init__ : /usr/local/lib/python3.8/multiprocessing/popen_fork.py:19\\n                       _launch : /usr/local/lib/python3.8/multiprocessing/popen_fork.py:75\\n                    _bootstrap : /usr/local/lib/python3.8/multiprocessing/process.py:308\\n            _run_after_forkers : /usr/local/lib/python3.8/multiprocessing/util.py:167\\n         multiprocessing_start : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pytest_cov/embed.py:25\\n                          init : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pytest_cov/embed.py:74\\n                         start : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/coverage/control.py:558\\n               _init_for_start : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/coverage/control.py:473\\n                      __init__ : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/coverage/collector.py:114'"}, {"func_args": {"limit": "None", "skip": "0"}, "return_value": "'                      <module> : /usr/app/src/test_repos/Yamale/.tox/py38/bin/viztracer:8\\n                          main : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/viztracer/main.py:523\\n                           run : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/viztracer/main.py:332\\n                   run_command : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/viztracer/main.py:438\\n                      run_code : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/viztracer/main.py:355\\n                      <module> : /usr/app/src/test_repos/Yamale/.tox/py38/bin/py.test:8\\n                          main : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/config/__init__.py:124\\n                      __call__ : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/hooks.py:286\\n                     _hookexec : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:93\\n                      <lambda> : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:84\\n                    _multicall : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/callers.py:187\\n           pytest_cmdline_main : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/main.py:240\\n                  wrap_session : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/main.py:191\\n                         _main : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/main.py:247\\n                      __call__ : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/hooks.py:286\\n                     _hookexec : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:93\\n                      <lambda> : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:84\\n                    _multicall : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/callers.py:187\\n            pytest_runtestloop : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/main.py:272\\n                      __call__ : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/hooks.py:286\\n                     _hookexec : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:93\\n                      <lambda> : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:84\\n                    _multicall : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/callers.py:187\\n       pytest_runtest_protocol : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/runner.py:85\\n               runtestprotocol : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/runner.py:100\\n               call_and_report : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/runner.py:186\\n             call_runtest_hook : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/runner.py:216\\n                     from_call : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/runner.py:244\\n                      <lambda> : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/runner.py:217\\n                      __call__ : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/hooks.py:286\\n                     _hookexec : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:93\\n                      <lambda> : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:84\\n                    _multicall : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/callers.py:187\\n           pytest_runtest_call : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/runner.py:135\\n                       runtest : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/python.py:1477\\n                      __call__ : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/hooks.py:286\\n                     _hookexec : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:93\\n                      <lambda> : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:84\\n                    _multicall : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/callers.py:187\\n            pytest_pyfunc_call : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/python.py:182\\n   test_nested_schema_issue_69 : /usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py:97\\n                       _router : /usr/app/src/test_repos/Yamale/yamale/command_line.py:105\\n                 _validate_dir : /usr/app/src/test_repos/Yamale/yamale/command_line.py:72\\n                          Pool : /usr/local/lib/python3.8/multiprocessing/context.py:119\\n                      __init__ : /usr/local/lib/python3.8/multiprocessing/pool.py:212\\n              _repopulate_pool : /usr/local/lib/python3.8/multiprocessing/pool.py:303\\n       _repopulate_pool_static : /usr/local/lib/python3.8/multiprocessing/pool.py:326\\n                         start : /usr/local/lib/python3.8/multiprocessing/process.py:121\\n                        _Popen : /usr/local/lib/python3.8/multiprocessing/context.py:277\\n                      __init__ : /usr/local/lib/python3.8/multiprocessing/popen_fork.py:19\\n                       _launch : /usr/local/lib/python3.8/multiprocessing/popen_fork.py:75\\n                    _bootstrap : /usr/local/lib/python3.8/multiprocessing/process.py:308\\n            _run_after_forkers : /usr/local/lib/python3.8/multiprocessing/util.py:167\\n         multiprocessing_start : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pytest_cov/embed.py:25\\n                          init : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pytest_cov/embed.py:74\\n                         start : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/coverage/control.py:558\\n               _init_for_start : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/coverage/control.py:473\\n                      __init__ : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/coverage/collector.py:114'"}, {"func_args": {"limit": "None", "skip": "0"}, "return_value": "'                      <module> : /usr/app/src/test_repos/Yamale/.tox/py38/bin/viztracer:8\\n                          main : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/viztracer/main.py:523\\n                           run : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/viztracer/main.py:332\\n                   run_command : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/viztracer/main.py:438\\n                      run_code : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/viztracer/main.py:355\\n                      <module> : /usr/app/src/test_repos/Yamale/.tox/py38/bin/py.test:8\\n                          main : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/config/__init__.py:124\\n                      __call__ : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/hooks.py:286\\n                     _hookexec : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:93\\n                      <lambda> : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:84\\n                    _multicall : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/callers.py:187\\n           pytest_cmdline_main : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/main.py:240\\n                  wrap_session : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/main.py:191\\n                         _main : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/main.py:247\\n                      __call__ : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/hooks.py:286\\n                     _hookexec : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:93\\n                      <lambda> : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:84\\n                    _multicall : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/callers.py:187\\n            pytest_runtestloop : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/main.py:272\\n                      __call__ : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/hooks.py:286\\n                     _hookexec : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:93\\n                      <lambda> : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:84\\n                    _multicall : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/callers.py:187\\n       pytest_runtest_protocol : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/runner.py:85\\n               runtestprotocol : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/runner.py:100\\n               call_and_report : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/runner.py:186\\n             call_runtest_hook : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/runner.py:216\\n                     from_call : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/runner.py:244\\n                      <lambda> : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/runner.py:217\\n                      __call__ : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/hooks.py:286\\n                     _hookexec : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:93\\n                      <lambda> : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:84\\n                    _multicall : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/callers.py:187\\n           pytest_runtest_call : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/runner.py:135\\n                       runtest : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/python.py:1477\\n                      __call__ : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/hooks.py:286\\n                     _hookexec : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:93\\n                      <lambda> : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:84\\n                    _multicall : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/callers.py:187\\n            pytest_pyfunc_call : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/python.py:182\\n                  test_bad_dir : /usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py:67\\n                       _router : /usr/app/src/test_repos/Yamale/yamale/command_line.py:105\\n                 _validate_dir : /usr/app/src/test_repos/Yamale/yamale/command_line.py:72\\n                          Pool : /usr/local/lib/python3.8/multiprocessing/context.py:119\\n                      __init__ : /usr/local/lib/python3.8/multiprocessing/pool.py:212\\n              _repopulate_pool : /usr/local/lib/python3.8/multiprocessing/pool.py:303\\n       _repopulate_pool_static : /usr/local/lib/python3.8/multiprocessing/pool.py:326\\n                         start : /usr/local/lib/python3.8/multiprocessing/process.py:121\\n                        _Popen : /usr/local/lib/python3.8/multiprocessing/context.py:277\\n                      __init__ : /usr/local/lib/python3.8/multiprocessing/popen_fork.py:19\\n                       _launch : /usr/local/lib/python3.8/multiprocessing/popen_fork.py:75\\n                    _bootstrap : /usr/local/lib/python3.8/multiprocessing/process.py:308\\n            _run_after_forkers : /usr/local/lib/python3.8/multiprocessing/util.py:167\\n         multiprocessing_start : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pytest_cov/embed.py:25\\n                          init : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pytest_cov/embed.py:74\\n                         start : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/coverage/control.py:558\\n               _init_for_start : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/coverage/control.py:473\\n                      __init__ : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/coverage/collector.py:114'"}, {"func_args": {"limit": "None", "skip": "0"}, "return_value": "'                      <module> : /usr/app/src/test_repos/Yamale/.tox/py38/bin/viztracer:8\\n                          main : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/viztracer/main.py:523\\n                           run : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/viztracer/main.py:332\\n                   run_command : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/viztracer/main.py:438\\n                      run_code : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/viztracer/main.py:355\\n                      <module> : /usr/app/src/test_repos/Yamale/.tox/py38/bin/py.test:8\\n                          main : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/config/__init__.py:124\\n                      __call__ : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/hooks.py:286\\n                     _hookexec : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:93\\n                      <lambda> : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:84\\n                    _multicall : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/callers.py:187\\n           pytest_cmdline_main : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/main.py:240\\n                  wrap_session : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/main.py:191\\n                         _main : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/main.py:247\\n                      __call__ : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/hooks.py:286\\n                     _hookexec : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:93\\n                      <lambda> : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:84\\n                    _multicall : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/callers.py:187\\n            pytest_runtestloop : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/main.py:272\\n                      __call__ : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/hooks.py:286\\n                     _hookexec : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:93\\n                      <lambda> : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:84\\n                    _multicall : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/callers.py:187\\n       pytest_runtest_protocol : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/runner.py:85\\n               runtestprotocol : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/runner.py:100\\n               call_and_report : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/runner.py:186\\n             call_runtest_hook : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/runner.py:216\\n                     from_call : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/runner.py:244\\n                      <lambda> : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/runner.py:217\\n                      __call__ : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/hooks.py:286\\n                     _hookexec : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:93\\n                      <lambda> : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:84\\n                    _multicall : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/callers.py:187\\n           pytest_runtest_call : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/runner.py:135\\n                       runtest : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/python.py:1477\\n                      __call__ : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/hooks.py:286\\n                     _hookexec : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:93\\n                      <lambda> : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:84\\n                    _multicall : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/callers.py:187\\n            pytest_pyfunc_call : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/python.py:182\\n                  test_bad_dir : /usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py:67\\n                       _router : /usr/app/src/test_repos/Yamale/yamale/command_line.py:105\\n                 _validate_dir : /usr/app/src/test_repos/Yamale/yamale/command_line.py:72\\n                          Pool : /usr/local/lib/python3.8/multiprocessing/context.py:119\\n                      __init__ : /usr/local/lib/python3.8/multiprocessing/pool.py:212\\n              _repopulate_pool : /usr/local/lib/python3.8/multiprocessing/pool.py:303\\n       _repopulate_pool_static : /usr/local/lib/python3.8/multiprocessing/pool.py:326\\n                         start : /usr/local/lib/python3.8/multiprocessing/process.py:121\\n                        _Popen : /usr/local/lib/python3.8/multiprocessing/context.py:277\\n                      __init__ : /usr/local/lib/python3.8/multiprocessing/popen_fork.py:19\\n                       _launch : /usr/local/lib/python3.8/multiprocessing/popen_fork.py:75\\n                    _bootstrap : /usr/local/lib/python3.8/multiprocessing/process.py:308\\n            _run_after_forkers : /usr/local/lib/python3.8/multiprocessing/util.py:167\\n         multiprocessing_start : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pytest_cov/embed.py:25\\n                          init : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pytest_cov/embed.py:74\\n                         start : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/coverage/control.py:558\\n               _init_for_start : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/coverage/control.py:473\\n                      __init__ : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/coverage/collector.py:114'"}, {"func_args": {"limit": "None", "skip": "0"}, "return_value": "'                      <module> : /usr/app/src/test_repos/Yamale/.tox/py38/bin/viztracer:8\\n                          main : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/viztracer/main.py:523\\n                           run : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/viztracer/main.py:332\\n                   run_command : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/viztracer/main.py:438\\n                      run_code : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/viztracer/main.py:355\\n                      <module> : /usr/app/src/test_repos/Yamale/.tox/py38/bin/py.test:8\\n                          main : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/config/__init__.py:124\\n                      __call__ : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/hooks.py:286\\n                     _hookexec : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:93\\n                      <lambda> : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:84\\n                    _multicall : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/callers.py:187\\n           pytest_cmdline_main : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/main.py:240\\n                  wrap_session : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/main.py:191\\n                         _main : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/main.py:247\\n                      __call__ : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/hooks.py:286\\n                     _hookexec : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:93\\n                      <lambda> : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:84\\n                    _multicall : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/callers.py:187\\n            pytest_runtestloop : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/main.py:272\\n                      __call__ : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/hooks.py:286\\n                     _hookexec : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:93\\n                      <lambda> : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:84\\n                    _multicall : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/callers.py:187\\n       pytest_runtest_protocol : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/runner.py:85\\n               runtestprotocol : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/runner.py:100\\n               call_and_report : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/runner.py:186\\n             call_runtest_hook : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/runner.py:216\\n                     from_call : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/runner.py:244\\n                      <lambda> : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/runner.py:217\\n                      __call__ : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/hooks.py:286\\n                     _hookexec : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:93\\n                      <lambda> : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:84\\n                    _multicall : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/callers.py:187\\n           pytest_runtest_call : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/runner.py:135\\n                       runtest : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/python.py:1477\\n                      __call__ : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/hooks.py:286\\n                     _hookexec : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:93\\n                      <lambda> : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:84\\n                    _multicall : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pluggy/callers.py:187\\n            pytest_pyfunc_call : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/_pytest/python.py:182\\n                  test_bad_dir : /usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py:67\\n                       _router : /usr/app/src/test_repos/Yamale/yamale/command_line.py:105\\n                 _validate_dir : /usr/app/src/test_repos/Yamale/yamale/command_line.py:72\\n                          Pool : /usr/local/lib/python3.8/multiprocessing/context.py:119\\n                      __init__ : /usr/local/lib/python3.8/multiprocessing/pool.py:212\\n              _repopulate_pool : /usr/local/lib/python3.8/multiprocessing/pool.py:303\\n       _repopulate_pool_static : /usr/local/lib/python3.8/multiprocessing/pool.py:326\\n                         start : /usr/local/lib/python3.8/multiprocessing/process.py:121\\n                        _Popen : /usr/local/lib/python3.8/multiprocessing/context.py:277\\n                      __init__ : /usr/local/lib/python3.8/multiprocessing/popen_fork.py:19\\n                       _launch : /usr/local/lib/python3.8/multiprocessing/popen_fork.py:75\\n                    _bootstrap : /usr/local/lib/python3.8/multiprocessing/process.py:308\\n            _run_after_forkers : /usr/local/lib/python3.8/multiprocessing/util.py:167\\n         multiprocessing_start : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pytest_cov/embed.py:25\\n                          init : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/pytest_cov/embed.py:74\\n                         start : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/coverage/control.py:558\\n               _init_for_start : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/coverage/control.py:473\\n                      __init__ : /usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/coverage/collector.py:114'"}], "text": "def short_stack(limit=None, skip=0):\n    \"\"\"Return a string summarizing the call stack.\n\n    The string is multi-line, with one line per stack frame. Each line shows\n    the function name, the file name, and the line number:\n\n        ...\n        start_import_stop : /Users/ned/coverage/trunk/tests/coveragetest.py @95\n        import_local_file : /Users/ned/coverage/trunk/tests/coveragetest.py @81\n        import_local_file : /Users/ned/coverage/trunk/coverage/backward.py @159\n        ...\n\n    `limit` is the number of frames to include, defaulting to all of them.\n\n    `skip` is the number of frames to skip, so that debugging functions can\n    call this and not be included in the result.\n\n    \"\"\"\n    stack = inspect.stack()[limit:skip:-1]\n    return \"\\n\".join(\"%30s : %s:%d\" % (t[3], t[1], t[2]) for t in stack)"}, "actual_path": {"line": 139, "args": [{"func_args": {"path": "'/usr/app/src/test_repos/Yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/inspect.py'"}, "return_value": "'/usr/local/lib/python3.8/inspect.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/os.py'"}, "return_value": "'/usr/local/lib/python3.8/os.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/platform.py'"}, "return_value": "'/usr/local/lib/python3.8/platform.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/re.py'"}, "return_value": "'/usr/local/lib/python3.8/re.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/sysconfig.py'"}, "return_value": "'/usr/local/lib/python3.8/sysconfig.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/traceback.py'"}, "return_value": "'/usr/local/lib/python3.8/traceback.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/inspect.py'"}, "return_value": "'/usr/local/lib/python3.8/inspect.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/os.py'"}, "return_value": "'/usr/local/lib/python3.8/os.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/platform.py'"}, "return_value": "'/usr/local/lib/python3.8/platform.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/re.py'"}, "return_value": "'/usr/local/lib/python3.8/re.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/sysconfig.py'"}, "return_value": "'/usr/local/lib/python3.8/sysconfig.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/traceback.py'"}, "return_value": "'/usr/local/lib/python3.8/traceback.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/inspect.py'"}, "return_value": "'/usr/local/lib/python3.8/inspect.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/os.py'"}, "return_value": "'/usr/local/lib/python3.8/os.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/platform.py'"}, "return_value": "'/usr/local/lib/python3.8/platform.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/re.py'"}, "return_value": "'/usr/local/lib/python3.8/re.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/sysconfig.py'"}, "return_value": "'/usr/local/lib/python3.8/sysconfig.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/traceback.py'"}, "return_value": "'/usr/local/lib/python3.8/traceback.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/inspect.py'"}, "return_value": "'/usr/local/lib/python3.8/inspect.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/os.py'"}, "return_value": "'/usr/local/lib/python3.8/os.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/platform.py'"}, "return_value": "'/usr/local/lib/python3.8/platform.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/re.py'"}, "return_value": "'/usr/local/lib/python3.8/re.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/sysconfig.py'"}, "return_value": "'/usr/local/lib/python3.8/sysconfig.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/traceback.py'"}, "return_value": "'/usr/local/lib/python3.8/traceback.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/inspect.py'"}, "return_value": "'/usr/local/lib/python3.8/inspect.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/os.py'"}, "return_value": "'/usr/local/lib/python3.8/os.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/platform.py'"}, "return_value": "'/usr/local/lib/python3.8/platform.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/re.py'"}, "return_value": "'/usr/local/lib/python3.8/re.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/sysconfig.py'"}, "return_value": "'/usr/local/lib/python3.8/sysconfig.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/traceback.py'"}, "return_value": "'/usr/local/lib/python3.8/traceback.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}], "text": "def actual_path(path):\n        \"\"\"The actual path for non-Windows platforms.\"\"\"\n        return path"}, "abs_file": {"line": 144, "args": [{"func_args": {"path": "'.'"}, "return_value": "'/usr/app/src/test_repos/Yamale'"}, {"func_args": {"path": "'./yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/inspect.py'"}, "return_value": "'/usr/local/lib/python3.8/inspect.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/os.py'"}, "return_value": "'/usr/local/lib/python3.8/os.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/platform.py'"}, "return_value": "'/usr/local/lib/python3.8/platform.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/re.py'"}, "return_value": "'/usr/local/lib/python3.8/re.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/sysconfig.py'"}, "return_value": "'/usr/local/lib/python3.8/sysconfig.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/traceback.py'"}, "return_value": "'/usr/local/lib/python3.8/traceback.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, {"func_args": {"path": "'.'"}, "return_value": "'/usr/app/src/test_repos/Yamale'"}, {"func_args": {"path": "'./yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/inspect.py'"}, "return_value": "'/usr/local/lib/python3.8/inspect.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/os.py'"}, "return_value": "'/usr/local/lib/python3.8/os.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/platform.py'"}, "return_value": "'/usr/local/lib/python3.8/platform.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/re.py'"}, "return_value": "'/usr/local/lib/python3.8/re.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/sysconfig.py'"}, "return_value": "'/usr/local/lib/python3.8/sysconfig.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/traceback.py'"}, "return_value": "'/usr/local/lib/python3.8/traceback.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, {"func_args": {"path": "'.'"}, "return_value": "'/usr/app/src/test_repos/Yamale'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, {"func_args": {"path": "'.'"}, "return_value": "'/usr/app/src/test_repos/Yamale'"}, {"func_args": {"path": "'./yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/inspect.py'"}, "return_value": "'/usr/local/lib/python3.8/inspect.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/os.py'"}, "return_value": "'/usr/local/lib/python3.8/os.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/platform.py'"}, "return_value": "'/usr/local/lib/python3.8/platform.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/re.py'"}, "return_value": "'/usr/local/lib/python3.8/re.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/sysconfig.py'"}, "return_value": "'/usr/local/lib/python3.8/sysconfig.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/traceback.py'"}, "return_value": "'/usr/local/lib/python3.8/traceback.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, {"func_args": {"path": "'.'"}, "return_value": "'/usr/app/src/test_repos/Yamale'"}, {"func_args": {"path": "'./yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/inspect.py'"}, "return_value": "'/usr/local/lib/python3.8/inspect.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/os.py'"}, "return_value": "'/usr/local/lib/python3.8/os.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/platform.py'"}, "return_value": "'/usr/local/lib/python3.8/platform.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/re.py'"}, "return_value": "'/usr/local/lib/python3.8/re.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/sysconfig.py'"}, "return_value": "'/usr/local/lib/python3.8/sysconfig.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/traceback.py'"}, "return_value": "'/usr/local/lib/python3.8/traceback.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, {"func_args": {"path": "'.'"}, "return_value": "'/usr/app/src/test_repos/Yamale'"}, {"func_args": {"path": "'./yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/inspect.py'"}, "return_value": "'/usr/local/lib/python3.8/inspect.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/os.py'"}, "return_value": "'/usr/local/lib/python3.8/os.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/platform.py'"}, "return_value": "'/usr/local/lib/python3.8/platform.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/re.py'"}, "return_value": "'/usr/local/lib/python3.8/re.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/sysconfig.py'"}, "return_value": "'/usr/local/lib/python3.8/sysconfig.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/traceback.py'"}, "return_value": "'/usr/local/lib/python3.8/traceback.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}]}, "canonical_filename": {"line": 53, "args": [{"func_args": {"filename": "'yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/inspect.py'"}, "return_value": "'/usr/local/lib/python3.8/inspect.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/os.py'"}, "return_value": "'/usr/local/lib/python3.8/os.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/platform.py'"}, "return_value": "'/usr/local/lib/python3.8/platform.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/re.py'"}, "return_value": "'/usr/local/lib/python3.8/re.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/sysconfig.py'"}, "return_value": "'/usr/local/lib/python3.8/sysconfig.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/traceback.py'"}, "return_value": "'/usr/local/lib/python3.8/traceback.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/coverage/inorout.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/coverage/inorout.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, {"func_args": {"filename": "'yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/inspect.py'"}, "return_value": "'/usr/local/lib/python3.8/inspect.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/os.py'"}, "return_value": "'/usr/local/lib/python3.8/os.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/platform.py'"}, "return_value": "'/usr/local/lib/python3.8/platform.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/re.py'"}, "return_value": "'/usr/local/lib/python3.8/re.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/sysconfig.py'"}, "return_value": "'/usr/local/lib/python3.8/sysconfig.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/traceback.py'"}, "return_value": "'/usr/local/lib/python3.8/traceback.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/coverage/inorout.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/coverage/inorout.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, {"func_args": {"filename": "'yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/inspect.py'"}, "return_value": "'/usr/local/lib/python3.8/inspect.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/os.py'"}, "return_value": "'/usr/local/lib/python3.8/os.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/platform.py'"}, "return_value": "'/usr/local/lib/python3.8/platform.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/re.py'"}, "return_value": "'/usr/local/lib/python3.8/re.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/sysconfig.py'"}, "return_value": "'/usr/local/lib/python3.8/sysconfig.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/traceback.py'"}, "return_value": "'/usr/local/lib/python3.8/traceback.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/coverage/inorout.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/coverage/inorout.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, {"func_args": {"filename": "'yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/inspect.py'"}, "return_value": "'/usr/local/lib/python3.8/inspect.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/os.py'"}, "return_value": "'/usr/local/lib/python3.8/os.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/platform.py'"}, "return_value": "'/usr/local/lib/python3.8/platform.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/re.py'"}, "return_value": "'/usr/local/lib/python3.8/re.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/sysconfig.py'"}, "return_value": "'/usr/local/lib/python3.8/sysconfig.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/traceback.py'"}, "return_value": "'/usr/local/lib/python3.8/traceback.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/coverage/inorout.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/coverage/inorout.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, {"func_args": {"filename": "'yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/inspect.py'"}, "return_value": "'/usr/local/lib/python3.8/inspect.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/os.py'"}, "return_value": "'/usr/local/lib/python3.8/os.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/platform.py'"}, "return_value": "'/usr/local/lib/python3.8/platform.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/re.py'"}, "return_value": "'/usr/local/lib/python3.8/re.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/sysconfig.py'"}, "return_value": "'/usr/local/lib/python3.8/sysconfig.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/traceback.py'"}, "return_value": "'/usr/local/lib/python3.8/traceback.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/coverage/inorout.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/coverage/inorout.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}]}, "prep_patterns": {"line": 173, "args": [{"func_args": {"patterns": "None"}, "return_value": "[]"}, {"func_args": {"patterns": "None"}, "return_value": "[]"}, {"func_args": {"patterns": "None"}, "return_value": "[]"}, {"func_args": {"patterns": "None"}, "return_value": "[]"}, {"func_args": {"patterns": "None"}, "return_value": "[]"}, {"func_args": {"patterns": "None"}, "return_value": "[]"}, {"func_args": {"patterns": "None"}, "return_value": "[]"}, {"func_args": {"patterns": "None"}, "return_value": "[]"}, {"func_args": {"patterns": "None"}, "return_value": "[]"}, {"func_args": {"patterns": "None"}, "return_value": "[]"}], "text": "def prep_patterns(patterns):\n    \"\"\"Prepare the file patterns for use in a `FnmatchMatcher`.\n\n    If a pattern starts with a wildcard, it is used as a pattern\n    as-is.  If it does not start with a wildcard, then it is made\n    absolute with the current directory.\n\n    If `patterns` is None, an empty list is returned.\n\n    \"\"\"\n    prepped = []\n    for p in patterns or []:\n        if p.startswith((\"*\", \"?\")):\n            prepped.append(p)\n        else:\n            prepped.append(abs_file(p))\n    return prepped"}, "find_python_files": {"line": 403, "args": [{"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "None"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "None"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "None"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "None"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "None"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/Yamale/yamale'"}, "return_value": "None"}], "text": "def find_python_files(dirname):\n    \"\"\"Yield all of the importable Python files in `dirname`, recursively.\n\n    To be importable, the files have to be in a directory with a __init__.py,\n    except for `dirname` itself, which isn't required to have one.  The\n    assumption is that `dirname` was specified directly, so the user knows\n    best, but sub-directories are checked for a __init__.py to be sure we only\n    find the importable files.\n\n    \"\"\"\n    for i, (dirpath, dirnames, filenames) in enumerate(os.walk(dirname)):\n        if i > 0 and '__init__.py' not in filenames:\n            # If a directory doesn't have __init__.py, then it isn't\n            # importable and neither are its files\n            del dirnames[:]\n            continue\n        for filename in filenames:\n            # We're only interested in files that look like reasonable Python\n            # files: Must end with .py or .pyw, and must not have certain funny\n            # characters that probably mean they are editor junk.\n            if re.match(r\"^[^.#~!$@%^&*()+=,]+\\.pyw?$\", filename):\n                yield os.path.join(dirpath, filename)"}, "relative_filename": {"line": 39, "args": [{"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, "return_value": "'yamale/schema/datapath.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, "return_value": "'yamale/readers/tests/test_yaml.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, "return_value": "'yamale/tests/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, "return_value": "'yamale/yamale.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, "return_value": "'yamale/validators/tests/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, "return_value": "'yamale/schema/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, "return_value": "'yamale/validators/constraints.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, "return_value": "'yamale/syntax/parser.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, "return_value": "'yamale/syntax/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, "return_value": "'yamale/readers/yaml_reader.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, "return_value": "'yamale/tests/test_command_line.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, "return_value": "'yamale/tests/test_meta_test.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, "return_value": "'yamale/validators/tests/test_constraint.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, "return_value": "'yamale/validators/validators.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, "return_value": "'yamale/util.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, "return_value": "'yamale/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, "return_value": "'yamale/readers/tests/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, "return_value": "'yamale/syntax/tests/test_parser.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, "return_value": "'yamale/validators/tests/test_validate.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, "return_value": "'yamale/tests/test_functional.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, "return_value": "'yamale/schema/validationresults.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, "return_value": "'yamale/validators/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, "return_value": "'yamale/readers/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, "return_value": "'yamale/schema/schema.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, "return_value": "'yamale/yamale_testcase.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, "return_value": "'yamale/readers/tests/test_bad_file.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, "return_value": "'yamale/command_line.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, "return_value": "'yamale/validators/base.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, "return_value": "'yamale/yamale_error.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, "return_value": "'yamale/syntax/tests/__init__.py'"}]}, "filename_suffix": {"line": 1006, "args": [{"func_args": {"suffix": "True"}, "return_value": "'cae2a1e14906.328.208406'"}, {"func_args": {"suffix": "True"}, "return_value": "'cae2a1e14906.333.108125'"}, {"func_args": {"suffix": "None"}, "return_value": "None"}, {"func_args": {"suffix": "None"}, "return_value": "None"}, {"func_args": {"suffix": "None"}, "return_value": "None"}, {"func_args": {"suffix": "None"}, "return_value": "None"}, {"func_args": {"suffix": "None"}, "return_value": "None"}, {"func_args": {"suffix": "None"}, "return_value": "None"}, {"func_args": {"suffix": "None"}, "return_value": "None"}, {"func_args": {"suffix": "True"}, "return_value": "'cae2a1e14906.329.185292'"}, {"func_args": {"suffix": "True"}, "return_value": "'cae2a1e14906.327.108065'"}, {"func_args": {"suffix": "True"}, "return_value": "'cae2a1e14906.326.608898'"}], "text": "def filename_suffix(suffix):\n    \"\"\"Compute a filename suffix for a data file.\n\n    If `suffix` is a string or None, simply return it. If `suffix` is True,\n    then build a suffix incorporating the hostname, process id, and a random\n    number.\n\n    Returns a string or None.\n\n    \"\"\"\n    if suffix is True:\n        # If data_suffix was a simple true value, then make a suffix with\n        # plenty of distinguishing information.  We do this here in\n        # `save()` at the last minute so that the pid will be correct even\n        # if the process forks.\n        dice = random.Random(os.urandom(8)).randint(0, 999999)\n        suffix = \"%s.%s.%06d\" % (socket.gethostname(), os.getpid(), dice)\n    return suffix"}, "source_for_file": {"line": 97, "args": [{"func_args": {"filename": "'/usr/local/lib/python3.8/inspect.py'"}, "return_value": "'/usr/local/lib/python3.8/inspect.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/os.py'"}, "return_value": "'/usr/local/lib/python3.8/os.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/platform.py'"}, "return_value": "'/usr/local/lib/python3.8/platform.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/re.py'"}, "return_value": "'/usr/local/lib/python3.8/re.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/sysconfig.py'"}, "return_value": "'/usr/local/lib/python3.8/sysconfig.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/traceback.py'"}, "return_value": "'/usr/local/lib/python3.8/traceback.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/coverage/inorout.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/coverage/inorout.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/inspect.py'"}, "return_value": "'/usr/local/lib/python3.8/inspect.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/os.py'"}, "return_value": "'/usr/local/lib/python3.8/os.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/platform.py'"}, "return_value": "'/usr/local/lib/python3.8/platform.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/re.py'"}, "return_value": "'/usr/local/lib/python3.8/re.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/sysconfig.py'"}, "return_value": "'/usr/local/lib/python3.8/sysconfig.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/traceback.py'"}, "return_value": "'/usr/local/lib/python3.8/traceback.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/coverage/inorout.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/coverage/inorout.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/inspect.py'"}, "return_value": "'/usr/local/lib/python3.8/inspect.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/os.py'"}, "return_value": "'/usr/local/lib/python3.8/os.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/platform.py'"}, "return_value": "'/usr/local/lib/python3.8/platform.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/re.py'"}, "return_value": "'/usr/local/lib/python3.8/re.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/sysconfig.py'"}, "return_value": "'/usr/local/lib/python3.8/sysconfig.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/traceback.py'"}, "return_value": "'/usr/local/lib/python3.8/traceback.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/coverage/inorout.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/coverage/inorout.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/inspect.py'"}, "return_value": "'/usr/local/lib/python3.8/inspect.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/os.py'"}, "return_value": "'/usr/local/lib/python3.8/os.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/platform.py'"}, "return_value": "'/usr/local/lib/python3.8/platform.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/re.py'"}, "return_value": "'/usr/local/lib/python3.8/re.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/sysconfig.py'"}, "return_value": "'/usr/local/lib/python3.8/sysconfig.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/traceback.py'"}, "return_value": "'/usr/local/lib/python3.8/traceback.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/coverage/inorout.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/coverage/inorout.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/inspect.py'"}, "return_value": "'/usr/local/lib/python3.8/inspect.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/os.py'"}, "return_value": "'/usr/local/lib/python3.8/os.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/platform.py'"}, "return_value": "'/usr/local/lib/python3.8/platform.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/re.py'"}, "return_value": "'/usr/local/lib/python3.8/re.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/sysconfig.py'"}, "return_value": "'/usr/local/lib/python3.8/sysconfig.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/traceback.py'"}, "return_value": "'/usr/local/lib/python3.8/traceback.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/coverage/inorout.py'"}, "return_value": "'/usr/app/src/test_repos/Yamale/.tox/py38/lib/python3.8/site-packages/coverage/inorout.py'"}], "text": "def source_for_file(filename):\n    \"\"\"Return the source filename for `filename`.\n\n    Given a file name being traced, return the best guess as to the source\n    file to attribute it to.\n\n    \"\"\"\n    if filename.endswith(\".py\"):\n        # .py files are themselves source files.\n        return filename\n\n    elif filename.endswith((\".pyc\", \".pyo\")):\n        # Bytecode files probably have source files near them.\n        py_filename = filename[:-1]\n        if os.path.exists(py_filename):\n            # Found a .py file, use that.\n            return py_filename\n        if env.WINDOWS:\n            # On Windows, it could be a .pyw file.\n            pyw_filename = py_filename + \"w\"\n            if os.path.exists(pyw_filename):\n                return pyw_filename\n        # Didn't find source, but it's probably the .py file we want.\n        return py_filename\n\n    elif filename.endswith(\"$py.class\"):\n        # Jython is easy to guess.\n        return filename[:-9] + \".py\"\n\n    # No idea, just use the file name as-is.\n    return filename"}, "read_python_source": {"line": 20, "args": [{"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, "return_value": "b'from .yamale import make_schema, make_data, validate\\nfrom .yamale_testcase import YamaleTestCase\\nfrom .yamale_error import YamaleError'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, "return_value": "b'#!/usr/bin/env python\\n# -*- coding: utf-8 -*-\\n\\n\"\"\"\\n    Validate yaml files and check them against their schemas. Designed to be used outside of Vagrant.\\n\\n    Just install Yamale:\\n        pip install yamale\\n\"\"\"\\n\\nimport argparse\\nimport glob\\nimport os\\nfrom multiprocessing import Pool\\nfrom .yamale_error import YamaleError\\nfrom .schema.validationresults import Result\\n\\nimport yamale\\n\\nschemas = {}\\n\\n\\ndef _validate(schema_path, data_path, parser, strict, _raise_error):\\n    schema = schemas.get(schema_path)\\n    try:\\n        if not schema:\\n            schema = yamale.make_schema(schema_path, parser)\\n            schemas[schema_path] = schema\\n    except (SyntaxError, ValueError) as e:\\n        results = [Result([str(e)])]\\n        if not _raise_error:\\n            return results\\n        raise YamaleError(results)\\n    data = yamale.make_data(data_path, parser)\\n    return yamale.validate(schema, data, strict, _raise_error)\\n\\n\\ndef _find_data_path_schema(data_path, schema_name):\\n    \"\"\" Starts in the data file folder and recursively looks\\n    in parents for `schema_name` \"\"\"\\n    if not data_path or data_path == os.path.abspath(os.sep) or data_path == \\'.\\':\\n        return None\\n    directory = os.path.dirname(data_path)\\n    path = glob.glob(os.path.join(directory, schema_name))\\n    if not path:\\n        return _find_schema(directory, schema_name)\\n    return path[0]\\n\\n\\ndef _find_schema(data_path, schema_name):\\n    \"\"\" Checks if `schema_name` is a valid file, if not\\n    searches in `data_path` for it. \"\"\"\\n\\n    directory = os.path.dirname(data_path)\\n    path = glob.glob(os.path.join(directory, schema_name))\\n    for p in path:\\n        if os.path.isfile(p):\\n            return p\\n\\n    return _find_data_path_schema(data_path, schema_name)\\n\\n\\ndef _validate_single(yaml_path, schema_name, parser, strict):\\n    print(\\'Validating %s...\\' % yaml_path)\\n    s = _find_schema(yaml_path, schema_name)\\n    if not s:\\n        raise ValueError(\"Invalid schema name for \\'{}\\' or schema not found.\".format(schema_name))\\n    _validate(s, yaml_path, parser, strict, True)\\n\\n\\ndef _validate_dir(root, schema_name, cpus, parser, strict):\\n    pool = Pool(processes=cpus)\\n    res = []\\n    error_messages = []\\n    print(\\'Finding yaml files...\\')\\n    for root, dirs, files in os.walk(root):\\n        for f in files:\\n            if (f.endswith(\\'.yaml\\') or f.endswith(\\'.yml\\')) and f != schema_name:\\n                d = os.path.join(root, f)\\n                s = _find_schema(d, schema_name)\\n                if s:\\n                    res.append(pool.apply_async(_validate,\\n                                                (s, d, parser, strict, False)))\\n                else:\\n                    print(\\'No schema found for: %s\\' % d)\\n\\n    print(\\'Found %s yaml files.\\' % len(res))\\n    print(\\'Validating...\\')\\n    for r in res:\\n        sub_results = r.get(timeout=300)\\n        error_messages.extend([str(sub_result)\\n                               for sub_result in sub_results\\n                               if not sub_result.isValid()])\\n    pool.close()\\n    pool.join()\\n    if error_messages:\\n        raise ValueError(\\'\\\\n----\\\\n\\'.join(set(error_messages)))\\n\\n\\ndef _router(root, schema_name, cpus, parser, strict=True):\\n    root = os.path.abspath(root)\\n    if os.path.isfile(root):\\n        _validate_single(root, schema_name, parser, strict)\\n    else:\\n        _validate_dir(root, schema_name, cpus, parser, strict)\\n\\n\\ndef main():\\n    parser = argparse.ArgumentParser(description=\\'Validate yaml files.\\')\\n    parser.add_argument(\\'path\\', metavar=\\'PATH\\', default=\\'./\\', nargs=\\'?\\',\\n                        help=\\'folder to validate. Default is current directory.\\')\\n    parser.add_argument(\\'-s\\', \\'--schema\\', default=\\'schema.yaml\\',\\n                        help=\\'filename of schema. Default is schema.yaml.\\')\\n    parser.add_argument(\\'-n\\', \\'--cpu-num\\', default=4, type=int,\\n                        help=\\'number of CPUs to use. Default is 4.\\')\\n    parser.add_argument(\\'-p\\', \\'--parser\\', default=\\'pyyaml\\',\\n                        help=\\'YAML library to load files. Choices are \"ruamel\" or \"pyyaml\" (default).\\')\\n    parser.add_argument(\\'--no-strict\\', action=\\'store_true\\',\\n                        help=\\'Disable strict mode, unexpected elements in the data will be accepted.\\')\\n    args = parser.parse_args()\\n    try:\\n        _router(args.path, args.schema, args.cpu_num, args.parser, not args.no_strict)\\n        print(\\'Validation success! \\xf0\\x9f\\x91\\x8d\\')\\n    except (SyntaxError, NameError, TypeError, ValueError) as e:\\n        print(\\'Validation failed!\\\\n%s\\' % str(e))\\n        exit(1)\\n\\n\\nif __name__ == \\'__main__\\':\\n    main()\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, "return_value": "b'from . import yaml_reader\\n\\nparse_yaml = yaml_reader.parse_yaml\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, "return_value": "b''"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, "return_value": "b\"import pytest\\nfrom pytest import raises\\nfrom .. import parse_yaml\\n\\nparsers = ['pyyaml', 'PyYAML', 'ruamel']\\n\\n\\n@pytest.mark.parametrize('parser', parsers)\\ndef test_reader_error(parser):\\n    with raises(IOError):\\n        parse_yaml('wat', parser)\\n\""}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, "return_value": "b'import io\\nimport pytest\\nfrom .. import yaml_reader\\nfrom yamale.tests import get_fixture\\n\\nparsers = [\\'pyyaml\\', \\'PyYAML\\', \\'ruamel\\']\\nTYPES = get_fixture(\\'types.yaml\\')\\nNESTED = get_fixture(\\'nested.yaml\\')\\nKEYWORDS = get_fixture(\\'keywords.yaml\\')\\n\\n\\n@pytest.mark.parametrize(\\'parser\\', parsers)\\n@pytest.mark.parametrize(\\'use_string\\', [True, False])\\ndef test_parse(parser, use_string):\\n    if use_string:\\n        with io.open(TYPES, encoding=\\'utf-8\\') as f:\\n            content = f.read()\\n        a = yaml_reader.parse_yaml(parser=parser, content=content)[0]\\n    else:\\n        a = yaml_reader.parse_yaml(TYPES, parser)[0]\\n    assert a[\\'string\\'] == \\'str()\\'\\n\\n\\ndef test_parse_validates_arguments():\\n    with pytest.raises(TypeError):\\n        yaml_reader.parse_yaml(path=TYPES, content=\"name: Bob\")\\n    with pytest.raises(TypeError):\\n        yaml_reader.parse_yaml(path=None, content=None)\\n\\n\\n@pytest.mark.parametrize(\\'parser\\', parsers)\\ndef test_types(parser):\\n    t = yaml_reader.parse_yaml(TYPES, parser)[0]\\n    assert t[\\'string\\'] == \\'str()\\'\\n    assert t[\\'number\\'] == \\'num()\\'\\n    assert t[\\'boolean\\'] == \\'bool()\\'\\n    assert t[\\'integer\\'] == \\'int()\\'\\n\\n\\n@pytest.mark.parametrize(\\'parser\\', parsers)\\ndef test_keywords(parser):\\n    t = yaml_reader.parse_yaml(KEYWORDS, parser)[0]\\n    assert t[\\'optional_min\\'] == \\'int(min=1, required=False)\\'\\n\\n\\n@pytest.mark.parametrize(\\'parser\\', parsers)\\ndef test_nested(parser):\\n    t = yaml_reader.parse_yaml(NESTED, parser)[0]\\n    assert t[\\'list\\'][-1][\\'string\\'] == \\'str()\\'\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, "return_value": "b'from __future__ import absolute_import\\nfrom io import StringIO\\n\\n\\ndef _pyyaml(f):\\n    import yaml\\n    try:\\n        Loader = yaml.CSafeLoader\\n    except AttributeError:  # System does not have libyaml\\n        Loader = yaml.SafeLoader\\n    return list(yaml.load_all(f, Loader=Loader))\\n\\n\\ndef _ruamel(f):\\n    from ruamel.yaml import YAML\\n    yaml = YAML(typ=\\'safe\\')\\n    return list(yaml.load_all(f))\\n\\n\\n_parsers = {\\n    \\'pyyaml\\': _pyyaml,\\n    \\'ruamel\\': _ruamel\\n}\\n\\n\\ndef parse_yaml(path=None, parser=\\'pyyaml\\', content=None):\\n    try:\\n        parse = _parsers[parser.lower()]\\n    except KeyError:\\n        raise NameError(\\'Parser \"\\' + parser + \\'\" is not supported\\\\nAvailable parsers are listed below:\\\\nPyYAML\\\\nruamel\\')\\n    if (path is None and content is None) or (path is not None and content is not None):\\n        raise TypeError(\"Pass either path= or content=, not both\")\\n    if path is not None:\\n        with open(path) as f:\\n            return parse(f)\\n    else:\\n        return parse(StringIO(content))\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, "return_value": "b'from .schema import Schema\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, "return_value": "b\"class DataPath(object):\\n\\n    def __init__(self, *path):\\n        self._path = path\\n\\n    def __add__(self, other):\\n        dp = DataPath()\\n        dp._path = self._path + other._path\\n        return dp\\n\\n    def __str__(self):\\n        return '.'.join(map(str, (self._path)))\\n\\n    def __repr__(self):\\n        return 'DataPath({})'.format(repr(self._path))\\n\""}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, "return_value": "b'from .datapath import DataPath\\nfrom .validationresults import ValidationResult\\nfrom .. import syntax, util\\nfrom .. import validators as val\\n\\n\\nclass Schema(object):\\n    \"\"\"\\n    Makes a Schema object from a schema dict.\\n    Still acts like a dict.\\n    \"\"\"\\n\\n    def __init__(self, schema_dict, name=\\'\\', validators=None, includes=None):\\n        self.validators = validators or val.DefaultValidators\\n        self.dict = schema_dict\\n        self.name = name\\n        self._schema = self._process_schema(DataPath(),\\n                                            schema_dict,\\n                                            self.validators)\\n        # if this schema is included it shares the includes with the top level\\n        # schema\\n        self.includes = {} if includes is None else includes\\n\\n    def add_include(self, type_dict):\\n        for include_name, custom_type in type_dict.items():\\n            t = Schema(custom_type, name=include_name,\\n                       validators=self.validators, includes=self.includes)\\n            self.includes[include_name] = t\\n\\n    def _process_schema(self, path, schema_data, validators):\\n        \"\"\"\\n        Go through a schema and construct validators.\\n        \"\"\"\\n        if util.is_map(schema_data) or util.is_list(schema_data):\\n            for key, data in util.get_iter(schema_data):\\n                schema_data[key] = self._process_schema(path + DataPath(key),\\n                                                        data,\\n                                                        validators)\\n        else:\\n            schema_data = self._parse_schema_item(path,\\n                                                  schema_data,\\n                                                  validators)\\n        return schema_data\\n\\n    def _parse_schema_item(self, path, expression, validators):\\n        try:\\n            return syntax.parse(expression, validators)\\n        except SyntaxError as e:\\n            # Tack on some more context and rethrow.\\n            error = str(e) + \\' at node \\\\\\'%s\\\\\\'\\' % str(path)\\n            raise SyntaxError(error)\\n\\n    def validate(self, data, data_name, strict):\\n        path = DataPath()\\n        errors = self._validate(self._schema, data, path, strict)\\n        return ValidationResult(data_name, self.name, errors)\\n\\n    def _validate_item(self, validator, data, path, strict, key):\\n        \"\"\"\\n        Fetch item from data at the position key and validate with validator.\\n\\n        Returns an array of errors.\\n        \"\"\"\\n        errors = []\\n        path = path + DataPath(key)\\n        try:  # Pull value out of data. Data can be a map or a list/sequence\\n            data_item = data[key]\\n        except (KeyError, IndexError):  # Oops, that field didn\\'t exist.\\n            # Optional? Who cares.\\n            if isinstance(validator, val.Validator) and validator.is_optional:\\n                return errors\\n            # SHUT DOWN EVERYTHING\\n            errors.append(\\'%s: Required field missing\\' % path)\\n            return errors\\n\\n        return self._validate(validator, data_item, path, strict)\\n\\n    def _validate(self, validator, data, path, strict):\\n        \"\"\"\\n        Validate data with validator.\\n        Special handling of non-primitive validators.\\n\\n        Returns an array of errors.\\n        \"\"\"\\n\\n        if util.is_list(validator) or util.is_map(validator):\\n            return self._validate_static_map_list(validator,\\n                                                  data,\\n                                                  path,\\n                                                  strict)\\n\\n        errors = []\\n        # Optional field with optional value? Who cares.\\n        if (data is None and\\n                validator.is_optional and\\n                validator.can_be_none):\\n            return errors\\n\\n        errors += self._validate_primitive(validator, data, path)\\n\\n        if errors:\\n            return errors\\n\\n        if isinstance(validator, val.Include):\\n            errors += self._validate_include(validator, data, path, strict)\\n\\n        elif isinstance(validator, (val.Map, val.List)):\\n            errors += self._validate_map_list(validator, data, path, strict)\\n\\n        elif isinstance(validator, val.Any):\\n            errors += self._validate_any(validator, data, path, strict)\\n\\n        elif isinstance(validator, val.Subset):\\n            errors += self._validate_subset(validator, data, path, strict)\\n\\n        return errors\\n\\n    def _validate_static_map_list(self, validator, data, path, strict):\\n        if util.is_map(validator) and not util.is_map(data):\\n            return [\"%s : \\'%s\\' is not a map\" % (path, data)]\\n\\n        if util.is_list(validator) and not util.is_list(data):\\n            return [\"%s : \\'%s\\' is not a list\" % (path, data)]\\n\\n        errors = []\\n\\n        if strict:\\n            data_keys = set(util.get_keys(data))\\n            validator_keys = set(util.get_keys(validator))\\n            for key in data_keys - validator_keys:\\n                error_path = path + DataPath(key)\\n                errors += [\\'%s: Unexpected element\\' % error_path]\\n\\n        for key, sub_validator in util.get_iter(validator):\\n            errors += self._validate_item(sub_validator,\\n                                          data,\\n                                          path,\\n                                          strict,\\n                                          key)\\n        return errors\\n\\n    def _validate_map_list(self, validator, data, path, strict):\\n        errors = []\\n\\n        if not validator.validators:\\n            return errors  # No validators, user just wanted a map.\\n\\n        for key in util.get_keys(data):\\n            sub_errors = []\\n            for v in validator.validators:\\n                err = self._validate_item(v, data, path, strict, key)\\n                if err:\\n                    sub_errors.append(err)\\n\\n            if len(sub_errors) == len(validator.validators):\\n                # All validators failed, add to errors\\n                for err in sub_errors:\\n                    errors += err\\n\\n        return errors\\n\\n    def _validate_include(self, validator, data, path, strict):\\n        include_schema = self.includes.get(validator.include_name)\\n        if not include_schema:\\n            return [(\\'Include \\\\\\'%s\\\\\\' has not been defined.\\'\\n                     % validator.include_name)]\\n        strict = strict if validator.strict is None else validator.strict\\n        return include_schema._validate(include_schema._schema,\\n                                        data,\\n                                        path,\\n                                        strict)\\n\\n    def _validate_any(self, validator, data, path, strict):\\n        if not validator.validators:\\n            return []\\n\\n        errors = []\\n\\n        sub_errors = []\\n        for v in validator.validators:\\n            err = self._validate(v, data, path, strict)\\n            if err:\\n                sub_errors.append(err)\\n\\n        if len(sub_errors) == len(validator.validators):\\n            # All validators failed, add to errors\\n            for err in sub_errors:\\n                errors += err\\n\\n        return errors\\n\\n    def _validate_subset(self, validator, data, path, strict):\\n        def _internal_validate(internal_data):\\n            sub_errors = []\\n            for val in validator.validators:\\n                err = self._validate(val, internal_data, path, strict)\\n                if not err:\\n                    break\\n                sub_errors += err\\n            else:\\n                return sub_errors\\n            return []\\n\\n        if not validator.validators:\\n            return []\\n\\n        errors = []\\n        if util.is_map(data):\\n            for k, v in data.items():\\n                errors += _internal_validate({k: v})\\n        elif util.is_list(data):\\n            for k in data:\\n                errors += _internal_validate(k)\\n        else:\\n            errors += _internal_validate(data)\\n        return errors\\n\\n    def _validate_primitive(self, validator, data, path):\\n        errors = validator.validate(data)\\n\\n        for i, error in enumerate(errors):\\n            errors[i] = (\\'%s: \\' % path) + error\\n\\n        return errors\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, "return_value": "b'class Result(object):\\n    def __init__(self, errors):\\n        self.errors = errors\\n\\n    def __str__(self):\\n        return \\'\\\\n\\'.join(self.errors)\\n\\n    def isValid(self):\\n        return len(self.errors) == 0\\n\\n\\nclass ValidationResult(Result):\\n    def __init__(self, data, schema, errors):\\n        super(ValidationResult, self).__init__(errors)\\n        self.data = data\\n        self.schema = schema\\n\\n    def __str__(self):\\n        if self.isValid():\\n            error_str = \"\\'%s\\' is Valid\" % self.data\\n        else:\\n            head_line_bits = [\"Error validating data\"]\\n            if self.data:\\n                head_line_bits.append(\"\\'{}\\'\".format(self.data))\\n            if self.schema:\\n                head_line_bits.append(\"with schema \\'{}\\'\".format(self.schema))\\n            head_line = \\' \\'.join(head_line_bits)\\n            head_line += \\'\\\\n\\\\t\\'\\n            error_str = head_line + \\'\\\\n\\\\t\\'.join(self.errors)\\n        return error_str\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, "return_value": "b'from .parser import parse\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, "return_value": "b\"import ast\\n\\nfrom .. import validators as val\\n\\nsafe_globals = ('True', 'False', 'None')\\nsafe_builtins = dict((f, __builtins__[f]) for f in safe_globals)\\n\\n\\ndef _validate_expr(call_node, validators):\\n    # Validate that the expression uses a known, registered validator.\\n    try:\\n        func_name = call_node.func.id\\n    except AttributeError:\\n        raise SyntaxError('Schema expressions must be enclosed by a validator.')\\n    if func_name not in validators:\\n        raise SyntaxError('Not a registered validator: \\\\'%s\\\\'. ' % func_name)\\n    # Validate that all args are constant literals, validator names,  or other call nodes\\n    arg_values = call_node.args + [kw.value for kw in call_node.keywords]\\n    for arg in arg_values:\\n        # In Python 3.8+, the following have been folded into ast.Constant.\\n        constant_types = [\\n            ast.Constant, ast.Num, ast.Str, ast.Bytes, ast.NameConstant]\\n        base_arg = arg.operand if isinstance(arg, ast.UnaryOp) else arg\\n        if any(isinstance(base_arg, type) for type in constant_types):\\n            continue\\n        elif isinstance(base_arg, ast.Name) and base_arg.id in validators:\\n            continue\\n        elif isinstance(base_arg, ast.Call):\\n            _validate_expr(base_arg, validators)\\n        else:\\n            raise SyntaxError(\\n                'Argument values must either be constant literals, or else '\\n                'reference other validators.')\\n\\n\\ndef parse(validator_string, validators=None):\\n    validators = validators or val.DefaultValidators\\n    try:\\n        tree = ast.parse(validator_string, mode='eval')\\n        _validate_expr(tree.body, validators)\\n        # evaluate with access to a limited global scope only\\n        return eval(compile(tree, '<ast>', 'eval'),\\n                    {'__builtins__': safe_builtins},\\n                    validators)\\n    except (SyntaxError, NameError, TypeError) as e:\\n        raise SyntaxError(\\n            'Invalid schema expression: \\\\'%s\\\\'. ' % validator_string +\\n            str(e)\\n        )\\n\""}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, "return_value": "b''"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, "return_value": "b\"from pytest import raises\\n\\nfrom .. import parser as par\\nfrom yamale.validators.validators import (\\n    Validator, String, Regex, Number, Integer, Boolean, List, Day, Timestamp,\\n    Ip, Mac)\\n\\n\\ndef test_eval():\\n    assert eval('String()') == String()\\n\\n\\ndef test_types():\\n    assert par.parse('String()') == String()\\n    assert par.parse('str()') == String()\\n    assert par.parse('regex()') == Regex()\\n    assert par.parse('num()') == Number()\\n    assert par.parse('int()') == Integer()\\n    assert par.parse('day()') == Day()\\n    assert par.parse('timestamp()') == Timestamp()\\n    assert par.parse('bool()') == Boolean()\\n    assert par.parse('list(str())') == List(String())\\n    assert par.parse('ip()') == Ip()\\n    assert par.parse('mac()') == Mac()\\n\\n\\ndef test_custom_type():\\n\\n    class my_validator(Validator):\\n        pass\\n\\n    assert par.parse('custom()', {'custom': my_validator}) == my_validator()\\n\\n\\ndef test_required():\\n    assert par.parse('str(required=True)').is_required\\n    assert par.parse('str(required=False)').is_optional\\n\\n\\ndef test_syntax_error():\\n    with raises(SyntaxError):\\n        par.parse('eval()')\\n\""}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, "return_value": "b\"import os\\n\\n\\ndef get_fixture(relative):\\n    script_dir = os.path.dirname(__file__)\\n    return os.path.join(script_dir, 'fixtures/', relative)\\n\""}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, "return_value": "b'import os\\n\\nimport pytest\\n\\nfrom .. import command_line\\nfrom .. import yamale_error\\n\\ndir_path = os.path.dirname(os.path.realpath(__file__))\\n\\nparsers = [\\'pyyaml\\', \\'PyYAML\\', \\'ruamel\\']\\n\\n\\n@pytest.mark.parametrize(\\'parser\\', parsers)\\ndef test_bad_yaml(parser):\\n    with pytest.raises(ValueError) as e:\\n        command_line._router(\\n            \\'yamale/tests/command_line_fixtures/yamls/bad.yaml\\',\\n            \\'schema.yaml\\', 1, parser)\\n    assert \"map.bad: \\'12.5\\' is not a str.\" in e.value.message\\n\\n\\n@pytest.mark.parametrize(\\'parser\\', parsers)\\ndef test_required_keys_yaml(parser):\\n    with pytest.raises(ValueError) as e:\\n        command_line._router(\\n            \\'yamale/tests/command_line_fixtures/yamls/required_keys_bad.yaml\\',\\n            \\'required_keys_schema.yaml\\', 1, parser)\\n    assert \"map.key: Required field missing\" in e.value.message\\n\\n\\n@pytest.mark.parametrize(\\'parser\\', parsers)\\ndef test_good_yaml(parser):\\n    command_line._router(\\n        \\'yamale/tests/command_line_fixtures/yamls/good.yaml\\',\\n        \\'schema.yaml\\', 1, parser)\\n    \\n\\n@pytest.mark.parametrize(\\'parser\\', parsers)\\ndef test_good_relative_yaml(parser):\\n    command_line._router(\\n        \\'yamale/tests/command_line_fixtures/yamls/good.yaml\\',\\n        \\'../schema_dir/external.yaml\\', 1, parser)\\n    \\n\\n@pytest.mark.parametrize(\\'parser\\', parsers)\\ndef test_external_glob_schema(parser):\\n    command_line._router(\\n        \\'yamale/tests/command_line_fixtures/yamls/good.yaml\\',\\n        os.path.join(dir_path, \\'command_line_fixtures/schema_dir/ex*.yaml\\'), 1, parser)\\n    \\n\\ndef test_empty_schema_file():\\n    with pytest.raises(ValueError, match=\\'is an empty file!\\'):\\n        command_line._router(\\n            \\'yamale/tests/command_line_fixtures/empty_schema/data.yaml\\',\\n            \\'empty_schema.yaml\\' , 1, \\'PyYAML\\')\\n\\n\\ndef test_external_schema():\\n    command_line._router(\\n        \\'yamale/tests/command_line_fixtures/yamls/good.yaml\\',\\n        os.path.join(dir_path, \\'command_line_fixtures/schema_dir/external.yaml\\'), 1, \\'PyYAML\\')\\n\\n\\ndef test_bad_dir():\\n    with pytest.raises(ValueError):\\n        command_line._router(\\n            \\'yamale/tests/command_line_fixtures/yamls\\',\\n            \\'schema.yaml\\', 4, \\'PyYAML\\')\\n\\n\\ndef test_bad_strict():\\n    with pytest.raises(ValueError) as e:\\n        command_line._router(\\n            \\'yamale/tests/command_line_fixtures/yamls/required_keys_extra_element.yaml\\',\\n            \\'required_keys_schema.yaml\\',\\n            4, \\'PyYAML\\', strict=True)\\n    assert \"map.key2: Unexpected element\" in e.value.message\\n\\n\\ndef test_bad_issue_54():\\n    with pytest.raises(yamale_error.YamaleError) as e:\\n        command_line._router(\\n            \\'yamale/tests/fixtures/nested_issue_54.yaml\\',\\n            \\'nested.yaml\\',\\n            4, \\'PyYAML\\', strict=True)\\n    assert \\'string: Required field missing\\' in e.value.message\\n    assert \\'number: Required field missing\\' in e.value.message\\n    assert \\'integer: Required field missing\\' in e.value.message\\n    assert \\'boolean: Required field missing\\' in e.value.message\\n    assert \\'date: Required field missing\\' in e.value.message\\n    assert \\'datetime: Required field missing\\' in e.value.message\\n    assert \\'nest: Required field missing\\' in e.value.message\\n    assert \\'list: Required field missing\\' in e.value.message\\n\\ndef test_nested_schema_issue_69():\\n    command_line._router(\\'yamale/tests/command_line_fixtures/nestedYaml\\',\\'schema.yaml\\', 1, \\'PyYAML\\')\\n\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, "return_value": "b'import io\\nimport pytest\\nimport re\\nimport yamale\\n\\nfrom . import get_fixture\\nfrom .. import validators as val\\n\\ntypes = {\\n    \\'schema\\': \\'types.yaml\\',\\n    \\'bad\\': \\'types_bad_data.yaml\\',\\n    \\'good\\': \\'types_good_data.yaml\\'\\n}\\n\\nnested = {\\n    \\'schema\\': \\'nested.yaml\\',\\n    \\'bad\\': \\'nested_bad_data.yaml\\',\\n    \\'good\\': \\'nested_good_data.yaml\\'\\n}\\n\\ncustom = {\\n    \\'schema\\': \\'custom_types.yaml\\',\\n    \\'bad\\': \\'custom_types_bad.yaml\\',\\n    \\'good\\': \\'custom_types_good.yaml\\'\\n}\\n\\nkeywords = {\\n    \\'schema\\': \\'keywords.yaml\\',\\n    \\'bad\\': \\'keywords_bad.yaml\\',\\n    \\'good\\': \\'keywords_good.yaml\\'\\n}\\n\\nlists = {\\n    \\'schema\\': \\'lists.yaml\\',\\n    \\'bad\\': \\'lists_bad.yaml\\',\\n    \\'bad2\\': \\'lists_bad2.yaml\\',\\n    \\'good\\': \\'lists_good.yaml\\'\\n}\\n\\nmaps = {\\n    \\'schema\\': \\'map.yaml\\',\\n    \\'bad\\': \\'map_bad.yaml\\',\\n    \\'bad2\\': \\'map_bad2.yaml\\',\\n    \\'good\\': \\'map_good.yaml\\'\\n}\\n\\nanys = {\\n    \\'schema\\': \\'any.yaml\\',\\n    \\'bad\\': \\'any_bad.yaml\\',\\n    \\'good\\': \\'any_good.yaml\\'\\n}\\n\\nlist_include = {\\n    \\'schema\\': \\'list_include.yaml\\',\\n    \\'good\\': \\'list_include_good.yaml\\'\\n}\\n\\nissue_22 = {\\n    \\'schema\\': \\'issue_22.yaml\\',\\n    \\'good\\': \\'issue_22_good.yaml\\'\\n}\\n\\nissue_50 = {\\n    \\'schema\\': \\'issue_50.yaml\\',\\n    \\'good\\': \\'issue_50_good.yaml\\'\\n}\\n\\nregexes = {\\n    \\'schema\\': \\'regex.yaml\\',\\n    \\'bad\\': \\'regex_bad.yaml\\',\\n    \\'good\\': \\'regex_good.yaml\\'\\n}\\n\\nips = {\\n    \\'schema\\': \\'ip.yaml\\',\\n    \\'bad\\': \\'ip_bad.yaml\\',\\n    \\'good\\': \\'ip_good.yaml\\'\\n}\\n\\nmacs = {\\n    \\'schema\\': \\'mac.yaml\\',\\n    \\'bad\\': \\'mac_bad.yaml\\',\\n    \\'good\\': \\'mac_good.yaml\\'\\n}\\n\\nnested_map = {\\n    \\'schema\\': \\'nested_map.yaml\\',\\n    \\'good\\': \\'nested_map_good.yaml\\'\\n}\\n\\ntop_level_map = {\\n    \\'schema\\': \\'top_level_map.yaml\\',\\n    \\'good\\': \\'top_level_map_good.yaml\\'\\n}\\n\\ninclude_validator = {\\n    \\'schema\\': \\'include_validator.yaml\\',\\n    \\'good\\': \\'include_validator_good.yaml\\',\\n    \\'bad\\': \\'include_validator_bad.yaml\\'\\n}\\n\\nstrict_map = {\\n    \\'schema\\': \\'strict_map.yaml\\',\\n    \\'good\\': \\'strict_map_good.yaml\\',\\n    \\'bad\\': \\'strict_map_bad.yaml\\'\\n}\\n\\nmixed_strict_map = {\\n    \\'schema\\': \\'mixed_strict_map.yaml\\',\\n    \\'good\\': \\'mixed_strict_map_good.yaml\\',\\n    \\'bad\\': \\'mixed_strict_map_bad.yaml\\'\\n}\\n\\nstrict_list = {\\n    \\'schema\\': \\'strict_list.yaml\\',\\n    \\'good\\': \\'strict_list_good.yaml\\',\\n    \\'bad\\': \\'strict_list_bad.yaml\\'\\n}\\n\\nnested_map2 = {\\n    \\'schema\\': \\'nested_map2.yaml\\',\\n    \\'good\\': \\'nested_map2_good.yaml\\',\\n    \\'bad\\': \\'nested_map2_bad.yaml\\'\\n}\\n\\nstatic_list = {\\n    \\'schema\\': \\'static_list.yaml\\',\\n    \\'good\\': \\'static_list_good.yaml\\',\\n    \\'bad\\': \\'static_list_bad.yaml\\'\\n}\\n\\nnested_issue_54 = {\\n    \\'schema\\': \\'nested.yaml\\',\\n    \\'bad\\': \\'nested_issue_54.yaml\\',\\n    \\'good\\': \\'nested_good_data.yaml\\'\\n}\\n\\nmap_key_constraint = {\\n    \\'schema\\': \\'map_key_constraint.yaml\\',\\n    \\'good\\': \\'map_key_constraint_good.yaml\\',\\n    \\'bad_base\\': \\'map_key_constraint_bad_base.yaml\\',\\n    \\'bad_nest\\': \\'map_key_constraint_bad_nest.yaml\\',\\n    \\'bad_nest_con\\': \\'map_key_constraint_bad_nest_con.yaml\\',\\n}\\n\\nnumeric_bool_coercion = {\\n    \\'schema\\': \\'numeric_bool_coercion.yaml\\',\\n    \\'good\\': \\'numeric_bool_coercion_good.yaml\\',\\n    \\'bad\\': \\'numeric_bool_coercion_bad.yaml\\',\\n}\\n\\nsubset = {\\n    \\'schema\\': \\'subset.yaml\\',\\n    \\'good\\': \\'subset_good.yaml\\',\\n    \\'good2\\': \\'subset_good2.yaml\\',\\n    \\'bad\\': \\'subset_bad.yaml\\',\\n    \\'bad2\\': \\'subset_bad2.yaml\\',\\n    \\'bad3\\': \\'subset_bad3.yaml\\'\\n}\\n\\nsubset_empty = {\\n    \\'schema\\': \\'subset_empty.yaml\\',\\n    \\'good\\': \\'subset_empty_good.yaml\\',\\n    \\'good2\\': \\'subset_empty_good2.yaml\\'\\n}\\n\\nsubset_nodef = {\\n    \\'schema\\': \\'subset_nodef.yaml\\'\\n}\\n\\ntest_data = [\\n    types, nested, custom,\\n    keywords, lists, maps,\\n    anys, list_include, issue_22,\\n    issue_50, regexes, ips, macs,\\n    nested_map, top_level_map,\\n    include_validator, strict_map,\\n    mixed_strict_map, strict_list,\\n    nested_map2, static_list,\\n    nested_issue_54,\\n    map_key_constraint,\\n    numeric_bool_coercion,\\n    subset, subset_empty\\n]\\n\\nfor d in test_data:\\n    for key in d.keys():\\n        if key == \\'schema\\':\\n            d[key] = yamale.make_schema(get_fixture(d[key]))\\n        else:\\n            d[key] = yamale.make_data(get_fixture(d[key]))\\n\\n\\ndef test_tests():\\n    \"\"\" Make sure the test runner is working.\"\"\"\\n    assert 1 + 1 == 2\\n\\n\\ndef test_flat_make_schema():\\n    assert isinstance(types[\\'schema\\']._schema[\\'string\\'], val.String)\\n\\n\\ndef test_nested_schema():\\n    nested_schema = nested[\\'schema\\']._schema\\n    assert isinstance(nested_schema[\\'string\\'], val.String)\\n    assert isinstance(nested_schema[\\'list\\'], (list, tuple))\\n    assert isinstance(nested_schema[\\'list\\'][0], val.String)\\n\\n\\n@pytest.mark.parametrize(\\'data_map\\', test_data)\\ndef test_good(data_map):\\n    for k, v in data_map.items():\\n        if k.startswith(\\'good\\'):\\n            yamale.validate(data_map[\\'schema\\'], data_map[k])\\n\\n\\ndef test_bad_validate():\\n    assert count_exception_lines(types[\\'schema\\'], types[\\'bad\\']) == 9\\n\\n\\ndef test_bad_nested():\\n    assert count_exception_lines(nested[\\'schema\\'], nested[\\'bad\\']) == 2\\n\\n\\ndef test_bad_nested_issue_54():\\n    exp = [\\n        \\'string: Required field missing\\',\\n        \\'number: Required field missing\\',\\n        \\'integer: Required field missing\\',\\n        \\'boolean: Required field missing\\',\\n        \\'date: Required field missing\\',\\n        \\'datetime: Required field missing\\',\\n        \\'nest: Required field missing\\',\\n        \\'list: Required field missing\\'\\n    ]\\n    match_exception_lines(nested_issue_54[\\'schema\\'], nested_issue_54[\\'bad\\'], exp)\\n\\ndef test_bad_custom():\\n    assert count_exception_lines(custom[\\'schema\\'], custom[\\'bad\\']) == 1\\n\\n\\ndef test_bad_lists():\\n    assert count_exception_lines(lists[\\'schema\\'], lists[\\'bad\\']) == 6\\n\\n\\ndef test_bad2_lists():\\n    assert count_exception_lines(lists[\\'schema\\'], lists[\\'bad2\\']) == 2\\n\\n\\ndef test_bad_maps():\\n    assert count_exception_lines(maps[\\'schema\\'], maps[\\'bad\\']) == 7\\n\\ndef test_bad_maps2():\\n    assert count_exception_lines(maps[\\'schema\\'], maps[\\'bad2\\']) == 1\\n\\ndef test_bad_keywords():\\n    assert count_exception_lines(keywords[\\'schema\\'], keywords[\\'bad\\']) == 9\\n\\n\\ndef test_bad_anys():\\n    assert count_exception_lines(anys[\\'schema\\'], anys[\\'bad\\']) == 5\\n\\n\\ndef test_bad_regexes():\\n    assert count_exception_lines(regexes[\\'schema\\'], regexes[\\'bad\\']) == 4\\n\\n\\ndef test_bad_include_validator():\\n    exp = [\"key1: \\'a_string\\' is not a int.\"]\\n    match_exception_lines(include_validator[\\'schema\\'],\\n                          include_validator[\\'bad\\'],\\n                          exp)\\n\\n\\ndef test_bad_schema():\\n    with pytest.raises(SyntaxError) as excinfo:\\n        yamale.make_schema(get_fixture(\\'bad_schema.yaml\\'))\\n    assert \\'fixtures/bad_schema.yaml\\' in str(excinfo.value)\\n\\n\\ndef test_empty_schema():\\n    with pytest.raises(ValueError) as excinfo:\\n        yamale.make_schema(get_fixture(\\'empty_schema.yaml\\'))\\n    assert \\'empty_schema.yaml is an empty file!\\' in str(excinfo.value)\\n\\n\\n@pytest.mark.parametrize(\\n    \"schema_filename\",\\n    [\\'bad_schema_rce.yaml\\', \\'bad_schema_rce2.yaml\\', \\'bad_schema_rce3.yaml\\', \\'bad_schema_rce4.yaml\\']\\n)\\ndef test_vulnerable_schema(schema_filename):\\n    with pytest.raises(SyntaxError) as excinfo:\\n        yamale.make_schema(get_fixture(schema_filename))\\n    assert schema_filename in str(excinfo.value)\\n\\n\\ndef test_list_is_not_a_map():\\n    exp = [\" : \\'[1, 2]\\' is not a map\"]\\n    match_exception_lines(strict_map[\\'schema\\'],\\n                          strict_list[\\'good\\'],\\n                          exp)\\n\\n\\ndef test_bad_strict_map():\\n    exp = [\\'extra: Unexpected element\\']\\n    match_exception_lines(strict_map[\\'schema\\'],\\n                          strict_map[\\'bad\\'],\\n                          exp,\\n                          strict=True)\\n\\n\\ndef test_bad_strict_list():\\n    exp = [\\'2: Unexpected element\\']\\n    match_exception_lines(strict_list[\\'schema\\'],\\n                          strict_list[\\'bad\\'],\\n                          exp,\\n                          strict=True)\\n\\n\\ndef test_bad_mixed_strict_map():\\n    exp = [\\'field3.extra: Unexpected element\\']\\n    match_exception_lines(mixed_strict_map[\\'schema\\'],\\n                          mixed_strict_map[\\'bad\\'],\\n                          exp)\\n\\n\\ndef test_bad_nested_map2():\\n    exp = [\\'field1.field1_1: Required field missing\\']\\n    match_exception_lines(nested_map2[\\'schema\\'],\\n                          nested_map2[\\'bad\\'],\\n                          exp)\\n\\n\\ndef test_bad_static_list():\\n    exp = [\\'0: Required field missing\\']\\n    match_exception_lines(static_list[\\'schema\\'],\\n                          static_list[\\'bad\\'],\\n                          exp)\\n\\n\\ndef test_bad_map_key_constraint_base():\\n    exp = [\": Key error - \\'bad\\' is not a int.\"]\\n    match_exception_lines(map_key_constraint[\\'schema\\'],\\n                          map_key_constraint[\\'bad_base\\'],\\n                          exp)\\n\\n\\ndef test_bad_map_key_constraint_nest():\\n    exp = [\"1.0: Key error - \\'100\\' is not a str.\"]\\n    match_exception_lines(map_key_constraint[\\'schema\\'],\\n                          map_key_constraint[\\'bad_nest\\'],\\n                          exp)\\n\\n\\ndef test_bad_map_key_constraint_nest_con():\\n    exp = [\\n        \"1.0: Key error - \\'100\\' is not a str.\",\\n        \"1.0: Key error - \\'baz\\' contains excluded character \\'z\\'\",\\n    ]\\n    match_exception_lines(map_key_constraint[\\'schema\\'],\\n                          map_key_constraint[\\'bad_nest_con\\'],\\n                          exp)\\n\\n\\ndef test_bad_numeric_bool_coercion():\\n    exp = [\\n        \"integers.0: \\'False\\' is not a int.\",\\n        \"integers.1: \\'True\\' is not a int.\",\\n        \"numbers.0: \\'False\\' is not a num.\",\\n        \"numbers.1: \\'True\\' is not a num.\",\\n    ]\\n    match_exception_lines(numeric_bool_coercion[\\'schema\\'],\\n                          numeric_bool_coercion[\\'bad\\'],\\n                          exp)\\n\\ndef test_bad_subset():\\n    exp = [\\n        \"subset_list: \\'subset\\' may not be an empty set.\"\\n    ]\\n    match_exception_lines(subset[\\'schema\\'],\\n                          subset[\\'bad\\'],\\n                          exp)\\n\\ndef test_bad_subset2():\\n    exp = [\\n        \"subset_list: \\'[1]\\' is not a int.\",\\n        \"subset_list: \\'[1]\\' is not a str.\"\\n    ]\\n    match_exception_lines(subset[\\'schema\\'],\\n                          subset[\\'bad2\\'],\\n                          exp)\\n\\ndef test_bad_subset3():\\n    exp = [\\n        \"subset_list: \\'{\\'a\\': 1}\\' is not a int.\",\\n        \"subset_list: \\'{\\'a\\': 1}\\' is not a str.\"\\n    ]\\n    match_exception_lines(subset[\\'schema\\'],\\n                          subset[\\'bad3\\'],\\n                          exp)\\n\\ndef test_nodef_subset_schema():\\n    with pytest.raises(ValueError) as e:\\n        yamale.make_schema(get_fixture(subset_nodef[\\'schema\\']))\\n\\n    assert \"\\'subset\\' requires at least one validator!\" in str(e.value)\\n\\n@pytest.mark.parametrize(\"use_schema_string,use_data_string,expected_message_re\", [\\n    (False, False, \"^Error validating data \\'.*?\\' with schema \\'.*?\\'\\\\n\\\\t\"),\\n    (True, False, \"^Error validating data \\'.*?\\'\\\\n\\\\t\"),\\n    (False, True, \"^Error validating data with schema \\'.*?\\'\\\\n\\\\t\"),\\n    (True, True, \"^Error validating data\\\\n\\\\t\"),\\n])\\ndef test_validate_errors(use_schema_string, use_data_string, expected_message_re):\\n    schema_path = get_fixture(\\'types.yaml\\')\\n    data_path = get_fixture(\\'types_bad_data.yaml\\')\\n    if use_schema_string:\\n        with io.open(schema_path, encoding=\\'utf-8\\') as f:\\n            schema = yamale.make_schema(content=f.read())\\n    else:\\n        schema = yamale.make_schema(schema_path)\\n    if use_data_string:\\n        with io.open(data_path, encoding=\\'utf-8\\') as f:\\n            data = yamale.make_data(content=f.read())\\n    else:\\n        data = yamale.make_data(data_path)\\n    with pytest.raises(yamale.yamale_error.YamaleError) as excinfo:\\n        yamale.validate(schema, data)\\n    assert re.match(expected_message_re, excinfo.value.message, re.MULTILINE), \\\\\\n        \\'Message {} should match {}\\'.format(\\n            excinfo.value.message, expected_message_re\\n        )\\n\\n\\ndef match_exception_lines(schema, data, expected, strict=False):\\n    with pytest.raises(ValueError) as e:\\n        yamale.validate(schema, data, strict)\\n\\n    got = e.value.results[0].errors\\n    got.sort()\\n    expected.sort()\\n    assert got == expected\\n\\n\\ndef count_exception_lines(schema, data, strict=False):\\n    with pytest.raises(ValueError) as e:\\n        yamale.validate(schema, data, strict)\\n    result = e.value.results[0]\\n    return len(result.errors)\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, "return_value": "b'import re\\nimport os\\nfrom yamale import YamaleTestCase\\nfrom yamale.validators import DefaultValidators, Validator\\n\\n\\ndata_folder = os.path.dirname(os.path.realpath(__file__))\\n\\n\\nclass TestAllYaml(YamaleTestCase):\\n    base_dir = data_folder\\n    schema = \\'meta_test_fixtures/schema.yaml\\'\\n    yaml = \\'meta_test_fixtures/data1.yaml\\'\\n\\n    def runTest(self):\\n        self.assertTrue(self.validate())\\n\\n\\nclass TestBadYaml(YamaleTestCase):\\n    base_dir = data_folder\\n    schema = \\'meta_test_fixtures/schema_bad.yaml\\'\\n    yaml = \\'meta_test_fixtures/data*.yaml\\'\\n\\n    def runTest(self):\\n        self.assertRaises(ValueError, self.validate)\\n\\n\\nclass TestMapYaml(YamaleTestCase):\\n    base_dir = data_folder\\n    schema = \\'meta_test_fixtures/schema.yaml\\'\\n    yaml = [\\'meta_test_fixtures/data1.yaml\\',\\n            \\'meta_test_fixtures/some_data.yaml\\',\\n            # Make sure  schema doesn\\'t validate itself\\n            \\'meta_test_fixtures/schema.yaml\\']\\n\\n    def runTest(self):\\n        self.assertTrue(self.validate())\\n\\n\\n# class TestListYaml(YamaleTestCase):\\n#     base_dir = data_folder\\n#     schema = \\'meta_test_fixtures/schema_include_list.yaml\\'\\n#     yaml = [\\'meta_test_fixtures/data_include_list.yaml\\']\\n\\n#     def runTest(self):\\n#         self.assertTrue(self.validate())\\n\\n\\nclass Card(Validator):\\n    \"\"\" Custom validator for testing purpose \"\"\"\\n    tag = \\'card\\'\\n    card_regex = re.compile(r\\'^(10|[2-9JQKA])[SHDC]$\\')\\n\\n    def _is_valid(self, value):\\n        return re.match(self.card_regex, value)\\n\\n\\nclass TestCustomValidator(YamaleTestCase):\\n    base_dir = data_folder\\n    schema = \\'meta_test_fixtures/schema_custom.yaml\\'\\n    yaml = \\'meta_test_fixtures/data_custom.yaml\\'\\n\\n    def runTest(self):\\n        validators = DefaultValidators.copy()\\n        validators[\\'card\\'] = Card\\n        self.assertTrue(self.validate(validators))\\n\\n\\nclass TestCustomValidatorWithIncludes(YamaleTestCase):\\n    base_dir = data_folder\\n    schema = \\'meta_test_fixtures/schema_custom_with_include.yaml\\'\\n    yaml = \\'meta_test_fixtures/data_custom_with_include.yaml\\'\\n\\n    def runTest(self):\\n        validators = DefaultValidators.copy()\\n        validators[\\'card\\'] = Card\\n        self.assertTrue(self.validate(validators))\\n\\n\\nclass TestBadRequiredYaml(YamaleTestCase):\\n    base_dir = data_folder\\n    schema = \\'meta_test_fixtures/schema_required_bad.yaml\\'\\n    yaml = \\'meta_test_fixtures/data_required_bad.yaml\\'\\n\\n    def runTest(self):\\n        self.assertRaises(ValueError, self.validate)\\n\\n\\nclass TestGoodRequiredYaml(YamaleTestCase):\\n    base_dir = data_folder\\n    schema = \\'meta_test_fixtures/schema_required_good.yaml\\'\\n    yaml = \\'meta_test_fixtures/data_required_good.yaml\\'\\n\\n    def runTest(self):\\n        self.assertTrue(self.validate())\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, "return_value": "b'# ABCs for containers were moved to their own module\\ntry:\\n    from collections.abc import Mapping, Set, Sequence\\nexcept ImportError:\\n    from collections import Mapping, Set, Sequence\\n\\n\\n# Python 3 has no basestring, lets test it.\\ntry:\\n    basestring  # attempt to evaluate basestring\\n\\n    def isstr(s):\\n        return isinstance(s, basestring)\\n\\n    def to_unicode(s):\\n        return unicode(s)\\n\\nexcept NameError:\\n    def isstr(s):\\n        return isinstance(s, str)\\n\\n    def to_unicode(s):\\n        return s\\n\\n\\ndef is_list(obj):\\n    return isinstance(obj, Sequence) and not isstr(obj)\\n\\n\\ndef is_map(obj):\\n    return isinstance(obj, Mapping)\\n\\n\\ndef get_keys(obj):\\n    if is_map(obj):\\n        return obj.keys()\\n    elif is_list(obj):\\n        return range(len(obj))\\n\\n\\ndef get_iter(iterable):\\n    if isinstance(iterable, Mapping):\\n        return iterable.items()\\n    else:\\n        return enumerate(iterable)\\n\\n\\ndef get_subclasses(cls, _subclasses_yielded=None):\\n    \"\"\"\\n    Generator recursively yielding all subclasses of the passed class (in\\n    depth-first order).\\n\\n    Parameters\\n    ----------\\n    cls : type\\n        Class to find all subclasses of.\\n    _subclasses_yielded : set\\n        Private parameter intended to be passed only by recursive invocations of\\n        this function, containing all previously yielded classes.\\n    \"\"\"\\n\\n    if _subclasses_yielded is None:\\n        _subclasses_yielded = set()\\n\\n    # If the passed class is old- rather than new-style, raise an exception.\\n    if not hasattr(cls, \\'__subclasses__\\'):\\n        raise TypeError(\\'Old-style class \"%s\" unsupported.\\' % cls.__name__)\\n\\n    # For each direct subclass of this class\\n    for subclass in cls.__subclasses__():\\n        # If this subclass has already been yielded, skip to the next.\\n        if subclass in _subclasses_yielded:\\n            continue\\n\\n        # Yield this subclass and record having done so before recursing.\\n        yield subclass\\n        _subclasses_yielded.add(subclass)\\n\\n        # Yield all direct subclasses of this class as well.\\n        for subclass_subclass in get_subclasses(subclass, _subclasses_yielded):\\n            yield subclass_subclass\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, "return_value": "b'from .base import Validator\\nfrom .validators import *\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, "return_value": "b'class Validator(object):\\n    \"\"\"Base class for all Validators\"\"\"\\n    constraints = []\\n    value_type = None\\n\\n    def __init__(self, *args, **kwargs):\\n        self.args = args\\n        self.kwargs = kwargs\\n\\n        # Is field required? Default is True\\n        self.is_required = bool(kwargs.pop(\\'required\\', True))\\n\\n        # Can value be None if field is optional? Default is True\\n        self._value_can_be_none = bool(kwargs.pop(\\'none\\', True))\\n\\n        # Construct all constraints\\n        self._constraints_inst = self._create_constraints(self.constraints,\\n                                                          self.value_type,\\n                                                          kwargs)\\n\\n    def _create_constraints(self, constraint_classes, value_type, kwargs):\\n        constraints = []\\n        for constraint in constraint_classes:\\n            constraints.append(constraint(value_type, kwargs))\\n        return constraints\\n\\n    @property\\n    def tag(self):\\n        return self.__class__\\n\\n    @property\\n    def is_optional(self):\\n        return not self.is_required\\n\\n    @property\\n    def can_be_none(self):\\n        \"\"\"Check if value for optional field can be None.\"\"\"\\n        return self._value_can_be_none\\n\\n    def _is_valid(self, value):\\n        \"\"\"Validators must implement this. Return True if value is valid.\"\"\"\\n        raise NotImplementedError(\\'You need to override this function\\')\\n\\n    def get_name(self):\\n        return self.tag\\n\\n    def validate(self, value):\\n        \"\"\"\\n        Check if ``value`` is valid.\\n\\n        :returns: [errors] If ``value`` is invalid, otherwise [].\\n        \"\"\"\\n        errors = []\\n\\n        # Make sure the type validates first.\\n        valid = self._is_valid(value)\\n        if not valid:\\n            errors.append(self.fail(value))\\n            return errors\\n\\n        # Then validate all the constraints second.\\n        for constraint in self._constraints_inst:\\n            error = constraint.is_valid(value)\\n            if error:\\n                if isinstance(error, list):\\n                    errors.extend(error)\\n                else:\\n                    errors.append(error)\\n\\n        return errors\\n\\n    def is_valid(self, value):\\n        return self.validate(value) == []\\n\\n    def fail(self, value):\\n        \"\"\"Override to define a custom fail message\"\"\"\\n        return \\'\\\\\\'%s\\\\\\' is not a %s.\\' % (value, self.get_name())\\n\\n    def __repr__(self):\\n        return \\'%s(%s, %s)\\' % (self.__class__.__name__, self.args, self.kwargs)\\n\\n    def __eq__(self, other):\\n        # Validators are equal if they have the same args and kwargs.\\n        eq = [isinstance(other, self.__class__),\\n              self.args == other.args,\\n              self.kwargs == other.kwargs]\\n        return all(eq)\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, "return_value": "b\"from __future__ import absolute_import\\nimport re\\nimport datetime\\nimport ipaddress\\n\\nfrom yamale.util import to_unicode\\nfrom .base import Validator\\nfrom .. import util\\n\\n\\nclass Constraint(object):\\n    keywords = {}  # Keywords and types accepted by this constraint\\n    is_active = False\\n\\n    def __init__(self, value_type, kwargs):\\n        self._parseKwargs(kwargs)\\n\\n    def _parseKwargs(self, kwargs):\\n        for kwarg, kwtype in self.keywords.items():\\n            value = self.get_kwarg(kwargs, kwarg, kwtype)\\n            setattr(self, kwarg, value)\\n\\n    def get_kwarg(self, kwargs, key, kwtype):\\n        try:\\n            value = kwargs[key]\\n        except KeyError:\\n            return None\\n\\n        # Activate this constraint\\n        self.is_active = True\\n\\n        if isinstance(value, kwtype):\\n            # value already correct type, return\\n            return value\\n\\n        try:  # Try to convert value\\n            # Is this value one of the datetime types?\\n            if kwtype == datetime.date:\\n                time = datetime.datetime.strptime(value, '%Y-%m-%d')\\n                return datetime.date(time.year, time.month, time.day)\\n\\n            if kwtype == datetime.datetime:\\n                return datetime.datetime.strptime(value, '%Y-%m-%d %H:%M:%S')\\n\\n            return kwtype(value)\\n        except (TypeError, ValueError):\\n            raise SyntaxError('%s is not a %s' % (key, kwtype))\\n\\n    def is_valid(self, value):\\n        if not self.is_active:\\n            return None\\n\\n        if not self._is_valid(value):\\n            return self._fail(value)\\n\\n        return None\\n\\n    def _fail(self, value):\\n        return '\\\\'%s\\\\' violates %s.' % (value, self.__class__.__name__)\\n\\n\\nclass Min(Constraint):\\n    fail = '%s is less than %s'\\n\\n    def __init__(self, value_type, kwargs):\\n        self.keywords = {'min': value_type}\\n        super(Min, self).__init__(value_type, kwargs)\\n\\n    def _is_valid(self, value):\\n        return self.min <= value\\n\\n    def _fail(self, value):\\n        return self.fail % (value, self.min)\\n\\n\\nclass Max(Constraint):\\n    fail = '%s is greater than %s'\\n\\n    def __init__(self, value_type, kwargs):\\n        self.keywords = {'max': value_type}\\n        super(Max, self).__init__(value_type, kwargs)\\n\\n    def _is_valid(self, value):\\n        return self.max >= value\\n\\n    def _fail(self, value):\\n        return self.fail % (value, self.max)\\n\\n\\nclass LengthMin(Constraint):\\n    keywords = {'min': int}\\n    fail = 'Length of %s is less than %s'\\n\\n    def _is_valid(self, value):\\n        return self.min <= len(value)\\n\\n    def _fail(self, value):\\n        return self.fail % (value, self.min)\\n\\n\\nclass LengthMax(Constraint):\\n    keywords = {'max': int}\\n    fail = 'Length of %s is greater than %s'\\n\\n    def _is_valid(self, value):\\n        return self.max >= len(value)\\n\\n    def _fail(self, value):\\n        return self.fail % (value, self.max)\\n\\n\\nclass Key(Constraint):\\n    keywords = {'key': Validator}\\n    fail = 'Key error - %s'\\n\\n    def _is_valid(self, value):\\n        for k in value.keys():\\n            if self.key.validate(k) != []:\\n                return False\\n        return True\\n\\n    def _fail(self, value):\\n        error_list = []\\n        for k in value.keys():\\n            error_list.extend(self.key.validate(k))\\n        return [self.fail % (e) for e in error_list]\\n\\n\\nclass StringEquals(Constraint):\\n    keywords = {'equals': str, 'ignore_case': bool}\\n    fail = '%s does not equal %s'\\n\\n    def _is_valid(self, value):\\n        # Check if the function has only been called due to ignore_case\\n        if self.equals is not None:\\n            if self.ignore_case is not None:\\n                if not self.ignore_case:\\n                    return value == self.equals\\n                else:\\n                    return value.casefold() == self.equals.casefold()\\n            else:\\n                return value == self.equals\\n        else:\\n            return True\\n\\n    def _fail(self, value):\\n        return self.fail % (value, self.equals)\\n\\n\\nclass StringStartsWith(Constraint):\\n    keywords = {'starts_with': str, 'ignore_case': bool}\\n    fail = '%s does not start with %s'\\n\\n    def _is_valid(self, value):\\n        # Check if the function has only been called due to ignore_case\\n        if self.starts_with is not None:\\n            if self.ignore_case is not None:\\n                if not self.ignore_case:\\n                    return value.startswith(self.starts_with)\\n                else:\\n                    length = len(self.starts_with)\\n                    if length <= len(value):\\n                        return value[:length].casefold() == self.starts_with.casefold()\\n                    else:\\n                        return False\\n            else:\\n                return value.startswith(self.starts_with)\\n        else:\\n            return True\\n\\n    def _fail(self, value):\\n        return self.fail % (value, self.starts_with)\\n\\n\\nclass StringEndsWith(Constraint):\\n    keywords = {'ends_with': str, 'ignore_case': bool}\\n    fail = '%s does not end with %s'\\n\\n    def _is_valid(self, value):\\n        # Check if the function has only been called due to ignore_case\\n        if self.ends_with is not None:\\n            if self.ignore_case is not None:\\n                if not self.ignore_case:\\n                    return value.endswith(self.ends_with)\\n                else:\\n                    length = len(self.ends_with)\\n                    if length <= len(value):\\n                        return value[-length:].casefold() == self.ends_with.casefold()\\n                    else:\\n                        return False\\n            else:\\n                return value.endswith(self.ends_with)\\n        else:\\n            return True\\n\\n    def _fail(self, value):\\n        return self.fail % (value, self.ends_with)\\n\\n\\nclass StringMatches(Constraint):\\n    keywords = {'matches': str}\\n    fail = '%s is not a regex match.'\\n\\n    _regex_flags = {'ignore_case': re.I, 'multiline': re.M, 'dotall': re.S}\\n\\n    def __init__(self, value_type, kwargs):\\n        self._flags = 0\\n        for k, v in util.get_iter(self._regex_flags):\\n            self._flags |= v if kwargs.pop(k, False) else 0\\n\\n        super(StringMatches, self).__init__(value_type, kwargs)\\n\\n    def _is_valid(self, value):\\n        if self.matches is not None:\\n            regex = re.compile(self.matches, self._flags)\\n            return regex.match(value)\\n        else:\\n            return True\\n\\n    def _fail(self, value):\\n        return self.fail % (value)\\n\\n\\nclass CharacterExclude(Constraint):\\n    keywords = {'exclude': str, 'ignore_case': bool}\\n    fail = '\\\\'%s\\\\' contains excluded character \\\\'%s\\\\''\\n\\n    def _is_valid(self, value):\\n        # Check if the function has only been called due to ignore_case\\n        if self.exclude is not None:\\n            for char in self.exclude:\\n                if self.ignore_case is not None:\\n                    if not self.ignore_case:\\n                        if char in value:\\n                            self._failed_char = char\\n                            return False\\n                    else:\\n                        if char.casefold() in value.casefold():\\n                            self._failed_char = char\\n                            return False\\n                else:\\n                    if char in value:\\n                        self._failed_char = char\\n                        return False\\n            return True\\n        else:\\n            return True\\n\\n    def _fail(self, value):\\n        return self.fail % (value, self._failed_char)\\n\\n\\nclass IpVersion(Constraint):\\n    keywords = {'version': int}\\n    fail = 'IP version of %s is not %s'\\n\\n    def _is_valid(self, value):\\n        try:\\n            ip = ipaddress.ip_interface(to_unicode(value))\\n        except ValueError:\\n            return False\\n        return self.version == ip.version\\n\\n    def _fail(self, value):\\n        return self.fail % (value, self.version)\\n\""}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, "return_value": "b''"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, "return_value": "b\"import datetime\\nfrom yamale import validators as val\\n\\n\\ndef test_length_min():\\n    v = val.String(min=2)\\n    assert v.is_valid('abcd')\\n    assert v.is_valid('ab')\\n    assert not v.is_valid('a')\\n\\n\\ndef test_length_max():\\n    v = val.String(max=3)\\n    assert v.is_valid('abc')\\n    assert v.is_valid('ab')\\n    assert not v.is_valid('abcd')\\n\\n\\ndef test_number_max():\\n    v = val.Number(min=.5)\\n    assert v.is_valid(4)\\n    assert v.is_valid(.5)\\n    assert not v.is_valid(.1)\\n\\n\\ndef test_number_min():\\n    v = val.Integer(max=10)\\n    assert v.is_valid(4)\\n    assert v.is_valid(10)\\n    assert not v.is_valid(11)\\n\\n\\ndef test_timestamp_min():\\n    v = val.Timestamp(min=datetime.datetime(2010, 1, 1))\\n    assert v.is_valid(datetime.datetime(2010, 1, 1))\\n    assert v.is_valid(datetime.datetime(2011, 2, 2))\\n    assert not v.is_valid(datetime.datetime(2009, 12, 31))\\n\\n\\ndef test_timestamp_max():\\n    v = val.Timestamp(max=datetime.datetime(2010, 1, 1))\\n    assert v.is_valid(datetime.datetime(2010, 1, 1))\\n    assert v.is_valid(datetime.datetime(2009, 2, 2))\\n    assert not v.is_valid(datetime.datetime(2010, 2, 2))\\n\\n\\ndef test_day_min():\\n    v = val.Day(min=datetime.date(2010, 1, 1))\\n    assert v.is_valid(datetime.date(2010, 1, 1))\\n    assert v.is_valid(datetime.date(2011, 2, 2))\\n    assert not v.is_valid(datetime.date(2009, 12, 31))\\n\\n\\ndef test_day_max():\\n    v = val.Day(max=datetime.date(2010, 1, 1))\\n    assert v.is_valid(datetime.date(2010, 1, 1))\\n    assert v.is_valid(datetime.date(2009, 2, 2))\\n    assert not v.is_valid(datetime.date(2010, 2, 2))\\n\\n\\ndef test_str_equals():\\n    v = val.String(equals='abcd')\\n    assert v.is_valid('abcd')\\n    assert not v.is_valid('abcde')\\n    assert not v.is_valid('c')\\n\\n\\ndef test_str_equals_ignore_case():\\n    v = val.String(equals='abcd', ignore_case=True)\\n    assert v.is_valid('abCd')\\n    assert not v.is_valid('abcde')\\n    assert not v.is_valid('C')\\n\\n\\ndef test_str_starts_with():\\n    v = val.String(starts_with='abc')\\n    assert v.is_valid('abcd')\\n    assert not v.is_valid('bcd')\\n    assert not v.is_valid('c')\\n\\n\\ndef test_str_starts_with_ignore_case():\\n    v = val.String(starts_with='abC', ignore_case=True)\\n    assert v.is_valid('abCde')\\n    assert v.is_valid('abcde')\\n    assert not v.is_valid('bcd')\\n    assert not v.is_valid('C')\\n\\n\\ndef test_str_ends_with():\\n    v = val.String(ends_with='abcd')\\n    assert v.is_valid('abcd')\\n    assert not v.is_valid('abcde')\\n    assert not v.is_valid('c')\\n\\n\\ndef test_str_ends_with_ignore_case():\\n    v = val.String(ends_with='abC', ignore_case=True)\\n    assert v.is_valid('xyzabC')\\n    assert v.is_valid('xyzabc')\\n    assert not v.is_valid('cde')\\n    assert not v.is_valid('C')\\n\\n\\ndef test_str_matches():\\n    v = val.String(matches=r'^(abc)\\\\1?de$')\\n    assert v.is_valid('abcabcde')\\n    assert not v.is_valid('abcabcabcde')\\n    assert not v.is_valid('\\\\12')\\n\\n    v = val.String(matches=r'[a-z0-9]{3,}s\\\\s$', ignore_case=True)\\n    assert v.is_valid('b33S\\\\v')\\n    assert v.is_valid('B33s\\\\t')\\n    assert not v.is_valid(' b33s ')\\n    assert not v.is_valid('b33s  ')\\n\\n    v = val.String(matches=r'A.+\\\\d$', ignore_case=False, multiline=True)\\n    assert v.is_valid('A_-3\\\\n\\\\n')\\n    assert not v.is_valid('a!!!!!5\\\\n\\\\n')\\n\\n    v = val.String(matches=r'.*^Ye.*s\\\\.', ignore_case=True, multiline=True, dotall=True)\\n    assert v.is_valid('YEeeEEEEeeeeS.')\\n    assert v.is_valid('What?\\\\nYes!\\\\nBEES.\\\\nOK.')\\n    assert not v.is_valid('YES-TA-TOES?')\\n    assert not v.is_valid('\\\\n\\\\nYaes.')\\n\\n\\ndef test_char_exclude():\\n    v = val.String(exclude='abcd')\\n    assert v.is_valid('efg')\\n    assert not v.is_valid('abc')\\n    assert not v.is_valid('c')\\n\\n\\ndef test_char_exclude_igonre_case():\\n    v = val.String(exclude='abcd', ignore_case=True)\\n    assert v.is_valid('efg')\\n    assert v.is_valid('Efg')\\n    assert not v.is_valid('abc')\\n    assert not v.is_valid('Def')\\n    assert not v.is_valid('c')\\n\\n\\ndef test_ip4():\\n    v = val.Ip(version=4)\\n    assert v.is_valid('192.168.1.1')\\n    assert v.is_valid('192.168.1.255')\\n    assert v.is_valid('192.168.3.1/24')\\n    assert not v.is_valid('2001:db8::')\\n    assert not v.is_valid('2001:db8::/64')\\n\\ndef test_ip6():\\n    v = val.Ip(version=6)\\n    assert not v.is_valid('192.168.1.1')\\n    assert not v.is_valid('192.168.1.255')\\n    assert not v.is_valid('192.168.3.1/24')\\n    assert v.is_valid('2001:db8::')\\n    assert v.is_valid('2001:db8::/64')\\n\""}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, "return_value": "b'from datetime import date, datetime\\nfrom yamale import validators as val\\n\\n\\ndef test_validator_defaults():\\n    \"\"\"\\n    Unit test the dictionary of default validators.\\n    \"\"\"\\n    assert val.DefaultValidators[val.String.tag] is val.String\\n    assert val.DefaultValidators[val.Any.__name__] is val.Any\\n\\n\\ndef test_equality():\\n    assert val.String() == val.String()\\n    assert val.String(hello=\\'wat\\') == val.String(hello=\\'wat\\')\\n    assert val.String(hello=\\'wat\\') != val.String(hello=\\'nope\\')\\n    assert val.Boolean(\\'yep\\') != val.Boolean(\\'nope\\')\\n\\n\\ndef test_integer():\\n    v = val.Integer()\\n    assert v.is_valid(1)\\n    assert not v.is_valid(\\'1\\')\\n    assert not v.is_valid(1.34)\\n\\n\\ndef test_string():\\n    v = val.String()\\n    assert v.is_valid(\\'1\\')\\n    assert not v.is_valid(1)\\n\\n\\ndef test_regex():\\n    v = val.Regex(r\\'^(abc)\\\\1?de$\\', name=\\'test regex\\')\\n    assert v.is_valid(\\'abcabcde\\')\\n    assert not v.is_valid(\\'abcabcabcde\\')\\n    assert not v.is_valid(\\'\\\\12\\')\\n    assert v.fail(\\'woopz\\') == \\'\\\\\\'woopz\\\\\\' is not a test regex.\\'\\n\\n    v = val.Regex(r\\'[a-z0-9]{3,}s\\\\s$\\', ignore_case=True)\\n    assert v.is_valid(\\'b33S\\\\v\\')\\n    assert v.is_valid(\\'B33s\\\\t\\')\\n    assert not v.is_valid(\\' b33s \\')\\n    assert not v.is_valid(\\'b33s  \\')\\n    assert v.fail(\\'fdsa\\') == \\'\\\\\\'fdsa\\\\\\' is not a regex match.\\'\\n\\n    v = val.Regex(r\\'A.+\\\\d$\\', ignore_case=False, multiline=True)\\n    assert v.is_valid(\\'A_-3\\\\n\\\\n\\')\\n    assert not v.is_valid(\\'a!!!!!5\\\\n\\\\n\\')\\n\\n    v = val.Regex(r\\'.*^Ye.*s\\\\.\\', ignore_case=True, multiline=True, dotall=True)\\n    assert v.is_valid(\\'YEeeEEEEeeeeS.\\')\\n    assert v.is_valid(\\'What?\\\\nYes!\\\\nBEES.\\\\nOK.\\')\\n    assert not v.is_valid(\\'YES-TA-TOES?\\')\\n    assert not v.is_valid(\\'\\\\n\\\\nYaes.\\')\\n\\n\\ndef test_number():\\n    v = val.Number()\\n    assert v.is_valid(1)\\n    assert v.is_valid(1.3425235)\\n    assert not v.is_valid(\\'str\\')\\n\\n\\ndef test_boolean():\\n    v = val.Boolean()\\n    assert v.is_valid(True)\\n    assert v.is_valid(False)\\n    assert not v.is_valid(\\'\\')\\n    assert not v.is_valid(0)\\n\\n\\ndef test_date():\\n    v = val.Day()\\n    assert v.is_valid(date(2015, 1, 1))\\n    assert v.is_valid(datetime(2015, 1, 1, 1))\\n    assert not v.is_valid(\\'\\')\\n    assert not v.is_valid(0)\\n\\n\\ndef test_datetime():\\n    v = val.Timestamp()\\n    assert v.is_valid(datetime(2015, 1, 1, 1))\\n    assert not v.is_valid(date(2015, 1, 1))\\n    assert not v.is_valid(\\'\\')\\n    assert not v.is_valid(0)\\n\\n\\ndef test_list():\\n    v = val.List()\\n    assert v.is_valid([])\\n    assert v.is_valid(())\\n    assert not v.is_valid(\\'\\')\\n    assert not v.is_valid(0)\\n\\n\\ndef test_null():\\n    v = val.Null()\\n    assert v.is_valid(None)\\n    assert not v.is_valid(\\'None\\')\\n    assert not v.is_valid(0)\\n    assert not v.is_valid(float(\\'nan\\'))\\n    assert not v.is_valid({})\\n\\ndef test_ip():\\n    v = val.Ip()\\n    assert v.is_valid(\\'192.168.1.1\\')\\n    assert v.is_valid(\\'192.168.1.255\\')\\n    assert v.is_valid(\\'192.168.3.1/24\\')\\n    assert v.is_valid(\\'2001:db8::\\')\\n    assert v.is_valid(\\'2001:db8::/64\\')\\n    assert not v.is_valid(\\'257.192.168.1\\')\\n    assert not v.is_valid(\\'192.168.1.256\\')\\n    assert not v.is_valid(\\'2001:db8::/129\\')\\n    assert not v.is_valid(\\'2001:dg8::/127\\')\\n    assert not v.is_valid(\\'asdf\\')\\n\\ndef test_mac():\\n    v = val.Mac()\\n    assert v.is_valid(\\'12:34:56:78:90:ab\\')\\n    assert v.is_valid(\\'1234:5678:90ab\\')\\n    assert v.is_valid(\\'12-34-56-78-90-ab\\')\\n    assert v.is_valid(\\'1234-5678-90ab\\')\\n\\n    assert v.is_valid(\\'12:34:56:78:90:AB\\')\\n    assert v.is_valid(\\'1234:5678:90AB\\')\\n    assert v.is_valid(\\'12-34-56-78-90-AB\\')\\n    assert v.is_valid(\\'1234-5678-90AB\\')\\n\\n    assert v.is_valid(\\'ab:cd:ef:12:34:56\\')\\n    assert v.is_valid(\\'abcd:ef12:3456\\')\\n    assert v.is_valid(\\'ab-cd-ef-12-34-56\\')\\n    assert v.is_valid(\\'abcd-ef12-3456\\')\\n\\n    assert v.is_valid(\\'AB:CD:EF:12:34:56\\')\\n    assert v.is_valid(\\'ABCD:EF12:3456\\')\\n    assert v.is_valid(\\'AB-CD-EF-12-34-56\\')\\n    assert v.is_valid(\\'ABCD-EF12-3456\\')\\n\\n    assert not v.is_valid(\\'qwertyuiop\\')\\n    assert not v.is_valid(\\'qw-er-ty-12-34-56\\')\\n    assert not v.is_valid(\\'ab:cd:ef:12:34:56:78\\')\\n    assert not v.is_valid(\\'abcdefghijkl\\')\\n    assert not v.is_valid(\\'1234567890ax\\')\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, "return_value": "b'import re\\nfrom datetime import date, datetime\\nimport ipaddress\\nfrom .base import Validator\\nfrom . import constraints as con\\nfrom .. import util\\n\\n# ABCs for containers were moved to their own module\\ntry:\\n    from collections.abc import Sequence, Mapping\\nexcept ImportError:\\n    from collections import Sequence, Mapping\\n\\n\\nclass String(Validator):\\n    \"\"\"String validator\"\"\"\\n    tag = \\'str\\'\\n    constraints = [con.LengthMin,\\n                   con.LengthMax,\\n                   con.CharacterExclude,\\n                   con.StringEquals,\\n                   con.StringStartsWith,\\n                   con.StringEndsWith,\\n                   con.StringMatches]\\n\\n    def _is_valid(self, value):\\n        return util.isstr(value)\\n\\n\\nclass Number(Validator):\\n    \"\"\"Number/float validator\"\"\"\\n    value_type = float\\n    tag = \\'num\\'\\n    constraints = [con.Min, con.Max]\\n\\n    def _is_valid(self, value):\\n        return isinstance(value, (int, float)) and not isinstance(value, bool)\\n\\n\\nclass Integer(Validator):\\n    \"\"\"Integer validator\"\"\"\\n    value_type = int\\n    tag = \\'int\\'\\n    constraints = [con.Min, con.Max]\\n\\n    def _is_valid(self, value):\\n        return isinstance(value, int) and not isinstance(value, bool)\\n\\n\\nclass Boolean(Validator):\\n    \"\"\"Boolean validator\"\"\"\\n    tag = \\'bool\\'\\n\\n    def _is_valid(self, value):\\n        return isinstance(value, bool)\\n\\n\\nclass Enum(Validator):\\n    \"\"\"Enum validator\"\"\"\\n    tag = \\'enum\\'\\n\\n    def __init__(self, *args, **kwargs):\\n        super(Enum, self).__init__(*args, **kwargs)\\n        self.enums = args\\n\\n    def _is_valid(self, value):\\n        return value in self.enums\\n\\n    def fail(self, value):\\n        return \\'\\\\\\'%s\\\\\\' not in %s\\' % (value, self.enums)\\n\\n\\nclass Day(Validator):\\n    \"\"\"Day validator. Format: YYYY-MM-DD\"\"\"\\n    value_type = date\\n    tag = \\'day\\'\\n    constraints = [con.Min, con.Max]\\n\\n    def _is_valid(self, value):\\n        return isinstance(value, date)\\n\\n\\nclass Timestamp(Validator):\\n    \"\"\"Timestamp validator. Format: YYYY-MM-DD HH:MM:SS\"\"\"\\n    value_type = datetime\\n    tag = \\'timestamp\\'\\n    constraints = [con.Min, con.Max]\\n\\n    def _is_valid(self, value):\\n        return isinstance(value, datetime)\\n\\n\\nclass Map(Validator):\\n    \"\"\"Map and dict validator\"\"\"\\n    tag = \\'map\\'\\n    constraints = [con.LengthMin, con.LengthMax, con.Key]\\n\\n    def __init__(self, *args, **kwargs):\\n        super(Map, self).__init__(*args, **kwargs)\\n        self.validators = [val for val in args if isinstance(val, Validator)]\\n\\n    def _is_valid(self, value):\\n        return isinstance(value, Mapping)\\n\\n\\nclass List(Validator):\\n    \"\"\"List validator\"\"\"\\n    tag = \\'list\\'\\n    constraints = [con.LengthMin, con.LengthMax]\\n\\n    def __init__(self, *args, **kwargs):\\n        super(List, self).__init__(*args, **kwargs)\\n        self.validators = [val for val in args if isinstance(val, Validator)]\\n\\n    def _is_valid(self, value):\\n        return isinstance(value, Sequence) and not util.isstr(value)\\n\\n\\nclass Include(Validator):\\n    \"\"\"Include validator\"\"\"\\n    tag = \\'include\\'\\n\\n    def __init__(self, *args, **kwargs):\\n        self.include_name = args[0]\\n        self.strict = kwargs.pop(\\'strict\\', None)\\n        super(Include, self).__init__(*args, **kwargs)\\n\\n    def _is_valid(self, value):\\n        return True\\n\\n    def get_name(self):\\n        return self.include_name\\n\\n\\nclass Any(Validator):\\n    \"\"\"Any of several types validator\"\"\"\\n    tag = \\'any\\'\\n\\n    def __init__(self, *args, **kwargs):\\n        self.validators = [val for val in args if isinstance(val, Validator)]\\n        super(Any, self).__init__(*args, **kwargs)\\n\\n    def _is_valid(self, value):\\n        return True\\n\\nclass Subset(Validator):\\n    \"\"\"Subset of several types validator\"\"\"\\n    tag = \\'subset\\'\\n\\n    def __init__(self, *args, **kwargs):\\n        super(Subset, self).__init__(*args, **kwargs)\\n        self._allow_empty_set = bool(kwargs.pop(\\'allow_empty\\', False))\\n        self.validators = [val for val in args if isinstance(val, Validator)]\\n        if not self.validators:\\n            raise ValueError(\\'\\\\\\'%s\\\\\\' requires at least one validator!\\' % self.tag)\\n\\n    def _is_valid(self, value):\\n        return self.can_be_none or value is not None\\n\\n    def fail(self, value):\\n        # Called in case `_is_valid` returns False\\n        return \\'\\\\\\'%s\\\\\\' may not be an empty set.\\' % self.get_name()\\n\\n    @property\\n    def is_optional(self):\\n        return self._allow_empty_set\\n\\n    @property\\n    def can_be_none(self):\\n        return self._allow_empty_set\\n\\n\\nclass Null(Validator):\\n    \"\"\"Validates null\"\"\"\\n    value_type = None\\n    tag = \\'null\\'\\n\\n    def _is_valid(self, value):\\n        return value is None\\n\\n\\nclass Regex(Validator):\\n    \"\"\"Regular expression validator\"\"\"\\n    tag = \\'regex\\'\\n    _regex_flags = {\\'ignore_case\\': re.I, \\'multiline\\': re.M, \\'dotall\\': re.S}\\n\\n    def __init__(self, *args, **kwargs):\\n        self.regex_name = kwargs.pop(\\'name\\', None)\\n\\n        flags = 0\\n        for k, v in util.get_iter(self._regex_flags):\\n            flags |= v if kwargs.pop(k, False) else 0\\n\\n        self.regexes = [re.compile(arg, flags)\\n                        for arg in args if util.isstr(arg)]\\n        super(Regex, self).__init__(*args, **kwargs)\\n\\n    def _is_valid(self, value):\\n        return util.isstr(value) and any(r.match(value) for r in self.regexes)\\n\\n    def get_name(self):\\n        return self.regex_name or self.tag + \" match\"\\n\\n\\nclass Ip(Validator):\\n    \"\"\"IP address validator\"\"\"\\n    tag = \\'ip\\'\\n    constraints = [con.IpVersion]\\n\\n    def _is_valid(self, value):\\n        return self.ip_address(value)\\n\\n    def ip_address(self, value):\\n        try:\\n            ipaddress.ip_interface(util.to_unicode(value))\\n        except ValueError:\\n            return False\\n        return True\\n\\n\\nclass Mac(Regex):\\n    \"\"\"MAC address validator\"\"\"\\n    tag = \\'mac\\'\\n\\n    def __init__(self, *args, **kwargs):\\n        super(Mac, self).__init__(*args, **kwargs)\\n        self.regexes = [\\n            re.compile(\\n                \"[0-9a-fA-F]{2}([-:]?)[0-9a-fA-F]{2}(\\\\\\\\1[0-9a-fA-F]{2}){4}$\"),\\n            re.compile(\\n                \"[0-9a-fA-F]{4}([-:]?)[0-9a-fA-F]{4}(\\\\\\\\1[0-9a-fA-F]{4})$\"),\\n        ]\\n\\n\\nDefaultValidators = {}\\n\\nfor v in util.get_subclasses(Validator):\\n    # Allow validator nodes to contain either tags or actual name\\n    DefaultValidators[v.tag] = v\\n    DefaultValidators[v.__name__] = v\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, "return_value": "b\"#!/usr/bin/env python\\nfrom .schema import Schema\\nfrom .yamale_error import YamaleError\\n\\n\\ndef make_schema(path=None, parser='PyYAML', validators=None, content=None):\\n    # validators = None means use default.\\n    # Import readers here so we can get version information in setup.py.\\n    from . import readers\\n    raw_schemas = readers.parse_yaml(path, parser, content=content)\\n    if not raw_schemas:\\n        raise ValueError('{} is an empty file!'.format(path))\\n    # First document is the base schema\\n    try:\\n        s = Schema(raw_schemas[0], path, validators=validators)\\n        # Additional documents contain Includes.\\n        for raw_schema in raw_schemas[1:]:\\n            s.add_include(raw_schema)\\n    except (TypeError, SyntaxError) as e:\\n        error = 'Schema error in file %s\\\\n' % path\\n        error += str(e)\\n        raise SyntaxError(error)\\n\\n    return s\\n\\n\\ndef make_data(path=None, parser='PyYAML', content=None):\\n    from . import readers\\n    raw_data = readers.parse_yaml(path, parser, content=content)\\n    if len(raw_data) == 0:\\n        return [({}, path)]\\n    return [(d, path) for d in raw_data]\\n\\n\\ndef validate(schema, data, strict=True, _raise_error=True):\\n    results = []\\n    is_valid = True\\n    for d, path in data:\\n        result = schema.validate(d, path, strict)\\n        results.append(result)\\n        is_valid = is_valid and result.isValid()\\n    if _raise_error and not is_valid:\\n        raise YamaleError(results)\\n    return results\\n\""}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, "return_value": "b\"class YamaleError(ValueError):\\n    def __init__(self, results):\\n        super(YamaleError, self).__init__('\\\\n'.join([str(x) for x in list(filter(lambda x: not x.isValid(), results))]))\\n        self.message = self.args[0]\\n        self.results = results\\n\""}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, "return_value": "b'import glob\\nimport os\\nimport itertools\\n\\nfrom unittest import TestCase\\n\\nimport yamale\\n\\n\\nclass YamaleTestCase(TestCase):\\n    \"\"\" TestCase for easily validating YAML in your own tests.\\n    `schema`: String of path to the schema file to use. One schema file per test case.\\n    `yaml`: String or list of yaml files to validate. Accepts globs.\\n    `base_dir`: String path to prepend to all other paths. This is optional.\\n    \"\"\"\\n\\n    schema = None\\n    yaml = None\\n    base_dir = None\\n\\n    def validate(self, validators=None):\\n        schema = self.schema\\n        yaml = self.yaml\\n        base_dir = self.base_dir\\n\\n        if schema is None:\\n            return\\n\\n        if type(yaml) != list:\\n            yaml = [yaml]\\n\\n        if base_dir is not None:\\n            schema = os.path.join(base_dir, schema)\\n            yaml = {os.path.join(base_dir, y) for y in yaml}\\n\\n        # Run yaml through glob and flatten list\\n        yaml = set(itertools.chain(*map(glob.glob, yaml)))\\n\\n        # Remove schema from set of data files\\n        yaml = yaml - {schema}\\n\\n        yamale_schema = yamale.make_schema(schema, validators=validators)\\n        yamale_data = itertools.chain(*map(yamale.make_data, yaml))\\n\\n        for result in yamale.validate(yamale_schema, yamale_data):\\n            if not result.isValid():\\n                raise ValueError(result)\\n        return True\\n\\n'"}]}, "get_python_source": {"line": 37, "args": [{"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/__init__.py'"}, "return_value": "'from .yamale import make_schema, make_data, validate\\nfrom .yamale_testcase import YamaleTestCase\\nfrom .yamale_error import YamaleError\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, "return_value": "'#!/usr/bin/env python\\n# -*- coding: utf-8 -*-\\n\\n\"\"\"\\n    Validate yaml files and check them against their schemas. Designed to be used outside of Vagrant.\\n\\n    Just install Yamale:\\n        pip install yamale\\n\"\"\"\\n\\nimport argparse\\nimport glob\\nimport os\\nfrom multiprocessing import Pool\\nfrom .yamale_error import YamaleError\\nfrom .schema.validationresults import Result\\n\\nimport yamale\\n\\nschemas = {}\\n\\n\\ndef _validate(schema_path, data_path, parser, strict, _raise_error):\\n    schema = schemas.get(schema_path)\\n    try:\\n        if not schema:\\n            schema = yamale.make_schema(schema_path, parser)\\n            schemas[schema_path] = schema\\n    except (SyntaxError, ValueError) as e:\\n        results = [Result([str(e)])]\\n        if not _raise_error:\\n            return results\\n        raise YamaleError(results)\\n    data = yamale.make_data(data_path, parser)\\n    return yamale.validate(schema, data, strict, _raise_error)\\n\\n\\ndef _find_data_path_schema(data_path, schema_name):\\n    \"\"\" Starts in the data file folder and recursively looks\\n    in parents for `schema_name` \"\"\"\\n    if not data_path or data_path == os.path.abspath(os.sep) or data_path == \\'.\\':\\n        return None\\n    directory = os.path.dirname(data_path)\\n    path = glob.glob(os.path.join(directory, schema_name))\\n    if not path:\\n        return _find_schema(directory, schema_name)\\n    return path[0]\\n\\n\\ndef _find_schema(data_path, schema_name):\\n    \"\"\" Checks if `schema_name` is a valid file, if not\\n    searches in `data_path` for it. \"\"\"\\n\\n    directory = os.path.dirname(data_path)\\n    path = glob.glob(os.path.join(directory, schema_name))\\n    for p in path:\\n        if os.path.isfile(p):\\n            return p\\n\\n    return _find_data_path_schema(data_path, schema_name)\\n\\n\\ndef _validate_single(yaml_path, schema_name, parser, strict):\\n    print(\\'Validating %s...\\' % yaml_path)\\n    s = _find_schema(yaml_path, schema_name)\\n    if not s:\\n        raise ValueError(\"Invalid schema name for \\'{}\\' or schema not found.\".format(schema_name))\\n    _validate(s, yaml_path, parser, strict, True)\\n\\n\\ndef _validate_dir(root, schema_name, cpus, parser, strict):\\n    pool = Pool(processes=cpus)\\n    res = []\\n    error_messages = []\\n    print(\\'Finding yaml files...\\')\\n    for root, dirs, files in os.walk(root):\\n        for f in files:\\n            if (f.endswith(\\'.yaml\\') or f.endswith(\\'.yml\\')) and f != schema_name:\\n                d = os.path.join(root, f)\\n                s = _find_schema(d, schema_name)\\n                if s:\\n                    res.append(pool.apply_async(_validate,\\n                                                (s, d, parser, strict, False)))\\n                else:\\n                    print(\\'No schema found for: %s\\' % d)\\n\\n    print(\\'Found %s yaml files.\\' % len(res))\\n    print(\\'Validating...\\')\\n    for r in res:\\n        sub_results = r.get(timeout=300)\\n        error_messages.extend([str(sub_result)\\n                               for sub_result in sub_results\\n                               if not sub_result.isValid()])\\n    pool.close()\\n    pool.join()\\n    if error_messages:\\n        raise ValueError(\\'\\\\n----\\\\n\\'.join(set(error_messages)))\\n\\n\\ndef _router(root, schema_name, cpus, parser, strict=True):\\n    root = os.path.abspath(root)\\n    if os.path.isfile(root):\\n        _validate_single(root, schema_name, parser, strict)\\n    else:\\n        _validate_dir(root, schema_name, cpus, parser, strict)\\n\\n\\ndef main():\\n    parser = argparse.ArgumentParser(description=\\'Validate yaml files.\\')\\n    parser.add_argument(\\'path\\', metavar=\\'PATH\\', default=\\'./\\', nargs=\\'?\\',\\n                        help=\\'folder to validate. Default is current directory.\\')\\n    parser.add_argument(\\'-s\\', \\'--schema\\', default=\\'schema.yaml\\',\\n                        help=\\'filename of schema. Default is schema.yaml.\\')\\n    parser.add_argument(\\'-n\\', \\'--cpu-num\\', default=4, type=int,\\n                        help=\\'number of CPUs to use. Default is 4.\\')\\n    parser.add_argument(\\'-p\\', \\'--parser\\', default=\\'pyyaml\\',\\n                        help=\\'YAML library to load files. Choices are \"ruamel\" or \"pyyaml\" (default).\\')\\n    parser.add_argument(\\'--no-strict\\', action=\\'store_true\\',\\n                        help=\\'Disable strict mode, unexpected elements in the data will be accepted.\\')\\n    args = parser.parse_args()\\n    try:\\n        _router(args.path, args.schema, args.cpu_num, args.parser, not args.no_strict)\\n        print(\\'Validation success! \ud83d\udc4d\\')\\n    except (SyntaxError, NameError, TypeError, ValueError) as e:\\n        print(\\'Validation failed!\\\\n%s\\' % str(e))\\n        exit(1)\\n\\n\\nif __name__ == \\'__main__\\':\\n    main()\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, "return_value": "'from . import yaml_reader\\n\\nparse_yaml = yaml_reader.parse_yaml\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, "return_value": "''"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, "return_value": "\"import pytest\\nfrom pytest import raises\\nfrom .. import parse_yaml\\n\\nparsers = ['pyyaml', 'PyYAML', 'ruamel']\\n\\n\\n@pytest.mark.parametrize('parser', parsers)\\ndef test_reader_error(parser):\\n    with raises(IOError):\\n        parse_yaml('wat', parser)\\n\""}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, "return_value": "'import io\\nimport pytest\\nfrom .. import yaml_reader\\nfrom yamale.tests import get_fixture\\n\\nparsers = [\\'pyyaml\\', \\'PyYAML\\', \\'ruamel\\']\\nTYPES = get_fixture(\\'types.yaml\\')\\nNESTED = get_fixture(\\'nested.yaml\\')\\nKEYWORDS = get_fixture(\\'keywords.yaml\\')\\n\\n\\n@pytest.mark.parametrize(\\'parser\\', parsers)\\n@pytest.mark.parametrize(\\'use_string\\', [True, False])\\ndef test_parse(parser, use_string):\\n    if use_string:\\n        with io.open(TYPES, encoding=\\'utf-8\\') as f:\\n            content = f.read()\\n        a = yaml_reader.parse_yaml(parser=parser, content=content)[0]\\n    else:\\n        a = yaml_reader.parse_yaml(TYPES, parser)[0]\\n    assert a[\\'string\\'] == \\'str()\\'\\n\\n\\ndef test_parse_validates_arguments():\\n    with pytest.raises(TypeError):\\n        yaml_reader.parse_yaml(path=TYPES, content=\"name: Bob\")\\n    with pytest.raises(TypeError):\\n        yaml_reader.parse_yaml(path=None, content=None)\\n\\n\\n@pytest.mark.parametrize(\\'parser\\', parsers)\\ndef test_types(parser):\\n    t = yaml_reader.parse_yaml(TYPES, parser)[0]\\n    assert t[\\'string\\'] == \\'str()\\'\\n    assert t[\\'number\\'] == \\'num()\\'\\n    assert t[\\'boolean\\'] == \\'bool()\\'\\n    assert t[\\'integer\\'] == \\'int()\\'\\n\\n\\n@pytest.mark.parametrize(\\'parser\\', parsers)\\ndef test_keywords(parser):\\n    t = yaml_reader.parse_yaml(KEYWORDS, parser)[0]\\n    assert t[\\'optional_min\\'] == \\'int(min=1, required=False)\\'\\n\\n\\n@pytest.mark.parametrize(\\'parser\\', parsers)\\ndef test_nested(parser):\\n    t = yaml_reader.parse_yaml(NESTED, parser)[0]\\n    assert t[\\'list\\'][-1][\\'string\\'] == \\'str()\\'\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, "return_value": "'from __future__ import absolute_import\\nfrom io import StringIO\\n\\n\\ndef _pyyaml(f):\\n    import yaml\\n    try:\\n        Loader = yaml.CSafeLoader\\n    except AttributeError:  # System does not have libyaml\\n        Loader = yaml.SafeLoader\\n    return list(yaml.load_all(f, Loader=Loader))\\n\\n\\ndef _ruamel(f):\\n    from ruamel.yaml import YAML\\n    yaml = YAML(typ=\\'safe\\')\\n    return list(yaml.load_all(f))\\n\\n\\n_parsers = {\\n    \\'pyyaml\\': _pyyaml,\\n    \\'ruamel\\': _ruamel\\n}\\n\\n\\ndef parse_yaml(path=None, parser=\\'pyyaml\\', content=None):\\n    try:\\n        parse = _parsers[parser.lower()]\\n    except KeyError:\\n        raise NameError(\\'Parser \"\\' + parser + \\'\" is not supported\\\\nAvailable parsers are listed below:\\\\nPyYAML\\\\nruamel\\')\\n    if (path is None and content is None) or (path is not None and content is not None):\\n        raise TypeError(\"Pass either path= or content=, not both\")\\n    if path is not None:\\n        with open(path) as f:\\n            return parse(f)\\n    else:\\n        return parse(StringIO(content))\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, "return_value": "'from .schema import Schema\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, "return_value": "\"class DataPath(object):\\n\\n    def __init__(self, *path):\\n        self._path = path\\n\\n    def __add__(self, other):\\n        dp = DataPath()\\n        dp._path = self._path + other._path\\n        return dp\\n\\n    def __str__(self):\\n        return '.'.join(map(str, (self._path)))\\n\\n    def __repr__(self):\\n        return 'DataPath({})'.format(repr(self._path))\\n\""}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, "return_value": "'from .datapath import DataPath\\nfrom .validationresults import ValidationResult\\nfrom .. import syntax, util\\nfrom .. import validators as val\\n\\n\\nclass Schema(object):\\n    \"\"\"\\n    Makes a Schema object from a schema dict.\\n    Still acts like a dict.\\n    \"\"\"\\n\\n    def __init__(self, schema_dict, name=\\'\\', validators=None, includes=None):\\n        self.validators = validators or val.DefaultValidators\\n        self.dict = schema_dict\\n        self.name = name\\n        self._schema = self._process_schema(DataPath(),\\n                                            schema_dict,\\n                                            self.validators)\\n        # if this schema is included it shares the includes with the top level\\n        # schema\\n        self.includes = {} if includes is None else includes\\n\\n    def add_include(self, type_dict):\\n        for include_name, custom_type in type_dict.items():\\n            t = Schema(custom_type, name=include_name,\\n                       validators=self.validators, includes=self.includes)\\n            self.includes[include_name] = t\\n\\n    def _process_schema(self, path, schema_data, validators):\\n        \"\"\"\\n        Go through a schema and construct validators.\\n        \"\"\"\\n        if util.is_map(schema_data) or util.is_list(schema_data):\\n            for key, data in util.get_iter(schema_data):\\n                schema_data[key] = self._process_schema(path + DataPath(key),\\n                                                        data,\\n                                                        validators)\\n        else:\\n            schema_data = self._parse_schema_item(path,\\n                                                  schema_data,\\n                                                  validators)\\n        return schema_data\\n\\n    def _parse_schema_item(self, path, expression, validators):\\n        try:\\n            return syntax.parse(expression, validators)\\n        except SyntaxError as e:\\n            # Tack on some more context and rethrow.\\n            error = str(e) + \\' at node \\\\\\'%s\\\\\\'\\' % str(path)\\n            raise SyntaxError(error)\\n\\n    def validate(self, data, data_name, strict):\\n        path = DataPath()\\n        errors = self._validate(self._schema, data, path, strict)\\n        return ValidationResult(data_name, self.name, errors)\\n\\n    def _validate_item(self, validator, data, path, strict, key):\\n        \"\"\"\\n        Fetch item from data at the position key and validate with validator.\\n\\n        Returns an array of errors.\\n        \"\"\"\\n        errors = []\\n        path = path + DataPath(key)\\n        try:  # Pull value out of data. Data can be a map or a list/sequence\\n            data_item = data[key]\\n        except (KeyError, IndexError):  # Oops, that field didn\\'t exist.\\n            # Optional? Who cares.\\n            if isinstance(validator, val.Validator) and validator.is_optional:\\n                return errors\\n            # SHUT DOWN EVERYTHING\\n            errors.append(\\'%s: Required field missing\\' % path)\\n            return errors\\n\\n        return self._validate(validator, data_item, path, strict)\\n\\n    def _validate(self, validator, data, path, strict):\\n        \"\"\"\\n        Validate data with validator.\\n        Special handling of non-primitive validators.\\n\\n        Returns an array of errors.\\n        \"\"\"\\n\\n        if util.is_list(validator) or util.is_map(validator):\\n            return self._validate_static_map_list(validator,\\n                                                  data,\\n                                                  path,\\n                                                  strict)\\n\\n        errors = []\\n        # Optional field with optional value? Who cares.\\n        if (data is None and\\n                validator.is_optional and\\n                validator.can_be_none):\\n            return errors\\n\\n        errors += self._validate_primitive(validator, data, path)\\n\\n        if errors:\\n            return errors\\n\\n        if isinstance(validator, val.Include):\\n            errors += self._validate_include(validator, data, path, strict)\\n\\n        elif isinstance(validator, (val.Map, val.List)):\\n            errors += self._validate_map_list(validator, data, path, strict)\\n\\n        elif isinstance(validator, val.Any):\\n            errors += self._validate_any(validator, data, path, strict)\\n\\n        elif isinstance(validator, val.Subset):\\n            errors += self._validate_subset(validator, data, path, strict)\\n\\n        return errors\\n\\n    def _validate_static_map_list(self, validator, data, path, strict):\\n        if util.is_map(validator) and not util.is_map(data):\\n            return [\"%s : \\'%s\\' is not a map\" % (path, data)]\\n\\n        if util.is_list(validator) and not util.is_list(data):\\n            return [\"%s : \\'%s\\' is not a list\" % (path, data)]\\n\\n        errors = []\\n\\n        if strict:\\n            data_keys = set(util.get_keys(data))\\n            validator_keys = set(util.get_keys(validator))\\n            for key in data_keys - validator_keys:\\n                error_path = path + DataPath(key)\\n                errors += [\\'%s: Unexpected element\\' % error_path]\\n\\n        for key, sub_validator in util.get_iter(validator):\\n            errors += self._validate_item(sub_validator,\\n                                          data,\\n                                          path,\\n                                          strict,\\n                                          key)\\n        return errors\\n\\n    def _validate_map_list(self, validator, data, path, strict):\\n        errors = []\\n\\n        if not validator.validators:\\n            return errors  # No validators, user just wanted a map.\\n\\n        for key in util.get_keys(data):\\n            sub_errors = []\\n            for v in validator.validators:\\n                err = self._validate_item(v, data, path, strict, key)\\n                if err:\\n                    sub_errors.append(err)\\n\\n            if len(sub_errors) == len(validator.validators):\\n                # All validators failed, add to errors\\n                for err in sub_errors:\\n                    errors += err\\n\\n        return errors\\n\\n    def _validate_include(self, validator, data, path, strict):\\n        include_schema = self.includes.get(validator.include_name)\\n        if not include_schema:\\n            return [(\\'Include \\\\\\'%s\\\\\\' has not been defined.\\'\\n                     % validator.include_name)]\\n        strict = strict if validator.strict is None else validator.strict\\n        return include_schema._validate(include_schema._schema,\\n                                        data,\\n                                        path,\\n                                        strict)\\n\\n    def _validate_any(self, validator, data, path, strict):\\n        if not validator.validators:\\n            return []\\n\\n        errors = []\\n\\n        sub_errors = []\\n        for v in validator.validators:\\n            err = self._validate(v, data, path, strict)\\n            if err:\\n                sub_errors.append(err)\\n\\n        if len(sub_errors) == len(validator.validators):\\n            # All validators failed, add to errors\\n            for err in sub_errors:\\n                errors += err\\n\\n        return errors\\n\\n    def _validate_subset(self, validator, data, path, strict):\\n        def _internal_validate(internal_data):\\n            sub_errors = []\\n            for val in validator.validators:\\n                err = self._validate(val, internal_data, path, strict)\\n                if not err:\\n                    break\\n                sub_errors += err\\n            else:\\n                return sub_errors\\n            return []\\n\\n        if not validator.validators:\\n            return []\\n\\n        errors = []\\n        if util.is_map(data):\\n            for k, v in data.items():\\n                errors += _internal_validate({k: v})\\n        elif util.is_list(data):\\n            for k in data:\\n                errors += _internal_validate(k)\\n        else:\\n            errors += _internal_validate(data)\\n        return errors\\n\\n    def _validate_primitive(self, validator, data, path):\\n        errors = validator.validate(data)\\n\\n        for i, error in enumerate(errors):\\n            errors[i] = (\\'%s: \\' % path) + error\\n\\n        return errors\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, "return_value": "'class Result(object):\\n    def __init__(self, errors):\\n        self.errors = errors\\n\\n    def __str__(self):\\n        return \\'\\\\n\\'.join(self.errors)\\n\\n    def isValid(self):\\n        return len(self.errors) == 0\\n\\n\\nclass ValidationResult(Result):\\n    def __init__(self, data, schema, errors):\\n        super(ValidationResult, self).__init__(errors)\\n        self.data = data\\n        self.schema = schema\\n\\n    def __str__(self):\\n        if self.isValid():\\n            error_str = \"\\'%s\\' is Valid\" % self.data\\n        else:\\n            head_line_bits = [\"Error validating data\"]\\n            if self.data:\\n                head_line_bits.append(\"\\'{}\\'\".format(self.data))\\n            if self.schema:\\n                head_line_bits.append(\"with schema \\'{}\\'\".format(self.schema))\\n            head_line = \\' \\'.join(head_line_bits)\\n            head_line += \\'\\\\n\\\\t\\'\\n            error_str = head_line + \\'\\\\n\\\\t\\'.join(self.errors)\\n        return error_str\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, "return_value": "'from .parser import parse\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, "return_value": "\"import ast\\n\\nfrom .. import validators as val\\n\\nsafe_globals = ('True', 'False', 'None')\\nsafe_builtins = dict((f, __builtins__[f]) for f in safe_globals)\\n\\n\\ndef _validate_expr(call_node, validators):\\n    # Validate that the expression uses a known, registered validator.\\n    try:\\n        func_name = call_node.func.id\\n    except AttributeError:\\n        raise SyntaxError('Schema expressions must be enclosed by a validator.')\\n    if func_name not in validators:\\n        raise SyntaxError('Not a registered validator: \\\\'%s\\\\'. ' % func_name)\\n    # Validate that all args are constant literals, validator names,  or other call nodes\\n    arg_values = call_node.args + [kw.value for kw in call_node.keywords]\\n    for arg in arg_values:\\n        # In Python 3.8+, the following have been folded into ast.Constant.\\n        constant_types = [\\n            ast.Constant, ast.Num, ast.Str, ast.Bytes, ast.NameConstant]\\n        base_arg = arg.operand if isinstance(arg, ast.UnaryOp) else arg\\n        if any(isinstance(base_arg, type) for type in constant_types):\\n            continue\\n        elif isinstance(base_arg, ast.Name) and base_arg.id in validators:\\n            continue\\n        elif isinstance(base_arg, ast.Call):\\n            _validate_expr(base_arg, validators)\\n        else:\\n            raise SyntaxError(\\n                'Argument values must either be constant literals, or else '\\n                'reference other validators.')\\n\\n\\ndef parse(validator_string, validators=None):\\n    validators = validators or val.DefaultValidators\\n    try:\\n        tree = ast.parse(validator_string, mode='eval')\\n        _validate_expr(tree.body, validators)\\n        # evaluate with access to a limited global scope only\\n        return eval(compile(tree, '<ast>', 'eval'),\\n                    {'__builtins__': safe_builtins},\\n                    validators)\\n    except (SyntaxError, NameError, TypeError) as e:\\n        raise SyntaxError(\\n            'Invalid schema expression: \\\\'%s\\\\'. ' % validator_string +\\n            str(e)\\n        )\\n\""}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, "return_value": "''"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, "return_value": "\"from pytest import raises\\n\\nfrom .. import parser as par\\nfrom yamale.validators.validators import (\\n    Validator, String, Regex, Number, Integer, Boolean, List, Day, Timestamp,\\n    Ip, Mac)\\n\\n\\ndef test_eval():\\n    assert eval('String()') == String()\\n\\n\\ndef test_types():\\n    assert par.parse('String()') == String()\\n    assert par.parse('str()') == String()\\n    assert par.parse('regex()') == Regex()\\n    assert par.parse('num()') == Number()\\n    assert par.parse('int()') == Integer()\\n    assert par.parse('day()') == Day()\\n    assert par.parse('timestamp()') == Timestamp()\\n    assert par.parse('bool()') == Boolean()\\n    assert par.parse('list(str())') == List(String())\\n    assert par.parse('ip()') == Ip()\\n    assert par.parse('mac()') == Mac()\\n\\n\\ndef test_custom_type():\\n\\n    class my_validator(Validator):\\n        pass\\n\\n    assert par.parse('custom()', {'custom': my_validator}) == my_validator()\\n\\n\\ndef test_required():\\n    assert par.parse('str(required=True)').is_required\\n    assert par.parse('str(required=False)').is_optional\\n\\n\\ndef test_syntax_error():\\n    with raises(SyntaxError):\\n        par.parse('eval()')\\n\""}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, "return_value": "\"import os\\n\\n\\ndef get_fixture(relative):\\n    script_dir = os.path.dirname(__file__)\\n    return os.path.join(script_dir, 'fixtures/', relative)\\n\""}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, "return_value": "'import os\\n\\nimport pytest\\n\\nfrom .. import command_line\\nfrom .. import yamale_error\\n\\ndir_path = os.path.dirname(os.path.realpath(__file__))\\n\\nparsers = [\\'pyyaml\\', \\'PyYAML\\', \\'ruamel\\']\\n\\n\\n@pytest.mark.parametrize(\\'parser\\', parsers)\\ndef test_bad_yaml(parser):\\n    with pytest.raises(ValueError) as e:\\n        command_line._router(\\n            \\'yamale/tests/command_line_fixtures/yamls/bad.yaml\\',\\n            \\'schema.yaml\\', 1, parser)\\n    assert \"map.bad: \\'12.5\\' is not a str.\" in e.value.message\\n\\n\\n@pytest.mark.parametrize(\\'parser\\', parsers)\\ndef test_required_keys_yaml(parser):\\n    with pytest.raises(ValueError) as e:\\n        command_line._router(\\n            \\'yamale/tests/command_line_fixtures/yamls/required_keys_bad.yaml\\',\\n            \\'required_keys_schema.yaml\\', 1, parser)\\n    assert \"map.key: Required field missing\" in e.value.message\\n\\n\\n@pytest.mark.parametrize(\\'parser\\', parsers)\\ndef test_good_yaml(parser):\\n    command_line._router(\\n        \\'yamale/tests/command_line_fixtures/yamls/good.yaml\\',\\n        \\'schema.yaml\\', 1, parser)\\n    \\n\\n@pytest.mark.parametrize(\\'parser\\', parsers)\\ndef test_good_relative_yaml(parser):\\n    command_line._router(\\n        \\'yamale/tests/command_line_fixtures/yamls/good.yaml\\',\\n        \\'../schema_dir/external.yaml\\', 1, parser)\\n    \\n\\n@pytest.mark.parametrize(\\'parser\\', parsers)\\ndef test_external_glob_schema(parser):\\n    command_line._router(\\n        \\'yamale/tests/command_line_fixtures/yamls/good.yaml\\',\\n        os.path.join(dir_path, \\'command_line_fixtures/schema_dir/ex*.yaml\\'), 1, parser)\\n    \\n\\ndef test_empty_schema_file():\\n    with pytest.raises(ValueError, match=\\'is an empty file!\\'):\\n        command_line._router(\\n            \\'yamale/tests/command_line_fixtures/empty_schema/data.yaml\\',\\n            \\'empty_schema.yaml\\' , 1, \\'PyYAML\\')\\n\\n\\ndef test_external_schema():\\n    command_line._router(\\n        \\'yamale/tests/command_line_fixtures/yamls/good.yaml\\',\\n        os.path.join(dir_path, \\'command_line_fixtures/schema_dir/external.yaml\\'), 1, \\'PyYAML\\')\\n\\n\\ndef test_bad_dir():\\n    with pytest.raises(ValueError):\\n        command_line._router(\\n            \\'yamale/tests/command_line_fixtures/yamls\\',\\n            \\'schema.yaml\\', 4, \\'PyYAML\\')\\n\\n\\ndef test_bad_strict():\\n    with pytest.raises(ValueError) as e:\\n        command_line._router(\\n            \\'yamale/tests/command_line_fixtures/yamls/required_keys_extra_element.yaml\\',\\n            \\'required_keys_schema.yaml\\',\\n            4, \\'PyYAML\\', strict=True)\\n    assert \"map.key2: Unexpected element\" in e.value.message\\n\\n\\ndef test_bad_issue_54():\\n    with pytest.raises(yamale_error.YamaleError) as e:\\n        command_line._router(\\n            \\'yamale/tests/fixtures/nested_issue_54.yaml\\',\\n            \\'nested.yaml\\',\\n            4, \\'PyYAML\\', strict=True)\\n    assert \\'string: Required field missing\\' in e.value.message\\n    assert \\'number: Required field missing\\' in e.value.message\\n    assert \\'integer: Required field missing\\' in e.value.message\\n    assert \\'boolean: Required field missing\\' in e.value.message\\n    assert \\'date: Required field missing\\' in e.value.message\\n    assert \\'datetime: Required field missing\\' in e.value.message\\n    assert \\'nest: Required field missing\\' in e.value.message\\n    assert \\'list: Required field missing\\' in e.value.message\\n\\ndef test_nested_schema_issue_69():\\n    command_line._router(\\'yamale/tests/command_line_fixtures/nestedYaml\\',\\'schema.yaml\\', 1, \\'PyYAML\\')\\n\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, "return_value": "'import io\\nimport pytest\\nimport re\\nimport yamale\\n\\nfrom . import get_fixture\\nfrom .. import validators as val\\n\\ntypes = {\\n    \\'schema\\': \\'types.yaml\\',\\n    \\'bad\\': \\'types_bad_data.yaml\\',\\n    \\'good\\': \\'types_good_data.yaml\\'\\n}\\n\\nnested = {\\n    \\'schema\\': \\'nested.yaml\\',\\n    \\'bad\\': \\'nested_bad_data.yaml\\',\\n    \\'good\\': \\'nested_good_data.yaml\\'\\n}\\n\\ncustom = {\\n    \\'schema\\': \\'custom_types.yaml\\',\\n    \\'bad\\': \\'custom_types_bad.yaml\\',\\n    \\'good\\': \\'custom_types_good.yaml\\'\\n}\\n\\nkeywords = {\\n    \\'schema\\': \\'keywords.yaml\\',\\n    \\'bad\\': \\'keywords_bad.yaml\\',\\n    \\'good\\': \\'keywords_good.yaml\\'\\n}\\n\\nlists = {\\n    \\'schema\\': \\'lists.yaml\\',\\n    \\'bad\\': \\'lists_bad.yaml\\',\\n    \\'bad2\\': \\'lists_bad2.yaml\\',\\n    \\'good\\': \\'lists_good.yaml\\'\\n}\\n\\nmaps = {\\n    \\'schema\\': \\'map.yaml\\',\\n    \\'bad\\': \\'map_bad.yaml\\',\\n    \\'bad2\\': \\'map_bad2.yaml\\',\\n    \\'good\\': \\'map_good.yaml\\'\\n}\\n\\nanys = {\\n    \\'schema\\': \\'any.yaml\\',\\n    \\'bad\\': \\'any_bad.yaml\\',\\n    \\'good\\': \\'any_good.yaml\\'\\n}\\n\\nlist_include = {\\n    \\'schema\\': \\'list_include.yaml\\',\\n    \\'good\\': \\'list_include_good.yaml\\'\\n}\\n\\nissue_22 = {\\n    \\'schema\\': \\'issue_22.yaml\\',\\n    \\'good\\': \\'issue_22_good.yaml\\'\\n}\\n\\nissue_50 = {\\n    \\'schema\\': \\'issue_50.yaml\\',\\n    \\'good\\': \\'issue_50_good.yaml\\'\\n}\\n\\nregexes = {\\n    \\'schema\\': \\'regex.yaml\\',\\n    \\'bad\\': \\'regex_bad.yaml\\',\\n    \\'good\\': \\'regex_good.yaml\\'\\n}\\n\\nips = {\\n    \\'schema\\': \\'ip.yaml\\',\\n    \\'bad\\': \\'ip_bad.yaml\\',\\n    \\'good\\': \\'ip_good.yaml\\'\\n}\\n\\nmacs = {\\n    \\'schema\\': \\'mac.yaml\\',\\n    \\'bad\\': \\'mac_bad.yaml\\',\\n    \\'good\\': \\'mac_good.yaml\\'\\n}\\n\\nnested_map = {\\n    \\'schema\\': \\'nested_map.yaml\\',\\n    \\'good\\': \\'nested_map_good.yaml\\'\\n}\\n\\ntop_level_map = {\\n    \\'schema\\': \\'top_level_map.yaml\\',\\n    \\'good\\': \\'top_level_map_good.yaml\\'\\n}\\n\\ninclude_validator = {\\n    \\'schema\\': \\'include_validator.yaml\\',\\n    \\'good\\': \\'include_validator_good.yaml\\',\\n    \\'bad\\': \\'include_validator_bad.yaml\\'\\n}\\n\\nstrict_map = {\\n    \\'schema\\': \\'strict_map.yaml\\',\\n    \\'good\\': \\'strict_map_good.yaml\\',\\n    \\'bad\\': \\'strict_map_bad.yaml\\'\\n}\\n\\nmixed_strict_map = {\\n    \\'schema\\': \\'mixed_strict_map.yaml\\',\\n    \\'good\\': \\'mixed_strict_map_good.yaml\\',\\n    \\'bad\\': \\'mixed_strict_map_bad.yaml\\'\\n}\\n\\nstrict_list = {\\n    \\'schema\\': \\'strict_list.yaml\\',\\n    \\'good\\': \\'strict_list_good.yaml\\',\\n    \\'bad\\': \\'strict_list_bad.yaml\\'\\n}\\n\\nnested_map2 = {\\n    \\'schema\\': \\'nested_map2.yaml\\',\\n    \\'good\\': \\'nested_map2_good.yaml\\',\\n    \\'bad\\': \\'nested_map2_bad.yaml\\'\\n}\\n\\nstatic_list = {\\n    \\'schema\\': \\'static_list.yaml\\',\\n    \\'good\\': \\'static_list_good.yaml\\',\\n    \\'bad\\': \\'static_list_bad.yaml\\'\\n}\\n\\nnested_issue_54 = {\\n    \\'schema\\': \\'nested.yaml\\',\\n    \\'bad\\': \\'nested_issue_54.yaml\\',\\n    \\'good\\': \\'nested_good_data.yaml\\'\\n}\\n\\nmap_key_constraint = {\\n    \\'schema\\': \\'map_key_constraint.yaml\\',\\n    \\'good\\': \\'map_key_constraint_good.yaml\\',\\n    \\'bad_base\\': \\'map_key_constraint_bad_base.yaml\\',\\n    \\'bad_nest\\': \\'map_key_constraint_bad_nest.yaml\\',\\n    \\'bad_nest_con\\': \\'map_key_constraint_bad_nest_con.yaml\\',\\n}\\n\\nnumeric_bool_coercion = {\\n    \\'schema\\': \\'numeric_bool_coercion.yaml\\',\\n    \\'good\\': \\'numeric_bool_coercion_good.yaml\\',\\n    \\'bad\\': \\'numeric_bool_coercion_bad.yaml\\',\\n}\\n\\nsubset = {\\n    \\'schema\\': \\'subset.yaml\\',\\n    \\'good\\': \\'subset_good.yaml\\',\\n    \\'good2\\': \\'subset_good2.yaml\\',\\n    \\'bad\\': \\'subset_bad.yaml\\',\\n    \\'bad2\\': \\'subset_bad2.yaml\\',\\n    \\'bad3\\': \\'subset_bad3.yaml\\'\\n}\\n\\nsubset_empty = {\\n    \\'schema\\': \\'subset_empty.yaml\\',\\n    \\'good\\': \\'subset_empty_good.yaml\\',\\n    \\'good2\\': \\'subset_empty_good2.yaml\\'\\n}\\n\\nsubset_nodef = {\\n    \\'schema\\': \\'subset_nodef.yaml\\'\\n}\\n\\ntest_data = [\\n    types, nested, custom,\\n    keywords, lists, maps,\\n    anys, list_include, issue_22,\\n    issue_50, regexes, ips, macs,\\n    nested_map, top_level_map,\\n    include_validator, strict_map,\\n    mixed_strict_map, strict_list,\\n    nested_map2, static_list,\\n    nested_issue_54,\\n    map_key_constraint,\\n    numeric_bool_coercion,\\n    subset, subset_empty\\n]\\n\\nfor d in test_data:\\n    for key in d.keys():\\n        if key == \\'schema\\':\\n            d[key] = yamale.make_schema(get_fixture(d[key]))\\n        else:\\n            d[key] = yamale.make_data(get_fixture(d[key]))\\n\\n\\ndef test_tests():\\n    \"\"\" Make sure the test runner is working.\"\"\"\\n    assert 1 + 1 == 2\\n\\n\\ndef test_flat_make_schema():\\n    assert isinstance(types[\\'schema\\']._schema[\\'string\\'], val.String)\\n\\n\\ndef test_nested_schema():\\n    nested_schema = nested[\\'schema\\']._schema\\n    assert isinstance(nested_schema[\\'string\\'], val.String)\\n    assert isinstance(nested_schema[\\'list\\'], (list, tuple))\\n    assert isinstance(nested_schema[\\'list\\'][0], val.String)\\n\\n\\n@pytest.mark.parametrize(\\'data_map\\', test_data)\\ndef test_good(data_map):\\n    for k, v in data_map.items():\\n        if k.startswith(\\'good\\'):\\n            yamale.validate(data_map[\\'schema\\'], data_map[k])\\n\\n\\ndef test_bad_validate():\\n    assert count_exception_lines(types[\\'schema\\'], types[\\'bad\\']) == 9\\n\\n\\ndef test_bad_nested():\\n    assert count_exception_lines(nested[\\'schema\\'], nested[\\'bad\\']) == 2\\n\\n\\ndef test_bad_nested_issue_54():\\n    exp = [\\n        \\'string: Required field missing\\',\\n        \\'number: Required field missing\\',\\n        \\'integer: Required field missing\\',\\n        \\'boolean: Required field missing\\',\\n        \\'date: Required field missing\\',\\n        \\'datetime: Required field missing\\',\\n        \\'nest: Required field missing\\',\\n        \\'list: Required field missing\\'\\n    ]\\n    match_exception_lines(nested_issue_54[\\'schema\\'], nested_issue_54[\\'bad\\'], exp)\\n\\ndef test_bad_custom():\\n    assert count_exception_lines(custom[\\'schema\\'], custom[\\'bad\\']) == 1\\n\\n\\ndef test_bad_lists():\\n    assert count_exception_lines(lists[\\'schema\\'], lists[\\'bad\\']) == 6\\n\\n\\ndef test_bad2_lists():\\n    assert count_exception_lines(lists[\\'schema\\'], lists[\\'bad2\\']) == 2\\n\\n\\ndef test_bad_maps():\\n    assert count_exception_lines(maps[\\'schema\\'], maps[\\'bad\\']) == 7\\n\\ndef test_bad_maps2():\\n    assert count_exception_lines(maps[\\'schema\\'], maps[\\'bad2\\']) == 1\\n\\ndef test_bad_keywords():\\n    assert count_exception_lines(keywords[\\'schema\\'], keywords[\\'bad\\']) == 9\\n\\n\\ndef test_bad_anys():\\n    assert count_exception_lines(anys[\\'schema\\'], anys[\\'bad\\']) == 5\\n\\n\\ndef test_bad_regexes():\\n    assert count_exception_lines(regexes[\\'schema\\'], regexes[\\'bad\\']) == 4\\n\\n\\ndef test_bad_include_validator():\\n    exp = [\"key1: \\'a_string\\' is not a int.\"]\\n    match_exception_lines(include_validator[\\'schema\\'],\\n                          include_validator[\\'bad\\'],\\n                          exp)\\n\\n\\ndef test_bad_schema():\\n    with pytest.raises(SyntaxError) as excinfo:\\n        yamale.make_schema(get_fixture(\\'bad_schema.yaml\\'))\\n    assert \\'fixtures/bad_schema.yaml\\' in str(excinfo.value)\\n\\n\\ndef test_empty_schema():\\n    with pytest.raises(ValueError) as excinfo:\\n        yamale.make_schema(get_fixture(\\'empty_schema.yaml\\'))\\n    assert \\'empty_schema.yaml is an empty file!\\' in str(excinfo.value)\\n\\n\\n@pytest.mark.parametrize(\\n    \"schema_filename\",\\n    [\\'bad_schema_rce.yaml\\', \\'bad_schema_rce2.yaml\\', \\'bad_schema_rce3.yaml\\', \\'bad_schema_rce4.yaml\\']\\n)\\ndef test_vulnerable_schema(schema_filename):\\n    with pytest.raises(SyntaxError) as excinfo:\\n        yamale.make_schema(get_fixture(schema_filename))\\n    assert schema_filename in str(excinfo.value)\\n\\n\\ndef test_list_is_not_a_map():\\n    exp = [\" : \\'[1, 2]\\' is not a map\"]\\n    match_exception_lines(strict_map[\\'schema\\'],\\n                          strict_list[\\'good\\'],\\n                          exp)\\n\\n\\ndef test_bad_strict_map():\\n    exp = [\\'extra: Unexpected element\\']\\n    match_exception_lines(strict_map[\\'schema\\'],\\n                          strict_map[\\'bad\\'],\\n                          exp,\\n                          strict=True)\\n\\n\\ndef test_bad_strict_list():\\n    exp = [\\'2: Unexpected element\\']\\n    match_exception_lines(strict_list[\\'schema\\'],\\n                          strict_list[\\'bad\\'],\\n                          exp,\\n                          strict=True)\\n\\n\\ndef test_bad_mixed_strict_map():\\n    exp = [\\'field3.extra: Unexpected element\\']\\n    match_exception_lines(mixed_strict_map[\\'schema\\'],\\n                          mixed_strict_map[\\'bad\\'],\\n                          exp)\\n\\n\\ndef test_bad_nested_map2():\\n    exp = [\\'field1.field1_1: Required field missing\\']\\n    match_exception_lines(nested_map2[\\'schema\\'],\\n                          nested_map2[\\'bad\\'],\\n                          exp)\\n\\n\\ndef test_bad_static_list():\\n    exp = [\\'0: Required field missing\\']\\n    match_exception_lines(static_list[\\'schema\\'],\\n                          static_list[\\'bad\\'],\\n                          exp)\\n\\n\\ndef test_bad_map_key_constraint_base():\\n    exp = [\": Key error - \\'bad\\' is not a int.\"]\\n    match_exception_lines(map_key_constraint[\\'schema\\'],\\n                          map_key_constraint[\\'bad_base\\'],\\n                          exp)\\n\\n\\ndef test_bad_map_key_constraint_nest():\\n    exp = [\"1.0: Key error - \\'100\\' is not a str.\"]\\n    match_exception_lines(map_key_constraint[\\'schema\\'],\\n                          map_key_constraint[\\'bad_nest\\'],\\n                          exp)\\n\\n\\ndef test_bad_map_key_constraint_nest_con():\\n    exp = [\\n        \"1.0: Key error - \\'100\\' is not a str.\",\\n        \"1.0: Key error - \\'baz\\' contains excluded character \\'z\\'\",\\n    ]\\n    match_exception_lines(map_key_constraint[\\'schema\\'],\\n                          map_key_constraint[\\'bad_nest_con\\'],\\n                          exp)\\n\\n\\ndef test_bad_numeric_bool_coercion():\\n    exp = [\\n        \"integers.0: \\'False\\' is not a int.\",\\n        \"integers.1: \\'True\\' is not a int.\",\\n        \"numbers.0: \\'False\\' is not a num.\",\\n        \"numbers.1: \\'True\\' is not a num.\",\\n    ]\\n    match_exception_lines(numeric_bool_coercion[\\'schema\\'],\\n                          numeric_bool_coercion[\\'bad\\'],\\n                          exp)\\n\\ndef test_bad_subset():\\n    exp = [\\n        \"subset_list: \\'subset\\' may not be an empty set.\"\\n    ]\\n    match_exception_lines(subset[\\'schema\\'],\\n                          subset[\\'bad\\'],\\n                          exp)\\n\\ndef test_bad_subset2():\\n    exp = [\\n        \"subset_list: \\'[1]\\' is not a int.\",\\n        \"subset_list: \\'[1]\\' is not a str.\"\\n    ]\\n    match_exception_lines(subset[\\'schema\\'],\\n                          subset[\\'bad2\\'],\\n                          exp)\\n\\ndef test_bad_subset3():\\n    exp = [\\n        \"subset_list: \\'{\\'a\\': 1}\\' is not a int.\",\\n        \"subset_list: \\'{\\'a\\': 1}\\' is not a str.\"\\n    ]\\n    match_exception_lines(subset[\\'schema\\'],\\n                          subset[\\'bad3\\'],\\n                          exp)\\n\\ndef test_nodef_subset_schema():\\n    with pytest.raises(ValueError) as e:\\n        yamale.make_schema(get_fixture(subset_nodef[\\'schema\\']))\\n\\n    assert \"\\'subset\\' requires at least one validator!\" in str(e.value)\\n\\n@pytest.mark.parametrize(\"use_schema_string,use_data_string,expected_message_re\", [\\n    (False, False, \"^Error validating data \\'.*?\\' with schema \\'.*?\\'\\\\n\\\\t\"),\\n    (True, False, \"^Error validating data \\'.*?\\'\\\\n\\\\t\"),\\n    (False, True, \"^Error validating data with schema \\'.*?\\'\\\\n\\\\t\"),\\n    (True, True, \"^Error validating data\\\\n\\\\t\"),\\n])\\ndef test_validate_errors(use_schema_string, use_data_string, expected_message_re):\\n    schema_path = get_fixture(\\'types.yaml\\')\\n    data_path = get_fixture(\\'types_bad_data.yaml\\')\\n    if use_schema_string:\\n        with io.open(schema_path, encoding=\\'utf-8\\') as f:\\n            schema = yamale.make_schema(content=f.read())\\n    else:\\n        schema = yamale.make_schema(schema_path)\\n    if use_data_string:\\n        with io.open(data_path, encoding=\\'utf-8\\') as f:\\n            data = yamale.make_data(content=f.read())\\n    else:\\n        data = yamale.make_data(data_path)\\n    with pytest.raises(yamale.yamale_error.YamaleError) as excinfo:\\n        yamale.validate(schema, data)\\n    assert re.match(expected_message_re, excinfo.value.message, re.MULTILINE), \\\\\\n        \\'Message {} should match {}\\'.format(\\n            excinfo.value.message, expected_message_re\\n        )\\n\\n\\ndef match_exception_lines(schema, data, expected, strict=False):\\n    with pytest.raises(ValueError) as e:\\n        yamale.validate(schema, data, strict)\\n\\n    got = e.value.results[0].errors\\n    got.sort()\\n    expected.sort()\\n    assert got == expected\\n\\n\\ndef count_exception_lines(schema, data, strict=False):\\n    with pytest.raises(ValueError) as e:\\n        yamale.validate(schema, data, strict)\\n    result = e.value.results[0]\\n    return len(result.errors)\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, "return_value": "'import re\\nimport os\\nfrom yamale import YamaleTestCase\\nfrom yamale.validators import DefaultValidators, Validator\\n\\n\\ndata_folder = os.path.dirname(os.path.realpath(__file__))\\n\\n\\nclass TestAllYaml(YamaleTestCase):\\n    base_dir = data_folder\\n    schema = \\'meta_test_fixtures/schema.yaml\\'\\n    yaml = \\'meta_test_fixtures/data1.yaml\\'\\n\\n    def runTest(self):\\n        self.assertTrue(self.validate())\\n\\n\\nclass TestBadYaml(YamaleTestCase):\\n    base_dir = data_folder\\n    schema = \\'meta_test_fixtures/schema_bad.yaml\\'\\n    yaml = \\'meta_test_fixtures/data*.yaml\\'\\n\\n    def runTest(self):\\n        self.assertRaises(ValueError, self.validate)\\n\\n\\nclass TestMapYaml(YamaleTestCase):\\n    base_dir = data_folder\\n    schema = \\'meta_test_fixtures/schema.yaml\\'\\n    yaml = [\\'meta_test_fixtures/data1.yaml\\',\\n            \\'meta_test_fixtures/some_data.yaml\\',\\n            # Make sure  schema doesn\\'t validate itself\\n            \\'meta_test_fixtures/schema.yaml\\']\\n\\n    def runTest(self):\\n        self.assertTrue(self.validate())\\n\\n\\n# class TestListYaml(YamaleTestCase):\\n#     base_dir = data_folder\\n#     schema = \\'meta_test_fixtures/schema_include_list.yaml\\'\\n#     yaml = [\\'meta_test_fixtures/data_include_list.yaml\\']\\n\\n#     def runTest(self):\\n#         self.assertTrue(self.validate())\\n\\n\\nclass Card(Validator):\\n    \"\"\" Custom validator for testing purpose \"\"\"\\n    tag = \\'card\\'\\n    card_regex = re.compile(r\\'^(10|[2-9JQKA])[SHDC]$\\')\\n\\n    def _is_valid(self, value):\\n        return re.match(self.card_regex, value)\\n\\n\\nclass TestCustomValidator(YamaleTestCase):\\n    base_dir = data_folder\\n    schema = \\'meta_test_fixtures/schema_custom.yaml\\'\\n    yaml = \\'meta_test_fixtures/data_custom.yaml\\'\\n\\n    def runTest(self):\\n        validators = DefaultValidators.copy()\\n        validators[\\'card\\'] = Card\\n        self.assertTrue(self.validate(validators))\\n\\n\\nclass TestCustomValidatorWithIncludes(YamaleTestCase):\\n    base_dir = data_folder\\n    schema = \\'meta_test_fixtures/schema_custom_with_include.yaml\\'\\n    yaml = \\'meta_test_fixtures/data_custom_with_include.yaml\\'\\n\\n    def runTest(self):\\n        validators = DefaultValidators.copy()\\n        validators[\\'card\\'] = Card\\n        self.assertTrue(self.validate(validators))\\n\\n\\nclass TestBadRequiredYaml(YamaleTestCase):\\n    base_dir = data_folder\\n    schema = \\'meta_test_fixtures/schema_required_bad.yaml\\'\\n    yaml = \\'meta_test_fixtures/data_required_bad.yaml\\'\\n\\n    def runTest(self):\\n        self.assertRaises(ValueError, self.validate)\\n\\n\\nclass TestGoodRequiredYaml(YamaleTestCase):\\n    base_dir = data_folder\\n    schema = \\'meta_test_fixtures/schema_required_good.yaml\\'\\n    yaml = \\'meta_test_fixtures/data_required_good.yaml\\'\\n\\n    def runTest(self):\\n        self.assertTrue(self.validate())\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, "return_value": "'# ABCs for containers were moved to their own module\\ntry:\\n    from collections.abc import Mapping, Set, Sequence\\nexcept ImportError:\\n    from collections import Mapping, Set, Sequence\\n\\n\\n# Python 3 has no basestring, lets test it.\\ntry:\\n    basestring  # attempt to evaluate basestring\\n\\n    def isstr(s):\\n        return isinstance(s, basestring)\\n\\n    def to_unicode(s):\\n        return unicode(s)\\n\\nexcept NameError:\\n    def isstr(s):\\n        return isinstance(s, str)\\n\\n    def to_unicode(s):\\n        return s\\n\\n\\ndef is_list(obj):\\n    return isinstance(obj, Sequence) and not isstr(obj)\\n\\n\\ndef is_map(obj):\\n    return isinstance(obj, Mapping)\\n\\n\\ndef get_keys(obj):\\n    if is_map(obj):\\n        return obj.keys()\\n    elif is_list(obj):\\n        return range(len(obj))\\n\\n\\ndef get_iter(iterable):\\n    if isinstance(iterable, Mapping):\\n        return iterable.items()\\n    else:\\n        return enumerate(iterable)\\n\\n\\ndef get_subclasses(cls, _subclasses_yielded=None):\\n    \"\"\"\\n    Generator recursively yielding all subclasses of the passed class (in\\n    depth-first order).\\n\\n    Parameters\\n    ----------\\n    cls : type\\n        Class to find all subclasses of.\\n    _subclasses_yielded : set\\n        Private parameter intended to be passed only by recursive invocations of\\n        this function, containing all previously yielded classes.\\n    \"\"\"\\n\\n    if _subclasses_yielded is None:\\n        _subclasses_yielded = set()\\n\\n    # If the passed class is old- rather than new-style, raise an exception.\\n    if not hasattr(cls, \\'__subclasses__\\'):\\n        raise TypeError(\\'Old-style class \"%s\" unsupported.\\' % cls.__name__)\\n\\n    # For each direct subclass of this class\\n    for subclass in cls.__subclasses__():\\n        # If this subclass has already been yielded, skip to the next.\\n        if subclass in _subclasses_yielded:\\n            continue\\n\\n        # Yield this subclass and record having done so before recursing.\\n        yield subclass\\n        _subclasses_yielded.add(subclass)\\n\\n        # Yield all direct subclasses of this class as well.\\n        for subclass_subclass in get_subclasses(subclass, _subclasses_yielded):\\n            yield subclass_subclass\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, "return_value": "'from .base import Validator\\nfrom .validators import *\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, "return_value": "'class Validator(object):\\n    \"\"\"Base class for all Validators\"\"\"\\n    constraints = []\\n    value_type = None\\n\\n    def __init__(self, *args, **kwargs):\\n        self.args = args\\n        self.kwargs = kwargs\\n\\n        # Is field required? Default is True\\n        self.is_required = bool(kwargs.pop(\\'required\\', True))\\n\\n        # Can value be None if field is optional? Default is True\\n        self._value_can_be_none = bool(kwargs.pop(\\'none\\', True))\\n\\n        # Construct all constraints\\n        self._constraints_inst = self._create_constraints(self.constraints,\\n                                                          self.value_type,\\n                                                          kwargs)\\n\\n    def _create_constraints(self, constraint_classes, value_type, kwargs):\\n        constraints = []\\n        for constraint in constraint_classes:\\n            constraints.append(constraint(value_type, kwargs))\\n        return constraints\\n\\n    @property\\n    def tag(self):\\n        return self.__class__\\n\\n    @property\\n    def is_optional(self):\\n        return not self.is_required\\n\\n    @property\\n    def can_be_none(self):\\n        \"\"\"Check if value for optional field can be None.\"\"\"\\n        return self._value_can_be_none\\n\\n    def _is_valid(self, value):\\n        \"\"\"Validators must implement this. Return True if value is valid.\"\"\"\\n        raise NotImplementedError(\\'You need to override this function\\')\\n\\n    def get_name(self):\\n        return self.tag\\n\\n    def validate(self, value):\\n        \"\"\"\\n        Check if ``value`` is valid.\\n\\n        :returns: [errors] If ``value`` is invalid, otherwise [].\\n        \"\"\"\\n        errors = []\\n\\n        # Make sure the type validates first.\\n        valid = self._is_valid(value)\\n        if not valid:\\n            errors.append(self.fail(value))\\n            return errors\\n\\n        # Then validate all the constraints second.\\n        for constraint in self._constraints_inst:\\n            error = constraint.is_valid(value)\\n            if error:\\n                if isinstance(error, list):\\n                    errors.extend(error)\\n                else:\\n                    errors.append(error)\\n\\n        return errors\\n\\n    def is_valid(self, value):\\n        return self.validate(value) == []\\n\\n    def fail(self, value):\\n        \"\"\"Override to define a custom fail message\"\"\"\\n        return \\'\\\\\\'%s\\\\\\' is not a %s.\\' % (value, self.get_name())\\n\\n    def __repr__(self):\\n        return \\'%s(%s, %s)\\' % (self.__class__.__name__, self.args, self.kwargs)\\n\\n    def __eq__(self, other):\\n        # Validators are equal if they have the same args and kwargs.\\n        eq = [isinstance(other, self.__class__),\\n              self.args == other.args,\\n              self.kwargs == other.kwargs]\\n        return all(eq)\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, "return_value": "\"from __future__ import absolute_import\\nimport re\\nimport datetime\\nimport ipaddress\\n\\nfrom yamale.util import to_unicode\\nfrom .base import Validator\\nfrom .. import util\\n\\n\\nclass Constraint(object):\\n    keywords = {}  # Keywords and types accepted by this constraint\\n    is_active = False\\n\\n    def __init__(self, value_type, kwargs):\\n        self._parseKwargs(kwargs)\\n\\n    def _parseKwargs(self, kwargs):\\n        for kwarg, kwtype in self.keywords.items():\\n            value = self.get_kwarg(kwargs, kwarg, kwtype)\\n            setattr(self, kwarg, value)\\n\\n    def get_kwarg(self, kwargs, key, kwtype):\\n        try:\\n            value = kwargs[key]\\n        except KeyError:\\n            return None\\n\\n        # Activate this constraint\\n        self.is_active = True\\n\\n        if isinstance(value, kwtype):\\n            # value already correct type, return\\n            return value\\n\\n        try:  # Try to convert value\\n            # Is this value one of the datetime types?\\n            if kwtype == datetime.date:\\n                time = datetime.datetime.strptime(value, '%Y-%m-%d')\\n                return datetime.date(time.year, time.month, time.day)\\n\\n            if kwtype == datetime.datetime:\\n                return datetime.datetime.strptime(value, '%Y-%m-%d %H:%M:%S')\\n\\n            return kwtype(value)\\n        except (TypeError, ValueError):\\n            raise SyntaxError('%s is not a %s' % (key, kwtype))\\n\\n    def is_valid(self, value):\\n        if not self.is_active:\\n            return None\\n\\n        if not self._is_valid(value):\\n            return self._fail(value)\\n\\n        return None\\n\\n    def _fail(self, value):\\n        return '\\\\'%s\\\\' violates %s.' % (value, self.__class__.__name__)\\n\\n\\nclass Min(Constraint):\\n    fail = '%s is less than %s'\\n\\n    def __init__(self, value_type, kwargs):\\n        self.keywords = {'min': value_type}\\n        super(Min, self).__init__(value_type, kwargs)\\n\\n    def _is_valid(self, value):\\n        return self.min <= value\\n\\n    def _fail(self, value):\\n        return self.fail % (value, self.min)\\n\\n\\nclass Max(Constraint):\\n    fail = '%s is greater than %s'\\n\\n    def __init__(self, value_type, kwargs):\\n        self.keywords = {'max': value_type}\\n        super(Max, self).__init__(value_type, kwargs)\\n\\n    def _is_valid(self, value):\\n        return self.max >= value\\n\\n    def _fail(self, value):\\n        return self.fail % (value, self.max)\\n\\n\\nclass LengthMin(Constraint):\\n    keywords = {'min': int}\\n    fail = 'Length of %s is less than %s'\\n\\n    def _is_valid(self, value):\\n        return self.min <= len(value)\\n\\n    def _fail(self, value):\\n        return self.fail % (value, self.min)\\n\\n\\nclass LengthMax(Constraint):\\n    keywords = {'max': int}\\n    fail = 'Length of %s is greater than %s'\\n\\n    def _is_valid(self, value):\\n        return self.max >= len(value)\\n\\n    def _fail(self, value):\\n        return self.fail % (value, self.max)\\n\\n\\nclass Key(Constraint):\\n    keywords = {'key': Validator}\\n    fail = 'Key error - %s'\\n\\n    def _is_valid(self, value):\\n        for k in value.keys():\\n            if self.key.validate(k) != []:\\n                return False\\n        return True\\n\\n    def _fail(self, value):\\n        error_list = []\\n        for k in value.keys():\\n            error_list.extend(self.key.validate(k))\\n        return [self.fail % (e) for e in error_list]\\n\\n\\nclass StringEquals(Constraint):\\n    keywords = {'equals': str, 'ignore_case': bool}\\n    fail = '%s does not equal %s'\\n\\n    def _is_valid(self, value):\\n        # Check if the function has only been called due to ignore_case\\n        if self.equals is not None:\\n            if self.ignore_case is not None:\\n                if not self.ignore_case:\\n                    return value == self.equals\\n                else:\\n                    return value.casefold() == self.equals.casefold()\\n            else:\\n                return value == self.equals\\n        else:\\n            return True\\n\\n    def _fail(self, value):\\n        return self.fail % (value, self.equals)\\n\\n\\nclass StringStartsWith(Constraint):\\n    keywords = {'starts_with': str, 'ignore_case': bool}\\n    fail = '%s does not start with %s'\\n\\n    def _is_valid(self, value):\\n        # Check if the function has only been called due to ignore_case\\n        if self.starts_with is not None:\\n            if self.ignore_case is not None:\\n                if not self.ignore_case:\\n                    return value.startswith(self.starts_with)\\n                else:\\n                    length = len(self.starts_with)\\n                    if length <= len(value):\\n                        return value[:length].casefold() == self.starts_with.casefold()\\n                    else:\\n                        return False\\n            else:\\n                return value.startswith(self.starts_with)\\n        else:\\n            return True\\n\\n    def _fail(self, value):\\n        return self.fail % (value, self.starts_with)\\n\\n\\nclass StringEndsWith(Constraint):\\n    keywords = {'ends_with': str, 'ignore_case': bool}\\n    fail = '%s does not end with %s'\\n\\n    def _is_valid(self, value):\\n        # Check if the function has only been called due to ignore_case\\n        if self.ends_with is not None:\\n            if self.ignore_case is not None:\\n                if not self.ignore_case:\\n                    return value.endswith(self.ends_with)\\n                else:\\n                    length = len(self.ends_with)\\n                    if length <= len(value):\\n                        return value[-length:].casefold() == self.ends_with.casefold()\\n                    else:\\n                        return False\\n            else:\\n                return value.endswith(self.ends_with)\\n        else:\\n            return True\\n\\n    def _fail(self, value):\\n        return self.fail % (value, self.ends_with)\\n\\n\\nclass StringMatches(Constraint):\\n    keywords = {'matches': str}\\n    fail = '%s is not a regex match.'\\n\\n    _regex_flags = {'ignore_case': re.I, 'multiline': re.M, 'dotall': re.S}\\n\\n    def __init__(self, value_type, kwargs):\\n        self._flags = 0\\n        for k, v in util.get_iter(self._regex_flags):\\n            self._flags |= v if kwargs.pop(k, False) else 0\\n\\n        super(StringMatches, self).__init__(value_type, kwargs)\\n\\n    def _is_valid(self, value):\\n        if self.matches is not None:\\n            regex = re.compile(self.matches, self._flags)\\n            return regex.match(value)\\n        else:\\n            return True\\n\\n    def _fail(self, value):\\n        return self.fail % (value)\\n\\n\\nclass CharacterExclude(Constraint):\\n    keywords = {'exclude': str, 'ignore_case': bool}\\n    fail = '\\\\'%s\\\\' contains excluded character \\\\'%s\\\\''\\n\\n    def _is_valid(self, value):\\n        # Check if the function has only been called due to ignore_case\\n        if self.exclude is not None:\\n            for char in self.exclude:\\n                if self.ignore_case is not None:\\n                    if not self.ignore_case:\\n                        if char in value:\\n                            self._failed_char = char\\n                            return False\\n                    else:\\n                        if char.casefold() in value.casefold():\\n                            self._failed_char = char\\n                            return False\\n                else:\\n                    if char in value:\\n                        self._failed_char = char\\n                        return False\\n            return True\\n        else:\\n            return True\\n\\n    def _fail(self, value):\\n        return self.fail % (value, self._failed_char)\\n\\n\\nclass IpVersion(Constraint):\\n    keywords = {'version': int}\\n    fail = 'IP version of %s is not %s'\\n\\n    def _is_valid(self, value):\\n        try:\\n            ip = ipaddress.ip_interface(to_unicode(value))\\n        except ValueError:\\n            return False\\n        return self.version == ip.version\\n\\n    def _fail(self, value):\\n        return self.fail % (value, self.version)\\n\""}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, "return_value": "''"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, "return_value": "\"import datetime\\nfrom yamale import validators as val\\n\\n\\ndef test_length_min():\\n    v = val.String(min=2)\\n    assert v.is_valid('abcd')\\n    assert v.is_valid('ab')\\n    assert not v.is_valid('a')\\n\\n\\ndef test_length_max():\\n    v = val.String(max=3)\\n    assert v.is_valid('abc')\\n    assert v.is_valid('ab')\\n    assert not v.is_valid('abcd')\\n\\n\\ndef test_number_max():\\n    v = val.Number(min=.5)\\n    assert v.is_valid(4)\\n    assert v.is_valid(.5)\\n    assert not v.is_valid(.1)\\n\\n\\ndef test_number_min():\\n    v = val.Integer(max=10)\\n    assert v.is_valid(4)\\n    assert v.is_valid(10)\\n    assert not v.is_valid(11)\\n\\n\\ndef test_timestamp_min():\\n    v = val.Timestamp(min=datetime.datetime(2010, 1, 1))\\n    assert v.is_valid(datetime.datetime(2010, 1, 1))\\n    assert v.is_valid(datetime.datetime(2011, 2, 2))\\n    assert not v.is_valid(datetime.datetime(2009, 12, 31))\\n\\n\\ndef test_timestamp_max():\\n    v = val.Timestamp(max=datetime.datetime(2010, 1, 1))\\n    assert v.is_valid(datetime.datetime(2010, 1, 1))\\n    assert v.is_valid(datetime.datetime(2009, 2, 2))\\n    assert not v.is_valid(datetime.datetime(2010, 2, 2))\\n\\n\\ndef test_day_min():\\n    v = val.Day(min=datetime.date(2010, 1, 1))\\n    assert v.is_valid(datetime.date(2010, 1, 1))\\n    assert v.is_valid(datetime.date(2011, 2, 2))\\n    assert not v.is_valid(datetime.date(2009, 12, 31))\\n\\n\\ndef test_day_max():\\n    v = val.Day(max=datetime.date(2010, 1, 1))\\n    assert v.is_valid(datetime.date(2010, 1, 1))\\n    assert v.is_valid(datetime.date(2009, 2, 2))\\n    assert not v.is_valid(datetime.date(2010, 2, 2))\\n\\n\\ndef test_str_equals():\\n    v = val.String(equals='abcd')\\n    assert v.is_valid('abcd')\\n    assert not v.is_valid('abcde')\\n    assert not v.is_valid('c')\\n\\n\\ndef test_str_equals_ignore_case():\\n    v = val.String(equals='abcd', ignore_case=True)\\n    assert v.is_valid('abCd')\\n    assert not v.is_valid('abcde')\\n    assert not v.is_valid('C')\\n\\n\\ndef test_str_starts_with():\\n    v = val.String(starts_with='abc')\\n    assert v.is_valid('abcd')\\n    assert not v.is_valid('bcd')\\n    assert not v.is_valid('c')\\n\\n\\ndef test_str_starts_with_ignore_case():\\n    v = val.String(starts_with='abC', ignore_case=True)\\n    assert v.is_valid('abCde')\\n    assert v.is_valid('abcde')\\n    assert not v.is_valid('bcd')\\n    assert not v.is_valid('C')\\n\\n\\ndef test_str_ends_with():\\n    v = val.String(ends_with='abcd')\\n    assert v.is_valid('abcd')\\n    assert not v.is_valid('abcde')\\n    assert not v.is_valid('c')\\n\\n\\ndef test_str_ends_with_ignore_case():\\n    v = val.String(ends_with='abC', ignore_case=True)\\n    assert v.is_valid('xyzabC')\\n    assert v.is_valid('xyzabc')\\n    assert not v.is_valid('cde')\\n    assert not v.is_valid('C')\\n\\n\\ndef test_str_matches():\\n    v = val.String(matches=r'^(abc)\\\\1?de$')\\n    assert v.is_valid('abcabcde')\\n    assert not v.is_valid('abcabcabcde')\\n    assert not v.is_valid('\\\\12')\\n\\n    v = val.String(matches=r'[a-z0-9]{3,}s\\\\s$', ignore_case=True)\\n    assert v.is_valid('b33S\\\\v')\\n    assert v.is_valid('B33s\\\\t')\\n    assert not v.is_valid(' b33s ')\\n    assert not v.is_valid('b33s  ')\\n\\n    v = val.String(matches=r'A.+\\\\d$', ignore_case=False, multiline=True)\\n    assert v.is_valid('A_-3\\\\n\\\\n')\\n    assert not v.is_valid('a!!!!!5\\\\n\\\\n')\\n\\n    v = val.String(matches=r'.*^Ye.*s\\\\.', ignore_case=True, multiline=True, dotall=True)\\n    assert v.is_valid('YEeeEEEEeeeeS.')\\n    assert v.is_valid('What?\\\\nYes!\\\\nBEES.\\\\nOK.')\\n    assert not v.is_valid('YES-TA-TOES?')\\n    assert not v.is_valid('\\\\n\\\\nYaes.')\\n\\n\\ndef test_char_exclude():\\n    v = val.String(exclude='abcd')\\n    assert v.is_valid('efg')\\n    assert not v.is_valid('abc')\\n    assert not v.is_valid('c')\\n\\n\\ndef test_char_exclude_igonre_case():\\n    v = val.String(exclude='abcd', ignore_case=True)\\n    assert v.is_valid('efg')\\n    assert v.is_valid('Efg')\\n    assert not v.is_valid('abc')\\n    assert not v.is_valid('Def')\\n    assert not v.is_valid('c')\\n\\n\\ndef test_ip4():\\n    v = val.Ip(version=4)\\n    assert v.is_valid('192.168.1.1')\\n    assert v.is_valid('192.168.1.255')\\n    assert v.is_valid('192.168.3.1/24')\\n    assert not v.is_valid('2001:db8::')\\n    assert not v.is_valid('2001:db8::/64')\\n\\ndef test_ip6():\\n    v = val.Ip(version=6)\\n    assert not v.is_valid('192.168.1.1')\\n    assert not v.is_valid('192.168.1.255')\\n    assert not v.is_valid('192.168.3.1/24')\\n    assert v.is_valid('2001:db8::')\\n    assert v.is_valid('2001:db8::/64')\\n\""}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, "return_value": "'from datetime import date, datetime\\nfrom yamale import validators as val\\n\\n\\ndef test_validator_defaults():\\n    \"\"\"\\n    Unit test the dictionary of default validators.\\n    \"\"\"\\n    assert val.DefaultValidators[val.String.tag] is val.String\\n    assert val.DefaultValidators[val.Any.__name__] is val.Any\\n\\n\\ndef test_equality():\\n    assert val.String() == val.String()\\n    assert val.String(hello=\\'wat\\') == val.String(hello=\\'wat\\')\\n    assert val.String(hello=\\'wat\\') != val.String(hello=\\'nope\\')\\n    assert val.Boolean(\\'yep\\') != val.Boolean(\\'nope\\')\\n\\n\\ndef test_integer():\\n    v = val.Integer()\\n    assert v.is_valid(1)\\n    assert not v.is_valid(\\'1\\')\\n    assert not v.is_valid(1.34)\\n\\n\\ndef test_string():\\n    v = val.String()\\n    assert v.is_valid(\\'1\\')\\n    assert not v.is_valid(1)\\n\\n\\ndef test_regex():\\n    v = val.Regex(r\\'^(abc)\\\\1?de$\\', name=\\'test regex\\')\\n    assert v.is_valid(\\'abcabcde\\')\\n    assert not v.is_valid(\\'abcabcabcde\\')\\n    assert not v.is_valid(\\'\\\\12\\')\\n    assert v.fail(\\'woopz\\') == \\'\\\\\\'woopz\\\\\\' is not a test regex.\\'\\n\\n    v = val.Regex(r\\'[a-z0-9]{3,}s\\\\s$\\', ignore_case=True)\\n    assert v.is_valid(\\'b33S\\\\v\\')\\n    assert v.is_valid(\\'B33s\\\\t\\')\\n    assert not v.is_valid(\\' b33s \\')\\n    assert not v.is_valid(\\'b33s  \\')\\n    assert v.fail(\\'fdsa\\') == \\'\\\\\\'fdsa\\\\\\' is not a regex match.\\'\\n\\n    v = val.Regex(r\\'A.+\\\\d$\\', ignore_case=False, multiline=True)\\n    assert v.is_valid(\\'A_-3\\\\n\\\\n\\')\\n    assert not v.is_valid(\\'a!!!!!5\\\\n\\\\n\\')\\n\\n    v = val.Regex(r\\'.*^Ye.*s\\\\.\\', ignore_case=True, multiline=True, dotall=True)\\n    assert v.is_valid(\\'YEeeEEEEeeeeS.\\')\\n    assert v.is_valid(\\'What?\\\\nYes!\\\\nBEES.\\\\nOK.\\')\\n    assert not v.is_valid(\\'YES-TA-TOES?\\')\\n    assert not v.is_valid(\\'\\\\n\\\\nYaes.\\')\\n\\n\\ndef test_number():\\n    v = val.Number()\\n    assert v.is_valid(1)\\n    assert v.is_valid(1.3425235)\\n    assert not v.is_valid(\\'str\\')\\n\\n\\ndef test_boolean():\\n    v = val.Boolean()\\n    assert v.is_valid(True)\\n    assert v.is_valid(False)\\n    assert not v.is_valid(\\'\\')\\n    assert not v.is_valid(0)\\n\\n\\ndef test_date():\\n    v = val.Day()\\n    assert v.is_valid(date(2015, 1, 1))\\n    assert v.is_valid(datetime(2015, 1, 1, 1))\\n    assert not v.is_valid(\\'\\')\\n    assert not v.is_valid(0)\\n\\n\\ndef test_datetime():\\n    v = val.Timestamp()\\n    assert v.is_valid(datetime(2015, 1, 1, 1))\\n    assert not v.is_valid(date(2015, 1, 1))\\n    assert not v.is_valid(\\'\\')\\n    assert not v.is_valid(0)\\n\\n\\ndef test_list():\\n    v = val.List()\\n    assert v.is_valid([])\\n    assert v.is_valid(())\\n    assert not v.is_valid(\\'\\')\\n    assert not v.is_valid(0)\\n\\n\\ndef test_null():\\n    v = val.Null()\\n    assert v.is_valid(None)\\n    assert not v.is_valid(\\'None\\')\\n    assert not v.is_valid(0)\\n    assert not v.is_valid(float(\\'nan\\'))\\n    assert not v.is_valid({})\\n\\ndef test_ip():\\n    v = val.Ip()\\n    assert v.is_valid(\\'192.168.1.1\\')\\n    assert v.is_valid(\\'192.168.1.255\\')\\n    assert v.is_valid(\\'192.168.3.1/24\\')\\n    assert v.is_valid(\\'2001:db8::\\')\\n    assert v.is_valid(\\'2001:db8::/64\\')\\n    assert not v.is_valid(\\'257.192.168.1\\')\\n    assert not v.is_valid(\\'192.168.1.256\\')\\n    assert not v.is_valid(\\'2001:db8::/129\\')\\n    assert not v.is_valid(\\'2001:dg8::/127\\')\\n    assert not v.is_valid(\\'asdf\\')\\n\\ndef test_mac():\\n    v = val.Mac()\\n    assert v.is_valid(\\'12:34:56:78:90:ab\\')\\n    assert v.is_valid(\\'1234:5678:90ab\\')\\n    assert v.is_valid(\\'12-34-56-78-90-ab\\')\\n    assert v.is_valid(\\'1234-5678-90ab\\')\\n\\n    assert v.is_valid(\\'12:34:56:78:90:AB\\')\\n    assert v.is_valid(\\'1234:5678:90AB\\')\\n    assert v.is_valid(\\'12-34-56-78-90-AB\\')\\n    assert v.is_valid(\\'1234-5678-90AB\\')\\n\\n    assert v.is_valid(\\'ab:cd:ef:12:34:56\\')\\n    assert v.is_valid(\\'abcd:ef12:3456\\')\\n    assert v.is_valid(\\'ab-cd-ef-12-34-56\\')\\n    assert v.is_valid(\\'abcd-ef12-3456\\')\\n\\n    assert v.is_valid(\\'AB:CD:EF:12:34:56\\')\\n    assert v.is_valid(\\'ABCD:EF12:3456\\')\\n    assert v.is_valid(\\'AB-CD-EF-12-34-56\\')\\n    assert v.is_valid(\\'ABCD-EF12-3456\\')\\n\\n    assert not v.is_valid(\\'qwertyuiop\\')\\n    assert not v.is_valid(\\'qw-er-ty-12-34-56\\')\\n    assert not v.is_valid(\\'ab:cd:ef:12:34:56:78\\')\\n    assert not v.is_valid(\\'abcdefghijkl\\')\\n    assert not v.is_valid(\\'1234567890ax\\')\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, "return_value": "'import re\\nfrom datetime import date, datetime\\nimport ipaddress\\nfrom .base import Validator\\nfrom . import constraints as con\\nfrom .. import util\\n\\n# ABCs for containers were moved to their own module\\ntry:\\n    from collections.abc import Sequence, Mapping\\nexcept ImportError:\\n    from collections import Sequence, Mapping\\n\\n\\nclass String(Validator):\\n    \"\"\"String validator\"\"\"\\n    tag = \\'str\\'\\n    constraints = [con.LengthMin,\\n                   con.LengthMax,\\n                   con.CharacterExclude,\\n                   con.StringEquals,\\n                   con.StringStartsWith,\\n                   con.StringEndsWith,\\n                   con.StringMatches]\\n\\n    def _is_valid(self, value):\\n        return util.isstr(value)\\n\\n\\nclass Number(Validator):\\n    \"\"\"Number/float validator\"\"\"\\n    value_type = float\\n    tag = \\'num\\'\\n    constraints = [con.Min, con.Max]\\n\\n    def _is_valid(self, value):\\n        return isinstance(value, (int, float)) and not isinstance(value, bool)\\n\\n\\nclass Integer(Validator):\\n    \"\"\"Integer validator\"\"\"\\n    value_type = int\\n    tag = \\'int\\'\\n    constraints = [con.Min, con.Max]\\n\\n    def _is_valid(self, value):\\n        return isinstance(value, int) and not isinstance(value, bool)\\n\\n\\nclass Boolean(Validator):\\n    \"\"\"Boolean validator\"\"\"\\n    tag = \\'bool\\'\\n\\n    def _is_valid(self, value):\\n        return isinstance(value, bool)\\n\\n\\nclass Enum(Validator):\\n    \"\"\"Enum validator\"\"\"\\n    tag = \\'enum\\'\\n\\n    def __init__(self, *args, **kwargs):\\n        super(Enum, self).__init__(*args, **kwargs)\\n        self.enums = args\\n\\n    def _is_valid(self, value):\\n        return value in self.enums\\n\\n    def fail(self, value):\\n        return \\'\\\\\\'%s\\\\\\' not in %s\\' % (value, self.enums)\\n\\n\\nclass Day(Validator):\\n    \"\"\"Day validator. Format: YYYY-MM-DD\"\"\"\\n    value_type = date\\n    tag = \\'day\\'\\n    constraints = [con.Min, con.Max]\\n\\n    def _is_valid(self, value):\\n        return isinstance(value, date)\\n\\n\\nclass Timestamp(Validator):\\n    \"\"\"Timestamp validator. Format: YYYY-MM-DD HH:MM:SS\"\"\"\\n    value_type = datetime\\n    tag = \\'timestamp\\'\\n    constraints = [con.Min, con.Max]\\n\\n    def _is_valid(self, value):\\n        return isinstance(value, datetime)\\n\\n\\nclass Map(Validator):\\n    \"\"\"Map and dict validator\"\"\"\\n    tag = \\'map\\'\\n    constraints = [con.LengthMin, con.LengthMax, con.Key]\\n\\n    def __init__(self, *args, **kwargs):\\n        super(Map, self).__init__(*args, **kwargs)\\n        self.validators = [val for val in args if isinstance(val, Validator)]\\n\\n    def _is_valid(self, value):\\n        return isinstance(value, Mapping)\\n\\n\\nclass List(Validator):\\n    \"\"\"List validator\"\"\"\\n    tag = \\'list\\'\\n    constraints = [con.LengthMin, con.LengthMax]\\n\\n    def __init__(self, *args, **kwargs):\\n        super(List, self).__init__(*args, **kwargs)\\n        self.validators = [val for val in args if isinstance(val, Validator)]\\n\\n    def _is_valid(self, value):\\n        return isinstance(value, Sequence) and not util.isstr(value)\\n\\n\\nclass Include(Validator):\\n    \"\"\"Include validator\"\"\"\\n    tag = \\'include\\'\\n\\n    def __init__(self, *args, **kwargs):\\n        self.include_name = args[0]\\n        self.strict = kwargs.pop(\\'strict\\', None)\\n        super(Include, self).__init__(*args, **kwargs)\\n\\n    def _is_valid(self, value):\\n        return True\\n\\n    def get_name(self):\\n        return self.include_name\\n\\n\\nclass Any(Validator):\\n    \"\"\"Any of several types validator\"\"\"\\n    tag = \\'any\\'\\n\\n    def __init__(self, *args, **kwargs):\\n        self.validators = [val for val in args if isinstance(val, Validator)]\\n        super(Any, self).__init__(*args, **kwargs)\\n\\n    def _is_valid(self, value):\\n        return True\\n\\nclass Subset(Validator):\\n    \"\"\"Subset of several types validator\"\"\"\\n    tag = \\'subset\\'\\n\\n    def __init__(self, *args, **kwargs):\\n        super(Subset, self).__init__(*args, **kwargs)\\n        self._allow_empty_set = bool(kwargs.pop(\\'allow_empty\\', False))\\n        self.validators = [val for val in args if isinstance(val, Validator)]\\n        if not self.validators:\\n            raise ValueError(\\'\\\\\\'%s\\\\\\' requires at least one validator!\\' % self.tag)\\n\\n    def _is_valid(self, value):\\n        return self.can_be_none or value is not None\\n\\n    def fail(self, value):\\n        # Called in case `_is_valid` returns False\\n        return \\'\\\\\\'%s\\\\\\' may not be an empty set.\\' % self.get_name()\\n\\n    @property\\n    def is_optional(self):\\n        return self._allow_empty_set\\n\\n    @property\\n    def can_be_none(self):\\n        return self._allow_empty_set\\n\\n\\nclass Null(Validator):\\n    \"\"\"Validates null\"\"\"\\n    value_type = None\\n    tag = \\'null\\'\\n\\n    def _is_valid(self, value):\\n        return value is None\\n\\n\\nclass Regex(Validator):\\n    \"\"\"Regular expression validator\"\"\"\\n    tag = \\'regex\\'\\n    _regex_flags = {\\'ignore_case\\': re.I, \\'multiline\\': re.M, \\'dotall\\': re.S}\\n\\n    def __init__(self, *args, **kwargs):\\n        self.regex_name = kwargs.pop(\\'name\\', None)\\n\\n        flags = 0\\n        for k, v in util.get_iter(self._regex_flags):\\n            flags |= v if kwargs.pop(k, False) else 0\\n\\n        self.regexes = [re.compile(arg, flags)\\n                        for arg in args if util.isstr(arg)]\\n        super(Regex, self).__init__(*args, **kwargs)\\n\\n    def _is_valid(self, value):\\n        return util.isstr(value) and any(r.match(value) for r in self.regexes)\\n\\n    def get_name(self):\\n        return self.regex_name or self.tag + \" match\"\\n\\n\\nclass Ip(Validator):\\n    \"\"\"IP address validator\"\"\"\\n    tag = \\'ip\\'\\n    constraints = [con.IpVersion]\\n\\n    def _is_valid(self, value):\\n        return self.ip_address(value)\\n\\n    def ip_address(self, value):\\n        try:\\n            ipaddress.ip_interface(util.to_unicode(value))\\n        except ValueError:\\n            return False\\n        return True\\n\\n\\nclass Mac(Regex):\\n    \"\"\"MAC address validator\"\"\"\\n    tag = \\'mac\\'\\n\\n    def __init__(self, *args, **kwargs):\\n        super(Mac, self).__init__(*args, **kwargs)\\n        self.regexes = [\\n            re.compile(\\n                \"[0-9a-fA-F]{2}([-:]?)[0-9a-fA-F]{2}(\\\\\\\\1[0-9a-fA-F]{2}){4}$\"),\\n            re.compile(\\n                \"[0-9a-fA-F]{4}([-:]?)[0-9a-fA-F]{4}(\\\\\\\\1[0-9a-fA-F]{4})$\"),\\n        ]\\n\\n\\nDefaultValidators = {}\\n\\nfor v in util.get_subclasses(Validator):\\n    # Allow validator nodes to contain either tags or actual name\\n    DefaultValidators[v.tag] = v\\n    DefaultValidators[v.__name__] = v\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, "return_value": "\"#!/usr/bin/env python\\nfrom .schema import Schema\\nfrom .yamale_error import YamaleError\\n\\n\\ndef make_schema(path=None, parser='PyYAML', validators=None, content=None):\\n    # validators = None means use default.\\n    # Import readers here so we can get version information in setup.py.\\n    from . import readers\\n    raw_schemas = readers.parse_yaml(path, parser, content=content)\\n    if not raw_schemas:\\n        raise ValueError('{} is an empty file!'.format(path))\\n    # First document is the base schema\\n    try:\\n        s = Schema(raw_schemas[0], path, validators=validators)\\n        # Additional documents contain Includes.\\n        for raw_schema in raw_schemas[1:]:\\n            s.add_include(raw_schema)\\n    except (TypeError, SyntaxError) as e:\\n        error = 'Schema error in file %s\\\\n' % path\\n        error += str(e)\\n        raise SyntaxError(error)\\n\\n    return s\\n\\n\\ndef make_data(path=None, parser='PyYAML', content=None):\\n    from . import readers\\n    raw_data = readers.parse_yaml(path, parser, content=content)\\n    if len(raw_data) == 0:\\n        return [({}, path)]\\n    return [(d, path) for d in raw_data]\\n\\n\\ndef validate(schema, data, strict=True, _raise_error=True):\\n    results = []\\n    is_valid = True\\n    for d, path in data:\\n        result = schema.validate(d, path, strict)\\n        results.append(result)\\n        is_valid = is_valid and result.isValid()\\n    if _raise_error and not is_valid:\\n        raise YamaleError(results)\\n    return results\\n\""}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, "return_value": "\"class YamaleError(ValueError):\\n    def __init__(self, results):\\n        super(YamaleError, self).__init__('\\\\n'.join([str(x) for x in list(filter(lambda x: not x.isValid(), results))]))\\n        self.message = self.args[0]\\n        self.results = results\\n\""}, {"func_args": {"filename": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, "return_value": "'import glob\\nimport os\\nimport itertools\\n\\nfrom unittest import TestCase\\n\\nimport yamale\\n\\n\\nclass YamaleTestCase(TestCase):\\n    \"\"\" TestCase for easily validating YAML in your own tests.\\n    `schema`: String of path to the schema file to use. One schema file per test case.\\n    `yaml`: String or list of yaml files to validate. Accepts globs.\\n    `base_dir`: String path to prepend to all other paths. This is optional.\\n    \"\"\"\\n\\n    schema = None\\n    yaml = None\\n    base_dir = None\\n\\n    def validate(self, validators=None):\\n        schema = self.schema\\n        yaml = self.yaml\\n        base_dir = self.base_dir\\n\\n        if schema is None:\\n            return\\n\\n        if type(yaml) != list:\\n            yaml = [yaml]\\n\\n        if base_dir is not None:\\n            schema = os.path.join(base_dir, schema)\\n            yaml = {os.path.join(base_dir, y) for y in yaml}\\n\\n        # Run yaml through glob and flatten list\\n        yaml = set(itertools.chain(*map(glob.glob, yaml)))\\n\\n        # Remove schema from set of data files\\n        yaml = yaml - {schema}\\n\\n        yamale_schema = yamale.make_schema(schema, validators=validators)\\n        yamale_data = itertools.chain(*map(yamale.make_data, yaml))\\n\\n        for result in yamale.validate(yamale_schema, yamale_data):\\n            if not result.isValid():\\n                raise ValueError(result)\\n        return True\\n\\n'"}]}, "to_unicode": {"line": 21, "args": [{"func_args": {"s": "'192.168.1.3/24'"}, "return_value": "'192.168.1.3/24'"}, {"func_args": {"s": "'2001::db8/64'"}, "return_value": "'2001::db8/64'"}, {"func_args": {"s": "'192.168.3.1'"}, "return_value": "'192.168.3.1'"}, {"func_args": {"s": "'192.168.3.1'"}, "return_value": "'192.168.3.1'"}, {"func_args": {"s": "'2002::db8'"}, "return_value": "'2002::db8'"}, {"func_args": {"s": "'2002::db8'"}, "return_value": "'2002::db8'"}, {"func_args": {"s": "'192.168.1.1'"}, "return_value": "'192.168.1.1'"}, {"func_args": {"s": "'192.168.1.1'"}, "return_value": "'192.168.1.1'"}, {"func_args": {"s": "'192.168.1.255'"}, "return_value": "'192.168.1.255'"}, {"func_args": {"s": "'192.168.1.255'"}, "return_value": "'192.168.1.255'"}, {"func_args": {"s": "'192.168.3.1/24'"}, "return_value": "'192.168.3.1/24'"}, {"func_args": {"s": "'192.168.3.1/24'"}, "return_value": "'192.168.3.1/24'"}, {"func_args": {"s": "'2001:db8::'"}, "return_value": "'2001:db8::'"}, {"func_args": {"s": "'2001:db8::'"}, "return_value": "'2001:db8::'"}, {"func_args": {"s": "'2001:db8::/64'"}, "return_value": "'2001:db8::/64'"}, {"func_args": {"s": "'2001:db8::/64'"}, "return_value": "'2001:db8::/64'"}, {"func_args": {"s": "'192.168.1.1'"}, "return_value": "'192.168.1.1'"}, {"func_args": {"s": "'192.168.1.1'"}, "return_value": "'192.168.1.1'"}, {"func_args": {"s": "'192.168.1.255'"}, "return_value": "'192.168.1.255'"}, {"func_args": {"s": "'192.168.1.255'"}, "return_value": "'192.168.1.255'"}, {"func_args": {"s": "'192.168.3.1/24'"}, "return_value": "'192.168.3.1/24'"}, {"func_args": {"s": "'192.168.3.1/24'"}, "return_value": "'192.168.3.1/24'"}, {"func_args": {"s": "'2001:db8::'"}, "return_value": "'2001:db8::'"}, {"func_args": {"s": "'2001:db8::'"}, "return_value": "'2001:db8::'"}, {"func_args": {"s": "'2001:db8::/64'"}, "return_value": "'2001:db8::/64'"}, {"func_args": {"s": "'2001:db8::/64'"}, "return_value": "'2001:db8::/64'"}, {"func_args": {"s": "'192.168.1.1'"}, "return_value": "'192.168.1.1'"}, {"func_args": {"s": "'192.168.1.255'"}, "return_value": "'192.168.1.255'"}, {"func_args": {"s": "'192.168.3.1/24'"}, "return_value": "'192.168.3.1/24'"}, {"func_args": {"s": "'2001:db8::'"}, "return_value": "'2001:db8::'"}, {"func_args": {"s": "'2001:db8::/64'"}, "return_value": "'2001:db8::/64'"}, {"func_args": {"s": "'257.192.168.1'"}, "return_value": "'257.192.168.1'"}, {"func_args": {"s": "'192.168.1.256'"}, "return_value": "'192.168.1.256'"}, {"func_args": {"s": "'2001:db8::/129'"}, "return_value": "'2001:db8::/129'"}, {"func_args": {"s": "'2001:dg8::/127'"}, "return_value": "'2001:dg8::/127'"}, {"func_args": {"s": "'asdf'"}, "return_value": "'asdf'"}], "text": "def to_unicode(s):\n        return s"}, "_internal_validate": {"line": 192, "args": [{"func_args": {"internal_data": "1"}, "return_value": "[]"}, {"func_args": {"internal_data": "'foo'"}, "return_value": "[]"}, {"func_args": {"internal_data": "1"}, "return_value": "[]"}, {"func_args": {"internal_data": "[1]"}, "return_value": "[\"subset_list: '[1]' is not a int.\", \"subset_list: '[1]' is not a str.\"]"}, {"func_args": {"internal_data": "'foo'"}, "return_value": "[]"}, {"func_args": {"internal_data": "{'a': 1}"}, "return_value": "[\"subset_list: '{'a': 1}' is not a int.\", \"subset_list: '{'a': 1}' is not a str.\"]"}], "text": "def _internal_validate(internal_data):\n            sub_errors = []\n            for val in validator.validators:\n                err = self._validate(val, internal_data, path, strict)\n                if not err:\n                    break\n                sub_errors += err\n            else:\n                return sub_errors\n            return []"}, "_find_schema": {"line": 49, "args": [{"func_args": {"data_path": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls'", "schema_name": "'schema.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/schema.yaml'"}, {"func_args": {"data_path": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/bad.yaml'", "schema_name": "'schema.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/schema.yaml'"}, {"func_args": {"data_path": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls'", "schema_name": "'schema.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/schema.yaml'"}, {"func_args": {"data_path": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/bad.yaml'", "schema_name": "'schema.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/schema.yaml'"}, {"func_args": {"data_path": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls'", "schema_name": "'schema.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/schema.yaml'"}, {"func_args": {"data_path": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/bad.yaml'", "schema_name": "'schema.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/schema.yaml'"}, {"func_args": {"data_path": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls'", "schema_name": "'required_keys_schema.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/required_keys_schema.yaml'"}, {"func_args": {"data_path": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/required_keys_bad.yaml'", "schema_name": "'required_keys_schema.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/required_keys_schema.yaml'"}, {"func_args": {"data_path": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls'", "schema_name": "'required_keys_schema.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/required_keys_schema.yaml'"}, {"func_args": {"data_path": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/required_keys_bad.yaml'", "schema_name": "'required_keys_schema.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/required_keys_schema.yaml'"}, {"func_args": {"data_path": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls'", "schema_name": "'required_keys_schema.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/required_keys_schema.yaml'"}, {"func_args": {"data_path": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/required_keys_bad.yaml'", "schema_name": "'required_keys_schema.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/required_keys_schema.yaml'"}, {"func_args": {"data_path": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls'", "schema_name": "'schema.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/schema.yaml'"}, {"func_args": {"data_path": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/good.yaml'", "schema_name": "'schema.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/schema.yaml'"}, {"func_args": {"data_path": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls'", "schema_name": "'schema.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/schema.yaml'"}, {"func_args": {"data_path": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/good.yaml'", "schema_name": "'schema.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/schema.yaml'"}, {"func_args": {"data_path": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls'", "schema_name": "'schema.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/schema.yaml'"}, {"func_args": {"data_path": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/good.yaml'", "schema_name": "'schema.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/schema.yaml'"}, {"func_args": {"data_path": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/good.yaml'", "schema_name": "'../schema_dir/external.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/../schema_dir/external.yaml'"}, {"func_args": {"data_path": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/good.yaml'", "schema_name": "'../schema_dir/external.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/../schema_dir/external.yaml'"}, {"func_args": {"data_path": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/good.yaml'", "schema_name": "'../schema_dir/external.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/../schema_dir/external.yaml'"}, {"func_args": {"data_path": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/good.yaml'", "schema_name": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/schema_dir/ex*.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/schema_dir/external.yaml'"}, {"func_args": {"data_path": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/good.yaml'", "schema_name": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/schema_dir/ex*.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/schema_dir/external.yaml'"}, {"func_args": {"data_path": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/good.yaml'", "schema_name": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/schema_dir/ex*.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/schema_dir/external.yaml'"}, {"func_args": {"data_path": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/empty_schema/data.yaml'", "schema_name": "'empty_schema.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/empty_schema/empty_schema.yaml'"}, {"func_args": {"data_path": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/good.yaml'", "schema_name": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/schema_dir/external.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/schema_dir/external.yaml'"}, {"func_args": {"data_path": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls'", "schema_name": "'schema.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/schema.yaml'"}, {"func_args": {"data_path": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/good.yaml'", "schema_name": "'schema.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/schema.yaml'"}, {"func_args": {"data_path": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls'", "schema_name": "'schema.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/schema.yaml'"}, {"func_args": {"data_path": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/bad.yaml'", "schema_name": "'schema.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/schema.yaml'"}, {"func_args": {"data_path": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls'", "schema_name": "'schema.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/schema.yaml'"}, {"func_args": {"data_path": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/required_keys_bad.yaml'", "schema_name": "'schema.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/schema.yaml'"}, {"func_args": {"data_path": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls'", "schema_name": "'schema.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/schema.yaml'"}, {"func_args": {"data_path": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/required_keys_extra_element.yaml'", "schema_name": "'schema.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/schema.yaml'"}, {"func_args": {"data_path": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls'", "schema_name": "'required_keys_schema.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/required_keys_schema.yaml'"}, {"func_args": {"data_path": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/required_keys_extra_element.yaml'", "schema_name": "'required_keys_schema.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/required_keys_schema.yaml'"}, {"func_args": {"data_path": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/nested_issue_54.yaml'", "schema_name": "'nested.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/nested.yaml'"}, {"func_args": {"data_path": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/nestedYaml/anotherLevel/good.yaml'", "schema_name": "'schema.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/nestedYaml/anotherLevel/schema.yaml'"}], "text": "def _find_schema(data_path, schema_name):\n    \"\"\" Checks if `schema_name` is a valid file, if not\n    searches in `data_path` for it. \"\"\"\n\n    directory = os.path.dirname(data_path)\n    path = glob.glob(os.path.join(directory, schema_name))\n    for p in path:\n        if os.path.isfile(p):\n            return p\n\n    return _find_data_path_schema(data_path, schema_name)"}, "_find_data_path_schema": {"line": 37, "args": [{"func_args": {"data_path": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/bad.yaml'", "schema_name": "'schema.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/schema.yaml'"}, {"func_args": {"data_path": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/bad.yaml'", "schema_name": "'schema.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/schema.yaml'"}, {"func_args": {"data_path": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/bad.yaml'", "schema_name": "'schema.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/schema.yaml'"}, {"func_args": {"data_path": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/required_keys_bad.yaml'", "schema_name": "'required_keys_schema.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/required_keys_schema.yaml'"}, {"func_args": {"data_path": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/required_keys_bad.yaml'", "schema_name": "'required_keys_schema.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/required_keys_schema.yaml'"}, {"func_args": {"data_path": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/required_keys_bad.yaml'", "schema_name": "'required_keys_schema.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/required_keys_schema.yaml'"}, {"func_args": {"data_path": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/good.yaml'", "schema_name": "'schema.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/schema.yaml'"}, {"func_args": {"data_path": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/good.yaml'", "schema_name": "'schema.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/schema.yaml'"}, {"func_args": {"data_path": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/good.yaml'", "schema_name": "'schema.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/schema.yaml'"}, {"func_args": {"data_path": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/good.yaml'", "schema_name": "'schema.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/schema.yaml'"}, {"func_args": {"data_path": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/bad.yaml'", "schema_name": "'schema.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/schema.yaml'"}, {"func_args": {"data_path": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/required_keys_bad.yaml'", "schema_name": "'schema.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/schema.yaml'"}, {"func_args": {"data_path": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/required_keys_extra_element.yaml'", "schema_name": "'schema.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/schema.yaml'"}, {"func_args": {"data_path": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/required_keys_extra_element.yaml'", "schema_name": "'required_keys_schema.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/required_keys_schema.yaml'"}], "text": "def _find_data_path_schema(data_path, schema_name):\n    \"\"\" Starts in the data file folder and recursively looks\n    in parents for `schema_name` \"\"\"\n    if not data_path or data_path == os.path.abspath(os.sep) or data_path == '.':\n        return None\n    directory = os.path.dirname(data_path)\n    path = glob.glob(os.path.join(directory, schema_name))\n    if not path:\n        return _find_schema(directory, schema_name)\n    return path[0]"}, "_to_blob": {"line": 21, "args": [{"func_args": {"b": "b'\\x00\\x00\\x00\\x1f\\x0c'"}, "return_value": "b'\\x00\\x00\\x00\\x1f\\x0c'"}, {"func_args": {"b": "b'\\x00\\xce\\x02q\\xf1\\x17'"}, "return_value": "b'\\x00\\xce\\x02q\\xf1\\x17'"}, {"func_args": {"b": "b'\\xc0\\t\\x00\\x98\\x0e'"}, "return_value": "b'\\xc0\\t\\x00\\x98\\x0e'"}, {"func_args": {"b": "b'\\x00\\xc0O\\x00|\\xcf\\xc0\\x01\\x0f\\x10\\xc0WhY\\x92\\xa4\\xc7\\x9f\\xf2\\x0b\\x01\\x00\\x00\\x00\\x00\\x00\\x00h\\x01'"}, "return_value": "b'\\x00\\xc0O\\x00|\\xcf\\xc0\\x01\\x0f\\x10\\xc0WhY\\x92\\xa4\\xc7\\x9f\\xf2\\x0b\\x01\\x00\\x00\\x00\\x00\\x00\\x00h\\x01'"}, {"func_args": {"b": "b'\\x90\\x13'"}, "return_value": "b'\\x90\\x13'"}, {"func_args": {"b": "b'\\x00\\x00\\x10\\x88\\x18\\x0c'"}, "return_value": "b'\\x00\\x00\\x10\\x88\\x18\\x0c'"}, {"func_args": {"b": "b'\\x00\\x98\\xec5\\xe0\\x1d'"}, "return_value": "b'\\x00\\x98\\xec5\\xe0\\x1d'"}, {"func_args": {"b": "b'\\x80I\\xce\\x03\\x00  \\xcfA '"}, "return_value": "b'\\x80I\\xce\\x03\\x00  \\xcfA '"}, {"func_args": {"b": "b'\\x00\\x009\\x0f\\x00\\x00\\x0c\\x00\\x0c\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x80\\x0b'"}, "return_value": "b'\\x00\\x009\\x0f\\x00\\x00\\x0c\\x00\\x0c\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x80\\x0b'"}, {"func_args": {"b": "b'\\x00\\x00\\x00\\x08\\x00\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x98'"}, "return_value": "b'\\x00\\x00\\x00\\x08\\x00\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x98'"}, {"func_args": {"b": "b'\\x08\\xc2\\x01'"}, "return_value": "b'\\x08\\xc2\\x01'"}, {"func_args": {"b": "b'\\x0e'"}, "return_value": "b'\\x0e'"}, {"func_args": {"b": "b'L\\xde~\\xf9\\xf9\\x1f'"}, "return_value": "b'L\\xde~\\xf9\\xf9\\x1f'"}, {"func_args": {"b": "b'\\x02'"}, "return_value": "b'\\x02'"}, {"func_args": {"b": "b'\\x9e\\xe1O_|\\xef\\xed\\x05\\xdfV\\xc0\\xd7k\\xdb\\xd6\\xa5\\xdf\\xdf\\xf6k\\x9d\\xef\\xfaZ\\xff\\x96\\xbfm\\x01'"}, "return_value": "b'\\x9e\\xe1O_|\\xef\\xed\\x05\\xdfV\\xc0\\xd7k\\xdb\\xd6\\xa5\\xdf\\xdf\\xf6k\\x9d\\xef\\xfaZ\\xff\\x96\\xbfm\\x01'"}, {"func_args": {"b": "b'\\xda['"}, "return_value": "b'\\xda['"}, {"func_args": {"b": "b'n\\xf3\\xcd\\x7f'"}, "return_value": "b'n\\xf3\\xcd\\x7f'"}, {"func_args": {"b": "b'\\x02'"}, "return_value": "b'\\x02'"}, {"func_args": {"b": "b'j\\xfa\\xed\\xbf\\xf1\\xfd\\x01'"}, "return_value": "b'j\\xfa\\xed\\xbf\\xf1\\xfd\\x01'"}, {"func_args": {"b": "b'\\x06'"}, "return_value": "b'\\x06'"}, {"func_args": {"b": "b'\\xdeI\\xee\\x9b[\\xb1 \\xcfW\\xab\\xf4'"}, "return_value": "b'\\xdeI\\xee\\x9b[\\xb1 \\xcfW\\xab\\xf4'"}, {"func_args": {"b": "b'~\\x86\\xff\\xcd7\\xdf\\xdc\\xdcm\\xbe\\xf9\\xe6\\xdd\\xbc\\x9b{\\x8b\\xbb\\xddou\\xe7\\xcd\\xdb\\xdd\\xe6\\xed\\xe7\\xfe\\xa8\\x01'"}, "return_value": "b'~\\x86\\xff\\xcd7\\xdf\\xdc\\xdcm\\xbe\\xf9\\xe6\\xdd\\xbc\\x9b{\\x8b\\xbb\\xddou\\xe7\\xcd\\xdb\\xdd\\xe6\\xed\\xe7\\xfe\\xa8\\x01'"}, {"func_args": {"b": "b'\\xde\\xb9\\xbdO\\xd5\\rn\\xc5n\\xb3\\xdb\\xdc\\xe66\\xf7}\\xaeS\\xcdu\\xae\\x9a\\xeb\\\\5\\xd7\\xeb1\\xd7\\xc3\\xbd\\xe6N\\x03'"}, "return_value": "b'\\xde\\xb9\\xbdO\\xd5\\rn\\xc5n\\xb3\\xdb\\xdc\\xe66\\xf7}\\xaeS\\xcdu\\xae\\x9a\\xeb\\\\5\\xd7\\xeb1\\xd7\\xc3\\xbd\\xe6N\\x03'"}, {"func_args": {"b": "b'\\x0c\\x06\\xdc\\xcc|.\\x01\\xc0D1\\x03'"}, "return_value": "b'\\x0c\\x06\\xdc\\xcc|.\\x01\\xc0D1\\x03'"}, {"func_args": {"b": "b'>'"}, "return_value": "b'>'"}, {"func_args": {"b": "b\"\\xae\\x0c\\xeee'm\\x01\""}, "return_value": "b\"\\xae\\x0c\\xeee'm\\x01\""}, {"func_args": {"b": "b'\\n'"}, "return_value": "b'\\n'"}, {"func_args": {"b": "b'\\xe6\\xc9s\\x9c/'"}, "return_value": "b'\\xe6\\xc9s\\x9c/'"}, {"func_args": {"b": "b'\\x02'"}, "return_value": "b'\\x02'"}, {"func_args": {"b": "b'.\\x0f'"}, "return_value": "b'.\\x0f'"}, {"func_args": {"b": "b'\\xde\\xf37\\x9f?\\xcf\\x03'"}, "return_value": "b'\\xde\\xf37\\x9f?\\xcf\\x03'"}, {"func_args": {"b": "b'r'"}, "return_value": "b'r'"}, {"func_args": {"b": "b'\\x02'"}, "return_value": "b'\\x02'"}, {"func_args": {"b": "b'\\x1a\\xe6\\xffi9\\x07'"}, "return_value": "b'\\x1a\\xe6\\xffi9\\x07'"}, {"func_args": {"b": "b'j\\xe5\\xcf\\x9f\\xcf\\xe7\\xf3y>\\x7f\\xfe\\x7f\\x03'"}, "return_value": "b'j\\xe5\\xcf\\x9f\\xcf\\xe7\\xf3y>\\x7f\\xfe\\x7f\\x03'"}, {"func_args": {"b": "b'\\x10\\xf8\\x95\\xffNz\\xc4\\x97\\x97\\xff\\x8f\\xff\\xf3\\x12\\x00\\x00\\x02'"}, "return_value": "b'\\x10\\xf8\\x95\\xffNz\\xc4\\x97\\x97\\xff\\x8f\\xff\\xf3\\x12\\x00\\x00\\x02'"}, {"func_args": {"b": "b'\\xde\\x9e\\xe7y>\\x9f\\xe7\\x9c\\xf3<\\xcf9\\xcf\\xf3<\\xcf\\xf3\\xfc<\\x7f\\x9e\\xf9\\xff\\xbc\\x94\\xf9|f\\xfe\\xd7\\xccl3\\xf3y\\x9e{>??\\x9f\\xcf\\xe7\\xf3y\\xe7ww\\xef\\xde]\\xdf\\xef=\\xb8\\xe7\\x03'"}, "return_value": "b'\\xde\\x9e\\xe7y>\\x9f\\xe7\\x9c\\xf3<\\xcf9\\xcf\\xf3<\\xcf\\xf3\\xfc<\\x7f\\x9e\\xf9\\xff\\xbc\\x94\\xf9|f\\xfe\\xd7\\xccl3\\xf3y\\x9e{>??\\x9f\\xcf\\xe7\\xf3y\\xe7ww\\xef\\xde]\\xdf\\xef=\\xb8\\xe7\\x03'"}, {"func_args": {"b": "b'\\x9e\\xbcy\\xf35\\x00\\xde\\xbc\\xe7=o\\xde'"}, "return_value": "b'\\x9e\\xbcy\\xf35\\x00\\xde\\xbc\\xe7=o\\xde'"}, {"func_args": {"b": "b'\\x02'"}, "return_value": "b'\\x02'"}, {"func_args": {"b": "b'\\xe6\\xf3\\xf9|>\\x9f\\xcf\\xe7\\xf3\\xf9\\xfc|~\\xbe\\xef>\\x9f?\\x7f\\x7f'"}, "return_value": "b'\\xe6\\xf3\\xf9|>\\x9f\\xcf\\xe7\\xf3\\xf9\\xfc|~\\xbe\\xef>\\x9f?\\x7f\\x7f'"}, {"func_args": {"b": "b'&\\xe6\\xf3y~\\xbf\\xfb|~~~~\\xfe\\xfe\\xdf\\xef\\xbd\\xf7\\x01'"}, "return_value": "b'&\\xe6\\xf3y~\\xbf\\xfb|~~~~\\xfe\\xfe\\xdf\\xef\\xbd\\xf7\\x01'"}, {"func_args": {"b": "b'L\\xde~\\xf9\\xf9\\x1f'"}, "return_value": "b'L\\xde~\\xf9\\xf9\\x1f'"}, {"func_args": {"b": "b'\\x9e\\xe1O_|\\xef\\xed\\x05\\xdfV\\xc0\\xd7k\\xdb\\xd6\\xa5\\xdf\\xdf\\xf6k\\x9d\\xef\\xfaZ\\xff\\x96\\xbfm\\x01'"}, "return_value": "b'\\x9e\\xe1O_|\\xef\\xed\\x05\\xdfV\\xc0\\xd7k\\xdb\\xd6\\xa5\\xdf\\xdf\\xf6k\\x9d\\xef\\xfaZ\\xff\\x96\\xbfm\\x01'"}, {"func_args": {"b": "b'\\xda['"}, "return_value": "b'\\xda['"}, {"func_args": {"b": "b'n\\xf3\\xcd\\x7f'"}, "return_value": "b'n\\xf3\\xcd\\x7f'"}, {"func_args": {"b": "b'j\\xfa\\xed\\xbf\\xf1\\xfd\\x01'"}, "return_value": "b'j\\xfa\\xed\\xbf\\xf1\\xfd\\x01'"}, {"func_args": {"b": "b'\\xdeI\\xee\\x9b[\\xb1 \\xcfW\\xab\\xf4'"}, "return_value": "b'\\xdeI\\xee\\x9b[\\xb1 \\xcfW\\xab\\xf4'"}, {"func_args": {"b": "b'~\\x86\\xff\\xcd7\\xdf\\xdc\\xdcm\\xbe\\xf9\\xe6\\xdd\\xbc\\x9b{\\x8b\\xbb\\xddou\\xe7\\xcd\\xdb\\xdd\\xe6\\xed\\xe7\\xfe\\xa8\\x01'"}, "return_value": "b'~\\x86\\xff\\xcd7\\xdf\\xdc\\xdcm\\xbe\\xf9\\xe6\\xdd\\xbc\\x9b{\\x8b\\xbb\\xddou\\xe7\\xcd\\xdb\\xdd\\xe6\\xed\\xe7\\xfe\\xa8\\x01'"}, {"func_args": {"b": "b'\\xde\\xb9\\xbdO\\xd5\\rn\\xc5n\\xb3\\xdb\\xdc\\xe66\\xf7}\\xaeS\\xcdu\\xae\\x9a\\xeb\\\\5\\xd7\\xeb1\\xd7\\xc3\\xbd\\xe6N\\x03'"}, "return_value": "b'\\xde\\xb9\\xbdO\\xd5\\rn\\xc5n\\xb3\\xdb\\xdc\\xe66\\xf7}\\xaeS\\xcdu\\xae\\x9a\\xeb\\\\5\\xd7\\xeb1\\xd7\\xc3\\xbd\\xe6N\\x03'"}, {"func_args": {"b": "b'\\x0c\\x06\\xdc\\xcc|.\\x01\\xc0D1\\x03'"}, "return_value": "b'\\x0c\\x06\\xdc\\xcc|.\\x01\\xc0D1\\x03'"}, {"func_args": {"b": "b'\\xe6\\xc9s\\x9c/'"}, "return_value": "b'\\xe6\\xc9s\\x9c/'"}, {"func_args": {"b": "b'\\x10\\xf8\\x95\\xffNz\\xc4\\x97\\x97\\xff\\x8f\\xff\\xf3\\x12\\x00\\x00\\x02'"}, "return_value": "b'\\x10\\xf8\\x95\\xffNz\\xc4\\x97\\x97\\xff\\x8f\\xff\\xf3\\x12\\x00\\x00\\x02'"}, {"func_args": {"b": "b'\\x10\\xf8\\x95\\xffNz\\xc4\\x97\\x97\\xff\\x8f\\xff\\xf3\\x12\\x00\\x00\\x02'"}, "return_value": "b'\\x10\\xf8\\x95\\xffNz\\xc4\\x97\\x97\\xff\\x8f\\xff\\xf3\\x12\\x00\\x00\\x02'"}, {"func_args": {"b": "b'L\\xde~\\xf9\\xf9\\x1f'"}, "return_value": "b'L\\xde~\\xf9\\xf9\\x1f'"}, {"func_args": {"b": "b'\\xe6\\xc9s\\x9c/'"}, "return_value": "b'\\xe6\\xc9s\\x9c/'"}, {"func_args": {"b": "b'\\x9e\\xe1O_|\\xef\\xed\\x05\\xdfV\\xc0\\xd7k\\xdb\\xd6\\xa5\\xdf\\xdf\\xf6k\\x9d\\xef\\xfaZ\\xff\\x96\\xbfm\\x01'"}, "return_value": "b'\\x9e\\xe1O_|\\xef\\xed\\x05\\xdfV\\xc0\\xd7k\\xdb\\xd6\\xa5\\xdf\\xdf\\xf6k\\x9d\\xef\\xfaZ\\xff\\x96\\xbfm\\x01'"}, {"func_args": {"b": "b'\\xda['"}, "return_value": "b'\\xda['"}, {"func_args": {"b": "b'\\x0c\\x06\\xdc\\xcc|.\\x01\\xc0D1\\x03'"}, "return_value": "b'\\x0c\\x06\\xdc\\xcc|.\\x01\\xc0D1\\x03'"}, {"func_args": {"b": "b'\\xdeI\\xee\\x9b[\\xb1 \\xcfW\\xab\\xf4'"}, "return_value": "b'\\xdeI\\xee\\x9b[\\xb1 \\xcfW\\xab\\xf4'"}, {"func_args": {"b": "b'\\xde\\xb9\\xbdO\\xd5\\rn\\xc5n\\xb3\\xdb\\xdc\\xe66\\xf7}\\xaeS\\xcdu\\xae\\x9a\\xeb\\\\5\\xd7\\xeb1\\xd7\\xc3\\xbd\\xe6N\\x03'"}, "return_value": "b'\\xde\\xb9\\xbdO\\xd5\\rn\\xc5n\\xb3\\xdb\\xdc\\xe66\\xf7}\\xaeS\\xcdu\\xae\\x9a\\xeb\\\\5\\xd7\\xeb1\\xd7\\xc3\\xbd\\xe6N\\x03'"}, {"func_args": {"b": "b'~\\x86\\xff\\xcd7\\xdf\\xdc\\xdcm\\xbe\\xf9\\xe6\\xdd\\xbc\\x9b{\\x8b\\xbb\\xddou\\xe7\\xcd\\xdb\\xdd\\xe6\\xed\\xe7\\xfe\\xa8\\x01'"}, "return_value": "b'~\\x86\\xff\\xcd7\\xdf\\xdc\\xdcm\\xbe\\xf9\\xe6\\xdd\\xbc\\x9b{\\x8b\\xbb\\xddou\\xe7\\xcd\\xdb\\xdd\\xe6\\xed\\xe7\\xfe\\xa8\\x01'"}, {"func_args": {"b": "b'n\\xf3\\xcd\\x7f'"}, "return_value": "b'n\\xf3\\xcd\\x7f'"}, {"func_args": {"b": "b'\\x10\\xf8\\x95\\xffNz\\xc4\\x97\\x97\\xff\\x8f\\xff\\xf3\\x12\\x00\\x00\\x02'"}, "return_value": "b'\\x10\\xf8\\x95\\xffNz\\xc4\\x97\\x97\\xff\\x8f\\xff\\xf3\\x12\\x00\\x00\\x02'"}, {"func_args": {"b": "b'L\\xde~\\xf9\\xf9\\x1f'"}, "return_value": "b'L\\xde~\\xf9\\xf9\\x1f'"}, {"func_args": {"b": "b'\\xe6\\xc9s\\x9c/'"}, "return_value": "b'\\xe6\\xc9s\\x9c/'"}, {"func_args": {"b": "b'\\x9e\\xe1O_|\\xef\\xed\\x05\\xdfV\\xc0\\xd7k\\xdb\\xd6\\xa5\\xdf\\xdf\\xf6k\\x9d\\xef\\xfaZ\\xff\\x96\\xbfm\\x01'"}, "return_value": "b'\\x9e\\xe1O_|\\xef\\xed\\x05\\xdfV\\xc0\\xd7k\\xdb\\xd6\\xa5\\xdf\\xdf\\xf6k\\x9d\\xef\\xfaZ\\xff\\x96\\xbfm\\x01'"}, {"func_args": {"b": "b'\\xda['"}, "return_value": "b'\\xda['"}, {"func_args": {"b": "b'\\x0c\\x06\\xdc\\xcc|.\\x01\\xc0D1\\x03'"}, "return_value": "b'\\x0c\\x06\\xdc\\xcc|.\\x01\\xc0D1\\x03'"}, {"func_args": {"b": "b'\\xdeI\\xee\\x9b[\\xb1 \\xcfW\\xab\\xf4'"}, "return_value": "b'\\xdeI\\xee\\x9b[\\xb1 \\xcfW\\xab\\xf4'"}, {"func_args": {"b": "b'~\\x86\\xff\\xcd7\\xdf\\xdc\\xdcm\\xbe\\xf9\\xe6\\xdd\\xbc\\x9b{\\x8b\\xbb\\xddou\\xe7\\xcd\\xdb\\xdd\\xe6\\xed\\xe7\\xfe\\xa8\\x01'"}, "return_value": "b'~\\x86\\xff\\xcd7\\xdf\\xdc\\xdcm\\xbe\\xf9\\xe6\\xdd\\xbc\\x9b{\\x8b\\xbb\\xddou\\xe7\\xcd\\xdb\\xdd\\xe6\\xed\\xe7\\xfe\\xa8\\x01'"}, {"func_args": {"b": "b'\\xde\\xb9\\xbdO\\xd5\\rn\\xc5n\\xb3\\xdb\\xdc\\xe66\\xf7}\\xaeS\\xcdu\\xae\\x9a\\xeb\\\\5\\xd7\\xeb1\\xd7\\xc3\\xbd\\xe6N\\x03'"}, "return_value": "b'\\xde\\xb9\\xbdO\\xd5\\rn\\xc5n\\xb3\\xdb\\xdc\\xe66\\xf7}\\xaeS\\xcdu\\xae\\x9a\\xeb\\\\5\\xd7\\xeb1\\xd7\\xc3\\xbd\\xe6N\\x03'"}, {"func_args": {"b": "b'n\\xf3\\xcd\\x7f'"}, "return_value": "b'n\\xf3\\xcd\\x7f'"}, {"func_args": {"b": "b'\\x00\\x00\\x00\\x07\\x0c'"}, "return_value": "b'\\x00\\x00\\x00\\x07\\x0c'"}, {"func_args": {"b": "b'\\x00\\x00\\x00p\\xf1\\x17'"}, "return_value": "b'\\x00\\x00\\x00p\\xf1\\x17'"}, {"func_args": {"b": "b'\\xc0\\t\\x00\\x98\\x0e'"}, "return_value": "b'\\xc0\\t\\x00\\x98\\x0e'"}, {"func_args": {"b": "b'\\x00\\x00\\x00\\x00\\x00\\x00\\xc0\\x01\\x0f\\x10\\xc0WhY\\x92\\xa4\\xc7\\x9f\\xf2k\\x01\\x00\\x00\\x00\\x00\\x00\\x00h\\x01'"}, "return_value": "b'\\x00\\x00\\x00\\x00\\x00\\x00\\xc0\\x01\\x0f\\x10\\xc0WhY\\x92\\xa4\\xc7\\x9f\\xf2k\\x01\\x00\\x00\\x00\\x00\\x00\\x00h\\x01'"}, {"func_args": {"b": "b'\\x90\\x13'"}, "return_value": "b'\\x90\\x13'"}, {"func_args": {"b": "b'\\x00\\x00\\x10\\x88\\x18\\x0c'"}, "return_value": "b'\\x00\\x00\\x10\\x88\\x18\\x0c'"}, {"func_args": {"b": "b'\\x00\\x00\\x00\\x00\\x00  \\xcfA '"}, "return_value": "b'\\x00\\x00\\x00\\x00\\x00  \\xcfA '"}, {"func_args": {"b": "b'\\x00\\x00\\x00\\x08\\x00\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x80'"}, "return_value": "b'\\x00\\x00\\x00\\x08\\x00\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x80'"}, {"func_args": {"b": "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x0c'"}, "return_value": "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x0c'"}, {"func_args": {"b": "b'\\x08\\xc2\\x01'"}, "return_value": "b'\\x08\\xc2\\x01'"}, {"func_args": {"b": "b'\\x00\\x00\\x00\\x07\\x0c'"}, "return_value": "b'\\x00\\x00\\x00\\x07\\x0c'"}, {"func_args": {"b": "b'\\x00\\x00\\x00p\\xf1\\x17'"}, "return_value": "b'\\x00\\x00\\x00p\\xf1\\x17'"}, {"func_args": {"b": "b'\\xc0\\t\\x00\\x98\\x0e'"}, "return_value": "b'\\xc0\\t\\x00\\x98\\x0e'"}, {"func_args": {"b": "b'\\x00\\x00\\x00\\x00\\x00\\x00\\xc0\\x01\\x0f\\x10\\xc0WhY\\x92\\xa4\\xc7\\x9f\\xf2\\x0b\\x01\\x00\\x00\\x00\\x00\\x00\\x00h\\x01'"}, "return_value": "b'\\x00\\x00\\x00\\x00\\x00\\x00\\xc0\\x01\\x0f\\x10\\xc0WhY\\x92\\xa4\\xc7\\x9f\\xf2\\x0b\\x01\\x00\\x00\\x00\\x00\\x00\\x00h\\x01'"}, {"func_args": {"b": "b'\\x90\\x13'"}, "return_value": "b'\\x90\\x13'"}, {"func_args": {"b": "b'\\x00\\x00\\x10\\x88\\x18\\x0c'"}, "return_value": "b'\\x00\\x00\\x10\\x88\\x18\\x0c'"}, {"func_args": {"b": "b'\\x00\\x00\\x00\\x00\\x00  \\xcfA '"}, "return_value": "b'\\x00\\x00\\x00\\x00\\x00  \\xcfA '"}, {"func_args": {"b": "b'\\x00\\x00\\x00\\x08\\x00\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x80'"}, "return_value": "b'\\x00\\x00\\x00\\x08\\x00\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x80'"}, {"func_args": {"b": "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x0c'"}, "return_value": "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x0c'"}, {"func_args": {"b": "b'\\x08\\xc2\\x01'"}, "return_value": "b'\\x08\\xc2\\x01'"}], "text": "def _to_blob(b):\n    \"\"\"Convert a bytestring into a type SQLite will accept for a blob.\"\"\"\n    return b"}, "nums_to_numbits": {"line": 28, "args": [{"func_args": {"nums": "{34, 35, 24, 25, 26, 27, 28}"}, "return_value": "b'\\x00\\x00\\x00\\x1f\\x0c'"}, {"func_args": {"nums": "{9, 10, 11, 14, 15, 17, 24, 28, 29, 30, 32, 36, 37, 38, 39, 40, 41, 42, 44}"}, "return_value": "b'\\x00\\xce\\x02q\\xf1\\x17'"}, {"func_args": {"nums": "{33, 34, 35, 6, 7, 8, 11, 27, 28, 31}"}, "return_value": "b'\\xc0\\t\\x00\\x98\\x0e'"}, {"func_args": {"nums": "{128, 129, 130, 134, 135, 136, 137, 138, 139, 140, 14, 15, 16, 17, 18, 19, 143, 145, 22, 148, 149, 150, 151, 152, 153, 155, 160, 34, 35, 36, 37, 38, 40, 41, 42, 43, 46, 47, 54, 55, 56, 64, 65, 66, 67, 76, 86, 87, 88, 89, 90, 219, 92, 221, 94, 222, 224, 99, 101, 102, 104, 107, 108, 110, 113, 116, 119, 122, 125, 127}"}, "return_value": "b'\\x00\\xc0O\\x00|\\xcf\\xc0\\x01\\x0f\\x10\\xc0WhY\\x92\\xa4\\xc7\\x9f\\xf2\\x0b\\x01\\x00\\x00\\x00\\x00\\x00\\x00h\\x01'"}, {"func_args": {"nums": "{4, 7, 8, 9, 12}"}, "return_value": "b'\\x90\\x13'"}, {"func_args": {"nums": "{35, 36, 42, 43, 20, 27, 31}"}, "return_value": "b'\\x00\\x00\\x10\\x88\\x18\\x0c'"}, {"func_args": {"nums": "{11, 12, 15, 18, 19, 21, 22, 23, 24, 26, 28, 29, 37, 38, 39, 40, 42, 43, 44}"}, "return_value": "b'\\x00\\x98\\xec5\\xe0\\x1d'"}, {"func_args": {"nums": "{7, 8, 11, 14, 17, 18, 19, 22, 23, 24, 25, 45, 53, 56, 57, 58, 59, 62, 63, 64, 70, 77}"}, "return_value": "b'\\x80I\\xce\\x03\\x00  \\xcfA '"}, {"func_args": {"nums": "{51, 66, 67, 207, 16, 208, 209, 19, 20, 21, 211, 80, 24, 25, 26, 27, 50, 81}"}, "return_value": "b'\\x00\\x009\\x0f\\x00\\x00\\x0c\\x00\\x0c\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x80\\x0b'"}, {"func_args": {"nums": "{99, 100, 103, 47, 27}"}, "return_value": "b'\\x00\\x00\\x00\\x08\\x00\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x98'"}, {"func_args": {"nums": "{3, 9, 14, 15, 16}"}, "return_value": "b'\\x08\\xc2\\x01'"}, {"func_args": {"nums": "{1, 2, 3}"}, "return_value": "b'\\x0e'"}, {"func_args": {"nums": "{2, 3, 6, 9, 10, 11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 24, 27, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44}"}, "return_value": "b'L\\xde~\\xf9\\xf9\\x1f'"}, {"func_args": {"nums": "{1}"}, "return_value": "b'\\x02'"}, {"func_args": {"nums": "{1, 2, 3, 4, 7, 8, 13, 14, 15, 16, 17, 18, 19, 22, 24, 25, 26, 27, 28, 30, 34, 35, 36, 37, 38, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 53, 54, 55, 56, 58, 64, 65, 66, 67, 68, 70, 71, 73, 74, 76, 78, 86, 87, 88, 89, 90, 92, 94, 95, 96, 97, 99, 101, 102, 104, 105, 107, 108, 110, 111, 113, 114, 116, 118, 119, 120, 122, 125, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 148, 149, 150, 151, 152, 153, 155, 157, 158, 160, 162, 163, 164, 167, 168, 169, 170, 171, 173, 174, 175, 177, 179, 180, 181, 182, 183, 185, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 204, 207, 208, 209, 210, 211, 212, 213, 215, 216, 218, 219, 221, 222, 224}"}, "return_value": "b'\\x9e\\xe1O_|\\xef\\xed\\x05\\xdfV\\xc0\\xd7k\\xdb\\xd6\\xa5\\xdf\\xdf\\xf6k\\x9d\\xef\\xfaZ\\xff\\x96\\xbfm\\x01'"}, {"func_args": {"nums": "{1, 3, 4, 6, 7, 8, 9, 11, 12, 14}"}, "return_value": "b'\\xda['"}, {"func_args": {"nums": "{1, 2, 3, 5, 6, 8, 9, 12, 13, 14, 15, 16, 18, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30}"}, "return_value": "b'n\\xf3\\xcd\\x7f'"}, {"func_args": {"nums": "{1}"}, "return_value": "b'\\x02'"}, {"func_args": {"nums": "{1, 3, 5, 6, 9, 11, 12, 13, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48}"}, "return_value": "b'j\\xfa\\xed\\xbf\\xf1\\xfd\\x01'"}, {"func_args": {"nums": "{1, 2}"}, "return_value": "b'\\x06'"}, {"func_args": {"nums": "{1, 2, 3, 4, 6, 7, 8, 11, 14, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 31, 32, 33, 35, 36, 38, 40, 44, 45, 47, 53, 56, 57, 58, 59, 62, 63, 64, 65, 66, 68, 70, 72, 73, 75, 77, 79, 82, 84, 85, 86, 87}"}, "return_value": "b'\\xdeI\\xee\\x9b[\\xb1 \\xcfW\\xab\\xf4'"}, {"func_args": {"nums": "{1, 2, 3, 4, 5, 6, 9, 10, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 30, 31, 32, 33, 34, 36, 37, 40, 41, 42, 43, 44, 46, 47, 50, 51, 52, 54, 55, 58, 59, 60, 62, 63, 64, 66, 67, 69, 70, 73, 74, 75, 76, 77, 79, 80, 83, 84, 85, 86, 87, 89, 90, 93, 94, 95, 96, 98, 99, 100, 102, 103, 106, 107, 108, 109, 111, 112, 113, 115, 116, 119, 120, 121, 123, 124, 125, 126, 128, 129, 131, 135, 136, 137, 139, 140, 141, 143, 144, 146, 147, 148, 150, 151, 152, 153, 154, 155, 157, 158, 160, 162, 164, 165, 166, 168, 169, 170, 173, 174, 175, 176, 178, 179, 182, 183, 184, 185, 187, 188, 190, 191, 192, 194, 195, 196, 198, 199, 201, 202, 205, 206, 207, 208, 210, 211, 213, 214, 215, 216, 217, 218, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 235, 237, 239, 240}"}, "return_value": "b'~\\x86\\xff\\xcd7\\xdf\\xdc\\xdcm\\xbe\\xf9\\xe6\\xdd\\xbc\\x9b{\\x8b\\xbb\\xddou\\xe7\\xcd\\xdb\\xdd\\xe6\\xed\\xe7\\xfe\\xa8\\x01'"}, {"func_args": {"nums": "{1, 2, 3, 4, 6, 7, 8, 11, 12, 13, 15, 16, 18, 19, 20, 21, 23, 24, 25, 26, 27, 30, 32, 34, 36, 38, 39, 40, 42, 43, 49, 50, 51, 53, 54, 56, 58, 62, 63, 65, 66, 67, 69, 70, 72, 73, 76, 77, 79, 80, 81, 83, 84, 86, 87, 90, 91, 92, 94, 95, 97, 98, 101, 102, 103, 105, 106, 108, 109, 112, 113, 114, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 129, 130, 131, 133, 135, 136, 137, 140, 142, 144, 146, 147, 150, 151, 152, 154, 156, 157, 158, 161, 162, 163, 165, 167, 169, 171, 172, 175, 176, 177, 179, 181, 182, 183, 186, 187, 188, 190, 192, 194, 196, 197, 200, 201, 202, 204, 206, 207, 208, 209, 211, 213, 214, 215, 216, 220, 221, 224, 225, 226, 228, 230, 231, 232, 233, 238, 239, 240, 242, 243, 244, 245, 247, 249, 250, 253, 254, 255, 257, 258, 259, 262, 264, 265}"}, "return_value": "b'\\xde\\xb9\\xbdO\\xd5\\rn\\xc5n\\xb3\\xdb\\xdc\\xe66\\xf7}\\xaeS\\xcdu\\xae\\x9a\\xeb\\\\5\\xd7\\xeb1\\xd7\\xc3\\xbd\\xe6N\\x03'"}, {"func_args": {"nums": "{2, 3, 9, 10, 18, 19, 20, 22, 23, 26, 27, 30, 31, 34, 35, 36, 37, 38, 41, 42, 43, 45, 48, 62, 63, 66, 70, 72, 76, 77, 80, 81}"}, "return_value": "b'\\x0c\\x06\\xdc\\xcc|.\\x01\\xc0D1\\x03'"}, {"func_args": {"nums": "{1, 2, 3, 4, 5}"}, "return_value": "b'>'"}, {"func_args": {"nums": "{1, 2, 3, 5, 7, 10, 11, 17, 18, 19, 21, 22, 23, 24, 26, 29, 30, 32, 33, 34, 37, 40, 42, 43, 45, 46, 48}"}, "return_value": "b\"\\xae\\x0c\\xeee'm\\x01\""}, {"func_args": {"nums": "{1, 3}"}, "return_value": "b'\\n'"}, {"func_args": {"nums": "{1, 2, 5, 6, 7, 8, 11, 14, 15, 16, 17, 20, 21, 22, 26, 27, 28, 31, 32, 33, 34, 35, 37}"}, "return_value": "b'\\xe6\\xc9s\\x9c/'"}, {"func_args": {"nums": "{1}"}, "return_value": "b'\\x02'"}, {"func_args": {"nums": "{1, 2, 3, 5, 8, 9, 10, 11}"}, "return_value": "b'.\\x0f'"}, {"func_args": {"nums": "{1, 2, 3, 4, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 20, 21, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 46, 47, 48, 49}"}, "return_value": "b'\\xde\\xf37\\x9f?\\xcf\\x03'"}, {"func_args": {"nums": "{1, 4, 5, 6}"}, "return_value": "b'r'"}, {"func_args": {"nums": "{1}"}, "return_value": "b'\\x02'"}, {"func_args": {"nums": "{1, 3, 4, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 29, 30, 32, 35, 36, 37, 40, 41, 42}"}, "return_value": "b'\\x1a\\xe6\\xffi9\\x07'"}, {"func_args": {"nums": "{1, 3, 5, 6, 8, 10, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 59, 60, 61, 62, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97}"}, "return_value": "b'j\\xe5\\xcf\\x9f\\xcf\\xe7\\xf3y>\\x7f\\xfe\\x7f\\x03'"}, {"func_args": {"nums": "{129, 4, 11, 12, 13, 14, 15, 16, 18, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 38, 41, 43, 44, 45, 46, 50, 54, 55, 56, 57, 58, 60, 63, 64, 65, 66, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 105, 108}"}, "return_value": "b'\\x10\\xf8\\x95\\xffNz\\xc4\\x97\\x97\\xff\\x8f\\xff\\xf3\\x12\\x00\\x00\\x02'"}, {"func_args": {"nums": "{1, 2, 3, 4, 6, 7, 9, 10, 11, 12, 15, 16, 17, 18, 21, 22, 23, 24, 27, 28, 29, 30, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 47, 48, 49, 50, 53, 54, 55, 58, 59, 60, 63, 64, 65, 68, 69, 70, 71, 74, 75, 76, 77, 80, 81, 82, 83, 86, 87, 88, 91, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 108, 109, 110, 111, 114, 115, 116, 117, 120, 121, 122, 123, 126, 127, 128, 129, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 161, 162, 163, 164, 167, 168, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 189, 191, 194, 196, 199, 200, 203, 204, 205, 206, 207, 210, 211, 212, 213, 214, 217, 218, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 238, 239, 242, 243, 246, 247, 250, 251, 253, 254, 256, 257, 260, 261, 264, 265, 268, 269, 270, 271, 272, 275, 276, 277, 278, 281, 282, 283, 284, 287, 288, 289, 291, 292, 293, 294, 297, 298, 299, 300, 301, 304, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 355, 356, 357, 358, 360, 361, 362, 365, 366, 367, 368, 369, 370, 372, 373, 374, 376, 377, 378, 380, 381, 382, 384, 385, 386, 387, 389, 390, 391, 393, 394, 395, 396, 398, 399, 400, 402, 403, 404, 406, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 426, 427, 428, 429, 435, 436, 437, 439, 440, 441, 442, 445, 446, 447, 448, 449}"}, "return_value": "b'\\xde\\x9e\\xe7y>\\x9f\\xe7\\x9c\\xf3<\\xcf9\\xcf\\xf3<\\xcf\\xf3\\xfc<\\x7f\\x9e\\xf9\\xff\\xbc\\x94\\xf9|f\\xfe\\xd7\\xccl3\\xf3y\\x9e{>??\\x9f\\xcf\\xe7\\xf3y\\xe7ww\\xef\\xde]\\xdf\\xef=\\xb8\\xe7\\x03'"}, {"func_args": {"nums": "{1, 2, 3, 4, 7, 10, 11, 12, 13, 15, 16, 19, 20, 21, 22, 24, 25, 28, 29, 30, 31, 32, 34, 36, 37, 49, 50, 51, 52, 54, 55, 58, 59, 60, 61, 63, 64, 65, 66, 69, 70, 71, 72, 74, 75, 76, 77, 80, 81, 82, 83, 85, 86, 89, 90, 91, 92, 94, 95}"}, "return_value": "b'\\x9e\\xbcy\\xf35\\x00\\xde\\xbc\\xe7=o\\xde'"}, {"func_args": {"nums": "{1}"}, "return_value": "b'\\x02'"}, {"func_args": {"nums": "{1, 2, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 119, 121, 122, 123, 124, 125, 128, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158}"}, "return_value": "b'\\xe6\\xf3\\xf9|>\\x9f\\xcf\\xe7\\xf3\\xf9\\xfc|~\\xbe\\xef>\\x9f?\\x7f\\x7f'"}, {"func_args": {"nums": "{1, 2, 5, 9, 10, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 47, 48, 49, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 138, 140, 141, 142, 143, 144}"}, "return_value": "b'&\\xe6\\xf3y~\\xbf\\xfb|~~~~\\xfe\\xfe\\xdf\\xef\\xbd\\xf7\\x01'"}, {"func_args": {"nums": "{34, 35, 24, 25, 26}"}, "return_value": "b'\\x00\\x00\\x00\\x07\\x0c'"}, {"func_args": {"nums": "{32, 36, 37, 38, 39, 40, 41, 42, 44, 28, 29, 30}"}, "return_value": "b'\\x00\\x00\\x00p\\xf1\\x17'"}, {"func_args": {"nums": "{33, 34, 35, 6, 7, 8, 11, 27, 28, 31}"}, "return_value": "b'\\xc0\\t\\x00\\x98\\x0e'"}, {"func_args": {"nums": "{128, 129, 130, 134, 135, 136, 137, 138, 139, 140, 143, 145, 148, 149, 150, 151, 152, 153, 155, 157, 158, 160, 54, 55, 56, 64, 65, 66, 67, 76, 86, 87, 88, 89, 90, 219, 92, 221, 94, 222, 224, 99, 101, 102, 104, 107, 108, 110, 113, 116, 119, 122, 125, 127}"}, "return_value": "b'\\x00\\x00\\x00\\x00\\x00\\x00\\xc0\\x01\\x0f\\x10\\xc0WhY\\x92\\xa4\\xc7\\x9f\\xf2k\\x01\\x00\\x00\\x00\\x00\\x00\\x00h\\x01'"}, {"func_args": {"nums": "{4, 7, 8, 9, 12}"}, "return_value": "b'\\x90\\x13'"}, {"func_args": {"nums": "{35, 36, 42, 43, 20, 27, 31}"}, "return_value": "b'\\x00\\x00\\x10\\x88\\x18\\x0c'"}, {"func_args": {"nums": "{64, 70, 77, 45, 53, 56, 57, 58, 59, 62, 63}"}, "return_value": "b'\\x00\\x00\\x00\\x00\\x00  \\xcfA '"}, {"func_args": {"nums": "{27, 47, 103}"}, "return_value": "b'\\x00\\x00\\x00\\x08\\x00\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x80'"}, {"func_args": {"nums": "{50, 51}"}, "return_value": "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x0c'"}, {"func_args": {"nums": "{3, 9, 14, 15, 16}"}, "return_value": "b'\\x08\\xc2\\x01'"}, {"func_args": {"nums": "{34, 35, 24, 25, 26}"}, "return_value": "b'\\x00\\x00\\x00\\x07\\x0c'"}, {"func_args": {"nums": "{32, 36, 37, 38, 39, 40, 41, 42, 44, 28, 29, 30}"}, "return_value": "b'\\x00\\x00\\x00p\\xf1\\x17'"}, {"func_args": {"nums": "{33, 34, 35, 6, 7, 8, 11, 27, 28, 31}"}, "return_value": "b'\\xc0\\t\\x00\\x98\\x0e'"}, {"func_args": {"nums": "{128, 129, 130, 134, 135, 136, 137, 138, 139, 140, 143, 145, 148, 149, 150, 151, 152, 153, 155, 160, 54, 55, 56, 64, 65, 66, 67, 76, 86, 87, 88, 89, 90, 219, 92, 221, 94, 222, 224, 99, 101, 102, 104, 107, 108, 110, 113, 116, 119, 122, 125, 127}"}, "return_value": "b'\\x00\\x00\\x00\\x00\\x00\\x00\\xc0\\x01\\x0f\\x10\\xc0WhY\\x92\\xa4\\xc7\\x9f\\xf2\\x0b\\x01\\x00\\x00\\x00\\x00\\x00\\x00h\\x01'"}, {"func_args": {"nums": "{4, 7, 8, 9, 12}"}, "return_value": "b'\\x90\\x13'"}, {"func_args": {"nums": "{35, 36, 42, 43, 20, 27, 31}"}, "return_value": "b'\\x00\\x00\\x10\\x88\\x18\\x0c'"}, {"func_args": {"nums": "{64, 70, 77, 45, 53, 56, 57, 58, 59, 62, 63}"}, "return_value": "b'\\x00\\x00\\x00\\x00\\x00  \\xcfA '"}, {"func_args": {"nums": "{27, 47, 103}"}, "return_value": "b'\\x00\\x00\\x00\\x08\\x00\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x80'"}, {"func_args": {"nums": "{50, 51}"}, "return_value": "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x0c'"}, {"func_args": {"nums": "{3, 9, 14, 15, 16}"}, "return_value": "b'\\x08\\xc2\\x01'"}]}, "numbits_union": {"line": 71, "args": [{"func_args": {"numbits1": "b'\\x00\\xce\\x02q\\xf1\\x17'", "numbits2": "b'L\\xde~\\xf9\\xf9\\x1f'"}, "return_value": "b'L\\xde~\\xf9\\xf9\\x1f'"}, {"func_args": {"numbits1": "b'\\x00\\xc0O\\x00|\\xcf\\xc0\\x01\\x0f\\x10\\xc0WhY\\x92\\xa4\\xc7\\x9f\\xf2\\x0b\\x01\\x00\\x00\\x00\\x00\\x00\\x00h\\x01'", "numbits2": "b'\\x9e\\xe1O_|\\xef\\xed\\x05\\xdfV\\xc0\\xd7k\\xdb\\xd6\\xa5\\xdf\\xdf\\xf6k\\x9d\\xef\\xfaZ\\xff\\x96\\xbfm\\x01'"}, "return_value": "b'\\x9e\\xe1O_|\\xef\\xed\\x05\\xdfV\\xc0\\xd7k\\xdb\\xd6\\xa5\\xdf\\xdf\\xf6k\\x9d\\xef\\xfaZ\\xff\\x96\\xbfm\\x01'"}, {"func_args": {"numbits1": "b'\\x90\\x13'", "numbits2": "b'\\xda['"}, "return_value": "b'\\xda['"}, {"func_args": {"numbits1": "b'\\x08\\xc2\\x01'", "numbits2": "b'n\\xf3\\xcd\\x7f'"}, "return_value": "b'n\\xf3\\xcd\\x7f'"}, {"func_args": {"numbits1": "b'\\x00\\x98\\xec5\\xe0\\x1d'", "numbits2": "b'j\\xfa\\xed\\xbf\\xf1\\xfd\\x01'"}, "return_value": "b'j\\xfa\\xed\\xbf\\xf1\\xfd\\x01'"}, {"func_args": {"numbits1": "b'\\x80I\\xce\\x03\\x00  \\xcfA '", "numbits2": "b'\\xdeI\\xee\\x9b[\\xb1 \\xcfW\\xab\\xf4'"}, "return_value": "b'\\xdeI\\xee\\x9b[\\xb1 \\xcfW\\xab\\xf4'"}, {"func_args": {"numbits1": "b'\\x00\\x00\\x00\\x08\\x00\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x98'", "numbits2": "b'~\\x86\\xff\\xcd7\\xdf\\xdc\\xdcm\\xbe\\xf9\\xe6\\xdd\\xbc\\x9b{\\x8b\\xbb\\xddou\\xe7\\xcd\\xdb\\xdd\\xe6\\xed\\xe7\\xfe\\xa8\\x01'"}, "return_value": "b'~\\x86\\xff\\xcd7\\xdf\\xdc\\xdcm\\xbe\\xf9\\xe6\\xdd\\xbc\\x9b{\\x8b\\xbb\\xddou\\xe7\\xcd\\xdb\\xdd\\xe6\\xed\\xe7\\xfe\\xa8\\x01'"}, {"func_args": {"numbits1": "b'\\x00\\x009\\x0f\\x00\\x00\\x0c\\x00\\x0c\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x80\\x0b'", "numbits2": "b'\\xde\\xb9\\xbdO\\xd5\\rn\\xc5n\\xb3\\xdb\\xdc\\xe66\\xf7}\\xaeS\\xcdu\\xae\\x9a\\xeb\\\\5\\xd7\\xeb1\\xd7\\xc3\\xbd\\xe6N\\x03'"}, "return_value": "b'\\xde\\xb9\\xbdO\\xd5\\rn\\xc5n\\xb3\\xdb\\xdc\\xe66\\xf7}\\xaeS\\xcdu\\xae\\x9a\\xeb\\\\5\\xd7\\xeb1\\xd7\\xc3\\xbd\\xe6N\\x03'"}, {"func_args": {"numbits1": "b'\\x00\\x00\\x10\\x88\\x18\\x0c'", "numbits2": "b'\\x0c\\x06\\xdc\\xcc|.\\x01\\xc0D1\\x03'"}, "return_value": "b'\\x0c\\x06\\xdc\\xcc|.\\x01\\xc0D1\\x03'"}, {"func_args": {"numbits1": "b'\\xc0\\t\\x00\\x98\\x0e'", "numbits2": "b'\\xe6\\xc9s\\x9c/'"}, "return_value": "b'\\xe6\\xc9s\\x9c/'"}, {"func_args": {"numbits1": "b'\\x00\\x00\\x00\\x1f\\x0c'", "numbits2": "b'\\x10\\xf8\\x95\\xffNz\\xc4\\x97\\x97\\xff\\x8f\\xff\\xf3\\x12\\x00\\x00\\x02'"}, "return_value": "b'\\x10\\xf8\\x95\\xffNz\\xc4\\x97\\x97\\xff\\x8f\\xff\\xf3\\x12\\x00\\x00\\x02'"}, {"func_args": {"numbits1": "b'\\x00\\x00\\x00\\x07\\x0c'", "numbits2": "b'\\x10\\xf8\\x95\\xffNz\\xc4\\x97\\x97\\xff\\x8f\\xff\\xf3\\x12\\x00\\x00\\x02'"}, "return_value": "b'\\x10\\xf8\\x95\\xffNz\\xc4\\x97\\x97\\xff\\x8f\\xff\\xf3\\x12\\x00\\x00\\x02'"}, {"func_args": {"numbits1": "b'\\x00\\x00\\x00p\\xf1\\x17'", "numbits2": "b'L\\xde~\\xf9\\xf9\\x1f'"}, "return_value": "b'L\\xde~\\xf9\\xf9\\x1f'"}, {"func_args": {"numbits1": "b'\\xc0\\t\\x00\\x98\\x0e'", "numbits2": "b'\\xe6\\xc9s\\x9c/'"}, "return_value": "b'\\xe6\\xc9s\\x9c/'"}, {"func_args": {"numbits1": "b'\\x00\\x00\\x00\\x00\\x00\\x00\\xc0\\x01\\x0f\\x10\\xc0WhY\\x92\\xa4\\xc7\\x9f\\xf2k\\x01\\x00\\x00\\x00\\x00\\x00\\x00h\\x01'", "numbits2": "b'\\x9e\\xe1O_|\\xef\\xed\\x05\\xdfV\\xc0\\xd7k\\xdb\\xd6\\xa5\\xdf\\xdf\\xf6k\\x9d\\xef\\xfaZ\\xff\\x96\\xbfm\\x01'"}, "return_value": "b'\\x9e\\xe1O_|\\xef\\xed\\x05\\xdfV\\xc0\\xd7k\\xdb\\xd6\\xa5\\xdf\\xdf\\xf6k\\x9d\\xef\\xfaZ\\xff\\x96\\xbfm\\x01'"}, {"func_args": {"numbits1": "b'\\x90\\x13'", "numbits2": "b'\\xda['"}, "return_value": "b'\\xda['"}, {"func_args": {"numbits1": "b'\\x00\\x00\\x10\\x88\\x18\\x0c'", "numbits2": "b'\\x0c\\x06\\xdc\\xcc|.\\x01\\xc0D1\\x03'"}, "return_value": "b'\\x0c\\x06\\xdc\\xcc|.\\x01\\xc0D1\\x03'"}, {"func_args": {"numbits1": "b'\\x00\\x00\\x00\\x00\\x00  \\xcfA '", "numbits2": "b'\\xdeI\\xee\\x9b[\\xb1 \\xcfW\\xab\\xf4'"}, "return_value": "b'\\xdeI\\xee\\x9b[\\xb1 \\xcfW\\xab\\xf4'"}, {"func_args": {"numbits1": "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x0c'", "numbits2": "b'\\xde\\xb9\\xbdO\\xd5\\rn\\xc5n\\xb3\\xdb\\xdc\\xe66\\xf7}\\xaeS\\xcdu\\xae\\x9a\\xeb\\\\5\\xd7\\xeb1\\xd7\\xc3\\xbd\\xe6N\\x03'"}, "return_value": "b'\\xde\\xb9\\xbdO\\xd5\\rn\\xc5n\\xb3\\xdb\\xdc\\xe66\\xf7}\\xaeS\\xcdu\\xae\\x9a\\xeb\\\\5\\xd7\\xeb1\\xd7\\xc3\\xbd\\xe6N\\x03'"}, {"func_args": {"numbits1": "b'\\x00\\x00\\x00\\x08\\x00\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x80'", "numbits2": "b'~\\x86\\xff\\xcd7\\xdf\\xdc\\xdcm\\xbe\\xf9\\xe6\\xdd\\xbc\\x9b{\\x8b\\xbb\\xddou\\xe7\\xcd\\xdb\\xdd\\xe6\\xed\\xe7\\xfe\\xa8\\x01'"}, "return_value": "b'~\\x86\\xff\\xcd7\\xdf\\xdc\\xdcm\\xbe\\xf9\\xe6\\xdd\\xbc\\x9b{\\x8b\\xbb\\xddou\\xe7\\xcd\\xdb\\xdd\\xe6\\xed\\xe7\\xfe\\xa8\\x01'"}, {"func_args": {"numbits1": "b'\\x08\\xc2\\x01'", "numbits2": "b'n\\xf3\\xcd\\x7f'"}, "return_value": "b'n\\xf3\\xcd\\x7f'"}, {"func_args": {"numbits1": "b'\\x00\\x00\\x00\\x07\\x0c'", "numbits2": "b'\\x10\\xf8\\x95\\xffNz\\xc4\\x97\\x97\\xff\\x8f\\xff\\xf3\\x12\\x00\\x00\\x02'"}, "return_value": "b'\\x10\\xf8\\x95\\xffNz\\xc4\\x97\\x97\\xff\\x8f\\xff\\xf3\\x12\\x00\\x00\\x02'"}, {"func_args": {"numbits1": "b'\\x00\\x00\\x00p\\xf1\\x17'", "numbits2": "b'L\\xde~\\xf9\\xf9\\x1f'"}, "return_value": "b'L\\xde~\\xf9\\xf9\\x1f'"}, {"func_args": {"numbits1": "b'\\xc0\\t\\x00\\x98\\x0e'", "numbits2": "b'\\xe6\\xc9s\\x9c/'"}, "return_value": "b'\\xe6\\xc9s\\x9c/'"}, {"func_args": {"numbits1": "b'\\x00\\x00\\x00\\x00\\x00\\x00\\xc0\\x01\\x0f\\x10\\xc0WhY\\x92\\xa4\\xc7\\x9f\\xf2\\x0b\\x01\\x00\\x00\\x00\\x00\\x00\\x00h\\x01'", "numbits2": "b'\\x9e\\xe1O_|\\xef\\xed\\x05\\xdfV\\xc0\\xd7k\\xdb\\xd6\\xa5\\xdf\\xdf\\xf6k\\x9d\\xef\\xfaZ\\xff\\x96\\xbfm\\x01'"}, "return_value": "b'\\x9e\\xe1O_|\\xef\\xed\\x05\\xdfV\\xc0\\xd7k\\xdb\\xd6\\xa5\\xdf\\xdf\\xf6k\\x9d\\xef\\xfaZ\\xff\\x96\\xbfm\\x01'"}, {"func_args": {"numbits1": "b'\\x90\\x13'", "numbits2": "b'\\xda['"}, "return_value": "b'\\xda['"}, {"func_args": {"numbits1": "b'\\x00\\x00\\x10\\x88\\x18\\x0c'", "numbits2": "b'\\x0c\\x06\\xdc\\xcc|.\\x01\\xc0D1\\x03'"}, "return_value": "b'\\x0c\\x06\\xdc\\xcc|.\\x01\\xc0D1\\x03'"}, {"func_args": {"numbits1": "b'\\x00\\x00\\x00\\x00\\x00  \\xcfA '", "numbits2": "b'\\xdeI\\xee\\x9b[\\xb1 \\xcfW\\xab\\xf4'"}, "return_value": "b'\\xdeI\\xee\\x9b[\\xb1 \\xcfW\\xab\\xf4'"}, {"func_args": {"numbits1": "b'\\x00\\x00\\x00\\x08\\x00\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x80'", "numbits2": "b'~\\x86\\xff\\xcd7\\xdf\\xdc\\xdcm\\xbe\\xf9\\xe6\\xdd\\xbc\\x9b{\\x8b\\xbb\\xddou\\xe7\\xcd\\xdb\\xdd\\xe6\\xed\\xe7\\xfe\\xa8\\x01'"}, "return_value": "b'~\\x86\\xff\\xcd7\\xdf\\xdc\\xdcm\\xbe\\xf9\\xe6\\xdd\\xbc\\x9b{\\x8b\\xbb\\xddou\\xe7\\xcd\\xdb\\xdd\\xe6\\xed\\xe7\\xfe\\xa8\\x01'"}, {"func_args": {"numbits1": "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x0c'", "numbits2": "b'\\xde\\xb9\\xbdO\\xd5\\rn\\xc5n\\xb3\\xdb\\xdc\\xe66\\xf7}\\xaeS\\xcdu\\xae\\x9a\\xeb\\\\5\\xd7\\xeb1\\xd7\\xc3\\xbd\\xe6N\\x03'"}, "return_value": "b'\\xde\\xb9\\xbdO\\xd5\\rn\\xc5n\\xb3\\xdb\\xdc\\xe66\\xf7}\\xaeS\\xcdu\\xae\\x9a\\xeb\\\\5\\xd7\\xeb1\\xd7\\xc3\\xbd\\xe6N\\x03'"}, {"func_args": {"numbits1": "b'\\x08\\xc2\\x01'", "numbits2": "b'n\\xf3\\xcd\\x7f'"}, "return_value": "b'n\\xf3\\xcd\\x7f'"}]}, "numbits_to_nums": {"line": 49, "args": [{"func_args": {"numbits": "b'\\x0e'"}, "return_value": "[1, 2, 3]"}, {"func_args": {"numbits": "b'\\x10\\xf8\\x95\\xffNz\\xc4\\x97\\x97\\xff\\x8f\\xff\\xf3\\x12\\x00\\x00\\x02'"}, "return_value": "[4, 11, 12, 13, 14, 15, 16, 18, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 38, 41, 43, 44, 45, 46, 50, 54, 55, 56, 57, 58, 60, 63, 64, 65, 66, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 105, 108, 129]"}, {"func_args": {"numbits": "b'\\n'"}, "return_value": "[1, 3]"}, {"func_args": {"numbits": "b'\\x02'"}, "return_value": "[1]"}, {"func_args": {"numbits": "b'.\\x0f'"}, "return_value": "[1, 2, 3, 5, 8, 9, 10, 11]"}, {"func_args": {"numbits": "b'\\xde\\xf37\\x9f?\\xcf\\x03'"}, "return_value": "[1, 2, 3, 4, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 20, 21, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 46, 47, 48, 49]"}, {"func_args": {"numbits": "b'\\xe6\\xc9s\\x9c/'"}, "return_value": "[1, 2, 5, 6, 7, 8, 11, 14, 15, 16, 17, 20, 21, 22, 26, 27, 28, 31, 32, 33, 34, 35, 37]"}, {"func_args": {"numbits": "b'\\x02'"}, "return_value": "[1]"}, {"func_args": {"numbits": "b'\\xda['"}, "return_value": "[1, 3, 4, 6, 7, 8, 9, 11, 12, 14]"}, {"func_args": {"numbits": "b'\\x9e\\xe1O_|\\xef\\xed\\x05\\xdfV\\xc0\\xd7k\\xdb\\xd6\\xa5\\xdf\\xdf\\xf6k\\x9d\\xef\\xfaZ\\xff\\x96\\xbfm\\x01'"}, "return_value": "[1, 2, 3, 4, 7, 8, 13, 14, 15, 16, 17, 18, 19, 22, 24, 25, 26, 27, 28, 30, 34, 35, 36, 37, 38, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 53, 54, 55, 56, 58, 64, 65, 66, 67, 68, 70, 71, 73, 74, 76, 78, 86, 87, 88, 89, 90, 92, 94, 95, 96, 97, 99, 101, 102, 104, 105, 107, 108, 110, 111, 113, 114, 116, 118, 119, 120, 122, 125, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 148, 149, 150, 151, 152, 153, 155, 157, 158, 160, 162, 163, 164, 167, 168, 169, 170, 171, 173, 174, 175, 177, 179, 180, 181, 182, 183, 185, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 204, 207, 208, 209, 210, 211, 212, 213, 215, 216, 218, 219, 221, 222, 224]"}, {"func_args": {"numbits": "b'n\\xf3\\xcd\\x7f'"}, "return_value": "[1, 2, 3, 5, 6, 8, 9, 12, 13, 14, 15, 16, 18, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30]"}, {"func_args": {"numbits": "b'\\x02'"}, "return_value": "[1]"}, {"func_args": {"numbits": "b'j\\xfa\\xed\\xbf\\xf1\\xfd\\x01'"}, "return_value": "[1, 3, 5, 6, 9, 11, 12, 13, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48]"}, {"func_args": {"numbits": "b'\\x02'"}, "return_value": "[1]"}, {"func_args": {"numbits": "b'\\x1a\\xe6\\xffi9\\x07'"}, "return_value": "[1, 3, 4, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 29, 30, 32, 35, 36, 37, 40, 41, 42]"}, {"func_args": {"numbits": "b'r'"}, "return_value": "[1, 4, 5, 6]"}, {"func_args": {"numbits": "b'j\\xe5\\xcf\\x9f\\xcf\\xe7\\xf3y>\\x7f\\xfe\\x7f\\x03'"}, "return_value": "[1, 3, 5, 6, 8, 10, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 59, 60, 61, 62, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97]"}, {"func_args": {"numbits": "b'\\xde\\x9e\\xe7y>\\x9f\\xe7\\x9c\\xf3<\\xcf9\\xcf\\xf3<\\xcf\\xf3\\xfc<\\x7f\\x9e\\xf9\\xff\\xbc\\x94\\xf9|f\\xfe\\xd7\\xccl3\\xf3y\\x9e{>??\\x9f\\xcf\\xe7\\xf3y\\xe7ww\\xef\\xde]\\xdf\\xef=\\xb8\\xe7\\x03'"}, "return_value": "[1, 2, 3, 4, 6, 7, 9, 10, 11, 12, 15, 16, 17, 18, 21, 22, 23, 24, 27, 28, 29, 30, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 47, 48, 49, 50, 53, 54, 55, 58, 59, 60, 63, 64, 65, 68, 69, 70, 71, 74, 75, 76, 77, 80, 81, 82, 83, 86, 87, 88, 91, 92, 93, 96, 97, 98, 99, 102, 103, 104, 105, 108, 109, 110, 111, 114, 115, 116, 117, 120, 121, 122, 123, 126, 127, 128, 129, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 161, 162, 163, 164, 167, 168, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 189, 191, 194, 196, 199, 200, 203, 204, 205, 206, 207, 210, 211, 212, 213, 214, 217, 218, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 238, 239, 242, 243, 246, 247, 250, 251, 253, 254, 256, 257, 260, 261, 264, 265, 268, 269, 270, 271, 272, 275, 276, 277, 278, 281, 282, 283, 284, 287, 288, 289, 291, 292, 293, 294, 297, 298, 299, 300, 301, 304, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 355, 356, 357, 358, 360, 361, 362, 365, 366, 367, 368, 369, 370, 372, 373, 374, 376, 377, 378, 380, 381, 382, 384, 385, 386, 387, 389, 390, 391, 393, 394, 395, 396, 398, 399, 400, 402, 403, 404, 406, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 426, 427, 428, 429, 435, 436, 437, 439, 440, 441, 442, 445, 446, 447, 448, 449]"}, {"func_args": {"numbits": "b'\\x9e\\xbcy\\xf35\\x00\\xde\\xbc\\xe7=o\\xde'"}, "return_value": "[1, 2, 3, 4, 7, 10, 11, 12, 13, 15, 16, 19, 20, 21, 22, 24, 25, 28, 29, 30, 31, 32, 34, 36, 37, 49, 50, 51, 52, 54, 55, 58, 59, 60, 61, 63, 64, 65, 66, 69, 70, 71, 72, 74, 75, 76, 77, 80, 81, 82, 83, 85, 86, 89, 90, 91, 92, 94, 95]"}, {"func_args": {"numbits": "b'\\x0c\\x06\\xdc\\xcc|.\\x01\\xc0D1\\x03'"}, "return_value": "[2, 3, 9, 10, 18, 19, 20, 22, 23, 26, 27, 30, 31, 34, 35, 36, 37, 38, 41, 42, 43, 45, 48, 62, 63, 66, 70, 72, 76, 77, 80, 81]"}, {"func_args": {"numbits": "b'\\x06'"}, "return_value": "[1, 2]"}, {"func_args": {"numbits": "b'\\xdeI\\xee\\x9b[\\xb1 \\xcfW\\xab\\xf4'"}, "return_value": "[1, 2, 3, 4, 6, 7, 8, 11, 14, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 31, 32, 33, 35, 36, 38, 40, 44, 45, 47, 53, 56, 57, 58, 59, 62, 63, 64, 65, 66, 68, 70, 72, 73, 75, 77, 79, 82, 84, 85, 86, 87]"}, {"func_args": {"numbits": "b'\\xde\\xb9\\xbdO\\xd5\\rn\\xc5n\\xb3\\xdb\\xdc\\xe66\\xf7}\\xaeS\\xcdu\\xae\\x9a\\xeb\\\\5\\xd7\\xeb1\\xd7\\xc3\\xbd\\xe6N\\x03'"}, "return_value": "[1, 2, 3, 4, 6, 7, 8, 11, 12, 13, 15, 16, 18, 19, 20, 21, 23, 24, 25, 26, 27, 30, 32, 34, 36, 38, 39, 40, 42, 43, 49, 50, 51, 53, 54, 56, 58, 62, 63, 65, 66, 67, 69, 70, 72, 73, 76, 77, 79, 80, 81, 83, 84, 86, 87, 90, 91, 92, 94, 95, 97, 98, 101, 102, 103, 105, 106, 108, 109, 112, 113, 114, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 129, 130, 131, 133, 135, 136, 137, 140, 142, 144, 146, 147, 150, 151, 152, 154, 156, 157, 158, 161, 162, 163, 165, 167, 169, 171, 172, 175, 176, 177, 179, 181, 182, 183, 186, 187, 188, 190, 192, 194, 196, 197, 200, 201, 202, 204, 206, 207, 208, 209, 211, 213, 214, 215, 216, 220, 221, 224, 225, 226, 228, 230, 231, 232, 233, 238, 239, 240, 242, 243, 244, 245, 247, 249, 250, 253, 254, 255, 257, 258, 259, 262, 264, 265]"}, {"func_args": {"numbits": "b'\\x02'"}, "return_value": "[1]"}, {"func_args": {"numbits": "b'\\xe6\\xf3\\xf9|>\\x9f\\xcf\\xe7\\xf3\\xf9\\xfc|~\\xbe\\xef>\\x9f?\\x7f\\x7f'"}, "return_value": "[1, 2, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 119, 121, 122, 123, 124, 125, 128, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158]"}, {"func_args": {"numbits": "b'&\\xe6\\xf3y~\\xbf\\xfb|~~~~\\xfe\\xfe\\xdf\\xef\\xbd\\xf7\\x01'"}, "return_value": "[1, 2, 5, 9, 10, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 47, 48, 49, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 138, 140, 141, 142, 143, 144]"}, {"func_args": {"numbits": "b'~\\x86\\xff\\xcd7\\xdf\\xdc\\xdcm\\xbe\\xf9\\xe6\\xdd\\xbc\\x9b{\\x8b\\xbb\\xddou\\xe7\\xcd\\xdb\\xdd\\xe6\\xed\\xe7\\xfe\\xa8\\x01'"}, "return_value": "[1, 2, 3, 4, 5, 6, 9, 10, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 30, 31, 32, 33, 34, 36, 37, 40, 41, 42, 43, 44, 46, 47, 50, 51, 52, 54, 55, 58, 59, 60, 62, 63, 64, 66, 67, 69, 70, 73, 74, 75, 76, 77, 79, 80, 83, 84, 85, 86, 87, 89, 90, 93, 94, 95, 96, 98, 99, 100, 102, 103, 106, 107, 108, 109, 111, 112, 113, 115, 116, 119, 120, 121, 123, 124, 125, 126, 128, 129, 131, 135, 136, 137, 139, 140, 141, 143, 144, 146, 147, 148, 150, 151, 152, 153, 154, 155, 157, 158, 160, 162, 164, 165, 166, 168, 169, 170, 173, 174, 175, 176, 178, 179, 182, 183, 184, 185, 187, 188, 190, 191, 192, 194, 195, 196, 198, 199, 201, 202, 205, 206, 207, 208, 210, 211, 213, 214, 215, 216, 217, 218, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 235, 237, 239, 240]"}, {"func_args": {"numbits": "b'L\\xde~\\xf9\\xf9\\x1f'"}, "return_value": "[2, 3, 6, 9, 10, 11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 24, 27, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44]"}, {"func_args": {"numbits": "b'>'"}, "return_value": "[1, 2, 3, 4, 5]"}, {"func_args": {"numbits": "b\"\\xae\\x0c\\xeee'm\\x01\""}, "return_value": "[1, 2, 3, 5, 7, 10, 11, 17, 18, 19, 21, 22, 23, 24, 26, 29, 30, 32, 33, 34, 37, 40, 42, 43, 45, 46, 48]"}]}, "_getdimensions": {"line": 26, "args": [{"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}, {"func_args": {}, "return_value": "(24, 80)"}], "text": "def _getdimensions():\n    if py33:\n        import shutil\n        size = shutil.get_terminal_size()\n        return size.lines, size.columns\n    else:\n        import termios, fcntl, struct\n        call = fcntl.ioctl(1, termios.TIOCGWINSZ, \"\\000\" * 8)\n        height, width = struct.unpack(\"hhhh\", call)[:2]\n        return height, width"}, "get_terminal_width": {"line": 38, "args": [{"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}], "text": "def get_terminal_width():\n    width = 0\n    try:\n        _, width = _getdimensions()\n    except py.builtin._sysex:\n        raise\n    except:\n        # pass to fallback below\n        pass\n\n    if width == 0:\n        # FALLBACK:\n        # * some exception happened\n        # * or this is emacs terminal which reports (0,0)\n        width = int(os.environ.get('COLUMNS', 80))\n\n    # XXX the windows getdimensions may be bogus, let's sanify a bit\n    if width < 40:\n        width = 80\n    return width"}, "get_line_width": {"line": 71, "args": [{"func_args": {"text": "'============================= test session starts =============================='"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'platform linux -- Python 3.8.12, pytest-5.4.3, py-1.11.0, pluggy-0.13.1'"}, "return_value": "71"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'cachedir: .tox/py38/.pytest_cache'"}, "return_value": "33"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'rootdir: /usr/app/src/test_repos/Yamale'"}, "return_value": "39"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'plugins: cov-2.12.1'"}, "return_value": "19"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'collected 149 items'"}, "return_value": "19"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'yamale/readers/tests/test_bad_file.py '"}, "return_value": "38"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'                                [  2%]'"}, "return_value": "38"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'yamale/readers/tests/test_yaml.py '"}, "return_value": "34"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'                       [ 12%]'"}, "return_value": "29"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'yamale/syntax/tests/test_parser.py '"}, "return_value": "35"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'                                 [ 16%]'"}, "return_value": "39"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'yamale/tests/test_command_line.py '"}, "return_value": "34"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'                  [ 30%]'"}, "return_value": "24"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'yamale/tests/test_functional.py '"}, "return_value": "32"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'                                                [ 73%]'"}, "return_value": "54"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'yamale/tests/test_meta_test.py '"}, "return_value": "31"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'                                   [ 78%]'"}, "return_value": "41"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'yamale/validators/tests/test_constraint.py '"}, "return_value": "43"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'           [ 91%]'"}, "return_value": "17"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'yamale/validators/tests/test_validate.py '"}, "return_value": "41"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'.'"}, "return_value": "1"}, {"func_args": {"text": "'                   [100%]'"}, "return_value": "25"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "''"}, "return_value": "0"}, {"func_args": {"text": "'============================= 149 passed in 4.46s =============================='"}, "return_value": "80"}, {"func_args": {"text": "''"}, "return_value": "0"}], "text": "def get_line_width(text):\n    text = unicodedata.normalize('NFC', text)\n    return sum(char_width.get(unicodedata.east_asian_width(c), 1) for c in text)"}, "validate_report": {"line": 16, "args": [{"func_args": {"arg": "'term-missing'"}, "return_value": "('term-missing', None)"}], "text": "def validate_report(arg):\n    file_choices = ['annotate', 'html', 'xml']\n    term_choices = ['term', 'term-missing']\n    term_modifier_choices = ['skip-covered']\n    all_choices = term_choices + file_choices\n    values = arg.split(\":\", 1)\n    report_type = values[0]\n    if report_type not in all_choices + ['']:\n        msg = 'invalid choice: \"{}\" (choose from \"{}\")'.format(arg, all_choices)\n        raise argparse.ArgumentTypeError(msg)\n\n    if len(values) == 1:\n        return report_type, None\n\n    report_modifier = values[1]\n    if report_type in term_choices and report_modifier in term_modifier_choices:\n        return report_type, report_modifier\n\n    if report_type not in file_choices:\n        msg = 'output specifier not supported for: \"{}\" (choose from \"{}\")'.format(arg,\n                                                                                   file_choices)\n        raise argparse.ArgumentTypeError(msg)\n\n    return values"}, "_get_plugin_specs_as_list": {"line": 631, "args": [{"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}], "text": "def _get_plugin_specs_as_list(specs):\n    \"\"\"\n    Parses a list of \"plugin specs\" and returns a list of plugin names.\n\n    Plugin specs can be given as a list of strings separated by \",\" or already as a list/tuple in\n    which case it is returned as a list. Specs can also be `None` in which case an\n    empty list is returned.\n    \"\"\"\n    if specs is not None and not isinstance(specs, types.ModuleType):\n        if isinstance(specs, str):\n            specs = specs.split(\",\") if specs else []\n        if not isinstance(specs, (list, tuple)):\n            raise UsageError(\n                \"Plugin specs must be a ','-separated string or a \"\n                \"list/tuple of strings for plugin names. Given: %r\" % specs\n            )\n        return list(specs)\n    return []"}, "_find_parametrized_scope": {"line": 1109, "args": [{"func_args": {"argnames": "['parser']", "arg2fixturedefs": "{}", "indirect": "False"}, "return_value": "'function'"}, {"func_args": {"argnames": "['use_string']", "arg2fixturedefs": "{}", "indirect": "False"}, "return_value": "'function'"}, {"func_args": {"argnames": "['parser']", "arg2fixturedefs": "{}", "indirect": "False"}, "return_value": "'function'"}, {"func_args": {"argnames": "['parser']", "arg2fixturedefs": "{}", "indirect": "False"}, "return_value": "'function'"}, {"func_args": {"argnames": "['parser']", "arg2fixturedefs": "{}", "indirect": "False"}, "return_value": "'function'"}, {"func_args": {"argnames": "['parser']", "arg2fixturedefs": "{}", "indirect": "False"}, "return_value": "'function'"}, {"func_args": {"argnames": "['parser']", "arg2fixturedefs": "{}", "indirect": "False"}, "return_value": "'function'"}, {"func_args": {"argnames": "['parser']", "arg2fixturedefs": "{}", "indirect": "False"}, "return_value": "'function'"}, {"func_args": {"argnames": "['parser']", "arg2fixturedefs": "{}", "indirect": "False"}, "return_value": "'function'"}, {"func_args": {"argnames": "['parser']", "arg2fixturedefs": "{}", "indirect": "False"}, "return_value": "'function'"}, {"func_args": {"argnames": "['parser']", "arg2fixturedefs": "{}", "indirect": "False"}, "return_value": "'function'"}, {"func_args": {"argnames": "['data_map']", "arg2fixturedefs": "{}", "indirect": "False"}, "return_value": "'function'"}, {"func_args": {"argnames": "['schema_filename']", "arg2fixturedefs": "{}", "indirect": "False"}, "return_value": "'function'"}, {"func_args": {"argnames": "['use_schema_string', 'use_data_string', 'expected_message_re']", "arg2fixturedefs": "{}", "indirect": "False"}, "return_value": "'function'"}], "text": "def _find_parametrized_scope(argnames, arg2fixturedefs, indirect):\n    \"\"\"Find the most appropriate scope for a parametrized call based on its arguments.\n\n    When there's at least one direct argument, always use \"function\" scope.\n\n    When a test function is parametrized and all its arguments are indirect\n    (e.g. fixtures), return the most narrow scope based on the fixtures used.\n\n    Related to issue #1832, based on code posted by @Kingdread.\n    \"\"\"\n    from _pytest.fixtures import scopes\n\n    if isinstance(indirect, (list, tuple)):\n        all_arguments_are_fixtures = len(indirect) == len(argnames)\n    else:\n        all_arguments_are_fixtures = bool(indirect)\n\n    if all_arguments_are_fixtures:\n        fixturedefs = arg2fixturedefs or {}\n        used_scopes = [\n            fixturedef[0].scope\n            for name, fixturedef in fixturedefs.items()\n            if name in argnames\n        ]\n        if used_scopes:\n            # Takes the most narrow scope from used fixtures\n            for scope in reversed(scopes):\n                if scope in used_scopes:\n                    return scope\n\n    return \"function\""}, "isimportable": {"line": 1026, "args": [{"func_args": {"name": "'tests'"}, "return_value": "True"}, {"func_args": {"name": "'readers'"}, "return_value": "True"}, {"func_args": {"name": "'yamale'"}, "return_value": "True"}, {"func_args": {"name": "'tests'"}, "return_value": "True"}, {"func_args": {"name": "'readers'"}, "return_value": "True"}, {"func_args": {"name": "'yamale'"}, "return_value": "True"}, {"func_args": {"name": "'tests'"}, "return_value": "True"}, {"func_args": {"name": "'syntax'"}, "return_value": "True"}, {"func_args": {"name": "'yamale'"}, "return_value": "True"}, {"func_args": {"name": "'tests'"}, "return_value": "True"}, {"func_args": {"name": "'yamale'"}, "return_value": "True"}, {"func_args": {"name": "'tests'"}, "return_value": "True"}, {"func_args": {"name": "'yamale'"}, "return_value": "True"}, {"func_args": {"name": "'tests'"}, "return_value": "True"}, {"func_args": {"name": "'yamale'"}, "return_value": "True"}, {"func_args": {"name": "'tests'"}, "return_value": "True"}, {"func_args": {"name": "'validators'"}, "return_value": "True"}, {"func_args": {"name": "'yamale'"}, "return_value": "True"}, {"func_args": {"name": "'tests'"}, "return_value": "True"}, {"func_args": {"name": "'validators'"}, "return_value": "True"}, {"func_args": {"name": "'yamale'"}, "return_value": "True"}, {"func_args": {"name": "'tests'"}, "return_value": "True"}, {"func_args": {"name": "'readers'"}, "return_value": "True"}, {"func_args": {"name": "'yamale'"}, "return_value": "True"}, {"func_args": {"name": "'tests'"}, "return_value": "True"}, {"func_args": {"name": "'syntax'"}, "return_value": "True"}, {"func_args": {"name": "'yamale'"}, "return_value": "True"}, {"func_args": {"name": "'tests'"}, "return_value": "True"}, {"func_args": {"name": "'yamale'"}, "return_value": "True"}, {"func_args": {"name": "'tests'"}, "return_value": "True"}, {"func_args": {"name": "'validators'"}, "return_value": "True"}, {"func_args": {"name": "'yamale'"}, "return_value": "True"}], "text": "def isimportable(name):\n    if name and (name[0].isalpha() or name[0] == '_'):\n        name = name.replace(\"_\", '')\n        return not name or name.isalnum()"}, "_splitnode": {"line": 43, "args": [{"func_args": {"nodeid": "'yamale/tests/test_meta_test.py::TestAllYaml'"}, "return_value": "('yamale', 'tests', 'test_meta_test.py', 'TestAllYaml')"}, {"func_args": {"nodeid": "'yamale/tests/test_meta_test.py::TestAllYaml::runTest'"}, "return_value": "('yamale', 'tests', 'test_meta_test.py', 'TestAllYaml', 'runTest')"}, {"func_args": {"nodeid": "'yamale/tests/test_meta_test.py::TestBadYaml::runTest'"}, "return_value": "('yamale', 'tests', 'test_meta_test.py', 'TestBadYaml', 'runTest')"}, {"func_args": {"nodeid": "'yamale/tests/test_meta_test.py::TestBadYaml'"}, "return_value": "('yamale', 'tests', 'test_meta_test.py', 'TestBadYaml')"}, {"func_args": {"nodeid": "'yamale/tests/test_meta_test.py::TestMapYaml::runTest'"}, "return_value": "('yamale', 'tests', 'test_meta_test.py', 'TestMapYaml', 'runTest')"}, {"func_args": {"nodeid": "'yamale/tests/test_meta_test.py::TestMapYaml'"}, "return_value": "('yamale', 'tests', 'test_meta_test.py', 'TestMapYaml')"}, {"func_args": {"nodeid": "'yamale/tests/test_meta_test.py::TestCustomValidator::runTest'"}, "return_value": "('yamale', 'tests', 'test_meta_test.py', 'TestCustomValidator', 'runTest')"}, {"func_args": {"nodeid": "'yamale/tests/test_meta_test.py::TestCustomValidator'"}, "return_value": "('yamale', 'tests', 'test_meta_test.py', 'TestCustomValidator')"}, {"func_args": {"nodeid": "'yamale/tests/test_meta_test.py::TestCustomValidatorWithIncludes::runTest'"}, "return_value": "('yamale', 'tests', 'test_meta_test.py', 'TestCustomValidatorWithIncludes', 'runTest')"}, {"func_args": {"nodeid": "'yamale/tests/test_meta_test.py::TestCustomValidatorWithIncludes'"}, "return_value": "('yamale', 'tests', 'test_meta_test.py', 'TestCustomValidatorWithIncludes')"}, {"func_args": {"nodeid": "'yamale/tests/test_meta_test.py::TestBadRequiredYaml::runTest'"}, "return_value": "('yamale', 'tests', 'test_meta_test.py', 'TestBadRequiredYaml', 'runTest')"}, {"func_args": {"nodeid": "'yamale/tests/test_meta_test.py::TestBadRequiredYaml'"}, "return_value": "('yamale', 'tests', 'test_meta_test.py', 'TestBadRequiredYaml')"}, {"func_args": {"nodeid": "'yamale/tests/test_meta_test.py::TestGoodRequiredYaml::runTest'"}, "return_value": "('yamale', 'tests', 'test_meta_test.py', 'TestGoodRequiredYaml', 'runTest')"}, {"func_args": {"nodeid": "'yamale/tests/test_meta_test.py::TestGoodRequiredYaml'"}, "return_value": "('yamale', 'tests', 'test_meta_test.py', 'TestGoodRequiredYaml')"}]}, "ischildnode": {"line": 69, "args": [{"func_args": {"baseid": "'yamale/tests/test_meta_test.py::TestAllYaml'", "nodeid": "'yamale/tests/test_meta_test.py::TestAllYaml::runTest'"}, "return_value": "True"}, {"func_args": {"baseid": "'yamale/tests/test_meta_test.py::TestAllYaml'", "nodeid": "'yamale/tests/test_meta_test.py::TestBadYaml::runTest'"}, "return_value": "False"}, {"func_args": {"baseid": "'yamale/tests/test_meta_test.py::TestBadYaml'", "nodeid": "'yamale/tests/test_meta_test.py::TestBadYaml::runTest'"}, "return_value": "True"}, {"func_args": {"baseid": "'yamale/tests/test_meta_test.py::TestAllYaml'", "nodeid": "'yamale/tests/test_meta_test.py::TestMapYaml::runTest'"}, "return_value": "False"}, {"func_args": {"baseid": "'yamale/tests/test_meta_test.py::TestBadYaml'", "nodeid": "'yamale/tests/test_meta_test.py::TestMapYaml::runTest'"}, "return_value": "False"}, {"func_args": {"baseid": "'yamale/tests/test_meta_test.py::TestMapYaml'", "nodeid": "'yamale/tests/test_meta_test.py::TestMapYaml::runTest'"}, "return_value": "True"}, {"func_args": {"baseid": "'yamale/tests/test_meta_test.py::TestAllYaml'", "nodeid": "'yamale/tests/test_meta_test.py::TestCustomValidator::runTest'"}, "return_value": "False"}, {"func_args": {"baseid": "'yamale/tests/test_meta_test.py::TestBadYaml'", "nodeid": "'yamale/tests/test_meta_test.py::TestCustomValidator::runTest'"}, "return_value": "False"}, {"func_args": {"baseid": "'yamale/tests/test_meta_test.py::TestMapYaml'", "nodeid": "'yamale/tests/test_meta_test.py::TestCustomValidator::runTest'"}, "return_value": "False"}, {"func_args": {"baseid": "'yamale/tests/test_meta_test.py::TestCustomValidator'", "nodeid": "'yamale/tests/test_meta_test.py::TestCustomValidator::runTest'"}, "return_value": "True"}, {"func_args": {"baseid": "'yamale/tests/test_meta_test.py::TestAllYaml'", "nodeid": "'yamale/tests/test_meta_test.py::TestCustomValidatorWithIncludes::runTest'"}, "return_value": "False"}, {"func_args": {"baseid": "'yamale/tests/test_meta_test.py::TestBadYaml'", "nodeid": "'yamale/tests/test_meta_test.py::TestCustomValidatorWithIncludes::runTest'"}, "return_value": "False"}, {"func_args": {"baseid": "'yamale/tests/test_meta_test.py::TestMapYaml'", "nodeid": "'yamale/tests/test_meta_test.py::TestCustomValidatorWithIncludes::runTest'"}, "return_value": "False"}, {"func_args": {"baseid": "'yamale/tests/test_meta_test.py::TestCustomValidator'", "nodeid": "'yamale/tests/test_meta_test.py::TestCustomValidatorWithIncludes::runTest'"}, "return_value": "False"}, {"func_args": {"baseid": "'yamale/tests/test_meta_test.py::TestCustomValidatorWithIncludes'", "nodeid": "'yamale/tests/test_meta_test.py::TestCustomValidatorWithIncludes::runTest'"}, "return_value": "True"}, {"func_args": {"baseid": "'yamale/tests/test_meta_test.py::TestAllYaml'", "nodeid": "'yamale/tests/test_meta_test.py::TestBadRequiredYaml::runTest'"}, "return_value": "False"}, {"func_args": {"baseid": "'yamale/tests/test_meta_test.py::TestBadYaml'", "nodeid": "'yamale/tests/test_meta_test.py::TestBadRequiredYaml::runTest'"}, "return_value": "False"}, {"func_args": {"baseid": "'yamale/tests/test_meta_test.py::TestMapYaml'", "nodeid": "'yamale/tests/test_meta_test.py::TestBadRequiredYaml::runTest'"}, "return_value": "False"}, {"func_args": {"baseid": "'yamale/tests/test_meta_test.py::TestCustomValidator'", "nodeid": "'yamale/tests/test_meta_test.py::TestBadRequiredYaml::runTest'"}, "return_value": "False"}, {"func_args": {"baseid": "'yamale/tests/test_meta_test.py::TestCustomValidatorWithIncludes'", "nodeid": "'yamale/tests/test_meta_test.py::TestBadRequiredYaml::runTest'"}, "return_value": "False"}, {"func_args": {"baseid": "'yamale/tests/test_meta_test.py::TestBadRequiredYaml'", "nodeid": "'yamale/tests/test_meta_test.py::TestBadRequiredYaml::runTest'"}, "return_value": "True"}, {"func_args": {"baseid": "'yamale/tests/test_meta_test.py::TestAllYaml'", "nodeid": "'yamale/tests/test_meta_test.py::TestGoodRequiredYaml::runTest'"}, "return_value": "False"}, {"func_args": {"baseid": "'yamale/tests/test_meta_test.py::TestBadYaml'", "nodeid": "'yamale/tests/test_meta_test.py::TestGoodRequiredYaml::runTest'"}, "return_value": "False"}, {"func_args": {"baseid": "'yamale/tests/test_meta_test.py::TestMapYaml'", "nodeid": "'yamale/tests/test_meta_test.py::TestGoodRequiredYaml::runTest'"}, "return_value": "False"}, {"func_args": {"baseid": "'yamale/tests/test_meta_test.py::TestCustomValidator'", "nodeid": "'yamale/tests/test_meta_test.py::TestGoodRequiredYaml::runTest'"}, "return_value": "False"}, {"func_args": {"baseid": "'yamale/tests/test_meta_test.py::TestCustomValidatorWithIncludes'", "nodeid": "'yamale/tests/test_meta_test.py::TestGoodRequiredYaml::runTest'"}, "return_value": "False"}, {"func_args": {"baseid": "'yamale/tests/test_meta_test.py::TestBadRequiredYaml'", "nodeid": "'yamale/tests/test_meta_test.py::TestGoodRequiredYaml::runTest'"}, "return_value": "False"}, {"func_args": {"baseid": "'yamale/tests/test_meta_test.py::TestGoodRequiredYaml'", "nodeid": "'yamale/tests/test_meta_test.py::TestGoodRequiredYaml::runTest'"}, "return_value": "True"}], "text": "def ischildnode(baseid, nodeid):\n    \"\"\"Return True if the nodeid is a child node of the baseid.\n\n    E.g. 'foo/bar::Baz' is a child of 'foo', 'foo/bar' and 'foo/bar::Baz', but not of 'foo/blorp'\n    \"\"\"\n    base_parts = _splitnode(baseid)\n    node_parts = _splitnode(nodeid)\n    if len(node_parts) < len(base_parts):\n        return False\n    return node_parts[: len(base_parts)] == base_parts"}, "parts": {"line": 396, "args": [{"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/command_line.py'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/command_line.py', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/readers'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/readers', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/schema'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/schema', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/syntax'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/syntax', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/util.py'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/util.py', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/validators'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/validators', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/yamale.py'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/yamale.py', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/yamale_error.py'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/yamale_error.py', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/yamale_testcase.py', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/readers/__init__.py', '/usr', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/readers', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/readers', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/', '/usr/app/src/test_repos/Yamale/yamale/readers/tests'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/readers', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/readers', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py', '/', '/usr/app/src/test_repos/Yamale/yamale/readers/tests'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/readers', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/', '/usr/app/src/test_repos/Yamale/yamale/readers/tests'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py', '/usr', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/readers', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/', '/usr/app/src/test_repos/Yamale/yamale/readers/tests'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/schema/__init__.py', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/schema', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, "return_value": "{'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py', '/usr/app/src/test_repos/Yamale', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/schema', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/schema/schema.py', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/schema', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, "return_value": "{'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py', '/usr/app/src/test_repos/Yamale', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/schema', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/syntax', '/usr/app/src/test_repos/Yamale/yamale/syntax/__init__.py', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/syntax', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/syntax/tests', '/usr', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/syntax', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/syntax/tests', '/usr', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/syntax', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/', '/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/syntax/tests', '/usr', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/syntax', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/__init__.py', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/', '/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/empty_schema'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures', '/usr', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/empty_schema', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/nestedYaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/nestedYaml', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/required_keys_schema.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/required_keys_schema.yaml', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/schema.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/schema.yaml'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/schema_dir'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/schema_dir'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls'"}, "return_value": "{'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls', '/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/empty_schema/data.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures', '/usr', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/empty_schema', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/empty_schema/data.yaml', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/empty_schema/empty_schema.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures', '/usr', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/empty_schema', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/empty_schema/empty_schema.yaml', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/nestedYaml/anotherLevel'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/nestedYaml', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/nestedYaml/anotherLevel'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/nestedYaml/schema.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/nestedYaml/schema.yaml', '/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/nestedYaml', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/nestedYaml/anotherLevel/good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/nestedYaml/anotherLevel/good.yaml', '/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/nestedYaml', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/nestedYaml/anotherLevel'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/nestedYaml/anotherLevel/schema.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/nestedYaml', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/nestedYaml/anotherLevel/schema.yaml', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/nestedYaml/anotherLevel'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/schema_dir/external.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures', '/usr', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/schema_dir/external.yaml', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/schema_dir'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/bad.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls', '/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/bad.yaml', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls', '/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures', '/usr', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/good.yaml', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/required_keys_bad.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls', '/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/required_keys_bad.yaml', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/required_keys_extra_element.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls', '/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/required_keys_extra_element.yaml', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/any.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/any.yaml', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/any_bad.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/any_bad.yaml', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/any_good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/any_good.yaml', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/bad_schema.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/bad_schema.yaml', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/bad_schema_rce.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/bad_schema_rce.yaml', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/bad_schema_rce2.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/bad_schema_rce2.yaml', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/bad_schema_rce3.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/bad_schema_rce3.yaml', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/bad_schema_rce4.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/bad_schema_rce4.yaml', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/custom_types.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/custom_types.yaml', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/custom_types_bad.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/custom_types_bad.yaml', '/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/custom_types_good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/custom_types_good.yaml', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/empty_schema.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/empty_schema.yaml', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/include_validator.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/include_validator.yaml', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/include_validator_bad.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/include_validator_bad.yaml', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/include_validator_good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/include_validator_good.yaml', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/ip.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/ip.yaml', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/ip_bad.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/ip_bad.yaml', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/ip_good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/ip_good.yaml', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/issue_22.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/issue_22.yaml', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/issue_22_good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/issue_22_good.yaml', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/issue_50.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/issue_50.yaml', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/issue_50_good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/issue_50_good.yaml', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/keywords.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/keywords.yaml', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/keywords_bad.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/keywords_bad.yaml', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/keywords_good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/keywords_good.yaml', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/list_include.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/list_include.yaml', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/list_include_good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/list_include_good.yaml', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/lists.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/lists.yaml', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/lists_bad.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/lists_bad.yaml', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/lists_bad2.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/lists_bad2.yaml', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/lists_good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/lists_good.yaml', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/mac.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/mac.yaml', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/mac_bad.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/mac_bad.yaml'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/mac_good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/mac_good.yaml', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/map.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/map.yaml'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/map_bad.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/map_bad.yaml', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/map_bad2.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/map_bad2.yaml', '/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/map_good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/map_good.yaml', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/map_key_constraint.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/map_key_constraint.yaml', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/map_key_constraint_bad_base.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/map_key_constraint_bad_base.yaml'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/map_key_constraint_bad_nest.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/map_key_constraint_bad_nest.yaml', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/map_key_constraint_bad_nest_con.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/map_key_constraint_bad_nest_con.yaml', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/map_key_constraint_good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/map_key_constraint_good.yaml', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/mixed_strict_map.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/mixed_strict_map.yaml', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/mixed_strict_map_bad.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/mixed_strict_map_bad.yaml', '/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/mixed_strict_map_good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/mixed_strict_map_good.yaml', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/nested.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/nested.yaml', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/nested_bad_data.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/nested_bad_data.yaml', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/nested_good_data.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/nested_good_data.yaml', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/nested_issue_54.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/nested_issue_54.yaml', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/nested_map.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/nested_map.yaml', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/nested_map2.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/nested_map2.yaml', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/nested_map2_bad.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/nested_map2_bad.yaml', '/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/nested_map2_good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/nested_map2_good.yaml', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/nested_map_good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/nested_map_good.yaml', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/numeric_bool_coercion.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/numeric_bool_coercion.yaml', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/numeric_bool_coercion_bad.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/numeric_bool_coercion_bad.yaml', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/numeric_bool_coercion_good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/numeric_bool_coercion_good.yaml', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/regex.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/regex.yaml', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/regex_bad.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/regex_bad.yaml'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/regex_good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/regex_good.yaml', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/static_list.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/static_list.yaml', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/static_list_bad.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/static_list_bad.yaml', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/static_list_good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/static_list_good.yaml'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/strict_list.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/strict_list.yaml', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/strict_list_bad.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/strict_list_bad.yaml'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/strict_list_good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/strict_list_good.yaml', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/strict_map.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/strict_map.yaml', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/strict_map_bad.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/strict_map_bad.yaml', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/strict_map_good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/strict_map_good.yaml', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/subset.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/subset.yaml', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/subset_bad.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/subset_bad.yaml', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/subset_bad2.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/subset_bad2.yaml', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/subset_bad3.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/subset_bad3.yaml', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/subset_empty.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/subset_empty.yaml', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/subset_empty_good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/subset_empty_good.yaml', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/subset_empty_good2.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/subset_empty_good2.yaml', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/subset_good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/subset_good.yaml', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/subset_good2.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/subset_good2.yaml', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/subset_nodef.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/subset_nodef.yaml', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/top_level_map.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/top_level_map.yaml', '/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/top_level_map_good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/top_level_map_good.yaml', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/types.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/types.yaml', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/types_bad_data.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/types_bad_data.yaml', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/types_good_data.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/types_good_data.yaml', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/data1.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/data1.yaml', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/data2.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/data2.yaml', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/data3.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/data3.yaml', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/data4.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/data4.yaml', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/data_custom.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures', '/usr', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/data_custom.yaml', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/data_custom_with_include.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/data_custom_with_include.yaml', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/data_required_bad.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/data_required_bad.yaml', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/data_required_good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/data_required_good.yaml', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/schema.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/schema.yaml', '/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/schema_bad.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/schema_bad.yaml', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/schema_custom.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/schema_custom.yaml', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/schema_custom_with_include.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/schema_custom_with_include.yaml', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/schema_required_bad.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/schema_required_bad.yaml', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/schema_required_good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/schema_required_good.yaml'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/some_data.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures', '/usr', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/some_data.yaml', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/validators/__init__.py', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/validators', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/validators/base.py', '/usr/app/src/test_repos/Yamale/yamale/validators', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/validators', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/validators/tests', '/usr/app/src/test_repos/Yamale/yamale/validators', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/validators/validators.py', '/usr/app/src/test_repos/Yamale/yamale/validators', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/validators/tests', '/usr/app/src/test_repos/Yamale/yamale/validators', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/validators/tests', '/usr/app/src/test_repos/Yamale/yamale/validators', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/validators/tests', '/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py', '/usr/app/src/test_repos/Yamale/yamale/validators', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/readers', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/', '/usr/app/src/test_repos/Yamale/yamale/readers/tests'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/readers/yaml_reader.py', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/readers', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/readers', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/readers/tests/__init__.py', '/', '/usr/app/src/test_repos/Yamale/yamale/readers/tests'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/readers', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/', '/usr/app/src/test_repos/Yamale/yamale/readers/tests'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py', '/usr', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/readers', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/', '/usr/app/src/test_repos/Yamale/yamale/readers/tests'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_bad_file.py', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/readers', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/', '/usr/app/src/test_repos/Yamale/yamale/readers/tests'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/readers/tests/test_yaml.py', '/usr', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/readers', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/', '/usr/app/src/test_repos/Yamale/yamale/readers/tests'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/schema/__pycache__'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/schema/__pycache__', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/schema', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py'"}, "return_value": "{'/usr/app/src/test_repos/Yamale/yamale/schema/datapath.py', '/usr/app/src/test_repos/Yamale', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/schema', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/schema/schema.py'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/schema/schema.py', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/schema', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py'"}, "return_value": "{'/usr/app/src/test_repos/Yamale/yamale/schema/validationresults.py', '/usr/app/src/test_repos/Yamale', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/schema', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/syntax/__pycache__'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/syntax/__pycache__', '/usr', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/syntax', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/syntax/parser.py', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/syntax', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/syntax/tests', '/usr', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/syntax', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/syntax/tests', '/usr', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/syntax', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/', '/usr/app/src/test_repos/Yamale/yamale/syntax/tests/__init__.py'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/syntax/tests', '/usr', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/syntax', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/syntax/tests', '/usr', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/syntax', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/syntax/tests/test_parser.py', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/__pycache__'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/__pycache__', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/tests/test_command_line.py', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/', '/usr/app/src/test_repos/Yamale/yamale/tests/test_functional.py'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/tests/test_meta_test.py', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/empty_schema'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures', '/usr', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/empty_schema', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/nestedYaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/nestedYaml', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/required_keys_schema.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/required_keys_schema.yaml', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/schema.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/schema.yaml'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/schema_dir'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/schema_dir'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls'"}, "return_value": "{'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls', '/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/empty_schema/data.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures', '/usr', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/empty_schema', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/empty_schema/data.yaml', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/empty_schema/empty_schema.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures', '/usr', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/empty_schema', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/empty_schema/empty_schema.yaml', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/nestedYaml/anotherLevel'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/nestedYaml', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/nestedYaml/anotherLevel'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/nestedYaml/schema.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/nestedYaml/schema.yaml', '/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/nestedYaml', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/nestedYaml/anotherLevel/good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/nestedYaml/anotherLevel/good.yaml', '/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/nestedYaml', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/nestedYaml/anotherLevel'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/nestedYaml/anotherLevel/schema.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/nestedYaml', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/nestedYaml/anotherLevel/schema.yaml', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/nestedYaml/anotherLevel'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/schema_dir/external.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures', '/usr', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/schema_dir/external.yaml', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/schema_dir'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/bad.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls', '/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/bad.yaml', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls', '/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures', '/usr', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/good.yaml', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/required_keys_bad.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls', '/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/required_keys_bad.yaml', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/required_keys_extra_element.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls', '/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/command_line_fixtures/yamls/required_keys_extra_element.yaml', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/any.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/any.yaml', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/any_bad.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/any_bad.yaml', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/any_good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/any_good.yaml', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/bad_schema.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/bad_schema.yaml', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/bad_schema_rce.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/bad_schema_rce.yaml', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/bad_schema_rce2.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/bad_schema_rce2.yaml', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/bad_schema_rce3.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/bad_schema_rce3.yaml', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/bad_schema_rce4.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/bad_schema_rce4.yaml', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/custom_types.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/custom_types.yaml', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/custom_types_bad.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/custom_types_bad.yaml', '/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/custom_types_good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/custom_types_good.yaml', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/empty_schema.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/empty_schema.yaml', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/include_validator.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/include_validator.yaml', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/include_validator_bad.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/include_validator_bad.yaml', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/include_validator_good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/include_validator_good.yaml', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/ip.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/ip.yaml', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/ip_bad.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/ip_bad.yaml', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/ip_good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/ip_good.yaml', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/issue_22.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/issue_22.yaml', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/issue_22_good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/issue_22_good.yaml', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/issue_50.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/issue_50.yaml', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/issue_50_good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/issue_50_good.yaml', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/keywords.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/keywords.yaml', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/keywords_bad.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/keywords_bad.yaml', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/keywords_good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/keywords_good.yaml', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/list_include.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/list_include.yaml', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/list_include_good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/list_include_good.yaml', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/lists.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/lists.yaml', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/lists_bad.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/lists_bad.yaml', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/lists_bad2.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/lists_bad2.yaml', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/lists_good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/lists_good.yaml', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/mac.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/mac.yaml', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/mac_bad.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/mac_bad.yaml'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/mac_good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/mac_good.yaml', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/map.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/map.yaml'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/map_bad.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/map_bad.yaml', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/map_bad2.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/map_bad2.yaml', '/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/map_good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/map_good.yaml', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/map_key_constraint.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/map_key_constraint.yaml', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/map_key_constraint_bad_base.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/map_key_constraint_bad_base.yaml'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/map_key_constraint_bad_nest.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/map_key_constraint_bad_nest.yaml', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/map_key_constraint_bad_nest_con.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/map_key_constraint_bad_nest_con.yaml', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/map_key_constraint_good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/map_key_constraint_good.yaml', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/mixed_strict_map.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/mixed_strict_map.yaml', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/mixed_strict_map_bad.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/mixed_strict_map_bad.yaml', '/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/mixed_strict_map_good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/mixed_strict_map_good.yaml', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/nested.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/nested.yaml', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/nested_bad_data.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/nested_bad_data.yaml', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/nested_good_data.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/nested_good_data.yaml', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/nested_issue_54.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/nested_issue_54.yaml', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/nested_map.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/nested_map.yaml', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/nested_map2.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/nested_map2.yaml', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/nested_map2_bad.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/nested_map2_bad.yaml', '/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/nested_map2_good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/nested_map2_good.yaml', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/nested_map_good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/nested_map_good.yaml', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/numeric_bool_coercion.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/numeric_bool_coercion.yaml', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/numeric_bool_coercion_bad.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/numeric_bool_coercion_bad.yaml', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/numeric_bool_coercion_good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/numeric_bool_coercion_good.yaml', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/regex.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/regex.yaml', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/regex_bad.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/regex_bad.yaml'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/regex_good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/regex_good.yaml', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/static_list.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/static_list.yaml', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/static_list_bad.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/static_list_bad.yaml', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/static_list_good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/static_list_good.yaml'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/strict_list.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/strict_list.yaml', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/strict_list_bad.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/strict_list_bad.yaml'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/strict_list_good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/strict_list_good.yaml', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/strict_map.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/strict_map.yaml', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/strict_map_bad.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/strict_map_bad.yaml', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/strict_map_good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/strict_map_good.yaml', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/subset.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/subset.yaml', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/subset_bad.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/subset_bad.yaml', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/subset_bad2.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/subset_bad2.yaml', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/subset_bad3.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/subset_bad3.yaml', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/subset_empty.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/subset_empty.yaml', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/subset_empty_good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/subset_empty_good.yaml', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/subset_empty_good2.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/subset_empty_good2.yaml', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/subset_good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/subset_good.yaml', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/subset_good2.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/subset_good2.yaml', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/subset_nodef.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/subset_nodef.yaml', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/top_level_map.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/top_level_map.yaml', '/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/top_level_map_good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/top_level_map_good.yaml', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/types.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/types.yaml', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/types_bad_data.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/types_bad_data.yaml', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/types_good_data.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/types_good_data.yaml', '/usr/app/src/test_repos/Yamale/yamale/tests/fixtures', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/data1.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/data1.yaml', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/data2.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/data2.yaml', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/data3.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/data3.yaml', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/data4.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/data4.yaml', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/data_custom.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures', '/usr', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/data_custom.yaml', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/data_custom_with_include.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/data_custom_with_include.yaml', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/data_required_bad.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/data_required_bad.yaml', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/data_required_good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/data_required_good.yaml', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/schema.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/schema.yaml', '/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/schema_bad.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/schema_bad.yaml', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/schema_custom.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/schema_custom.yaml', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/schema_custom_with_include.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures', '/usr', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/schema_custom_with_include.yaml', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/schema_required_bad.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/schema_required_bad.yaml', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/schema_required_good.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/schema_required_good.yaml'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/some_data.yaml'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures', '/usr', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/tests/meta_test_fixtures/some_data.yaml', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/tests', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/validators/__pycache__'"}, "return_value": "{'/usr/app/src/test_repos/Yamale/yamale/validators/__pycache__', '/usr/app/src/test_repos/Yamale', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/validators', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/validators/base.py'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/validators/base.py', '/usr/app/src/test_repos/Yamale/yamale/validators', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app/src/test_repos/Yamale/yamale/validators/constraints.py', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/validators', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/validators/tests', '/usr/app/src/test_repos/Yamale/yamale/validators', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/validators/validators.py'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/validators/validators.py', '/usr/app/src/test_repos/Yamale/yamale/validators', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr/app/src/test_repos/Yamale/yamale/validators/tests/__init__.py', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/validators/tests', '/usr/app/src/test_repos/Yamale/yamale/validators', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/validators/tests', '/usr/app/src/test_repos/Yamale/yamale/validators', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/validators/tests', '/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py', '/usr/app/src/test_repos/Yamale/yamale/validators', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app', '/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_constraint.py', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/validators/tests', '/usr/app/src/test_repos/Yamale/yamale/validators', '/'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py'"}, "return_value": "{'/usr/app/src/test_repos/Yamale', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/Yamale/yamale', '/usr/app/src/test_repos/Yamale/yamale/validators/tests', '/usr/app/src/test_repos/Yamale/yamale/validators/tests/test_validate.py', '/usr/app/src/test_repos/Yamale/yamale/validators', '/'}"}], "text": "def parts(s: str) -> Set[str]:\n    parts = s.split(sep)\n    return {sep.join(parts[: i + 1]) or sep for i in range(len(parts))}"}, "_get_stderr_fileno": {"line": 68, "args": [{"func_args": {}, "return_value": "2"}, {"func_args": {}, "return_value": "2"}]}, "_make_plural": {"line": 1186, "args": [{"func_args": {"count": "149", "noun": "'passed'"}, "return_value": "(149, 'passed')"}], "text": "def _make_plural(count, noun):\n    # No need to pluralize words such as `failed` or `passed`.\n    if noun not in [\"error\", \"warnings\"]:\n        return count, noun\n\n    # The `warnings` key is plural. To avoid API breakage, we keep it that way but\n    # set it to singular here so we can determine plurality in the same way as we do\n    # for `error`.\n    noun = noun.replace(\"warnings\", \"warning\")\n\n    return count, noun + \"s\" if count != 1 else noun"}, "format_session_duration": {"line": 1214, "args": [{"func_args": {"seconds": "4.463183879852295"}, "return_value": "'4.46s'"}], "text": "def format_session_duration(seconds: float) -> str:\n    \"\"\"Format the given seconds in a human readable manner to show in the final summary\"\"\"\n    if seconds < 60:\n        return \"{:.2f}s\".format(seconds)\n    else:\n        dt = datetime.timedelta(seconds=int(seconds))\n        return \"{:.2f}s ({})\".format(seconds, dt)"}, "_get_auto_indent": {"line": 93, "args": [{"func_args": {"auto_indent_option": "None"}, "return_value": "0"}]}, "_translate_non_printable": {"line": 225, "args": [{"func_args": {"s": "'pyyaml'"}, "return_value": "'pyyaml'"}, {"func_args": {"s": "'PyYAML'"}, "return_value": "'PyYAML'"}, {"func_args": {"s": "'ruamel'"}, "return_value": "'ruamel'"}, {"func_args": {"s": "'pyyaml'"}, "return_value": "'pyyaml'"}, {"func_args": {"s": "'PyYAML'"}, "return_value": "'PyYAML'"}, {"func_args": {"s": "'ruamel'"}, "return_value": "'ruamel'"}, {"func_args": {"s": "'pyyaml'"}, "return_value": "'pyyaml'"}, {"func_args": {"s": "'PyYAML'"}, "return_value": "'PyYAML'"}, {"func_args": {"s": "'ruamel'"}, "return_value": "'ruamel'"}, {"func_args": {"s": "'pyyaml'"}, "return_value": "'pyyaml'"}, {"func_args": {"s": "'PyYAML'"}, "return_value": "'PyYAML'"}, {"func_args": {"s": "'ruamel'"}, "return_value": "'ruamel'"}, {"func_args": {"s": "'pyyaml'"}, "return_value": "'pyyaml'"}, {"func_args": {"s": "'PyYAML'"}, "return_value": "'PyYAML'"}, {"func_args": {"s": "'ruamel'"}, "return_value": "'ruamel'"}, {"func_args": {"s": "'pyyaml'"}, "return_value": "'pyyaml'"}, {"func_args": {"s": "'PyYAML'"}, "return_value": "'PyYAML'"}, {"func_args": {"s": "'ruamel'"}, "return_value": "'ruamel'"}, {"func_args": {"s": "'pyyaml'"}, "return_value": "'pyyaml'"}, {"func_args": {"s": "'PyYAML'"}, "return_value": "'PyYAML'"}, {"func_args": {"s": "'ruamel'"}, "return_value": "'ruamel'"}, {"func_args": {"s": "'pyyaml'"}, "return_value": "'pyyaml'"}, {"func_args": {"s": "'PyYAML'"}, "return_value": "'PyYAML'"}, {"func_args": {"s": "'ruamel'"}, "return_value": "'ruamel'"}, {"func_args": {"s": "'pyyaml'"}, "return_value": "'pyyaml'"}, {"func_args": {"s": "'PyYAML'"}, "return_value": "'PyYAML'"}, {"func_args": {"s": "'ruamel'"}, "return_value": "'ruamel'"}, {"func_args": {"s": "'pyyaml'"}, "return_value": "'pyyaml'"}, {"func_args": {"s": "'PyYAML'"}, "return_value": "'PyYAML'"}, {"func_args": {"s": "'ruamel'"}, "return_value": "'ruamel'"}, {"func_args": {"s": "'bad_schema_rce.yaml'"}, "return_value": "'bad_schema_rce.yaml'"}, {"func_args": {"s": "'bad_schema_rce2.yaml'"}, "return_value": "'bad_schema_rce2.yaml'"}, {"func_args": {"s": "'bad_schema_rce3.yaml'"}, "return_value": "'bad_schema_rce3.yaml'"}, {"func_args": {"s": "'bad_schema_rce4.yaml'"}, "return_value": "'bad_schema_rce4.yaml'"}, {"func_args": {"s": "\"^Error validating data '.*?' with schema '.*?'\\\\n\\\\t\""}, "return_value": "\"^Error validating data '.*?' with schema '.*?'\\\\n\\\\t\""}, {"func_args": {"s": "\"^Error validating data '.*?'\\\\n\\\\t\""}, "return_value": "\"^Error validating data '.*?'\\\\n\\\\t\""}, {"func_args": {"s": "\"^Error validating data with schema '.*?'\\\\n\\\\t\""}, "return_value": "\"^Error validating data with schema '.*?'\\\\n\\\\t\""}, {"func_args": {"s": "'^Error validating data\\\\n\\\\t'"}, "return_value": "'^Error validating data\\\\n\\\\t'"}], "text": "def _translate_non_printable(s: str) -> str:\n    return s.translate(_non_printable_ascii_translate_table)"}, "ascii_escaped": {"line": 236, "args": [{"func_args": {"val": "'pyyaml'"}, "return_value": "'pyyaml'"}, {"func_args": {"val": "'PyYAML'"}, "return_value": "'PyYAML'"}, {"func_args": {"val": "'ruamel'"}, "return_value": "'ruamel'"}, {"func_args": {"val": "'pyyaml'"}, "return_value": "'pyyaml'"}, {"func_args": {"val": "'PyYAML'"}, "return_value": "'PyYAML'"}, {"func_args": {"val": "'ruamel'"}, "return_value": "'ruamel'"}, {"func_args": {"val": "'pyyaml'"}, "return_value": "'pyyaml'"}, {"func_args": {"val": "'PyYAML'"}, "return_value": "'PyYAML'"}, {"func_args": {"val": "'ruamel'"}, "return_value": "'ruamel'"}, {"func_args": {"val": "'pyyaml'"}, "return_value": "'pyyaml'"}, {"func_args": {"val": "'PyYAML'"}, "return_value": "'PyYAML'"}, {"func_args": {"val": "'ruamel'"}, "return_value": "'ruamel'"}, {"func_args": {"val": "'pyyaml'"}, "return_value": "'pyyaml'"}, {"func_args": {"val": "'PyYAML'"}, "return_value": "'PyYAML'"}, {"func_args": {"val": "'ruamel'"}, "return_value": "'ruamel'"}, {"func_args": {"val": "'pyyaml'"}, "return_value": "'pyyaml'"}, {"func_args": {"val": "'PyYAML'"}, "return_value": "'PyYAML'"}, {"func_args": {"val": "'ruamel'"}, "return_value": "'ruamel'"}, {"func_args": {"val": "'pyyaml'"}, "return_value": "'pyyaml'"}, {"func_args": {"val": "'PyYAML'"}, "return_value": "'PyYAML'"}, {"func_args": {"val": "'ruamel'"}, "return_value": "'ruamel'"}, {"func_args": {"val": "'pyyaml'"}, "return_value": "'pyyaml'"}, {"func_args": {"val": "'PyYAML'"}, "return_value": "'PyYAML'"}, {"func_args": {"val": "'ruamel'"}, "return_value": "'ruamel'"}, {"func_args": {"val": "'pyyaml'"}, "return_value": "'pyyaml'"}, {"func_args": {"val": "'PyYAML'"}, "return_value": "'PyYAML'"}, {"func_args": {"val": "'ruamel'"}, "return_value": "'ruamel'"}, {"func_args": {"val": "'pyyaml'"}, "return_value": "'pyyaml'"}, {"func_args": {"val": "'PyYAML'"}, "return_value": "'PyYAML'"}, {"func_args": {"val": "'ruamel'"}, "return_value": "'ruamel'"}, {"func_args": {"val": "'bad_schema_rce.yaml'"}, "return_value": "'bad_schema_rce.yaml'"}, {"func_args": {"val": "'bad_schema_rce2.yaml'"}, "return_value": "'bad_schema_rce2.yaml'"}, {"func_args": {"val": "'bad_schema_rce3.yaml'"}, "return_value": "'bad_schema_rce3.yaml'"}, {"func_args": {"val": "'bad_schema_rce4.yaml'"}, "return_value": "'bad_schema_rce4.yaml'"}, {"func_args": {"val": "\"^Error validating data '.*?' with schema '.*?'\\n\\t\""}, "return_value": "\"^Error validating data '.*?' with schema '.*?'\\\\n\\\\t\""}, {"func_args": {"val": "\"^Error validating data '.*?'\\n\\t\""}, "return_value": "\"^Error validating data '.*?'\\\\n\\\\t\""}, {"func_args": {"val": "\"^Error validating data with schema '.*?'\\n\\t\""}, "return_value": "\"^Error validating data with schema '.*?'\\\\n\\\\t\""}, {"func_args": {"val": "'^Error validating data\\n\\t'"}, "return_value": "'^Error validating data\\\\n\\\\t'"}], "text": "def ascii_escaped(val: Union[bytes, str]) -> str:\n    \"\"\"If val is pure ascii, returns it as a str().  Otherwise, escapes\n    bytes objects into a sequence of escaped bytes:\n\n    b'\\xc3\\xb4\\xc5\\xd6' -> '\\\\xc3\\\\xb4\\\\xc5\\\\xd6'\n\n    and escapes unicode objects into a sequence of escaped unicode\n    ids, e.g.:\n\n    '4\\\\nV\\\\U00043efa\\\\x0eMXWB\\\\x1e\\\\u3028\\\\u15fd\\\\xcd\\\\U0007d944'\n\n    note:\n       the obvious \"v.decode('unicode-escape')\" will return\n       valid utf-8 unicode if it finds them in bytes, but we\n       want to return escaped bytes for any byte, even if they match\n       a utf-8 string.\n\n    \"\"\"\n    if isinstance(val, bytes):\n        ret = _bytes_to_ascii(val)\n    else:\n        ret = val.encode(\"unicode_escape\").decode(\"ascii\")\n    return _translate_non_printable(ret)"}, "scope2index": {"line": 680, "args": [{"func_args": {"scope": "'session'", "descr": "\"Fixture 'pytestconfig'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'capfd'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'capfdbinary'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'capsys'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'capsysbinary'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'tmp_path'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'session'", "descr": "\"Fixture 'tmp_path_factory'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'tmpdir'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'session'", "descr": "\"Fixture 'tmpdir_factory'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'monkeypatch'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'recwarn'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'record_property'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'session'", "descr": "\"Fixture 'record_testsuite_property'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'record_xml_attribute'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'session'", "descr": "\"Fixture 'doctest_namespace'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'cache'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'caplog'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'cov'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'no_cover'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "'parametrize() call in test_reader_error'", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'get_direct_param_fixture_func'\"", "where": "''"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "'parametrize() call in test_parse'", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "'parametrize() call in test_parse'", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'get_direct_param_fixture_func'\"", "where": "''"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'get_direct_param_fixture_func'\"", "where": "''"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "'parametrize() call in test_types'", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'get_direct_param_fixture_func'\"", "where": "''"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "'parametrize() call in test_keywords'", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'get_direct_param_fixture_func'\"", "where": "''"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "'parametrize() call in test_nested'", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'get_direct_param_fixture_func'\"", "where": "''"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "'parametrize() call in test_bad_yaml'", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'get_direct_param_fixture_func'\"", "where": "''"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "'parametrize() call in test_required_keys_yaml'", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'get_direct_param_fixture_func'\"", "where": "''"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "'parametrize() call in test_good_yaml'", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'get_direct_param_fixture_func'\"", "where": "''"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "'parametrize() call in test_good_relative_yaml'", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'get_direct_param_fixture_func'\"", "where": "''"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "'parametrize() call in test_external_glob_schema'", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'get_direct_param_fixture_func'\"", "where": "''"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "'parametrize() call in test_good'", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'get_direct_param_fixture_func'\"", "where": "''"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "'parametrize() call in test_vulnerable_schema'", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'get_direct_param_fixture_func'\"", "where": "''"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "'parametrize() call in test_validate_errors'", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'get_direct_param_fixture_func'\"", "where": "''"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'get_direct_param_fixture_func'\"", "where": "''"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'get_direct_param_fixture_func'\"", "where": "''"}, "return_value": "4"}, {"func_args": {"scope": "'class'", "descr": "\"Fixture 'fixture'\"", "where": "'yamale/tests/test_meta_test.py::TestAllYaml'"}, "return_value": "3"}, {"func_args": {"scope": "'class'", "descr": "\"Fixture 'fixture'\"", "where": "'yamale/tests/test_meta_test.py::TestBadYaml'"}, "return_value": "3"}, {"func_args": {"scope": "'class'", "descr": "\"Fixture 'fixture'\"", "where": "'yamale/tests/test_meta_test.py::TestMapYaml'"}, "return_value": "3"}, {"func_args": {"scope": "'class'", "descr": "\"Fixture 'fixture'\"", "where": "'yamale/tests/test_meta_test.py::TestCustomValidator'"}, "return_value": "3"}, {"func_args": {"scope": "'class'", "descr": "\"Fixture 'fixture'\"", "where": "'yamale/tests/test_meta_test.py::TestCustomValidatorWithIncludes'"}, "return_value": "3"}, {"func_args": {"scope": "'class'", "descr": "\"Fixture 'fixture'\"", "where": "'yamale/tests/test_meta_test.py::TestBadRequiredYaml'"}, "return_value": "3"}, {"func_args": {"scope": "'class'", "descr": "\"Fixture 'fixture'\"", "where": "'yamale/tests/test_meta_test.py::TestGoodRequiredYaml'"}, "return_value": "3"}, {"func_args": {"scope": "'class'", "descr": "\"Fixture 'fixture'\"", "where": "'yamale/tests/test_meta_test.py::YamaleTestCase'"}, "return_value": "3"}], "text": "def scope2index(scope, descr, where=None):\n    \"\"\"Look up the index of ``scope`` and raise a descriptive value error\n    if not defined.\n    \"\"\"\n    try:\n        return scopes.index(scope)\n    except ValueError:\n        fail(\n            \"{} {}got an unexpected scope value '{}'\".format(\n                descr, \"from {} \".format(where) if where else \"\", scope\n            ),\n            pytrace=False,\n        )"}, "sort_by_scope": {"line": 1359, "args": [{"func_args": {"arg_name": "'parser'"}, "return_value": "4"}, {"func_args": {"arg_name": "'parser'"}, "return_value": "4"}, {"func_args": {"arg_name": "'use_string'"}, "return_value": "4"}, {"func_args": {"arg_name": "'parser'"}, "return_value": "4"}, {"func_args": {"arg_name": "'parser'"}, "return_value": "4"}, {"func_args": {"arg_name": "'parser'"}, "return_value": "4"}, {"func_args": {"arg_name": "'parser'"}, "return_value": "4"}, {"func_args": {"arg_name": "'parser'"}, "return_value": "4"}, {"func_args": {"arg_name": "'parser'"}, "return_value": "4"}, {"func_args": {"arg_name": "'parser'"}, "return_value": "4"}, {"func_args": {"arg_name": "'parser'"}, "return_value": "4"}, {"func_args": {"arg_name": "'data_map'"}, "return_value": "4"}, {"func_args": {"arg_name": "'schema_filename'"}, "return_value": "4"}, {"func_args": {"arg_name": "'use_schema_string'"}, "return_value": "4"}, {"func_args": {"arg_name": "'use_data_string'"}, "return_value": "4"}, {"func_args": {"arg_name": "'expected_message_re'"}, "return_value": "4"}, {"func_args": {"arg_name": "'_UnitTestCase__pytest_class_setup'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'_UnitTestCase__pytest_class_setup'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'_UnitTestCase__pytest_class_setup'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'_UnitTestCase__pytest_class_setup'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'_UnitTestCase__pytest_class_setup'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'_UnitTestCase__pytest_class_setup'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'_UnitTestCase__pytest_class_setup'"}, "return_value": "3"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}], "text": "def sort_by_scope(arg_name):\n            try:\n                fixturedefs = arg2fixturedefs[arg_name]\n            except KeyError:\n                return scopes.index(\"function\")\n            else:\n                return fixturedefs[-1].scopenum"}, "_parse_fixture_args": {"line": 1037, "args": [{"func_args": {"callable_or_scope": "None", "args": "()", "kwargs": "{'scope': 'class', 'params': None, 'autouse': True, 'ids': None, 'name': None}"}, "return_value": "(None, {'scope': 'class', 'params': None, 'autouse': True, 'ids': None, 'name': None})"}, {"func_args": {"callable_or_scope": "None", "args": "()", "kwargs": "{'scope': 'class', 'params': None, 'autouse': True, 'ids': None, 'name': None}"}, "return_value": "(None, {'scope': 'class', 'params': None, 'autouse': True, 'ids': None, 'name': None})"}, {"func_args": {"callable_or_scope": "None", "args": "()", "kwargs": "{'scope': 'class', 'params': None, 'autouse': True, 'ids': None, 'name': None}"}, "return_value": "(None, {'scope': 'class', 'params': None, 'autouse': True, 'ids': None, 'name': None})"}, {"func_args": {"callable_or_scope": "None", "args": "()", "kwargs": "{'scope': 'class', 'params': None, 'autouse': True, 'ids': None, 'name': None}"}, "return_value": "(None, {'scope': 'class', 'params': None, 'autouse': True, 'ids': None, 'name': None})"}, {"func_args": {"callable_or_scope": "None", "args": "()", "kwargs": "{'scope': 'class', 'params': None, 'autouse': True, 'ids': None, 'name': None}"}, "return_value": "(None, {'scope': 'class', 'params': None, 'autouse': True, 'ids': None, 'name': None})"}, {"func_args": {"callable_or_scope": "None", "args": "()", "kwargs": "{'scope': 'class', 'params': None, 'autouse': True, 'ids': None, 'name': None}"}, "return_value": "(None, {'scope': 'class', 'params': None, 'autouse': True, 'ids': None, 'name': None})"}, {"func_args": {"callable_or_scope": "None", "args": "()", "kwargs": "{'scope': 'class', 'params': None, 'autouse': True, 'ids': None, 'name': None}"}, "return_value": "(None, {'scope': 'class', 'params': None, 'autouse': True, 'ids': None, 'name': None})"}, {"func_args": {"callable_or_scope": "None", "args": "()", "kwargs": "{'scope': 'class', 'params': None, 'autouse': True, 'ids': None, 'name': None}"}, "return_value": "(None, {'scope': 'class', 'params': None, 'autouse': True, 'ids': None, 'name': None})"}], "text": "def _parse_fixture_args(callable_or_scope, *args, **kwargs):\n    arguments = {\n        \"scope\": \"function\",\n        \"params\": None,\n        \"autouse\": False,\n        \"ids\": None,\n        \"name\": None,\n    }\n    kwargs = {\n        key: value for key, value in kwargs.items() if arguments.get(key) != value\n    }\n\n    fixture_function = None\n    if isinstance(callable_or_scope, str):\n        args = list(args)\n        args.insert(0, callable_or_scope)\n    else:\n        fixture_function = callable_or_scope\n\n    positionals = set()\n    for positional, argument_name in zip(args, FIXTURE_ARGS_ORDER):\n        arguments[argument_name] = positional\n        positionals.add(argument_name)\n\n    duplicated_kwargs = {kwarg for kwarg in kwargs.keys() if kwarg in positionals}\n    if duplicated_kwargs:\n        raise TypeError(\n            \"The fixture arguments are defined as positional and keyword: {}. \"\n            \"Use only keyword arguments.\".format(\", \".join(duplicated_kwargs))\n        )\n\n    if positionals:\n        warnings.warn(FIXTURE_POSITIONAL_ARGUMENTS, stacklevel=2)\n\n    arguments.update(kwargs)\n\n    return fixture_function, arguments"}, "scopemismatch": {"line": 676, "args": [{"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'class'"}, "return_value": "False"}], "text": "def scopemismatch(currentscope, newscope):\n    return scopes.index(newscope) > scopes.index(currentscope)"}, "walk": {"line": 1204, "args": [{"func_args": {"node": "[]", "level": "1"}, "return_value": "None"}, {"func_args": {"node": "'cachedir: .tox/py38/.pytest_cache'", "level": "1"}, "return_value": "'cachedir: .tox/py38/.pytest_cache'"}, {"func_args": {"node": "[[], 'cachedir: .tox/py38/.pytest_cache', ['rootdir: /usr/app/src/test_repos/Yamale', 'plugins: cov-2.12.1']]", "level": "0"}, "return_value": "'cachedir: .tox/py38/.pytest_cache'"}, {"func_args": {"node": "'cachedir: .tox/py38/.pytest_cache'", "level": "1"}, "return_value": "None"}, {"func_args": {"node": "'rootdir: /usr/app/src/test_repos/Yamale'", "level": "2"}, "return_value": "'rootdir: /usr/app/src/test_repos/Yamale'"}, {"func_args": {"node": "['rootdir: /usr/app/src/test_repos/Yamale', 'plugins: cov-2.12.1']", "level": "1"}, "return_value": "'rootdir: /usr/app/src/test_repos/Yamale'"}, {"func_args": {"node": "[[], 'cachedir: .tox/py38/.pytest_cache', ['rootdir: /usr/app/src/test_repos/Yamale', 'plugins: cov-2.12.1']]", "level": "0"}, "return_value": "'rootdir: /usr/app/src/test_repos/Yamale'"}, {"func_args": {"node": "'rootdir: /usr/app/src/test_repos/Yamale'", "level": "2"}, "return_value": "None"}, {"func_args": {"node": "'plugins: cov-2.12.1'", "level": "2"}, "return_value": "'plugins: cov-2.12.1'"}, {"func_args": {"node": "['rootdir: /usr/app/src/test_repos/Yamale', 'plugins: cov-2.12.1']", "level": "1"}, "return_value": "'plugins: cov-2.12.1'"}, {"func_args": {"node": "[[], 'cachedir: .tox/py38/.pytest_cache', ['rootdir: /usr/app/src/test_repos/Yamale', 'plugins: cov-2.12.1']]", "level": "0"}, "return_value": "'plugins: cov-2.12.1'"}, {"func_args": {"node": "'plugins: cov-2.12.1'", "level": "2"}, "return_value": "None"}, {"func_args": {"node": "['rootdir: /usr/app/src/test_repos/Yamale', 'plugins: cov-2.12.1']", "level": "1"}, "return_value": "None"}, {"func_args": {"node": "[[], 'cachedir: .tox/py38/.pytest_cache', ['rootdir: /usr/app/src/test_repos/Yamale', 'plugins: cov-2.12.1']]", "level": "0"}, "return_value": "None"}, {"func_args": {"node": "[]", "level": "0"}, "return_value": "None"}], "text": "def walk(node, level):\n        if (\n            ((levels is not None) and (level > levels))\n            or isinstance(node, (str, bytes))\n            or ((base_type is not None) and isinstance(node, base_type))\n        ):\n            yield node\n            return\n\n        try:\n            tree = iter(node)\n        except TypeError:\n            yield node\n            return\n        else:\n            for child in tree:\n                yield from walk(child, level + 1)"}, "collapse": {"line": 1177, "args": [{"func_args": {"iterable": "[[], 'cachedir: .tox/py38/.pytest_cache', ['rootdir: /usr/app/src/test_repos/Yamale', 'plugins: cov-2.12.1']]", "base_type": "None", "levels": "None"}, "return_value": "'cachedir: .tox/py38/.pytest_cache'"}, {"func_args": {"iterable": "[[], 'cachedir: .tox/py38/.pytest_cache', ['rootdir: /usr/app/src/test_repos/Yamale', 'plugins: cov-2.12.1']]", "base_type": "None", "levels": "None"}, "return_value": "'rootdir: /usr/app/src/test_repos/Yamale'"}, {"func_args": {"iterable": "[[], 'cachedir: .tox/py38/.pytest_cache', ['rootdir: /usr/app/src/test_repos/Yamale', 'plugins: cov-2.12.1']]", "base_type": "None", "levels": "None"}, "return_value": "'plugins: cov-2.12.1'"}, {"func_args": {"iterable": "[[], 'cachedir: .tox/py38/.pytest_cache', ['rootdir: /usr/app/src/test_repos/Yamale', 'plugins: cov-2.12.1']]", "base_type": "None", "levels": "None"}, "return_value": "None"}, {"func_args": {"iterable": "[]", "base_type": "None", "levels": "None"}, "return_value": "None"}], "text": "def collapse(iterable, base_type=None, levels=None):\n    \"\"\"Flatten an iterable with multiple levels of nesting (e.g., a list of\n    lists of tuples) into non-iterable types.\n\n        >>> iterable = [(1, 2), ([3, 4], [[5], [6]])]\n        >>> list(collapse(iterable))\n        [1, 2, 3, 4, 5, 6]\n\n    Binary and text strings are not considered iterable and\n    will not be collapsed.\n\n    To avoid collapsing other types, specify *base_type*:\n\n        >>> iterable = ['ab', ('cd', 'ef'), ['gh', 'ij']]\n        >>> list(collapse(iterable, base_type=tuple))\n        ['ab', ('cd', 'ef'), 'gh', 'ij']\n\n    Specify *levels* to stop flattening after a certain level:\n\n    >>> iterable = [('a', ['b']), ('c', ['d'])]\n    >>> list(collapse(iterable))  # Fully flattened\n    ['a', 'b', 'c', 'd']\n    >>> list(collapse(iterable, levels=1))  # Only one level flattened\n    ['a', ['b'], 'c', ['d']]\n\n    \"\"\"\n\n    def walk(node, level):\n        if (\n            ((levels is not None) and (level > levels))\n            or isinstance(node, (str, bytes))\n            or ((base_type is not None) and isinstance(node, base_type))\n        ):\n            yield node\n            return\n\n        try:\n            tree = iter(node)\n        except TypeError:\n            yield node\n            return\n        else:\n            for child in tree:\n                yield from walk(child, level + 1)\n\n    yield from walk(iterable, 0)"}, "version_tnf": {"line": 196, "args": [{"func_args": {"t1": "(0, 15, 1)", "t2": "(0, 16)"}, "return_value": "False"}, {"func_args": {"t1": "(0, 15, 1)", "t2": "(0, 16)"}, "return_value": "False"}, {"func_args": {"t1": "(0, 15, 1)", "t2": "(0, 16)"}, "return_value": "False"}, {"func_args": {"t1": "(0, 15, 1)", "t2": "(0, 16)"}, "return_value": "False"}, {"func_args": {"t1": "(0, 15, 1)", "t2": "(0, 16)"}, "return_value": "False"}, {"func_args": {"t1": "(0, 15, 1)", "t2": "(0, 16)"}, "return_value": "False"}, {"func_args": {"t1": "(0, 15, 1)", "t2": "(0, 16)"}, "return_value": "False"}, {"func_args": {"t1": "(0, 15, 1)", "t2": "(0, 16)"}, "return_value": "False"}, {"func_args": {"t1": "(0, 15, 1)", "t2": "(0, 16)"}, "return_value": "False"}, {"func_args": {"t1": "(0, 15, 1)", "t2": "(0, 16)"}, "return_value": "False"}], "text": "def version_tnf(t1, t2=None):\n    # type: (Any, Any) -> Any\n    \"\"\"\n    return True if ruamel.yaml version_info < t1, None if t2 is specified and bigger else False\n    \"\"\"\n    from ruamel.yaml import version_info  # NOQA\n\n    if version_info < t1:\n        return True\n    if t2 is not None and version_info < t2:\n        return None\n    return False"}, "get_fixture": {"line": 3, "args": [{"func_args": {"relative": "'bad_schema.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/bad_schema.yaml'"}, {"func_args": {"relative": "'empty_schema.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/empty_schema.yaml'"}, {"func_args": {"relative": "'bad_schema_rce.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/bad_schema_rce.yaml'"}, {"func_args": {"relative": "'bad_schema_rce2.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/bad_schema_rce2.yaml'"}, {"func_args": {"relative": "'bad_schema_rce3.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/bad_schema_rce3.yaml'"}, {"func_args": {"relative": "'bad_schema_rce4.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/bad_schema_rce4.yaml'"}, {"func_args": {"relative": "'subset_nodef.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/subset_nodef.yaml'"}, {"func_args": {"relative": "'types.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/types.yaml'"}, {"func_args": {"relative": "'types_bad_data.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/types_bad_data.yaml'"}, {"func_args": {"relative": "'types.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/types.yaml'"}, {"func_args": {"relative": "'types_bad_data.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/types_bad_data.yaml'"}, {"func_args": {"relative": "'types.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/types.yaml'"}, {"func_args": {"relative": "'types_bad_data.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/types_bad_data.yaml'"}, {"func_args": {"relative": "'types.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/types.yaml'"}, {"func_args": {"relative": "'types_bad_data.yaml'"}, "return_value": "'/usr/app/src/test_repos/Yamale/yamale/tests/fixtures/types_bad_data.yaml'"}], "text": "def get_fixture(relative):\n    script_dir = os.path.dirname(__file__)\n    return os.path.join(script_dir, 'fixtures/', relative)"}, "combinable_files": {"line": 55, "args": [{"func_args": {"data_file": "'/usr/app/src/test_repos/Yamale/.coverage'", "data_paths": "None"}, "return_value": "['/usr/app/src/test_repos/Yamale/.coverage.cae2a1e14906.324.449779', '/usr/app/src/test_repos/Yamale/.coverage.cae2a1e14906.333.108125', '/usr/app/src/test_repos/Yamale/.coverage.cae2a1e14906.329.185292', '/usr/app/src/test_repos/Yamale/.coverage.cae2a1e14906.327.108065', '/usr/app/src/test_repos/Yamale/.coverage.cae2a1e14906.328.208406', '/usr/app/src/test_repos/Yamale/.coverage.cae2a1e14906.326.608898']"}], "text": "def combinable_files(data_file, data_paths=None):\n    \"\"\"Make a list of data files to be combined.\n\n    `data_file` is a path to a data file.  `data_paths` is a list of files or\n    directories of files.\n\n    Returns a list of absolute file paths.\n    \"\"\"\n    data_dir, local = os.path.split(os.path.abspath(data_file))\n\n    data_paths = data_paths or [data_dir]\n    files_to_combine = []\n    for p in data_paths:\n        if os.path.isfile(p):\n            files_to_combine.append(os.path.abspath(p))\n        elif os.path.isdir(p):\n            pattern = os.path.join(os.path.abspath(p), f\"{local}.*\")\n            files_to_combine.extend(glob.glob(pattern))\n        else:\n            raise NoDataError(f\"Couldn't combine from non-existent path '{p}'\")\n    return files_to_combine"}, "_line_ranges": {"line": 270, "args": [{"func_args": {"statements": "{1, 2, 3}", "lines": "set()"}, "return_value": "[]"}, {"func_args": {"statements": "{4, 11, 12, 13, 14, 15, 16, 18, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 41, 42, 43, 44, 45, 46, 47, 50, 54, 55, 56, 57, 58, 60, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 85, 87, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 102, 103, 105, 108, 109, 110, 112, 114, 116, 118, 120, 121, 122, 123, 124, 125, 126, 129, 130}", "lines": "{130, 32, 42, 47, 67, 85, 109, 110, 112, 114, 116, 118, 120, 121, 122, 123, 124, 125, 126}"}, "return_value": "[(32, 32), (42, 42), (47, 47), (67, 67), (85, 85), (109, 126), (130, 130)]"}, {"func_args": {"statements": "{1, 3}", "lines": "set()"}, "return_value": "[]"}, {"func_args": {"statements": "set()", "lines": "set()"}, "return_value": "[]"}, {"func_args": {"statements": "{1, 2, 3, 5, 8, 9, 10, 11}", "lines": "set()"}, "return_value": "[]"}, {"func_args": {"statements": "{1, 2, 3, 4, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 20, 21, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 46, 47, 48, 49}", "lines": "set()"}, "return_value": "[]"}, {"func_args": {"statements": "{1, 2, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 20, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37}", "lines": "{9, 10, 29, 30}"}, "return_value": "[(9, 10), (29, 30)]"}, {"func_args": {"statements": "{1}", "lines": "set()"}, "return_value": "[]"}, {"func_args": {"statements": "{1, 3, 4, 6, 7, 8, 9, 11, 12, 14, 15}", "lines": "{15}"}, "return_value": "[(15, 15)]"}, {"func_args": {"statements": "{1, 2, 3, 4, 7, 13, 14, 15, 16, 17, 22, 24, 25, 26, 28, 30, 34, 35, 36, 40, 43, 45, 46, 47, 48, 50, 51, 53, 54, 55, 56, 58, 64, 65, 66, 67, 68, 70, 71, 73, 74, 76, 78, 86, 87, 92, 94, 97, 99, 101, 102, 104, 105, 107, 108, 110, 111, 113, 114, 116, 118, 119, 120, 122, 123, 125, 127, 128, 129, 130, 131, 132, 134, 135, 140, 142, 143, 145, 146, 148, 149, 150, 151, 152, 153, 155, 157, 158, 160, 162, 163, 164, 165, 167, 168, 173, 174, 175, 177, 179, 180, 181, 182, 183, 185, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 204, 205, 207, 208, 209, 210, 211, 212, 213, 215, 216, 218, 219, 221, 222, 224}", "lines": "{205, 123, 165}"}, "return_value": "[(123, 123), (165, 165), (205, 205)]"}, {"func_args": {"statements": "{1, 2, 3, 5, 6, 8, 9, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30}", "lines": "{20}"}, "return_value": "[(20, 20)]"}, {"func_args": {"statements": "{1}", "lines": "set()"}, "return_value": "[]"}, {"func_args": {"statements": "{1, 3, 5, 6, 9, 11, 12, 13, 14, 15, 16, 18, 19, 21, 23, 24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 39, 40, 42, 45, 46}", "lines": "set()"}, "return_value": "[]"}, {"func_args": {"statements": "set()", "lines": "set()"}, "return_value": "[]"}, {"func_args": {"statements": "{1, 3, 4, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 29, 30, 32, 35, 36, 37, 40, 41, 42}", "lines": "set()"}, "return_value": "[]"}, {"func_args": {"statements": "{1, 4, 5, 6}", "lines": "set()"}, "return_value": "[]"}, {"func_args": {"statements": "{1, 3, 5, 6, 8, 10, 13, 14, 15, 16, 19, 22, 23, 24, 25, 28, 31, 32, 33, 38, 39, 40, 45, 46, 47, 52, 53, 54, 59, 60, 65, 66, 67, 72, 73, 74, 78, 81, 82, 83, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97}", "lines": "set()"}, "return_value": "[]"}, {"func_args": {"statements": "{1, 2, 3, 4, 6, 7, 9, 15, 21, 27, 33, 40, 47, 53, 58, 63, 68, 74, 80, 86, 91, 96, 102, 108, 114, 120, 126, 132, 138, 146, 152, 161, 167, 171, 186, 187, 188, 189, 191, 194, 196, 199, 200, 203, 204, 205, 206, 207, 210, 211, 212, 213, 214, 217, 218, 221, 222, 225, 226, 236, 238, 239, 242, 243, 246, 247, 250, 251, 253, 254, 256, 257, 260, 261, 264, 265, 268, 269, 270, 275, 276, 277, 278, 281, 282, 283, 284, 287, 291, 292, 293, 294, 297, 298, 299, 304, 305, 306, 312, 313, 314, 320, 321, 322, 327, 328, 329, 334, 335, 336, 341, 342, 343, 348, 349, 350, 355, 356, 360, 365, 366, 372, 376, 377, 380, 384, 385, 389, 393, 394, 398, 402, 403, 404, 406, 408, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 426, 427, 428, 429, 435, 436, 437, 439, 440, 441, 442, 445, 446, 447, 448, 449}", "lines": "set()"}, "return_value": "[]"}, {"func_args": {"statements": "{1, 2, 3, 4, 7, 10, 11, 12, 13, 15, 16, 19, 20, 21, 22, 24, 25, 28, 29, 30, 31, 36, 37, 49, 51, 52, 54, 55, 58, 59, 60, 61, 63, 64, 65, 66, 69, 70, 71, 72, 74, 75, 76, 77, 80, 81, 82, 83, 85, 86, 89, 90, 91, 92, 94, 95}", "lines": "set()"}, "return_value": "[]"}, {"func_args": {"statements": "{2, 3, 4, 5, 9, 10, 12, 13, 15, 16, 18, 19, 20, 22, 23, 26, 27, 30, 31, 34, 35, 36, 37, 38, 41, 42, 43, 45, 48, 62, 63, 66, 67, 70, 72, 73, 76, 77, 80, 81}", "lines": "{67, 4, 5, 73, 12, 13, 15, 16}"}, "return_value": "[(4, 5), (12, 16), (67, 67), (73, 73)]"}, {"func_args": {"statements": "{1, 2}", "lines": "set()"}, "return_value": "[]"}, {"func_args": {"statements": "{1, 3, 4, 6, 7, 8, 11, 14, 17, 21, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 35, 36, 38, 40, 42, 44, 45, 47, 53, 56, 57, 58, 59, 62, 63, 64, 65, 66, 68, 70, 72, 73, 75, 77, 79, 80, 82, 84, 87}", "lines": "{80, 42, 29}"}, "return_value": "[(29, 29), (42, 42), (80, 80)]"}, {"func_args": {"statements": "{1, 2, 3, 4, 6, 7, 8, 11, 12, 13, 15, 16, 18, 19, 20, 21, 23, 24, 25, 26, 27, 30, 32, 34, 36, 38, 39, 40, 42, 43, 45, 46, 47, 49, 50, 51, 53, 54, 56, 58, 59, 62, 63, 65, 66, 67, 69, 70, 72, 73, 76, 77, 79, 80, 81, 83, 84, 86, 87, 90, 91, 92, 94, 95, 97, 98, 101, 102, 103, 105, 106, 108, 109, 112, 113, 114, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 129, 130, 131, 133, 135, 136, 137, 138, 140, 142, 144, 146, 147, 150, 151, 152, 154, 156, 157, 158, 159, 161, 162, 163, 165, 167, 169, 171, 172, 175, 176, 177, 179, 181, 182, 183, 184, 186, 187, 188, 190, 192, 194, 196, 197, 200, 201, 202, 204, 206, 207, 208, 209, 211, 213, 214, 215, 216, 218, 220, 221, 224, 225, 226, 228, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 242, 243, 244, 245, 247, 249, 250, 253, 254, 255, 257, 258, 259, 260, 261, 262, 264, 265}", "lines": "{260, 261, 138, 234, 235, 45, 46, 47, 236, 184, 218, 59, 159}"}, "return_value": "[(45, 47), (59, 59), (138, 138), (159, 159), (184, 184), (218, 218), (234, 236), (260, 261)]"}, {"func_args": {"statements": "set()", "lines": "set()"}, "return_value": "[]"}, {"func_args": {"statements": "{1, 2, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 119, 121, 122, 123, 124, 125, 128, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158}", "lines": "set()"}, "return_value": "[]"}, {"func_args": {"statements": "{1, 2, 5, 9, 10, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 47, 48, 49, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 138, 140, 141, 142, 143, 144}", "lines": "set()"}, "return_value": "[]"}, {"func_args": {"statements": "{1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 15, 17, 18, 26, 27, 30, 32, 33, 34, 36, 37, 40, 42, 43, 44, 46, 47, 50, 52, 54, 55, 58, 60, 62, 63, 64, 66, 67, 69, 70, 73, 75, 76, 77, 79, 80, 83, 85, 86, 87, 89, 90, 93, 95, 96, 98, 99, 100, 102, 103, 106, 108, 109, 111, 112, 113, 115, 116, 119, 121, 123, 124, 125, 126, 128, 129, 131, 132, 135, 137, 139, 140, 141, 143, 144, 146, 148, 150, 151, 152, 153, 154, 155, 157, 158, 160, 162, 164, 165, 166, 168, 169, 170, 173, 175, 176, 178, 179, 182, 184, 185, 187, 188, 190, 191, 192, 194, 196, 198, 199, 201, 202, 205, 207, 208, 210, 211, 213, 214, 215, 216, 217, 218, 221, 223, 225, 226, 227, 235, 237, 239, 240}", "lines": "{132, 11, 12}"}, "return_value": "[(11, 12), (132, 132)]"}, {"func_args": {"statements": "{2, 3, 6, 9, 10, 11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 24, 27, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44}", "lines": "set()"}, "return_value": "[]"}, {"func_args": {"statements": "{1, 2, 3, 4, 5}", "lines": "set()"}, "return_value": "[]"}, {"func_args": {"statements": "{1, 2, 3, 5, 7, 10, 17, 18, 19, 21, 22, 23, 24, 26, 27, 29, 30, 32, 33, 34, 37, 40, 42, 43, 45, 46, 47, 48}", "lines": "{27, 47}"}, "return_value": "[(27, 27), (47, 47)]"}], "text": "def _line_ranges(statements, lines):\n    \"\"\"Produce a list of ranges for `format_lines`.\"\"\"\n    statements = sorted(statements)\n    lines = sorted(lines)\n\n    pairs = []\n    start = None\n    lidx = 0\n    for stmt in statements:\n        if lidx >= len(lines):\n            break\n        if stmt == lines[lidx]:\n            lidx += 1\n            if not start:\n                start = stmt\n            end = stmt\n        elif start:\n            pairs.append((start, end))\n            start = None\n    if start:\n        pairs.append((start, end))\n    return pairs"}, "format_lines": {"line": 294, "args": [{"func_args": {"statements": "{1, 2, 3}", "lines": "set()", "arcs": "None"}, "return_value": "''"}, {"func_args": {"statements": "{4, 11, 12, 13, 14, 15, 16, 18, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 41, 42, 43, 44, 45, 46, 47, 50, 54, 55, 56, 57, 58, 60, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 85, 87, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 102, 103, 105, 108, 109, 110, 112, 114, 116, 118, 120, 121, 122, 123, 124, 125, 126, 129, 130}", "lines": "{130, 32, 42, 47, 67, 85, 109, 110, 112, 114, 116, 118, 120, 121, 122, 123, 124, 125, 126}", "arcs": "None"}, "return_value": "'32, 42, 47, 67, 85, 109-126, 130'"}, {"func_args": {"statements": "{1, 3}", "lines": "set()", "arcs": "None"}, "return_value": "''"}, {"func_args": {"statements": "set()", "lines": "set()", "arcs": "None"}, "return_value": "''"}, {"func_args": {"statements": "{1, 2, 3, 5, 8, 9, 10, 11}", "lines": "set()", "arcs": "None"}, "return_value": "''"}, {"func_args": {"statements": "{1, 2, 3, 4, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 20, 21, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 46, 47, 48, 49}", "lines": "set()", "arcs": "None"}, "return_value": "''"}, {"func_args": {"statements": "{1, 2, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 20, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37}", "lines": "{9, 10, 29, 30}", "arcs": "None"}, "return_value": "'9-10, 29-30'"}, {"func_args": {"statements": "{1}", "lines": "set()", "arcs": "None"}, "return_value": "''"}, {"func_args": {"statements": "{1, 3, 4, 6, 7, 8, 9, 11, 12, 14, 15}", "lines": "{15}", "arcs": "None"}, "return_value": "'15'"}, {"func_args": {"statements": "{1, 2, 3, 4, 7, 13, 14, 15, 16, 17, 22, 24, 25, 26, 28, 30, 34, 35, 36, 40, 43, 45, 46, 47, 48, 50, 51, 53, 54, 55, 56, 58, 64, 65, 66, 67, 68, 70, 71, 73, 74, 76, 78, 86, 87, 92, 94, 97, 99, 101, 102, 104, 105, 107, 108, 110, 111, 113, 114, 116, 118, 119, 120, 122, 123, 125, 127, 128, 129, 130, 131, 132, 134, 135, 140, 142, 143, 145, 146, 148, 149, 150, 151, 152, 153, 155, 157, 158, 160, 162, 163, 164, 165, 167, 168, 173, 174, 175, 177, 179, 180, 181, 182, 183, 185, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 204, 205, 207, 208, 209, 210, 211, 212, 213, 215, 216, 218, 219, 221, 222, 224}", "lines": "{205, 123, 165}", "arcs": "None"}, "return_value": "'123, 165, 205'"}, {"func_args": {"statements": "{1, 2, 3, 5, 6, 8, 9, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30}", "lines": "{20}", "arcs": "None"}, "return_value": "'20'"}, {"func_args": {"statements": "{1}", "lines": "set()", "arcs": "None"}, "return_value": "''"}, {"func_args": {"statements": "{1, 3, 5, 6, 9, 11, 12, 13, 14, 15, 16, 18, 19, 21, 23, 24, 25, 26, 27, 28, 29, 31, 36, 37, 38, 39, 40, 42, 45, 46}", "lines": "set()", "arcs": "None"}, "return_value": "''"}, {"func_args": {"statements": "set()", "lines": "set()", "arcs": "None"}, "return_value": "''"}, {"func_args": {"statements": "{1, 3, 4, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 29, 30, 32, 35, 36, 37, 40, 41, 42}", "lines": "set()", "arcs": "None"}, "return_value": "''"}, {"func_args": {"statements": "{1, 4, 5, 6}", "lines": "set()", "arcs": "None"}, "return_value": "''"}, {"func_args": {"statements": "{1, 3, 5, 6, 8, 10, 13, 14, 15, 16, 19, 22, 23, 24, 25, 28, 31, 32, 33, 38, 39, 40, 45, 46, 47, 52, 53, 54, 59, 60, 65, 66, 67, 72, 73, 74, 78, 81, 82, 83, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97}", "lines": "set()", "arcs": "None"}, "return_value": "''"}, {"func_args": {"statements": "{1, 2, 3, 4, 6, 7, 9, 15, 21, 27, 33, 40, 47, 53, 58, 63, 68, 74, 80, 86, 91, 96, 102, 108, 114, 120, 126, 132, 138, 146, 152, 161, 167, 171, 186, 187, 188, 189, 191, 194, 196, 199, 200, 203, 204, 205, 206, 207, 210, 211, 212, 213, 214, 217, 218, 221, 222, 225, 226, 236, 238, 239, 242, 243, 246, 247, 250, 251, 253, 254, 256, 257, 260, 261, 264, 265, 268, 269, 270, 275, 276, 277, 278, 281, 282, 283, 284, 287, 291, 292, 293, 294, 297, 298, 299, 304, 305, 306, 312, 313, 314, 320, 321, 322, 327, 328, 329, 334, 335, 336, 341, 342, 343, 348, 349, 350, 355, 356, 360, 365, 366, 372, 376, 377, 380, 384, 385, 389, 393, 394, 398, 402, 403, 404, 406, 408, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 426, 427, 428, 429, 435, 436, 437, 439, 440, 441, 442, 445, 446, 447, 448, 449}", "lines": "set()", "arcs": "None"}, "return_value": "''"}, {"func_args": {"statements": "{1, 2, 3, 4, 7, 10, 11, 12, 13, 15, 16, 19, 20, 21, 22, 24, 25, 28, 29, 30, 31, 36, 37, 49, 51, 52, 54, 55, 58, 59, 60, 61, 63, 64, 65, 66, 69, 70, 71, 72, 74, 75, 76, 77, 80, 81, 82, 83, 85, 86, 89, 90, 91, 92, 94, 95}", "lines": "set()", "arcs": "None"}, "return_value": "''"}, {"func_args": {"statements": "{2, 3, 4, 5, 9, 10, 12, 13, 15, 16, 18, 19, 20, 22, 23, 26, 27, 30, 31, 34, 35, 36, 37, 38, 41, 42, 43, 45, 48, 62, 63, 66, 67, 70, 72, 73, 76, 77, 80, 81}", "lines": "{67, 4, 5, 73, 12, 13, 15, 16}", "arcs": "None"}, "return_value": "'4-5, 12-16, 67, 73'"}, {"func_args": {"statements": "{1, 2}", "lines": "set()", "arcs": "None"}, "return_value": "''"}, {"func_args": {"statements": "{1, 3, 4, 6, 7, 8, 11, 14, 17, 21, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 35, 36, 38, 40, 42, 44, 45, 47, 53, 56, 57, 58, 59, 62, 63, 64, 65, 66, 68, 70, 72, 73, 75, 77, 79, 80, 82, 84, 87}", "lines": "{80, 42, 29}", "arcs": "None"}, "return_value": "'29, 42, 80'"}, {"func_args": {"statements": "{1, 2, 3, 4, 6, 7, 8, 11, 12, 13, 15, 16, 18, 19, 20, 21, 23, 24, 25, 26, 27, 30, 32, 34, 36, 38, 39, 40, 42, 43, 45, 46, 47, 49, 50, 51, 53, 54, 56, 58, 59, 62, 63, 65, 66, 67, 69, 70, 72, 73, 76, 77, 79, 80, 81, 83, 84, 86, 87, 90, 91, 92, 94, 95, 97, 98, 101, 102, 103, 105, 106, 108, 109, 112, 113, 114, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 129, 130, 131, 133, 135, 136, 137, 138, 140, 142, 144, 146, 147, 150, 151, 152, 154, 156, 157, 158, 159, 161, 162, 163, 165, 167, 169, 171, 172, 175, 176, 177, 179, 181, 182, 183, 184, 186, 187, 188, 190, 192, 194, 196, 197, 200, 201, 202, 204, 206, 207, 208, 209, 211, 213, 214, 215, 216, 218, 220, 221, 224, 225, 226, 228, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 242, 243, 244, 245, 247, 249, 250, 253, 254, 255, 257, 258, 259, 260, 261, 262, 264, 265}", "lines": "{260, 261, 138, 234, 235, 45, 46, 47, 236, 184, 218, 59, 159}", "arcs": "None"}, "return_value": "'45-47, 59, 138, 159, 184, 218, 234-236, 260-261'"}, {"func_args": {"statements": "set()", "lines": "set()", "arcs": "None"}, "return_value": "''"}, {"func_args": {"statements": "{1, 2, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 119, 121, 122, 123, 124, 125, 128, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158}", "lines": "set()", "arcs": "None"}, "return_value": "''"}, {"func_args": {"statements": "{1, 2, 5, 9, 10, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 47, 48, 49, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 138, 140, 141, 142, 143, 144}", "lines": "set()", "arcs": "None"}, "return_value": "''"}, {"func_args": {"statements": "{1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 15, 17, 18, 26, 27, 30, 32, 33, 34, 36, 37, 40, 42, 43, 44, 46, 47, 50, 52, 54, 55, 58, 60, 62, 63, 64, 66, 67, 69, 70, 73, 75, 76, 77, 79, 80, 83, 85, 86, 87, 89, 90, 93, 95, 96, 98, 99, 100, 102, 103, 106, 108, 109, 111, 112, 113, 115, 116, 119, 121, 123, 124, 125, 126, 128, 129, 131, 132, 135, 137, 139, 140, 141, 143, 144, 146, 148, 150, 151, 152, 153, 154, 155, 157, 158, 160, 162, 164, 165, 166, 168, 169, 170, 173, 175, 176, 178, 179, 182, 184, 185, 187, 188, 190, 191, 192, 194, 196, 198, 199, 201, 202, 205, 207, 208, 210, 211, 213, 214, 215, 216, 217, 218, 221, 223, 225, 226, 227, 235, 237, 239, 240}", "lines": "{132, 11, 12}", "arcs": "None"}, "return_value": "'11-12, 132'"}, {"func_args": {"statements": "{2, 3, 6, 9, 10, 11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 24, 27, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44}", "lines": "set()", "arcs": "None"}, "return_value": "''"}, {"func_args": {"statements": "{1, 2, 3, 4, 5}", "lines": "set()", "arcs": "None"}, "return_value": "''"}, {"func_args": {"statements": "{1, 2, 3, 5, 7, 10, 17, 18, 19, 21, 22, 23, 24, 26, 27, 29, 30, 32, 33, 34, 37, 40, 42, 43, 45, 46, 47, 48}", "lines": "{27, 47}", "arcs": "None"}, "return_value": "'27, 47'"}], "text": "def format_lines(statements, lines, arcs=None):\n    \"\"\"Nicely format a list of line numbers.\n\n    Format a list of line numbers for printing by coalescing groups of lines as\n    long as the lines represent consecutive statements.  This will coalesce\n    even if there are gaps between statements.\n\n    For example, if `statements` is [1,2,3,4,5,10,11,12,13,14] and\n    `lines` is [1,2,5,10,11,13,14] then the result will be \"1-2, 5-11, 13-14\".\n\n    Both `lines` and `statements` can be any iterable. All of the elements of\n    `lines` must be in `statements`, and all of the values must be positive\n    integers.\n\n    If `arcs` is provided, they are (start,[end,end,end]) pairs that will be\n    included in the output as long as start isn't in `lines`.\n\n    \"\"\"\n    line_items = [(pair[0], nice_pair(pair)) for pair in _line_ranges(statements, lines)]\n    if arcs:\n        line_exits = sorted(arcs)\n        for line, exits in line_exits:\n            for ex in sorted(exits):\n                if line not in lines and ex not in lines:\n                    dest = (ex if ex > 0 else \"exit\")\n                    line_items.append((line, f\"{line}->{dest}\"))\n\n    ret = ', '.join(t[-1] for t in sorted(line_items))\n    return ret"}, "source_encoding": {"line": 184, "args": [{"func_args": {"source": "b'from .yamale import make_schema, make_data, validate\\nfrom .yamale_testcase import YamaleTestCase\\nfrom .yamale_error import YamaleError'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'#!/usr/bin/env python\\n# -*- coding: utf-8 -*-\\n\\n\"\"\"\\n    Validate yaml files and check them against their schemas. Designed to be used outside of Vagrant.\\n\\n    Just install Yamale:\\n        pip install yamale\\n\"\"\"\\n\\nimport argparse\\nimport glob\\nimport os\\nfrom multiprocessing import Pool\\nfrom .yamale_error import YamaleError\\nfrom .schema.validationresults import Result\\n\\nimport yamale\\n\\nschemas = {}\\n\\n\\ndef _validate(schema_path, data_path, parser, strict, _raise_error):\\n    schema = schemas.get(schema_path)\\n    try:\\n        if not schema:\\n            schema = yamale.make_schema(schema_path, parser)\\n            schemas[schema_path] = schema\\n    except (SyntaxError, ValueError) as e:\\n        results = [Result([str(e)])]\\n        if not _raise_error:\\n            return results\\n        raise YamaleError(results)\\n    data = yamale.make_data(data_path, parser)\\n    return yamale.validate(schema, data, strict, _raise_error)\\n\\n\\ndef _find_data_path_schema(data_path, schema_name):\\n    \"\"\" Starts in the data file folder and recursively looks\\n    in parents for `schema_name` \"\"\"\\n    if not data_path or data_path == os.path.abspath(os.sep) or data_path == \\'.\\':\\n        return None\\n    directory = os.path.dirname(data_path)\\n    path = glob.glob(os.path.join(directory, schema_name))\\n    if not path:\\n        return _find_schema(directory, schema_name)\\n    return path[0]\\n\\n\\ndef _find_schema(data_path, schema_name):\\n    \"\"\" Checks if `schema_name` is a valid file, if not\\n    searches in `data_path` for it. \"\"\"\\n\\n    directory = os.path.dirname(data_path)\\n    path = glob.glob(os.path.join(directory, schema_name))\\n    for p in path:\\n        if os.path.isfile(p):\\n            return p\\n\\n    return _find_data_path_schema(data_path, schema_name)\\n\\n\\ndef _validate_single(yaml_path, schema_name, parser, strict):\\n    print(\\'Validating %s...\\' % yaml_path)\\n    s = _find_schema(yaml_path, schema_name)\\n    if not s:\\n        raise ValueError(\"Invalid schema name for \\'{}\\' or schema not found.\".format(schema_name))\\n    _validate(s, yaml_path, parser, strict, True)\\n\\n\\ndef _validate_dir(root, schema_name, cpus, parser, strict):\\n    pool = Pool(processes=cpus)\\n    res = []\\n    error_messages = []\\n    print(\\'Finding yaml files...\\')\\n    for root, dirs, files in os.walk(root):\\n        for f in files:\\n            if (f.endswith(\\'.yaml\\') or f.endswith(\\'.yml\\')) and f != schema_name:\\n                d = os.path.join(root, f)\\n                s = _find_schema(d, schema_name)\\n                if s:\\n                    res.append(pool.apply_async(_validate,\\n                                                (s, d, parser, strict, False)))\\n                else:\\n                    print(\\'No schema found for: %s\\' % d)\\n\\n    print(\\'Found %s yaml files.\\' % len(res))\\n    print(\\'Validating...\\')\\n    for r in res:\\n        sub_results = r.get(timeout=300)\\n        error_messages.extend([str(sub_result)\\n                               for sub_result in sub_results\\n                               if not sub_result.isValid()])\\n    pool.close()\\n    pool.join()\\n    if error_messages:\\n        raise ValueError(\\'\\\\n----\\\\n\\'.join(set(error_messages)))\\n\\n\\ndef _router(root, schema_name, cpus, parser, strict=True):\\n    root = os.path.abspath(root)\\n    if os.path.isfile(root):\\n        _validate_single(root, schema_name, parser, strict)\\n    else:\\n        _validate_dir(root, schema_name, cpus, parser, strict)\\n\\n\\ndef main():\\n    parser = argparse.ArgumentParser(description=\\'Validate yaml files.\\')\\n    parser.add_argument(\\'path\\', metavar=\\'PATH\\', default=\\'./\\', nargs=\\'?\\',\\n                        help=\\'folder to validate. Default is current directory.\\')\\n    parser.add_argument(\\'-s\\', \\'--schema\\', default=\\'schema.yaml\\',\\n                        help=\\'filename of schema. Default is schema.yaml.\\')\\n    parser.add_argument(\\'-n\\', \\'--cpu-num\\', default=4, type=int,\\n                        help=\\'number of CPUs to use. Default is 4.\\')\\n    parser.add_argument(\\'-p\\', \\'--parser\\', default=\\'pyyaml\\',\\n                        help=\\'YAML library to load files. Choices are \"ruamel\" or \"pyyaml\" (default).\\')\\n    parser.add_argument(\\'--no-strict\\', action=\\'store_true\\',\\n                        help=\\'Disable strict mode, unexpected elements in the data will be accepted.\\')\\n    args = parser.parse_args()\\n    try:\\n        _router(args.path, args.schema, args.cpu_num, args.parser, not args.no_strict)\\n        print(\\'Validation success! \\xf0\\x9f\\x91\\x8d\\')\\n    except (SyntaxError, NameError, TypeError, ValueError) as e:\\n        print(\\'Validation failed!\\\\n%s\\' % str(e))\\n        exit(1)\\n\\n\\nif __name__ == \\'__main__\\':\\n    main()\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'from . import yaml_reader\\n\\nparse_yaml = yaml_reader.parse_yaml\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b''"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b\"import pytest\\nfrom pytest import raises\\nfrom .. import parse_yaml\\n\\nparsers = ['pyyaml', 'PyYAML', 'ruamel']\\n\\n\\n@pytest.mark.parametrize('parser', parsers)\\ndef test_reader_error(parser):\\n    with raises(IOError):\\n        parse_yaml('wat', parser)\\n\""}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'import io\\nimport pytest\\nfrom .. import yaml_reader\\nfrom yamale.tests import get_fixture\\n\\nparsers = [\\'pyyaml\\', \\'PyYAML\\', \\'ruamel\\']\\nTYPES = get_fixture(\\'types.yaml\\')\\nNESTED = get_fixture(\\'nested.yaml\\')\\nKEYWORDS = get_fixture(\\'keywords.yaml\\')\\n\\n\\n@pytest.mark.parametrize(\\'parser\\', parsers)\\n@pytest.mark.parametrize(\\'use_string\\', [True, False])\\ndef test_parse(parser, use_string):\\n    if use_string:\\n        with io.open(TYPES, encoding=\\'utf-8\\') as f:\\n            content = f.read()\\n        a = yaml_reader.parse_yaml(parser=parser, content=content)[0]\\n    else:\\n        a = yaml_reader.parse_yaml(TYPES, parser)[0]\\n    assert a[\\'string\\'] == \\'str()\\'\\n\\n\\ndef test_parse_validates_arguments():\\n    with pytest.raises(TypeError):\\n        yaml_reader.parse_yaml(path=TYPES, content=\"name: Bob\")\\n    with pytest.raises(TypeError):\\n        yaml_reader.parse_yaml(path=None, content=None)\\n\\n\\n@pytest.mark.parametrize(\\'parser\\', parsers)\\ndef test_types(parser):\\n    t = yaml_reader.parse_yaml(TYPES, parser)[0]\\n    assert t[\\'string\\'] == \\'str()\\'\\n    assert t[\\'number\\'] == \\'num()\\'\\n    assert t[\\'boolean\\'] == \\'bool()\\'\\n    assert t[\\'integer\\'] == \\'int()\\'\\n\\n\\n@pytest.mark.parametrize(\\'parser\\', parsers)\\ndef test_keywords(parser):\\n    t = yaml_reader.parse_yaml(KEYWORDS, parser)[0]\\n    assert t[\\'optional_min\\'] == \\'int(min=1, required=False)\\'\\n\\n\\n@pytest.mark.parametrize(\\'parser\\', parsers)\\ndef test_nested(parser):\\n    t = yaml_reader.parse_yaml(NESTED, parser)[0]\\n    assert t[\\'list\\'][-1][\\'string\\'] == \\'str()\\'\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'from __future__ import absolute_import\\nfrom io import StringIO\\n\\n\\ndef _pyyaml(f):\\n    import yaml\\n    try:\\n        Loader = yaml.CSafeLoader\\n    except AttributeError:  # System does not have libyaml\\n        Loader = yaml.SafeLoader\\n    return list(yaml.load_all(f, Loader=Loader))\\n\\n\\ndef _ruamel(f):\\n    from ruamel.yaml import YAML\\n    yaml = YAML(typ=\\'safe\\')\\n    return list(yaml.load_all(f))\\n\\n\\n_parsers = {\\n    \\'pyyaml\\': _pyyaml,\\n    \\'ruamel\\': _ruamel\\n}\\n\\n\\ndef parse_yaml(path=None, parser=\\'pyyaml\\', content=None):\\n    try:\\n        parse = _parsers[parser.lower()]\\n    except KeyError:\\n        raise NameError(\\'Parser \"\\' + parser + \\'\" is not supported\\\\nAvailable parsers are listed below:\\\\nPyYAML\\\\nruamel\\')\\n    if (path is None and content is None) or (path is not None and content is not None):\\n        raise TypeError(\"Pass either path= or content=, not both\")\\n    if path is not None:\\n        with open(path) as f:\\n            return parse(f)\\n    else:\\n        return parse(StringIO(content))\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'from .schema import Schema\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b\"class DataPath(object):\\n\\n    def __init__(self, *path):\\n        self._path = path\\n\\n    def __add__(self, other):\\n        dp = DataPath()\\n        dp._path = self._path + other._path\\n        return dp\\n\\n    def __str__(self):\\n        return '.'.join(map(str, (self._path)))\\n\\n    def __repr__(self):\\n        return 'DataPath({})'.format(repr(self._path))\\n\""}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'from .datapath import DataPath\\nfrom .validationresults import ValidationResult\\nfrom .. import syntax, util\\nfrom .. import validators as val\\n\\n\\nclass Schema(object):\\n    \"\"\"\\n    Makes a Schema object from a schema dict.\\n    Still acts like a dict.\\n    \"\"\"\\n\\n    def __init__(self, schema_dict, name=\\'\\', validators=None, includes=None):\\n        self.validators = validators or val.DefaultValidators\\n        self.dict = schema_dict\\n        self.name = name\\n        self._schema = self._process_schema(DataPath(),\\n                                            schema_dict,\\n                                            self.validators)\\n        # if this schema is included it shares the includes with the top level\\n        # schema\\n        self.includes = {} if includes is None else includes\\n\\n    def add_include(self, type_dict):\\n        for include_name, custom_type in type_dict.items():\\n            t = Schema(custom_type, name=include_name,\\n                       validators=self.validators, includes=self.includes)\\n            self.includes[include_name] = t\\n\\n    def _process_schema(self, path, schema_data, validators):\\n        \"\"\"\\n        Go through a schema and construct validators.\\n        \"\"\"\\n        if util.is_map(schema_data) or util.is_list(schema_data):\\n            for key, data in util.get_iter(schema_data):\\n                schema_data[key] = self._process_schema(path + DataPath(key),\\n                                                        data,\\n                                                        validators)\\n        else:\\n            schema_data = self._parse_schema_item(path,\\n                                                  schema_data,\\n                                                  validators)\\n        return schema_data\\n\\n    def _parse_schema_item(self, path, expression, validators):\\n        try:\\n            return syntax.parse(expression, validators)\\n        except SyntaxError as e:\\n            # Tack on some more context and rethrow.\\n            error = str(e) + \\' at node \\\\\\'%s\\\\\\'\\' % str(path)\\n            raise SyntaxError(error)\\n\\n    def validate(self, data, data_name, strict):\\n        path = DataPath()\\n        errors = self._validate(self._schema, data, path, strict)\\n        return ValidationResult(data_name, self.name, errors)\\n\\n    def _validate_item(self, validator, data, path, strict, key):\\n        \"\"\"\\n        Fetch item from data at the position key and validate with validator.\\n\\n        Returns an array of errors.\\n        \"\"\"\\n        errors = []\\n        path = path + DataPath(key)\\n        try:  # Pull value out of data. Data can be a map or a list/sequence\\n            data_item = data[key]\\n        except (KeyError, IndexError):  # Oops, that field didn\\'t exist.\\n            # Optional? Who cares.\\n            if isinstance(validator, val.Validator) and validator.is_optional:\\n                return errors\\n            # SHUT DOWN EVERYTHING\\n            errors.append(\\'%s: Required field missing\\' % path)\\n            return errors\\n\\n        return self._validate(validator, data_item, path, strict)\\n\\n    def _validate(self, validator, data, path, strict):\\n        \"\"\"\\n        Validate data with validator.\\n        Special handling of non-primitive validators.\\n\\n        Returns an array of errors.\\n        \"\"\"\\n\\n        if util.is_list(validator) or util.is_map(validator):\\n            return self._validate_static_map_list(validator,\\n                                                  data,\\n                                                  path,\\n                                                  strict)\\n\\n        errors = []\\n        # Optional field with optional value? Who cares.\\n        if (data is None and\\n                validator.is_optional and\\n                validator.can_be_none):\\n            return errors\\n\\n        errors += self._validate_primitive(validator, data, path)\\n\\n        if errors:\\n            return errors\\n\\n        if isinstance(validator, val.Include):\\n            errors += self._validate_include(validator, data, path, strict)\\n\\n        elif isinstance(validator, (val.Map, val.List)):\\n            errors += self._validate_map_list(validator, data, path, strict)\\n\\n        elif isinstance(validator, val.Any):\\n            errors += self._validate_any(validator, data, path, strict)\\n\\n        elif isinstance(validator, val.Subset):\\n            errors += self._validate_subset(validator, data, path, strict)\\n\\n        return errors\\n\\n    def _validate_static_map_list(self, validator, data, path, strict):\\n        if util.is_map(validator) and not util.is_map(data):\\n            return [\"%s : \\'%s\\' is not a map\" % (path, data)]\\n\\n        if util.is_list(validator) and not util.is_list(data):\\n            return [\"%s : \\'%s\\' is not a list\" % (path, data)]\\n\\n        errors = []\\n\\n        if strict:\\n            data_keys = set(util.get_keys(data))\\n            validator_keys = set(util.get_keys(validator))\\n            for key in data_keys - validator_keys:\\n                error_path = path + DataPath(key)\\n                errors += [\\'%s: Unexpected element\\' % error_path]\\n\\n        for key, sub_validator in util.get_iter(validator):\\n            errors += self._validate_item(sub_validator,\\n                                          data,\\n                                          path,\\n                                          strict,\\n                                          key)\\n        return errors\\n\\n    def _validate_map_list(self, validator, data, path, strict):\\n        errors = []\\n\\n        if not validator.validators:\\n            return errors  # No validators, user just wanted a map.\\n\\n        for key in util.get_keys(data):\\n            sub_errors = []\\n            for v in validator.validators:\\n                err = self._validate_item(v, data, path, strict, key)\\n                if err:\\n                    sub_errors.append(err)\\n\\n            if len(sub_errors) == len(validator.validators):\\n                # All validators failed, add to errors\\n                for err in sub_errors:\\n                    errors += err\\n\\n        return errors\\n\\n    def _validate_include(self, validator, data, path, strict):\\n        include_schema = self.includes.get(validator.include_name)\\n        if not include_schema:\\n            return [(\\'Include \\\\\\'%s\\\\\\' has not been defined.\\'\\n                     % validator.include_name)]\\n        strict = strict if validator.strict is None else validator.strict\\n        return include_schema._validate(include_schema._schema,\\n                                        data,\\n                                        path,\\n                                        strict)\\n\\n    def _validate_any(self, validator, data, path, strict):\\n        if not validator.validators:\\n            return []\\n\\n        errors = []\\n\\n        sub_errors = []\\n        for v in validator.validators:\\n            err = self._validate(v, data, path, strict)\\n            if err:\\n                sub_errors.append(err)\\n\\n        if len(sub_errors) == len(validator.validators):\\n            # All validators failed, add to errors\\n            for err in sub_errors:\\n                errors += err\\n\\n        return errors\\n\\n    def _validate_subset(self, validator, data, path, strict):\\n        def _internal_validate(internal_data):\\n            sub_errors = []\\n            for val in validator.validators:\\n                err = self._validate(val, internal_data, path, strict)\\n                if not err:\\n                    break\\n                sub_errors += err\\n            else:\\n                return sub_errors\\n            return []\\n\\n        if not validator.validators:\\n            return []\\n\\n        errors = []\\n        if util.is_map(data):\\n            for k, v in data.items():\\n                errors += _internal_validate({k: v})\\n        elif util.is_list(data):\\n            for k in data:\\n                errors += _internal_validate(k)\\n        else:\\n            errors += _internal_validate(data)\\n        return errors\\n\\n    def _validate_primitive(self, validator, data, path):\\n        errors = validator.validate(data)\\n\\n        for i, error in enumerate(errors):\\n            errors[i] = (\\'%s: \\' % path) + error\\n\\n        return errors\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'class Result(object):\\n    def __init__(self, errors):\\n        self.errors = errors\\n\\n    def __str__(self):\\n        return \\'\\\\n\\'.join(self.errors)\\n\\n    def isValid(self):\\n        return len(self.errors) == 0\\n\\n\\nclass ValidationResult(Result):\\n    def __init__(self, data, schema, errors):\\n        super(ValidationResult, self).__init__(errors)\\n        self.data = data\\n        self.schema = schema\\n\\n    def __str__(self):\\n        if self.isValid():\\n            error_str = \"\\'%s\\' is Valid\" % self.data\\n        else:\\n            head_line_bits = [\"Error validating data\"]\\n            if self.data:\\n                head_line_bits.append(\"\\'{}\\'\".format(self.data))\\n            if self.schema:\\n                head_line_bits.append(\"with schema \\'{}\\'\".format(self.schema))\\n            head_line = \\' \\'.join(head_line_bits)\\n            head_line += \\'\\\\n\\\\t\\'\\n            error_str = head_line + \\'\\\\n\\\\t\\'.join(self.errors)\\n        return error_str\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'from .parser import parse\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b\"import ast\\n\\nfrom .. import validators as val\\n\\nsafe_globals = ('True', 'False', 'None')\\nsafe_builtins = dict((f, __builtins__[f]) for f in safe_globals)\\n\\n\\ndef _validate_expr(call_node, validators):\\n    # Validate that the expression uses a known, registered validator.\\n    try:\\n        func_name = call_node.func.id\\n    except AttributeError:\\n        raise SyntaxError('Schema expressions must be enclosed by a validator.')\\n    if func_name not in validators:\\n        raise SyntaxError('Not a registered validator: \\\\'%s\\\\'. ' % func_name)\\n    # Validate that all args are constant literals, validator names,  or other call nodes\\n    arg_values = call_node.args + [kw.value for kw in call_node.keywords]\\n    for arg in arg_values:\\n        # In Python 3.8+, the following have been folded into ast.Constant.\\n        constant_types = [\\n            ast.Constant, ast.Num, ast.Str, ast.Bytes, ast.NameConstant]\\n        base_arg = arg.operand if isinstance(arg, ast.UnaryOp) else arg\\n        if any(isinstance(base_arg, type) for type in constant_types):\\n            continue\\n        elif isinstance(base_arg, ast.Name) and base_arg.id in validators:\\n            continue\\n        elif isinstance(base_arg, ast.Call):\\n            _validate_expr(base_arg, validators)\\n        else:\\n            raise SyntaxError(\\n                'Argument values must either be constant literals, or else '\\n                'reference other validators.')\\n\\n\\ndef parse(validator_string, validators=None):\\n    validators = validators or val.DefaultValidators\\n    try:\\n        tree = ast.parse(validator_string, mode='eval')\\n        _validate_expr(tree.body, validators)\\n        # evaluate with access to a limited global scope only\\n        return eval(compile(tree, '<ast>', 'eval'),\\n                    {'__builtins__': safe_builtins},\\n                    validators)\\n    except (SyntaxError, NameError, TypeError) as e:\\n        raise SyntaxError(\\n            'Invalid schema expression: \\\\'%s\\\\'. ' % validator_string +\\n            str(e)\\n        )\\n\""}, "return_value": "'utf-8'"}, {"func_args": {"source": "b''"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b\"from pytest import raises\\n\\nfrom .. import parser as par\\nfrom yamale.validators.validators import (\\n    Validator, String, Regex, Number, Integer, Boolean, List, Day, Timestamp,\\n    Ip, Mac)\\n\\n\\ndef test_eval():\\n    assert eval('String()') == String()\\n\\n\\ndef test_types():\\n    assert par.parse('String()') == String()\\n    assert par.parse('str()') == String()\\n    assert par.parse('regex()') == Regex()\\n    assert par.parse('num()') == Number()\\n    assert par.parse('int()') == Integer()\\n    assert par.parse('day()') == Day()\\n    assert par.parse('timestamp()') == Timestamp()\\n    assert par.parse('bool()') == Boolean()\\n    assert par.parse('list(str())') == List(String())\\n    assert par.parse('ip()') == Ip()\\n    assert par.parse('mac()') == Mac()\\n\\n\\ndef test_custom_type():\\n\\n    class my_validator(Validator):\\n        pass\\n\\n    assert par.parse('custom()', {'custom': my_validator}) == my_validator()\\n\\n\\ndef test_required():\\n    assert par.parse('str(required=True)').is_required\\n    assert par.parse('str(required=False)').is_optional\\n\\n\\ndef test_syntax_error():\\n    with raises(SyntaxError):\\n        par.parse('eval()')\\n\""}, "return_value": "'utf-8'"}, {"func_args": {"source": "b\"import os\\n\\n\\ndef get_fixture(relative):\\n    script_dir = os.path.dirname(__file__)\\n    return os.path.join(script_dir, 'fixtures/', relative)\\n\""}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'import os\\n\\nimport pytest\\n\\nfrom .. import command_line\\nfrom .. import yamale_error\\n\\ndir_path = os.path.dirname(os.path.realpath(__file__))\\n\\nparsers = [\\'pyyaml\\', \\'PyYAML\\', \\'ruamel\\']\\n\\n\\n@pytest.mark.parametrize(\\'parser\\', parsers)\\ndef test_bad_yaml(parser):\\n    with pytest.raises(ValueError) as e:\\n        command_line._router(\\n            \\'yamale/tests/command_line_fixtures/yamls/bad.yaml\\',\\n            \\'schema.yaml\\', 1, parser)\\n    assert \"map.bad: \\'12.5\\' is not a str.\" in e.value.message\\n\\n\\n@pytest.mark.parametrize(\\'parser\\', parsers)\\ndef test_required_keys_yaml(parser):\\n    with pytest.raises(ValueError) as e:\\n        command_line._router(\\n            \\'yamale/tests/command_line_fixtures/yamls/required_keys_bad.yaml\\',\\n            \\'required_keys_schema.yaml\\', 1, parser)\\n    assert \"map.key: Required field missing\" in e.value.message\\n\\n\\n@pytest.mark.parametrize(\\'parser\\', parsers)\\ndef test_good_yaml(parser):\\n    command_line._router(\\n        \\'yamale/tests/command_line_fixtures/yamls/good.yaml\\',\\n        \\'schema.yaml\\', 1, parser)\\n    \\n\\n@pytest.mark.parametrize(\\'parser\\', parsers)\\ndef test_good_relative_yaml(parser):\\n    command_line._router(\\n        \\'yamale/tests/command_line_fixtures/yamls/good.yaml\\',\\n        \\'../schema_dir/external.yaml\\', 1, parser)\\n    \\n\\n@pytest.mark.parametrize(\\'parser\\', parsers)\\ndef test_external_glob_schema(parser):\\n    command_line._router(\\n        \\'yamale/tests/command_line_fixtures/yamls/good.yaml\\',\\n        os.path.join(dir_path, \\'command_line_fixtures/schema_dir/ex*.yaml\\'), 1, parser)\\n    \\n\\ndef test_empty_schema_file():\\n    with pytest.raises(ValueError, match=\\'is an empty file!\\'):\\n        command_line._router(\\n            \\'yamale/tests/command_line_fixtures/empty_schema/data.yaml\\',\\n            \\'empty_schema.yaml\\' , 1, \\'PyYAML\\')\\n\\n\\ndef test_external_schema():\\n    command_line._router(\\n        \\'yamale/tests/command_line_fixtures/yamls/good.yaml\\',\\n        os.path.join(dir_path, \\'command_line_fixtures/schema_dir/external.yaml\\'), 1, \\'PyYAML\\')\\n\\n\\ndef test_bad_dir():\\n    with pytest.raises(ValueError):\\n        command_line._router(\\n            \\'yamale/tests/command_line_fixtures/yamls\\',\\n            \\'schema.yaml\\', 4, \\'PyYAML\\')\\n\\n\\ndef test_bad_strict():\\n    with pytest.raises(ValueError) as e:\\n        command_line._router(\\n            \\'yamale/tests/command_line_fixtures/yamls/required_keys_extra_element.yaml\\',\\n            \\'required_keys_schema.yaml\\',\\n            4, \\'PyYAML\\', strict=True)\\n    assert \"map.key2: Unexpected element\" in e.value.message\\n\\n\\ndef test_bad_issue_54():\\n    with pytest.raises(yamale_error.YamaleError) as e:\\n        command_line._router(\\n            \\'yamale/tests/fixtures/nested_issue_54.yaml\\',\\n            \\'nested.yaml\\',\\n            4, \\'PyYAML\\', strict=True)\\n    assert \\'string: Required field missing\\' in e.value.message\\n    assert \\'number: Required field missing\\' in e.value.message\\n    assert \\'integer: Required field missing\\' in e.value.message\\n    assert \\'boolean: Required field missing\\' in e.value.message\\n    assert \\'date: Required field missing\\' in e.value.message\\n    assert \\'datetime: Required field missing\\' in e.value.message\\n    assert \\'nest: Required field missing\\' in e.value.message\\n    assert \\'list: Required field missing\\' in e.value.message\\n\\ndef test_nested_schema_issue_69():\\n    command_line._router(\\'yamale/tests/command_line_fixtures/nestedYaml\\',\\'schema.yaml\\', 1, \\'PyYAML\\')\\n\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'import io\\nimport pytest\\nimport re\\nimport yamale\\n\\nfrom . import get_fixture\\nfrom .. import validators as val\\n\\ntypes = {\\n    \\'schema\\': \\'types.yaml\\',\\n    \\'bad\\': \\'types_bad_data.yaml\\',\\n    \\'good\\': \\'types_good_data.yaml\\'\\n}\\n\\nnested = {\\n    \\'schema\\': \\'nested.yaml\\',\\n    \\'bad\\': \\'nested_bad_data.yaml\\',\\n    \\'good\\': \\'nested_good_data.yaml\\'\\n}\\n\\ncustom = {\\n    \\'schema\\': \\'custom_types.yaml\\',\\n    \\'bad\\': \\'custom_types_bad.yaml\\',\\n    \\'good\\': \\'custom_types_good.yaml\\'\\n}\\n\\nkeywords = {\\n    \\'schema\\': \\'keywords.yaml\\',\\n    \\'bad\\': \\'keywords_bad.yaml\\',\\n    \\'good\\': \\'keywords_good.yaml\\'\\n}\\n\\nlists = {\\n    \\'schema\\': \\'lists.yaml\\',\\n    \\'bad\\': \\'lists_bad.yaml\\',\\n    \\'bad2\\': \\'lists_bad2.yaml\\',\\n    \\'good\\': \\'lists_good.yaml\\'\\n}\\n\\nmaps = {\\n    \\'schema\\': \\'map.yaml\\',\\n    \\'bad\\': \\'map_bad.yaml\\',\\n    \\'bad2\\': \\'map_bad2.yaml\\',\\n    \\'good\\': \\'map_good.yaml\\'\\n}\\n\\nanys = {\\n    \\'schema\\': \\'any.yaml\\',\\n    \\'bad\\': \\'any_bad.yaml\\',\\n    \\'good\\': \\'any_good.yaml\\'\\n}\\n\\nlist_include = {\\n    \\'schema\\': \\'list_include.yaml\\',\\n    \\'good\\': \\'list_include_good.yaml\\'\\n}\\n\\nissue_22 = {\\n    \\'schema\\': \\'issue_22.yaml\\',\\n    \\'good\\': \\'issue_22_good.yaml\\'\\n}\\n\\nissue_50 = {\\n    \\'schema\\': \\'issue_50.yaml\\',\\n    \\'good\\': \\'issue_50_good.yaml\\'\\n}\\n\\nregexes = {\\n    \\'schema\\': \\'regex.yaml\\',\\n    \\'bad\\': \\'regex_bad.yaml\\',\\n    \\'good\\': \\'regex_good.yaml\\'\\n}\\n\\nips = {\\n    \\'schema\\': \\'ip.yaml\\',\\n    \\'bad\\': \\'ip_bad.yaml\\',\\n    \\'good\\': \\'ip_good.yaml\\'\\n}\\n\\nmacs = {\\n    \\'schema\\': \\'mac.yaml\\',\\n    \\'bad\\': \\'mac_bad.yaml\\',\\n    \\'good\\': \\'mac_good.yaml\\'\\n}\\n\\nnested_map = {\\n    \\'schema\\': \\'nested_map.yaml\\',\\n    \\'good\\': \\'nested_map_good.yaml\\'\\n}\\n\\ntop_level_map = {\\n    \\'schema\\': \\'top_level_map.yaml\\',\\n    \\'good\\': \\'top_level_map_good.yaml\\'\\n}\\n\\ninclude_validator = {\\n    \\'schema\\': \\'include_validator.yaml\\',\\n    \\'good\\': \\'include_validator_good.yaml\\',\\n    \\'bad\\': \\'include_validator_bad.yaml\\'\\n}\\n\\nstrict_map = {\\n    \\'schema\\': \\'strict_map.yaml\\',\\n    \\'good\\': \\'strict_map_good.yaml\\',\\n    \\'bad\\': \\'strict_map_bad.yaml\\'\\n}\\n\\nmixed_strict_map = {\\n    \\'schema\\': \\'mixed_strict_map.yaml\\',\\n    \\'good\\': \\'mixed_strict_map_good.yaml\\',\\n    \\'bad\\': \\'mixed_strict_map_bad.yaml\\'\\n}\\n\\nstrict_list = {\\n    \\'schema\\': \\'strict_list.yaml\\',\\n    \\'good\\': \\'strict_list_good.yaml\\',\\n    \\'bad\\': \\'strict_list_bad.yaml\\'\\n}\\n\\nnested_map2 = {\\n    \\'schema\\': \\'nested_map2.yaml\\',\\n    \\'good\\': \\'nested_map2_good.yaml\\',\\n    \\'bad\\': \\'nested_map2_bad.yaml\\'\\n}\\n\\nstatic_list = {\\n    \\'schema\\': \\'static_list.yaml\\',\\n    \\'good\\': \\'static_list_good.yaml\\',\\n    \\'bad\\': \\'static_list_bad.yaml\\'\\n}\\n\\nnested_issue_54 = {\\n    \\'schema\\': \\'nested.yaml\\',\\n    \\'bad\\': \\'nested_issue_54.yaml\\',\\n    \\'good\\': \\'nested_good_data.yaml\\'\\n}\\n\\nmap_key_constraint = {\\n    \\'schema\\': \\'map_key_constraint.yaml\\',\\n    \\'good\\': \\'map_key_constraint_good.yaml\\',\\n    \\'bad_base\\': \\'map_key_constraint_bad_base.yaml\\',\\n    \\'bad_nest\\': \\'map_key_constraint_bad_nest.yaml\\',\\n    \\'bad_nest_con\\': \\'map_key_constraint_bad_nest_con.yaml\\',\\n}\\n\\nnumeric_bool_coercion = {\\n    \\'schema\\': \\'numeric_bool_coercion.yaml\\',\\n    \\'good\\': \\'numeric_bool_coercion_good.yaml\\',\\n    \\'bad\\': \\'numeric_bool_coercion_bad.yaml\\',\\n}\\n\\nsubset = {\\n    \\'schema\\': \\'subset.yaml\\',\\n    \\'good\\': \\'subset_good.yaml\\',\\n    \\'good2\\': \\'subset_good2.yaml\\',\\n    \\'bad\\': \\'subset_bad.yaml\\',\\n    \\'bad2\\': \\'subset_bad2.yaml\\',\\n    \\'bad3\\': \\'subset_bad3.yaml\\'\\n}\\n\\nsubset_empty = {\\n    \\'schema\\': \\'subset_empty.yaml\\',\\n    \\'good\\': \\'subset_empty_good.yaml\\',\\n    \\'good2\\': \\'subset_empty_good2.yaml\\'\\n}\\n\\nsubset_nodef = {\\n    \\'schema\\': \\'subset_nodef.yaml\\'\\n}\\n\\ntest_data = [\\n    types, nested, custom,\\n    keywords, lists, maps,\\n    anys, list_include, issue_22,\\n    issue_50, regexes, ips, macs,\\n    nested_map, top_level_map,\\n    include_validator, strict_map,\\n    mixed_strict_map, strict_list,\\n    nested_map2, static_list,\\n    nested_issue_54,\\n    map_key_constraint,\\n    numeric_bool_coercion,\\n    subset, subset_empty\\n]\\n\\nfor d in test_data:\\n    for key in d.keys():\\n        if key == \\'schema\\':\\n            d[key] = yamale.make_schema(get_fixture(d[key]))\\n        else:\\n            d[key] = yamale.make_data(get_fixture(d[key]))\\n\\n\\ndef test_tests():\\n    \"\"\" Make sure the test runner is working.\"\"\"\\n    assert 1 + 1 == 2\\n\\n\\ndef test_flat_make_schema():\\n    assert isinstance(types[\\'schema\\']._schema[\\'string\\'], val.String)\\n\\n\\ndef test_nested_schema():\\n    nested_schema = nested[\\'schema\\']._schema\\n    assert isinstance(nested_schema[\\'string\\'], val.String)\\n    assert isinstance(nested_schema[\\'list\\'], (list, tuple))\\n    assert isinstance(nested_schema[\\'list\\'][0], val.String)\\n\\n\\n@pytest.mark.parametrize(\\'data_map\\', test_data)\\ndef test_good(data_map):\\n    for k, v in data_map.items():\\n        if k.startswith(\\'good\\'):\\n            yamale.validate(data_map[\\'schema\\'], data_map[k])\\n\\n\\ndef test_bad_validate():\\n    assert count_exception_lines(types[\\'schema\\'], types[\\'bad\\']) == 9\\n\\n\\ndef test_bad_nested():\\n    assert count_exception_lines(nested[\\'schema\\'], nested[\\'bad\\']) == 2\\n\\n\\ndef test_bad_nested_issue_54():\\n    exp = [\\n        \\'string: Required field missing\\',\\n        \\'number: Required field missing\\',\\n        \\'integer: Required field missing\\',\\n        \\'boolean: Required field missing\\',\\n        \\'date: Required field missing\\',\\n        \\'datetime: Required field missing\\',\\n        \\'nest: Required field missing\\',\\n        \\'list: Required field missing\\'\\n    ]\\n    match_exception_lines(nested_issue_54[\\'schema\\'], nested_issue_54[\\'bad\\'], exp)\\n\\ndef test_bad_custom():\\n    assert count_exception_lines(custom[\\'schema\\'], custom[\\'bad\\']) == 1\\n\\n\\ndef test_bad_lists():\\n    assert count_exception_lines(lists[\\'schema\\'], lists[\\'bad\\']) == 6\\n\\n\\ndef test_bad2_lists():\\n    assert count_exception_lines(lists[\\'schema\\'], lists[\\'bad2\\']) == 2\\n\\n\\ndef test_bad_maps():\\n    assert count_exception_lines(maps[\\'schema\\'], maps[\\'bad\\']) == 7\\n\\ndef test_bad_maps2():\\n    assert count_exception_lines(maps[\\'schema\\'], maps[\\'bad2\\']) == 1\\n\\ndef test_bad_keywords():\\n    assert count_exception_lines(keywords[\\'schema\\'], keywords[\\'bad\\']) == 9\\n\\n\\ndef test_bad_anys():\\n    assert count_exception_lines(anys[\\'schema\\'], anys[\\'bad\\']) == 5\\n\\n\\ndef test_bad_regexes():\\n    assert count_exception_lines(regexes[\\'schema\\'], regexes[\\'bad\\']) == 4\\n\\n\\ndef test_bad_include_validator():\\n    exp = [\"key1: \\'a_string\\' is not a int.\"]\\n    match_exception_lines(include_validator[\\'schema\\'],\\n                          include_validator[\\'bad\\'],\\n                          exp)\\n\\n\\ndef test_bad_schema():\\n    with pytest.raises(SyntaxError) as excinfo:\\n        yamale.make_schema(get_fixture(\\'bad_schema.yaml\\'))\\n    assert \\'fixtures/bad_schema.yaml\\' in str(excinfo.value)\\n\\n\\ndef test_empty_schema():\\n    with pytest.raises(ValueError) as excinfo:\\n        yamale.make_schema(get_fixture(\\'empty_schema.yaml\\'))\\n    assert \\'empty_schema.yaml is an empty file!\\' in str(excinfo.value)\\n\\n\\n@pytest.mark.parametrize(\\n    \"schema_filename\",\\n    [\\'bad_schema_rce.yaml\\', \\'bad_schema_rce2.yaml\\', \\'bad_schema_rce3.yaml\\', \\'bad_schema_rce4.yaml\\']\\n)\\ndef test_vulnerable_schema(schema_filename):\\n    with pytest.raises(SyntaxError) as excinfo:\\n        yamale.make_schema(get_fixture(schema_filename))\\n    assert schema_filename in str(excinfo.value)\\n\\n\\ndef test_list_is_not_a_map():\\n    exp = [\" : \\'[1, 2]\\' is not a map\"]\\n    match_exception_lines(strict_map[\\'schema\\'],\\n                          strict_list[\\'good\\'],\\n                          exp)\\n\\n\\ndef test_bad_strict_map():\\n    exp = [\\'extra: Unexpected element\\']\\n    match_exception_lines(strict_map[\\'schema\\'],\\n                          strict_map[\\'bad\\'],\\n                          exp,\\n                          strict=True)\\n\\n\\ndef test_bad_strict_list():\\n    exp = [\\'2: Unexpected element\\']\\n    match_exception_lines(strict_list[\\'schema\\'],\\n                          strict_list[\\'bad\\'],\\n                          exp,\\n                          strict=True)\\n\\n\\ndef test_bad_mixed_strict_map():\\n    exp = [\\'field3.extra: Unexpected element\\']\\n    match_exception_lines(mixed_strict_map[\\'schema\\'],\\n                          mixed_strict_map[\\'bad\\'],\\n                          exp)\\n\\n\\ndef test_bad_nested_map2():\\n    exp = [\\'field1.field1_1: Required field missing\\']\\n    match_exception_lines(nested_map2[\\'schema\\'],\\n                          nested_map2[\\'bad\\'],\\n                          exp)\\n\\n\\ndef test_bad_static_list():\\n    exp = [\\'0: Required field missing\\']\\n    match_exception_lines(static_list[\\'schema\\'],\\n                          static_list[\\'bad\\'],\\n                          exp)\\n\\n\\ndef test_bad_map_key_constraint_base():\\n    exp = [\": Key error - \\'bad\\' is not a int.\"]\\n    match_exception_lines(map_key_constraint[\\'schema\\'],\\n                          map_key_constraint[\\'bad_base\\'],\\n                          exp)\\n\\n\\ndef test_bad_map_key_constraint_nest():\\n    exp = [\"1.0: Key error - \\'100\\' is not a str.\"]\\n    match_exception_lines(map_key_constraint[\\'schema\\'],\\n                          map_key_constraint[\\'bad_nest\\'],\\n                          exp)\\n\\n\\ndef test_bad_map_key_constraint_nest_con():\\n    exp = [\\n        \"1.0: Key error - \\'100\\' is not a str.\",\\n        \"1.0: Key error - \\'baz\\' contains excluded character \\'z\\'\",\\n    ]\\n    match_exception_lines(map_key_constraint[\\'schema\\'],\\n                          map_key_constraint[\\'bad_nest_con\\'],\\n                          exp)\\n\\n\\ndef test_bad_numeric_bool_coercion():\\n    exp = [\\n        \"integers.0: \\'False\\' is not a int.\",\\n        \"integers.1: \\'True\\' is not a int.\",\\n        \"numbers.0: \\'False\\' is not a num.\",\\n        \"numbers.1: \\'True\\' is not a num.\",\\n    ]\\n    match_exception_lines(numeric_bool_coercion[\\'schema\\'],\\n                          numeric_bool_coercion[\\'bad\\'],\\n                          exp)\\n\\ndef test_bad_subset():\\n    exp = [\\n        \"subset_list: \\'subset\\' may not be an empty set.\"\\n    ]\\n    match_exception_lines(subset[\\'schema\\'],\\n                          subset[\\'bad\\'],\\n                          exp)\\n\\ndef test_bad_subset2():\\n    exp = [\\n        \"subset_list: \\'[1]\\' is not a int.\",\\n        \"subset_list: \\'[1]\\' is not a str.\"\\n    ]\\n    match_exception_lines(subset[\\'schema\\'],\\n                          subset[\\'bad2\\'],\\n                          exp)\\n\\ndef test_bad_subset3():\\n    exp = [\\n        \"subset_list: \\'{\\'a\\': 1}\\' is not a int.\",\\n        \"subset_list: \\'{\\'a\\': 1}\\' is not a str.\"\\n    ]\\n    match_exception_lines(subset[\\'schema\\'],\\n                          subset[\\'bad3\\'],\\n                          exp)\\n\\ndef test_nodef_subset_schema():\\n    with pytest.raises(ValueError) as e:\\n        yamale.make_schema(get_fixture(subset_nodef[\\'schema\\']))\\n\\n    assert \"\\'subset\\' requires at least one validator!\" in str(e.value)\\n\\n@pytest.mark.parametrize(\"use_schema_string,use_data_string,expected_message_re\", [\\n    (False, False, \"^Error validating data \\'.*?\\' with schema \\'.*?\\'\\\\n\\\\t\"),\\n    (True, False, \"^Error validating data \\'.*?\\'\\\\n\\\\t\"),\\n    (False, True, \"^Error validating data with schema \\'.*?\\'\\\\n\\\\t\"),\\n    (True, True, \"^Error validating data\\\\n\\\\t\"),\\n])\\ndef test_validate_errors(use_schema_string, use_data_string, expected_message_re):\\n    schema_path = get_fixture(\\'types.yaml\\')\\n    data_path = get_fixture(\\'types_bad_data.yaml\\')\\n    if use_schema_string:\\n        with io.open(schema_path, encoding=\\'utf-8\\') as f:\\n            schema = yamale.make_schema(content=f.read())\\n    else:\\n        schema = yamale.make_schema(schema_path)\\n    if use_data_string:\\n        with io.open(data_path, encoding=\\'utf-8\\') as f:\\n            data = yamale.make_data(content=f.read())\\n    else:\\n        data = yamale.make_data(data_path)\\n    with pytest.raises(yamale.yamale_error.YamaleError) as excinfo:\\n        yamale.validate(schema, data)\\n    assert re.match(expected_message_re, excinfo.value.message, re.MULTILINE), \\\\\\n        \\'Message {} should match {}\\'.format(\\n            excinfo.value.message, expected_message_re\\n        )\\n\\n\\ndef match_exception_lines(schema, data, expected, strict=False):\\n    with pytest.raises(ValueError) as e:\\n        yamale.validate(schema, data, strict)\\n\\n    got = e.value.results[0].errors\\n    got.sort()\\n    expected.sort()\\n    assert got == expected\\n\\n\\ndef count_exception_lines(schema, data, strict=False):\\n    with pytest.raises(ValueError) as e:\\n        yamale.validate(schema, data, strict)\\n    result = e.value.results[0]\\n    return len(result.errors)\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'import re\\nimport os\\nfrom yamale import YamaleTestCase\\nfrom yamale.validators import DefaultValidators, Validator\\n\\n\\ndata_folder = os.path.dirname(os.path.realpath(__file__))\\n\\n\\nclass TestAllYaml(YamaleTestCase):\\n    base_dir = data_folder\\n    schema = \\'meta_test_fixtures/schema.yaml\\'\\n    yaml = \\'meta_test_fixtures/data1.yaml\\'\\n\\n    def runTest(self):\\n        self.assertTrue(self.validate())\\n\\n\\nclass TestBadYaml(YamaleTestCase):\\n    base_dir = data_folder\\n    schema = \\'meta_test_fixtures/schema_bad.yaml\\'\\n    yaml = \\'meta_test_fixtures/data*.yaml\\'\\n\\n    def runTest(self):\\n        self.assertRaises(ValueError, self.validate)\\n\\n\\nclass TestMapYaml(YamaleTestCase):\\n    base_dir = data_folder\\n    schema = \\'meta_test_fixtures/schema.yaml\\'\\n    yaml = [\\'meta_test_fixtures/data1.yaml\\',\\n            \\'meta_test_fixtures/some_data.yaml\\',\\n            # Make sure  schema doesn\\'t validate itself\\n            \\'meta_test_fixtures/schema.yaml\\']\\n\\n    def runTest(self):\\n        self.assertTrue(self.validate())\\n\\n\\n# class TestListYaml(YamaleTestCase):\\n#     base_dir = data_folder\\n#     schema = \\'meta_test_fixtures/schema_include_list.yaml\\'\\n#     yaml = [\\'meta_test_fixtures/data_include_list.yaml\\']\\n\\n#     def runTest(self):\\n#         self.assertTrue(self.validate())\\n\\n\\nclass Card(Validator):\\n    \"\"\" Custom validator for testing purpose \"\"\"\\n    tag = \\'card\\'\\n    card_regex = re.compile(r\\'^(10|[2-9JQKA])[SHDC]$\\')\\n\\n    def _is_valid(self, value):\\n        return re.match(self.card_regex, value)\\n\\n\\nclass TestCustomValidator(YamaleTestCase):\\n    base_dir = data_folder\\n    schema = \\'meta_test_fixtures/schema_custom.yaml\\'\\n    yaml = \\'meta_test_fixtures/data_custom.yaml\\'\\n\\n    def runTest(self):\\n        validators = DefaultValidators.copy()\\n        validators[\\'card\\'] = Card\\n        self.assertTrue(self.validate(validators))\\n\\n\\nclass TestCustomValidatorWithIncludes(YamaleTestCase):\\n    base_dir = data_folder\\n    schema = \\'meta_test_fixtures/schema_custom_with_include.yaml\\'\\n    yaml = \\'meta_test_fixtures/data_custom_with_include.yaml\\'\\n\\n    def runTest(self):\\n        validators = DefaultValidators.copy()\\n        validators[\\'card\\'] = Card\\n        self.assertTrue(self.validate(validators))\\n\\n\\nclass TestBadRequiredYaml(YamaleTestCase):\\n    base_dir = data_folder\\n    schema = \\'meta_test_fixtures/schema_required_bad.yaml\\'\\n    yaml = \\'meta_test_fixtures/data_required_bad.yaml\\'\\n\\n    def runTest(self):\\n        self.assertRaises(ValueError, self.validate)\\n\\n\\nclass TestGoodRequiredYaml(YamaleTestCase):\\n    base_dir = data_folder\\n    schema = \\'meta_test_fixtures/schema_required_good.yaml\\'\\n    yaml = \\'meta_test_fixtures/data_required_good.yaml\\'\\n\\n    def runTest(self):\\n        self.assertTrue(self.validate())\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'# ABCs for containers were moved to their own module\\ntry:\\n    from collections.abc import Mapping, Set, Sequence\\nexcept ImportError:\\n    from collections import Mapping, Set, Sequence\\n\\n\\n# Python 3 has no basestring, lets test it.\\ntry:\\n    basestring  # attempt to evaluate basestring\\n\\n    def isstr(s):\\n        return isinstance(s, basestring)\\n\\n    def to_unicode(s):\\n        return unicode(s)\\n\\nexcept NameError:\\n    def isstr(s):\\n        return isinstance(s, str)\\n\\n    def to_unicode(s):\\n        return s\\n\\n\\ndef is_list(obj):\\n    return isinstance(obj, Sequence) and not isstr(obj)\\n\\n\\ndef is_map(obj):\\n    return isinstance(obj, Mapping)\\n\\n\\ndef get_keys(obj):\\n    if is_map(obj):\\n        return obj.keys()\\n    elif is_list(obj):\\n        return range(len(obj))\\n\\n\\ndef get_iter(iterable):\\n    if isinstance(iterable, Mapping):\\n        return iterable.items()\\n    else:\\n        return enumerate(iterable)\\n\\n\\ndef get_subclasses(cls, _subclasses_yielded=None):\\n    \"\"\"\\n    Generator recursively yielding all subclasses of the passed class (in\\n    depth-first order).\\n\\n    Parameters\\n    ----------\\n    cls : type\\n        Class to find all subclasses of.\\n    _subclasses_yielded : set\\n        Private parameter intended to be passed only by recursive invocations of\\n        this function, containing all previously yielded classes.\\n    \"\"\"\\n\\n    if _subclasses_yielded is None:\\n        _subclasses_yielded = set()\\n\\n    # If the passed class is old- rather than new-style, raise an exception.\\n    if not hasattr(cls, \\'__subclasses__\\'):\\n        raise TypeError(\\'Old-style class \"%s\" unsupported.\\' % cls.__name__)\\n\\n    # For each direct subclass of this class\\n    for subclass in cls.__subclasses__():\\n        # If this subclass has already been yielded, skip to the next.\\n        if subclass in _subclasses_yielded:\\n            continue\\n\\n        # Yield this subclass and record having done so before recursing.\\n        yield subclass\\n        _subclasses_yielded.add(subclass)\\n\\n        # Yield all direct subclasses of this class as well.\\n        for subclass_subclass in get_subclasses(subclass, _subclasses_yielded):\\n            yield subclass_subclass\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'from .base import Validator\\nfrom .validators import *\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'class Validator(object):\\n    \"\"\"Base class for all Validators\"\"\"\\n    constraints = []\\n    value_type = None\\n\\n    def __init__(self, *args, **kwargs):\\n        self.args = args\\n        self.kwargs = kwargs\\n\\n        # Is field required? Default is True\\n        self.is_required = bool(kwargs.pop(\\'required\\', True))\\n\\n        # Can value be None if field is optional? Default is True\\n        self._value_can_be_none = bool(kwargs.pop(\\'none\\', True))\\n\\n        # Construct all constraints\\n        self._constraints_inst = self._create_constraints(self.constraints,\\n                                                          self.value_type,\\n                                                          kwargs)\\n\\n    def _create_constraints(self, constraint_classes, value_type, kwargs):\\n        constraints = []\\n        for constraint in constraint_classes:\\n            constraints.append(constraint(value_type, kwargs))\\n        return constraints\\n\\n    @property\\n    def tag(self):\\n        return self.__class__\\n\\n    @property\\n    def is_optional(self):\\n        return not self.is_required\\n\\n    @property\\n    def can_be_none(self):\\n        \"\"\"Check if value for optional field can be None.\"\"\"\\n        return self._value_can_be_none\\n\\n    def _is_valid(self, value):\\n        \"\"\"Validators must implement this. Return True if value is valid.\"\"\"\\n        raise NotImplementedError(\\'You need to override this function\\')\\n\\n    def get_name(self):\\n        return self.tag\\n\\n    def validate(self, value):\\n        \"\"\"\\n        Check if ``value`` is valid.\\n\\n        :returns: [errors] If ``value`` is invalid, otherwise [].\\n        \"\"\"\\n        errors = []\\n\\n        # Make sure the type validates first.\\n        valid = self._is_valid(value)\\n        if not valid:\\n            errors.append(self.fail(value))\\n            return errors\\n\\n        # Then validate all the constraints second.\\n        for constraint in self._constraints_inst:\\n            error = constraint.is_valid(value)\\n            if error:\\n                if isinstance(error, list):\\n                    errors.extend(error)\\n                else:\\n                    errors.append(error)\\n\\n        return errors\\n\\n    def is_valid(self, value):\\n        return self.validate(value) == []\\n\\n    def fail(self, value):\\n        \"\"\"Override to define a custom fail message\"\"\"\\n        return \\'\\\\\\'%s\\\\\\' is not a %s.\\' % (value, self.get_name())\\n\\n    def __repr__(self):\\n        return \\'%s(%s, %s)\\' % (self.__class__.__name__, self.args, self.kwargs)\\n\\n    def __eq__(self, other):\\n        # Validators are equal if they have the same args and kwargs.\\n        eq = [isinstance(other, self.__class__),\\n              self.args == other.args,\\n              self.kwargs == other.kwargs]\\n        return all(eq)\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b\"from __future__ import absolute_import\\nimport re\\nimport datetime\\nimport ipaddress\\n\\nfrom yamale.util import to_unicode\\nfrom .base import Validator\\nfrom .. import util\\n\\n\\nclass Constraint(object):\\n    keywords = {}  # Keywords and types accepted by this constraint\\n    is_active = False\\n\\n    def __init__(self, value_type, kwargs):\\n        self._parseKwargs(kwargs)\\n\\n    def _parseKwargs(self, kwargs):\\n        for kwarg, kwtype in self.keywords.items():\\n            value = self.get_kwarg(kwargs, kwarg, kwtype)\\n            setattr(self, kwarg, value)\\n\\n    def get_kwarg(self, kwargs, key, kwtype):\\n        try:\\n            value = kwargs[key]\\n        except KeyError:\\n            return None\\n\\n        # Activate this constraint\\n        self.is_active = True\\n\\n        if isinstance(value, kwtype):\\n            # value already correct type, return\\n            return value\\n\\n        try:  # Try to convert value\\n            # Is this value one of the datetime types?\\n            if kwtype == datetime.date:\\n                time = datetime.datetime.strptime(value, '%Y-%m-%d')\\n                return datetime.date(time.year, time.month, time.day)\\n\\n            if kwtype == datetime.datetime:\\n                return datetime.datetime.strptime(value, '%Y-%m-%d %H:%M:%S')\\n\\n            return kwtype(value)\\n        except (TypeError, ValueError):\\n            raise SyntaxError('%s is not a %s' % (key, kwtype))\\n\\n    def is_valid(self, value):\\n        if not self.is_active:\\n            return None\\n\\n        if not self._is_valid(value):\\n            return self._fail(value)\\n\\n        return None\\n\\n    def _fail(self, value):\\n        return '\\\\'%s\\\\' violates %s.' % (value, self.__class__.__name__)\\n\\n\\nclass Min(Constraint):\\n    fail = '%s is less than %s'\\n\\n    def __init__(self, value_type, kwargs):\\n        self.keywords = {'min': value_type}\\n        super(Min, self).__init__(value_type, kwargs)\\n\\n    def _is_valid(self, value):\\n        return self.min <= value\\n\\n    def _fail(self, value):\\n        return self.fail % (value, self.min)\\n\\n\\nclass Max(Constraint):\\n    fail = '%s is greater than %s'\\n\\n    def __init__(self, value_type, kwargs):\\n        self.keywords = {'max': value_type}\\n        super(Max, self).__init__(value_type, kwargs)\\n\\n    def _is_valid(self, value):\\n        return self.max >= value\\n\\n    def _fail(self, value):\\n        return self.fail % (value, self.max)\\n\\n\\nclass LengthMin(Constraint):\\n    keywords = {'min': int}\\n    fail = 'Length of %s is less than %s'\\n\\n    def _is_valid(self, value):\\n        return self.min <= len(value)\\n\\n    def _fail(self, value):\\n        return self.fail % (value, self.min)\\n\\n\\nclass LengthMax(Constraint):\\n    keywords = {'max': int}\\n    fail = 'Length of %s is greater than %s'\\n\\n    def _is_valid(self, value):\\n        return self.max >= len(value)\\n\\n    def _fail(self, value):\\n        return self.fail % (value, self.max)\\n\\n\\nclass Key(Constraint):\\n    keywords = {'key': Validator}\\n    fail = 'Key error - %s'\\n\\n    def _is_valid(self, value):\\n        for k in value.keys():\\n            if self.key.validate(k) != []:\\n                return False\\n        return True\\n\\n    def _fail(self, value):\\n        error_list = []\\n        for k in value.keys():\\n            error_list.extend(self.key.validate(k))\\n        return [self.fail % (e) for e in error_list]\\n\\n\\nclass StringEquals(Constraint):\\n    keywords = {'equals': str, 'ignore_case': bool}\\n    fail = '%s does not equal %s'\\n\\n    def _is_valid(self, value):\\n        # Check if the function has only been called due to ignore_case\\n        if self.equals is not None:\\n            if self.ignore_case is not None:\\n                if not self.ignore_case:\\n                    return value == self.equals\\n                else:\\n                    return value.casefold() == self.equals.casefold()\\n            else:\\n                return value == self.equals\\n        else:\\n            return True\\n\\n    def _fail(self, value):\\n        return self.fail % (value, self.equals)\\n\\n\\nclass StringStartsWith(Constraint):\\n    keywords = {'starts_with': str, 'ignore_case': bool}\\n    fail = '%s does not start with %s'\\n\\n    def _is_valid(self, value):\\n        # Check if the function has only been called due to ignore_case\\n        if self.starts_with is not None:\\n            if self.ignore_case is not None:\\n                if not self.ignore_case:\\n                    return value.startswith(self.starts_with)\\n                else:\\n                    length = len(self.starts_with)\\n                    if length <= len(value):\\n                        return value[:length].casefold() == self.starts_with.casefold()\\n                    else:\\n                        return False\\n            else:\\n                return value.startswith(self.starts_with)\\n        else:\\n            return True\\n\\n    def _fail(self, value):\\n        return self.fail % (value, self.starts_with)\\n\\n\\nclass StringEndsWith(Constraint):\\n    keywords = {'ends_with': str, 'ignore_case': bool}\\n    fail = '%s does not end with %s'\\n\\n    def _is_valid(self, value):\\n        # Check if the function has only been called due to ignore_case\\n        if self.ends_with is not None:\\n            if self.ignore_case is not None:\\n                if not self.ignore_case:\\n                    return value.endswith(self.ends_with)\\n                else:\\n                    length = len(self.ends_with)\\n                    if length <= len(value):\\n                        return value[-length:].casefold() == self.ends_with.casefold()\\n                    else:\\n                        return False\\n            else:\\n                return value.endswith(self.ends_with)\\n        else:\\n            return True\\n\\n    def _fail(self, value):\\n        return self.fail % (value, self.ends_with)\\n\\n\\nclass StringMatches(Constraint):\\n    keywords = {'matches': str}\\n    fail = '%s is not a regex match.'\\n\\n    _regex_flags = {'ignore_case': re.I, 'multiline': re.M, 'dotall': re.S}\\n\\n    def __init__(self, value_type, kwargs):\\n        self._flags = 0\\n        for k, v in util.get_iter(self._regex_flags):\\n            self._flags |= v if kwargs.pop(k, False) else 0\\n\\n        super(StringMatches, self).__init__(value_type, kwargs)\\n\\n    def _is_valid(self, value):\\n        if self.matches is not None:\\n            regex = re.compile(self.matches, self._flags)\\n            return regex.match(value)\\n        else:\\n            return True\\n\\n    def _fail(self, value):\\n        return self.fail % (value)\\n\\n\\nclass CharacterExclude(Constraint):\\n    keywords = {'exclude': str, 'ignore_case': bool}\\n    fail = '\\\\'%s\\\\' contains excluded character \\\\'%s\\\\''\\n\\n    def _is_valid(self, value):\\n        # Check if the function has only been called due to ignore_case\\n        if self.exclude is not None:\\n            for char in self.exclude:\\n                if self.ignore_case is not None:\\n                    if not self.ignore_case:\\n                        if char in value:\\n                            self._failed_char = char\\n                            return False\\n                    else:\\n                        if char.casefold() in value.casefold():\\n                            self._failed_char = char\\n                            return False\\n                else:\\n                    if char in value:\\n                        self._failed_char = char\\n                        return False\\n            return True\\n        else:\\n            return True\\n\\n    def _fail(self, value):\\n        return self.fail % (value, self._failed_char)\\n\\n\\nclass IpVersion(Constraint):\\n    keywords = {'version': int}\\n    fail = 'IP version of %s is not %s'\\n\\n    def _is_valid(self, value):\\n        try:\\n            ip = ipaddress.ip_interface(to_unicode(value))\\n        except ValueError:\\n            return False\\n        return self.version == ip.version\\n\\n    def _fail(self, value):\\n        return self.fail % (value, self.version)\\n\""}, "return_value": "'utf-8'"}, {"func_args": {"source": "b''"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b\"import datetime\\nfrom yamale import validators as val\\n\\n\\ndef test_length_min():\\n    v = val.String(min=2)\\n    assert v.is_valid('abcd')\\n    assert v.is_valid('ab')\\n    assert not v.is_valid('a')\\n\\n\\ndef test_length_max():\\n    v = val.String(max=3)\\n    assert v.is_valid('abc')\\n    assert v.is_valid('ab')\\n    assert not v.is_valid('abcd')\\n\\n\\ndef test_number_max():\\n    v = val.Number(min=.5)\\n    assert v.is_valid(4)\\n    assert v.is_valid(.5)\\n    assert not v.is_valid(.1)\\n\\n\\ndef test_number_min():\\n    v = val.Integer(max=10)\\n    assert v.is_valid(4)\\n    assert v.is_valid(10)\\n    assert not v.is_valid(11)\\n\\n\\ndef test_timestamp_min():\\n    v = val.Timestamp(min=datetime.datetime(2010, 1, 1))\\n    assert v.is_valid(datetime.datetime(2010, 1, 1))\\n    assert v.is_valid(datetime.datetime(2011, 2, 2))\\n    assert not v.is_valid(datetime.datetime(2009, 12, 31))\\n\\n\\ndef test_timestamp_max():\\n    v = val.Timestamp(max=datetime.datetime(2010, 1, 1))\\n    assert v.is_valid(datetime.datetime(2010, 1, 1))\\n    assert v.is_valid(datetime.datetime(2009, 2, 2))\\n    assert not v.is_valid(datetime.datetime(2010, 2, 2))\\n\\n\\ndef test_day_min():\\n    v = val.Day(min=datetime.date(2010, 1, 1))\\n    assert v.is_valid(datetime.date(2010, 1, 1))\\n    assert v.is_valid(datetime.date(2011, 2, 2))\\n    assert not v.is_valid(datetime.date(2009, 12, 31))\\n\\n\\ndef test_day_max():\\n    v = val.Day(max=datetime.date(2010, 1, 1))\\n    assert v.is_valid(datetime.date(2010, 1, 1))\\n    assert v.is_valid(datetime.date(2009, 2, 2))\\n    assert not v.is_valid(datetime.date(2010, 2, 2))\\n\\n\\ndef test_str_equals():\\n    v = val.String(equals='abcd')\\n    assert v.is_valid('abcd')\\n    assert not v.is_valid('abcde')\\n    assert not v.is_valid('c')\\n\\n\\ndef test_str_equals_ignore_case():\\n    v = val.String(equals='abcd', ignore_case=True)\\n    assert v.is_valid('abCd')\\n    assert not v.is_valid('abcde')\\n    assert not v.is_valid('C')\\n\\n\\ndef test_str_starts_with():\\n    v = val.String(starts_with='abc')\\n    assert v.is_valid('abcd')\\n    assert not v.is_valid('bcd')\\n    assert not v.is_valid('c')\\n\\n\\ndef test_str_starts_with_ignore_case():\\n    v = val.String(starts_with='abC', ignore_case=True)\\n    assert v.is_valid('abCde')\\n    assert v.is_valid('abcde')\\n    assert not v.is_valid('bcd')\\n    assert not v.is_valid('C')\\n\\n\\ndef test_str_ends_with():\\n    v = val.String(ends_with='abcd')\\n    assert v.is_valid('abcd')\\n    assert not v.is_valid('abcde')\\n    assert not v.is_valid('c')\\n\\n\\ndef test_str_ends_with_ignore_case():\\n    v = val.String(ends_with='abC', ignore_case=True)\\n    assert v.is_valid('xyzabC')\\n    assert v.is_valid('xyzabc')\\n    assert not v.is_valid('cde')\\n    assert not v.is_valid('C')\\n\\n\\ndef test_str_matches():\\n    v = val.String(matches=r'^(abc)\\\\1?de$')\\n    assert v.is_valid('abcabcde')\\n    assert not v.is_valid('abcabcabcde')\\n    assert not v.is_valid('\\\\12')\\n\\n    v = val.String(matches=r'[a-z0-9]{3,}s\\\\s$', ignore_case=True)\\n    assert v.is_valid('b33S\\\\v')\\n    assert v.is_valid('B33s\\\\t')\\n    assert not v.is_valid(' b33s ')\\n    assert not v.is_valid('b33s  ')\\n\\n    v = val.String(matches=r'A.+\\\\d$', ignore_case=False, multiline=True)\\n    assert v.is_valid('A_-3\\\\n\\\\n')\\n    assert not v.is_valid('a!!!!!5\\\\n\\\\n')\\n\\n    v = val.String(matches=r'.*^Ye.*s\\\\.', ignore_case=True, multiline=True, dotall=True)\\n    assert v.is_valid('YEeeEEEEeeeeS.')\\n    assert v.is_valid('What?\\\\nYes!\\\\nBEES.\\\\nOK.')\\n    assert not v.is_valid('YES-TA-TOES?')\\n    assert not v.is_valid('\\\\n\\\\nYaes.')\\n\\n\\ndef test_char_exclude():\\n    v = val.String(exclude='abcd')\\n    assert v.is_valid('efg')\\n    assert not v.is_valid('abc')\\n    assert not v.is_valid('c')\\n\\n\\ndef test_char_exclude_igonre_case():\\n    v = val.String(exclude='abcd', ignore_case=True)\\n    assert v.is_valid('efg')\\n    assert v.is_valid('Efg')\\n    assert not v.is_valid('abc')\\n    assert not v.is_valid('Def')\\n    assert not v.is_valid('c')\\n\\n\\ndef test_ip4():\\n    v = val.Ip(version=4)\\n    assert v.is_valid('192.168.1.1')\\n    assert v.is_valid('192.168.1.255')\\n    assert v.is_valid('192.168.3.1/24')\\n    assert not v.is_valid('2001:db8::')\\n    assert not v.is_valid('2001:db8::/64')\\n\\ndef test_ip6():\\n    v = val.Ip(version=6)\\n    assert not v.is_valid('192.168.1.1')\\n    assert not v.is_valid('192.168.1.255')\\n    assert not v.is_valid('192.168.3.1/24')\\n    assert v.is_valid('2001:db8::')\\n    assert v.is_valid('2001:db8::/64')\\n\""}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'from datetime import date, datetime\\nfrom yamale import validators as val\\n\\n\\ndef test_validator_defaults():\\n    \"\"\"\\n    Unit test the dictionary of default validators.\\n    \"\"\"\\n    assert val.DefaultValidators[val.String.tag] is val.String\\n    assert val.DefaultValidators[val.Any.__name__] is val.Any\\n\\n\\ndef test_equality():\\n    assert val.String() == val.String()\\n    assert val.String(hello=\\'wat\\') == val.String(hello=\\'wat\\')\\n    assert val.String(hello=\\'wat\\') != val.String(hello=\\'nope\\')\\n    assert val.Boolean(\\'yep\\') != val.Boolean(\\'nope\\')\\n\\n\\ndef test_integer():\\n    v = val.Integer()\\n    assert v.is_valid(1)\\n    assert not v.is_valid(\\'1\\')\\n    assert not v.is_valid(1.34)\\n\\n\\ndef test_string():\\n    v = val.String()\\n    assert v.is_valid(\\'1\\')\\n    assert not v.is_valid(1)\\n\\n\\ndef test_regex():\\n    v = val.Regex(r\\'^(abc)\\\\1?de$\\', name=\\'test regex\\')\\n    assert v.is_valid(\\'abcabcde\\')\\n    assert not v.is_valid(\\'abcabcabcde\\')\\n    assert not v.is_valid(\\'\\\\12\\')\\n    assert v.fail(\\'woopz\\') == \\'\\\\\\'woopz\\\\\\' is not a test regex.\\'\\n\\n    v = val.Regex(r\\'[a-z0-9]{3,}s\\\\s$\\', ignore_case=True)\\n    assert v.is_valid(\\'b33S\\\\v\\')\\n    assert v.is_valid(\\'B33s\\\\t\\')\\n    assert not v.is_valid(\\' b33s \\')\\n    assert not v.is_valid(\\'b33s  \\')\\n    assert v.fail(\\'fdsa\\') == \\'\\\\\\'fdsa\\\\\\' is not a regex match.\\'\\n\\n    v = val.Regex(r\\'A.+\\\\d$\\', ignore_case=False, multiline=True)\\n    assert v.is_valid(\\'A_-3\\\\n\\\\n\\')\\n    assert not v.is_valid(\\'a!!!!!5\\\\n\\\\n\\')\\n\\n    v = val.Regex(r\\'.*^Ye.*s\\\\.\\', ignore_case=True, multiline=True, dotall=True)\\n    assert v.is_valid(\\'YEeeEEEEeeeeS.\\')\\n    assert v.is_valid(\\'What?\\\\nYes!\\\\nBEES.\\\\nOK.\\')\\n    assert not v.is_valid(\\'YES-TA-TOES?\\')\\n    assert not v.is_valid(\\'\\\\n\\\\nYaes.\\')\\n\\n\\ndef test_number():\\n    v = val.Number()\\n    assert v.is_valid(1)\\n    assert v.is_valid(1.3425235)\\n    assert not v.is_valid(\\'str\\')\\n\\n\\ndef test_boolean():\\n    v = val.Boolean()\\n    assert v.is_valid(True)\\n    assert v.is_valid(False)\\n    assert not v.is_valid(\\'\\')\\n    assert not v.is_valid(0)\\n\\n\\ndef test_date():\\n    v = val.Day()\\n    assert v.is_valid(date(2015, 1, 1))\\n    assert v.is_valid(datetime(2015, 1, 1, 1))\\n    assert not v.is_valid(\\'\\')\\n    assert not v.is_valid(0)\\n\\n\\ndef test_datetime():\\n    v = val.Timestamp()\\n    assert v.is_valid(datetime(2015, 1, 1, 1))\\n    assert not v.is_valid(date(2015, 1, 1))\\n    assert not v.is_valid(\\'\\')\\n    assert not v.is_valid(0)\\n\\n\\ndef test_list():\\n    v = val.List()\\n    assert v.is_valid([])\\n    assert v.is_valid(())\\n    assert not v.is_valid(\\'\\')\\n    assert not v.is_valid(0)\\n\\n\\ndef test_null():\\n    v = val.Null()\\n    assert v.is_valid(None)\\n    assert not v.is_valid(\\'None\\')\\n    assert not v.is_valid(0)\\n    assert not v.is_valid(float(\\'nan\\'))\\n    assert not v.is_valid({})\\n\\ndef test_ip():\\n    v = val.Ip()\\n    assert v.is_valid(\\'192.168.1.1\\')\\n    assert v.is_valid(\\'192.168.1.255\\')\\n    assert v.is_valid(\\'192.168.3.1/24\\')\\n    assert v.is_valid(\\'2001:db8::\\')\\n    assert v.is_valid(\\'2001:db8::/64\\')\\n    assert not v.is_valid(\\'257.192.168.1\\')\\n    assert not v.is_valid(\\'192.168.1.256\\')\\n    assert not v.is_valid(\\'2001:db8::/129\\')\\n    assert not v.is_valid(\\'2001:dg8::/127\\')\\n    assert not v.is_valid(\\'asdf\\')\\n\\ndef test_mac():\\n    v = val.Mac()\\n    assert v.is_valid(\\'12:34:56:78:90:ab\\')\\n    assert v.is_valid(\\'1234:5678:90ab\\')\\n    assert v.is_valid(\\'12-34-56-78-90-ab\\')\\n    assert v.is_valid(\\'1234-5678-90ab\\')\\n\\n    assert v.is_valid(\\'12:34:56:78:90:AB\\')\\n    assert v.is_valid(\\'1234:5678:90AB\\')\\n    assert v.is_valid(\\'12-34-56-78-90-AB\\')\\n    assert v.is_valid(\\'1234-5678-90AB\\')\\n\\n    assert v.is_valid(\\'ab:cd:ef:12:34:56\\')\\n    assert v.is_valid(\\'abcd:ef12:3456\\')\\n    assert v.is_valid(\\'ab-cd-ef-12-34-56\\')\\n    assert v.is_valid(\\'abcd-ef12-3456\\')\\n\\n    assert v.is_valid(\\'AB:CD:EF:12:34:56\\')\\n    assert v.is_valid(\\'ABCD:EF12:3456\\')\\n    assert v.is_valid(\\'AB-CD-EF-12-34-56\\')\\n    assert v.is_valid(\\'ABCD-EF12-3456\\')\\n\\n    assert not v.is_valid(\\'qwertyuiop\\')\\n    assert not v.is_valid(\\'qw-er-ty-12-34-56\\')\\n    assert not v.is_valid(\\'ab:cd:ef:12:34:56:78\\')\\n    assert not v.is_valid(\\'abcdefghijkl\\')\\n    assert not v.is_valid(\\'1234567890ax\\')\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'import re\\nfrom datetime import date, datetime\\nimport ipaddress\\nfrom .base import Validator\\nfrom . import constraints as con\\nfrom .. import util\\n\\n# ABCs for containers were moved to their own module\\ntry:\\n    from collections.abc import Sequence, Mapping\\nexcept ImportError:\\n    from collections import Sequence, Mapping\\n\\n\\nclass String(Validator):\\n    \"\"\"String validator\"\"\"\\n    tag = \\'str\\'\\n    constraints = [con.LengthMin,\\n                   con.LengthMax,\\n                   con.CharacterExclude,\\n                   con.StringEquals,\\n                   con.StringStartsWith,\\n                   con.StringEndsWith,\\n                   con.StringMatches]\\n\\n    def _is_valid(self, value):\\n        return util.isstr(value)\\n\\n\\nclass Number(Validator):\\n    \"\"\"Number/float validator\"\"\"\\n    value_type = float\\n    tag = \\'num\\'\\n    constraints = [con.Min, con.Max]\\n\\n    def _is_valid(self, value):\\n        return isinstance(value, (int, float)) and not isinstance(value, bool)\\n\\n\\nclass Integer(Validator):\\n    \"\"\"Integer validator\"\"\"\\n    value_type = int\\n    tag = \\'int\\'\\n    constraints = [con.Min, con.Max]\\n\\n    def _is_valid(self, value):\\n        return isinstance(value, int) and not isinstance(value, bool)\\n\\n\\nclass Boolean(Validator):\\n    \"\"\"Boolean validator\"\"\"\\n    tag = \\'bool\\'\\n\\n    def _is_valid(self, value):\\n        return isinstance(value, bool)\\n\\n\\nclass Enum(Validator):\\n    \"\"\"Enum validator\"\"\"\\n    tag = \\'enum\\'\\n\\n    def __init__(self, *args, **kwargs):\\n        super(Enum, self).__init__(*args, **kwargs)\\n        self.enums = args\\n\\n    def _is_valid(self, value):\\n        return value in self.enums\\n\\n    def fail(self, value):\\n        return \\'\\\\\\'%s\\\\\\' not in %s\\' % (value, self.enums)\\n\\n\\nclass Day(Validator):\\n    \"\"\"Day validator. Format: YYYY-MM-DD\"\"\"\\n    value_type = date\\n    tag = \\'day\\'\\n    constraints = [con.Min, con.Max]\\n\\n    def _is_valid(self, value):\\n        return isinstance(value, date)\\n\\n\\nclass Timestamp(Validator):\\n    \"\"\"Timestamp validator. Format: YYYY-MM-DD HH:MM:SS\"\"\"\\n    value_type = datetime\\n    tag = \\'timestamp\\'\\n    constraints = [con.Min, con.Max]\\n\\n    def _is_valid(self, value):\\n        return isinstance(value, datetime)\\n\\n\\nclass Map(Validator):\\n    \"\"\"Map and dict validator\"\"\"\\n    tag = \\'map\\'\\n    constraints = [con.LengthMin, con.LengthMax, con.Key]\\n\\n    def __init__(self, *args, **kwargs):\\n        super(Map, self).__init__(*args, **kwargs)\\n        self.validators = [val for val in args if isinstance(val, Validator)]\\n\\n    def _is_valid(self, value):\\n        return isinstance(value, Mapping)\\n\\n\\nclass List(Validator):\\n    \"\"\"List validator\"\"\"\\n    tag = \\'list\\'\\n    constraints = [con.LengthMin, con.LengthMax]\\n\\n    def __init__(self, *args, **kwargs):\\n        super(List, self).__init__(*args, **kwargs)\\n        self.validators = [val for val in args if isinstance(val, Validator)]\\n\\n    def _is_valid(self, value):\\n        return isinstance(value, Sequence) and not util.isstr(value)\\n\\n\\nclass Include(Validator):\\n    \"\"\"Include validator\"\"\"\\n    tag = \\'include\\'\\n\\n    def __init__(self, *args, **kwargs):\\n        self.include_name = args[0]\\n        self.strict = kwargs.pop(\\'strict\\', None)\\n        super(Include, self).__init__(*args, **kwargs)\\n\\n    def _is_valid(self, value):\\n        return True\\n\\n    def get_name(self):\\n        return self.include_name\\n\\n\\nclass Any(Validator):\\n    \"\"\"Any of several types validator\"\"\"\\n    tag = \\'any\\'\\n\\n    def __init__(self, *args, **kwargs):\\n        self.validators = [val for val in args if isinstance(val, Validator)]\\n        super(Any, self).__init__(*args, **kwargs)\\n\\n    def _is_valid(self, value):\\n        return True\\n\\nclass Subset(Validator):\\n    \"\"\"Subset of several types validator\"\"\"\\n    tag = \\'subset\\'\\n\\n    def __init__(self, *args, **kwargs):\\n        super(Subset, self).__init__(*args, **kwargs)\\n        self._allow_empty_set = bool(kwargs.pop(\\'allow_empty\\', False))\\n        self.validators = [val for val in args if isinstance(val, Validator)]\\n        if not self.validators:\\n            raise ValueError(\\'\\\\\\'%s\\\\\\' requires at least one validator!\\' % self.tag)\\n\\n    def _is_valid(self, value):\\n        return self.can_be_none or value is not None\\n\\n    def fail(self, value):\\n        # Called in case `_is_valid` returns False\\n        return \\'\\\\\\'%s\\\\\\' may not be an empty set.\\' % self.get_name()\\n\\n    @property\\n    def is_optional(self):\\n        return self._allow_empty_set\\n\\n    @property\\n    def can_be_none(self):\\n        return self._allow_empty_set\\n\\n\\nclass Null(Validator):\\n    \"\"\"Validates null\"\"\"\\n    value_type = None\\n    tag = \\'null\\'\\n\\n    def _is_valid(self, value):\\n        return value is None\\n\\n\\nclass Regex(Validator):\\n    \"\"\"Regular expression validator\"\"\"\\n    tag = \\'regex\\'\\n    _regex_flags = {\\'ignore_case\\': re.I, \\'multiline\\': re.M, \\'dotall\\': re.S}\\n\\n    def __init__(self, *args, **kwargs):\\n        self.regex_name = kwargs.pop(\\'name\\', None)\\n\\n        flags = 0\\n        for k, v in util.get_iter(self._regex_flags):\\n            flags |= v if kwargs.pop(k, False) else 0\\n\\n        self.regexes = [re.compile(arg, flags)\\n                        for arg in args if util.isstr(arg)]\\n        super(Regex, self).__init__(*args, **kwargs)\\n\\n    def _is_valid(self, value):\\n        return util.isstr(value) and any(r.match(value) for r in self.regexes)\\n\\n    def get_name(self):\\n        return self.regex_name or self.tag + \" match\"\\n\\n\\nclass Ip(Validator):\\n    \"\"\"IP address validator\"\"\"\\n    tag = \\'ip\\'\\n    constraints = [con.IpVersion]\\n\\n    def _is_valid(self, value):\\n        return self.ip_address(value)\\n\\n    def ip_address(self, value):\\n        try:\\n            ipaddress.ip_interface(util.to_unicode(value))\\n        except ValueError:\\n            return False\\n        return True\\n\\n\\nclass Mac(Regex):\\n    \"\"\"MAC address validator\"\"\"\\n    tag = \\'mac\\'\\n\\n    def __init__(self, *args, **kwargs):\\n        super(Mac, self).__init__(*args, **kwargs)\\n        self.regexes = [\\n            re.compile(\\n                \"[0-9a-fA-F]{2}([-:]?)[0-9a-fA-F]{2}(\\\\\\\\1[0-9a-fA-F]{2}){4}$\"),\\n            re.compile(\\n                \"[0-9a-fA-F]{4}([-:]?)[0-9a-fA-F]{4}(\\\\\\\\1[0-9a-fA-F]{4})$\"),\\n        ]\\n\\n\\nDefaultValidators = {}\\n\\nfor v in util.get_subclasses(Validator):\\n    # Allow validator nodes to contain either tags or actual name\\n    DefaultValidators[v.tag] = v\\n    DefaultValidators[v.__name__] = v\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b\"#!/usr/bin/env python\\nfrom .schema import Schema\\nfrom .yamale_error import YamaleError\\n\\n\\ndef make_schema(path=None, parser='PyYAML', validators=None, content=None):\\n    # validators = None means use default.\\n    # Import readers here so we can get version information in setup.py.\\n    from . import readers\\n    raw_schemas = readers.parse_yaml(path, parser, content=content)\\n    if not raw_schemas:\\n        raise ValueError('{} is an empty file!'.format(path))\\n    # First document is the base schema\\n    try:\\n        s = Schema(raw_schemas[0], path, validators=validators)\\n        # Additional documents contain Includes.\\n        for raw_schema in raw_schemas[1:]:\\n            s.add_include(raw_schema)\\n    except (TypeError, SyntaxError) as e:\\n        error = 'Schema error in file %s\\\\n' % path\\n        error += str(e)\\n        raise SyntaxError(error)\\n\\n    return s\\n\\n\\ndef make_data(path=None, parser='PyYAML', content=None):\\n    from . import readers\\n    raw_data = readers.parse_yaml(path, parser, content=content)\\n    if len(raw_data) == 0:\\n        return [({}, path)]\\n    return [(d, path) for d in raw_data]\\n\\n\\ndef validate(schema, data, strict=True, _raise_error=True):\\n    results = []\\n    is_valid = True\\n    for d, path in data:\\n        result = schema.validate(d, path, strict)\\n        results.append(result)\\n        is_valid = is_valid and result.isValid()\\n    if _raise_error and not is_valid:\\n        raise YamaleError(results)\\n    return results\\n\""}, "return_value": "'utf-8'"}, {"func_args": {"source": "b\"class YamaleError(ValueError):\\n    def __init__(self, results):\\n        super(YamaleError, self).__init__('\\\\n'.join([str(x) for x in list(filter(lambda x: not x.isValid(), results))]))\\n        self.message = self.args[0]\\n        self.results = results\\n\""}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'import glob\\nimport os\\nimport itertools\\n\\nfrom unittest import TestCase\\n\\nimport yamale\\n\\n\\nclass YamaleTestCase(TestCase):\\n    \"\"\" TestCase for easily validating YAML in your own tests.\\n    `schema`: String of path to the schema file to use. One schema file per test case.\\n    `yaml`: String or list of yaml files to validate. Accepts globs.\\n    `base_dir`: String path to prepend to all other paths. This is optional.\\n    \"\"\"\\n\\n    schema = None\\n    yaml = None\\n    base_dir = None\\n\\n    def validate(self, validators=None):\\n        schema = self.schema\\n        yaml = self.yaml\\n        base_dir = self.base_dir\\n\\n        if schema is None:\\n            return\\n\\n        if type(yaml) != list:\\n            yaml = [yaml]\\n\\n        if base_dir is not None:\\n            schema = os.path.join(base_dir, schema)\\n            yaml = {os.path.join(base_dir, y) for y in yaml}\\n\\n        # Run yaml through glob and flatten list\\n        yaml = set(itertools.chain(*map(glob.glob, yaml)))\\n\\n        # Remove schema from set of data files\\n        yaml = yaml - {schema}\\n\\n        yamale_schema = yamale.make_schema(schema, validators=validators)\\n        yamale_data = itertools.chain(*map(yamale.make_data, yaml))\\n\\n        for result in yamale.validate(yamale_schema, yamale_data):\\n            if not result.isValid():\\n                raise ValueError(result)\\n        return True\\n\\n'"}, "return_value": "'utf-8'"}]}, "neuter_encoding_declaration": {"line": 214, "args": [{"func_args": {"source": "'from .yamale import make_schema, make_data, validate\\nfrom .yamale_testcase import YamaleTestCase\\nfrom .yamale_error import YamaleError\\n'"}, "return_value": "'from .yamale import make_schema, make_data, validate\\nfrom .yamale_testcase import YamaleTestCase\\nfrom .yamale_error import YamaleError\\n'"}, {"func_args": {"source": "'#!/usr/bin/env python\\n# -*- coding: utf-8 -*-\\n\\n\"\"\"\\n    Validate yaml files and check them against their schemas. Designed to be used outside of Vagrant.\\n\\n    Just install Yamale:\\n        pip install yamale\\n\"\"\"\\n\\nimport argparse\\nimport glob\\nimport os\\nfrom multiprocessing import Pool\\nfrom .yamale_error import YamaleError\\nfrom .schema.validationresults import Result\\n\\nimport yamale\\n\\nschemas = {}\\n\\n\\ndef _validate(schema_path, data_path, parser, strict, _raise_error):\\n    schema = schemas.get(schema_path)\\n    try:\\n        if not schema:\\n            schema = yamale.make_schema(schema_path, parser)\\n            schemas[schema_path] = schema\\n    except (SyntaxError, ValueError) as e:\\n        results = [Result([str(e)])]\\n        if not _raise_error:\\n            return results\\n        raise YamaleError(results)\\n    data = yamale.make_data(data_path, parser)\\n    return yamale.validate(schema, data, strict, _raise_error)\\n\\n\\ndef _find_data_path_schema(data_path, schema_name):\\n    \"\"\" Starts in the data file folder and recursively looks\\n    in parents for `schema_name` \"\"\"\\n    if not data_path or data_path == os.path.abspath(os.sep) or data_path == \\'.\\':\\n        return None\\n    directory = os.path.dirname(data_path)\\n    path = glob.glob(os.path.join(directory, schema_name))\\n    if not path:\\n        return _find_schema(directory, schema_name)\\n    return path[0]\\n\\n\\ndef _find_schema(data_path, schema_name):\\n    \"\"\" Checks if `schema_name` is a valid file, if not\\n    searches in `data_path` for it. \"\"\"\\n\\n    directory = os.path.dirname(data_path)\\n    path = glob.glob(os.path.join(directory, schema_name))\\n    for p in path:\\n        if os.path.isfile(p):\\n            return p\\n\\n    return _find_data_path_schema(data_path, schema_name)\\n\\n\\ndef _validate_single(yaml_path, schema_name, parser, strict):\\n    print(\\'Validating %s...\\' % yaml_path)\\n    s = _find_schema(yaml_path, schema_name)\\n    if not s:\\n        raise ValueError(\"Invalid schema name for \\'{}\\' or schema not found.\".format(schema_name))\\n    _validate(s, yaml_path, parser, strict, True)\\n\\n\\ndef _validate_dir(root, schema_name, cpus, parser, strict):\\n    pool = Pool(processes=cpus)\\n    res = []\\n    error_messages = []\\n    print(\\'Finding yaml files...\\')\\n    for root, dirs, files in os.walk(root):\\n        for f in files:\\n            if (f.endswith(\\'.yaml\\') or f.endswith(\\'.yml\\')) and f != schema_name:\\n                d = os.path.join(root, f)\\n                s = _find_schema(d, schema_name)\\n                if s:\\n                    res.append(pool.apply_async(_validate,\\n                                                (s, d, parser, strict, False)))\\n                else:\\n                    print(\\'No schema found for: %s\\' % d)\\n\\n    print(\\'Found %s yaml files.\\' % len(res))\\n    print(\\'Validating...\\')\\n    for r in res:\\n        sub_results = r.get(timeout=300)\\n        error_messages.extend([str(sub_result)\\n                               for sub_result in sub_results\\n                               if not sub_result.isValid()])\\n    pool.close()\\n    pool.join()\\n    if error_messages:\\n        raise ValueError(\\'\\\\n----\\\\n\\'.join(set(error_messages)))\\n\\n\\ndef _router(root, schema_name, cpus, parser, strict=True):\\n    root = os.path.abspath(root)\\n    if os.path.isfile(root):\\n        _validate_single(root, schema_name, parser, strict)\\n    else:\\n        _validate_dir(root, schema_name, cpus, parser, strict)\\n\\n\\ndef main():\\n    parser = argparse.ArgumentParser(description=\\'Validate yaml files.\\')\\n    parser.add_argument(\\'path\\', metavar=\\'PATH\\', default=\\'./\\', nargs=\\'?\\',\\n                        help=\\'folder to validate. Default is current directory.\\')\\n    parser.add_argument(\\'-s\\', \\'--schema\\', default=\\'schema.yaml\\',\\n                        help=\\'filename of schema. Default is schema.yaml.\\')\\n    parser.add_argument(\\'-n\\', \\'--cpu-num\\', default=4, type=int,\\n                        help=\\'number of CPUs to use. Default is 4.\\')\\n    parser.add_argument(\\'-p\\', \\'--parser\\', default=\\'pyyaml\\',\\n                        help=\\'YAML library to load files. Choices are \"ruamel\" or \"pyyaml\" (default).\\')\\n    parser.add_argument(\\'--no-strict\\', action=\\'store_true\\',\\n                        help=\\'Disable strict mode, unexpected elements in the data will be accepted.\\')\\n    args = parser.parse_args()\\n    try:\\n        _router(args.path, args.schema, args.cpu_num, args.parser, not args.no_strict)\\n        print(\\'Validation success! \ud83d\udc4d\\')\\n    except (SyntaxError, NameError, TypeError, ValueError) as e:\\n        print(\\'Validation failed!\\\\n%s\\' % str(e))\\n        exit(1)\\n\\n\\nif __name__ == \\'__main__\\':\\n    main()\\n'"}, "return_value": "'#!/usr/bin/env python\\n# (deleted declaration) -*-\\n\\n\"\"\"\\n    Validate yaml files and check them against their schemas. Designed to be used outside of Vagrant.\\n\\n    Just install Yamale:\\n        pip install yamale\\n\"\"\"\\n\\nimport argparse\\nimport glob\\nimport os\\nfrom multiprocessing import Pool\\nfrom .yamale_error import YamaleError\\nfrom .schema.validationresults import Result\\n\\nimport yamale\\n\\nschemas = {}\\n\\n\\ndef _validate(schema_path, data_path, parser, strict, _raise_error):\\n    schema = schemas.get(schema_path)\\n    try:\\n        if not schema:\\n            schema = yamale.make_schema(schema_path, parser)\\n            schemas[schema_path] = schema\\n    except (SyntaxError, ValueError) as e:\\n        results = [Result([str(e)])]\\n        if not _raise_error:\\n            return results\\n        raise YamaleError(results)\\n    data = yamale.make_data(data_path, parser)\\n    return yamale.validate(schema, data, strict, _raise_error)\\n\\n\\ndef _find_data_path_schema(data_path, schema_name):\\n    \"\"\" Starts in the data file folder and recursively looks\\n    in parents for `schema_name` \"\"\"\\n    if not data_path or data_path == os.path.abspath(os.sep) or data_path == \\'.\\':\\n        return None\\n    directory = os.path.dirname(data_path)\\n    path = glob.glob(os.path.join(directory, schema_name))\\n    if not path:\\n        return _find_schema(directory, schema_name)\\n    return path[0]\\n\\n\\ndef _find_schema(data_path, schema_name):\\n    \"\"\" Checks if `schema_name` is a valid file, if not\\n    searches in `data_path` for it. \"\"\"\\n\\n    directory = os.path.dirname(data_path)\\n    path = glob.glob(os.path.join(directory, schema_name))\\n    for p in path:\\n        if os.path.isfile(p):\\n            return p\\n\\n    return _find_data_path_schema(data_path, schema_name)\\n\\n\\ndef _validate_single(yaml_path, schema_name, parser, strict):\\n    print(\\'Validating %s...\\' % yaml_path)\\n    s = _find_schema(yaml_path, schema_name)\\n    if not s:\\n        raise ValueError(\"Invalid schema name for \\'{}\\' or schema not found.\".format(schema_name))\\n    _validate(s, yaml_path, parser, strict, True)\\n\\n\\ndef _validate_dir(root, schema_name, cpus, parser, strict):\\n    pool = Pool(processes=cpus)\\n    res = []\\n    error_messages = []\\n    print(\\'Finding yaml files...\\')\\n    for root, dirs, files in os.walk(root):\\n        for f in files:\\n            if (f.endswith(\\'.yaml\\') or f.endswith(\\'.yml\\')) and f != schema_name:\\n                d = os.path.join(root, f)\\n                s = _find_schema(d, schema_name)\\n                if s:\\n                    res.append(pool.apply_async(_validate,\\n                                                (s, d, parser, strict, False)))\\n                else:\\n                    print(\\'No schema found for: %s\\' % d)\\n\\n    print(\\'Found %s yaml files.\\' % len(res))\\n    print(\\'Validating...\\')\\n    for r in res:\\n        sub_results = r.get(timeout=300)\\n        error_messages.extend([str(sub_result)\\n                               for sub_result in sub_results\\n                               if not sub_result.isValid()])\\n    pool.close()\\n    pool.join()\\n    if error_messages:\\n        raise ValueError(\\'\\\\n----\\\\n\\'.join(set(error_messages)))\\n\\n\\ndef _router(root, schema_name, cpus, parser, strict=True):\\n    root = os.path.abspath(root)\\n    if os.path.isfile(root):\\n        _validate_single(root, schema_name, parser, strict)\\n    else:\\n        _validate_dir(root, schema_name, cpus, parser, strict)\\n\\n\\ndef main():\\n    parser = argparse.ArgumentParser(description=\\'Validate yaml files.\\')\\n    parser.add_argument(\\'path\\', metavar=\\'PATH\\', default=\\'./\\', nargs=\\'?\\',\\n                        help=\\'folder to validate. Default is current directory.\\')\\n    parser.add_argument(\\'-s\\', \\'--schema\\', default=\\'schema.yaml\\',\\n                        help=\\'filename of schema. Default is schema.yaml.\\')\\n    parser.add_argument(\\'-n\\', \\'--cpu-num\\', default=4, type=int,\\n                        help=\\'number of CPUs to use. Default is 4.\\')\\n    parser.add_argument(\\'-p\\', \\'--parser\\', default=\\'pyyaml\\',\\n                        help=\\'YAML library to load files. Choices are \"ruamel\" or \"pyyaml\" (default).\\')\\n    parser.add_argument(\\'--no-strict\\', action=\\'store_true\\',\\n                        help=\\'Disable strict mode, unexpected elements in the data will be accepted.\\')\\n    args = parser.parse_args()\\n    try:\\n        _router(args.path, args.schema, args.cpu_num, args.parser, not args.no_strict)\\n        print(\\'Validation success! \ud83d\udc4d\\')\\n    except (SyntaxError, NameError, TypeError, ValueError) as e:\\n        print(\\'Validation failed!\\\\n%s\\' % str(e))\\n        exit(1)\\n\\n\\nif __name__ == \\'__main__\\':\\n    main()\\n'"}, {"func_args": {"source": "'from . import yaml_reader\\n\\nparse_yaml = yaml_reader.parse_yaml\\n'"}, "return_value": "'from . import yaml_reader\\n\\nparse_yaml = yaml_reader.parse_yaml\\n'"}, {"func_args": {"source": "\"import pytest\\nfrom pytest import raises\\nfrom .. import parse_yaml\\n\\nparsers = ['pyyaml', 'PyYAML', 'ruamel']\\n\\n\\n@pytest.mark.parametrize('parser', parsers)\\ndef test_reader_error(parser):\\n    with raises(IOError):\\n        parse_yaml('wat', parser)\\n\""}, "return_value": "\"import pytest\\nfrom pytest import raises\\nfrom .. import parse_yaml\\n\\nparsers = ['pyyaml', 'PyYAML', 'ruamel']\\n\\n\\n@pytest.mark.parametrize('parser', parsers)\\ndef test_reader_error(parser):\\n    with raises(IOError):\\n        parse_yaml('wat', parser)\\n\""}, {"func_args": {"source": "'import io\\nimport pytest\\nfrom .. import yaml_reader\\nfrom yamale.tests import get_fixture\\n\\nparsers = [\\'pyyaml\\', \\'PyYAML\\', \\'ruamel\\']\\nTYPES = get_fixture(\\'types.yaml\\')\\nNESTED = get_fixture(\\'nested.yaml\\')\\nKEYWORDS = get_fixture(\\'keywords.yaml\\')\\n\\n\\n@pytest.mark.parametrize(\\'parser\\', parsers)\\n@pytest.mark.parametrize(\\'use_string\\', [True, False])\\ndef test_parse(parser, use_string):\\n    if use_string:\\n        with io.open(TYPES, encoding=\\'utf-8\\') as f:\\n            content = f.read()\\n        a = yaml_reader.parse_yaml(parser=parser, content=content)[0]\\n    else:\\n        a = yaml_reader.parse_yaml(TYPES, parser)[0]\\n    assert a[\\'string\\'] == \\'str()\\'\\n\\n\\ndef test_parse_validates_arguments():\\n    with pytest.raises(TypeError):\\n        yaml_reader.parse_yaml(path=TYPES, content=\"name: Bob\")\\n    with pytest.raises(TypeError):\\n        yaml_reader.parse_yaml(path=None, content=None)\\n\\n\\n@pytest.mark.parametrize(\\'parser\\', parsers)\\ndef test_types(parser):\\n    t = yaml_reader.parse_yaml(TYPES, parser)[0]\\n    assert t[\\'string\\'] == \\'str()\\'\\n    assert t[\\'number\\'] == \\'num()\\'\\n    assert t[\\'boolean\\'] == \\'bool()\\'\\n    assert t[\\'integer\\'] == \\'int()\\'\\n\\n\\n@pytest.mark.parametrize(\\'parser\\', parsers)\\ndef test_keywords(parser):\\n    t = yaml_reader.parse_yaml(KEYWORDS, parser)[0]\\n    assert t[\\'optional_min\\'] == \\'int(min=1, required=False)\\'\\n\\n\\n@pytest.mark.parametrize(\\'parser\\', parsers)\\ndef test_nested(parser):\\n    t = yaml_reader.parse_yaml(NESTED, parser)[0]\\n    assert t[\\'list\\'][-1][\\'string\\'] == \\'str()\\'\\n'"}, "return_value": "'import io\\nimport pytest\\nfrom .. import yaml_reader\\nfrom yamale.tests import get_fixture\\n\\nparsers = [\\'pyyaml\\', \\'PyYAML\\', \\'ruamel\\']\\nTYPES = get_fixture(\\'types.yaml\\')\\nNESTED = get_fixture(\\'nested.yaml\\')\\nKEYWORDS = get_fixture(\\'keywords.yaml\\')\\n\\n\\n@pytest.mark.parametrize(\\'parser\\', parsers)\\n@pytest.mark.parametrize(\\'use_string\\', [True, False])\\ndef test_parse(parser, use_string):\\n    if use_string:\\n        with io.open(TYPES, encoding=\\'utf-8\\') as f:\\n            content = f.read()\\n        a = yaml_reader.parse_yaml(parser=parser, content=content)[0]\\n    else:\\n        a = yaml_reader.parse_yaml(TYPES, parser)[0]\\n    assert a[\\'string\\'] == \\'str()\\'\\n\\n\\ndef test_parse_validates_arguments():\\n    with pytest.raises(TypeError):\\n        yaml_reader.parse_yaml(path=TYPES, content=\"name: Bob\")\\n    with pytest.raises(TypeError):\\n        yaml_reader.parse_yaml(path=None, content=None)\\n\\n\\n@pytest.mark.parametrize(\\'parser\\', parsers)\\ndef test_types(parser):\\n    t = yaml_reader.parse_yaml(TYPES, parser)[0]\\n    assert t[\\'string\\'] == \\'str()\\'\\n    assert t[\\'number\\'] == \\'num()\\'\\n    assert t[\\'boolean\\'] == \\'bool()\\'\\n    assert t[\\'integer\\'] == \\'int()\\'\\n\\n\\n@pytest.mark.parametrize(\\'parser\\', parsers)\\ndef test_keywords(parser):\\n    t = yaml_reader.parse_yaml(KEYWORDS, parser)[0]\\n    assert t[\\'optional_min\\'] == \\'int(min=1, required=False)\\'\\n\\n\\n@pytest.mark.parametrize(\\'parser\\', parsers)\\ndef test_nested(parser):\\n    t = yaml_reader.parse_yaml(NESTED, parser)[0]\\n    assert t[\\'list\\'][-1][\\'string\\'] == \\'str()\\'\\n'"}, {"func_args": {"source": "'from __future__ import absolute_import\\nfrom io import StringIO\\n\\n\\ndef _pyyaml(f):\\n    import yaml\\n    try:\\n        Loader = yaml.CSafeLoader\\n    except AttributeError:  # System does not have libyaml\\n        Loader = yaml.SafeLoader\\n    return list(yaml.load_all(f, Loader=Loader))\\n\\n\\ndef _ruamel(f):\\n    from ruamel.yaml import YAML\\n    yaml = YAML(typ=\\'safe\\')\\n    return list(yaml.load_all(f))\\n\\n\\n_parsers = {\\n    \\'pyyaml\\': _pyyaml,\\n    \\'ruamel\\': _ruamel\\n}\\n\\n\\ndef parse_yaml(path=None, parser=\\'pyyaml\\', content=None):\\n    try:\\n        parse = _parsers[parser.lower()]\\n    except KeyError:\\n        raise NameError(\\'Parser \"\\' + parser + \\'\" is not supported\\\\nAvailable parsers are listed below:\\\\nPyYAML\\\\nruamel\\')\\n    if (path is None and content is None) or (path is not None and content is not None):\\n        raise TypeError(\"Pass either path= or content=, not both\")\\n    if path is not None:\\n        with open(path) as f:\\n            return parse(f)\\n    else:\\n        return parse(StringIO(content))\\n'"}, "return_value": "'from __future__ import absolute_import\\nfrom io import StringIO\\n\\n\\ndef _pyyaml(f):\\n    import yaml\\n    try:\\n        Loader = yaml.CSafeLoader\\n    except AttributeError:  # System does not have libyaml\\n        Loader = yaml.SafeLoader\\n    return list(yaml.load_all(f, Loader=Loader))\\n\\n\\ndef _ruamel(f):\\n    from ruamel.yaml import YAML\\n    yaml = YAML(typ=\\'safe\\')\\n    return list(yaml.load_all(f))\\n\\n\\n_parsers = {\\n    \\'pyyaml\\': _pyyaml,\\n    \\'ruamel\\': _ruamel\\n}\\n\\n\\ndef parse_yaml(path=None, parser=\\'pyyaml\\', content=None):\\n    try:\\n        parse = _parsers[parser.lower()]\\n    except KeyError:\\n        raise NameError(\\'Parser \"\\' + parser + \\'\" is not supported\\\\nAvailable parsers are listed below:\\\\nPyYAML\\\\nruamel\\')\\n    if (path is None and content is None) or (path is not None and content is not None):\\n        raise TypeError(\"Pass either path= or content=, not both\")\\n    if path is not None:\\n        with open(path) as f:\\n            return parse(f)\\n    else:\\n        return parse(StringIO(content))\\n'"}, {"func_args": {"source": "'from .schema import Schema\\n'"}, "return_value": "'from .schema import Schema\\n'"}, {"func_args": {"source": "\"class DataPath(object):\\n\\n    def __init__(self, *path):\\n        self._path = path\\n\\n    def __add__(self, other):\\n        dp = DataPath()\\n        dp._path = self._path + other._path\\n        return dp\\n\\n    def __str__(self):\\n        return '.'.join(map(str, (self._path)))\\n\\n    def __repr__(self):\\n        return 'DataPath({})'.format(repr(self._path))\\n\""}, "return_value": "\"class DataPath(object):\\n\\n    def __init__(self, *path):\\n        self._path = path\\n\\n    def __add__(self, other):\\n        dp = DataPath()\\n        dp._path = self._path + other._path\\n        return dp\\n\\n    def __str__(self):\\n        return '.'.join(map(str, (self._path)))\\n\\n    def __repr__(self):\\n        return 'DataPath({})'.format(repr(self._path))\\n\""}, {"func_args": {"source": "'from .datapath import DataPath\\nfrom .validationresults import ValidationResult\\nfrom .. import syntax, util\\nfrom .. import validators as val\\n\\n\\nclass Schema(object):\\n    \"\"\"\\n    Makes a Schema object from a schema dict.\\n    Still acts like a dict.\\n    \"\"\"\\n\\n    def __init__(self, schema_dict, name=\\'\\', validators=None, includes=None):\\n        self.validators = validators or val.DefaultValidators\\n        self.dict = schema_dict\\n        self.name = name\\n        self._schema = self._process_schema(DataPath(),\\n                                            schema_dict,\\n                                            self.validators)\\n        # if this schema is included it shares the includes with the top level\\n        # schema\\n        self.includes = {} if includes is None else includes\\n\\n    def add_include(self, type_dict):\\n        for include_name, custom_type in type_dict.items():\\n            t = Schema(custom_type, name=include_name,\\n                       validators=self.validators, includes=self.includes)\\n            self.includes[include_name] = t\\n\\n    def _process_schema(self, path, schema_data, validators):\\n        \"\"\"\\n        Go through a schema and construct validators.\\n        \"\"\"\\n        if util.is_map(schema_data) or util.is_list(schema_data):\\n            for key, data in util.get_iter(schema_data):\\n                schema_data[key] = self._process_schema(path + DataPath(key),\\n                                                        data,\\n                                                        validators)\\n        else:\\n            schema_data = self._parse_schema_item(path,\\n                                                  schema_data,\\n                                                  validators)\\n        return schema_data\\n\\n    def _parse_schema_item(self, path, expression, validators):\\n        try:\\n            return syntax.parse(expression, validators)\\n        except SyntaxError as e:\\n            # Tack on some more context and rethrow.\\n            error = str(e) + \\' at node \\\\\\'%s\\\\\\'\\' % str(path)\\n            raise SyntaxError(error)\\n\\n    def validate(self, data, data_name, strict):\\n        path = DataPath()\\n        errors = self._validate(self._schema, data, path, strict)\\n        return ValidationResult(data_name, self.name, errors)\\n\\n    def _validate_item(self, validator, data, path, strict, key):\\n        \"\"\"\\n        Fetch item from data at the position key and validate with validator.\\n\\n        Returns an array of errors.\\n        \"\"\"\\n        errors = []\\n        path = path + DataPath(key)\\n        try:  # Pull value out of data. Data can be a map or a list/sequence\\n            data_item = data[key]\\n        except (KeyError, IndexError):  # Oops, that field didn\\'t exist.\\n            # Optional? Who cares.\\n            if isinstance(validator, val.Validator) and validator.is_optional:\\n                return errors\\n            # SHUT DOWN EVERYTHING\\n            errors.append(\\'%s: Required field missing\\' % path)\\n            return errors\\n\\n        return self._validate(validator, data_item, path, strict)\\n\\n    def _validate(self, validator, data, path, strict):\\n        \"\"\"\\n        Validate data with validator.\\n        Special handling of non-primitive validators.\\n\\n        Returns an array of errors.\\n        \"\"\"\\n\\n        if util.is_list(validator) or util.is_map(validator):\\n            return self._validate_static_map_list(validator,\\n                                                  data,\\n                                                  path,\\n                                                  strict)\\n\\n        errors = []\\n        # Optional field with optional value? Who cares.\\n        if (data is None and\\n                validator.is_optional and\\n                validator.can_be_none):\\n            return errors\\n\\n        errors += self._validate_primitive(validator, data, path)\\n\\n        if errors:\\n            return errors\\n\\n        if isinstance(validator, val.Include):\\n            errors += self._validate_include(validator, data, path, strict)\\n\\n        elif isinstance(validator, (val.Map, val.List)):\\n            errors += self._validate_map_list(validator, data, path, strict)\\n\\n        elif isinstance(validator, val.Any):\\n            errors += self._validate_any(validator, data, path, strict)\\n\\n        elif isinstance(validator, val.Subset):\\n            errors += self._validate_subset(validator, data, path, strict)\\n\\n        return errors\\n\\n    def _validate_static_map_list(self, validator, data, path, strict):\\n        if util.is_map(validator) and not util.is_map(data):\\n            return [\"%s : \\'%s\\' is not a map\" % (path, data)]\\n\\n        if util.is_list(validator) and not util.is_list(data):\\n            return [\"%s : \\'%s\\' is not a list\" % (path, data)]\\n\\n        errors = []\\n\\n        if strict:\\n            data_keys = set(util.get_keys(data))\\n            validator_keys = set(util.get_keys(validator))\\n            for key in data_keys - validator_keys:\\n                error_path = path + DataPath(key)\\n                errors += [\\'%s: Unexpected element\\' % error_path]\\n\\n        for key, sub_validator in util.get_iter(validator):\\n            errors += self._validate_item(sub_validator,\\n                                          data,\\n                                          path,\\n                                          strict,\\n                                          key)\\n        return errors\\n\\n    def _validate_map_list(self, validator, data, path, strict):\\n        errors = []\\n\\n        if not validator.validators:\\n            return errors  # No validators, user just wanted a map.\\n\\n        for key in util.get_keys(data):\\n            sub_errors = []\\n            for v in validator.validators:\\n                err = self._validate_item(v, data, path, strict, key)\\n                if err:\\n                    sub_errors.append(err)\\n\\n            if len(sub_errors) == len(validator.validators):\\n                # All validators failed, add to errors\\n                for err in sub_errors:\\n                    errors += err\\n\\n        return errors\\n\\n    def _validate_include(self, validator, data, path, strict):\\n        include_schema = self.includes.get(validator.include_name)\\n        if not include_schema:\\n            return [(\\'Include \\\\\\'%s\\\\\\' has not been defined.\\'\\n                     % validator.include_name)]\\n        strict = strict if validator.strict is None else validator.strict\\n        return include_schema._validate(include_schema._schema,\\n                                        data,\\n                                        path,\\n                                        strict)\\n\\n    def _validate_any(self, validator, data, path, strict):\\n        if not validator.validators:\\n            return []\\n\\n        errors = []\\n\\n        sub_errors = []\\n        for v in validator.validators:\\n            err = self._validate(v, data, path, strict)\\n            if err:\\n                sub_errors.append(err)\\n\\n        if len(sub_errors) == len(validator.validators):\\n            # All validators failed, add to errors\\n            for err in sub_errors:\\n                errors += err\\n\\n        return errors\\n\\n    def _validate_subset(self, validator, data, path, strict):\\n        def _internal_validate(internal_data):\\n            sub_errors = []\\n            for val in validator.validators:\\n                err = self._validate(val, internal_data, path, strict)\\n                if not err:\\n                    break\\n                sub_errors += err\\n            else:\\n                return sub_errors\\n            return []\\n\\n        if not validator.validators:\\n            return []\\n\\n        errors = []\\n        if util.is_map(data):\\n            for k, v in data.items():\\n                errors += _internal_validate({k: v})\\n        elif util.is_list(data):\\n            for k in data:\\n                errors += _internal_validate(k)\\n        else:\\n            errors += _internal_validate(data)\\n        return errors\\n\\n    def _validate_primitive(self, validator, data, path):\\n        errors = validator.validate(data)\\n\\n        for i, error in enumerate(errors):\\n            errors[i] = (\\'%s: \\' % path) + error\\n\\n        return errors\\n'"}, "return_value": "'from .datapath import DataPath\\nfrom .validationresults import ValidationResult\\nfrom .. import syntax, util\\nfrom .. import validators as val\\n\\n\\nclass Schema(object):\\n    \"\"\"\\n    Makes a Schema object from a schema dict.\\n    Still acts like a dict.\\n    \"\"\"\\n\\n    def __init__(self, schema_dict, name=\\'\\', validators=None, includes=None):\\n        self.validators = validators or val.DefaultValidators\\n        self.dict = schema_dict\\n        self.name = name\\n        self._schema = self._process_schema(DataPath(),\\n                                            schema_dict,\\n                                            self.validators)\\n        # if this schema is included it shares the includes with the top level\\n        # schema\\n        self.includes = {} if includes is None else includes\\n\\n    def add_include(self, type_dict):\\n        for include_name, custom_type in type_dict.items():\\n            t = Schema(custom_type, name=include_name,\\n                       validators=self.validators, includes=self.includes)\\n            self.includes[include_name] = t\\n\\n    def _process_schema(self, path, schema_data, validators):\\n        \"\"\"\\n        Go through a schema and construct validators.\\n        \"\"\"\\n        if util.is_map(schema_data) or util.is_list(schema_data):\\n            for key, data in util.get_iter(schema_data):\\n                schema_data[key] = self._process_schema(path + DataPath(key),\\n                                                        data,\\n                                                        validators)\\n        else:\\n            schema_data = self._parse_schema_item(path,\\n                                                  schema_data,\\n                                                  validators)\\n        return schema_data\\n\\n    def _parse_schema_item(self, path, expression, validators):\\n        try:\\n            return syntax.parse(expression, validators)\\n        except SyntaxError as e:\\n            # Tack on some more context and rethrow.\\n            error = str(e) + \\' at node \\\\\\'%s\\\\\\'\\' % str(path)\\n            raise SyntaxError(error)\\n\\n    def validate(self, data, data_name, strict):\\n        path = DataPath()\\n        errors = self._validate(self._schema, data, path, strict)\\n        return ValidationResult(data_name, self.name, errors)\\n\\n    def _validate_item(self, validator, data, path, strict, key):\\n        \"\"\"\\n        Fetch item from data at the position key and validate with validator.\\n\\n        Returns an array of errors.\\n        \"\"\"\\n        errors = []\\n        path = path + DataPath(key)\\n        try:  # Pull value out of data. Data can be a map or a list/sequence\\n            data_item = data[key]\\n        except (KeyError, IndexError):  # Oops, that field didn\\'t exist.\\n            # Optional? Who cares.\\n            if isinstance(validator, val.Validator) and validator.is_optional:\\n                return errors\\n            # SHUT DOWN EVERYTHING\\n            errors.append(\\'%s: Required field missing\\' % path)\\n            return errors\\n\\n        return self._validate(validator, data_item, path, strict)\\n\\n    def _validate(self, validator, data, path, strict):\\n        \"\"\"\\n        Validate data with validator.\\n        Special handling of non-primitive validators.\\n\\n        Returns an array of errors.\\n        \"\"\"\\n\\n        if util.is_list(validator) or util.is_map(validator):\\n            return self._validate_static_map_list(validator,\\n                                                  data,\\n                                                  path,\\n                                                  strict)\\n\\n        errors = []\\n        # Optional field with optional value? Who cares.\\n        if (data is None and\\n                validator.is_optional and\\n                validator.can_be_none):\\n            return errors\\n\\n        errors += self._validate_primitive(validator, data, path)\\n\\n        if errors:\\n            return errors\\n\\n        if isinstance(validator, val.Include):\\n            errors += self._validate_include(validator, data, path, strict)\\n\\n        elif isinstance(validator, (val.Map, val.List)):\\n            errors += self._validate_map_list(validator, data, path, strict)\\n\\n        elif isinstance(validator, val.Any):\\n            errors += self._validate_any(validator, data, path, strict)\\n\\n        elif isinstance(validator, val.Subset):\\n            errors += self._validate_subset(validator, data, path, strict)\\n\\n        return errors\\n\\n    def _validate_static_map_list(self, validator, data, path, strict):\\n        if util.is_map(validator) and not util.is_map(data):\\n            return [\"%s : \\'%s\\' is not a map\" % (path, data)]\\n\\n        if util.is_list(validator) and not util.is_list(data):\\n            return [\"%s : \\'%s\\' is not a list\" % (path, data)]\\n\\n        errors = []\\n\\n        if strict:\\n            data_keys = set(util.get_keys(data))\\n            validator_keys = set(util.get_keys(validator))\\n            for key in data_keys - validator_keys:\\n                error_path = path + DataPath(key)\\n                errors += [\\'%s: Unexpected element\\' % error_path]\\n\\n        for key, sub_validator in util.get_iter(validator):\\n            errors += self._validate_item(sub_validator,\\n                                          data,\\n                                          path,\\n                                          strict,\\n                                          key)\\n        return errors\\n\\n    def _validate_map_list(self, validator, data, path, strict):\\n        errors = []\\n\\n        if not validator.validators:\\n            return errors  # No validators, user just wanted a map.\\n\\n        for key in util.get_keys(data):\\n            sub_errors = []\\n            for v in validator.validators:\\n                err = self._validate_item(v, data, path, strict, key)\\n                if err:\\n                    sub_errors.append(err)\\n\\n            if len(sub_errors) == len(validator.validators):\\n                # All validators failed, add to errors\\n                for err in sub_errors:\\n                    errors += err\\n\\n        return errors\\n\\n    def _validate_include(self, validator, data, path, strict):\\n        include_schema = self.includes.get(validator.include_name)\\n        if not include_schema:\\n            return [(\\'Include \\\\\\'%s\\\\\\' has not been defined.\\'\\n                     % validator.include_name)]\\n        strict = strict if validator.strict is None else validator.strict\\n        return include_schema._validate(include_schema._schema,\\n                                        data,\\n                                        path,\\n                                        strict)\\n\\n    def _validate_any(self, validator, data, path, strict):\\n        if not validator.validators:\\n            return []\\n\\n        errors = []\\n\\n        sub_errors = []\\n        for v in validator.validators:\\n            err = self._validate(v, data, path, strict)\\n            if err:\\n                sub_errors.append(err)\\n\\n        if len(sub_errors) == len(validator.validators):\\n            # All validators failed, add to errors\\n            for err in sub_errors:\\n                errors += err\\n\\n        return errors\\n\\n    def _validate_subset(self, validator, data, path, strict):\\n        def _internal_validate(internal_data):\\n            sub_errors = []\\n            for val in validator.validators:\\n                err = self._validate(val, internal_data, path, strict)\\n                if not err:\\n                    break\\n                sub_errors += err\\n            else:\\n                return sub_errors\\n            return []\\n\\n        if not validator.validators:\\n            return []\\n\\n        errors = []\\n        if util.is_map(data):\\n            for k, v in data.items():\\n                errors += _internal_validate({k: v})\\n        elif util.is_list(data):\\n            for k in data:\\n                errors += _internal_validate(k)\\n        else:\\n            errors += _internal_validate(data)\\n        return errors\\n\\n    def _validate_primitive(self, validator, data, path):\\n        errors = validator.validate(data)\\n\\n        for i, error in enumerate(errors):\\n            errors[i] = (\\'%s: \\' % path) + error\\n\\n        return errors\\n'"}, {"func_args": {"source": "'class Result(object):\\n    def __init__(self, errors):\\n        self.errors = errors\\n\\n    def __str__(self):\\n        return \\'\\\\n\\'.join(self.errors)\\n\\n    def isValid(self):\\n        return len(self.errors) == 0\\n\\n\\nclass ValidationResult(Result):\\n    def __init__(self, data, schema, errors):\\n        super(ValidationResult, self).__init__(errors)\\n        self.data = data\\n        self.schema = schema\\n\\n    def __str__(self):\\n        if self.isValid():\\n            error_str = \"\\'%s\\' is Valid\" % self.data\\n        else:\\n            head_line_bits = [\"Error validating data\"]\\n            if self.data:\\n                head_line_bits.append(\"\\'{}\\'\".format(self.data))\\n            if self.schema:\\n                head_line_bits.append(\"with schema \\'{}\\'\".format(self.schema))\\n            head_line = \\' \\'.join(head_line_bits)\\n            head_line += \\'\\\\n\\\\t\\'\\n            error_str = head_line + \\'\\\\n\\\\t\\'.join(self.errors)\\n        return error_str\\n'"}, "return_value": "'class Result(object):\\n    def __init__(self, errors):\\n        self.errors = errors\\n\\n    def __str__(self):\\n        return \\'\\\\n\\'.join(self.errors)\\n\\n    def isValid(self):\\n        return len(self.errors) == 0\\n\\n\\nclass ValidationResult(Result):\\n    def __init__(self, data, schema, errors):\\n        super(ValidationResult, self).__init__(errors)\\n        self.data = data\\n        self.schema = schema\\n\\n    def __str__(self):\\n        if self.isValid():\\n            error_str = \"\\'%s\\' is Valid\" % self.data\\n        else:\\n            head_line_bits = [\"Error validating data\"]\\n            if self.data:\\n                head_line_bits.append(\"\\'{}\\'\".format(self.data))\\n            if self.schema:\\n                head_line_bits.append(\"with schema \\'{}\\'\".format(self.schema))\\n            head_line = \\' \\'.join(head_line_bits)\\n            head_line += \\'\\\\n\\\\t\\'\\n            error_str = head_line + \\'\\\\n\\\\t\\'.join(self.errors)\\n        return error_str\\n'"}, {"func_args": {"source": "'from .parser import parse\\n'"}, "return_value": "'from .parser import parse\\n'"}, {"func_args": {"source": "\"import ast\\n\\nfrom .. import validators as val\\n\\nsafe_globals = ('True', 'False', 'None')\\nsafe_builtins = dict((f, __builtins__[f]) for f in safe_globals)\\n\\n\\ndef _validate_expr(call_node, validators):\\n    # Validate that the expression uses a known, registered validator.\\n    try:\\n        func_name = call_node.func.id\\n    except AttributeError:\\n        raise SyntaxError('Schema expressions must be enclosed by a validator.')\\n    if func_name not in validators:\\n        raise SyntaxError('Not a registered validator: \\\\'%s\\\\'. ' % func_name)\\n    # Validate that all args are constant literals, validator names,  or other call nodes\\n    arg_values = call_node.args + [kw.value for kw in call_node.keywords]\\n    for arg in arg_values:\\n        # In Python 3.8+, the following have been folded into ast.Constant.\\n        constant_types = [\\n            ast.Constant, ast.Num, ast.Str, ast.Bytes, ast.NameConstant]\\n        base_arg = arg.operand if isinstance(arg, ast.UnaryOp) else arg\\n        if any(isinstance(base_arg, type) for type in constant_types):\\n            continue\\n        elif isinstance(base_arg, ast.Name) and base_arg.id in validators:\\n            continue\\n        elif isinstance(base_arg, ast.Call):\\n            _validate_expr(base_arg, validators)\\n        else:\\n            raise SyntaxError(\\n                'Argument values must either be constant literals, or else '\\n                'reference other validators.')\\n\\n\\ndef parse(validator_string, validators=None):\\n    validators = validators or val.DefaultValidators\\n    try:\\n        tree = ast.parse(validator_string, mode='eval')\\n        _validate_expr(tree.body, validators)\\n        # evaluate with access to a limited global scope only\\n        return eval(compile(tree, '<ast>', 'eval'),\\n                    {'__builtins__': safe_builtins},\\n                    validators)\\n    except (SyntaxError, NameError, TypeError) as e:\\n        raise SyntaxError(\\n            'Invalid schema expression: \\\\'%s\\\\'. ' % validator_string +\\n            str(e)\\n        )\\n\""}, "return_value": "\"import ast\\n\\nfrom .. import validators as val\\n\\nsafe_globals = ('True', 'False', 'None')\\nsafe_builtins = dict((f, __builtins__[f]) for f in safe_globals)\\n\\n\\ndef _validate_expr(call_node, validators):\\n    # Validate that the expression uses a known, registered validator.\\n    try:\\n        func_name = call_node.func.id\\n    except AttributeError:\\n        raise SyntaxError('Schema expressions must be enclosed by a validator.')\\n    if func_name not in validators:\\n        raise SyntaxError('Not a registered validator: \\\\'%s\\\\'. ' % func_name)\\n    # Validate that all args are constant literals, validator names,  or other call nodes\\n    arg_values = call_node.args + [kw.value for kw in call_node.keywords]\\n    for arg in arg_values:\\n        # In Python 3.8+, the following have been folded into ast.Constant.\\n        constant_types = [\\n            ast.Constant, ast.Num, ast.Str, ast.Bytes, ast.NameConstant]\\n        base_arg = arg.operand if isinstance(arg, ast.UnaryOp) else arg\\n        if any(isinstance(base_arg, type) for type in constant_types):\\n            continue\\n        elif isinstance(base_arg, ast.Name) and base_arg.id in validators:\\n            continue\\n        elif isinstance(base_arg, ast.Call):\\n            _validate_expr(base_arg, validators)\\n        else:\\n            raise SyntaxError(\\n                'Argument values must either be constant literals, or else '\\n                'reference other validators.')\\n\\n\\ndef parse(validator_string, validators=None):\\n    validators = validators or val.DefaultValidators\\n    try:\\n        tree = ast.parse(validator_string, mode='eval')\\n        _validate_expr(tree.body, validators)\\n        # evaluate with access to a limited global scope only\\n        return eval(compile(tree, '<ast>', 'eval'),\\n                    {'__builtins__': safe_builtins},\\n                    validators)\\n    except (SyntaxError, NameError, TypeError) as e:\\n        raise SyntaxError(\\n            'Invalid schema expression: \\\\'%s\\\\'. ' % validator_string +\\n            str(e)\\n        )\\n\""}, {"func_args": {"source": "\"from pytest import raises\\n\\nfrom .. import parser as par\\nfrom yamale.validators.validators import (\\n    Validator, String, Regex, Number, Integer, Boolean, List, Day, Timestamp,\\n    Ip, Mac)\\n\\n\\ndef test_eval():\\n    assert eval('String()') == String()\\n\\n\\ndef test_types():\\n    assert par.parse('String()') == String()\\n    assert par.parse('str()') == String()\\n    assert par.parse('regex()') == Regex()\\n    assert par.parse('num()') == Number()\\n    assert par.parse('int()') == Integer()\\n    assert par.parse('day()') == Day()\\n    assert par.parse('timestamp()') == Timestamp()\\n    assert par.parse('bool()') == Boolean()\\n    assert par.parse('list(str())') == List(String())\\n    assert par.parse('ip()') == Ip()\\n    assert par.parse('mac()') == Mac()\\n\\n\\ndef test_custom_type():\\n\\n    class my_validator(Validator):\\n        pass\\n\\n    assert par.parse('custom()', {'custom': my_validator}) == my_validator()\\n\\n\\ndef test_required():\\n    assert par.parse('str(required=True)').is_required\\n    assert par.parse('str(required=False)').is_optional\\n\\n\\ndef test_syntax_error():\\n    with raises(SyntaxError):\\n        par.parse('eval()')\\n\""}, "return_value": "\"from pytest import raises\\n\\nfrom .. import parser as par\\nfrom yamale.validators.validators import (\\n    Validator, String, Regex, Number, Integer, Boolean, List, Day, Timestamp,\\n    Ip, Mac)\\n\\n\\ndef test_eval():\\n    assert eval('String()') == String()\\n\\n\\ndef test_types():\\n    assert par.parse('String()') == String()\\n    assert par.parse('str()') == String()\\n    assert par.parse('regex()') == Regex()\\n    assert par.parse('num()') == Number()\\n    assert par.parse('int()') == Integer()\\n    assert par.parse('day()') == Day()\\n    assert par.parse('timestamp()') == Timestamp()\\n    assert par.parse('bool()') == Boolean()\\n    assert par.parse('list(str())') == List(String())\\n    assert par.parse('ip()') == Ip()\\n    assert par.parse('mac()') == Mac()\\n\\n\\ndef test_custom_type():\\n\\n    class my_validator(Validator):\\n        pass\\n\\n    assert par.parse('custom()', {'custom': my_validator}) == my_validator()\\n\\n\\ndef test_required():\\n    assert par.parse('str(required=True)').is_required\\n    assert par.parse('str(required=False)').is_optional\\n\\n\\ndef test_syntax_error():\\n    with raises(SyntaxError):\\n        par.parse('eval()')\\n\""}, {"func_args": {"source": "\"import os\\n\\n\\ndef get_fixture(relative):\\n    script_dir = os.path.dirname(__file__)\\n    return os.path.join(script_dir, 'fixtures/', relative)\\n\""}, "return_value": "\"import os\\n\\n\\ndef get_fixture(relative):\\n    script_dir = os.path.dirname(__file__)\\n    return os.path.join(script_dir, 'fixtures/', relative)\\n\""}, {"func_args": {"source": "'import os\\n\\nimport pytest\\n\\nfrom .. import command_line\\nfrom .. import yamale_error\\n\\ndir_path = os.path.dirname(os.path.realpath(__file__))\\n\\nparsers = [\\'pyyaml\\', \\'PyYAML\\', \\'ruamel\\']\\n\\n\\n@pytest.mark.parametrize(\\'parser\\', parsers)\\ndef test_bad_yaml(parser):\\n    with pytest.raises(ValueError) as e:\\n        command_line._router(\\n            \\'yamale/tests/command_line_fixtures/yamls/bad.yaml\\',\\n            \\'schema.yaml\\', 1, parser)\\n    assert \"map.bad: \\'12.5\\' is not a str.\" in e.value.message\\n\\n\\n@pytest.mark.parametrize(\\'parser\\', parsers)\\ndef test_required_keys_yaml(parser):\\n    with pytest.raises(ValueError) as e:\\n        command_line._router(\\n            \\'yamale/tests/command_line_fixtures/yamls/required_keys_bad.yaml\\',\\n            \\'required_keys_schema.yaml\\', 1, parser)\\n    assert \"map.key: Required field missing\" in e.value.message\\n\\n\\n@pytest.mark.parametrize(\\'parser\\', parsers)\\ndef test_good_yaml(parser):\\n    command_line._router(\\n        \\'yamale/tests/command_line_fixtures/yamls/good.yaml\\',\\n        \\'schema.yaml\\', 1, parser)\\n    \\n\\n@pytest.mark.parametrize(\\'parser\\', parsers)\\ndef test_good_relative_yaml(parser):\\n    command_line._router(\\n        \\'yamale/tests/command_line_fixtures/yamls/good.yaml\\',\\n        \\'../schema_dir/external.yaml\\', 1, parser)\\n    \\n\\n@pytest.mark.parametrize(\\'parser\\', parsers)\\ndef test_external_glob_schema(parser):\\n    command_line._router(\\n        \\'yamale/tests/command_line_fixtures/yamls/good.yaml\\',\\n        os.path.join(dir_path, \\'command_line_fixtures/schema_dir/ex*.yaml\\'), 1, parser)\\n    \\n\\ndef test_empty_schema_file():\\n    with pytest.raises(ValueError, match=\\'is an empty file!\\'):\\n        command_line._router(\\n            \\'yamale/tests/command_line_fixtures/empty_schema/data.yaml\\',\\n            \\'empty_schema.yaml\\' , 1, \\'PyYAML\\')\\n\\n\\ndef test_external_schema():\\n    command_line._router(\\n        \\'yamale/tests/command_line_fixtures/yamls/good.yaml\\',\\n        os.path.join(dir_path, \\'command_line_fixtures/schema_dir/external.yaml\\'), 1, \\'PyYAML\\')\\n\\n\\ndef test_bad_dir():\\n    with pytest.raises(ValueError):\\n        command_line._router(\\n            \\'yamale/tests/command_line_fixtures/yamls\\',\\n            \\'schema.yaml\\', 4, \\'PyYAML\\')\\n\\n\\ndef test_bad_strict():\\n    with pytest.raises(ValueError) as e:\\n        command_line._router(\\n            \\'yamale/tests/command_line_fixtures/yamls/required_keys_extra_element.yaml\\',\\n            \\'required_keys_schema.yaml\\',\\n            4, \\'PyYAML\\', strict=True)\\n    assert \"map.key2: Unexpected element\" in e.value.message\\n\\n\\ndef test_bad_issue_54():\\n    with pytest.raises(yamale_error.YamaleError) as e:\\n        command_line._router(\\n            \\'yamale/tests/fixtures/nested_issue_54.yaml\\',\\n            \\'nested.yaml\\',\\n            4, \\'PyYAML\\', strict=True)\\n    assert \\'string: Required field missing\\' in e.value.message\\n    assert \\'number: Required field missing\\' in e.value.message\\n    assert \\'integer: Required field missing\\' in e.value.message\\n    assert \\'boolean: Required field missing\\' in e.value.message\\n    assert \\'date: Required field missing\\' in e.value.message\\n    assert \\'datetime: Required field missing\\' in e.value.message\\n    assert \\'nest: Required field missing\\' in e.value.message\\n    assert \\'list: Required field missing\\' in e.value.message\\n\\ndef test_nested_schema_issue_69():\\n    command_line._router(\\'yamale/tests/command_line_fixtures/nestedYaml\\',\\'schema.yaml\\', 1, \\'PyYAML\\')\\n\\n'"}, "return_value": "'import os\\n\\nimport pytest\\n\\nfrom .. import command_line\\nfrom .. import yamale_error\\n\\ndir_path = os.path.dirname(os.path.realpath(__file__))\\n\\nparsers = [\\'pyyaml\\', \\'PyYAML\\', \\'ruamel\\']\\n\\n\\n@pytest.mark.parametrize(\\'parser\\', parsers)\\ndef test_bad_yaml(parser):\\n    with pytest.raises(ValueError) as e:\\n        command_line._router(\\n            \\'yamale/tests/command_line_fixtures/yamls/bad.yaml\\',\\n            \\'schema.yaml\\', 1, parser)\\n    assert \"map.bad: \\'12.5\\' is not a str.\" in e.value.message\\n\\n\\n@pytest.mark.parametrize(\\'parser\\', parsers)\\ndef test_required_keys_yaml(parser):\\n    with pytest.raises(ValueError) as e:\\n        command_line._router(\\n            \\'yamale/tests/command_line_fixtures/yamls/required_keys_bad.yaml\\',\\n            \\'required_keys_schema.yaml\\', 1, parser)\\n    assert \"map.key: Required field missing\" in e.value.message\\n\\n\\n@pytest.mark.parametrize(\\'parser\\', parsers)\\ndef test_good_yaml(parser):\\n    command_line._router(\\n        \\'yamale/tests/command_line_fixtures/yamls/good.yaml\\',\\n        \\'schema.yaml\\', 1, parser)\\n    \\n\\n@pytest.mark.parametrize(\\'parser\\', parsers)\\ndef test_good_relative_yaml(parser):\\n    command_line._router(\\n        \\'yamale/tests/command_line_fixtures/yamls/good.yaml\\',\\n        \\'../schema_dir/external.yaml\\', 1, parser)\\n    \\n\\n@pytest.mark.parametrize(\\'parser\\', parsers)\\ndef test_external_glob_schema(parser):\\n    command_line._router(\\n        \\'yamale/tests/command_line_fixtures/yamls/good.yaml\\',\\n        os.path.join(dir_path, \\'command_line_fixtures/schema_dir/ex*.yaml\\'), 1, parser)\\n    \\n\\ndef test_empty_schema_file():\\n    with pytest.raises(ValueError, match=\\'is an empty file!\\'):\\n        command_line._router(\\n            \\'yamale/tests/command_line_fixtures/empty_schema/data.yaml\\',\\n            \\'empty_schema.yaml\\' , 1, \\'PyYAML\\')\\n\\n\\ndef test_external_schema():\\n    command_line._router(\\n        \\'yamale/tests/command_line_fixtures/yamls/good.yaml\\',\\n        os.path.join(dir_path, \\'command_line_fixtures/schema_dir/external.yaml\\'), 1, \\'PyYAML\\')\\n\\n\\ndef test_bad_dir():\\n    with pytest.raises(ValueError):\\n        command_line._router(\\n            \\'yamale/tests/command_line_fixtures/yamls\\',\\n            \\'schema.yaml\\', 4, \\'PyYAML\\')\\n\\n\\ndef test_bad_strict():\\n    with pytest.raises(ValueError) as e:\\n        command_line._router(\\n            \\'yamale/tests/command_line_fixtures/yamls/required_keys_extra_element.yaml\\',\\n            \\'required_keys_schema.yaml\\',\\n            4, \\'PyYAML\\', strict=True)\\n    assert \"map.key2: Unexpected element\" in e.value.message\\n\\n\\ndef test_bad_issue_54():\\n    with pytest.raises(yamale_error.YamaleError) as e:\\n        command_line._router(\\n            \\'yamale/tests/fixtures/nested_issue_54.yaml\\',\\n            \\'nested.yaml\\',\\n            4, \\'PyYAML\\', strict=True)\\n    assert \\'string: Required field missing\\' in e.value.message\\n    assert \\'number: Required field missing\\' in e.value.message\\n    assert \\'integer: Required field missing\\' in e.value.message\\n    assert \\'boolean: Required field missing\\' in e.value.message\\n    assert \\'date: Required field missing\\' in e.value.message\\n    assert \\'datetime: Required field missing\\' in e.value.message\\n    assert \\'nest: Required field missing\\' in e.value.message\\n    assert \\'list: Required field missing\\' in e.value.message\\n\\ndef test_nested_schema_issue_69():\\n    command_line._router(\\'yamale/tests/command_line_fixtures/nestedYaml\\',\\'schema.yaml\\', 1, \\'PyYAML\\')\\n\\n'"}, {"func_args": {"source": "'import io\\nimport pytest\\nimport re\\nimport yamale\\n\\nfrom . import get_fixture\\nfrom .. import validators as val\\n\\ntypes = {\\n    \\'schema\\': \\'types.yaml\\',\\n    \\'bad\\': \\'types_bad_data.yaml\\',\\n    \\'good\\': \\'types_good_data.yaml\\'\\n}\\n\\nnested = {\\n    \\'schema\\': \\'nested.yaml\\',\\n    \\'bad\\': \\'nested_bad_data.yaml\\',\\n    \\'good\\': \\'nested_good_data.yaml\\'\\n}\\n\\ncustom = {\\n    \\'schema\\': \\'custom_types.yaml\\',\\n    \\'bad\\': \\'custom_types_bad.yaml\\',\\n    \\'good\\': \\'custom_types_good.yaml\\'\\n}\\n\\nkeywords = {\\n    \\'schema\\': \\'keywords.yaml\\',\\n    \\'bad\\': \\'keywords_bad.yaml\\',\\n    \\'good\\': \\'keywords_good.yaml\\'\\n}\\n\\nlists = {\\n    \\'schema\\': \\'lists.yaml\\',\\n    \\'bad\\': \\'lists_bad.yaml\\',\\n    \\'bad2\\': \\'lists_bad2.yaml\\',\\n    \\'good\\': \\'lists_good.yaml\\'\\n}\\n\\nmaps = {\\n    \\'schema\\': \\'map.yaml\\',\\n    \\'bad\\': \\'map_bad.yaml\\',\\n    \\'bad2\\': \\'map_bad2.yaml\\',\\n    \\'good\\': \\'map_good.yaml\\'\\n}\\n\\nanys = {\\n    \\'schema\\': \\'any.yaml\\',\\n    \\'bad\\': \\'any_bad.yaml\\',\\n    \\'good\\': \\'any_good.yaml\\'\\n}\\n\\nlist_include = {\\n    \\'schema\\': \\'list_include.yaml\\',\\n    \\'good\\': \\'list_include_good.yaml\\'\\n}\\n\\nissue_22 = {\\n    \\'schema\\': \\'issue_22.yaml\\',\\n    \\'good\\': \\'issue_22_good.yaml\\'\\n}\\n\\nissue_50 = {\\n    \\'schema\\': \\'issue_50.yaml\\',\\n    \\'good\\': \\'issue_50_good.yaml\\'\\n}\\n\\nregexes = {\\n    \\'schema\\': \\'regex.yaml\\',\\n    \\'bad\\': \\'regex_bad.yaml\\',\\n    \\'good\\': \\'regex_good.yaml\\'\\n}\\n\\nips = {\\n    \\'schema\\': \\'ip.yaml\\',\\n    \\'bad\\': \\'ip_bad.yaml\\',\\n    \\'good\\': \\'ip_good.yaml\\'\\n}\\n\\nmacs = {\\n    \\'schema\\': \\'mac.yaml\\',\\n    \\'bad\\': \\'mac_bad.yaml\\',\\n    \\'good\\': \\'mac_good.yaml\\'\\n}\\n\\nnested_map = {\\n    \\'schema\\': \\'nested_map.yaml\\',\\n    \\'good\\': \\'nested_map_good.yaml\\'\\n}\\n\\ntop_level_map = {\\n    \\'schema\\': \\'top_level_map.yaml\\',\\n    \\'good\\': \\'top_level_map_good.yaml\\'\\n}\\n\\ninclude_validator = {\\n    \\'schema\\': \\'include_validator.yaml\\',\\n    \\'good\\': \\'include_validator_good.yaml\\',\\n    \\'bad\\': \\'include_validator_bad.yaml\\'\\n}\\n\\nstrict_map = {\\n    \\'schema\\': \\'strict_map.yaml\\',\\n    \\'good\\': \\'strict_map_good.yaml\\',\\n    \\'bad\\': \\'strict_map_bad.yaml\\'\\n}\\n\\nmixed_strict_map = {\\n    \\'schema\\': \\'mixed_strict_map.yaml\\',\\n    \\'good\\': \\'mixed_strict_map_good.yaml\\',\\n    \\'bad\\': \\'mixed_strict_map_bad.yaml\\'\\n}\\n\\nstrict_list = {\\n    \\'schema\\': \\'strict_list.yaml\\',\\n    \\'good\\': \\'strict_list_good.yaml\\',\\n    \\'bad\\': \\'strict_list_bad.yaml\\'\\n}\\n\\nnested_map2 = {\\n    \\'schema\\': \\'nested_map2.yaml\\',\\n    \\'good\\': \\'nested_map2_good.yaml\\',\\n    \\'bad\\': \\'nested_map2_bad.yaml\\'\\n}\\n\\nstatic_list = {\\n    \\'schema\\': \\'static_list.yaml\\',\\n    \\'good\\': \\'static_list_good.yaml\\',\\n    \\'bad\\': \\'static_list_bad.yaml\\'\\n}\\n\\nnested_issue_54 = {\\n    \\'schema\\': \\'nested.yaml\\',\\n    \\'bad\\': \\'nested_issue_54.yaml\\',\\n    \\'good\\': \\'nested_good_data.yaml\\'\\n}\\n\\nmap_key_constraint = {\\n    \\'schema\\': \\'map_key_constraint.yaml\\',\\n    \\'good\\': \\'map_key_constraint_good.yaml\\',\\n    \\'bad_base\\': \\'map_key_constraint_bad_base.yaml\\',\\n    \\'bad_nest\\': \\'map_key_constraint_bad_nest.yaml\\',\\n    \\'bad_nest_con\\': \\'map_key_constraint_bad_nest_con.yaml\\',\\n}\\n\\nnumeric_bool_coercion = {\\n    \\'schema\\': \\'numeric_bool_coercion.yaml\\',\\n    \\'good\\': \\'numeric_bool_coercion_good.yaml\\',\\n    \\'bad\\': \\'numeric_bool_coercion_bad.yaml\\',\\n}\\n\\nsubset = {\\n    \\'schema\\': \\'subset.yaml\\',\\n    \\'good\\': \\'subset_good.yaml\\',\\n    \\'good2\\': \\'subset_good2.yaml\\',\\n    \\'bad\\': \\'subset_bad.yaml\\',\\n    \\'bad2\\': \\'subset_bad2.yaml\\',\\n    \\'bad3\\': \\'subset_bad3.yaml\\'\\n}\\n\\nsubset_empty = {\\n    \\'schema\\': \\'subset_empty.yaml\\',\\n    \\'good\\': \\'subset_empty_good.yaml\\',\\n    \\'good2\\': \\'subset_empty_good2.yaml\\'\\n}\\n\\nsubset_nodef = {\\n    \\'schema\\': \\'subset_nodef.yaml\\'\\n}\\n\\ntest_data = [\\n    types, nested, custom,\\n    keywords, lists, maps,\\n    anys, list_include, issue_22,\\n    issue_50, regexes, ips, macs,\\n    nested_map, top_level_map,\\n    include_validator, strict_map,\\n    mixed_strict_map, strict_list,\\n    nested_map2, static_list,\\n    nested_issue_54,\\n    map_key_constraint,\\n    numeric_bool_coercion,\\n    subset, subset_empty\\n]\\n\\nfor d in test_data:\\n    for key in d.keys():\\n        if key == \\'schema\\':\\n            d[key] = yamale.make_schema(get_fixture(d[key]))\\n        else:\\n            d[key] = yamale.make_data(get_fixture(d[key]))\\n\\n\\ndef test_tests():\\n    \"\"\" Make sure the test runner is working.\"\"\"\\n    assert 1 + 1 == 2\\n\\n\\ndef test_flat_make_schema():\\n    assert isinstance(types[\\'schema\\']._schema[\\'string\\'], val.String)\\n\\n\\ndef test_nested_schema():\\n    nested_schema = nested[\\'schema\\']._schema\\n    assert isinstance(nested_schema[\\'string\\'], val.String)\\n    assert isinstance(nested_schema[\\'list\\'], (list, tuple))\\n    assert isinstance(nested_schema[\\'list\\'][0], val.String)\\n\\n\\n@pytest.mark.parametrize(\\'data_map\\', test_data)\\ndef test_good(data_map):\\n    for k, v in data_map.items():\\n        if k.startswith(\\'good\\'):\\n            yamale.validate(data_map[\\'schema\\'], data_map[k])\\n\\n\\ndef test_bad_validate():\\n    assert count_exception_lines(types[\\'schema\\'], types[\\'bad\\']) == 9\\n\\n\\ndef test_bad_nested():\\n    assert count_exception_lines(nested[\\'schema\\'], nested[\\'bad\\']) == 2\\n\\n\\ndef test_bad_nested_issue_54():\\n    exp = [\\n        \\'string: Required field missing\\',\\n        \\'number: Required field missing\\',\\n        \\'integer: Required field missing\\',\\n        \\'boolean: Required field missing\\',\\n        \\'date: Required field missing\\',\\n        \\'datetime: Required field missing\\',\\n        \\'nest: Required field missing\\',\\n        \\'list: Required field missing\\'\\n    ]\\n    match_exception_lines(nested_issue_54[\\'schema\\'], nested_issue_54[\\'bad\\'], exp)\\n\\ndef test_bad_custom():\\n    assert count_exception_lines(custom[\\'schema\\'], custom[\\'bad\\']) == 1\\n\\n\\ndef test_bad_lists():\\n    assert count_exception_lines(lists[\\'schema\\'], lists[\\'bad\\']) == 6\\n\\n\\ndef test_bad2_lists():\\n    assert count_exception_lines(lists[\\'schema\\'], lists[\\'bad2\\']) == 2\\n\\n\\ndef test_bad_maps():\\n    assert count_exception_lines(maps[\\'schema\\'], maps[\\'bad\\']) == 7\\n\\ndef test_bad_maps2():\\n    assert count_exception_lines(maps[\\'schema\\'], maps[\\'bad2\\']) == 1\\n\\ndef test_bad_keywords():\\n    assert count_exception_lines(keywords[\\'schema\\'], keywords[\\'bad\\']) == 9\\n\\n\\ndef test_bad_anys():\\n    assert count_exception_lines(anys[\\'schema\\'], anys[\\'bad\\']) == 5\\n\\n\\ndef test_bad_regexes():\\n    assert count_exception_lines(regexes[\\'schema\\'], regexes[\\'bad\\']) == 4\\n\\n\\ndef test_bad_include_validator():\\n    exp = [\"key1: \\'a_string\\' is not a int.\"]\\n    match_exception_lines(include_validator[\\'schema\\'],\\n                          include_validator[\\'bad\\'],\\n                          exp)\\n\\n\\ndef test_bad_schema():\\n    with pytest.raises(SyntaxError) as excinfo:\\n        yamale.make_schema(get_fixture(\\'bad_schema.yaml\\'))\\n    assert \\'fixtures/bad_schema.yaml\\' in str(excinfo.value)\\n\\n\\ndef test_empty_schema():\\n    with pytest.raises(ValueError) as excinfo:\\n        yamale.make_schema(get_fixture(\\'empty_schema.yaml\\'))\\n    assert \\'empty_schema.yaml is an empty file!\\' in str(excinfo.value)\\n\\n\\n@pytest.mark.parametrize(\\n    \"schema_filename\",\\n    [\\'bad_schema_rce.yaml\\', \\'bad_schema_rce2.yaml\\', \\'bad_schema_rce3.yaml\\', \\'bad_schema_rce4.yaml\\']\\n)\\ndef test_vulnerable_schema(schema_filename):\\n    with pytest.raises(SyntaxError) as excinfo:\\n        yamale.make_schema(get_fixture(schema_filename))\\n    assert schema_filename in str(excinfo.value)\\n\\n\\ndef test_list_is_not_a_map():\\n    exp = [\" : \\'[1, 2]\\' is not a map\"]\\n    match_exception_lines(strict_map[\\'schema\\'],\\n                          strict_list[\\'good\\'],\\n                          exp)\\n\\n\\ndef test_bad_strict_map():\\n    exp = [\\'extra: Unexpected element\\']\\n    match_exception_lines(strict_map[\\'schema\\'],\\n                          strict_map[\\'bad\\'],\\n                          exp,\\n                          strict=True)\\n\\n\\ndef test_bad_strict_list():\\n    exp = [\\'2: Unexpected element\\']\\n    match_exception_lines(strict_list[\\'schema\\'],\\n                          strict_list[\\'bad\\'],\\n                          exp,\\n                          strict=True)\\n\\n\\ndef test_bad_mixed_strict_map():\\n    exp = [\\'field3.extra: Unexpected element\\']\\n    match_exception_lines(mixed_strict_map[\\'schema\\'],\\n                          mixed_strict_map[\\'bad\\'],\\n                          exp)\\n\\n\\ndef test_bad_nested_map2():\\n    exp = [\\'field1.field1_1: Required field missing\\']\\n    match_exception_lines(nested_map2[\\'schema\\'],\\n                          nested_map2[\\'bad\\'],\\n                          exp)\\n\\n\\ndef test_bad_static_list():\\n    exp = [\\'0: Required field missing\\']\\n    match_exception_lines(static_list[\\'schema\\'],\\n                          static_list[\\'bad\\'],\\n                          exp)\\n\\n\\ndef test_bad_map_key_constraint_base():\\n    exp = [\": Key error - \\'bad\\' is not a int.\"]\\n    match_exception_lines(map_key_constraint[\\'schema\\'],\\n                          map_key_constraint[\\'bad_base\\'],\\n                          exp)\\n\\n\\ndef test_bad_map_key_constraint_nest():\\n    exp = [\"1.0: Key error - \\'100\\' is not a str.\"]\\n    match_exception_lines(map_key_constraint[\\'schema\\'],\\n                          map_key_constraint[\\'bad_nest\\'],\\n                          exp)\\n\\n\\ndef test_bad_map_key_constraint_nest_con():\\n    exp = [\\n        \"1.0: Key error - \\'100\\' is not a str.\",\\n        \"1.0: Key error - \\'baz\\' contains excluded character \\'z\\'\",\\n    ]\\n    match_exception_lines(map_key_constraint[\\'schema\\'],\\n                          map_key_constraint[\\'bad_nest_con\\'],\\n                          exp)\\n\\n\\ndef test_bad_numeric_bool_coercion():\\n    exp = [\\n        \"integers.0: \\'False\\' is not a int.\",\\n        \"integers.1: \\'True\\' is not a int.\",\\n        \"numbers.0: \\'False\\' is not a num.\",\\n        \"numbers.1: \\'True\\' is not a num.\",\\n    ]\\n    match_exception_lines(numeric_bool_coercion[\\'schema\\'],\\n                          numeric_bool_coercion[\\'bad\\'],\\n                          exp)\\n\\ndef test_bad_subset():\\n    exp = [\\n        \"subset_list: \\'subset\\' may not be an empty set.\"\\n    ]\\n    match_exception_lines(subset[\\'schema\\'],\\n                          subset[\\'bad\\'],\\n                          exp)\\n\\ndef test_bad_subset2():\\n    exp = [\\n        \"subset_list: \\'[1]\\' is not a int.\",\\n        \"subset_list: \\'[1]\\' is not a str.\"\\n    ]\\n    match_exception_lines(subset[\\'schema\\'],\\n                          subset[\\'bad2\\'],\\n                          exp)\\n\\ndef test_bad_subset3():\\n    exp = [\\n        \"subset_list: \\'{\\'a\\': 1}\\' is not a int.\",\\n        \"subset_list: \\'{\\'a\\': 1}\\' is not a str.\"\\n    ]\\n    match_exception_lines(subset[\\'schema\\'],\\n                          subset[\\'bad3\\'],\\n                          exp)\\n\\ndef test_nodef_subset_schema():\\n    with pytest.raises(ValueError) as e:\\n        yamale.make_schema(get_fixture(subset_nodef[\\'schema\\']))\\n\\n    assert \"\\'subset\\' requires at least one validator!\" in str(e.value)\\n\\n@pytest.mark.parametrize(\"use_schema_string,use_data_string,expected_message_re\", [\\n    (False, False, \"^Error validating data \\'.*?\\' with schema \\'.*?\\'\\\\n\\\\t\"),\\n    (True, False, \"^Error validating data \\'.*?\\'\\\\n\\\\t\"),\\n    (False, True, \"^Error validating data with schema \\'.*?\\'\\\\n\\\\t\"),\\n    (True, True, \"^Error validating data\\\\n\\\\t\"),\\n])\\ndef test_validate_errors(use_schema_string, use_data_string, expected_message_re):\\n    schema_path = get_fixture(\\'types.yaml\\')\\n    data_path = get_fixture(\\'types_bad_data.yaml\\')\\n    if use_schema_string:\\n        with io.open(schema_path, encoding=\\'utf-8\\') as f:\\n            schema = yamale.make_schema(content=f.read())\\n    else:\\n        schema = yamale.make_schema(schema_path)\\n    if use_data_string:\\n        with io.open(data_path, encoding=\\'utf-8\\') as f:\\n            data = yamale.make_data(content=f.read())\\n    else:\\n        data = yamale.make_data(data_path)\\n    with pytest.raises(yamale.yamale_error.YamaleError) as excinfo:\\n        yamale.validate(schema, data)\\n    assert re.match(expected_message_re, excinfo.value.message, re.MULTILINE), \\\\\\n        \\'Message {} should match {}\\'.format(\\n            excinfo.value.message, expected_message_re\\n        )\\n\\n\\ndef match_exception_lines(schema, data, expected, strict=False):\\n    with pytest.raises(ValueError) as e:\\n        yamale.validate(schema, data, strict)\\n\\n    got = e.value.results[0].errors\\n    got.sort()\\n    expected.sort()\\n    assert got == expected\\n\\n\\ndef count_exception_lines(schema, data, strict=False):\\n    with pytest.raises(ValueError) as e:\\n        yamale.validate(schema, data, strict)\\n    result = e.value.results[0]\\n    return len(result.errors)\\n'"}, "return_value": "'import io\\nimport pytest\\nimport re\\nimport yamale\\n\\nfrom . import get_fixture\\nfrom .. import validators as val\\n\\ntypes = {\\n    \\'schema\\': \\'types.yaml\\',\\n    \\'bad\\': \\'types_bad_data.yaml\\',\\n    \\'good\\': \\'types_good_data.yaml\\'\\n}\\n\\nnested = {\\n    \\'schema\\': \\'nested.yaml\\',\\n    \\'bad\\': \\'nested_bad_data.yaml\\',\\n    \\'good\\': \\'nested_good_data.yaml\\'\\n}\\n\\ncustom = {\\n    \\'schema\\': \\'custom_types.yaml\\',\\n    \\'bad\\': \\'custom_types_bad.yaml\\',\\n    \\'good\\': \\'custom_types_good.yaml\\'\\n}\\n\\nkeywords = {\\n    \\'schema\\': \\'keywords.yaml\\',\\n    \\'bad\\': \\'keywords_bad.yaml\\',\\n    \\'good\\': \\'keywords_good.yaml\\'\\n}\\n\\nlists = {\\n    \\'schema\\': \\'lists.yaml\\',\\n    \\'bad\\': \\'lists_bad.yaml\\',\\n    \\'bad2\\': \\'lists_bad2.yaml\\',\\n    \\'good\\': \\'lists_good.yaml\\'\\n}\\n\\nmaps = {\\n    \\'schema\\': \\'map.yaml\\',\\n    \\'bad\\': \\'map_bad.yaml\\',\\n    \\'bad2\\': \\'map_bad2.yaml\\',\\n    \\'good\\': \\'map_good.yaml\\'\\n}\\n\\nanys = {\\n    \\'schema\\': \\'any.yaml\\',\\n    \\'bad\\': \\'any_bad.yaml\\',\\n    \\'good\\': \\'any_good.yaml\\'\\n}\\n\\nlist_include = {\\n    \\'schema\\': \\'list_include.yaml\\',\\n    \\'good\\': \\'list_include_good.yaml\\'\\n}\\n\\nissue_22 = {\\n    \\'schema\\': \\'issue_22.yaml\\',\\n    \\'good\\': \\'issue_22_good.yaml\\'\\n}\\n\\nissue_50 = {\\n    \\'schema\\': \\'issue_50.yaml\\',\\n    \\'good\\': \\'issue_50_good.yaml\\'\\n}\\n\\nregexes = {\\n    \\'schema\\': \\'regex.yaml\\',\\n    \\'bad\\': \\'regex_bad.yaml\\',\\n    \\'good\\': \\'regex_good.yaml\\'\\n}\\n\\nips = {\\n    \\'schema\\': \\'ip.yaml\\',\\n    \\'bad\\': \\'ip_bad.yaml\\',\\n    \\'good\\': \\'ip_good.yaml\\'\\n}\\n\\nmacs = {\\n    \\'schema\\': \\'mac.yaml\\',\\n    \\'bad\\': \\'mac_bad.yaml\\',\\n    \\'good\\': \\'mac_good.yaml\\'\\n}\\n\\nnested_map = {\\n    \\'schema\\': \\'nested_map.yaml\\',\\n    \\'good\\': \\'nested_map_good.yaml\\'\\n}\\n\\ntop_level_map = {\\n    \\'schema\\': \\'top_level_map.yaml\\',\\n    \\'good\\': \\'top_level_map_good.yaml\\'\\n}\\n\\ninclude_validator = {\\n    \\'schema\\': \\'include_validator.yaml\\',\\n    \\'good\\': \\'include_validator_good.yaml\\',\\n    \\'bad\\': \\'include_validator_bad.yaml\\'\\n}\\n\\nstrict_map = {\\n    \\'schema\\': \\'strict_map.yaml\\',\\n    \\'good\\': \\'strict_map_good.yaml\\',\\n    \\'bad\\': \\'strict_map_bad.yaml\\'\\n}\\n\\nmixed_strict_map = {\\n    \\'schema\\': \\'mixed_strict_map.yaml\\',\\n    \\'good\\': \\'mixed_strict_map_good.yaml\\',\\n    \\'bad\\': \\'mixed_strict_map_bad.yaml\\'\\n}\\n\\nstrict_list = {\\n    \\'schema\\': \\'strict_list.yaml\\',\\n    \\'good\\': \\'strict_list_good.yaml\\',\\n    \\'bad\\': \\'strict_list_bad.yaml\\'\\n}\\n\\nnested_map2 = {\\n    \\'schema\\': \\'nested_map2.yaml\\',\\n    \\'good\\': \\'nested_map2_good.yaml\\',\\n    \\'bad\\': \\'nested_map2_bad.yaml\\'\\n}\\n\\nstatic_list = {\\n    \\'schema\\': \\'static_list.yaml\\',\\n    \\'good\\': \\'static_list_good.yaml\\',\\n    \\'bad\\': \\'static_list_bad.yaml\\'\\n}\\n\\nnested_issue_54 = {\\n    \\'schema\\': \\'nested.yaml\\',\\n    \\'bad\\': \\'nested_issue_54.yaml\\',\\n    \\'good\\': \\'nested_good_data.yaml\\'\\n}\\n\\nmap_key_constraint = {\\n    \\'schema\\': \\'map_key_constraint.yaml\\',\\n    \\'good\\': \\'map_key_constraint_good.yaml\\',\\n    \\'bad_base\\': \\'map_key_constraint_bad_base.yaml\\',\\n    \\'bad_nest\\': \\'map_key_constraint_bad_nest.yaml\\',\\n    \\'bad_nest_con\\': \\'map_key_constraint_bad_nest_con.yaml\\',\\n}\\n\\nnumeric_bool_coercion = {\\n    \\'schema\\': \\'numeric_bool_coercion.yaml\\',\\n    \\'good\\': \\'numeric_bool_coercion_good.yaml\\',\\n    \\'bad\\': \\'numeric_bool_coercion_bad.yaml\\',\\n}\\n\\nsubset = {\\n    \\'schema\\': \\'subset.yaml\\',\\n    \\'good\\': \\'subset_good.yaml\\',\\n    \\'good2\\': \\'subset_good2.yaml\\',\\n    \\'bad\\': \\'subset_bad.yaml\\',\\n    \\'bad2\\': \\'subset_bad2.yaml\\',\\n    \\'bad3\\': \\'subset_bad3.yaml\\'\\n}\\n\\nsubset_empty = {\\n    \\'schema\\': \\'subset_empty.yaml\\',\\n    \\'good\\': \\'subset_empty_good.yaml\\',\\n    \\'good2\\': \\'subset_empty_good2.yaml\\'\\n}\\n\\nsubset_nodef = {\\n    \\'schema\\': \\'subset_nodef.yaml\\'\\n}\\n\\ntest_data = [\\n    types, nested, custom,\\n    keywords, lists, maps,\\n    anys, list_include, issue_22,\\n    issue_50, regexes, ips, macs,\\n    nested_map, top_level_map,\\n    include_validator, strict_map,\\n    mixed_strict_map, strict_list,\\n    nested_map2, static_list,\\n    nested_issue_54,\\n    map_key_constraint,\\n    numeric_bool_coercion,\\n    subset, subset_empty\\n]\\n\\nfor d in test_data:\\n    for key in d.keys():\\n        if key == \\'schema\\':\\n            d[key] = yamale.make_schema(get_fixture(d[key]))\\n        else:\\n            d[key] = yamale.make_data(get_fixture(d[key]))\\n\\n\\ndef test_tests():\\n    \"\"\" Make sure the test runner is working.\"\"\"\\n    assert 1 + 1 == 2\\n\\n\\ndef test_flat_make_schema():\\n    assert isinstance(types[\\'schema\\']._schema[\\'string\\'], val.String)\\n\\n\\ndef test_nested_schema():\\n    nested_schema = nested[\\'schema\\']._schema\\n    assert isinstance(nested_schema[\\'string\\'], val.String)\\n    assert isinstance(nested_schema[\\'list\\'], (list, tuple))\\n    assert isinstance(nested_schema[\\'list\\'][0], val.String)\\n\\n\\n@pytest.mark.parametrize(\\'data_map\\', test_data)\\ndef test_good(data_map):\\n    for k, v in data_map.items():\\n        if k.startswith(\\'good\\'):\\n            yamale.validate(data_map[\\'schema\\'], data_map[k])\\n\\n\\ndef test_bad_validate():\\n    assert count_exception_lines(types[\\'schema\\'], types[\\'bad\\']) == 9\\n\\n\\ndef test_bad_nested():\\n    assert count_exception_lines(nested[\\'schema\\'], nested[\\'bad\\']) == 2\\n\\n\\ndef test_bad_nested_issue_54():\\n    exp = [\\n        \\'string: Required field missing\\',\\n        \\'number: Required field missing\\',\\n        \\'integer: Required field missing\\',\\n        \\'boolean: Required field missing\\',\\n        \\'date: Required field missing\\',\\n        \\'datetime: Required field missing\\',\\n        \\'nest: Required field missing\\',\\n        \\'list: Required field missing\\'\\n    ]\\n    match_exception_lines(nested_issue_54[\\'schema\\'], nested_issue_54[\\'bad\\'], exp)\\n\\ndef test_bad_custom():\\n    assert count_exception_lines(custom[\\'schema\\'], custom[\\'bad\\']) == 1\\n\\n\\ndef test_bad_lists():\\n    assert count_exception_lines(lists[\\'schema\\'], lists[\\'bad\\']) == 6\\n\\n\\ndef test_bad2_lists():\\n    assert count_exception_lines(lists[\\'schema\\'], lists[\\'bad2\\']) == 2\\n\\n\\ndef test_bad_maps():\\n    assert count_exception_lines(maps[\\'schema\\'], maps[\\'bad\\']) == 7\\n\\ndef test_bad_maps2():\\n    assert count_exception_lines(maps[\\'schema\\'], maps[\\'bad2\\']) == 1\\n\\ndef test_bad_keywords():\\n    assert count_exception_lines(keywords[\\'schema\\'], keywords[\\'bad\\']) == 9\\n\\n\\ndef test_bad_anys():\\n    assert count_exception_lines(anys[\\'schema\\'], anys[\\'bad\\']) == 5\\n\\n\\ndef test_bad_regexes():\\n    assert count_exception_lines(regexes[\\'schema\\'], regexes[\\'bad\\']) == 4\\n\\n\\ndef test_bad_include_validator():\\n    exp = [\"key1: \\'a_string\\' is not a int.\"]\\n    match_exception_lines(include_validator[\\'schema\\'],\\n                          include_validator[\\'bad\\'],\\n                          exp)\\n\\n\\ndef test_bad_schema():\\n    with pytest.raises(SyntaxError) as excinfo:\\n        yamale.make_schema(get_fixture(\\'bad_schema.yaml\\'))\\n    assert \\'fixtures/bad_schema.yaml\\' in str(excinfo.value)\\n\\n\\ndef test_empty_schema():\\n    with pytest.raises(ValueError) as excinfo:\\n        yamale.make_schema(get_fixture(\\'empty_schema.yaml\\'))\\n    assert \\'empty_schema.yaml is an empty file!\\' in str(excinfo.value)\\n\\n\\n@pytest.mark.parametrize(\\n    \"schema_filename\",\\n    [\\'bad_schema_rce.yaml\\', \\'bad_schema_rce2.yaml\\', \\'bad_schema_rce3.yaml\\', \\'bad_schema_rce4.yaml\\']\\n)\\ndef test_vulnerable_schema(schema_filename):\\n    with pytest.raises(SyntaxError) as excinfo:\\n        yamale.make_schema(get_fixture(schema_filename))\\n    assert schema_filename in str(excinfo.value)\\n\\n\\ndef test_list_is_not_a_map():\\n    exp = [\" : \\'[1, 2]\\' is not a map\"]\\n    match_exception_lines(strict_map[\\'schema\\'],\\n                          strict_list[\\'good\\'],\\n                          exp)\\n\\n\\ndef test_bad_strict_map():\\n    exp = [\\'extra: Unexpected element\\']\\n    match_exception_lines(strict_map[\\'schema\\'],\\n                          strict_map[\\'bad\\'],\\n                          exp,\\n                          strict=True)\\n\\n\\ndef test_bad_strict_list():\\n    exp = [\\'2: Unexpected element\\']\\n    match_exception_lines(strict_list[\\'schema\\'],\\n                          strict_list[\\'bad\\'],\\n                          exp,\\n                          strict=True)\\n\\n\\ndef test_bad_mixed_strict_map():\\n    exp = [\\'field3.extra: Unexpected element\\']\\n    match_exception_lines(mixed_strict_map[\\'schema\\'],\\n                          mixed_strict_map[\\'bad\\'],\\n                          exp)\\n\\n\\ndef test_bad_nested_map2():\\n    exp = [\\'field1.field1_1: Required field missing\\']\\n    match_exception_lines(nested_map2[\\'schema\\'],\\n                          nested_map2[\\'bad\\'],\\n                          exp)\\n\\n\\ndef test_bad_static_list():\\n    exp = [\\'0: Required field missing\\']\\n    match_exception_lines(static_list[\\'schema\\'],\\n                          static_list[\\'bad\\'],\\n                          exp)\\n\\n\\ndef test_bad_map_key_constraint_base():\\n    exp = [\": Key error - \\'bad\\' is not a int.\"]\\n    match_exception_lines(map_key_constraint[\\'schema\\'],\\n                          map_key_constraint[\\'bad_base\\'],\\n                          exp)\\n\\n\\ndef test_bad_map_key_constraint_nest():\\n    exp = [\"1.0: Key error - \\'100\\' is not a str.\"]\\n    match_exception_lines(map_key_constraint[\\'schema\\'],\\n                          map_key_constraint[\\'bad_nest\\'],\\n                          exp)\\n\\n\\ndef test_bad_map_key_constraint_nest_con():\\n    exp = [\\n        \"1.0: Key error - \\'100\\' is not a str.\",\\n        \"1.0: Key error - \\'baz\\' contains excluded character \\'z\\'\",\\n    ]\\n    match_exception_lines(map_key_constraint[\\'schema\\'],\\n                          map_key_constraint[\\'bad_nest_con\\'],\\n                          exp)\\n\\n\\ndef test_bad_numeric_bool_coercion():\\n    exp = [\\n        \"integers.0: \\'False\\' is not a int.\",\\n        \"integers.1: \\'True\\' is not a int.\",\\n        \"numbers.0: \\'False\\' is not a num.\",\\n        \"numbers.1: \\'True\\' is not a num.\",\\n    ]\\n    match_exception_lines(numeric_bool_coercion[\\'schema\\'],\\n                          numeric_bool_coercion[\\'bad\\'],\\n                          exp)\\n\\ndef test_bad_subset():\\n    exp = [\\n        \"subset_list: \\'subset\\' may not be an empty set.\"\\n    ]\\n    match_exception_lines(subset[\\'schema\\'],\\n                          subset[\\'bad\\'],\\n                          exp)\\n\\ndef test_bad_subset2():\\n    exp = [\\n        \"subset_list: \\'[1]\\' is not a int.\",\\n        \"subset_list: \\'[1]\\' is not a str.\"\\n    ]\\n    match_exception_lines(subset[\\'schema\\'],\\n                          subset[\\'bad2\\'],\\n                          exp)\\n\\ndef test_bad_subset3():\\n    exp = [\\n        \"subset_list: \\'{\\'a\\': 1}\\' is not a int.\",\\n        \"subset_list: \\'{\\'a\\': 1}\\' is not a str.\"\\n    ]\\n    match_exception_lines(subset[\\'schema\\'],\\n                          subset[\\'bad3\\'],\\n                          exp)\\n\\ndef test_nodef_subset_schema():\\n    with pytest.raises(ValueError) as e:\\n        yamale.make_schema(get_fixture(subset_nodef[\\'schema\\']))\\n\\n    assert \"\\'subset\\' requires at least one validator!\" in str(e.value)\\n\\n@pytest.mark.parametrize(\"use_schema_string,use_data_string,expected_message_re\", [\\n    (False, False, \"^Error validating data \\'.*?\\' with schema \\'.*?\\'\\\\n\\\\t\"),\\n    (True, False, \"^Error validating data \\'.*?\\'\\\\n\\\\t\"),\\n    (False, True, \"^Error validating data with schema \\'.*?\\'\\\\n\\\\t\"),\\n    (True, True, \"^Error validating data\\\\n\\\\t\"),\\n])\\ndef test_validate_errors(use_schema_string, use_data_string, expected_message_re):\\n    schema_path = get_fixture(\\'types.yaml\\')\\n    data_path = get_fixture(\\'types_bad_data.yaml\\')\\n    if use_schema_string:\\n        with io.open(schema_path, encoding=\\'utf-8\\') as f:\\n            schema = yamale.make_schema(content=f.read())\\n    else:\\n        schema = yamale.make_schema(schema_path)\\n    if use_data_string:\\n        with io.open(data_path, encoding=\\'utf-8\\') as f:\\n            data = yamale.make_data(content=f.read())\\n    else:\\n        data = yamale.make_data(data_path)\\n    with pytest.raises(yamale.yamale_error.YamaleError) as excinfo:\\n        yamale.validate(schema, data)\\n    assert re.match(expected_message_re, excinfo.value.message, re.MULTILINE), \\\\\\n        \\'Message {} should match {}\\'.format(\\n            excinfo.value.message, expected_message_re\\n        )\\n\\n\\ndef match_exception_lines(schema, data, expected, strict=False):\\n    with pytest.raises(ValueError) as e:\\n        yamale.validate(schema, data, strict)\\n\\n    got = e.value.results[0].errors\\n    got.sort()\\n    expected.sort()\\n    assert got == expected\\n\\n\\ndef count_exception_lines(schema, data, strict=False):\\n    with pytest.raises(ValueError) as e:\\n        yamale.validate(schema, data, strict)\\n    result = e.value.results[0]\\n    return len(result.errors)\\n'"}, {"func_args": {"source": "'import re\\nimport os\\nfrom yamale import YamaleTestCase\\nfrom yamale.validators import DefaultValidators, Validator\\n\\n\\ndata_folder = os.path.dirname(os.path.realpath(__file__))\\n\\n\\nclass TestAllYaml(YamaleTestCase):\\n    base_dir = data_folder\\n    schema = \\'meta_test_fixtures/schema.yaml\\'\\n    yaml = \\'meta_test_fixtures/data1.yaml\\'\\n\\n    def runTest(self):\\n        self.assertTrue(self.validate())\\n\\n\\nclass TestBadYaml(YamaleTestCase):\\n    base_dir = data_folder\\n    schema = \\'meta_test_fixtures/schema_bad.yaml\\'\\n    yaml = \\'meta_test_fixtures/data*.yaml\\'\\n\\n    def runTest(self):\\n        self.assertRaises(ValueError, self.validate)\\n\\n\\nclass TestMapYaml(YamaleTestCase):\\n    base_dir = data_folder\\n    schema = \\'meta_test_fixtures/schema.yaml\\'\\n    yaml = [\\'meta_test_fixtures/data1.yaml\\',\\n            \\'meta_test_fixtures/some_data.yaml\\',\\n            # Make sure  schema doesn\\'t validate itself\\n            \\'meta_test_fixtures/schema.yaml\\']\\n\\n    def runTest(self):\\n        self.assertTrue(self.validate())\\n\\n\\n# class TestListYaml(YamaleTestCase):\\n#     base_dir = data_folder\\n#     schema = \\'meta_test_fixtures/schema_include_list.yaml\\'\\n#     yaml = [\\'meta_test_fixtures/data_include_list.yaml\\']\\n\\n#     def runTest(self):\\n#         self.assertTrue(self.validate())\\n\\n\\nclass Card(Validator):\\n    \"\"\" Custom validator for testing purpose \"\"\"\\n    tag = \\'card\\'\\n    card_regex = re.compile(r\\'^(10|[2-9JQKA])[SHDC]$\\')\\n\\n    def _is_valid(self, value):\\n        return re.match(self.card_regex, value)\\n\\n\\nclass TestCustomValidator(YamaleTestCase):\\n    base_dir = data_folder\\n    schema = \\'meta_test_fixtures/schema_custom.yaml\\'\\n    yaml = \\'meta_test_fixtures/data_custom.yaml\\'\\n\\n    def runTest(self):\\n        validators = DefaultValidators.copy()\\n        validators[\\'card\\'] = Card\\n        self.assertTrue(self.validate(validators))\\n\\n\\nclass TestCustomValidatorWithIncludes(YamaleTestCase):\\n    base_dir = data_folder\\n    schema = \\'meta_test_fixtures/schema_custom_with_include.yaml\\'\\n    yaml = \\'meta_test_fixtures/data_custom_with_include.yaml\\'\\n\\n    def runTest(self):\\n        validators = DefaultValidators.copy()\\n        validators[\\'card\\'] = Card\\n        self.assertTrue(self.validate(validators))\\n\\n\\nclass TestBadRequiredYaml(YamaleTestCase):\\n    base_dir = data_folder\\n    schema = \\'meta_test_fixtures/schema_required_bad.yaml\\'\\n    yaml = \\'meta_test_fixtures/data_required_bad.yaml\\'\\n\\n    def runTest(self):\\n        self.assertRaises(ValueError, self.validate)\\n\\n\\nclass TestGoodRequiredYaml(YamaleTestCase):\\n    base_dir = data_folder\\n    schema = \\'meta_test_fixtures/schema_required_good.yaml\\'\\n    yaml = \\'meta_test_fixtures/data_required_good.yaml\\'\\n\\n    def runTest(self):\\n        self.assertTrue(self.validate())\\n'"}, "return_value": "'import re\\nimport os\\nfrom yamale import YamaleTestCase\\nfrom yamale.validators import DefaultValidators, Validator\\n\\n\\ndata_folder = os.path.dirname(os.path.realpath(__file__))\\n\\n\\nclass TestAllYaml(YamaleTestCase):\\n    base_dir = data_folder\\n    schema = \\'meta_test_fixtures/schema.yaml\\'\\n    yaml = \\'meta_test_fixtures/data1.yaml\\'\\n\\n    def runTest(self):\\n        self.assertTrue(self.validate())\\n\\n\\nclass TestBadYaml(YamaleTestCase):\\n    base_dir = data_folder\\n    schema = \\'meta_test_fixtures/schema_bad.yaml\\'\\n    yaml = \\'meta_test_fixtures/data*.yaml\\'\\n\\n    def runTest(self):\\n        self.assertRaises(ValueError, self.validate)\\n\\n\\nclass TestMapYaml(YamaleTestCase):\\n    base_dir = data_folder\\n    schema = \\'meta_test_fixtures/schema.yaml\\'\\n    yaml = [\\'meta_test_fixtures/data1.yaml\\',\\n            \\'meta_test_fixtures/some_data.yaml\\',\\n            # Make sure  schema doesn\\'t validate itself\\n            \\'meta_test_fixtures/schema.yaml\\']\\n\\n    def runTest(self):\\n        self.assertTrue(self.validate())\\n\\n\\n# class TestListYaml(YamaleTestCase):\\n#     base_dir = data_folder\\n#     schema = \\'meta_test_fixtures/schema_include_list.yaml\\'\\n#     yaml = [\\'meta_test_fixtures/data_include_list.yaml\\']\\n\\n#     def runTest(self):\\n#         self.assertTrue(self.validate())\\n\\n\\nclass Card(Validator):\\n    \"\"\" Custom validator for testing purpose \"\"\"\\n    tag = \\'card\\'\\n    card_regex = re.compile(r\\'^(10|[2-9JQKA])[SHDC]$\\')\\n\\n    def _is_valid(self, value):\\n        return re.match(self.card_regex, value)\\n\\n\\nclass TestCustomValidator(YamaleTestCase):\\n    base_dir = data_folder\\n    schema = \\'meta_test_fixtures/schema_custom.yaml\\'\\n    yaml = \\'meta_test_fixtures/data_custom.yaml\\'\\n\\n    def runTest(self):\\n        validators = DefaultValidators.copy()\\n        validators[\\'card\\'] = Card\\n        self.assertTrue(self.validate(validators))\\n\\n\\nclass TestCustomValidatorWithIncludes(YamaleTestCase):\\n    base_dir = data_folder\\n    schema = \\'meta_test_fixtures/schema_custom_with_include.yaml\\'\\n    yaml = \\'meta_test_fixtures/data_custom_with_include.yaml\\'\\n\\n    def runTest(self):\\n        validators = DefaultValidators.copy()\\n        validators[\\'card\\'] = Card\\n        self.assertTrue(self.validate(validators))\\n\\n\\nclass TestBadRequiredYaml(YamaleTestCase):\\n    base_dir = data_folder\\n    schema = \\'meta_test_fixtures/schema_required_bad.yaml\\'\\n    yaml = \\'meta_test_fixtures/data_required_bad.yaml\\'\\n\\n    def runTest(self):\\n        self.assertRaises(ValueError, self.validate)\\n\\n\\nclass TestGoodRequiredYaml(YamaleTestCase):\\n    base_dir = data_folder\\n    schema = \\'meta_test_fixtures/schema_required_good.yaml\\'\\n    yaml = \\'meta_test_fixtures/data_required_good.yaml\\'\\n\\n    def runTest(self):\\n        self.assertTrue(self.validate())\\n'"}, {"func_args": {"source": "'# ABCs for containers were moved to their own module\\ntry:\\n    from collections.abc import Mapping, Set, Sequence\\nexcept ImportError:\\n    from collections import Mapping, Set, Sequence\\n\\n\\n# Python 3 has no basestring, lets test it.\\ntry:\\n    basestring  # attempt to evaluate basestring\\n\\n    def isstr(s):\\n        return isinstance(s, basestring)\\n\\n    def to_unicode(s):\\n        return unicode(s)\\n\\nexcept NameError:\\n    def isstr(s):\\n        return isinstance(s, str)\\n\\n    def to_unicode(s):\\n        return s\\n\\n\\ndef is_list(obj):\\n    return isinstance(obj, Sequence) and not isstr(obj)\\n\\n\\ndef is_map(obj):\\n    return isinstance(obj, Mapping)\\n\\n\\ndef get_keys(obj):\\n    if is_map(obj):\\n        return obj.keys()\\n    elif is_list(obj):\\n        return range(len(obj))\\n\\n\\ndef get_iter(iterable):\\n    if isinstance(iterable, Mapping):\\n        return iterable.items()\\n    else:\\n        return enumerate(iterable)\\n\\n\\ndef get_subclasses(cls, _subclasses_yielded=None):\\n    \"\"\"\\n    Generator recursively yielding all subclasses of the passed class (in\\n    depth-first order).\\n\\n    Parameters\\n    ----------\\n    cls : type\\n        Class to find all subclasses of.\\n    _subclasses_yielded : set\\n        Private parameter intended to be passed only by recursive invocations of\\n        this function, containing all previously yielded classes.\\n    \"\"\"\\n\\n    if _subclasses_yielded is None:\\n        _subclasses_yielded = set()\\n\\n    # If the passed class is old- rather than new-style, raise an exception.\\n    if not hasattr(cls, \\'__subclasses__\\'):\\n        raise TypeError(\\'Old-style class \"%s\" unsupported.\\' % cls.__name__)\\n\\n    # For each direct subclass of this class\\n    for subclass in cls.__subclasses__():\\n        # If this subclass has already been yielded, skip to the next.\\n        if subclass in _subclasses_yielded:\\n            continue\\n\\n        # Yield this subclass and record having done so before recursing.\\n        yield subclass\\n        _subclasses_yielded.add(subclass)\\n\\n        # Yield all direct subclasses of this class as well.\\n        for subclass_subclass in get_subclasses(subclass, _subclasses_yielded):\\n            yield subclass_subclass\\n'"}, "return_value": "'# ABCs for containers were moved to their own module\\ntry:\\n    from collections.abc import Mapping, Set, Sequence\\nexcept ImportError:\\n    from collections import Mapping, Set, Sequence\\n\\n\\n# Python 3 has no basestring, lets test it.\\ntry:\\n    basestring  # attempt to evaluate basestring\\n\\n    def isstr(s):\\n        return isinstance(s, basestring)\\n\\n    def to_unicode(s):\\n        return unicode(s)\\n\\nexcept NameError:\\n    def isstr(s):\\n        return isinstance(s, str)\\n\\n    def to_unicode(s):\\n        return s\\n\\n\\ndef is_list(obj):\\n    return isinstance(obj, Sequence) and not isstr(obj)\\n\\n\\ndef is_map(obj):\\n    return isinstance(obj, Mapping)\\n\\n\\ndef get_keys(obj):\\n    if is_map(obj):\\n        return obj.keys()\\n    elif is_list(obj):\\n        return range(len(obj))\\n\\n\\ndef get_iter(iterable):\\n    if isinstance(iterable, Mapping):\\n        return iterable.items()\\n    else:\\n        return enumerate(iterable)\\n\\n\\ndef get_subclasses(cls, _subclasses_yielded=None):\\n    \"\"\"\\n    Generator recursively yielding all subclasses of the passed class (in\\n    depth-first order).\\n\\n    Parameters\\n    ----------\\n    cls : type\\n        Class to find all subclasses of.\\n    _subclasses_yielded : set\\n        Private parameter intended to be passed only by recursive invocations of\\n        this function, containing all previously yielded classes.\\n    \"\"\"\\n\\n    if _subclasses_yielded is None:\\n        _subclasses_yielded = set()\\n\\n    # If the passed class is old- rather than new-style, raise an exception.\\n    if not hasattr(cls, \\'__subclasses__\\'):\\n        raise TypeError(\\'Old-style class \"%s\" unsupported.\\' % cls.__name__)\\n\\n    # For each direct subclass of this class\\n    for subclass in cls.__subclasses__():\\n        # If this subclass has already been yielded, skip to the next.\\n        if subclass in _subclasses_yielded:\\n            continue\\n\\n        # Yield this subclass and record having done so before recursing.\\n        yield subclass\\n        _subclasses_yielded.add(subclass)\\n\\n        # Yield all direct subclasses of this class as well.\\n        for subclass_subclass in get_subclasses(subclass, _subclasses_yielded):\\n            yield subclass_subclass\\n'"}, {"func_args": {"source": "'from .base import Validator\\nfrom .validators import *\\n'"}, "return_value": "'from .base import Validator\\nfrom .validators import *\\n'"}, {"func_args": {"source": "'class Validator(object):\\n    \"\"\"Base class for all Validators\"\"\"\\n    constraints = []\\n    value_type = None\\n\\n    def __init__(self, *args, **kwargs):\\n        self.args = args\\n        self.kwargs = kwargs\\n\\n        # Is field required? Default is True\\n        self.is_required = bool(kwargs.pop(\\'required\\', True))\\n\\n        # Can value be None if field is optional? Default is True\\n        self._value_can_be_none = bool(kwargs.pop(\\'none\\', True))\\n\\n        # Construct all constraints\\n        self._constraints_inst = self._create_constraints(self.constraints,\\n                                                          self.value_type,\\n                                                          kwargs)\\n\\n    def _create_constraints(self, constraint_classes, value_type, kwargs):\\n        constraints = []\\n        for constraint in constraint_classes:\\n            constraints.append(constraint(value_type, kwargs))\\n        return constraints\\n\\n    @property\\n    def tag(self):\\n        return self.__class__\\n\\n    @property\\n    def is_optional(self):\\n        return not self.is_required\\n\\n    @property\\n    def can_be_none(self):\\n        \"\"\"Check if value for optional field can be None.\"\"\"\\n        return self._value_can_be_none\\n\\n    def _is_valid(self, value):\\n        \"\"\"Validators must implement this. Return True if value is valid.\"\"\"\\n        raise NotImplementedError(\\'You need to override this function\\')\\n\\n    def get_name(self):\\n        return self.tag\\n\\n    def validate(self, value):\\n        \"\"\"\\n        Check if ``value`` is valid.\\n\\n        :returns: [errors] If ``value`` is invalid, otherwise [].\\n        \"\"\"\\n        errors = []\\n\\n        # Make sure the type validates first.\\n        valid = self._is_valid(value)\\n        if not valid:\\n            errors.append(self.fail(value))\\n            return errors\\n\\n        # Then validate all the constraints second.\\n        for constraint in self._constraints_inst:\\n            error = constraint.is_valid(value)\\n            if error:\\n                if isinstance(error, list):\\n                    errors.extend(error)\\n                else:\\n                    errors.append(error)\\n\\n        return errors\\n\\n    def is_valid(self, value):\\n        return self.validate(value) == []\\n\\n    def fail(self, value):\\n        \"\"\"Override to define a custom fail message\"\"\"\\n        return \\'\\\\\\'%s\\\\\\' is not a %s.\\' % (value, self.get_name())\\n\\n    def __repr__(self):\\n        return \\'%s(%s, %s)\\' % (self.__class__.__name__, self.args, self.kwargs)\\n\\n    def __eq__(self, other):\\n        # Validators are equal if they have the same args and kwargs.\\n        eq = [isinstance(other, self.__class__),\\n              self.args == other.args,\\n              self.kwargs == other.kwargs]\\n        return all(eq)\\n'"}, "return_value": "'class Validator(object):\\n    \"\"\"Base class for all Validators\"\"\"\\n    constraints = []\\n    value_type = None\\n\\n    def __init__(self, *args, **kwargs):\\n        self.args = args\\n        self.kwargs = kwargs\\n\\n        # Is field required? Default is True\\n        self.is_required = bool(kwargs.pop(\\'required\\', True))\\n\\n        # Can value be None if field is optional? Default is True\\n        self._value_can_be_none = bool(kwargs.pop(\\'none\\', True))\\n\\n        # Construct all constraints\\n        self._constraints_inst = self._create_constraints(self.constraints,\\n                                                          self.value_type,\\n                                                          kwargs)\\n\\n    def _create_constraints(self, constraint_classes, value_type, kwargs):\\n        constraints = []\\n        for constraint in constraint_classes:\\n            constraints.append(constraint(value_type, kwargs))\\n        return constraints\\n\\n    @property\\n    def tag(self):\\n        return self.__class__\\n\\n    @property\\n    def is_optional(self):\\n        return not self.is_required\\n\\n    @property\\n    def can_be_none(self):\\n        \"\"\"Check if value for optional field can be None.\"\"\"\\n        return self._value_can_be_none\\n\\n    def _is_valid(self, value):\\n        \"\"\"Validators must implement this. Return True if value is valid.\"\"\"\\n        raise NotImplementedError(\\'You need to override this function\\')\\n\\n    def get_name(self):\\n        return self.tag\\n\\n    def validate(self, value):\\n        \"\"\"\\n        Check if ``value`` is valid.\\n\\n        :returns: [errors] If ``value`` is invalid, otherwise [].\\n        \"\"\"\\n        errors = []\\n\\n        # Make sure the type validates first.\\n        valid = self._is_valid(value)\\n        if not valid:\\n            errors.append(self.fail(value))\\n            return errors\\n\\n        # Then validate all the constraints second.\\n        for constraint in self._constraints_inst:\\n            error = constraint.is_valid(value)\\n            if error:\\n                if isinstance(error, list):\\n                    errors.extend(error)\\n                else:\\n                    errors.append(error)\\n\\n        return errors\\n\\n    def is_valid(self, value):\\n        return self.validate(value) == []\\n\\n    def fail(self, value):\\n        \"\"\"Override to define a custom fail message\"\"\"\\n        return \\'\\\\\\'%s\\\\\\' is not a %s.\\' % (value, self.get_name())\\n\\n    def __repr__(self):\\n        return \\'%s(%s, %s)\\' % (self.__class__.__name__, self.args, self.kwargs)\\n\\n    def __eq__(self, other):\\n        # Validators are equal if they have the same args and kwargs.\\n        eq = [isinstance(other, self.__class__),\\n              self.args == other.args,\\n              self.kwargs == other.kwargs]\\n        return all(eq)\\n'"}, {"func_args": {"source": "\"from __future__ import absolute_import\\nimport re\\nimport datetime\\nimport ipaddress\\n\\nfrom yamale.util import to_unicode\\nfrom .base import Validator\\nfrom .. import util\\n\\n\\nclass Constraint(object):\\n    keywords = {}  # Keywords and types accepted by this constraint\\n    is_active = False\\n\\n    def __init__(self, value_type, kwargs):\\n        self._parseKwargs(kwargs)\\n\\n    def _parseKwargs(self, kwargs):\\n        for kwarg, kwtype in self.keywords.items():\\n            value = self.get_kwarg(kwargs, kwarg, kwtype)\\n            setattr(self, kwarg, value)\\n\\n    def get_kwarg(self, kwargs, key, kwtype):\\n        try:\\n            value = kwargs[key]\\n        except KeyError:\\n            return None\\n\\n        # Activate this constraint\\n        self.is_active = True\\n\\n        if isinstance(value, kwtype):\\n            # value already correct type, return\\n            return value\\n\\n        try:  # Try to convert value\\n            # Is this value one of the datetime types?\\n            if kwtype == datetime.date:\\n                time = datetime.datetime.strptime(value, '%Y-%m-%d')\\n                return datetime.date(time.year, time.month, time.day)\\n\\n            if kwtype == datetime.datetime:\\n                return datetime.datetime.strptime(value, '%Y-%m-%d %H:%M:%S')\\n\\n            return kwtype(value)\\n        except (TypeError, ValueError):\\n            raise SyntaxError('%s is not a %s' % (key, kwtype))\\n\\n    def is_valid(self, value):\\n        if not self.is_active:\\n            return None\\n\\n        if not self._is_valid(value):\\n            return self._fail(value)\\n\\n        return None\\n\\n    def _fail(self, value):\\n        return '\\\\'%s\\\\' violates %s.' % (value, self.__class__.__name__)\\n\\n\\nclass Min(Constraint):\\n    fail = '%s is less than %s'\\n\\n    def __init__(self, value_type, kwargs):\\n        self.keywords = {'min': value_type}\\n        super(Min, self).__init__(value_type, kwargs)\\n\\n    def _is_valid(self, value):\\n        return self.min <= value\\n\\n    def _fail(self, value):\\n        return self.fail % (value, self.min)\\n\\n\\nclass Max(Constraint):\\n    fail = '%s is greater than %s'\\n\\n    def __init__(self, value_type, kwargs):\\n        self.keywords = {'max': value_type}\\n        super(Max, self).__init__(value_type, kwargs)\\n\\n    def _is_valid(self, value):\\n        return self.max >= value\\n\\n    def _fail(self, value):\\n        return self.fail % (value, self.max)\\n\\n\\nclass LengthMin(Constraint):\\n    keywords = {'min': int}\\n    fail = 'Length of %s is less than %s'\\n\\n    def _is_valid(self, value):\\n        return self.min <= len(value)\\n\\n    def _fail(self, value):\\n        return self.fail % (value, self.min)\\n\\n\\nclass LengthMax(Constraint):\\n    keywords = {'max': int}\\n    fail = 'Length of %s is greater than %s'\\n\\n    def _is_valid(self, value):\\n        return self.max >= len(value)\\n\\n    def _fail(self, value):\\n        return self.fail % (value, self.max)\\n\\n\\nclass Key(Constraint):\\n    keywords = {'key': Validator}\\n    fail = 'Key error - %s'\\n\\n    def _is_valid(self, value):\\n        for k in value.keys():\\n            if self.key.validate(k) != []:\\n                return False\\n        return True\\n\\n    def _fail(self, value):\\n        error_list = []\\n        for k in value.keys():\\n            error_list.extend(self.key.validate(k))\\n        return [self.fail % (e) for e in error_list]\\n\\n\\nclass StringEquals(Constraint):\\n    keywords = {'equals': str, 'ignore_case': bool}\\n    fail = '%s does not equal %s'\\n\\n    def _is_valid(self, value):\\n        # Check if the function has only been called due to ignore_case\\n        if self.equals is not None:\\n            if self.ignore_case is not None:\\n                if not self.ignore_case:\\n                    return value == self.equals\\n                else:\\n                    return value.casefold() == self.equals.casefold()\\n            else:\\n                return value == self.equals\\n        else:\\n            return True\\n\\n    def _fail(self, value):\\n        return self.fail % (value, self.equals)\\n\\n\\nclass StringStartsWith(Constraint):\\n    keywords = {'starts_with': str, 'ignore_case': bool}\\n    fail = '%s does not start with %s'\\n\\n    def _is_valid(self, value):\\n        # Check if the function has only been called due to ignore_case\\n        if self.starts_with is not None:\\n            if self.ignore_case is not None:\\n                if not self.ignore_case:\\n                    return value.startswith(self.starts_with)\\n                else:\\n                    length = len(self.starts_with)\\n                    if length <= len(value):\\n                        return value[:length].casefold() == self.starts_with.casefold()\\n                    else:\\n                        return False\\n            else:\\n                return value.startswith(self.starts_with)\\n        else:\\n            return True\\n\\n    def _fail(self, value):\\n        return self.fail % (value, self.starts_with)\\n\\n\\nclass StringEndsWith(Constraint):\\n    keywords = {'ends_with': str, 'ignore_case': bool}\\n    fail = '%s does not end with %s'\\n\\n    def _is_valid(self, value):\\n        # Check if the function has only been called due to ignore_case\\n        if self.ends_with is not None:\\n            if self.ignore_case is not None:\\n                if not self.ignore_case:\\n                    return value.endswith(self.ends_with)\\n                else:\\n                    length = len(self.ends_with)\\n                    if length <= len(value):\\n                        return value[-length:].casefold() == self.ends_with.casefold()\\n                    else:\\n                        return False\\n            else:\\n                return value.endswith(self.ends_with)\\n        else:\\n            return True\\n\\n    def _fail(self, value):\\n        return self.fail % (value, self.ends_with)\\n\\n\\nclass StringMatches(Constraint):\\n    keywords = {'matches': str}\\n    fail = '%s is not a regex match.'\\n\\n    _regex_flags = {'ignore_case': re.I, 'multiline': re.M, 'dotall': re.S}\\n\\n    def __init__(self, value_type, kwargs):\\n        self._flags = 0\\n        for k, v in util.get_iter(self._regex_flags):\\n            self._flags |= v if kwargs.pop(k, False) else 0\\n\\n        super(StringMatches, self).__init__(value_type, kwargs)\\n\\n    def _is_valid(self, value):\\n        if self.matches is not None:\\n            regex = re.compile(self.matches, self._flags)\\n            return regex.match(value)\\n        else:\\n            return True\\n\\n    def _fail(self, value):\\n        return self.fail % (value)\\n\\n\\nclass CharacterExclude(Constraint):\\n    keywords = {'exclude': str, 'ignore_case': bool}\\n    fail = '\\\\'%s\\\\' contains excluded character \\\\'%s\\\\''\\n\\n    def _is_valid(self, value):\\n        # Check if the function has only been called due to ignore_case\\n        if self.exclude is not None:\\n            for char in self.exclude:\\n                if self.ignore_case is not None:\\n                    if not self.ignore_case:\\n                        if char in value:\\n                            self._failed_char = char\\n                            return False\\n                    else:\\n                        if char.casefold() in value.casefold():\\n                            self._failed_char = char\\n                            return False\\n                else:\\n                    if char in value:\\n                        self._failed_char = char\\n                        return False\\n            return True\\n        else:\\n            return True\\n\\n    def _fail(self, value):\\n        return self.fail % (value, self._failed_char)\\n\\n\\nclass IpVersion(Constraint):\\n    keywords = {'version': int}\\n    fail = 'IP version of %s is not %s'\\n\\n    def _is_valid(self, value):\\n        try:\\n            ip = ipaddress.ip_interface(to_unicode(value))\\n        except ValueError:\\n            return False\\n        return self.version == ip.version\\n\\n    def _fail(self, value):\\n        return self.fail % (value, self.version)\\n\""}, "return_value": "\"from __future__ import absolute_import\\nimport re\\nimport datetime\\nimport ipaddress\\n\\nfrom yamale.util import to_unicode\\nfrom .base import Validator\\nfrom .. import util\\n\\n\\nclass Constraint(object):\\n    keywords = {}  # Keywords and types accepted by this constraint\\n    is_active = False\\n\\n    def __init__(self, value_type, kwargs):\\n        self._parseKwargs(kwargs)\\n\\n    def _parseKwargs(self, kwargs):\\n        for kwarg, kwtype in self.keywords.items():\\n            value = self.get_kwarg(kwargs, kwarg, kwtype)\\n            setattr(self, kwarg, value)\\n\\n    def get_kwarg(self, kwargs, key, kwtype):\\n        try:\\n            value = kwargs[key]\\n        except KeyError:\\n            return None\\n\\n        # Activate this constraint\\n        self.is_active = True\\n\\n        if isinstance(value, kwtype):\\n            # value already correct type, return\\n            return value\\n\\n        try:  # Try to convert value\\n            # Is this value one of the datetime types?\\n            if kwtype == datetime.date:\\n                time = datetime.datetime.strptime(value, '%Y-%m-%d')\\n                return datetime.date(time.year, time.month, time.day)\\n\\n            if kwtype == datetime.datetime:\\n                return datetime.datetime.strptime(value, '%Y-%m-%d %H:%M:%S')\\n\\n            return kwtype(value)\\n        except (TypeError, ValueError):\\n            raise SyntaxError('%s is not a %s' % (key, kwtype))\\n\\n    def is_valid(self, value):\\n        if not self.is_active:\\n            return None\\n\\n        if not self._is_valid(value):\\n            return self._fail(value)\\n\\n        return None\\n\\n    def _fail(self, value):\\n        return '\\\\'%s\\\\' violates %s.' % (value, self.__class__.__name__)\\n\\n\\nclass Min(Constraint):\\n    fail = '%s is less than %s'\\n\\n    def __init__(self, value_type, kwargs):\\n        self.keywords = {'min': value_type}\\n        super(Min, self).__init__(value_type, kwargs)\\n\\n    def _is_valid(self, value):\\n        return self.min <= value\\n\\n    def _fail(self, value):\\n        return self.fail % (value, self.min)\\n\\n\\nclass Max(Constraint):\\n    fail = '%s is greater than %s'\\n\\n    def __init__(self, value_type, kwargs):\\n        self.keywords = {'max': value_type}\\n        super(Max, self).__init__(value_type, kwargs)\\n\\n    def _is_valid(self, value):\\n        return self.max >= value\\n\\n    def _fail(self, value):\\n        return self.fail % (value, self.max)\\n\\n\\nclass LengthMin(Constraint):\\n    keywords = {'min': int}\\n    fail = 'Length of %s is less than %s'\\n\\n    def _is_valid(self, value):\\n        return self.min <= len(value)\\n\\n    def _fail(self, value):\\n        return self.fail % (value, self.min)\\n\\n\\nclass LengthMax(Constraint):\\n    keywords = {'max': int}\\n    fail = 'Length of %s is greater than %s'\\n\\n    def _is_valid(self, value):\\n        return self.max >= len(value)\\n\\n    def _fail(self, value):\\n        return self.fail % (value, self.max)\\n\\n\\nclass Key(Constraint):\\n    keywords = {'key': Validator}\\n    fail = 'Key error - %s'\\n\\n    def _is_valid(self, value):\\n        for k in value.keys():\\n            if self.key.validate(k) != []:\\n                return False\\n        return True\\n\\n    def _fail(self, value):\\n        error_list = []\\n        for k in value.keys():\\n            error_list.extend(self.key.validate(k))\\n        return [self.fail % (e) for e in error_list]\\n\\n\\nclass StringEquals(Constraint):\\n    keywords = {'equals': str, 'ignore_case': bool}\\n    fail = '%s does not equal %s'\\n\\n    def _is_valid(self, value):\\n        # Check if the function has only been called due to ignore_case\\n        if self.equals is not None:\\n            if self.ignore_case is not None:\\n                if not self.ignore_case:\\n                    return value == self.equals\\n                else:\\n                    return value.casefold() == self.equals.casefold()\\n            else:\\n                return value == self.equals\\n        else:\\n            return True\\n\\n    def _fail(self, value):\\n        return self.fail % (value, self.equals)\\n\\n\\nclass StringStartsWith(Constraint):\\n    keywords = {'starts_with': str, 'ignore_case': bool}\\n    fail = '%s does not start with %s'\\n\\n    def _is_valid(self, value):\\n        # Check if the function has only been called due to ignore_case\\n        if self.starts_with is not None:\\n            if self.ignore_case is not None:\\n                if not self.ignore_case:\\n                    return value.startswith(self.starts_with)\\n                else:\\n                    length = len(self.starts_with)\\n                    if length <= len(value):\\n                        return value[:length].casefold() == self.starts_with.casefold()\\n                    else:\\n                        return False\\n            else:\\n                return value.startswith(self.starts_with)\\n        else:\\n            return True\\n\\n    def _fail(self, value):\\n        return self.fail % (value, self.starts_with)\\n\\n\\nclass StringEndsWith(Constraint):\\n    keywords = {'ends_with': str, 'ignore_case': bool}\\n    fail = '%s does not end with %s'\\n\\n    def _is_valid(self, value):\\n        # Check if the function has only been called due to ignore_case\\n        if self.ends_with is not None:\\n            if self.ignore_case is not None:\\n                if not self.ignore_case:\\n                    return value.endswith(self.ends_with)\\n                else:\\n                    length = len(self.ends_with)\\n                    if length <= len(value):\\n                        return value[-length:].casefold() == self.ends_with.casefold()\\n                    else:\\n                        return False\\n            else:\\n                return value.endswith(self.ends_with)\\n        else:\\n            return True\\n\\n    def _fail(self, value):\\n        return self.fail % (value, self.ends_with)\\n\\n\\nclass StringMatches(Constraint):\\n    keywords = {'matches': str}\\n    fail = '%s is not a regex match.'\\n\\n    _regex_flags = {'ignore_case': re.I, 'multiline': re.M, 'dotall': re.S}\\n\\n    def __init__(self, value_type, kwargs):\\n        self._flags = 0\\n        for k, v in util.get_iter(self._regex_flags):\\n            self._flags |= v if kwargs.pop(k, False) else 0\\n\\n        super(StringMatches, self).__init__(value_type, kwargs)\\n\\n    def _is_valid(self, value):\\n        if self.matches is not None:\\n            regex = re.compile(self.matches, self._flags)\\n            return regex.match(value)\\n        else:\\n            return True\\n\\n    def _fail(self, value):\\n        return self.fail % (value)\\n\\n\\nclass CharacterExclude(Constraint):\\n    keywords = {'exclude': str, 'ignore_case': bool}\\n    fail = '\\\\'%s\\\\' contains excluded character \\\\'%s\\\\''\\n\\n    def _is_valid(self, value):\\n        # Check if the function has only been called due to ignore_case\\n        if self.exclude is not None:\\n            for char in self.exclude:\\n                if self.ignore_case is not None:\\n                    if not self.ignore_case:\\n                        if char in value:\\n                            self._failed_char = char\\n                            return False\\n                    else:\\n                        if char.casefold() in value.casefold():\\n                            self._failed_char = char\\n                            return False\\n                else:\\n                    if char in value:\\n                        self._failed_char = char\\n                        return False\\n            return True\\n        else:\\n            return True\\n\\n    def _fail(self, value):\\n        return self.fail % (value, self._failed_char)\\n\\n\\nclass IpVersion(Constraint):\\n    keywords = {'version': int}\\n    fail = 'IP version of %s is not %s'\\n\\n    def _is_valid(self, value):\\n        try:\\n            ip = ipaddress.ip_interface(to_unicode(value))\\n        except ValueError:\\n            return False\\n        return self.version == ip.version\\n\\n    def _fail(self, value):\\n        return self.fail % (value, self.version)\\n\""}, {"func_args": {"source": "\"import datetime\\nfrom yamale import validators as val\\n\\n\\ndef test_length_min():\\n    v = val.String(min=2)\\n    assert v.is_valid('abcd')\\n    assert v.is_valid('ab')\\n    assert not v.is_valid('a')\\n\\n\\ndef test_length_max():\\n    v = val.String(max=3)\\n    assert v.is_valid('abc')\\n    assert v.is_valid('ab')\\n    assert not v.is_valid('abcd')\\n\\n\\ndef test_number_max():\\n    v = val.Number(min=.5)\\n    assert v.is_valid(4)\\n    assert v.is_valid(.5)\\n    assert not v.is_valid(.1)\\n\\n\\ndef test_number_min():\\n    v = val.Integer(max=10)\\n    assert v.is_valid(4)\\n    assert v.is_valid(10)\\n    assert not v.is_valid(11)\\n\\n\\ndef test_timestamp_min():\\n    v = val.Timestamp(min=datetime.datetime(2010, 1, 1))\\n    assert v.is_valid(datetime.datetime(2010, 1, 1))\\n    assert v.is_valid(datetime.datetime(2011, 2, 2))\\n    assert not v.is_valid(datetime.datetime(2009, 12, 31))\\n\\n\\ndef test_timestamp_max():\\n    v = val.Timestamp(max=datetime.datetime(2010, 1, 1))\\n    assert v.is_valid(datetime.datetime(2010, 1, 1))\\n    assert v.is_valid(datetime.datetime(2009, 2, 2))\\n    assert not v.is_valid(datetime.datetime(2010, 2, 2))\\n\\n\\ndef test_day_min():\\n    v = val.Day(min=datetime.date(2010, 1, 1))\\n    assert v.is_valid(datetime.date(2010, 1, 1))\\n    assert v.is_valid(datetime.date(2011, 2, 2))\\n    assert not v.is_valid(datetime.date(2009, 12, 31))\\n\\n\\ndef test_day_max():\\n    v = val.Day(max=datetime.date(2010, 1, 1))\\n    assert v.is_valid(datetime.date(2010, 1, 1))\\n    assert v.is_valid(datetime.date(2009, 2, 2))\\n    assert not v.is_valid(datetime.date(2010, 2, 2))\\n\\n\\ndef test_str_equals():\\n    v = val.String(equals='abcd')\\n    assert v.is_valid('abcd')\\n    assert not v.is_valid('abcde')\\n    assert not v.is_valid('c')\\n\\n\\ndef test_str_equals_ignore_case():\\n    v = val.String(equals='abcd', ignore_case=True)\\n    assert v.is_valid('abCd')\\n    assert not v.is_valid('abcde')\\n    assert not v.is_valid('C')\\n\\n\\ndef test_str_starts_with():\\n    v = val.String(starts_with='abc')\\n    assert v.is_valid('abcd')\\n    assert not v.is_valid('bcd')\\n    assert not v.is_valid('c')\\n\\n\\ndef test_str_starts_with_ignore_case():\\n    v = val.String(starts_with='abC', ignore_case=True)\\n    assert v.is_valid('abCde')\\n    assert v.is_valid('abcde')\\n    assert not v.is_valid('bcd')\\n    assert not v.is_valid('C')\\n\\n\\ndef test_str_ends_with():\\n    v = val.String(ends_with='abcd')\\n    assert v.is_valid('abcd')\\n    assert not v.is_valid('abcde')\\n    assert not v.is_valid('c')\\n\\n\\ndef test_str_ends_with_ignore_case():\\n    v = val.String(ends_with='abC', ignore_case=True)\\n    assert v.is_valid('xyzabC')\\n    assert v.is_valid('xyzabc')\\n    assert not v.is_valid('cde')\\n    assert not v.is_valid('C')\\n\\n\\ndef test_str_matches():\\n    v = val.String(matches=r'^(abc)\\\\1?de$')\\n    assert v.is_valid('abcabcde')\\n    assert not v.is_valid('abcabcabcde')\\n    assert not v.is_valid('\\\\12')\\n\\n    v = val.String(matches=r'[a-z0-9]{3,}s\\\\s$', ignore_case=True)\\n    assert v.is_valid('b33S\\\\v')\\n    assert v.is_valid('B33s\\\\t')\\n    assert not v.is_valid(' b33s ')\\n    assert not v.is_valid('b33s  ')\\n\\n    v = val.String(matches=r'A.+\\\\d$', ignore_case=False, multiline=True)\\n    assert v.is_valid('A_-3\\\\n\\\\n')\\n    assert not v.is_valid('a!!!!!5\\\\n\\\\n')\\n\\n    v = val.String(matches=r'.*^Ye.*s\\\\.', ignore_case=True, multiline=True, dotall=True)\\n    assert v.is_valid('YEeeEEEEeeeeS.')\\n    assert v.is_valid('What?\\\\nYes!\\\\nBEES.\\\\nOK.')\\n    assert not v.is_valid('YES-TA-TOES?')\\n    assert not v.is_valid('\\\\n\\\\nYaes.')\\n\\n\\ndef test_char_exclude():\\n    v = val.String(exclude='abcd')\\n    assert v.is_valid('efg')\\n    assert not v.is_valid('abc')\\n    assert not v.is_valid('c')\\n\\n\\ndef test_char_exclude_igonre_case():\\n    v = val.String(exclude='abcd', ignore_case=True)\\n    assert v.is_valid('efg')\\n    assert v.is_valid('Efg')\\n    assert not v.is_valid('abc')\\n    assert not v.is_valid('Def')\\n    assert not v.is_valid('c')\\n\\n\\ndef test_ip4():\\n    v = val.Ip(version=4)\\n    assert v.is_valid('192.168.1.1')\\n    assert v.is_valid('192.168.1.255')\\n    assert v.is_valid('192.168.3.1/24')\\n    assert not v.is_valid('2001:db8::')\\n    assert not v.is_valid('2001:db8::/64')\\n\\ndef test_ip6():\\n    v = val.Ip(version=6)\\n    assert not v.is_valid('192.168.1.1')\\n    assert not v.is_valid('192.168.1.255')\\n    assert not v.is_valid('192.168.3.1/24')\\n    assert v.is_valid('2001:db8::')\\n    assert v.is_valid('2001:db8::/64')\\n\""}, "return_value": "\"import datetime\\nfrom yamale import validators as val\\n\\n\\ndef test_length_min():\\n    v = val.String(min=2)\\n    assert v.is_valid('abcd')\\n    assert v.is_valid('ab')\\n    assert not v.is_valid('a')\\n\\n\\ndef test_length_max():\\n    v = val.String(max=3)\\n    assert v.is_valid('abc')\\n    assert v.is_valid('ab')\\n    assert not v.is_valid('abcd')\\n\\n\\ndef test_number_max():\\n    v = val.Number(min=.5)\\n    assert v.is_valid(4)\\n    assert v.is_valid(.5)\\n    assert not v.is_valid(.1)\\n\\n\\ndef test_number_min():\\n    v = val.Integer(max=10)\\n    assert v.is_valid(4)\\n    assert v.is_valid(10)\\n    assert not v.is_valid(11)\\n\\n\\ndef test_timestamp_min():\\n    v = val.Timestamp(min=datetime.datetime(2010, 1, 1))\\n    assert v.is_valid(datetime.datetime(2010, 1, 1))\\n    assert v.is_valid(datetime.datetime(2011, 2, 2))\\n    assert not v.is_valid(datetime.datetime(2009, 12, 31))\\n\\n\\ndef test_timestamp_max():\\n    v = val.Timestamp(max=datetime.datetime(2010, 1, 1))\\n    assert v.is_valid(datetime.datetime(2010, 1, 1))\\n    assert v.is_valid(datetime.datetime(2009, 2, 2))\\n    assert not v.is_valid(datetime.datetime(2010, 2, 2))\\n\\n\\ndef test_day_min():\\n    v = val.Day(min=datetime.date(2010, 1, 1))\\n    assert v.is_valid(datetime.date(2010, 1, 1))\\n    assert v.is_valid(datetime.date(2011, 2, 2))\\n    assert not v.is_valid(datetime.date(2009, 12, 31))\\n\\n\\ndef test_day_max():\\n    v = val.Day(max=datetime.date(2010, 1, 1))\\n    assert v.is_valid(datetime.date(2010, 1, 1))\\n    assert v.is_valid(datetime.date(2009, 2, 2))\\n    assert not v.is_valid(datetime.date(2010, 2, 2))\\n\\n\\ndef test_str_equals():\\n    v = val.String(equals='abcd')\\n    assert v.is_valid('abcd')\\n    assert not v.is_valid('abcde')\\n    assert not v.is_valid('c')\\n\\n\\ndef test_str_equals_ignore_case():\\n    v = val.String(equals='abcd', ignore_case=True)\\n    assert v.is_valid('abCd')\\n    assert not v.is_valid('abcde')\\n    assert not v.is_valid('C')\\n\\n\\ndef test_str_starts_with():\\n    v = val.String(starts_with='abc')\\n    assert v.is_valid('abcd')\\n    assert not v.is_valid('bcd')\\n    assert not v.is_valid('c')\\n\\n\\ndef test_str_starts_with_ignore_case():\\n    v = val.String(starts_with='abC', ignore_case=True)\\n    assert v.is_valid('abCde')\\n    assert v.is_valid('abcde')\\n    assert not v.is_valid('bcd')\\n    assert not v.is_valid('C')\\n\\n\\ndef test_str_ends_with():\\n    v = val.String(ends_with='abcd')\\n    assert v.is_valid('abcd')\\n    assert not v.is_valid('abcde')\\n    assert not v.is_valid('c')\\n\\n\\ndef test_str_ends_with_ignore_case():\\n    v = val.String(ends_with='abC', ignore_case=True)\\n    assert v.is_valid('xyzabC')\\n    assert v.is_valid('xyzabc')\\n    assert not v.is_valid('cde')\\n    assert not v.is_valid('C')\\n\\n\\ndef test_str_matches():\\n    v = val.String(matches=r'^(abc)\\\\1?de$')\\n    assert v.is_valid('abcabcde')\\n    assert not v.is_valid('abcabcabcde')\\n    assert not v.is_valid('\\\\12')\\n\\n    v = val.String(matches=r'[a-z0-9]{3,}s\\\\s$', ignore_case=True)\\n    assert v.is_valid('b33S\\\\v')\\n    assert v.is_valid('B33s\\\\t')\\n    assert not v.is_valid(' b33s ')\\n    assert not v.is_valid('b33s  ')\\n\\n    v = val.String(matches=r'A.+\\\\d$', ignore_case=False, multiline=True)\\n    assert v.is_valid('A_-3\\\\n\\\\n')\\n    assert not v.is_valid('a!!!!!5\\\\n\\\\n')\\n\\n    v = val.String(matches=r'.*^Ye.*s\\\\.', ignore_case=True, multiline=True, dotall=True)\\n    assert v.is_valid('YEeeEEEEeeeeS.')\\n    assert v.is_valid('What?\\\\nYes!\\\\nBEES.\\\\nOK.')\\n    assert not v.is_valid('YES-TA-TOES?')\\n    assert not v.is_valid('\\\\n\\\\nYaes.')\\n\\n\\ndef test_char_exclude():\\n    v = val.String(exclude='abcd')\\n    assert v.is_valid('efg')\\n    assert not v.is_valid('abc')\\n    assert not v.is_valid('c')\\n\\n\\ndef test_char_exclude_igonre_case():\\n    v = val.String(exclude='abcd', ignore_case=True)\\n    assert v.is_valid('efg')\\n    assert v.is_valid('Efg')\\n    assert not v.is_valid('abc')\\n    assert not v.is_valid('Def')\\n    assert not v.is_valid('c')\\n\\n\\ndef test_ip4():\\n    v = val.Ip(version=4)\\n    assert v.is_valid('192.168.1.1')\\n    assert v.is_valid('192.168.1.255')\\n    assert v.is_valid('192.168.3.1/24')\\n    assert not v.is_valid('2001:db8::')\\n    assert not v.is_valid('2001:db8::/64')\\n\\ndef test_ip6():\\n    v = val.Ip(version=6)\\n    assert not v.is_valid('192.168.1.1')\\n    assert not v.is_valid('192.168.1.255')\\n    assert not v.is_valid('192.168.3.1/24')\\n    assert v.is_valid('2001:db8::')\\n    assert v.is_valid('2001:db8::/64')\\n\""}, {"func_args": {"source": "'from datetime import date, datetime\\nfrom yamale import validators as val\\n\\n\\ndef test_validator_defaults():\\n    \"\"\"\\n    Unit test the dictionary of default validators.\\n    \"\"\"\\n    assert val.DefaultValidators[val.String.tag] is val.String\\n    assert val.DefaultValidators[val.Any.__name__] is val.Any\\n\\n\\ndef test_equality():\\n    assert val.String() == val.String()\\n    assert val.String(hello=\\'wat\\') == val.String(hello=\\'wat\\')\\n    assert val.String(hello=\\'wat\\') != val.String(hello=\\'nope\\')\\n    assert val.Boolean(\\'yep\\') != val.Boolean(\\'nope\\')\\n\\n\\ndef test_integer():\\n    v = val.Integer()\\n    assert v.is_valid(1)\\n    assert not v.is_valid(\\'1\\')\\n    assert not v.is_valid(1.34)\\n\\n\\ndef test_string():\\n    v = val.String()\\n    assert v.is_valid(\\'1\\')\\n    assert not v.is_valid(1)\\n\\n\\ndef test_regex():\\n    v = val.Regex(r\\'^(abc)\\\\1?de$\\', name=\\'test regex\\')\\n    assert v.is_valid(\\'abcabcde\\')\\n    assert not v.is_valid(\\'abcabcabcde\\')\\n    assert not v.is_valid(\\'\\\\12\\')\\n    assert v.fail(\\'woopz\\') == \\'\\\\\\'woopz\\\\\\' is not a test regex.\\'\\n\\n    v = val.Regex(r\\'[a-z0-9]{3,}s\\\\s$\\', ignore_case=True)\\n    assert v.is_valid(\\'b33S\\\\v\\')\\n    assert v.is_valid(\\'B33s\\\\t\\')\\n    assert not v.is_valid(\\' b33s \\')\\n    assert not v.is_valid(\\'b33s  \\')\\n    assert v.fail(\\'fdsa\\') == \\'\\\\\\'fdsa\\\\\\' is not a regex match.\\'\\n\\n    v = val.Regex(r\\'A.+\\\\d$\\', ignore_case=False, multiline=True)\\n    assert v.is_valid(\\'A_-3\\\\n\\\\n\\')\\n    assert not v.is_valid(\\'a!!!!!5\\\\n\\\\n\\')\\n\\n    v = val.Regex(r\\'.*^Ye.*s\\\\.\\', ignore_case=True, multiline=True, dotall=True)\\n    assert v.is_valid(\\'YEeeEEEEeeeeS.\\')\\n    assert v.is_valid(\\'What?\\\\nYes!\\\\nBEES.\\\\nOK.\\')\\n    assert not v.is_valid(\\'YES-TA-TOES?\\')\\n    assert not v.is_valid(\\'\\\\n\\\\nYaes.\\')\\n\\n\\ndef test_number():\\n    v = val.Number()\\n    assert v.is_valid(1)\\n    assert v.is_valid(1.3425235)\\n    assert not v.is_valid(\\'str\\')\\n\\n\\ndef test_boolean():\\n    v = val.Boolean()\\n    assert v.is_valid(True)\\n    assert v.is_valid(False)\\n    assert not v.is_valid(\\'\\')\\n    assert not v.is_valid(0)\\n\\n\\ndef test_date():\\n    v = val.Day()\\n    assert v.is_valid(date(2015, 1, 1))\\n    assert v.is_valid(datetime(2015, 1, 1, 1))\\n    assert not v.is_valid(\\'\\')\\n    assert not v.is_valid(0)\\n\\n\\ndef test_datetime():\\n    v = val.Timestamp()\\n    assert v.is_valid(datetime(2015, 1, 1, 1))\\n    assert not v.is_valid(date(2015, 1, 1))\\n    assert not v.is_valid(\\'\\')\\n    assert not v.is_valid(0)\\n\\n\\ndef test_list():\\n    v = val.List()\\n    assert v.is_valid([])\\n    assert v.is_valid(())\\n    assert not v.is_valid(\\'\\')\\n    assert not v.is_valid(0)\\n\\n\\ndef test_null():\\n    v = val.Null()\\n    assert v.is_valid(None)\\n    assert not v.is_valid(\\'None\\')\\n    assert not v.is_valid(0)\\n    assert not v.is_valid(float(\\'nan\\'))\\n    assert not v.is_valid({})\\n\\ndef test_ip():\\n    v = val.Ip()\\n    assert v.is_valid(\\'192.168.1.1\\')\\n    assert v.is_valid(\\'192.168.1.255\\')\\n    assert v.is_valid(\\'192.168.3.1/24\\')\\n    assert v.is_valid(\\'2001:db8::\\')\\n    assert v.is_valid(\\'2001:db8::/64\\')\\n    assert not v.is_valid(\\'257.192.168.1\\')\\n    assert not v.is_valid(\\'192.168.1.256\\')\\n    assert not v.is_valid(\\'2001:db8::/129\\')\\n    assert not v.is_valid(\\'2001:dg8::/127\\')\\n    assert not v.is_valid(\\'asdf\\')\\n\\ndef test_mac():\\n    v = val.Mac()\\n    assert v.is_valid(\\'12:34:56:78:90:ab\\')\\n    assert v.is_valid(\\'1234:5678:90ab\\')\\n    assert v.is_valid(\\'12-34-56-78-90-ab\\')\\n    assert v.is_valid(\\'1234-5678-90ab\\')\\n\\n    assert v.is_valid(\\'12:34:56:78:90:AB\\')\\n    assert v.is_valid(\\'1234:5678:90AB\\')\\n    assert v.is_valid(\\'12-34-56-78-90-AB\\')\\n    assert v.is_valid(\\'1234-5678-90AB\\')\\n\\n    assert v.is_valid(\\'ab:cd:ef:12:34:56\\')\\n    assert v.is_valid(\\'abcd:ef12:3456\\')\\n    assert v.is_valid(\\'ab-cd-ef-12-34-56\\')\\n    assert v.is_valid(\\'abcd-ef12-3456\\')\\n\\n    assert v.is_valid(\\'AB:CD:EF:12:34:56\\')\\n    assert v.is_valid(\\'ABCD:EF12:3456\\')\\n    assert v.is_valid(\\'AB-CD-EF-12-34-56\\')\\n    assert v.is_valid(\\'ABCD-EF12-3456\\')\\n\\n    assert not v.is_valid(\\'qwertyuiop\\')\\n    assert not v.is_valid(\\'qw-er-ty-12-34-56\\')\\n    assert not v.is_valid(\\'ab:cd:ef:12:34:56:78\\')\\n    assert not v.is_valid(\\'abcdefghijkl\\')\\n    assert not v.is_valid(\\'1234567890ax\\')\\n'"}, "return_value": "'from datetime import date, datetime\\nfrom yamale import validators as val\\n\\n\\ndef test_validator_defaults():\\n    \"\"\"\\n    Unit test the dictionary of default validators.\\n    \"\"\"\\n    assert val.DefaultValidators[val.String.tag] is val.String\\n    assert val.DefaultValidators[val.Any.__name__] is val.Any\\n\\n\\ndef test_equality():\\n    assert val.String() == val.String()\\n    assert val.String(hello=\\'wat\\') == val.String(hello=\\'wat\\')\\n    assert val.String(hello=\\'wat\\') != val.String(hello=\\'nope\\')\\n    assert val.Boolean(\\'yep\\') != val.Boolean(\\'nope\\')\\n\\n\\ndef test_integer():\\n    v = val.Integer()\\n    assert v.is_valid(1)\\n    assert not v.is_valid(\\'1\\')\\n    assert not v.is_valid(1.34)\\n\\n\\ndef test_string():\\n    v = val.String()\\n    assert v.is_valid(\\'1\\')\\n    assert not v.is_valid(1)\\n\\n\\ndef test_regex():\\n    v = val.Regex(r\\'^(abc)\\\\1?de$\\', name=\\'test regex\\')\\n    assert v.is_valid(\\'abcabcde\\')\\n    assert not v.is_valid(\\'abcabcabcde\\')\\n    assert not v.is_valid(\\'\\\\12\\')\\n    assert v.fail(\\'woopz\\') == \\'\\\\\\'woopz\\\\\\' is not a test regex.\\'\\n\\n    v = val.Regex(r\\'[a-z0-9]{3,}s\\\\s$\\', ignore_case=True)\\n    assert v.is_valid(\\'b33S\\\\v\\')\\n    assert v.is_valid(\\'B33s\\\\t\\')\\n    assert not v.is_valid(\\' b33s \\')\\n    assert not v.is_valid(\\'b33s  \\')\\n    assert v.fail(\\'fdsa\\') == \\'\\\\\\'fdsa\\\\\\' is not a regex match.\\'\\n\\n    v = val.Regex(r\\'A.+\\\\d$\\', ignore_case=False, multiline=True)\\n    assert v.is_valid(\\'A_-3\\\\n\\\\n\\')\\n    assert not v.is_valid(\\'a!!!!!5\\\\n\\\\n\\')\\n\\n    v = val.Regex(r\\'.*^Ye.*s\\\\.\\', ignore_case=True, multiline=True, dotall=True)\\n    assert v.is_valid(\\'YEeeEEEEeeeeS.\\')\\n    assert v.is_valid(\\'What?\\\\nYes!\\\\nBEES.\\\\nOK.\\')\\n    assert not v.is_valid(\\'YES-TA-TOES?\\')\\n    assert not v.is_valid(\\'\\\\n\\\\nYaes.\\')\\n\\n\\ndef test_number():\\n    v = val.Number()\\n    assert v.is_valid(1)\\n    assert v.is_valid(1.3425235)\\n    assert not v.is_valid(\\'str\\')\\n\\n\\ndef test_boolean():\\n    v = val.Boolean()\\n    assert v.is_valid(True)\\n    assert v.is_valid(False)\\n    assert not v.is_valid(\\'\\')\\n    assert not v.is_valid(0)\\n\\n\\ndef test_date():\\n    v = val.Day()\\n    assert v.is_valid(date(2015, 1, 1))\\n    assert v.is_valid(datetime(2015, 1, 1, 1))\\n    assert not v.is_valid(\\'\\')\\n    assert not v.is_valid(0)\\n\\n\\ndef test_datetime():\\n    v = val.Timestamp()\\n    assert v.is_valid(datetime(2015, 1, 1, 1))\\n    assert not v.is_valid(date(2015, 1, 1))\\n    assert not v.is_valid(\\'\\')\\n    assert not v.is_valid(0)\\n\\n\\ndef test_list():\\n    v = val.List()\\n    assert v.is_valid([])\\n    assert v.is_valid(())\\n    assert not v.is_valid(\\'\\')\\n    assert not v.is_valid(0)\\n\\n\\ndef test_null():\\n    v = val.Null()\\n    assert v.is_valid(None)\\n    assert not v.is_valid(\\'None\\')\\n    assert not v.is_valid(0)\\n    assert not v.is_valid(float(\\'nan\\'))\\n    assert not v.is_valid({})\\n\\ndef test_ip():\\n    v = val.Ip()\\n    assert v.is_valid(\\'192.168.1.1\\')\\n    assert v.is_valid(\\'192.168.1.255\\')\\n    assert v.is_valid(\\'192.168.3.1/24\\')\\n    assert v.is_valid(\\'2001:db8::\\')\\n    assert v.is_valid(\\'2001:db8::/64\\')\\n    assert not v.is_valid(\\'257.192.168.1\\')\\n    assert not v.is_valid(\\'192.168.1.256\\')\\n    assert not v.is_valid(\\'2001:db8::/129\\')\\n    assert not v.is_valid(\\'2001:dg8::/127\\')\\n    assert not v.is_valid(\\'asdf\\')\\n\\ndef test_mac():\\n    v = val.Mac()\\n    assert v.is_valid(\\'12:34:56:78:90:ab\\')\\n    assert v.is_valid(\\'1234:5678:90ab\\')\\n    assert v.is_valid(\\'12-34-56-78-90-ab\\')\\n    assert v.is_valid(\\'1234-5678-90ab\\')\\n\\n    assert v.is_valid(\\'12:34:56:78:90:AB\\')\\n    assert v.is_valid(\\'1234:5678:90AB\\')\\n    assert v.is_valid(\\'12-34-56-78-90-AB\\')\\n    assert v.is_valid(\\'1234-5678-90AB\\')\\n\\n    assert v.is_valid(\\'ab:cd:ef:12:34:56\\')\\n    assert v.is_valid(\\'abcd:ef12:3456\\')\\n    assert v.is_valid(\\'ab-cd-ef-12-34-56\\')\\n    assert v.is_valid(\\'abcd-ef12-3456\\')\\n\\n    assert v.is_valid(\\'AB:CD:EF:12:34:56\\')\\n    assert v.is_valid(\\'ABCD:EF12:3456\\')\\n    assert v.is_valid(\\'AB-CD-EF-12-34-56\\')\\n    assert v.is_valid(\\'ABCD-EF12-3456\\')\\n\\n    assert not v.is_valid(\\'qwertyuiop\\')\\n    assert not v.is_valid(\\'qw-er-ty-12-34-56\\')\\n    assert not v.is_valid(\\'ab:cd:ef:12:34:56:78\\')\\n    assert not v.is_valid(\\'abcdefghijkl\\')\\n    assert not v.is_valid(\\'1234567890ax\\')\\n'"}, {"func_args": {"source": "'import re\\nfrom datetime import date, datetime\\nimport ipaddress\\nfrom .base import Validator\\nfrom . import constraints as con\\nfrom .. import util\\n\\n# ABCs for containers were moved to their own module\\ntry:\\n    from collections.abc import Sequence, Mapping\\nexcept ImportError:\\n    from collections import Sequence, Mapping\\n\\n\\nclass String(Validator):\\n    \"\"\"String validator\"\"\"\\n    tag = \\'str\\'\\n    constraints = [con.LengthMin,\\n                   con.LengthMax,\\n                   con.CharacterExclude,\\n                   con.StringEquals,\\n                   con.StringStartsWith,\\n                   con.StringEndsWith,\\n                   con.StringMatches]\\n\\n    def _is_valid(self, value):\\n        return util.isstr(value)\\n\\n\\nclass Number(Validator):\\n    \"\"\"Number/float validator\"\"\"\\n    value_type = float\\n    tag = \\'num\\'\\n    constraints = [con.Min, con.Max]\\n\\n    def _is_valid(self, value):\\n        return isinstance(value, (int, float)) and not isinstance(value, bool)\\n\\n\\nclass Integer(Validator):\\n    \"\"\"Integer validator\"\"\"\\n    value_type = int\\n    tag = \\'int\\'\\n    constraints = [con.Min, con.Max]\\n\\n    def _is_valid(self, value):\\n        return isinstance(value, int) and not isinstance(value, bool)\\n\\n\\nclass Boolean(Validator):\\n    \"\"\"Boolean validator\"\"\"\\n    tag = \\'bool\\'\\n\\n    def _is_valid(self, value):\\n        return isinstance(value, bool)\\n\\n\\nclass Enum(Validator):\\n    \"\"\"Enum validator\"\"\"\\n    tag = \\'enum\\'\\n\\n    def __init__(self, *args, **kwargs):\\n        super(Enum, self).__init__(*args, **kwargs)\\n        self.enums = args\\n\\n    def _is_valid(self, value):\\n        return value in self.enums\\n\\n    def fail(self, value):\\n        return \\'\\\\\\'%s\\\\\\' not in %s\\' % (value, self.enums)\\n\\n\\nclass Day(Validator):\\n    \"\"\"Day validator. Format: YYYY-MM-DD\"\"\"\\n    value_type = date\\n    tag = \\'day\\'\\n    constraints = [con.Min, con.Max]\\n\\n    def _is_valid(self, value):\\n        return isinstance(value, date)\\n\\n\\nclass Timestamp(Validator):\\n    \"\"\"Timestamp validator. Format: YYYY-MM-DD HH:MM:SS\"\"\"\\n    value_type = datetime\\n    tag = \\'timestamp\\'\\n    constraints = [con.Min, con.Max]\\n\\n    def _is_valid(self, value):\\n        return isinstance(value, datetime)\\n\\n\\nclass Map(Validator):\\n    \"\"\"Map and dict validator\"\"\"\\n    tag = \\'map\\'\\n    constraints = [con.LengthMin, con.LengthMax, con.Key]\\n\\n    def __init__(self, *args, **kwargs):\\n        super(Map, self).__init__(*args, **kwargs)\\n        self.validators = [val for val in args if isinstance(val, Validator)]\\n\\n    def _is_valid(self, value):\\n        return isinstance(value, Mapping)\\n\\n\\nclass List(Validator):\\n    \"\"\"List validator\"\"\"\\n    tag = \\'list\\'\\n    constraints = [con.LengthMin, con.LengthMax]\\n\\n    def __init__(self, *args, **kwargs):\\n        super(List, self).__init__(*args, **kwargs)\\n        self.validators = [val for val in args if isinstance(val, Validator)]\\n\\n    def _is_valid(self, value):\\n        return isinstance(value, Sequence) and not util.isstr(value)\\n\\n\\nclass Include(Validator):\\n    \"\"\"Include validator\"\"\"\\n    tag = \\'include\\'\\n\\n    def __init__(self, *args, **kwargs):\\n        self.include_name = args[0]\\n        self.strict = kwargs.pop(\\'strict\\', None)\\n        super(Include, self).__init__(*args, **kwargs)\\n\\n    def _is_valid(self, value):\\n        return True\\n\\n    def get_name(self):\\n        return self.include_name\\n\\n\\nclass Any(Validator):\\n    \"\"\"Any of several types validator\"\"\"\\n    tag = \\'any\\'\\n\\n    def __init__(self, *args, **kwargs):\\n        self.validators = [val for val in args if isinstance(val, Validator)]\\n        super(Any, self).__init__(*args, **kwargs)\\n\\n    def _is_valid(self, value):\\n        return True\\n\\nclass Subset(Validator):\\n    \"\"\"Subset of several types validator\"\"\"\\n    tag = \\'subset\\'\\n\\n    def __init__(self, *args, **kwargs):\\n        super(Subset, self).__init__(*args, **kwargs)\\n        self._allow_empty_set = bool(kwargs.pop(\\'allow_empty\\', False))\\n        self.validators = [val for val in args if isinstance(val, Validator)]\\n        if not self.validators:\\n            raise ValueError(\\'\\\\\\'%s\\\\\\' requires at least one validator!\\' % self.tag)\\n\\n    def _is_valid(self, value):\\n        return self.can_be_none or value is not None\\n\\n    def fail(self, value):\\n        # Called in case `_is_valid` returns False\\n        return \\'\\\\\\'%s\\\\\\' may not be an empty set.\\' % self.get_name()\\n\\n    @property\\n    def is_optional(self):\\n        return self._allow_empty_set\\n\\n    @property\\n    def can_be_none(self):\\n        return self._allow_empty_set\\n\\n\\nclass Null(Validator):\\n    \"\"\"Validates null\"\"\"\\n    value_type = None\\n    tag = \\'null\\'\\n\\n    def _is_valid(self, value):\\n        return value is None\\n\\n\\nclass Regex(Validator):\\n    \"\"\"Regular expression validator\"\"\"\\n    tag = \\'regex\\'\\n    _regex_flags = {\\'ignore_case\\': re.I, \\'multiline\\': re.M, \\'dotall\\': re.S}\\n\\n    def __init__(self, *args, **kwargs):\\n        self.regex_name = kwargs.pop(\\'name\\', None)\\n\\n        flags = 0\\n        for k, v in util.get_iter(self._regex_flags):\\n            flags |= v if kwargs.pop(k, False) else 0\\n\\n        self.regexes = [re.compile(arg, flags)\\n                        for arg in args if util.isstr(arg)]\\n        super(Regex, self).__init__(*args, **kwargs)\\n\\n    def _is_valid(self, value):\\n        return util.isstr(value) and any(r.match(value) for r in self.regexes)\\n\\n    def get_name(self):\\n        return self.regex_name or self.tag + \" match\"\\n\\n\\nclass Ip(Validator):\\n    \"\"\"IP address validator\"\"\"\\n    tag = \\'ip\\'\\n    constraints = [con.IpVersion]\\n\\n    def _is_valid(self, value):\\n        return self.ip_address(value)\\n\\n    def ip_address(self, value):\\n        try:\\n            ipaddress.ip_interface(util.to_unicode(value))\\n        except ValueError:\\n            return False\\n        return True\\n\\n\\nclass Mac(Regex):\\n    \"\"\"MAC address validator\"\"\"\\n    tag = \\'mac\\'\\n\\n    def __init__(self, *args, **kwargs):\\n        super(Mac, self).__init__(*args, **kwargs)\\n        self.regexes = [\\n            re.compile(\\n                \"[0-9a-fA-F]{2}([-:]?)[0-9a-fA-F]{2}(\\\\\\\\1[0-9a-fA-F]{2}){4}$\"),\\n            re.compile(\\n                \"[0-9a-fA-F]{4}([-:]?)[0-9a-fA-F]{4}(\\\\\\\\1[0-9a-fA-F]{4})$\"),\\n        ]\\n\\n\\nDefaultValidators = {}\\n\\nfor v in util.get_subclasses(Validator):\\n    # Allow validator nodes to contain either tags or actual name\\n    DefaultValidators[v.tag] = v\\n    DefaultValidators[v.__name__] = v\\n'"}, "return_value": "'import re\\nfrom datetime import date, datetime\\nimport ipaddress\\nfrom .base import Validator\\nfrom . import constraints as con\\nfrom .. import util\\n\\n# ABCs for containers were moved to their own module\\ntry:\\n    from collections.abc import Sequence, Mapping\\nexcept ImportError:\\n    from collections import Sequence, Mapping\\n\\n\\nclass String(Validator):\\n    \"\"\"String validator\"\"\"\\n    tag = \\'str\\'\\n    constraints = [con.LengthMin,\\n                   con.LengthMax,\\n                   con.CharacterExclude,\\n                   con.StringEquals,\\n                   con.StringStartsWith,\\n                   con.StringEndsWith,\\n                   con.StringMatches]\\n\\n    def _is_valid(self, value):\\n        return util.isstr(value)\\n\\n\\nclass Number(Validator):\\n    \"\"\"Number/float validator\"\"\"\\n    value_type = float\\n    tag = \\'num\\'\\n    constraints = [con.Min, con.Max]\\n\\n    def _is_valid(self, value):\\n        return isinstance(value, (int, float)) and not isinstance(value, bool)\\n\\n\\nclass Integer(Validator):\\n    \"\"\"Integer validator\"\"\"\\n    value_type = int\\n    tag = \\'int\\'\\n    constraints = [con.Min, con.Max]\\n\\n    def _is_valid(self, value):\\n        return isinstance(value, int) and not isinstance(value, bool)\\n\\n\\nclass Boolean(Validator):\\n    \"\"\"Boolean validator\"\"\"\\n    tag = \\'bool\\'\\n\\n    def _is_valid(self, value):\\n        return isinstance(value, bool)\\n\\n\\nclass Enum(Validator):\\n    \"\"\"Enum validator\"\"\"\\n    tag = \\'enum\\'\\n\\n    def __init__(self, *args, **kwargs):\\n        super(Enum, self).__init__(*args, **kwargs)\\n        self.enums = args\\n\\n    def _is_valid(self, value):\\n        return value in self.enums\\n\\n    def fail(self, value):\\n        return \\'\\\\\\'%s\\\\\\' not in %s\\' % (value, self.enums)\\n\\n\\nclass Day(Validator):\\n    \"\"\"Day validator. Format: YYYY-MM-DD\"\"\"\\n    value_type = date\\n    tag = \\'day\\'\\n    constraints = [con.Min, con.Max]\\n\\n    def _is_valid(self, value):\\n        return isinstance(value, date)\\n\\n\\nclass Timestamp(Validator):\\n    \"\"\"Timestamp validator. Format: YYYY-MM-DD HH:MM:SS\"\"\"\\n    value_type = datetime\\n    tag = \\'timestamp\\'\\n    constraints = [con.Min, con.Max]\\n\\n    def _is_valid(self, value):\\n        return isinstance(value, datetime)\\n\\n\\nclass Map(Validator):\\n    \"\"\"Map and dict validator\"\"\"\\n    tag = \\'map\\'\\n    constraints = [con.LengthMin, con.LengthMax, con.Key]\\n\\n    def __init__(self, *args, **kwargs):\\n        super(Map, self).__init__(*args, **kwargs)\\n        self.validators = [val for val in args if isinstance(val, Validator)]\\n\\n    def _is_valid(self, value):\\n        return isinstance(value, Mapping)\\n\\n\\nclass List(Validator):\\n    \"\"\"List validator\"\"\"\\n    tag = \\'list\\'\\n    constraints = [con.LengthMin, con.LengthMax]\\n\\n    def __init__(self, *args, **kwargs):\\n        super(List, self).__init__(*args, **kwargs)\\n        self.validators = [val for val in args if isinstance(val, Validator)]\\n\\n    def _is_valid(self, value):\\n        return isinstance(value, Sequence) and not util.isstr(value)\\n\\n\\nclass Include(Validator):\\n    \"\"\"Include validator\"\"\"\\n    tag = \\'include\\'\\n\\n    def __init__(self, *args, **kwargs):\\n        self.include_name = args[0]\\n        self.strict = kwargs.pop(\\'strict\\', None)\\n        super(Include, self).__init__(*args, **kwargs)\\n\\n    def _is_valid(self, value):\\n        return True\\n\\n    def get_name(self):\\n        return self.include_name\\n\\n\\nclass Any(Validator):\\n    \"\"\"Any of several types validator\"\"\"\\n    tag = \\'any\\'\\n\\n    def __init__(self, *args, **kwargs):\\n        self.validators = [val for val in args if isinstance(val, Validator)]\\n        super(Any, self).__init__(*args, **kwargs)\\n\\n    def _is_valid(self, value):\\n        return True\\n\\nclass Subset(Validator):\\n    \"\"\"Subset of several types validator\"\"\"\\n    tag = \\'subset\\'\\n\\n    def __init__(self, *args, **kwargs):\\n        super(Subset, self).__init__(*args, **kwargs)\\n        self._allow_empty_set = bool(kwargs.pop(\\'allow_empty\\', False))\\n        self.validators = [val for val in args if isinstance(val, Validator)]\\n        if not self.validators:\\n            raise ValueError(\\'\\\\\\'%s\\\\\\' requires at least one validator!\\' % self.tag)\\n\\n    def _is_valid(self, value):\\n        return self.can_be_none or value is not None\\n\\n    def fail(self, value):\\n        # Called in case `_is_valid` returns False\\n        return \\'\\\\\\'%s\\\\\\' may not be an empty set.\\' % self.get_name()\\n\\n    @property\\n    def is_optional(self):\\n        return self._allow_empty_set\\n\\n    @property\\n    def can_be_none(self):\\n        return self._allow_empty_set\\n\\n\\nclass Null(Validator):\\n    \"\"\"Validates null\"\"\"\\n    value_type = None\\n    tag = \\'null\\'\\n\\n    def _is_valid(self, value):\\n        return value is None\\n\\n\\nclass Regex(Validator):\\n    \"\"\"Regular expression validator\"\"\"\\n    tag = \\'regex\\'\\n    _regex_flags = {\\'ignore_case\\': re.I, \\'multiline\\': re.M, \\'dotall\\': re.S}\\n\\n    def __init__(self, *args, **kwargs):\\n        self.regex_name = kwargs.pop(\\'name\\', None)\\n\\n        flags = 0\\n        for k, v in util.get_iter(self._regex_flags):\\n            flags |= v if kwargs.pop(k, False) else 0\\n\\n        self.regexes = [re.compile(arg, flags)\\n                        for arg in args if util.isstr(arg)]\\n        super(Regex, self).__init__(*args, **kwargs)\\n\\n    def _is_valid(self, value):\\n        return util.isstr(value) and any(r.match(value) for r in self.regexes)\\n\\n    def get_name(self):\\n        return self.regex_name or self.tag + \" match\"\\n\\n\\nclass Ip(Validator):\\n    \"\"\"IP address validator\"\"\"\\n    tag = \\'ip\\'\\n    constraints = [con.IpVersion]\\n\\n    def _is_valid(self, value):\\n        return self.ip_address(value)\\n\\n    def ip_address(self, value):\\n        try:\\n            ipaddress.ip_interface(util.to_unicode(value))\\n        except ValueError:\\n            return False\\n        return True\\n\\n\\nclass Mac(Regex):\\n    \"\"\"MAC address validator\"\"\"\\n    tag = \\'mac\\'\\n\\n    def __init__(self, *args, **kwargs):\\n        super(Mac, self).__init__(*args, **kwargs)\\n        self.regexes = [\\n            re.compile(\\n                \"[0-9a-fA-F]{2}([-:]?)[0-9a-fA-F]{2}(\\\\\\\\1[0-9a-fA-F]{2}){4}$\"),\\n            re.compile(\\n                \"[0-9a-fA-F]{4}([-:]?)[0-9a-fA-F]{4}(\\\\\\\\1[0-9a-fA-F]{4})$\"),\\n        ]\\n\\n\\nDefaultValidators = {}\\n\\nfor v in util.get_subclasses(Validator):\\n    # Allow validator nodes to contain either tags or actual name\\n    DefaultValidators[v.tag] = v\\n    DefaultValidators[v.__name__] = v\\n'"}, {"func_args": {"source": "\"#!/usr/bin/env python\\nfrom .schema import Schema\\nfrom .yamale_error import YamaleError\\n\\n\\ndef make_schema(path=None, parser='PyYAML', validators=None, content=None):\\n    # validators = None means use default.\\n    # Import readers here so we can get version information in setup.py.\\n    from . import readers\\n    raw_schemas = readers.parse_yaml(path, parser, content=content)\\n    if not raw_schemas:\\n        raise ValueError('{} is an empty file!'.format(path))\\n    # First document is the base schema\\n    try:\\n        s = Schema(raw_schemas[0], path, validators=validators)\\n        # Additional documents contain Includes.\\n        for raw_schema in raw_schemas[1:]:\\n            s.add_include(raw_schema)\\n    except (TypeError, SyntaxError) as e:\\n        error = 'Schema error in file %s\\\\n' % path\\n        error += str(e)\\n        raise SyntaxError(error)\\n\\n    return s\\n\\n\\ndef make_data(path=None, parser='PyYAML', content=None):\\n    from . import readers\\n    raw_data = readers.parse_yaml(path, parser, content=content)\\n    if len(raw_data) == 0:\\n        return [({}, path)]\\n    return [(d, path) for d in raw_data]\\n\\n\\ndef validate(schema, data, strict=True, _raise_error=True):\\n    results = []\\n    is_valid = True\\n    for d, path in data:\\n        result = schema.validate(d, path, strict)\\n        results.append(result)\\n        is_valid = is_valid and result.isValid()\\n    if _raise_error and not is_valid:\\n        raise YamaleError(results)\\n    return results\\n\""}, "return_value": "\"#!/usr/bin/env python\\nfrom .schema import Schema\\nfrom .yamale_error import YamaleError\\n\\n\\ndef make_schema(path=None, parser='PyYAML', validators=None, content=None):\\n    # validators = None means use default.\\n    # Import readers here so we can get version information in setup.py.\\n    from . import readers\\n    raw_schemas = readers.parse_yaml(path, parser, content=content)\\n    if not raw_schemas:\\n        raise ValueError('{} is an empty file!'.format(path))\\n    # First document is the base schema\\n    try:\\n        s = Schema(raw_schemas[0], path, validators=validators)\\n        # Additional documents contain Includes.\\n        for raw_schema in raw_schemas[1:]:\\n            s.add_include(raw_schema)\\n    except (TypeError, SyntaxError) as e:\\n        error = 'Schema error in file %s\\\\n' % path\\n        error += str(e)\\n        raise SyntaxError(error)\\n\\n    return s\\n\\n\\ndef make_data(path=None, parser='PyYAML', content=None):\\n    from . import readers\\n    raw_data = readers.parse_yaml(path, parser, content=content)\\n    if len(raw_data) == 0:\\n        return [({}, path)]\\n    return [(d, path) for d in raw_data]\\n\\n\\ndef validate(schema, data, strict=True, _raise_error=True):\\n    results = []\\n    is_valid = True\\n    for d, path in data:\\n        result = schema.validate(d, path, strict)\\n        results.append(result)\\n        is_valid = is_valid and result.isValid()\\n    if _raise_error and not is_valid:\\n        raise YamaleError(results)\\n    return results\\n\""}, {"func_args": {"source": "\"class YamaleError(ValueError):\\n    def __init__(self, results):\\n        super(YamaleError, self).__init__('\\\\n'.join([str(x) for x in list(filter(lambda x: not x.isValid(), results))]))\\n        self.message = self.args[0]\\n        self.results = results\\n\""}, "return_value": "\"class YamaleError(ValueError):\\n    def __init__(self, results):\\n        super(YamaleError, self).__init__('\\\\n'.join([str(x) for x in list(filter(lambda x: not x.isValid(), results))]))\\n        self.message = self.args[0]\\n        self.results = results\\n\""}, {"func_args": {"source": "'import glob\\nimport os\\nimport itertools\\n\\nfrom unittest import TestCase\\n\\nimport yamale\\n\\n\\nclass YamaleTestCase(TestCase):\\n    \"\"\" TestCase for easily validating YAML in your own tests.\\n    `schema`: String of path to the schema file to use. One schema file per test case.\\n    `yaml`: String or list of yaml files to validate. Accepts globs.\\n    `base_dir`: String path to prepend to all other paths. This is optional.\\n    \"\"\"\\n\\n    schema = None\\n    yaml = None\\n    base_dir = None\\n\\n    def validate(self, validators=None):\\n        schema = self.schema\\n        yaml = self.yaml\\n        base_dir = self.base_dir\\n\\n        if schema is None:\\n            return\\n\\n        if type(yaml) != list:\\n            yaml = [yaml]\\n\\n        if base_dir is not None:\\n            schema = os.path.join(base_dir, schema)\\n            yaml = {os.path.join(base_dir, y) for y in yaml}\\n\\n        # Run yaml through glob and flatten list\\n        yaml = set(itertools.chain(*map(glob.glob, yaml)))\\n\\n        # Remove schema from set of data files\\n        yaml = yaml - {schema}\\n\\n        yamale_schema = yamale.make_schema(schema, validators=validators)\\n        yamale_data = itertools.chain(*map(yamale.make_data, yaml))\\n\\n        for result in yamale.validate(yamale_schema, yamale_data):\\n            if not result.isValid():\\n                raise ValueError(result)\\n        return True\\n\\n'"}, "return_value": "'import glob\\nimport os\\nimport itertools\\n\\nfrom unittest import TestCase\\n\\nimport yamale\\n\\n\\nclass YamaleTestCase(TestCase):\\n    \"\"\" TestCase for easily validating YAML in your own tests.\\n    `schema`: String of path to the schema file to use. One schema file per test case.\\n    `yaml`: String or list of yaml files to validate. Accepts globs.\\n    `base_dir`: String path to prepend to all other paths. This is optional.\\n    \"\"\"\\n\\n    schema = None\\n    yaml = None\\n    base_dir = None\\n\\n    def validate(self, validators=None):\\n        schema = self.schema\\n        yaml = self.yaml\\n        base_dir = self.base_dir\\n\\n        if schema is None:\\n            return\\n\\n        if type(yaml) != list:\\n            yaml = [yaml]\\n\\n        if base_dir is not None:\\n            schema = os.path.join(base_dir, schema)\\n            yaml = {os.path.join(base_dir, y) for y in yaml}\\n\\n        # Run yaml through glob and flatten list\\n        yaml = set(itertools.chain(*map(glob.glob, yaml)))\\n\\n        # Remove schema from set of data files\\n        yaml = yaml - {schema}\\n\\n        yamale_schema = yamale.make_schema(schema, validators=validators)\\n        yamale_data = itertools.chain(*map(yamale.make_data, yaml))\\n\\n        for result in yamale.validate(yamale_schema, yamale_data):\\n            if not result.isValid():\\n                raise ValueError(result)\\n        return True\\n\\n'"}]}}