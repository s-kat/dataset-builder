{"_args_converter": {"line": 816, "args": [{"func_args": {"args": "['--cov', '-v', '--tb=native']"}, "return_value": "('--cov', '-v', '--tb=native')"}], "text": "def _args_converter(args: Iterable[str]) -> Tuple[str, ...]:\n    return tuple(args)"}, "_get_plugin_specs_as_list": {"line": 715, "args": [{"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "None"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}], "text": "def _get_plugin_specs_as_list(\n    specs: Union[None, types.ModuleType, str, Sequence[str]]\n) -> List[str]:\n    \"\"\"Parse a plugins specification into a list of plugin names.\"\"\"\n    # None means empty.\n    if specs is None:\n        return []\n    # Workaround for #3899 - a submodule which happens to be called \"pytest_plugins\".\n    if isinstance(specs, types.ModuleType):\n        return []\n    # Comma-separated list.\n    if isinstance(specs, str):\n        return specs.split(\",\") if specs else []\n    # Direct specification.\n    if isinstance(specs, collections.abc.Sequence):\n        return list(specs)\n    raise UsageError(\n        \"Plugins may be specified as a sequence or a ','-separated string of plugin names. Got: %r\"\n        % specs\n    )"}, "_assertion_supported": {"line": 1511, "args": [{"func_args": {}, "return_value": "True"}], "text": "def _assertion_supported() -> bool:\n    try:\n        assert False\n    except AssertionError:\n        return True\n    else:\n        return False"}, "get_terminal_width": {"line": 15, "args": [{"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}], "text": "def get_terminal_width() -> int:\n    width, _ = shutil.get_terminal_size(fallback=(80, 24))\n\n    # The Windows get_terminal_size may be bogus, let's sanify a bit.\n    if width < 40:\n        width = 80\n\n    return width"}, "is_option": {"line": 135, "args": [{"func_args": {"x": "'--cov'"}, "return_value": "True"}], "text": "def is_option(x: str) -> bool:\n        return x.startswith(\"-\")"}, "get_dirs_from_args": {"line": 134, "args": [{"func_args": {"args": "['--cov']"}, "return_value": "[]"}], "text": "def get_dirs_from_args(args: Iterable[str]) -> List[Path]:\n    def is_option(x: str) -> bool:\n        return x.startswith(\"-\")\n\n    def get_file_part_from_node_id(x: str) -> str:\n        return x.split(\"::\")[0]\n\n    def get_dir_from_path(path: Path) -> Path:\n        if path.is_dir():\n            return path\n        return path.parent\n\n    def safe_exists(path: Path) -> bool:\n        # This can throw on paths that contain characters unrepresentable at the OS level,\n        # or with invalid syntax on Windows (https://bugs.python.org/issue35306)\n        try:\n            return path.exists()\n        except OSError:\n            return False\n\n    # These look like paths but may not exist\n    possible_paths = (\n        absolutepath(get_file_part_from_node_id(arg))\n        for arg in args\n        if not is_option(arg)\n    )\n\n    return [get_dir_from_path(path) for path in possible_paths if safe_exists(path)]"}, "_is_same": {"line": 565, "args": [{"func_args": {"f1": "'/usr/app/src/test_repos/django-phone-verify/conftest.py'", "f2": "'/usr/app/src/test_repos/django-phone-verify/conftest.py'"}, "return_value": "True"}], "text": "def _is_same(f1: str, f2: str) -> bool:\n        return os.path.samefile(f1, f2)"}, "iscommentline": {"line": 162, "args": [{"func_args": {"line": "'[tox]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'distribute = False\\n'"}, "return_value": "False"}, {"func_args": {"line": "'envlist = \\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tpy{36,37,38,39}-django{20,21,22,30,31,32}\\n'"}, "return_value": "False"}, {"func_args": {"line": "'skip_missing_interpreters = True\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}, {"func_args": {"line": "'[travis]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'python = \\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\t3.6: py36\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\t3.7: py37\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\t3.8: py38\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\t3.9: py39\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}, {"func_args": {"line": "'[testenv]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'usedevelop = True\\n'"}, "return_value": "False"}, {"func_args": {"line": "'deps = \\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\t-r requirements/testing.txt\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tdjango20: Django>=2.0,<2.1\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tdjango21: Django>=2.1,<2.2\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tdjango22: Django>=2.2,<3.0\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tdjango30: Django>=3.0,<3.1\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tdjango31: Django>=3.1,<3.1.13\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tdjango32: Django>=3.2,<3.2.5\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tviztracer \\n'"}, "return_value": "False"}, {"func_args": {"line": "'commands = \\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tviztracer --ignore_frozen --log_func_args --log_func_retval -o result0.json -- pytest --cov -v --tb=native\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}, {"func_args": {"line": "'[flake8]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'max-line-length = 120\\n'"}, "return_value": "False"}, {"func_args": {"line": "'exclude = .tox,.git,*/migrations/*,*/static/*,docs,venv,.venv\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}, {"func_args": {"line": "'[coverage:run]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'source = phone_verify/\\n'"}, "return_value": "False"}, {"func_args": {"line": "'omit =\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\t*tests*\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\t*commands*\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\t*migrations*\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\t*admin*\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\t*wsgi*\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\t*conftest*\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}, {"func_args": {"line": "'[coverage:report]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'show_missing = True\\n'"}, "return_value": "False"}, {"func_args": {"line": "'skip_covered = True\\n'"}, "return_value": "False"}], "text": "def iscommentline(line):\n    c = line.lstrip()[:1]\n    return c in COMMENTCHARS"}, "_get_boolean_value": {"line": 228, "args": [{"func_args": {"x": "True", "name": "'django_find_project'", "default": "None"}, "return_value": "True"}, {"func_args": {"x": "None", "name": "'FAIL_INVALID_TEMPLATE_VARS'", "default": "None"}, "return_value": "None"}], "text": "def _get_boolean_value(x, name, default=None):\n    if x is None:\n        return default\n    if x in (True, False):\n        return x\n    possible_values = {\"true\": True, \"false\": False, \"1\": True, \"0\": False}\n    try:\n        return possible_values[x.lower()]\n    except KeyError:\n        raise ValueError(\n            \"{} is not a valid value for {}. \"\n            \"It must be one of {}.\".format(x, name, \", \".join(possible_values.keys()))\n        )"}, "_add_django_project_to_path": {"line": 173, "args": [{"func_args": {"args": "['--cov', '-v', '--tb=native']"}, "return_value": "'pytest-django could not find a Django project (no manage.py file could be found). You must explicitly add your Django project to the Python path to have it picked up.'"}], "text": "def _add_django_project_to_path(args):\n    def is_django_project(path):\n        try:\n            return path.is_dir() and (path / \"manage.py\").exists()\n        except OSError:\n            return False\n\n    def arg_to_path(arg):\n        # Test classes or functions can be appended to paths separated by ::\n        arg = arg.split(\"::\", 1)[0]\n        return pathlib.Path(arg)\n\n    def find_django_path(args):\n        args = map(str, args)\n        args = [arg_to_path(x) for x in args if not x.startswith(\"-\")]\n\n        cwd = pathlib.Path.cwd()\n        if not args:\n            args.append(cwd)\n        elif cwd not in args:\n            args.append(cwd)\n\n        for arg in args:\n            if is_django_project(arg):\n                return arg\n            for parent in arg.parents:\n                if is_django_project(parent):\n                    return parent\n        return None\n\n    project_dir = find_django_path(args)\n    if project_dir:\n        sys.path.insert(0, str(project_dir.absolute()))\n        return PROJECT_FOUND % project_dir\n    return PROJECT_NOT_FOUND"}, "_get_option_with_source": {"line": 288, "args": [{"func_args": {"option": "None", "envname": "'DJANGO_SETTINGS_MODULE'"}, "return_value": "(None, None)"}, {"func_args": {"option": "None", "envname": "'DJANGO_CONFIGURATION'"}, "return_value": "(None, None)"}], "text": "def _get_option_with_source(option, envname):\n        if option:\n            return option, \"option\"\n        if envname in os.environ:\n            return os.environ[envname], \"env\"\n        cfgval = early_config.getini(envname)\n        if cfgval:\n            return cfgval, \"ini\"\n        return None, None"}, "bool_or_none": {"line": 174, "args": [{"func_args": {"b": "True"}, "return_value": "True"}, {"func_args": {"b": "True"}, "return_value": "True"}], "text": "def bool_or_none(b):\n    \"\"\"Return bool(b), but preserve None.\"\"\"\n    if b is None:\n        return None\n    else:\n        return bool(b)"}, "tryint": {"line": 370, "args": [{"func_args": {"s": "'/usr/app/src/test_repos/django-phone-verify/phone_verify'"}, "return_value": "'/usr/app/src/test_repos/django-phone-verify/phone_verify'"}, {"func_args": {"s": "'/usr/app/src/test_repos/django-phone-verify/.tox/py'"}, "return_value": "'/usr/app/src/test_repos/django-phone-verify/.tox/py'"}, {"func_args": {"s": "'38'"}, "return_value": "38"}, {"func_args": {"s": "'/lib/python'"}, "return_value": "'/lib/python'"}, {"func_args": {"s": "'3'"}, "return_value": "3"}, {"func_args": {"s": "'.'"}, "return_value": "'.'"}, {"func_args": {"s": "'8'"}, "return_value": "8"}, {"func_args": {"s": "'/site-packages/coverage'"}, "return_value": "'/site-packages/coverage'"}, {"func_args": {"s": "'/root/.local/bin'"}, "return_value": "'/root/.local/bin'"}, {"func_args": {"s": "'/usr/app/src/test_repos/django-phone-verify/.tox/py'"}, "return_value": "'/usr/app/src/test_repos/django-phone-verify/.tox/py'"}, {"func_args": {"s": "'38'"}, "return_value": "38"}, {"func_args": {"s": "'/lib/python'"}, "return_value": "'/lib/python'"}, {"func_args": {"s": "'3'"}, "return_value": "3"}, {"func_args": {"s": "'.'"}, "return_value": "'.'"}, {"func_args": {"s": "'8'"}, "return_value": "8"}, {"func_args": {"s": "'/site-packages'"}, "return_value": "'/site-packages'"}, {"func_args": {"s": "'/usr/app/src/test_repos/django-phone-verify/.tox/py'"}, "return_value": "'/usr/app/src/test_repos/django-phone-verify/.tox/py'"}, {"func_args": {"s": "'38'"}, "return_value": "38"}, {"func_args": {"s": "'/lib/python'"}, "return_value": "'/lib/python'"}, {"func_args": {"s": "'/usr/app/src/test_repos/django-phone-verify/.tox/py'"}, "return_value": "'/usr/app/src/test_repos/django-phone-verify/.tox/py'"}, {"func_args": {"s": "'38'"}, "return_value": "38"}, {"func_args": {"s": "'/bin'"}, "return_value": "'/bin'"}, {"func_args": {"s": "'/root/.local/lib/python'"}, "return_value": "'/root/.local/lib/python'"}, {"func_args": {"s": "'3'"}, "return_value": "3"}, {"func_args": {"s": "'.'"}, "return_value": "'.'"}, {"func_args": {"s": "'8'"}, "return_value": "8"}, {"func_args": {"s": "'/site-packages'"}, "return_value": "'/site-packages'"}], "text": "def tryint(s):\n        \"\"\"If `s` is a number, return an int, else `s` unchanged.\"\"\"\n        try:\n            return int(s)\n        except ValueError:\n            return s"}, "human_key": {"line": 366, "args": [{"func_args": {"s": "'/usr/app/src/test_repos/django-phone-verify/phone_verify'"}, "return_value": "['/usr/app/src/test_repos/django-phone-verify/phone_verify']"}, {"func_args": {"s": "'/usr/app/src/test_repos/django-phone-verify/.tox/py38/lib/python3.8/site-packages/coverage'"}, "return_value": "['/usr/app/src/test_repos/django-phone-verify/.tox/py', 38, '/lib/python', 3, '.', 8, '/site-packages/coverage']"}, {"func_args": {"s": "'/root/.local/bin'"}, "return_value": "['/root/.local/bin']"}, {"func_args": {"s": "'/usr/app/src/test_repos/django-phone-verify/.tox/py38/lib/python3.8/site-packages'"}, "return_value": "['/usr/app/src/test_repos/django-phone-verify/.tox/py', 38, '/lib/python', 3, '.', 8, '/site-packages']"}, {"func_args": {"s": "'/usr/app/src/test_repos/django-phone-verify/.tox/py38/lib/python'"}, "return_value": "['/usr/app/src/test_repos/django-phone-verify/.tox/py', 38, '/lib/python']"}, {"func_args": {"s": "'/usr/app/src/test_repos/django-phone-verify/.tox/py38/bin'"}, "return_value": "['/usr/app/src/test_repos/django-phone-verify/.tox/py', 38, '/bin']"}, {"func_args": {"s": "'/root/.local/lib/python3.8/site-packages'"}, "return_value": "['/root/.local/lib/python', 3, '.', 8, '/site-packages']"}], "text": "def human_key(s):\n    \"\"\"Turn a string into a list of string and number chunks.\n        \"z23a\" -> [\"z\", 23, \"a\"]\n    \"\"\"\n    def tryint(s):\n        \"\"\"If `s` is a number, return an int, else `s` unchanged.\"\"\"\n        try:\n            return int(s)\n        except ValueError:\n            return s\n\n    return [tryint(c) for c in re.split(r\"(\\d+)\", s)]"}, "human_sorted": {"line": 379, "args": [{"func_args": {"strings": "['/usr/app/src/test_repos/django-phone-verify/phone_verify']"}, "return_value": "['/usr/app/src/test_repos/django-phone-verify/phone_verify']"}, {"func_args": {"strings": "{'/usr/app/src/test_repos/django-phone-verify/.tox/py38/lib/python3.8/site-packages/coverage'}"}, "return_value": "['/usr/app/src/test_repos/django-phone-verify/.tox/py38/lib/python3.8/site-packages/coverage']"}, {"func_args": {"strings": "{'/root/.local/bin', '/usr/app/src/test_repos/django-phone-verify/.tox/py38/lib/python3.8/site-packages', '/usr/app/src/test_repos/django-phone-verify/.tox/py38/lib/python', '/usr/app/src/test_repos/django-phone-verify/.tox/py38/bin', '/root/.local/lib/python3.8/site-packages'}"}, "return_value": "['/root/.local/bin', '/root/.local/lib/python3.8/site-packages', '/usr/app/src/test_repos/django-phone-verify/.tox/py38/bin', '/usr/app/src/test_repos/django-phone-verify/.tox/py38/lib/python', '/usr/app/src/test_repos/django-phone-verify/.tox/py38/lib/python3.8/site-packages']"}], "text": "def human_sorted(strings):\n    \"\"\"Sort the given iterable of strings the way that humans expect.\n\n    Numeric components in the strings are sorted as numbers.\n\n    Returns the sorted list.\n\n    \"\"\"\n    return sorted(strings, key=human_key)"}, "config_files_to_try": {"line": 492, "args": [{"func_args": {"config_file": "'.coveragerc'"}, "return_value": "[('.coveragerc', True, False), ('setup.cfg', False, False), ('tox.ini', False, False), ('pyproject.toml', False, False)]"}, {"func_args": {"config_file": "'.coveragerc'"}, "return_value": "[('.coveragerc', True, False), ('setup.cfg', False, False), ('tox.ini', False, False), ('pyproject.toml', False, False)]"}], "text": "def config_files_to_try(config_file):\n    \"\"\"What config files should we try to read?\n\n    Returns a list of tuples:\n        (filename, is_our_file, was_file_specified)\n    \"\"\"\n\n    # Some API users were specifying \".coveragerc\" to mean the same as\n    # True, so make it so.\n    if config_file == \".coveragerc\":\n        config_file = True\n    specified_file = (config_file is not True)\n    if not specified_file:\n        # No file was specified. Check COVERAGE_RCFILE.\n        config_file = os.environ.get('COVERAGE_RCFILE')\n        if config_file:\n            specified_file = True\n    if not specified_file:\n        # Still no file specified. Default to .coveragerc\n        config_file = \".coveragerc\"\n    files_to_try = [\n        (config_file, True, specified_file),\n        (\"setup.cfg\", False, False),\n        (\"tox.ini\", False, False),\n        (\"pyproject.toml\", False, False),\n    ]\n    return files_to_try"}, "short_stack": {"line": 136, "args": [{"func_args": {"limit": "None", "skip": "0"}, "return_value": "'                      <module> : /usr/app/src/test_repos/django-phone-verify/.tox/py38/bin/viztracer:8\\n                          main : /usr/app/src/test_repos/django-phone-verify/.tox/py38/lib/python3.8/site-packages/viztracer/main.py:523\\n                           run : /usr/app/src/test_repos/django-phone-verify/.tox/py38/lib/python3.8/site-packages/viztracer/main.py:332\\n                   run_command : /usr/app/src/test_repos/django-phone-verify/.tox/py38/lib/python3.8/site-packages/viztracer/main.py:438\\n                      run_code : /usr/app/src/test_repos/django-phone-verify/.tox/py38/lib/python3.8/site-packages/viztracer/main.py:355\\n                      <module> : /usr/app/src/test_repos/django-phone-verify/.tox/py38/bin/pytest:8\\n                  console_main : /usr/app/src/test_repos/django-phone-verify/.tox/py38/lib/python3.8/site-packages/_pytest/config/__init__.py:185\\n                          main : /usr/app/src/test_repos/django-phone-verify/.tox/py38/lib/python3.8/site-packages/_pytest/config/__init__.py:143\\n                _prepareconfig : /usr/app/src/test_repos/django-phone-verify/.tox/py38/lib/python3.8/site-packages/_pytest/config/__init__.py:318\\n                      __call__ : /usr/app/src/test_repos/django-phone-verify/.tox/py38/lib/python3.8/site-packages/pluggy/hooks.py:286\\n                     _hookexec : /usr/app/src/test_repos/django-phone-verify/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:93\\n                      <lambda> : /usr/app/src/test_repos/django-phone-verify/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:84\\n                    _multicall : /usr/app/src/test_repos/django-phone-verify/.tox/py38/lib/python3.8/site-packages/pluggy/callers.py:187\\n          pytest_cmdline_parse : /usr/app/src/test_repos/django-phone-verify/.tox/py38/lib/python3.8/site-packages/_pytest/config/__init__.py:1003\\n                         parse : /usr/app/src/test_repos/django-phone-verify/.tox/py38/lib/python3.8/site-packages/_pytest/config/__init__.py:1283\\n                     _preparse : /usr/app/src/test_repos/django-phone-verify/.tox/py38/lib/python3.8/site-packages/_pytest/config/__init__.py:1191\\n                      __call__ : /usr/app/src/test_repos/django-phone-verify/.tox/py38/lib/python3.8/site-packages/pluggy/hooks.py:286\\n                     _hookexec : /usr/app/src/test_repos/django-phone-verify/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:93\\n                      <lambda> : /usr/app/src/test_repos/django-phone-verify/.tox/py38/lib/python3.8/site-packages/pluggy/manager.py:84\\n                    _multicall : /usr/app/src/test_repos/django-phone-verify/.tox/py38/lib/python3.8/site-packages/pluggy/callers.py:187\\n pytest_load_initial_conftests : /usr/app/src/test_repos/django-phone-verify/.tox/py38/lib/python3.8/site-packages/pytest_cov/plugin.py:126\\n                      __init__ : /usr/app/src/test_repos/django-phone-verify/.tox/py38/lib/python3.8/site-packages/pytest_cov/plugin.py:177\\n                         start : /usr/app/src/test_repos/django-phone-verify/.tox/py38/lib/python3.8/site-packages/pytest_cov/plugin.py:199\\n         ensure_topdir_wrapper : /usr/app/src/test_repos/django-phone-verify/.tox/py38/lib/python3.8/site-packages/pytest_cov/engine.py:44\\n                         start : /usr/app/src/test_repos/django-phone-verify/.tox/py38/lib/python3.8/site-packages/pytest_cov/engine.py:222\\n                         start : /usr/app/src/test_repos/django-phone-verify/.tox/py38/lib/python3.8/site-packages/coverage/control.py:558\\n               _init_for_start : /usr/app/src/test_repos/django-phone-verify/.tox/py38/lib/python3.8/site-packages/coverage/control.py:473\\n                      __init__ : /usr/app/src/test_repos/django-phone-verify/.tox/py38/lib/python3.8/site-packages/coverage/collector.py:114'"}], "text": "def short_stack(limit=None, skip=0):\n    \"\"\"Return a string summarizing the call stack.\n\n    The string is multi-line, with one line per stack frame. Each line shows\n    the function name, the file name, and the line number:\n\n        ...\n        start_import_stop : /Users/ned/coverage/trunk/tests/coveragetest.py @95\n        import_local_file : /Users/ned/coverage/trunk/tests/coveragetest.py @81\n        import_local_file : /Users/ned/coverage/trunk/coverage/backward.py @159\n        ...\n\n    `limit` is the number of frames to include, defaulting to all of them.\n\n    `skip` is the number of frames to skip, so that debugging functions can\n    call this and not be included in the result.\n\n    \"\"\"\n    stack = inspect.stack()[limit:skip:-1]\n    return \"\\n\".join(\"%30s : %s:%d\" % (t[3], t[1], t[2]) for t in stack)"}, "actual_path": {"line": 139, "args": [{"func_args": {"path": "'/usr/app/src/test_repos/django-phone-verify'"}, "return_value": "'/usr/app/src/test_repos/django-phone-verify'"}, {"func_args": {"path": "'/usr/app/src/test_repos/django-phone-verify/phone_verify'"}, "return_value": "'/usr/app/src/test_repos/django-phone-verify/phone_verify'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/inspect.py'"}, "return_value": "'/usr/local/lib/python3.8/inspect.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/os.py'"}, "return_value": "'/usr/local/lib/python3.8/os.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/platform.py'"}, "return_value": "'/usr/local/lib/python3.8/platform.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/re.py'"}, "return_value": "'/usr/local/lib/python3.8/re.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/sysconfig.py'"}, "return_value": "'/usr/local/lib/python3.8/sysconfig.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/traceback.py'"}, "return_value": "'/usr/local/lib/python3.8/traceback.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/django-phone-verify/.tox/py38/lib/python3.8/site-packages/coverage/inorout.py'"}, "return_value": "'/usr/app/src/test_repos/django-phone-verify/.tox/py38/lib/python3.8/site-packages/coverage/inorout.py'"}], "text": "def actual_path(path):\n        \"\"\"The actual path for non-Windows platforms.\"\"\"\n        return path"}, "abs_file": {"line": 144, "args": [{"func_args": {"path": "'.'"}, "return_value": "'/usr/app/src/test_repos/django-phone-verify'"}, {"func_args": {"path": "'./phone_verify/'"}, "return_value": "'/usr/app/src/test_repos/django-phone-verify/phone_verify'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/inspect.py'"}, "return_value": "'/usr/local/lib/python3.8/inspect.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/os.py'"}, "return_value": "'/usr/local/lib/python3.8/os.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/platform.py'"}, "return_value": "'/usr/local/lib/python3.8/platform.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/re.py'"}, "return_value": "'/usr/local/lib/python3.8/re.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/sysconfig.py'"}, "return_value": "'/usr/local/lib/python3.8/sysconfig.py'"}, {"func_args": {"path": "'/usr/local/lib/python3.8/traceback.py'"}, "return_value": "'/usr/local/lib/python3.8/traceback.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/django-phone-verify/.tox/py38/lib/python3.8/site-packages/coverage/inorout.py'"}, "return_value": "'/usr/app/src/test_repos/django-phone-verify/.tox/py38/lib/python3.8/site-packages/coverage/inorout.py'"}]}, "canonical_filename": {"line": 53, "args": [{"func_args": {"filename": "'phone_verify/'"}, "return_value": "'/usr/app/src/test_repos/django-phone-verify/phone_verify'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/inspect.py'"}, "return_value": "'/usr/local/lib/python3.8/inspect.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/os.py'"}, "return_value": "'/usr/local/lib/python3.8/os.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/platform.py'"}, "return_value": "'/usr/local/lib/python3.8/platform.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/re.py'"}, "return_value": "'/usr/local/lib/python3.8/re.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/sysconfig.py'"}, "return_value": "'/usr/local/lib/python3.8/sysconfig.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/traceback.py'"}, "return_value": "'/usr/local/lib/python3.8/traceback.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/django-phone-verify/.tox/py38/lib/python3.8/site-packages/coverage/inorout.py'"}, "return_value": "'/usr/app/src/test_repos/django-phone-verify/.tox/py38/lib/python3.8/site-packages/coverage/inorout.py'"}]}, "prep_patterns": {"line": 173, "args": [{"func_args": {"patterns": "['*tests*', '*commands*', '*migrations*', '*admin*', '*wsgi*', '*conftest*']"}, "return_value": "['*tests*', '*commands*', '*migrations*', '*admin*', '*wsgi*', '*conftest*']"}, {"func_args": {"patterns": "None"}, "return_value": "[]"}], "text": "def prep_patterns(patterns):\n    \"\"\"Prepare the file patterns for use in a `FnmatchMatcher`.\n\n    If a pattern starts with a wildcard, it is used as a pattern\n    as-is.  If it does not start with a wildcard, then it is made\n    absolute with the current directory.\n\n    If `patterns` is None, an empty list is returned.\n\n    \"\"\"\n    prepped = []\n    for p in patterns or []:\n        if p.startswith((\"*\", \"?\")):\n            prepped.append(p)\n        else:\n            prepped.append(abs_file(p))\n    return prepped"}, "filename_suffix": {"line": 1006, "args": [{"func_args": {"suffix": "None"}, "return_value": "None"}, {"func_args": {"suffix": "True"}, "return_value": "'cae2a1e14906.76725.454322'"}], "text": "def filename_suffix(suffix):\n    \"\"\"Compute a filename suffix for a data file.\n\n    If `suffix` is a string or None, simply return it. If `suffix` is True,\n    then build a suffix incorporating the hostname, process id, and a random\n    number.\n\n    Returns a string or None.\n\n    \"\"\"\n    if suffix is True:\n        # If data_suffix was a simple true value, then make a suffix with\n        # plenty of distinguishing information.  We do this here in\n        # `save()` at the last minute so that the pid will be correct even\n        # if the process forks.\n        dice = random.Random(os.urandom(8)).randint(0, 999999)\n        suffix = \"%s.%s.%06d\" % (socket.gethostname(), os.getpid(), dice)\n    return suffix"}, "source_for_file": {"line": 97, "args": [{"func_args": {"filename": "'/usr/local/lib/python3.8/inspect.py'"}, "return_value": "'/usr/local/lib/python3.8/inspect.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/os.py'"}, "return_value": "'/usr/local/lib/python3.8/os.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/platform.py'"}, "return_value": "'/usr/local/lib/python3.8/platform.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/re.py'"}, "return_value": "'/usr/local/lib/python3.8/re.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/sysconfig.py'"}, "return_value": "'/usr/local/lib/python3.8/sysconfig.py'"}, {"func_args": {"filename": "'/usr/local/lib/python3.8/traceback.py'"}, "return_value": "'/usr/local/lib/python3.8/traceback.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/django-phone-verify/.tox/py38/lib/python3.8/site-packages/coverage/inorout.py'"}, "return_value": "'/usr/app/src/test_repos/django-phone-verify/.tox/py38/lib/python3.8/site-packages/coverage/inorout.py'"}], "text": "def source_for_file(filename):\n    \"\"\"Return the source filename for `filename`.\n\n    Given a file name being traced, return the best guess as to the source\n    file to attribute it to.\n\n    \"\"\"\n    if filename.endswith(\".py\"):\n        # .py files are themselves source files.\n        return filename\n\n    elif filename.endswith((\".pyc\", \".pyo\")):\n        # Bytecode files probably have source files near them.\n        py_filename = filename[:-1]\n        if os.path.exists(py_filename):\n            # Found a .py file, use that.\n            return py_filename\n        if env.WINDOWS:\n            # On Windows, it could be a .pyw file.\n            pyw_filename = py_filename + \"w\"\n            if os.path.exists(pyw_filename):\n                return pyw_filename\n        # Didn't find source, but it's probably the .py file we want.\n        return py_filename\n\n    elif filename.endswith(\"$py.class\"):\n        # Jython is easy to guess.\n        return filename[:-9] + \".py\"\n\n    # No idea, just use the file name as-is.\n    return filename"}, "supports_color": {"line": 19, "args": [{"func_args": {}, "return_value": "False"}, {"func_args": {}, "return_value": "False"}], "text": "def supports_color():\n    \"\"\"\n    Return True if the running system's terminal supports color,\n    and False otherwise.\n    \"\"\"\n    def vt_codes_enabled_in_windows_registry():\n        \"\"\"\n        Check the Windows Registry to see if VT code handling has been enabled\n        by default, see https://superuser.com/a/1300251/447564.\n        \"\"\"\n        try:\n            # winreg is only available on Windows.\n            import winreg\n        except ImportError:\n            return False\n        else:\n            reg_key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, 'Console')\n            try:\n                reg_key_value, _ = winreg.QueryValueEx(reg_key, 'VirtualTerminalLevel')\n            except FileNotFoundError:\n                return False\n            else:\n                return reg_key_value == 1\n\n    # isatty is not always implemented, #6223.\n    is_a_tty = hasattr(sys.stdout, 'isatty') and sys.stdout.isatty()\n\n    return is_a_tty and (\n        sys.platform != 'win32' or\n        HAS_COLORAMA or\n        'ANSICON' in os.environ or\n        # Windows Terminal supports VT codes.\n        'WT_SESSION' in os.environ or\n        # Microsoft Visual Studio Code's built-in terminal supports colors.\n        os.environ.get('TERM_PROGRAM') == 'vscode' or\n        vt_codes_enabled_in_windows_registry()\n    )"}}