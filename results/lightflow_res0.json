{"_args_converter": {"line": 816, "args": [{"func_args": {"args": "()"}, "return_value": "()"}], "text": "def _args_converter(args: Iterable[str]) -> Tuple[str, ...]:\n    return tuple(args)"}, "_get_plugin_specs_as_list": {"line": 715, "args": [{"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "None"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}], "text": "def _get_plugin_specs_as_list(\n    specs: Union[None, types.ModuleType, str, Sequence[str]]\n) -> List[str]:\n    \"\"\"Parse a plugins specification into a list of plugin names.\"\"\"\n    # None means empty.\n    if specs is None:\n        return []\n    # Workaround for #3899 - a submodule which happens to be called \"pytest_plugins\".\n    if isinstance(specs, types.ModuleType):\n        return []\n    # Comma-separated list.\n    if isinstance(specs, str):\n        return specs.split(\",\") if specs else []\n    # Direct specification.\n    if isinstance(specs, collections.abc.Sequence):\n        return list(specs)\n    raise UsageError(\n        \"Plugins may be specified as a sequence or a ','-separated string of plugin names. Got: %r\"\n        % specs\n    )"}, "_assertion_supported": {"line": 1511, "args": [{"func_args": {}, "return_value": "True"}], "text": "def _assertion_supported() -> bool:\n    try:\n        assert False\n    except AssertionError:\n        return True\n    else:\n        return False"}, "<lambda>": {"line": 1405, "args": [{"func_args": {"x": "'wip: Work in progress'"}, "return_value": "'wip: Work in progress'"}]}, "scope2index": {"line": 803, "args": [{"func_args": {"scope": "'session'", "descr": "\"Fixture 'pytestconfig'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'capfd'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'capfdbinary'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'capsys'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'capsysbinary'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'tmp_path'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'session'", "descr": "\"Fixture 'tmp_path_factory'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'tmpdir'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'session'", "descr": "\"Fixture 'tmpdir_factory'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'monkeypatch'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'recwarn'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'record_property'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'session'", "descr": "\"Fixture 'record_testsuite_property'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'record_xml_attribute'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'session'", "descr": "\"Fixture 'doctest_namespace'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'cache'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'caplog'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'cov'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'no_cover'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'context_mock'\"", "where": "'tests'"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'data_mock'\"", "where": "'tests'"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'signal_mock'\"", "where": "'tests'"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'store_mock'\"", "where": "'tests'"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'task'\"", "where": "'tests/test_base_task.py'"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "'parametrize() call in test_terminates_the_process_if_stopped_or_aborted'", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'get_direct_param_fixture_func'\"", "where": "''"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'add_workflow_path'\"", "where": "'tests/test_workflow.py'"}, "return_value": "4"}], "text": "def scope2index(scope: str, descr: str, where: Optional[str] = None) -> int:\n    \"\"\"Look up the index of ``scope`` and raise a descriptive value error\n    if not defined.\"\"\"\n    strscopes: Sequence[str] = scopes\n    try:\n        return strscopes.index(scope)\n    except ValueError:\n        fail(\n            \"{} {}got an unexpected scope value '{}'\".format(\n                descr, f\"from {where} \" if where else \"\", scope\n            ),\n            pytrace=False,\n        )"}, "sort_by_scope": {"line": 1539, "args": [{"func_args": {"arg_name": "'task'"}, "return_value": "4"}, {"func_args": {"arg_name": "'task'"}, "return_value": "4"}, {"func_args": {"arg_name": "'task'"}, "return_value": "4"}, {"func_args": {"arg_name": "'task'"}, "return_value": "4"}, {"func_args": {"arg_name": "'task'"}, "return_value": "4"}, {"func_args": {"arg_name": "'task'"}, "return_value": "4"}, {"func_args": {"arg_name": "'task'"}, "return_value": "4"}, {"func_args": {"arg_name": "'task'"}, "return_value": "4"}, {"func_args": {"arg_name": "'data_mock'"}, "return_value": "4"}, {"func_args": {"arg_name": "'store_mock'"}, "return_value": "4"}, {"func_args": {"arg_name": "'signal_mock'"}, "return_value": "4"}, {"func_args": {"arg_name": "'context_mock'"}, "return_value": "4"}, {"func_args": {"arg_name": "'data_mock'"}, "return_value": "4"}, {"func_args": {"arg_name": "'store_mock'"}, "return_value": "4"}, {"func_args": {"arg_name": "'signal_mock'"}, "return_value": "4"}, {"func_args": {"arg_name": "'context_mock'"}, "return_value": "4"}, {"func_args": {"arg_name": "'data_mock'"}, "return_value": "4"}, {"func_args": {"arg_name": "'store_mock'"}, "return_value": "4"}, {"func_args": {"arg_name": "'signal_mock'"}, "return_value": "4"}, {"func_args": {"arg_name": "'context_mock'"}, "return_value": "4"}, {"func_args": {"arg_name": "'data_mock'"}, "return_value": "4"}, {"func_args": {"arg_name": "'store_mock'"}, "return_value": "4"}, {"func_args": {"arg_name": "'signal_mock'"}, "return_value": "4"}, {"func_args": {"arg_name": "'context_mock'"}, "return_value": "4"}, {"func_args": {"arg_name": "'data_mock'"}, "return_value": "4"}, {"func_args": {"arg_name": "'store_mock'"}, "return_value": "4"}, {"func_args": {"arg_name": "'signal_mock'"}, "return_value": "4"}, {"func_args": {"arg_name": "'context_mock'"}, "return_value": "4"}, {"func_args": {"arg_name": "'data_mock'"}, "return_value": "4"}, {"func_args": {"arg_name": "'store_mock'"}, "return_value": "4"}, {"func_args": {"arg_name": "'signal_mock'"}, "return_value": "4"}, {"func_args": {"arg_name": "'context_mock'"}, "return_value": "4"}, {"func_args": {"arg_name": "'store_mock'"}, "return_value": "4"}, {"func_args": {"arg_name": "'signal_mock'"}, "return_value": "4"}, {"func_args": {"arg_name": "'context_mock'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmpdir'"}, "return_value": "4"}, {"func_args": {"arg_name": "'data_mock'"}, "return_value": "4"}, {"func_args": {"arg_name": "'store_mock'"}, "return_value": "4"}, {"func_args": {"arg_name": "'signal_mock'"}, "return_value": "4"}, {"func_args": {"arg_name": "'context_mock'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'request'"}, "return_value": "4"}, {"func_args": {"arg_name": "'tmp_path_factory'"}, "return_value": "0"}, {"func_args": {"arg_name": "'data_mock'"}, "return_value": "4"}, {"func_args": {"arg_name": "'store_mock'"}, "return_value": "4"}, {"func_args": {"arg_name": "'signal_mock'"}, "return_value": "4"}, {"func_args": {"arg_name": "'context_mock'"}, "return_value": "4"}, {"func_args": {"arg_name": "'data_mock'"}, "return_value": "4"}, {"func_args": {"arg_name": "'store_mock'"}, "return_value": "4"}, {"func_args": {"arg_name": "'signal_mock'"}, "return_value": "4"}, {"func_args": {"arg_name": "'context_mock'"}, "return_value": "4"}, {"func_args": {"arg_name": "'data_mock'"}, "return_value": "4"}, {"func_args": {"arg_name": "'store_mock'"}, "return_value": "4"}, {"func_args": {"arg_name": "'signal_mock'"}, "return_value": "4"}, {"func_args": {"arg_name": "'context_mock'"}, "return_value": "4"}, {"func_args": {"arg_name": "'data_mock'"}, "return_value": "4"}, {"func_args": {"arg_name": "'store_mock'"}, "return_value": "4"}, {"func_args": {"arg_name": "'signal_mock'"}, "return_value": "4"}, {"func_args": {"arg_name": "'context_mock'"}, "return_value": "4"}, {"func_args": {"arg_name": "'ExceptionType'"}, "return_value": "4"}, {"func_args": {"arg_name": "'data_mock'"}, "return_value": "4"}, {"func_args": {"arg_name": "'store_mock'"}, "return_value": "4"}, {"func_args": {"arg_name": "'signal_mock'"}, "return_value": "4"}, {"func_args": {"arg_name": "'context_mock'"}, "return_value": "4"}, {"func_args": {"arg_name": "'add_workflow_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'add_workflow_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'add_workflow_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'add_workflow_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'add_workflow_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'add_workflow_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'add_workflow_path'"}, "return_value": "4"}, {"func_args": {"arg_name": "'add_workflow_path'"}, "return_value": "4"}], "text": "def sort_by_scope(arg_name: str) -> int:\n            try:\n                fixturedefs = arg2fixturedefs[arg_name]\n            except KeyError:\n                return scopes.index(\"function\")\n            else:\n                return fixturedefs[-1].scopenum"}, "scopemismatch": {"line": 799, "args": [{"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'session'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}], "text": "def scopemismatch(currentscope: \"_Scope\", newscope: \"_Scope\") -> bool:\n    return scopes.index(newscope) > scopes.index(currentscope)"}, "pluralize": {"line": 1350, "args": [{"func_args": {"count": "33", "noun": "'passed'"}, "return_value": "(33, 'passed')"}, {"func_args": {"count": "5", "noun": "'warnings'"}, "return_value": "(5, 'warnings')"}], "text": "def pluralize(count: int, noun: str) -> Tuple[int, str]:\n    # No need to pluralize words such as `failed` or `passed`.\n    if noun not in [\"error\", \"warnings\", \"test\"]:\n        return count, noun\n\n    # The `warnings` key is plural. To avoid API breakage, we keep it that way but\n    # set it to singular here so we can determine plurality in the same way as we do\n    # for `error`.\n    noun = noun.replace(\"warnings\", \"warning\")\n\n    return count, noun + \"s\" if count != 1 else noun"}, "format_session_duration": {"line": 1377, "args": [{"func_args": {"seconds": "2.8610823154449463"}, "return_value": "'2.86s'"}], "text": "def format_session_duration(seconds: float) -> str:\n    \"\"\"Format the given seconds in a human readable manner to show in the final summary.\"\"\"\n    if seconds < 60:\n        return f\"{seconds:.2f}s\"\n    else:\n        dt = datetime.timedelta(seconds=int(seconds))\n        return f\"{seconds:.2f}s ({dt})\""}, "_get_auto_indent": {"line": 113, "args": [{"func_args": {"auto_indent_option": "None"}, "return_value": "0"}, {"func_args": {"auto_indent_option": "None"}, "return_value": "0"}]}, "_get_stderr_fileno": {"line": 68, "args": [{"func_args": {}, "return_value": "2"}, {"func_args": {}, "return_value": "2"}]}, "get_terminal_width": {"line": 15, "args": [{"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}], "text": "def get_terminal_width() -> int:\n    width, _ = shutil.get_terminal_size(fallback=(80, 24))\n\n    # The Windows get_terminal_size may be bogus, let's sanify a bit.\n    if width < 40:\n        width = 80\n\n    return width"}, "get_dirs_from_args": {"line": 134, "args": [{"func_args": {"args": "[]"}, "return_value": "[]"}], "text": "def get_dirs_from_args(args: Iterable[str]) -> List[Path]:\n    def is_option(x: str) -> bool:\n        return x.startswith(\"-\")\n\n    def get_file_part_from_node_id(x: str) -> str:\n        return x.split(\"::\")[0]\n\n    def get_dir_from_path(path: Path) -> Path:\n        if path.is_dir():\n            return path\n        return path.parent\n\n    def safe_exists(path: Path) -> bool:\n        # This can throw on paths that contain characters unrepresentable at the OS level,\n        # or with invalid syntax on Windows (https://bugs.python.org/issue35306)\n        try:\n            return path.exists()\n        except OSError:\n            return False\n\n    # These look like paths but may not exist\n    possible_paths = (\n        absolutepath(get_file_part_from_node_id(arg))\n        for arg in args\n        if not is_option(arg)\n    )\n\n    return [get_dir_from_path(path) for path in possible_paths if safe_exists(path)]"}, "_is_same": {"line": 558, "args": [{"func_args": {"f1": "'/usr/app/src/test_repos/lightflow/tests/conftest.py'", "f2": "'/usr/app/src/test_repos/lightflow/tests/conftest.py'"}, "return_value": "True"}, {"func_args": {"f1": "'/usr/app/src/test_repos/lightflow/tests/test_base_task.py'", "f2": "'/usr/app/src/test_repos/lightflow/tests/test_base_task.py'"}, "return_value": "True"}, {"func_args": {"f1": "'/usr/app/src/test_repos/lightflow/tests/test_bash_task.py'", "f2": "'/usr/app/src/test_repos/lightflow/tests/test_bash_task.py'"}, "return_value": "True"}, {"func_args": {"f1": "'/usr/app/src/test_repos/lightflow/tests/test_exceptions.py'", "f2": "'/usr/app/src/test_repos/lightflow/tests/test_exceptions.py'"}, "return_value": "True"}, {"func_args": {"f1": "'/usr/app/src/test_repos/lightflow/tests/test_task_data.py'", "f2": "'/usr/app/src/test_repos/lightflow/tests/test_task_data.py'"}, "return_value": "True"}, {"func_args": {"f1": "'/usr/app/src/test_repos/lightflow/tests/test_workflow.py'", "f2": "'/usr/app/src/test_repos/lightflow/tests/test_workflow.py'"}, "return_value": "True"}, {"func_args": {"f1": "'/usr/app/src/test_repos/lightflow/tests/test_workflows.py'", "f2": "'/usr/app/src/test_repos/lightflow/tests/test_workflows.py'"}, "return_value": "True"}], "text": "def _is_same(f1: str, f2: str) -> bool:\n        return os.path.samefile(f1, f2)"}, "parts": {"line": 420, "args": [{"func_args": {"s": "'/usr/app/src/test_repos/lightflow/examples/abort.py'"}, "return_value": "{'/usr/app/src/test_repos/lightflow/examples', '/usr/app/src/test_repos/lightflow/examples/abort.py', '/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/examples/bash.py'"}, "return_value": "{'/usr/app/src/test_repos/lightflow/examples', '/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app', '/usr/app/src/test_repos/lightflow/examples/bash.py'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/examples/branching.py'"}, "return_value": "{'/usr/app/src/test_repos/lightflow/examples', '/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app', '/usr/app/src/test_repos/lightflow/examples/branching.py'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/examples/chunking_dag.py'"}, "return_value": "{'/usr/app/src/test_repos/lightflow/examples', '/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app', '/usr/app/src/test_repos/lightflow/examples/chunking_dag.py'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/examples/data_store.py'"}, "return_value": "{'/usr/app/src/test_repos/lightflow/examples', '/', '/usr', '/usr/app/src/test_repos/lightflow/examples/data_store.py', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/examples/decision.py'"}, "return_value": "{'/usr/app/src/test_repos/lightflow/examples', '/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app', '/usr/app/src/test_repos/lightflow/examples/decision.py'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/examples/multi_data.py'"}, "return_value": "{'/usr/app/src/test_repos/lightflow/examples', '/', '/usr', '/usr/app/src/test_repos/lightflow/examples/multi_data.py', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/examples/parallel.py'"}, "return_value": "{'/usr/app/src/test_repos/lightflow/examples/parallel.py', '/usr/app/src/test_repos/lightflow/examples', '/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/examples/parameters.py'"}, "return_value": "{'/usr/app/src/test_repos/lightflow/examples', '/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app', '/usr/app/src/test_repos/lightflow/examples/parameters.py'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/examples/queues.py'"}, "return_value": "{'/usr/app/src/test_repos/lightflow/examples', '/usr/app/src/test_repos/lightflow/examples/queues.py', '/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/examples/sequence.py'"}, "return_value": "{'/usr/app/src/test_repos/lightflow/examples', '/', '/usr', '/usr/app/src/test_repos/lightflow/examples/sequence.py', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/examples/simple.py'"}, "return_value": "{'/usr/app/src/test_repos/lightflow/examples/simple.py', '/usr/app/src/test_repos/lightflow/examples', '/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/examples/stop.py'"}, "return_value": "{'/usr/app/src/test_repos/lightflow/examples/stop.py', '/usr/app/src/test_repos/lightflow/examples', '/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/examples/sub_dag.py'"}, "return_value": "{'/usr/app/src/test_repos/lightflow/examples', '/usr/app/src/test_repos/lightflow/examples/sub_dag.py', '/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/examples/timing.py'"}, "return_value": "{'/usr/app/src/test_repos/lightflow/examples', '/', '/usr', '/usr/app/src/test_repos/lightflow/examples/timing.py', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/__pycache__'"}, "return_value": "{'/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow', '/usr/app/src/test_repos/lightflow/lightflow/__pycache__'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/config.py'"}, "return_value": "{'/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow', '/usr/app/src/test_repos/lightflow/lightflow/config.py'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/logger.py'"}, "return_value": "{'/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow', '/usr/app/src/test_repos/lightflow/lightflow/logger.py'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/models'"}, "return_value": "{'/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/lightflow/lightflow/models', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/queue'"}, "return_value": "{'/usr/app/src/test_repos/lightflow/lightflow/queue', '/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/scripts'"}, "return_value": "{'/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow', '/usr/app/src/test_repos/lightflow/lightflow/scripts'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/tasks'"}, "return_value": "{'/usr/app/src/test_repos/lightflow/lightflow/tasks', '/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/version.py'"}, "return_value": "{'/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src/test_repos/lightflow/lightflow/version.py', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/workers.py'"}, "return_value": "{'/usr/app/src/test_repos/lightflow/lightflow/workers.py', '/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/workflows.py'"}, "return_value": "{'/usr/app/src/test_repos/lightflow/lightflow/workflows.py', '/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/models/__init__.py'"}, "return_value": "{'/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/lightflow/lightflow/models', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow', '/usr/app/src/test_repos/lightflow/lightflow/models/__init__.py'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/models/__pycache__'"}, "return_value": "{'/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/lightflow/lightflow/models', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow', '/usr/app/src/test_repos/lightflow/lightflow/models/__pycache__'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/models/action.py'"}, "return_value": "{'/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/lightflow/lightflow/models', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow', '/usr/app/src/test_repos/lightflow/lightflow/models/action.py'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/models/dag.py'"}, "return_value": "{'/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/lightflow/lightflow/models', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow', '/usr/app/src/test_repos/lightflow/lightflow/models/dag.py'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/models/dag_signal.py'"}, "return_value": "{'/usr/app/src/test_repos/lightflow/lightflow/models/dag_signal.py', '/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/lightflow/lightflow/models', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/models/datastore.py'"}, "return_value": "{'/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src/test_repos/lightflow/lightflow/models/datastore.py', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/lightflow/lightflow/models', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/models/exceptions.py'"}, "return_value": "{'/usr/app/src/test_repos/lightflow/lightflow/models/exceptions.py', '/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/lightflow/lightflow/models', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/models/mongo_proxy.py'"}, "return_value": "{'/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/lightflow/lightflow/models', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow', '/usr/app/src/test_repos/lightflow/lightflow/models/mongo_proxy.py'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/models/parameters.py'"}, "return_value": "{'/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/lightflow/lightflow/models', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow', '/usr/app/src/test_repos/lightflow/lightflow/models/parameters.py'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/models/signal.py'"}, "return_value": "{'/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/lightflow/lightflow/models', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow', '/usr/app/src/test_repos/lightflow/lightflow/models/signal.py'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/models/task.py'"}, "return_value": "{'/', '/usr', '/usr/app/src/test_repos/lightflow/lightflow/models/task.py', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/lightflow/lightflow/models', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/models/task_context.py'"}, "return_value": "{'/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/lightflow/lightflow/models', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow', '/usr/app/src/test_repos/lightflow/lightflow/models/task_context.py'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/models/task_data.py'"}, "return_value": "{'/', '/usr', '/usr/app/src/test_repos/lightflow/lightflow/models/task_data.py', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/lightflow/lightflow/models', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/models/task_parameters.py'"}, "return_value": "{'/', '/usr', '/usr/app/src/test_repos/lightflow/lightflow/models/task_parameters.py', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/lightflow/lightflow/models', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/models/task_signal.py'"}, "return_value": "{'/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/lightflow/lightflow/models', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow', '/usr/app/src/test_repos/lightflow/lightflow/models/task_signal.py'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/models/utils.py'"}, "return_value": "{'/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/lightflow/lightflow/models', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow', '/usr/app/src/test_repos/lightflow/lightflow/models/utils.py'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/models/workflow.py'"}, "return_value": "{'/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/lightflow/lightflow/models', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow', '/usr/app/src/test_repos/lightflow/lightflow/models/workflow.py'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/queue/__init__.py'"}, "return_value": "{'/usr/app/src/test_repos/lightflow/lightflow/queue', '/', '/usr', '/usr/app/src/test_repos/lightflow/lightflow/queue/__init__.py', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/queue/__pycache__'"}, "return_value": "{'/usr/app/src/test_repos/lightflow/lightflow/queue', '/', '/usr', '/usr/app/src/test_repos/lightflow/lightflow/queue/__pycache__', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/queue/app.py'"}, "return_value": "{'/usr/app/src/test_repos/lightflow/lightflow/queue', '/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow', '/usr/app/src/test_repos/lightflow/lightflow/queue/app.py'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/queue/const.py'"}, "return_value": "{'/usr/app/src/test_repos/lightflow/lightflow/queue/const.py', '/usr/app/src/test_repos/lightflow/lightflow/queue', '/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/queue/event.py'"}, "return_value": "{'/usr/app/src/test_repos/lightflow/lightflow/queue/event.py', '/usr/app/src/test_repos/lightflow/lightflow/queue', '/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/queue/jobs.py'"}, "return_value": "{'/usr/app/src/test_repos/lightflow/lightflow/queue', '/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow', '/usr/app/src/test_repos/lightflow/lightflow/queue/jobs.py'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/queue/models.py'"}, "return_value": "{'/usr/app/src/test_repos/lightflow/lightflow/queue', '/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow', '/usr/app/src/test_repos/lightflow/lightflow/queue/models.py'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/queue/pickle.py'"}, "return_value": "{'/usr/app/src/test_repos/lightflow/lightflow/queue/pickle.py', '/usr/app/src/test_repos/lightflow/lightflow/queue', '/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/queue/worker.py'"}, "return_value": "{'/usr/app/src/test_repos/lightflow/lightflow/queue', '/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow', '/usr/app/src/test_repos/lightflow/lightflow/queue/worker.py'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/scripts/__init__.py'"}, "return_value": "{'/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src/test_repos/lightflow/lightflow/scripts/__init__.py', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow', '/usr/app/src/test_repos/lightflow/lightflow/scripts'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/scripts/cli.py'"}, "return_value": "{'/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src/test_repos/lightflow/lightflow/scripts/cli.py', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow', '/usr/app/src/test_repos/lightflow/lightflow/scripts'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/tasks/__init__.py'"}, "return_value": "{'/usr/app/src/test_repos/lightflow/lightflow/tasks/__init__.py', '/usr/app/src/test_repos/lightflow/lightflow/tasks', '/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/tasks/bash_task.py'"}, "return_value": "{'/usr/app/src/test_repos/lightflow/lightflow/tasks', '/', '/usr', '/usr/app/src/test_repos/lightflow/lightflow/tasks/bash_task.py', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/tasks/python_task.py'"}, "return_value": "{'/usr/app/src/test_repos/lightflow/lightflow/tasks', '/', '/usr', '/usr/app/src/test_repos/lightflow/lightflow/tasks/python_task.py', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/models/__pycache__'"}, "return_value": "{'/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/lightflow/lightflow/models', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow', '/usr/app/src/test_repos/lightflow/lightflow/models/__pycache__'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/models/action.py'"}, "return_value": "{'/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/lightflow/lightflow/models', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow', '/usr/app/src/test_repos/lightflow/lightflow/models/action.py'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/models/dag.py'"}, "return_value": "{'/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/lightflow/lightflow/models', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow', '/usr/app/src/test_repos/lightflow/lightflow/models/dag.py'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/models/dag_signal.py'"}, "return_value": "{'/usr/app/src/test_repos/lightflow/lightflow/models/dag_signal.py', '/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/lightflow/lightflow/models', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/models/datastore.py'"}, "return_value": "{'/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src/test_repos/lightflow/lightflow/models/datastore.py', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/lightflow/lightflow/models', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/models/exceptions.py'"}, "return_value": "{'/usr/app/src/test_repos/lightflow/lightflow/models/exceptions.py', '/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/lightflow/lightflow/models', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/models/mongo_proxy.py'"}, "return_value": "{'/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/lightflow/lightflow/models', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow', '/usr/app/src/test_repos/lightflow/lightflow/models/mongo_proxy.py'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/models/parameters.py'"}, "return_value": "{'/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/lightflow/lightflow/models', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow', '/usr/app/src/test_repos/lightflow/lightflow/models/parameters.py'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/models/signal.py'"}, "return_value": "{'/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/lightflow/lightflow/models', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow', '/usr/app/src/test_repos/lightflow/lightflow/models/signal.py'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/models/task.py'"}, "return_value": "{'/', '/usr', '/usr/app/src/test_repos/lightflow/lightflow/models/task.py', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/lightflow/lightflow/models', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/models/task_context.py'"}, "return_value": "{'/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/lightflow/lightflow/models', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow', '/usr/app/src/test_repos/lightflow/lightflow/models/task_context.py'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/models/task_data.py'"}, "return_value": "{'/', '/usr', '/usr/app/src/test_repos/lightflow/lightflow/models/task_data.py', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/lightflow/lightflow/models', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/models/task_parameters.py'"}, "return_value": "{'/', '/usr', '/usr/app/src/test_repos/lightflow/lightflow/models/task_parameters.py', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/lightflow/lightflow/models', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/models/task_signal.py'"}, "return_value": "{'/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/lightflow/lightflow/models', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow', '/usr/app/src/test_repos/lightflow/lightflow/models/task_signal.py'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/models/utils.py'"}, "return_value": "{'/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/lightflow/lightflow/models', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow', '/usr/app/src/test_repos/lightflow/lightflow/models/utils.py'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/models/workflow.py'"}, "return_value": "{'/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app/src/test_repos/lightflow/lightflow/models', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow', '/usr/app/src/test_repos/lightflow/lightflow/models/workflow.py'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/queue/__pycache__'"}, "return_value": "{'/usr/app/src/test_repos/lightflow/lightflow/queue', '/', '/usr', '/usr/app/src/test_repos/lightflow/lightflow/queue/__pycache__', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/queue/app.py'"}, "return_value": "{'/usr/app/src/test_repos/lightflow/lightflow/queue', '/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow', '/usr/app/src/test_repos/lightflow/lightflow/queue/app.py'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/queue/const.py'"}, "return_value": "{'/usr/app/src/test_repos/lightflow/lightflow/queue/const.py', '/usr/app/src/test_repos/lightflow/lightflow/queue', '/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/queue/event.py'"}, "return_value": "{'/usr/app/src/test_repos/lightflow/lightflow/queue/event.py', '/usr/app/src/test_repos/lightflow/lightflow/queue', '/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/queue/jobs.py'"}, "return_value": "{'/usr/app/src/test_repos/lightflow/lightflow/queue', '/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow', '/usr/app/src/test_repos/lightflow/lightflow/queue/jobs.py'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/queue/models.py'"}, "return_value": "{'/usr/app/src/test_repos/lightflow/lightflow/queue', '/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow', '/usr/app/src/test_repos/lightflow/lightflow/queue/models.py'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/queue/pickle.py'"}, "return_value": "{'/usr/app/src/test_repos/lightflow/lightflow/queue/pickle.py', '/usr/app/src/test_repos/lightflow/lightflow/queue', '/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/queue/worker.py'"}, "return_value": "{'/usr/app/src/test_repos/lightflow/lightflow/queue', '/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow', '/usr/app/src/test_repos/lightflow/lightflow/queue/worker.py'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/scripts/cli.py'"}, "return_value": "{'/', '/usr', '/usr/app/src/test_repos/lightflow', '/usr/app/src/test_repos/lightflow/lightflow/scripts/cli.py', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow', '/usr/app/src/test_repos/lightflow/lightflow/scripts'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/tasks/bash_task.py'"}, "return_value": "{'/usr/app/src/test_repos/lightflow/lightflow/tasks', '/', '/usr', '/usr/app/src/test_repos/lightflow/lightflow/tasks/bash_task.py', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/lightflow/tasks/python_task.py'"}, "return_value": "{'/usr/app/src/test_repos/lightflow/lightflow/tasks', '/', '/usr', '/usr/app/src/test_repos/lightflow/lightflow/tasks/python_task.py', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app', '/usr/app/src/test_repos/lightflow/lightflow'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/tests/__pycache__'"}, "return_value": "{'/usr/app/src/test_repos/lightflow/tests/__pycache__', '/', '/usr', '/usr/app/src/test_repos/lightflow/tests', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/tests/conftest.py'"}, "return_value": "{'/', '/usr', '/usr/app/src/test_repos/lightflow/tests', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app', '/usr/app/src/test_repos/lightflow/tests/conftest.py'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/tests/fixtures'"}, "return_value": "{'/', '/usr', '/usr/app/src/test_repos/lightflow/tests', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app', '/usr/app/src/test_repos/lightflow/tests/fixtures'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/tests/test_base_task.py'"}, "return_value": "{'/', '/usr', '/usr/app/src/test_repos/lightflow/tests', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app', '/usr/app/src/test_repos/lightflow/tests/test_base_task.py'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/tests/test_bash_task.py'"}, "return_value": "{'/usr/app/src/test_repos/lightflow/tests/test_bash_task.py', '/', '/usr', '/usr/app/src/test_repos/lightflow/tests', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/tests/test_exceptions.py'"}, "return_value": "{'/usr/app/src/test_repos/lightflow/tests/test_exceptions.py', '/', '/usr', '/usr/app/src/test_repos/lightflow/tests', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/tests/test_task_data.py'"}, "return_value": "{'/', '/usr', '/usr/app/src/test_repos/lightflow/tests', '/usr/app/src/test_repos/lightflow/tests/test_task_data.py', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/tests/test_workflow.py'"}, "return_value": "{'/', '/usr', '/usr/app/src/test_repos/lightflow/tests', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app', '/usr/app/src/test_repos/lightflow/tests/test_workflow.py'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/tests/test_workflows.py'"}, "return_value": "{'/usr/app/src/test_repos/lightflow/tests/test_workflows.py', '/', '/usr', '/usr/app/src/test_repos/lightflow/tests', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/tests/fixtures/workflows'"}, "return_value": "{'/usr/app/src/test_repos/lightflow/tests/fixtures/workflows', '/', '/usr', '/usr/app/src/test_repos/lightflow/tests', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app', '/usr/app/src/test_repos/lightflow/tests/fixtures'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/tests/fixtures/workflows/dag_present_workflow.py'"}, "return_value": "{'/usr/app/src/test_repos/lightflow/tests/fixtures/workflows', '/usr/app/src/test_repos/lightflow/tests/fixtures/workflows/dag_present_workflow.py', '/', '/usr', '/usr/app/src/test_repos/lightflow/tests', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app', '/usr/app/src/test_repos/lightflow/tests/fixtures'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/tests/fixtures/workflows/no_dag_workflow.py'"}, "return_value": "{'/usr/app/src/test_repos/lightflow/tests/fixtures/workflows', '/', '/usr', '/usr/app/src/test_repos/lightflow/tests', '/usr/app/src/test_repos/lightflow', '/usr/app/src/test_repos/lightflow/tests/fixtures/workflows/no_dag_workflow.py', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app', '/usr/app/src/test_repos/lightflow/tests/fixtures'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/lightflow/tests/fixtures/workflows/parameters_workflow.py'"}, "return_value": "{'/usr/app/src/test_repos/lightflow/tests/fixtures/workflows', '/', '/usr', '/usr/app/src/test_repos/lightflow/tests', '/usr/app/src/test_repos/lightflow', '/usr/app/src', '/usr/app/src/test_repos', '/usr/app', '/usr/app/src/test_repos/lightflow/tests/fixtures/workflows/parameters_workflow.py', '/usr/app/src/test_repos/lightflow/tests/fixtures'}"}], "text": "def parts(s: str) -> Set[str]:\n    parts = s.split(sep)\n    return {sep.join(parts[: i + 1]) or sep for i in range(len(parts))}"}, "parse_num": {"line": 179, "args": [{"func_args": {"maybe_num": "'2'"}, "return_value": "2"}, {"func_args": {"maybe_num": "'0'"}, "return_value": "0"}, {"func_args": {"maybe_num": "'1'"}, "return_value": "1"}, {"func_args": {"maybe_num": "'current'"}, "return_value": "-1"}, {"func_args": {"maybe_num": "'3'"}, "return_value": "3"}, {"func_args": {"maybe_num": "'2'"}, "return_value": "2"}, {"func_args": {"maybe_num": "'0'"}, "return_value": "0"}, {"func_args": {"maybe_num": "'1'"}, "return_value": "1"}, {"func_args": {"maybe_num": "'current'"}, "return_value": "-1"}, {"func_args": {"maybe_num": "'3'"}, "return_value": "3"}, {"func_args": {"maybe_num": "'2'"}, "return_value": "2"}, {"func_args": {"maybe_num": "'0'"}, "return_value": "0"}, {"func_args": {"maybe_num": "'1'"}, "return_value": "1"}, {"func_args": {"maybe_num": "'current'"}, "return_value": "-1"}], "text": "def parse_num(maybe_num) -> int:\n    \"\"\"Parse number path suffixes, returns -1 on error.\"\"\"\n    try:\n        return int(maybe_num)\n    except ValueError:\n        return -1"}, "iscommentline": {"line": 162, "args": [{"func_args": {"line": "'[tox]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'envlist = py36, flake, coverage\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}, {"func_args": {"line": "'[testenv]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'deps = -rrequirements-dev.txt\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tviztracer \\n'"}, "return_value": "False"}, {"func_args": {"line": "'commands = viztracer --ignore_frozen --log_func_args --log_func_retval -o result0.json -- pytest\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}, {"func_args": {"line": "'[testenv:flake]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'commands = flake8\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}, {"func_args": {"line": "'[testenv:coverage]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'commands = viztracer --ignore_frozen --log_func_args --log_func_retval -o result1.json -- pytest --cov=lightflow --cov-report html\\n'"}, "return_value": "False"}, {"func_args": {"line": "'deps = \\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tviztracer \\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}, {"func_args": {"line": "'[flake8]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'max-line-length = 120\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}, {"func_args": {"line": "'[pytest]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'addopts = --strict\\n'"}, "return_value": "False"}, {"func_args": {"line": "'markers = \\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\twip: Work in progress\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}], "text": "def iscommentline(line):\n    c = line.lstrip()[:1]\n    return c in COMMENTCHARS"}, "isimportable": {"line": 1026, "args": [{"func_args": {"name": "'tests'"}, "return_value": "True"}], "text": "def isimportable(name):\n    if name and (name[0].isalpha() or name[0] == '_'):\n        name = name.replace(\"_\", '')\n        return not name or name.isalnum()"}, "iterparentnodeids": {"line": 44, "args": [{"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_properties'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_properties'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_properties'"}, "return_value": "'tests/test_base_task.py'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_properties'"}, "return_value": "'tests/test_base_task.py::test_base_task_properties'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_properties'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_properties'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_properties'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_properties'"}, "return_value": "'tests/test_base_task.py'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_properties'"}, "return_value": "'tests/test_base_task.py::test_base_task_properties'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_properties'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_skipped_setter'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_skipped_setter'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_skipped_setter'"}, "return_value": "'tests/test_base_task.py'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_skipped_setter'"}, "return_value": "'tests/test_base_task.py::test_base_task_skipped_setter'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_skipped_setter'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_skipped_setter'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_skipped_setter'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_skipped_setter'"}, "return_value": "'tests/test_base_task.py'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_skipped_setter'"}, "return_value": "'tests/test_base_task.py::test_base_task_skipped_setter'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_skipped_setter'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_state_setter'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_state_setter'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_state_setter'"}, "return_value": "'tests/test_base_task.py'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_state_setter'"}, "return_value": "'tests/test_base_task.py::test_base_task_state_setter'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_state_setter'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_state_setter'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_state_setter'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_state_setter'"}, "return_value": "'tests/test_base_task.py'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_state_setter'"}, "return_value": "'tests/test_base_task.py::test_base_task_state_setter'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_state_setter'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_celery_pending'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_celery_pending'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_celery_pending'"}, "return_value": "'tests/test_base_task.py'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_celery_pending'"}, "return_value": "'tests/test_base_task.py::test_base_task_celery_pending'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_celery_pending'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_celery_pending'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_celery_pending'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_celery_pending'"}, "return_value": "'tests/test_base_task.py'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_celery_pending'"}, "return_value": "'tests/test_base_task.py::test_base_task_celery_pending'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_celery_pending'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_celery_completed'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_celery_completed'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_celery_completed'"}, "return_value": "'tests/test_base_task.py'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_celery_completed'"}, "return_value": "'tests/test_base_task.py::test_base_task_celery_completed'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_celery_completed'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_celery_completed'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_celery_completed'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_celery_completed'"}, "return_value": "'tests/test_base_task.py'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_celery_completed'"}, "return_value": "'tests/test_base_task.py::test_base_task_celery_completed'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_celery_completed'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_celery_failed'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_celery_failed'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_celery_failed'"}, "return_value": "'tests/test_base_task.py'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_celery_failed'"}, "return_value": "'tests/test_base_task.py::test_base_task_celery_failed'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_celery_failed'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_celery_failed'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_celery_failed'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_celery_failed'"}, "return_value": "'tests/test_base_task.py'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_celery_failed'"}, "return_value": "'tests/test_base_task.py::test_base_task_celery_failed'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_celery_failed'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_celery_state'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_celery_state'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_celery_state'"}, "return_value": "'tests/test_base_task.py'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_celery_state'"}, "return_value": "'tests/test_base_task.py::test_base_task_celery_state'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_celery_state'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_celery_state'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_celery_state'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_celery_state'"}, "return_value": "'tests/test_base_task.py'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_celery_state'"}, "return_value": "'tests/test_base_task.py::test_base_task_celery_state'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_celery_state'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_clear_result'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_clear_result'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_clear_result'"}, "return_value": "'tests/test_base_task.py'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_clear_result'"}, "return_value": "'tests/test_base_task.py::test_base_task_clear_result'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_clear_result'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_clear_result'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_clear_result'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_clear_result'"}, "return_value": "'tests/test_base_task.py'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_clear_result'"}, "return_value": "'tests/test_base_task.py::test_base_task_clear_result'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_base_task_clear_result'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callbacks'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callbacks'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callbacks'"}, "return_value": "'tests/test_base_task.py'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callbacks'"}, "return_value": "'tests/test_base_task.py::test_run_calls_callbacks'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callbacks'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callbacks'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callbacks'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callbacks'"}, "return_value": "'tests/test_base_task.py'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callbacks'"}, "return_value": "'tests/test_base_task.py::test_run_calls_callbacks'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callbacks'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callbacks'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callbacks'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callbacks'"}, "return_value": "'tests/test_base_task.py'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callbacks'"}, "return_value": "'tests/test_base_task.py::test_run_calls_callbacks'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callbacks'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callbacks'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callbacks'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callbacks'"}, "return_value": "'tests/test_base_task.py'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callbacks'"}, "return_value": "'tests/test_base_task.py::test_run_calls_callbacks'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callbacks'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callbacks'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callbacks'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callbacks'"}, "return_value": "'tests/test_base_task.py'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callbacks'"}, "return_value": "'tests/test_base_task.py::test_run_calls_callbacks'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callbacks'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_error'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_error'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_error'"}, "return_value": "'tests/test_base_task.py'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_error'"}, "return_value": "'tests/test_base_task.py::test_run_calls_callback_finally_on_error'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_error'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_error'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_error'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_error'"}, "return_value": "'tests/test_base_task.py'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_error'"}, "return_value": "'tests/test_base_task.py::test_run_calls_callback_finally_on_error'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_error'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_error'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_error'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_error'"}, "return_value": "'tests/test_base_task.py'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_error'"}, "return_value": "'tests/test_base_task.py::test_run_calls_callback_finally_on_error'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_error'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_error'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_error'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_error'"}, "return_value": "'tests/test_base_task.py'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_error'"}, "return_value": "'tests/test_base_task.py::test_run_calls_callback_finally_on_error'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_error'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_error'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_error'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_error'"}, "return_value": "'tests/test_base_task.py'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_error'"}, "return_value": "'tests/test_base_task.py::test_run_calls_callback_finally_on_error'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_error'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_stop_task'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_stop_task'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_stop_task'"}, "return_value": "'tests/test_base_task.py'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_stop_task'"}, "return_value": "'tests/test_base_task.py::test_run_calls_callback_finally_on_stop_task'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_stop_task'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_stop_task'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_stop_task'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_stop_task'"}, "return_value": "'tests/test_base_task.py'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_stop_task'"}, "return_value": "'tests/test_base_task.py::test_run_calls_callback_finally_on_stop_task'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_stop_task'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_stop_task'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_stop_task'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_stop_task'"}, "return_value": "'tests/test_base_task.py'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_stop_task'"}, "return_value": "'tests/test_base_task.py::test_run_calls_callback_finally_on_stop_task'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_stop_task'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_stop_task'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_stop_task'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_stop_task'"}, "return_value": "'tests/test_base_task.py'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_stop_task'"}, "return_value": "'tests/test_base_task.py::test_run_calls_callback_finally_on_stop_task'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_stop_task'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_stop_task'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_stop_task'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_stop_task'"}, "return_value": "'tests/test_base_task.py'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_stop_task'"}, "return_value": "'tests/test_base_task.py::test_run_calls_callback_finally_on_stop_task'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_stop_task'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_abort_workflow'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_abort_workflow'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_abort_workflow'"}, "return_value": "'tests/test_base_task.py'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_abort_workflow'"}, "return_value": "'tests/test_base_task.py::test_run_calls_callback_finally_on_abort_workflow'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_abort_workflow'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_abort_workflow'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_abort_workflow'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_abort_workflow'"}, "return_value": "'tests/test_base_task.py'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_abort_workflow'"}, "return_value": "'tests/test_base_task.py::test_run_calls_callback_finally_on_abort_workflow'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_abort_workflow'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_abort_workflow'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_abort_workflow'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_abort_workflow'"}, "return_value": "'tests/test_base_task.py'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_abort_workflow'"}, "return_value": "'tests/test_base_task.py::test_run_calls_callback_finally_on_abort_workflow'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_abort_workflow'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_abort_workflow'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_abort_workflow'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_abort_workflow'"}, "return_value": "'tests/test_base_task.py'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_abort_workflow'"}, "return_value": "'tests/test_base_task.py::test_run_calls_callback_finally_on_abort_workflow'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_abort_workflow'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_abort_workflow'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_abort_workflow'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_abort_workflow'"}, "return_value": "'tests/test_base_task.py'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_abort_workflow'"}, "return_value": "'tests/test_base_task.py::test_run_calls_callback_finally_on_abort_workflow'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_calls_callback_finally_on_abort_workflow'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_invalid_result'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_invalid_result'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_invalid_result'"}, "return_value": "'tests/test_base_task.py'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_invalid_result'"}, "return_value": "'tests/test_base_task.py::test_run_handles_invalid_result'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_invalid_result'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_invalid_result'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_invalid_result'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_invalid_result'"}, "return_value": "'tests/test_base_task.py'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_invalid_result'"}, "return_value": "'tests/test_base_task.py::test_run_handles_invalid_result'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_invalid_result'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_invalid_result'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_invalid_result'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_invalid_result'"}, "return_value": "'tests/test_base_task.py'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_invalid_result'"}, "return_value": "'tests/test_base_task.py::test_run_handles_invalid_result'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_invalid_result'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_invalid_result'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_invalid_result'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_invalid_result'"}, "return_value": "'tests/test_base_task.py'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_invalid_result'"}, "return_value": "'tests/test_base_task.py::test_run_handles_invalid_result'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_invalid_result'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_invalid_result'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_invalid_result'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_invalid_result'"}, "return_value": "'tests/test_base_task.py'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_invalid_result'"}, "return_value": "'tests/test_base_task.py::test_run_handles_invalid_result'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_invalid_result'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_action_response'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_action_response'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_action_response'"}, "return_value": "'tests/test_base_task.py'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_action_response'"}, "return_value": "'tests/test_base_task.py::test_run_handles_action_response'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_action_response'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_action_response'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_action_response'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_action_response'"}, "return_value": "'tests/test_base_task.py'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_action_response'"}, "return_value": "'tests/test_base_task.py::test_run_handles_action_response'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_action_response'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_action_response'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_action_response'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_action_response'"}, "return_value": "'tests/test_base_task.py'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_action_response'"}, "return_value": "'tests/test_base_task.py::test_run_handles_action_response'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_action_response'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_action_response'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_action_response'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_action_response'"}, "return_value": "'tests/test_base_task.py'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_action_response'"}, "return_value": "'tests/test_base_task.py::test_run_handles_action_response'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_action_response'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_action_response'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_action_response'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_action_response'"}, "return_value": "'tests/test_base_task.py'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_action_response'"}, "return_value": "'tests/test_base_task.py::test_run_handles_action_response'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_action_response'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_no_data'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_no_data'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_no_data'"}, "return_value": "'tests/test_base_task.py'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_no_data'"}, "return_value": "'tests/test_base_task.py::test_run_handles_no_data'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_no_data'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_no_data'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_no_data'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_no_data'"}, "return_value": "'tests/test_base_task.py'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_no_data'"}, "return_value": "'tests/test_base_task.py::test_run_handles_no_data'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_no_data'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_no_data'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_no_data'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_no_data'"}, "return_value": "'tests/test_base_task.py'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_no_data'"}, "return_value": "'tests/test_base_task.py::test_run_handles_no_data'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_no_data'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_no_data'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_no_data'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_no_data'"}, "return_value": "'tests/test_base_task.py'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_no_data'"}, "return_value": "'tests/test_base_task.py::test_run_handles_no_data'"}, {"func_args": {"nodeid": "'tests/test_base_task.py::test_run_handles_no_data'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_executes_command'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_executes_command'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_executes_command'"}, "return_value": "'tests/test_bash_task.py'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_executes_command'"}, "return_value": "'tests/test_bash_task.py::test_bash_task_executes_command'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_executes_command'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_executes_command'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_executes_command'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_executes_command'"}, "return_value": "'tests/test_bash_task.py'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_executes_command'"}, "return_value": "'tests/test_bash_task.py::test_bash_task_executes_command'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_executes_command'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_executes_command'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_executes_command'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_executes_command'"}, "return_value": "'tests/test_bash_task.py'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_executes_command'"}, "return_value": "'tests/test_bash_task.py::test_bash_task_executes_command'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_executes_command'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_executes_command'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_executes_command'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_executes_command'"}, "return_value": "'tests/test_bash_task.py'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_executes_command'"}, "return_value": "'tests/test_bash_task.py::test_bash_task_executes_command'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_executes_command'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_executes_command'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_executes_command'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_executes_command'"}, "return_value": "'tests/test_bash_task.py'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_executes_command'"}, "return_value": "'tests/test_bash_task.py::test_bash_task_executes_command'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_executes_command'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_executes_command'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_executes_command'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_executes_command'"}, "return_value": "'tests/test_bash_task.py'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_executes_command'"}, "return_value": "'tests/test_bash_task.py::test_bash_task_executes_command'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_executes_command'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_executes_command'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_executes_command'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_executes_command'"}, "return_value": "'tests/test_bash_task.py'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_executes_command'"}, "return_value": "'tests/test_bash_task.py::test_bash_task_executes_command'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_executes_command'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_executes_command'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_executes_command'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_executes_command'"}, "return_value": "'tests/test_bash_task.py'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_executes_command'"}, "return_value": "'tests/test_bash_task.py::test_bash_task_executes_command'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_executes_command'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_handles_sleep'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_handles_sleep'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_handles_sleep'"}, "return_value": "'tests/test_bash_task.py'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_handles_sleep'"}, "return_value": "'tests/test_bash_task.py::test_bash_task_handles_sleep'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_handles_sleep'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_handles_sleep'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_handles_sleep'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_handles_sleep'"}, "return_value": "'tests/test_bash_task.py'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_handles_sleep'"}, "return_value": "'tests/test_bash_task.py::test_bash_task_handles_sleep'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_handles_sleep'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_handles_sleep'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_handles_sleep'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_handles_sleep'"}, "return_value": "'tests/test_bash_task.py'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_handles_sleep'"}, "return_value": "'tests/test_bash_task.py::test_bash_task_handles_sleep'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_handles_sleep'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_handles_sleep'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_handles_sleep'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_handles_sleep'"}, "return_value": "'tests/test_bash_task.py'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_handles_sleep'"}, "return_value": "'tests/test_bash_task.py::test_bash_task_handles_sleep'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_handles_sleep'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_handles_sleep'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_handles_sleep'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_handles_sleep'"}, "return_value": "'tests/test_bash_task.py'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_handles_sleep'"}, "return_value": "'tests/test_bash_task.py::test_bash_task_handles_sleep'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_handles_sleep'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_calls_stdout_callback'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_calls_stdout_callback'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_calls_stdout_callback'"}, "return_value": "'tests/test_bash_task.py'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_calls_stdout_callback'"}, "return_value": "'tests/test_bash_task.py::test_bash_task_calls_stdout_callback'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_calls_stdout_callback'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_calls_stdout_callback'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_calls_stdout_callback'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_calls_stdout_callback'"}, "return_value": "'tests/test_bash_task.py'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_calls_stdout_callback'"}, "return_value": "'tests/test_bash_task.py::test_bash_task_calls_stdout_callback'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_calls_stdout_callback'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_calls_stdout_callback'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_calls_stdout_callback'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_calls_stdout_callback'"}, "return_value": "'tests/test_bash_task.py'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_calls_stdout_callback'"}, "return_value": "'tests/test_bash_task.py::test_bash_task_calls_stdout_callback'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_calls_stdout_callback'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_calls_stdout_callback'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_calls_stdout_callback'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_calls_stdout_callback'"}, "return_value": "'tests/test_bash_task.py'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_calls_stdout_callback'"}, "return_value": "'tests/test_bash_task.py::test_bash_task_calls_stdout_callback'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_calls_stdout_callback'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_calls_stdout_callback'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_calls_stdout_callback'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_calls_stdout_callback'"}, "return_value": "'tests/test_bash_task.py'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_calls_stdout_callback'"}, "return_value": "'tests/test_bash_task.py::test_bash_task_calls_stdout_callback'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_calls_stdout_callback'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_calls_stderr_callback'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_calls_stderr_callback'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_calls_stderr_callback'"}, "return_value": "'tests/test_bash_task.py'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_calls_stderr_callback'"}, "return_value": "'tests/test_bash_task.py::test_bash_task_calls_stderr_callback'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_calls_stderr_callback'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_calls_stderr_callback'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_calls_stderr_callback'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_calls_stderr_callback'"}, "return_value": "'tests/test_bash_task.py'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_calls_stderr_callback'"}, "return_value": "'tests/test_bash_task.py::test_bash_task_calls_stderr_callback'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_calls_stderr_callback'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_calls_stderr_callback'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_calls_stderr_callback'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_calls_stderr_callback'"}, "return_value": "'tests/test_bash_task.py'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_calls_stderr_callback'"}, "return_value": "'tests/test_bash_task.py::test_bash_task_calls_stderr_callback'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_calls_stderr_callback'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_calls_stderr_callback'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_calls_stderr_callback'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_calls_stderr_callback'"}, "return_value": "'tests/test_bash_task.py'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_calls_stderr_callback'"}, "return_value": "'tests/test_bash_task.py::test_bash_task_calls_stderr_callback'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_calls_stderr_callback'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_calls_stderr_callback'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_calls_stderr_callback'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_calls_stderr_callback'"}, "return_value": "'tests/test_bash_task.py'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_calls_stderr_callback'"}, "return_value": "'tests/test_bash_task.py::test_bash_task_calls_stderr_callback'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_calls_stderr_callback'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_captures_io_to_file'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_captures_io_to_file'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_captures_io_to_file'"}, "return_value": "'tests/test_bash_task.py'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_captures_io_to_file'"}, "return_value": "'tests/test_bash_task.py::test_bash_task_captures_io_to_file'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_captures_io_to_file'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_captures_io_to_file'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_captures_io_to_file'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_captures_io_to_file'"}, "return_value": "'tests/test_bash_task.py'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_captures_io_to_file'"}, "return_value": "'tests/test_bash_task.py::test_bash_task_captures_io_to_file'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_captures_io_to_file'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_captures_io_to_file'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_captures_io_to_file'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_captures_io_to_file'"}, "return_value": "'tests/test_bash_task.py'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_captures_io_to_file'"}, "return_value": "'tests/test_bash_task.py::test_bash_task_captures_io_to_file'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_captures_io_to_file'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_captures_io_to_file'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_captures_io_to_file'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_captures_io_to_file'"}, "return_value": "'tests/test_bash_task.py'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_captures_io_to_file'"}, "return_value": "'tests/test_bash_task.py::test_bash_task_captures_io_to_file'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_captures_io_to_file'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_captures_io_to_file'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_captures_io_to_file'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_captures_io_to_file'"}, "return_value": "'tests/test_bash_task.py'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_captures_io_to_file'"}, "return_value": "'tests/test_bash_task.py::test_bash_task_captures_io_to_file'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_bash_task_captures_io_to_file'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_terminates_the_process_if_stopped_or_aborted'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_terminates_the_process_if_stopped_or_aborted'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_terminates_the_process_if_stopped_or_aborted'"}, "return_value": "'tests/test_bash_task.py'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_terminates_the_process_if_stopped_or_aborted'"}, "return_value": "'tests/test_bash_task.py::test_terminates_the_process_if_stopped_or_aborted'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_terminates_the_process_if_stopped_or_aborted'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_terminates_the_process_if_stopped_or_aborted'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_terminates_the_process_if_stopped_or_aborted'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_terminates_the_process_if_stopped_or_aborted'"}, "return_value": "'tests/test_bash_task.py'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_terminates_the_process_if_stopped_or_aborted'"}, "return_value": "'tests/test_bash_task.py::test_terminates_the_process_if_stopped_or_aborted'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_terminates_the_process_if_stopped_or_aborted'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_terminates_the_process_if_stopped_or_aborted'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_terminates_the_process_if_stopped_or_aborted'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_terminates_the_process_if_stopped_or_aborted'"}, "return_value": "'tests/test_bash_task.py'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_terminates_the_process_if_stopped_or_aborted'"}, "return_value": "'tests/test_bash_task.py::test_terminates_the_process_if_stopped_or_aborted'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_terminates_the_process_if_stopped_or_aborted'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_terminates_the_process_if_stopped_or_aborted'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_terminates_the_process_if_stopped_or_aborted'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_terminates_the_process_if_stopped_or_aborted'"}, "return_value": "'tests/test_bash_task.py'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_terminates_the_process_if_stopped_or_aborted'"}, "return_value": "'tests/test_bash_task.py::test_terminates_the_process_if_stopped_or_aborted'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_terminates_the_process_if_stopped_or_aborted'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_terminates_the_process_if_stopped_or_aborted'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_terminates_the_process_if_stopped_or_aborted'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_terminates_the_process_if_stopped_or_aborted'"}, "return_value": "'tests/test_bash_task.py'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_terminates_the_process_if_stopped_or_aborted'"}, "return_value": "'tests/test_bash_task.py::test_terminates_the_process_if_stopped_or_aborted'"}, {"func_args": {"nodeid": "'tests/test_bash_task.py::test_terminates_the_process_if_stopped_or_aborted'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_exceptions.py::test_exception_str_and_repr'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_exceptions.py::test_exception_str_and_repr'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_exceptions.py::test_exception_str_and_repr'"}, "return_value": "'tests/test_exceptions.py'"}, {"func_args": {"nodeid": "'tests/test_exceptions.py::test_exception_str_and_repr'"}, "return_value": "'tests/test_exceptions.py::test_exception_str_and_repr'"}, {"func_args": {"nodeid": "'tests/test_exceptions.py::test_exception_str_and_repr'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_for_missing_name'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_for_missing_name'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_for_missing_name'"}, "return_value": "'tests/test_workflow.py'"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_for_missing_name'"}, "return_value": "'tests/test_workflow.py::test_load_workflow_for_missing_name'"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_for_missing_name'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_for_missing_name'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_for_missing_name'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_for_missing_name'"}, "return_value": "'tests/test_workflow.py'"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_for_missing_name'"}, "return_value": "'tests/test_workflow.py::test_load_workflow_for_missing_name'"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_for_missing_name'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_with_no_dag'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_with_no_dag'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_with_no_dag'"}, "return_value": "'tests/test_workflow.py'"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_with_no_dag'"}, "return_value": "'tests/test_workflow.py::test_load_workflow_with_no_dag'"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_with_no_dag'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_with_no_dag'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_with_no_dag'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_with_no_dag'"}, "return_value": "'tests/test_workflow.py'"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_with_no_dag'"}, "return_value": "'tests/test_workflow.py::test_load_workflow_with_no_dag'"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_with_no_dag'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_with_dag'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_with_dag'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_with_dag'"}, "return_value": "'tests/test_workflow.py'"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_with_dag'"}, "return_value": "'tests/test_workflow.py::test_load_workflow_with_dag'"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_with_dag'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_with_dag'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_with_dag'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_with_dag'"}, "return_value": "'tests/test_workflow.py'"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_with_dag'"}, "return_value": "'tests/test_workflow.py::test_load_workflow_with_dag'"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_with_dag'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_with_no_arguments'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_with_no_arguments'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_with_no_arguments'"}, "return_value": "'tests/test_workflow.py'"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_with_no_arguments'"}, "return_value": "'tests/test_workflow.py::test_load_workflow_with_no_arguments'"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_with_no_arguments'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_with_no_arguments'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_with_no_arguments'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_with_no_arguments'"}, "return_value": "'tests/test_workflow.py'"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_with_no_arguments'"}, "return_value": "'tests/test_workflow.py::test_load_workflow_with_no_arguments'"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_with_no_arguments'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_with_missing_arguments'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_with_missing_arguments'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_with_missing_arguments'"}, "return_value": "'tests/test_workflow.py'"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_with_missing_arguments'"}, "return_value": "'tests/test_workflow.py::test_load_workflow_with_missing_arguments'"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_with_missing_arguments'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_with_missing_arguments'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_with_missing_arguments'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_with_missing_arguments'"}, "return_value": "'tests/test_workflow.py'"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_with_missing_arguments'"}, "return_value": "'tests/test_workflow.py::test_load_workflow_with_missing_arguments'"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_with_missing_arguments'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_with_all_arguments'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_with_all_arguments'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_with_all_arguments'"}, "return_value": "'tests/test_workflow.py'"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_with_all_arguments'"}, "return_value": "'tests/test_workflow.py::test_load_workflow_with_all_arguments'"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_with_all_arguments'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_with_all_arguments'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_with_all_arguments'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_with_all_arguments'"}, "return_value": "'tests/test_workflow.py'"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_with_all_arguments'"}, "return_value": "'tests/test_workflow.py::test_load_workflow_with_all_arguments'"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_with_all_arguments'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_when_validate_arguments_is_false'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_when_validate_arguments_is_false'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_when_validate_arguments_is_false'"}, "return_value": "'tests/test_workflow.py'"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_when_validate_arguments_is_false'"}, "return_value": "'tests/test_workflow.py::test_load_workflow_when_validate_arguments_is_false'"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_when_validate_arguments_is_false'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_when_validate_arguments_is_false'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_when_validate_arguments_is_false'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_when_validate_arguments_is_false'"}, "return_value": "'tests/test_workflow.py'"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_when_validate_arguments_is_false'"}, "return_value": "'tests/test_workflow.py::test_load_workflow_when_validate_arguments_is_false'"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_load_workflow_when_validate_arguments_is_false'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_workflow_from_name_constructor'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_workflow_from_name_constructor'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_workflow_from_name_constructor'"}, "return_value": "'tests/test_workflow.py'"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_workflow_from_name_constructor'"}, "return_value": "'tests/test_workflow.py::test_workflow_from_name_constructor'"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_workflow_from_name_constructor'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_workflow_from_name_constructor'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_workflow_from_name_constructor'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_workflow_from_name_constructor'"}, "return_value": "'tests/test_workflow.py'"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_workflow_from_name_constructor'"}, "return_value": "'tests/test_workflow.py::test_workflow_from_name_constructor'"}, {"func_args": {"nodeid": "'tests/test_workflow.py::test_workflow_from_name_constructor'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_workflows.py::test_list_workflows_when_no_workflow_dirs_in_config'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_workflows.py::test_list_workflows_when_no_workflow_dirs_in_config'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_workflows.py::test_list_workflows_when_no_workflow_dirs_in_config'"}, "return_value": "'tests/test_workflows.py'"}, {"func_args": {"nodeid": "'tests/test_workflows.py::test_list_workflows_when_no_workflow_dirs_in_config'"}, "return_value": "'tests/test_workflows.py::test_list_workflows_when_no_workflow_dirs_in_config'"}, {"func_args": {"nodeid": "'tests/test_workflows.py::test_list_workflows_when_no_workflow_dirs_in_config'"}, "return_value": "None"}, {"func_args": {"nodeid": "'tests/test_workflows.py::test_list_workflows_handles_missing_parameters'"}, "return_value": "''"}, {"func_args": {"nodeid": "'tests/test_workflows.py::test_list_workflows_handles_missing_parameters'"}, "return_value": "'tests'"}, {"func_args": {"nodeid": "'tests/test_workflows.py::test_list_workflows_handles_missing_parameters'"}, "return_value": "'tests/test_workflows.py'"}, {"func_args": {"nodeid": "'tests/test_workflows.py::test_list_workflows_handles_missing_parameters'"}, "return_value": "'tests/test_workflows.py::test_list_workflows_handles_missing_parameters'"}, {"func_args": {"nodeid": "'tests/test_workflows.py::test_list_workflows_handles_missing_parameters'"}, "return_value": "None"}], "text": "def iterparentnodeids(nodeid: str) -> Iterator[str]:\n    \"\"\"Return the parent node IDs of a given node ID, inclusive.\n\n    For the node ID\n\n        \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_source\"\n\n    the result would be\n\n        \"\"\n        \"testing\"\n        \"testing/code\"\n        \"testing/code/test_excinfo.py\"\n        \"testing/code/test_excinfo.py::TestFormattedExcinfo\"\n        \"testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_source\"\n\n    Note that :: parts are only considered at the last / component.\n    \"\"\"\n    pos = 0\n    sep = SEP\n    yield \"\"\n    while True:\n        at = nodeid.find(sep, pos)\n        if at == -1 and sep == SEP:\n            sep = \"::\"\n        elif at == -1:\n            if nodeid:\n                yield nodeid\n            break\n        else:\n            if at:\n                yield nodeid[:at]\n            pos = at + len(sep)"}, "get_user": {"line": 173, "args": [{"func_args": {}, "return_value": "'root'"}], "text": "def get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\"\"\"\n    import getpass\n\n    try:\n        return getpass.getuser()\n    except (ImportError, KeyError):\n        return None"}, "wcswidth": {"line": 43, "args": [{"func_args": {"s": "''"}, "return_value": "0"}, {"func_args": {"s": "'tests/test_base_task.py .'"}, "return_value": "25"}, {"func_args": {"s": "'tests/test_base_task.py ..'"}, "return_value": "26"}, {"func_args": {"s": "'tests/test_base_task.py ...'"}, "return_value": "27"}, {"func_args": {"s": "'tests/test_base_task.py ....'"}, "return_value": "28"}, {"func_args": {"s": "'tests/test_base_task.py .....'"}, "return_value": "29"}, {"func_args": {"s": "'tests/test_base_task.py ......'"}, "return_value": "30"}, {"func_args": {"s": "'tests/test_base_task.py .......'"}, "return_value": "31"}, {"func_args": {"s": "'tests/test_base_task.py ........'"}, "return_value": "32"}, {"func_args": {"s": "'tests/test_base_task.py .........'"}, "return_value": "33"}, {"func_args": {"s": "'tests/test_base_task.py ..........'"}, "return_value": "34"}, {"func_args": {"s": "'tests/test_base_task.py ...........'"}, "return_value": "35"}, {"func_args": {"s": "'tests/test_base_task.py ............'"}, "return_value": "36"}, {"func_args": {"s": "'tests/test_base_task.py .............'"}, "return_value": "37"}, {"func_args": {"s": "'tests/test_base_task.py ..............'"}, "return_value": "38"}, {"func_args": {"s": "'tests/test_base_task.py ...............'"}, "return_value": "39"}, {"func_args": {"s": "'tests/test_base_task.py ...............'"}, "return_value": "39"}, {"func_args": {"s": "'tests/test_bash_task.py .'"}, "return_value": "25"}, {"func_args": {"s": "'tests/test_bash_task.py ..'"}, "return_value": "26"}, {"func_args": {"s": "'tests/test_bash_task.py ...'"}, "return_value": "27"}, {"func_args": {"s": "'tests/test_bash_task.py ....'"}, "return_value": "28"}, {"func_args": {"s": "'tests/test_bash_task.py .....'"}, "return_value": "29"}, {"func_args": {"s": "'tests/test_bash_task.py ......'"}, "return_value": "30"}, {"func_args": {"s": "'tests/test_bash_task.py .......'"}, "return_value": "31"}, {"func_args": {"s": "'tests/test_bash_task.py .......'"}, "return_value": "31"}, {"func_args": {"s": "'tests/test_exceptions.py .'"}, "return_value": "26"}, {"func_args": {"s": "'tests/test_exceptions.py .'"}, "return_value": "26"}, {"func_args": {"s": "'tests/test_workflow.py .'"}, "return_value": "24"}, {"func_args": {"s": "'tests/test_workflow.py ..'"}, "return_value": "25"}, {"func_args": {"s": "'tests/test_workflow.py ...'"}, "return_value": "26"}, {"func_args": {"s": "'tests/test_workflow.py ....'"}, "return_value": "27"}, {"func_args": {"s": "'tests/test_workflow.py .....'"}, "return_value": "28"}, {"func_args": {"s": "'tests/test_workflow.py ......'"}, "return_value": "29"}, {"func_args": {"s": "'tests/test_workflow.py .......'"}, "return_value": "30"}, {"func_args": {"s": "'tests/test_workflow.py ........'"}, "return_value": "31"}, {"func_args": {"s": "'tests/test_workflow.py ........'"}, "return_value": "31"}, {"func_args": {"s": "'tests/test_workflows.py .'"}, "return_value": "25"}, {"func_args": {"s": "'tests/test_workflows.py ..'"}, "return_value": "26"}], "text": "def wcswidth(s: str) -> int:\n    \"\"\"Determine how many columns are needed to display a string in a terminal.\n\n    Returns -1 if the string contains non-printable characters.\n    \"\"\"\n    width = 0\n    for c in unicodedata.normalize(\"NFC\", s):\n        wc = wcwidth(c)\n        if wc < 0:\n            return -1\n        width += wc\n    return width"}, "wcwidth": {"line": 4, "args": [{"func_args": {"c": "'t'"}, "return_value": "1"}, {"func_args": {"c": "'e'"}, "return_value": "1"}, {"func_args": {"c": "'s'"}, "return_value": "1"}, {"func_args": {"c": "'/'"}, "return_value": "1"}, {"func_args": {"c": "'_'"}, "return_value": "1"}, {"func_args": {"c": "'b'"}, "return_value": "1"}, {"func_args": {"c": "'a'"}, "return_value": "1"}, {"func_args": {"c": "'k'"}, "return_value": "1"}, {"func_args": {"c": "'.'"}, "return_value": "1"}, {"func_args": {"c": "'p'"}, "return_value": "1"}, {"func_args": {"c": "'y'"}, "return_value": "1"}, {"func_args": {"c": "' '"}, "return_value": "1"}, {"func_args": {"c": "'h'"}, "return_value": "1"}, {"func_args": {"c": "'x'"}, "return_value": "1"}, {"func_args": {"c": "'c'"}, "return_value": "1"}, {"func_args": {"c": "'i'"}, "return_value": "1"}, {"func_args": {"c": "'o'"}, "return_value": "1"}, {"func_args": {"c": "'n'"}, "return_value": "1"}, {"func_args": {"c": "'w'"}, "return_value": "1"}, {"func_args": {"c": "'r'"}, "return_value": "1"}, {"func_args": {"c": "'f'"}, "return_value": "1"}, {"func_args": {"c": "'l'"}, "return_value": "1"}]}, "merge_data": {"line": 68, "args": [{"func_args": {"source": "{}", "dest": "{}"}, "return_value": "{}"}], "text": "def merge_data(source, dest):\n            for key, value in source.items():\n                if isinstance(value, dict):\n                    merge_data(value, dest.setdefault(key, {}))\n                else:\n                    dest[key] = value\n            return dest"}, "default": {"line": 213, "args": [{"func_args": {}, "return_value": "\"\\nworkflows:\\n  - ./examples\\n\\nlibraries: []\\n\\ncelery:\\n  broker_url: redis://localhost:6379/0\\n  result_backend: redis://localhost:6379/0\\n  worker_concurrency: 8\\n  result_expires: 0\\n  worker_send_task_events: True\\n  worker_prefetch_multiplier: 1\\n\\nsignal:\\n  host: localhost\\n  port: 6379\\n  password: null\\n  database: 0\\n  polling_time: 0.5\\n\\nstore:\\n  host: localhost\\n  port: 27017\\n  database: lightflow\\n  username: null\\n  password: null\\n  auth_source: admin\\n  auth_mechanism: null\\n  connect_timeout: 30000\\n\\ngraph:\\n  workflow_polling_time: 0.5\\n  dag_polling_time: 0.5\\n\\ncli:\\n  time_format: '%d/%m/%Y %H:%M:%S'\\n\\nextensions: {}\\n\\nlogging:\\n  version: 1\\n  disable_existing_loggers: false\\n  formatters:\\n    verbose:\\n      format: '[%(asctime)s][%(levelname)s] %(name)s %(filename)s:%(funcName)s:%(lineno)d | %(message)s'\\n      datefmt: '%d/%m/%Y %H:%M:%S'\\n    simple:\\n      (): 'colorlog.ColoredFormatter'\\n      format: '%(log_color)s[%(asctime)s][%(levelname)s] %(blue)s%(processName)s%(reset)s | %(message)s'\\n      datefmt: '%d/%m/%Y %H:%M:%S'\\n  handlers:\\n    console:\\n      class: logging.StreamHandler\\n      level: INFO\\n      formatter: simple\\n  loggers:\\n    celery:\\n      handlers:\\n        - console\\n      level: INFO\\n\\n    root:\\n      handlers:\\n        - console\\n      level: INFO\\n    \""}, {"func_args": {}, "return_value": "\"\\nworkflows:\\n  - ./examples\\n\\nlibraries: []\\n\\ncelery:\\n  broker_url: redis://localhost:6379/0\\n  result_backend: redis://localhost:6379/0\\n  worker_concurrency: 8\\n  result_expires: 0\\n  worker_send_task_events: True\\n  worker_prefetch_multiplier: 1\\n\\nsignal:\\n  host: localhost\\n  port: 6379\\n  password: null\\n  database: 0\\n  polling_time: 0.5\\n\\nstore:\\n  host: localhost\\n  port: 27017\\n  database: lightflow\\n  username: null\\n  password: null\\n  auth_source: admin\\n  auth_mechanism: null\\n  connect_timeout: 30000\\n\\ngraph:\\n  workflow_polling_time: 0.5\\n  dag_polling_time: 0.5\\n\\ncli:\\n  time_format: '%d/%m/%Y %H:%M:%S'\\n\\nextensions: {}\\n\\nlogging:\\n  version: 1\\n  disable_existing_loggers: false\\n  formatters:\\n    verbose:\\n      format: '[%(asctime)s][%(levelname)s] %(name)s %(filename)s:%(funcName)s:%(lineno)d | %(message)s'\\n      datefmt: '%d/%m/%Y %H:%M:%S'\\n    simple:\\n      (): 'colorlog.ColoredFormatter'\\n      format: '%(log_color)s[%(asctime)s][%(levelname)s] %(blue)s%(processName)s%(reset)s | %(message)s'\\n      datefmt: '%d/%m/%Y %H:%M:%S'\\n  handlers:\\n    console:\\n      class: logging.StreamHandler\\n      level: INFO\\n      formatter: simple\\n  loggers:\\n    celery:\\n      handlers:\\n        - console\\n      level: INFO\\n\\n    root:\\n      handlers:\\n        - console\\n      level: INFO\\n    \""}]}, "_F": {"line": 54, "args": [{"func_args": {"s": "'\\n{fun} will be removed, use\\n\\n  yaml=YAML({arg})\\n  yaml.{method}(...)\\n\\ninstead'", "superfluous": "()", "kw": "{'fun': 'safe_load', 'method': 'load', 'arg': \"typ='safe', pure=True\"}"}, "return_value": "\"\\nsafe_load will be removed, use\\n\\n  yaml=YAML(typ='safe', pure=True)\\n  yaml.load(...)\\n\\ninstead\""}, {"func_args": {"s": "'\\n{fun} will be removed, use\\n\\n  yaml=YAML({arg})\\n  yaml.{method}(...)\\n\\ninstead'", "superfluous": "()", "kw": "{'fun': 'load', 'method': 'load', 'arg': \"typ='unsafe', pure=True\"}"}, "return_value": "\"\\nload will be removed, use\\n\\n  yaml=YAML(typ='unsafe', pure=True)\\n  yaml.load(...)\\n\\ninstead\""}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'StreamStartEvent', 'arguments': ''}"}, "return_value": "'StreamStartEvent()'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'DocumentStartEvent', 'arguments': ''}"}, "return_value": "'DocumentStartEvent()'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': True}"}, "return_value": "'implicit=True'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'flow_style', 'v': False}"}, "return_value": "'flow_style=False'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingStartEvent', 'arguments': 'implicit=True, flow_style=False'}"}, "return_value": "'MappingStartEvent(implicit=True, flow_style=False)'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'workflows', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('workflows', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': True}"}, "return_value": "'implicit=True'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'flow_style', 'v': False}"}, "return_value": "'flow_style=False'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'SequenceStartEvent', 'arguments': 'implicit=True, flow_style=False'}"}, "return_value": "'SequenceStartEvent(implicit=True, flow_style=False)'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'./examples', implicit=(True, False), comment=[CommentToken('\\\\n\\\\n', line: 2, col: 4), None]\"}"}, "return_value": "\"ScalarEvent('./examples', implicit=(True, False), comment=[CommentToken('\\\\n\\\\n', line: 2, col: 4), None])\""}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'SequenceEndEvent', 'arguments': ''}"}, "return_value": "'SequenceEndEvent()'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'libraries', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('libraries', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': True}"}, "return_value": "'implicit=True'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'flow_style', 'v': True}"}, "return_value": "'flow_style=True'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'SequenceStartEvent', 'arguments': 'implicit=True, flow_style=True'}"}, "return_value": "'SequenceStartEvent(implicit=True, flow_style=True)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'SequenceEndEvent', 'arguments': ''}"}, "return_value": "'SequenceEndEvent()'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'celery', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('celery', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': True}"}, "return_value": "'implicit=True'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'flow_style', 'v': False}"}, "return_value": "'flow_style=False'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingStartEvent', 'arguments': 'implicit=True, flow_style=False'}"}, "return_value": "'MappingStartEvent(implicit=True, flow_style=False)'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'broker_url', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('broker_url', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'redis://localhost:6379/0', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('redis://localhost:6379/0', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'result_backend', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('result_backend', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'redis://localhost:6379/0', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('redis://localhost:6379/0', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'worker_concurrency', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('worker_concurrency', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'8', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('8', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'result_expires', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('result_expires', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'0', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('0', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'worker_send_task_events', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('worker_send_task_events', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'True', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('True', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'worker_prefetch_multiplier', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('worker_prefetch_multiplier', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'1', implicit=(True, False), comment=[CommentToken('\\\\n\\\\n', line: 12, col: 30), None]\"}"}, "return_value": "\"ScalarEvent('1', implicit=(True, False), comment=[CommentToken('\\\\n\\\\n', line: 12, col: 30), None])\""}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingEndEvent', 'arguments': ''}"}, "return_value": "'MappingEndEvent()'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'signal', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('signal', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': True}"}, "return_value": "'implicit=True'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'flow_style', 'v': False}"}, "return_value": "'flow_style=False'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingStartEvent', 'arguments': 'implicit=True, flow_style=False'}"}, "return_value": "'MappingStartEvent(implicit=True, flow_style=False)'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'host', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('host', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'localhost', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('localhost', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'port', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('port', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'6379', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('6379', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'password', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('password', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'null', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('null', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'database', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('database', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'0', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('0', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'polling_time', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('polling_time', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'0.5', implicit=(True, False), comment=[CommentToken('\\\\n\\\\n', line: 19, col: 16), None]\"}"}, "return_value": "\"ScalarEvent('0.5', implicit=(True, False), comment=[CommentToken('\\\\n\\\\n', line: 19, col: 16), None])\""}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingEndEvent', 'arguments': ''}"}, "return_value": "'MappingEndEvent()'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'store', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('store', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': True}"}, "return_value": "'implicit=True'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'flow_style', 'v': False}"}, "return_value": "'flow_style=False'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingStartEvent', 'arguments': 'implicit=True, flow_style=False'}"}, "return_value": "'MappingStartEvent(implicit=True, flow_style=False)'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'host', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('host', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'localhost', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('localhost', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'port', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('port', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'27017', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('27017', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'database', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('database', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'lightflow', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('lightflow', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'username', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('username', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'null', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('null', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'password', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('password', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'null', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('null', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'auth_source', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('auth_source', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'admin', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('admin', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'auth_mechanism', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('auth_mechanism', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'null', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('null', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'connect_timeout', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('connect_timeout', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'30000', implicit=(True, False), comment=[CommentToken('\\\\n\\\\n', line: 29, col: 19), None]\"}"}, "return_value": "\"ScalarEvent('30000', implicit=(True, False), comment=[CommentToken('\\\\n\\\\n', line: 29, col: 19), None])\""}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingEndEvent', 'arguments': ''}"}, "return_value": "'MappingEndEvent()'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'graph', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('graph', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': True}"}, "return_value": "'implicit=True'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'flow_style', 'v': False}"}, "return_value": "'flow_style=False'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingStartEvent', 'arguments': 'implicit=True, flow_style=False'}"}, "return_value": "'MappingStartEvent(implicit=True, flow_style=False)'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'workflow_polling_time', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('workflow_polling_time', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'0.5', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('0.5', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'dag_polling_time', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('dag_polling_time', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'0.5', implicit=(True, False), comment=[CommentToken('\\\\n\\\\n', line: 33, col: 20), None]\"}"}, "return_value": "\"ScalarEvent('0.5', implicit=(True, False), comment=[CommentToken('\\\\n\\\\n', line: 33, col: 20), None])\""}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingEndEvent', 'arguments': ''}"}, "return_value": "'MappingEndEvent()'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'cli', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('cli', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': True}"}, "return_value": "'implicit=True'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'flow_style', 'v': False}"}, "return_value": "'flow_style=False'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingStartEvent', 'arguments': 'implicit=True, flow_style=False'}"}, "return_value": "'MappingStartEvent(implicit=True, flow_style=False)'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'time_format', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('time_format', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (False, True)}"}, "return_value": "'implicit=(False, True)'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'style', 'v': \"'\"}"}, "return_value": "'style=\"\\'\"'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': '\\'%d/%m/%Y %H:%M:%S\\', implicit=(False, True), style=\"\\'\"'}"}, "return_value": "'ScalarEvent(\\'%d/%m/%Y %H:%M:%S\\', implicit=(False, True), style=\"\\'\")'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingEndEvent', 'arguments': ''}"}, "return_value": "'MappingEndEvent()'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'extensions', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('extensions', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': True}"}, "return_value": "'implicit=True'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'flow_style', 'v': True}"}, "return_value": "'flow_style=True'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingStartEvent', 'arguments': 'implicit=True, flow_style=True'}"}, "return_value": "'MappingStartEvent(implicit=True, flow_style=True)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingEndEvent', 'arguments': ''}"}, "return_value": "'MappingEndEvent()'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'logging', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('logging', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': True}"}, "return_value": "'implicit=True'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'flow_style', 'v': False}"}, "return_value": "'flow_style=False'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingStartEvent', 'arguments': 'implicit=True, flow_style=False'}"}, "return_value": "'MappingStartEvent(implicit=True, flow_style=False)'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'version', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('version', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'1', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('1', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'disable_existing_loggers', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('disable_existing_loggers', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'false', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('false', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'formatters', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('formatters', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': True}"}, "return_value": "'implicit=True'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'flow_style', 'v': False}"}, "return_value": "'flow_style=False'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingStartEvent', 'arguments': 'implicit=True, flow_style=False'}"}, "return_value": "'MappingStartEvent(implicit=True, flow_style=False)'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'verbose', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('verbose', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': True}"}, "return_value": "'implicit=True'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'flow_style', 'v': False}"}, "return_value": "'flow_style=False'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingStartEvent', 'arguments': 'implicit=True, flow_style=False'}"}, "return_value": "'MappingStartEvent(implicit=True, flow_style=False)'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'format', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('format', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (False, True)}"}, "return_value": "'implicit=(False, True)'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'style', 'v': \"'\"}"}, "return_value": "'style=\"\\'\"'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': '\\'[%(asctime)s][%(levelname)s] %(name)s %(filename)s:%(funcName)s:%(lineno)d | %(message)s\\', implicit=(False, True), style=\"\\'\"'}"}, "return_value": "'ScalarEvent(\\'[%(asctime)s][%(levelname)s] %(name)s %(filename)s:%(funcName)s:%(lineno)d | %(message)s\\', implicit=(False, True), style=\"\\'\")'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'datefmt', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('datefmt', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (False, True)}"}, "return_value": "'implicit=(False, True)'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'style', 'v': \"'\"}"}, "return_value": "'style=\"\\'\"'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': '\\'%d/%m/%Y %H:%M:%S\\', implicit=(False, True), style=\"\\'\"'}"}, "return_value": "'ScalarEvent(\\'%d/%m/%Y %H:%M:%S\\', implicit=(False, True), style=\"\\'\")'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingEndEvent', 'arguments': ''}"}, "return_value": "'MappingEndEvent()'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'simple', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('simple', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': True}"}, "return_value": "'implicit=True'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'flow_style', 'v': False}"}, "return_value": "'flow_style=False'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingStartEvent', 'arguments': 'implicit=True, flow_style=False'}"}, "return_value": "'MappingStartEvent(implicit=True, flow_style=False)'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'()', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('()', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (False, True)}"}, "return_value": "'implicit=(False, True)'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'style', 'v': \"'\"}"}, "return_value": "'style=\"\\'\"'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': '\\'colorlog.ColoredFormatter\\', implicit=(False, True), style=\"\\'\"'}"}, "return_value": "'ScalarEvent(\\'colorlog.ColoredFormatter\\', implicit=(False, True), style=\"\\'\")'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'format', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('format', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (False, True)}"}, "return_value": "'implicit=(False, True)'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'style', 'v': \"'\"}"}, "return_value": "'style=\"\\'\"'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': '\\'%(log_color)s[%(asctime)s][%(levelname)s] %(blue)s%(processName)s%(reset)s | %(message)s\\', implicit=(False, True), style=\"\\'\"'}"}, "return_value": "'ScalarEvent(\\'%(log_color)s[%(asctime)s][%(levelname)s] %(blue)s%(processName)s%(reset)s | %(message)s\\', implicit=(False, True), style=\"\\'\")'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'datefmt', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('datefmt', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (False, True)}"}, "return_value": "'implicit=(False, True)'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'style', 'v': \"'\"}"}, "return_value": "'style=\"\\'\"'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': '\\'%d/%m/%Y %H:%M:%S\\', implicit=(False, True), style=\"\\'\"'}"}, "return_value": "'ScalarEvent(\\'%d/%m/%Y %H:%M:%S\\', implicit=(False, True), style=\"\\'\")'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingEndEvent', 'arguments': ''}"}, "return_value": "'MappingEndEvent()'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingEndEvent', 'arguments': ''}"}, "return_value": "'MappingEndEvent()'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'handlers', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('handlers', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': True}"}, "return_value": "'implicit=True'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'flow_style', 'v': False}"}, "return_value": "'flow_style=False'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingStartEvent', 'arguments': 'implicit=True, flow_style=False'}"}, "return_value": "'MappingStartEvent(implicit=True, flow_style=False)'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'console', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('console', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': True}"}, "return_value": "'implicit=True'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'flow_style', 'v': False}"}, "return_value": "'flow_style=False'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingStartEvent', 'arguments': 'implicit=True, flow_style=False'}"}, "return_value": "'MappingStartEvent(implicit=True, flow_style=False)'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'class', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('class', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'logging.StreamHandler', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('logging.StreamHandler', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'level', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('level', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'INFO', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('INFO', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'formatter', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('formatter', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'simple', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('simple', implicit=(True, False))\""}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingEndEvent', 'arguments': ''}"}, "return_value": "'MappingEndEvent()'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingEndEvent', 'arguments': ''}"}, "return_value": "'MappingEndEvent()'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'loggers', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('loggers', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': True}"}, "return_value": "'implicit=True'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'flow_style', 'v': False}"}, "return_value": "'flow_style=False'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingStartEvent', 'arguments': 'implicit=True, flow_style=False'}"}, "return_value": "'MappingStartEvent(implicit=True, flow_style=False)'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'celery', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('celery', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': True}"}, "return_value": "'implicit=True'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'flow_style', 'v': False}"}, "return_value": "'flow_style=False'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingStartEvent', 'arguments': 'implicit=True, flow_style=False'}"}, "return_value": "'MappingStartEvent(implicit=True, flow_style=False)'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'handlers', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('handlers', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': True}"}, "return_value": "'implicit=True'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'flow_style', 'v': False}"}, "return_value": "'flow_style=False'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'SequenceStartEvent', 'arguments': 'implicit=True, flow_style=False'}"}, "return_value": "'SequenceStartEvent(implicit=True, flow_style=False)'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'console', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('console', implicit=(True, False))\""}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'SequenceEndEvent', 'arguments': ''}"}, "return_value": "'SequenceEndEvent()'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'level', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('level', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'INFO', implicit=(True, False), comment=[CommentToken('\\\\n\\\\n', line: 60, col: 13), None]\"}"}, "return_value": "\"ScalarEvent('INFO', implicit=(True, False), comment=[CommentToken('\\\\n\\\\n', line: 60, col: 13), None])\""}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingEndEvent', 'arguments': ''}"}, "return_value": "'MappingEndEvent()'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'root', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('root', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': True}"}, "return_value": "'implicit=True'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'flow_style', 'v': False}"}, "return_value": "'flow_style=False'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingStartEvent', 'arguments': 'implicit=True, flow_style=False'}"}, "return_value": "'MappingStartEvent(implicit=True, flow_style=False)'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'handlers', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('handlers', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': True}"}, "return_value": "'implicit=True'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'flow_style', 'v': False}"}, "return_value": "'flow_style=False'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'SequenceStartEvent', 'arguments': 'implicit=True, flow_style=False'}"}, "return_value": "'SequenceStartEvent(implicit=True, flow_style=False)'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'console', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('console', implicit=(True, False))\""}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'SequenceEndEvent', 'arguments': ''}"}, "return_value": "'SequenceEndEvent()'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'level', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('level', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'INFO', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('INFO', implicit=(True, False))\""}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingEndEvent', 'arguments': ''}"}, "return_value": "'MappingEndEvent()'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingEndEvent', 'arguments': ''}"}, "return_value": "'MappingEndEvent()'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingEndEvent', 'arguments': ''}"}, "return_value": "'MappingEndEvent()'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingEndEvent', 'arguments': ''}"}, "return_value": "'MappingEndEvent()'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'DocumentEndEvent', 'arguments': ''}"}, "return_value": "'DocumentEndEvent()'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'StreamEndEvent', 'arguments': ''}"}, "return_value": "'StreamEndEvent()'"}, {"func_args": {"s": "'\\n{fun} will be removed, use\\n\\n  yaml=YAML({arg})\\n  yaml.{method}(...)\\n\\ninstead'", "superfluous": "()", "kw": "{'fun': 'safe_load', 'method': 'load', 'arg': \"typ='safe', pure=True\"}"}, "return_value": "\"\\nsafe_load will be removed, use\\n\\n  yaml=YAML(typ='safe', pure=True)\\n  yaml.load(...)\\n\\ninstead\""}, {"func_args": {"s": "'\\n{fun} will be removed, use\\n\\n  yaml=YAML({arg})\\n  yaml.{method}(...)\\n\\ninstead'", "superfluous": "()", "kw": "{'fun': 'load', 'method': 'load', 'arg': \"typ='unsafe', pure=True\"}"}, "return_value": "\"\\nload will be removed, use\\n\\n  yaml=YAML(typ='unsafe', pure=True)\\n  yaml.load(...)\\n\\ninstead\""}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'StreamStartEvent', 'arguments': ''}"}, "return_value": "'StreamStartEvent()'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'DocumentStartEvent', 'arguments': ''}"}, "return_value": "'DocumentStartEvent()'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': True}"}, "return_value": "'implicit=True'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'flow_style', 'v': False}"}, "return_value": "'flow_style=False'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingStartEvent', 'arguments': 'implicit=True, flow_style=False'}"}, "return_value": "'MappingStartEvent(implicit=True, flow_style=False)'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'workflows', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('workflows', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': True}"}, "return_value": "'implicit=True'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'flow_style', 'v': False}"}, "return_value": "'flow_style=False'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'SequenceStartEvent', 'arguments': 'implicit=True, flow_style=False'}"}, "return_value": "'SequenceStartEvent(implicit=True, flow_style=False)'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'./examples', implicit=(True, False), comment=[CommentToken('\\\\n\\\\n', line: 2, col: 4), None]\"}"}, "return_value": "\"ScalarEvent('./examples', implicit=(True, False), comment=[CommentToken('\\\\n\\\\n', line: 2, col: 4), None])\""}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'SequenceEndEvent', 'arguments': ''}"}, "return_value": "'SequenceEndEvent()'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'libraries', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('libraries', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': True}"}, "return_value": "'implicit=True'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'flow_style', 'v': True}"}, "return_value": "'flow_style=True'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'SequenceStartEvent', 'arguments': 'implicit=True, flow_style=True'}"}, "return_value": "'SequenceStartEvent(implicit=True, flow_style=True)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'SequenceEndEvent', 'arguments': ''}"}, "return_value": "'SequenceEndEvent()'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'celery', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('celery', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': True}"}, "return_value": "'implicit=True'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'flow_style', 'v': False}"}, "return_value": "'flow_style=False'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingStartEvent', 'arguments': 'implicit=True, flow_style=False'}"}, "return_value": "'MappingStartEvent(implicit=True, flow_style=False)'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'broker_url', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('broker_url', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'redis://localhost:6379/0', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('redis://localhost:6379/0', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'result_backend', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('result_backend', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'redis://localhost:6379/0', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('redis://localhost:6379/0', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'worker_concurrency', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('worker_concurrency', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'8', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('8', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'result_expires', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('result_expires', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'0', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('0', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'worker_send_task_events', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('worker_send_task_events', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'True', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('True', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'worker_prefetch_multiplier', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('worker_prefetch_multiplier', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'1', implicit=(True, False), comment=[CommentToken('\\\\n\\\\n', line: 12, col: 30), None]\"}"}, "return_value": "\"ScalarEvent('1', implicit=(True, False), comment=[CommentToken('\\\\n\\\\n', line: 12, col: 30), None])\""}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingEndEvent', 'arguments': ''}"}, "return_value": "'MappingEndEvent()'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'signal', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('signal', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': True}"}, "return_value": "'implicit=True'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'flow_style', 'v': False}"}, "return_value": "'flow_style=False'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingStartEvent', 'arguments': 'implicit=True, flow_style=False'}"}, "return_value": "'MappingStartEvent(implicit=True, flow_style=False)'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'host', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('host', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'localhost', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('localhost', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'port', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('port', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'6379', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('6379', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'password', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('password', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'null', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('null', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'database', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('database', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'0', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('0', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'polling_time', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('polling_time', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'0.5', implicit=(True, False), comment=[CommentToken('\\\\n\\\\n', line: 19, col: 16), None]\"}"}, "return_value": "\"ScalarEvent('0.5', implicit=(True, False), comment=[CommentToken('\\\\n\\\\n', line: 19, col: 16), None])\""}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingEndEvent', 'arguments': ''}"}, "return_value": "'MappingEndEvent()'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'store', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('store', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': True}"}, "return_value": "'implicit=True'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'flow_style', 'v': False}"}, "return_value": "'flow_style=False'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingStartEvent', 'arguments': 'implicit=True, flow_style=False'}"}, "return_value": "'MappingStartEvent(implicit=True, flow_style=False)'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'host', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('host', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'localhost', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('localhost', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'port', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('port', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'27017', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('27017', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'database', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('database', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'lightflow', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('lightflow', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'username', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('username', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'null', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('null', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'password', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('password', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'null', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('null', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'auth_source', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('auth_source', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'admin', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('admin', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'auth_mechanism', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('auth_mechanism', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'null', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('null', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'connect_timeout', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('connect_timeout', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'30000', implicit=(True, False), comment=[CommentToken('\\\\n\\\\n', line: 29, col: 19), None]\"}"}, "return_value": "\"ScalarEvent('30000', implicit=(True, False), comment=[CommentToken('\\\\n\\\\n', line: 29, col: 19), None])\""}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingEndEvent', 'arguments': ''}"}, "return_value": "'MappingEndEvent()'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'graph', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('graph', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': True}"}, "return_value": "'implicit=True'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'flow_style', 'v': False}"}, "return_value": "'flow_style=False'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingStartEvent', 'arguments': 'implicit=True, flow_style=False'}"}, "return_value": "'MappingStartEvent(implicit=True, flow_style=False)'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'workflow_polling_time', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('workflow_polling_time', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'0.5', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('0.5', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'dag_polling_time', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('dag_polling_time', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'0.5', implicit=(True, False), comment=[CommentToken('\\\\n\\\\n', line: 33, col: 20), None]\"}"}, "return_value": "\"ScalarEvent('0.5', implicit=(True, False), comment=[CommentToken('\\\\n\\\\n', line: 33, col: 20), None])\""}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingEndEvent', 'arguments': ''}"}, "return_value": "'MappingEndEvent()'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'cli', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('cli', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': True}"}, "return_value": "'implicit=True'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'flow_style', 'v': False}"}, "return_value": "'flow_style=False'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingStartEvent', 'arguments': 'implicit=True, flow_style=False'}"}, "return_value": "'MappingStartEvent(implicit=True, flow_style=False)'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'time_format', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('time_format', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (False, True)}"}, "return_value": "'implicit=(False, True)'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'style', 'v': \"'\"}"}, "return_value": "'style=\"\\'\"'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': '\\'%d/%m/%Y %H:%M:%S\\', implicit=(False, True), style=\"\\'\"'}"}, "return_value": "'ScalarEvent(\\'%d/%m/%Y %H:%M:%S\\', implicit=(False, True), style=\"\\'\")'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingEndEvent', 'arguments': ''}"}, "return_value": "'MappingEndEvent()'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'extensions', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('extensions', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': True}"}, "return_value": "'implicit=True'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'flow_style', 'v': True}"}, "return_value": "'flow_style=True'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingStartEvent', 'arguments': 'implicit=True, flow_style=True'}"}, "return_value": "'MappingStartEvent(implicit=True, flow_style=True)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingEndEvent', 'arguments': ''}"}, "return_value": "'MappingEndEvent()'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'logging', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('logging', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': True}"}, "return_value": "'implicit=True'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'flow_style', 'v': False}"}, "return_value": "'flow_style=False'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingStartEvent', 'arguments': 'implicit=True, flow_style=False'}"}, "return_value": "'MappingStartEvent(implicit=True, flow_style=False)'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'version', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('version', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'1', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('1', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'disable_existing_loggers', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('disable_existing_loggers', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'false', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('false', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'formatters', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('formatters', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': True}"}, "return_value": "'implicit=True'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'flow_style', 'v': False}"}, "return_value": "'flow_style=False'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingStartEvent', 'arguments': 'implicit=True, flow_style=False'}"}, "return_value": "'MappingStartEvent(implicit=True, flow_style=False)'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'verbose', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('verbose', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': True}"}, "return_value": "'implicit=True'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'flow_style', 'v': False}"}, "return_value": "'flow_style=False'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingStartEvent', 'arguments': 'implicit=True, flow_style=False'}"}, "return_value": "'MappingStartEvent(implicit=True, flow_style=False)'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'format', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('format', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (False, True)}"}, "return_value": "'implicit=(False, True)'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'style', 'v': \"'\"}"}, "return_value": "'style=\"\\'\"'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': '\\'[%(asctime)s][%(levelname)s] %(name)s %(filename)s:%(funcName)s:%(lineno)d | %(message)s\\', implicit=(False, True), style=\"\\'\"'}"}, "return_value": "'ScalarEvent(\\'[%(asctime)s][%(levelname)s] %(name)s %(filename)s:%(funcName)s:%(lineno)d | %(message)s\\', implicit=(False, True), style=\"\\'\")'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'datefmt', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('datefmt', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (False, True)}"}, "return_value": "'implicit=(False, True)'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'style', 'v': \"'\"}"}, "return_value": "'style=\"\\'\"'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': '\\'%d/%m/%Y %H:%M:%S\\', implicit=(False, True), style=\"\\'\"'}"}, "return_value": "'ScalarEvent(\\'%d/%m/%Y %H:%M:%S\\', implicit=(False, True), style=\"\\'\")'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingEndEvent', 'arguments': ''}"}, "return_value": "'MappingEndEvent()'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'simple', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('simple', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': True}"}, "return_value": "'implicit=True'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'flow_style', 'v': False}"}, "return_value": "'flow_style=False'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingStartEvent', 'arguments': 'implicit=True, flow_style=False'}"}, "return_value": "'MappingStartEvent(implicit=True, flow_style=False)'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'()', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('()', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (False, True)}"}, "return_value": "'implicit=(False, True)'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'style', 'v': \"'\"}"}, "return_value": "'style=\"\\'\"'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': '\\'colorlog.ColoredFormatter\\', implicit=(False, True), style=\"\\'\"'}"}, "return_value": "'ScalarEvent(\\'colorlog.ColoredFormatter\\', implicit=(False, True), style=\"\\'\")'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'format', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('format', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (False, True)}"}, "return_value": "'implicit=(False, True)'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'style', 'v': \"'\"}"}, "return_value": "'style=\"\\'\"'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': '\\'%(log_color)s[%(asctime)s][%(levelname)s] %(blue)s%(processName)s%(reset)s | %(message)s\\', implicit=(False, True), style=\"\\'\"'}"}, "return_value": "'ScalarEvent(\\'%(log_color)s[%(asctime)s][%(levelname)s] %(blue)s%(processName)s%(reset)s | %(message)s\\', implicit=(False, True), style=\"\\'\")'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'datefmt', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('datefmt', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (False, True)}"}, "return_value": "'implicit=(False, True)'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'style', 'v': \"'\"}"}, "return_value": "'style=\"\\'\"'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': '\\'%d/%m/%Y %H:%M:%S\\', implicit=(False, True), style=\"\\'\"'}"}, "return_value": "'ScalarEvent(\\'%d/%m/%Y %H:%M:%S\\', implicit=(False, True), style=\"\\'\")'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingEndEvent', 'arguments': ''}"}, "return_value": "'MappingEndEvent()'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingEndEvent', 'arguments': ''}"}, "return_value": "'MappingEndEvent()'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'handlers', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('handlers', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': True}"}, "return_value": "'implicit=True'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'flow_style', 'v': False}"}, "return_value": "'flow_style=False'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingStartEvent', 'arguments': 'implicit=True, flow_style=False'}"}, "return_value": "'MappingStartEvent(implicit=True, flow_style=False)'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'console', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('console', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': True}"}, "return_value": "'implicit=True'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'flow_style', 'v': False}"}, "return_value": "'flow_style=False'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingStartEvent', 'arguments': 'implicit=True, flow_style=False'}"}, "return_value": "'MappingStartEvent(implicit=True, flow_style=False)'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'class', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('class', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'logging.StreamHandler', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('logging.StreamHandler', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'level', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('level', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'INFO', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('INFO', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'formatter', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('formatter', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'simple', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('simple', implicit=(True, False))\""}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingEndEvent', 'arguments': ''}"}, "return_value": "'MappingEndEvent()'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingEndEvent', 'arguments': ''}"}, "return_value": "'MappingEndEvent()'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'loggers', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('loggers', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': True}"}, "return_value": "'implicit=True'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'flow_style', 'v': False}"}, "return_value": "'flow_style=False'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingStartEvent', 'arguments': 'implicit=True, flow_style=False'}"}, "return_value": "'MappingStartEvent(implicit=True, flow_style=False)'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'celery', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('celery', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': True}"}, "return_value": "'implicit=True'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'flow_style', 'v': False}"}, "return_value": "'flow_style=False'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingStartEvent', 'arguments': 'implicit=True, flow_style=False'}"}, "return_value": "'MappingStartEvent(implicit=True, flow_style=False)'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'handlers', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('handlers', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': True}"}, "return_value": "'implicit=True'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'flow_style', 'v': False}"}, "return_value": "'flow_style=False'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'SequenceStartEvent', 'arguments': 'implicit=True, flow_style=False'}"}, "return_value": "'SequenceStartEvent(implicit=True, flow_style=False)'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'console', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('console', implicit=(True, False))\""}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'SequenceEndEvent', 'arguments': ''}"}, "return_value": "'SequenceEndEvent()'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'level', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('level', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'INFO', implicit=(True, False), comment=[CommentToken('\\\\n\\\\n', line: 60, col: 13), None]\"}"}, "return_value": "\"ScalarEvent('INFO', implicit=(True, False), comment=[CommentToken('\\\\n\\\\n', line: 60, col: 13), None])\""}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingEndEvent', 'arguments': ''}"}, "return_value": "'MappingEndEvent()'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'root', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('root', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': True}"}, "return_value": "'implicit=True'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'flow_style', 'v': False}"}, "return_value": "'flow_style=False'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingStartEvent', 'arguments': 'implicit=True, flow_style=False'}"}, "return_value": "'MappingStartEvent(implicit=True, flow_style=False)'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'handlers', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('handlers', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': True}"}, "return_value": "'implicit=True'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'flow_style', 'v': False}"}, "return_value": "'flow_style=False'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'SequenceStartEvent', 'arguments': 'implicit=True, flow_style=False'}"}, "return_value": "'SequenceStartEvent(implicit=True, flow_style=False)'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'console', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('console', implicit=(True, False))\""}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'SequenceEndEvent', 'arguments': ''}"}, "return_value": "'SequenceEndEvent()'"}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'level', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('level', implicit=(True, False))\""}, {"func_args": {"s": "'{key!s}={v!r}'", "superfluous": "()", "kw": "{'key': 'implicit', 'v': (True, False)}"}, "return_value": "'implicit=(True, False)'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'ScalarEvent', 'arguments': \"'INFO', implicit=(True, False)\"}"}, "return_value": "\"ScalarEvent('INFO', implicit=(True, False))\""}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingEndEvent', 'arguments': ''}"}, "return_value": "'MappingEndEvent()'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingEndEvent', 'arguments': ''}"}, "return_value": "'MappingEndEvent()'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingEndEvent', 'arguments': ''}"}, "return_value": "'MappingEndEvent()'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'MappingEndEvent', 'arguments': ''}"}, "return_value": "'MappingEndEvent()'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'DocumentEndEvent', 'arguments': ''}"}, "return_value": "'DocumentEndEvent()'"}, {"func_args": {"s": "'{self_class_name!s}({arguments!s})'", "superfluous": "()", "kw": "{'self_class_name': 'StreamEndEvent', 'arguments': ''}"}, "return_value": "'StreamEndEvent()'"}], "text": "def _F(s, *superfluous, **kw):\n    # type: (Any, Any, Any) -> Any\n    if superfluous:\n        raise TypeError\n    return s.format(**kw)"}, "version_tnf": {"line": 196, "args": [{"func_args": {"t1": "(0, 15, 1)", "t2": "(0, 16)"}, "return_value": "False"}, {"func_args": {"t1": "(0, 15, 1)", "t2": "(0, 16)"}, "return_value": "False"}], "text": "def version_tnf(t1, t2=None):\n    # type: (Any, Any) -> Any\n    \"\"\"\n    return True if ruamel.yaml version_info < t1, None if t2 is specified and bigger else False\n    \"\"\"\n    from ruamel.yaml import version_info  # NOQA\n\n    if version_info < t1:\n        return True\n    if t2 is not None and version_info < t2:\n        return None\n    return False"}, "safe_load": {"line": 1109, "args": [{"func_args": {"stream": "\"\\nworkflows:\\n  - ./examples\\n\\nlibraries: []\\n\\ncelery:\\n  broker_url: redis://localhost:6379/0\\n  result_backend: redis://localhost:6379/0\\n  worker_concurrency: 8\\n  result_expires: 0\\n  worker_send_task_events: True\\n  worker_prefetch_multiplier: 1\\n\\nsignal:\\n  host: localhost\\n  port: 6379\\n  password: null\\n  database: 0\\n  polling_time: 0.5\\n\\nstore:\\n  host: localhost\\n  port: 27017\\n  database: lightflow\\n  username: null\\n  password: null\\n  auth_source: admin\\n  auth_mechanism: null\\n  connect_timeout: 30000\\n\\ngraph:\\n  workflow_polling_time: 0.5\\n  dag_polling_time: 0.5\\n\\ncli:\\n  time_format: '%d/%m/%Y %H:%M:%S'\\n\\nextensions: {}\\n\\nlogging:\\n  version: 1\\n  disable_existing_loggers: false\\n  formatters:\\n    verbose:\\n      format: '[%(asctime)s][%(levelname)s] %(name)s %(filename)s:%(funcName)s:%(lineno)d | %(message)s'\\n      datefmt: '%d/%m/%Y %H:%M:%S'\\n    simple:\\n      (): 'colorlog.ColoredFormatter'\\n      format: '%(log_color)s[%(asctime)s][%(levelname)s] %(blue)s%(processName)s%(reset)s | %(message)s'\\n      datefmt: '%d/%m/%Y %H:%M:%S'\\n  handlers:\\n    console:\\n      class: logging.StreamHandler\\n      level: INFO\\n      formatter: simple\\n  loggers:\\n    celery:\\n      handlers:\\n        - console\\n      level: INFO\\n\\n    root:\\n      handlers:\\n        - console\\n      level: INFO\\n    \"", "version": "None"}, "return_value": "{'workflows': ['./examples'], 'libraries': [], 'celery': {'broker_url': 'redis://localhost:6379/0', 'result_backend': 'redis://localhost:6379/0', 'worker_concurrency': 8, 'result_expires': 0, 'worker_send_task_events': True, 'worker_prefetch_multiplier': 1}, 'signal': {'host': 'localhost', 'port': 6379, 'password': None, 'database': 0, 'polling_time': 0.5}, 'store': {'host': 'localhost', 'port': 27017, 'database': 'lightflow', 'username': None, 'password': None, 'auth_source': 'admin', 'auth_mechanism': None, 'connect_timeout': 30000}, 'graph': {'workflow_polling_time': 0.5, 'dag_polling_time': 0.5}, 'cli': {'time_format': '%d/%m/%Y %H:%M:%S'}, 'extensions': {}, 'logging': {'version': 1, 'disable_existing_loggers': False, 'formatters': {'verbose': {'format': '[%(asctime)s][%(levelname)s] %(name)s %(filename)s:%(funcName)s:%(lineno)d | %(message)s', 'datefmt': '%d/%m/%Y %H:%M:%S'}, 'simple': {'()': 'colorlog.ColoredFormatter', 'format': '%(log_color)s[%(asctime)s][%(levelname)s] %(blue)s%(processName)s%(reset)s | %(message)s', 'datefmt': '%d/%m/%Y %H:%M:%S'}}, 'handlers': {'console': {'class': 'logging.StreamHandler', 'level': 'INFO', 'formatter': 'simple'}}, 'loggers': {'celery': {'handlers': ['console'], 'level': 'INFO'}, 'root': {'handlers': ['console'], 'level': 'INFO'}}}}"}, {"func_args": {"stream": "\"\\nworkflows:\\n  - ./examples\\n\\nlibraries: []\\n\\ncelery:\\n  broker_url: redis://localhost:6379/0\\n  result_backend: redis://localhost:6379/0\\n  worker_concurrency: 8\\n  result_expires: 0\\n  worker_send_task_events: True\\n  worker_prefetch_multiplier: 1\\n\\nsignal:\\n  host: localhost\\n  port: 6379\\n  password: null\\n  database: 0\\n  polling_time: 0.5\\n\\nstore:\\n  host: localhost\\n  port: 27017\\n  database: lightflow\\n  username: null\\n  password: null\\n  auth_source: admin\\n  auth_mechanism: null\\n  connect_timeout: 30000\\n\\ngraph:\\n  workflow_polling_time: 0.5\\n  dag_polling_time: 0.5\\n\\ncli:\\n  time_format: '%d/%m/%Y %H:%M:%S'\\n\\nextensions: {}\\n\\nlogging:\\n  version: 1\\n  disable_existing_loggers: false\\n  formatters:\\n    verbose:\\n      format: '[%(asctime)s][%(levelname)s] %(name)s %(filename)s:%(funcName)s:%(lineno)d | %(message)s'\\n      datefmt: '%d/%m/%Y %H:%M:%S'\\n    simple:\\n      (): 'colorlog.ColoredFormatter'\\n      format: '%(log_color)s[%(asctime)s][%(levelname)s] %(blue)s%(processName)s%(reset)s | %(message)s'\\n      datefmt: '%d/%m/%Y %H:%M:%S'\\n  handlers:\\n    console:\\n      class: logging.StreamHandler\\n      level: INFO\\n      formatter: simple\\n  loggers:\\n    celery:\\n      handlers:\\n        - console\\n      level: INFO\\n\\n    root:\\n      handlers:\\n        - console\\n      level: INFO\\n    \"", "version": "None"}, "return_value": "{'workflows': ['./examples'], 'libraries': [], 'celery': {'broker_url': 'redis://localhost:6379/0', 'result_backend': 'redis://localhost:6379/0', 'worker_concurrency': 8, 'result_expires': 0, 'worker_send_task_events': True, 'worker_prefetch_multiplier': 1}, 'signal': {'host': 'localhost', 'port': 6379, 'password': None, 'database': 0, 'polling_time': 0.5}, 'store': {'host': 'localhost', 'port': 27017, 'database': 'lightflow', 'username': None, 'password': None, 'auth_source': 'admin', 'auth_mechanism': None, 'connect_timeout': 30000}, 'graph': {'workflow_polling_time': 0.5, 'dag_polling_time': 0.5}, 'cli': {'time_format': '%d/%m/%Y %H:%M:%S'}, 'extensions': {}, 'logging': {'version': 1, 'disable_existing_loggers': False, 'formatters': {'verbose': {'format': '[%(asctime)s][%(levelname)s] %(name)s %(filename)s:%(funcName)s:%(lineno)d | %(message)s', 'datefmt': '%d/%m/%Y %H:%M:%S'}, 'simple': {'()': 'colorlog.ColoredFormatter', 'format': '%(log_color)s[%(asctime)s][%(levelname)s] %(blue)s%(processName)s%(reset)s | %(message)s', 'datefmt': '%d/%m/%Y %H:%M:%S'}}, 'handlers': {'console': {'class': 'logging.StreamHandler', 'level': 'INFO', 'formatter': 'simple'}}, 'loggers': {'celery': {'handlers': ['console'], 'level': 'INFO'}, 'root': {'handlers': ['console'], 'level': 'INFO'}}}}"}], "text": "def safe_load(stream, version=None):\n    # type: (StreamTextType, Optional[VersionType]) -> Any\n    \"\"\"\n    Parse the first YAML document in a stream\n    and produce the corresponding Python object.\n    Resolve only basic YAML tags.\n    \"\"\"\n    warn_deprecation('safe_load', 'load', arg=\"typ='safe', pure=True\")\n    return load(stream, SafeLoader, version)"}}