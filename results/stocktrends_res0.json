{"_args_converter": {"line": 816, "args": [{"func_args": {"args": "['tests']"}, "return_value": "('tests',)"}], "text": "def _args_converter(args: Iterable[str]) -> Tuple[str, ...]:\n    return tuple(args)"}, "_get_plugin_specs_as_list": {"line": 715, "args": [{"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "[]"}, "return_value": "[]"}, {"func_args": {"specs": "None"}, "return_value": "[]"}], "text": "def _get_plugin_specs_as_list(\n    specs: Union[None, types.ModuleType, str, Sequence[str]]\n) -> List[str]:\n    \"\"\"Parse a plugins specification into a list of plugin names.\"\"\"\n    # None means empty.\n    if specs is None:\n        return []\n    # Workaround for #3899 - a submodule which happens to be called \"pytest_plugins\".\n    if isinstance(specs, types.ModuleType):\n        return []\n    # Comma-separated list.\n    if isinstance(specs, str):\n        return specs.split(\",\") if specs else []\n    # Direct specification.\n    if isinstance(specs, collections.abc.Sequence):\n        return list(specs)\n    raise UsageError(\n        \"Plugins may be specified as a sequence or a ','-separated string of plugin names. Got: %r\"\n        % specs\n    )"}, "_assertion_supported": {"line": 1511, "args": [{"func_args": {}, "return_value": "True"}], "text": "def _assertion_supported() -> bool:\n    try:\n        assert False\n    except AssertionError:\n        return True\n    else:\n        return False"}, "scope2index": {"line": 803, "args": [{"func_args": {"scope": "'session'", "descr": "\"Fixture 'pytestconfig'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'capfd'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'capfdbinary'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'capsys'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'capsysbinary'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'tmp_path'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'session'", "descr": "\"Fixture 'tmp_path_factory'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'tmpdir'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'session'", "descr": "\"Fixture 'tmpdir_factory'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'monkeypatch'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'recwarn'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'record_property'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'session'", "descr": "\"Fixture 'record_testsuite_property'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'record_xml_attribute'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'session'", "descr": "\"Fixture 'doctest_namespace'\"", "where": "None"}, "return_value": "0"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'cache'\"", "where": "None"}, "return_value": "4"}, {"func_args": {"scope": "'function'", "descr": "\"Fixture 'caplog'\"", "where": "None"}, "return_value": "4"}], "text": "def scope2index(scope: str, descr: str, where: Optional[str] = None) -> int:\n    \"\"\"Look up the index of ``scope`` and raise a descriptive value error\n    if not defined.\"\"\"\n    strscopes: Sequence[str] = scopes\n    try:\n        return strscopes.index(scope)\n    except ValueError:\n        fail(\n            \"{} {}got an unexpected scope value '{}'\".format(\n                descr, f\"from {where} \" if where else \"\", scope\n            ),\n            pytrace=False,\n        )"}, "reorder_items": {"line": 270, "args": [{"func_args": {"items": "[]"}, "return_value": "[]"}], "text": "def reorder_items(items: Sequence[nodes.Item]) -> List[nodes.Item]:\n    argkeys_cache: Dict[int, Dict[nodes.Item, Dict[_Key, None]]] = {}\n    items_by_argkey: Dict[int, Dict[_Key, Deque[nodes.Item]]] = {}\n    for scopenum in range(0, scopenum_function):\n        d: Dict[nodes.Item, Dict[_Key, None]] = {}\n        argkeys_cache[scopenum] = d\n        item_d: Dict[_Key, Deque[nodes.Item]] = defaultdict(deque)\n        items_by_argkey[scopenum] = item_d\n        for item in items:\n            keys = dict.fromkeys(get_parametrized_fixture_keys(item, scopenum), None)\n            if keys:\n                d[item] = keys\n                for key in keys:\n                    item_d[key].append(item)\n    items_dict = dict.fromkeys(items, None)\n    return list(reorder_items_atscope(items_dict, argkeys_cache, items_by_argkey, 0))"}, "pluralize": {"line": 1350, "args": [{"func_args": {"count": "1", "noun": "'error'"}, "return_value": "(1, 'error')"}], "text": "def pluralize(count: int, noun: str) -> Tuple[int, str]:\n    # No need to pluralize words such as `failed` or `passed`.\n    if noun not in [\"error\", \"warnings\", \"test\"]:\n        return count, noun\n\n    # The `warnings` key is plural. To avoid API breakage, we keep it that way but\n    # set it to singular here so we can determine plurality in the same way as we do\n    # for `error`.\n    noun = noun.replace(\"warnings\", \"warning\")\n\n    return count, noun + \"s\" if count != 1 else noun"}, "format_session_duration": {"line": 1377, "args": [{"func_args": {"seconds": "0.6044876575469971"}, "return_value": "'0.60s'"}], "text": "def format_session_duration(seconds: float) -> str:\n    \"\"\"Format the given seconds in a human readable manner to show in the final summary.\"\"\"\n    if seconds < 60:\n        return f\"{seconds:.2f}s\"\n    else:\n        dt = datetime.timedelta(seconds=int(seconds))\n        return f\"{seconds:.2f}s ({dt})\""}, "_get_auto_indent": {"line": 113, "args": [{"func_args": {"auto_indent_option": "None"}, "return_value": "0"}, {"func_args": {"auto_indent_option": "None"}, "return_value": "0"}]}, "_get_stderr_fileno": {"line": 68, "args": [{"func_args": {}, "return_value": "2"}, {"func_args": {}, "return_value": "2"}]}, "get_terminal_width": {"line": 15, "args": [{"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}], "text": "def get_terminal_width() -> int:\n    width, _ = shutil.get_terminal_size(fallback=(80, 24))\n\n    # The Windows get_terminal_size may be bogus, let's sanify a bit.\n    if width < 40:\n        width = 80\n\n    return width"}, "is_option": {"line": 135, "args": [{"func_args": {"x": "'tests'"}, "return_value": "False"}], "text": "def is_option(x: str) -> bool:\n        return x.startswith(\"-\")"}, "get_file_part_from_node_id": {"line": 138, "args": [{"func_args": {"x": "'tests'"}, "return_value": "'tests'"}], "text": "def get_file_part_from_node_id(x: str) -> str:\n        return x.split(\"::\")[0]"}, "parts": {"line": 420, "args": [{"func_args": {"s": "'/usr/app/src/test_repos/stocktrends/tests/HDFCLIFE.csv'"}, "return_value": "{'/usr/app/src/test_repos/stocktrends', '/usr/app/src/test_repos/stocktrends/tests/HDFCLIFE.csv', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos/stocktrends/tests', '/', '/usr/app/src/test_repos'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/stocktrends/tests/HOOLI'"}, "return_value": "{'/usr/app/src/test_repos/stocktrends/tests/HOOLI', '/usr/app/src/test_repos/stocktrends', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos/stocktrends/tests', '/', '/usr/app/src/test_repos'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/stocktrends/tests/hooli_linebreak_3.csv'"}, "return_value": "{'/usr/app/src/test_repos/stocktrends', '/usr', '/usr/app/src/test_repos/stocktrends/tests/hooli_linebreak_3.csv', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos/stocktrends/tests', '/', '/usr/app/src/test_repos'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/stocktrends/tests/hooli_renko_4.csv'"}, "return_value": "{'/usr/app/src/test_repos/stocktrends', '/usr', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos/stocktrends/tests', '/usr/app/src/test_repos/stocktrends/tests/hooli_renko_4.csv', '/', '/usr/app/src/test_repos'}"}, {"func_args": {"s": "'/usr/app/src/test_repos/stocktrends/tests/test_indicators.py'"}, "return_value": "{'/usr/app/src/test_repos/stocktrends', '/usr', '/usr/app/src/test_repos/stocktrends/tests/test_indicators.py', '/usr/app', '/usr/app/src', '/usr/app/src/test_repos/stocktrends/tests', '/', '/usr/app/src/test_repos'}"}], "text": "def parts(s: str) -> Set[str]:\n    parts = s.split(sep)\n    return {sep.join(parts[: i + 1]) or sep for i in range(len(parts))}"}, "iscommentline": {"line": 162, "args": [{"func_args": {"line": "'[tox]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'envlist = py35\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}, {"func_args": {"line": "'[testenv]\\n'"}, "return_value": "False"}, {"func_args": {"line": "'commands = viztracer --ignore_frozen --log_func_args --log_func_retval -o result0.json -- py.test tests\\n'"}, "return_value": "False"}, {"func_args": {"line": "'deps = pytest\\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\tviztracer \\n'"}, "return_value": "False"}, {"func_args": {"line": "'\\n'"}, "return_value": "True"}], "text": "def iscommentline(line):\n    c = line.lstrip()[:1]\n    return c in COMMENTCHARS"}, "wcswidth": {"line": 43, "args": [{"func_args": {"s": "''"}, "return_value": "0"}, {"func_args": {"s": "'ERROR tests/test_indicators.py'"}, "return_value": "30"}], "text": "def wcswidth(s: str) -> int:\n    \"\"\"Determine how many columns are needed to display a string in a terminal.\n\n    Returns -1 if the string contains non-printable characters.\n    \"\"\"\n    width = 0\n    for c in unicodedata.normalize(\"NFC\", s):\n        wc = wcwidth(c)\n        if wc < 0:\n            return -1\n        width += wc\n    return width"}, "wcwidth": {"line": 4, "args": [{"func_args": {"c": "'E'"}, "return_value": "1"}, {"func_args": {"c": "'R'"}, "return_value": "1"}, {"func_args": {"c": "'O'"}, "return_value": "1"}, {"func_args": {"c": "' '"}, "return_value": "1"}, {"func_args": {"c": "'t'"}, "return_value": "1"}, {"func_args": {"c": "'e'"}, "return_value": "1"}, {"func_args": {"c": "'s'"}, "return_value": "1"}, {"func_args": {"c": "'/'"}, "return_value": "1"}, {"func_args": {"c": "'_'"}, "return_value": "1"}, {"func_args": {"c": "'i'"}, "return_value": "1"}, {"func_args": {"c": "'n'"}, "return_value": "1"}, {"func_args": {"c": "'d'"}, "return_value": "1"}, {"func_args": {"c": "'c'"}, "return_value": "1"}, {"func_args": {"c": "'a'"}, "return_value": "1"}, {"func_args": {"c": "'o'"}, "return_value": "1"}, {"func_args": {"c": "'r'"}, "return_value": "1"}, {"func_args": {"c": "'.'"}, "return_value": "1"}, {"func_args": {"c": "'p'"}, "return_value": "1"}, {"func_args": {"c": "'y'"}, "return_value": "1"}]}, "_ellipsize": {"line": 29, "args": [{"func_args": {"s": "'<_pytest.config.Config object at 0xffff806b2070>'", "maxsize": "240"}, "return_value": "'<_pytest.config.Config object at 0xffff806b2070>'"}, {"func_args": {"s": "'<_pytest.config.Config object at 0xffff806b2070>'", "maxsize": "240"}, "return_value": "'<_pytest.config.Config object at 0xffff806b2070>'"}, {"func_args": {"s": "'<function _main at 0xffff80a7adc0>'", "maxsize": "240"}, "return_value": "'<function _main at 0xffff80a7adc0>'"}, {"func_args": {"s": "'<function _main at 0xffff80a7adc0>'", "maxsize": "240"}, "return_value": "'<function _main at 0xffff80a7adc0>'"}, {"func_args": {"s": "'<_pytest.config.Config object at 0xffff806b2070>'", "maxsize": "240"}, "return_value": "'<_pytest.config.Config object at 0xffff806b2070>'"}, {"func_args": {"s": "'<_pytest.config.Config object at 0xffff806b2070>'", "maxsize": "240"}, "return_value": "'<_pytest.config.Config object at 0xffff806b2070>'"}, {"func_args": {"s": "'<Session stocktrends exitstatus=<ExitCode.OK: 0> testsfailed=1 testscollected=0>'", "maxsize": "240"}, "return_value": "'<Session stocktrends exitstatus=<ExitCode.OK: 0> testsfailed=1 testscollected=0>'"}, {"func_args": {"s": "'<Session stocktrends exitstatus=<ExitCode.OK: 0> testsfailed=1 testscollected=0>'", "maxsize": "240"}, "return_value": "'<Session stocktrends exitstatus=<ExitCode.OK: 0> testsfailed=1 testscollected=0>'"}, {"func_args": {"s": "\"<_HookCaller 'pytest_runtestloop'>\"", "maxsize": "240"}, "return_value": "\"<_HookCaller 'pytest_runtestloop'>\""}, {"func_args": {"s": "\"<_HookCaller 'pytest_runtestloop'>\"", "maxsize": "240"}, "return_value": "\"<_HookCaller 'pytest_runtestloop'>\""}, {"func_args": {"s": "'()'", "maxsize": "240"}, "return_value": "'()'"}, {"func_args": {"s": "'<Session stocktrends exitstatus=<ExitCode.OK: 0> testsfailed=1 testscollected=0>'", "maxsize": "240"}, "return_value": "'<Session stocktrends exitstatus=<ExitCode.OK: 0> testsfailed=1 testscollected=0>'"}, {"func_args": {"s": "\"{'session': <Session stocktrends exitstatus=<ExitCode.OK: 0> testsfailed=1 testscollected=0>}\"", "maxsize": "240"}, "return_value": "\"{'session': <Session stocktrends exitstatus=<ExitCode.OK: 0> testsfailed=1 testscollected=0>}\""}, {"func_args": {"s": "\"'session'\"", "maxsize": "240"}, "return_value": "\"'session'\""}, {"func_args": {"s": "'True'", "maxsize": "240"}, "return_value": "'True'"}, {"func_args": {"s": "'True'", "maxsize": "240"}, "return_value": "'True'"}, {"func_args": {"s": "'<_pytest.config.PytestPluginManager object at 0xffff862a5c10>'", "maxsize": "240"}, "return_value": "'<_pytest.config.PytestPluginManager object at 0xffff862a5c10>'"}, {"func_args": {"s": "'<_pytest.config.PytestPluginManager object at 0xffff862a5c10>'", "maxsize": "240"}, "return_value": "'<_pytest.config.PytestPluginManager object at 0xffff862a5c10>'"}, {"func_args": {"s": "\"'pytest_runtestloop'\"", "maxsize": "240"}, "return_value": "\"'pytest_runtestloop'\""}, {"func_args": {"s": "\"<HookImpl plugin_name='main', plugin=<module '_pytest.main' from '/usr/app/src/test_repos/stocktrends/.tox/py38/lib/python3.8/site-packages/_pytest/main.py'>>\"", "maxsize": "240"}, "return_value": "\"<HookImpl plugin_name='main', plugin=<module '_pytest.main' from '/usr/app/src/test_repos/stocktrends/.tox/py38/lib/python3.8/site-packages/_pytest/main.py'>>\""}, {"func_args": {"s": "\"<HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0xffff7f22dca0>>\"", "maxsize": "240"}, "return_value": "\"<HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0xffff7f22dca0>>\""}, {"func_args": {"s": "\"[<HookImpl plugin_name='main', plugin=<module '_pytest.main' from '/usr/app/src/test_repos/stocktrends/.tox/py38/lib/python3.8/site-packages/_pytest/main.py'>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0xffff7f22dca0>>]\"", "maxsize": "240"}, "return_value": "\"[<HookImpl plugin_name='main', plugin=<module '_pytest.main' from '/usr/app/src/test_repos/stocktrends/.tox/py38/lib/p...t/main.py'>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0xffff7f22dca0>>]\""}, {"func_args": {"s": "'<Session stocktrends exitstatus=<ExitCode.OK: 0> testsfailed=1 testscollected=0>'", "maxsize": "240"}, "return_value": "'<Session stocktrends exitstatus=<ExitCode.OK: 0> testsfailed=1 testscollected=0>'"}, {"func_args": {"s": "\"{'session': <Session stocktrends exitstatus=<ExitCode.OK: 0> testsfailed=1 testscollected=0>}\"", "maxsize": "240"}, "return_value": "\"{'session': <Session stocktrends exitstatus=<ExitCode.OK: 0> testsfailed=1 testscollected=0>}\""}, {"func_args": {"s": "'True'", "maxsize": "240"}, "return_value": "'True'"}, {"func_args": {"s": "'True'", "maxsize": "240"}, "return_value": "'True'"}, {"func_args": {"s": "'<Session stocktrends exitstatus=<ExitCode.OK: 0> testsfailed=1 testscollected=0>'", "maxsize": "240"}, "return_value": "'<Session stocktrends exitstatus=<ExitCode.OK: 0> testsfailed=1 testscollected=0>'"}, {"func_args": {"s": "'<Session stocktrends exitstatus=<ExitCode.OK: 0> testsfailed=1 testscollected=0>'", "maxsize": "240"}, "return_value": "'<Session stocktrends exitstatus=<ExitCode.OK: 0> testsfailed=1 testscollected=0>'"}], "text": "def _ellipsize(s: str, maxsize: int) -> str:\n    if len(s) > maxsize:\n        i = max(0, (maxsize - 3) // 2)\n        j = max(0, maxsize - 3 - i)\n        return s[:i] + \"...\" + s[len(s) - j :]\n    return s"}}