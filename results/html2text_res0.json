{"_ellipsize": {"line": 29, "args": [{"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'False'", "maxsize": "240"}, "return_value": "'False'"}, {"func_args": {"s": "'False'", "maxsize": "240"}, "return_value": "'False'"}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'True'", "maxsize": "240"}, "return_value": "'True'"}, {"func_args": {"s": "'True'", "maxsize": "240"}, "return_value": "'True'"}, {"func_args": {"s": "\"(['/usr/app/src/test_repos/html2text/.tox/py38/bin/python', '-m', 'html2text', '--pad-tables', '/usr/app/src/test_repos/html2text/test/pad_table.html'],)\"", "maxsize": "240"}, "return_value": "\"(['/usr/app/src/test_repos/html2text/.tox/py38/bin/python', '-m', 'html2text', '--pad-tables', '/usr/app/src/test_repos/html2text/test/pad_table.html'],)\""}, {"func_args": {"s": "\"{'stdout': -1}\"", "maxsize": "240"}, "return_value": "\"{'stdout': -1}\""}, {"func_args": {"s": "'<subprocess.Popen object at 0xffff9bee44f0>'", "maxsize": "240"}, "return_value": "'<subprocess.Popen object at 0xffff9bee44f0>'"}, {"func_args": {"s": "'<subprocess.Popen object at 0xffff9bee44f0>'", "maxsize": "240"}, "return_value": "'<subprocess.Popen object at 0xffff9bee44f0>'"}, {"func_args": {"s": "\"b'No such file as -m\\\\n'\"", "maxsize": "240"}, "return_value": "\"b'No such file as -m\\\\n'\""}, {"func_args": {"s": "\"b'No such file as -m\\\\n'\"", "maxsize": "240"}, "return_value": "\"b'No such file as -m\\\\n'\""}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'1'", "maxsize": "240"}, "return_value": "'1'"}, {"func_args": {"s": "\"'/usr/app/src/test_repos/html2text/test/lrm_after_b.html'\"", "maxsize": "240"}, "return_value": "\"'/usr/app/src/test_repos/html2text/test/lrm_after_b.html'\""}, {"func_args": {"s": "'[]'", "maxsize": "240"}, "return_value": "'[]'"}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'False'", "maxsize": "240"}, "return_value": "'False'"}, {"func_args": {"s": "'False'", "maxsize": "240"}, "return_value": "'False'"}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'True'", "maxsize": "240"}, "return_value": "'True'"}, {"func_args": {"s": "'True'", "maxsize": "240"}, "return_value": "'True'"}, {"func_args": {"s": "\"(['/usr/app/src/test_repos/html2text/.tox/py38/bin/python', '-m', 'html2text', '/usr/app/src/test_repos/html2text/test/lrm_after_b.html'],)\"", "maxsize": "240"}, "return_value": "\"(['/usr/app/src/test_repos/html2text/.tox/py38/bin/python', '-m', 'html2text', '/usr/app/src/test_repos/html2text/test/lrm_after_b.html'],)\""}, {"func_args": {"s": "\"{'stdout': -1}\"", "maxsize": "240"}, "return_value": "\"{'stdout': -1}\""}, {"func_args": {"s": "'<subprocess.Popen object at 0xffffad366d30>'", "maxsize": "240"}, "return_value": "'<subprocess.Popen object at 0xffffad366d30>'"}, {"func_args": {"s": "'<subprocess.Popen object at 0xffffad366d30>'", "maxsize": "240"}, "return_value": "'<subprocess.Popen object at 0xffffad366d30>'"}, {"func_args": {"s": "\"b'No such file as -m\\\\n'\"", "maxsize": "240"}, "return_value": "\"b'No such file as -m\\\\n'\""}, {"func_args": {"s": "\"b'No such file as -m\\\\n'\"", "maxsize": "240"}, "return_value": "\"b'No such file as -m\\\\n'\""}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'1'", "maxsize": "240"}, "return_value": "'1'"}, {"func_args": {"s": "\"'/usr/app/src/test_repos/html2text/test/wrap_list_items_example.html'\"", "maxsize": "240"}, "return_value": "\"'/usr/app/src/test_repos/html2text/test/wrap_list_items_example.html'\""}, {"func_args": {"s": "\"['--wrap-list-items']\"", "maxsize": "240"}, "return_value": "\"['--wrap-list-items']\""}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'False'", "maxsize": "240"}, "return_value": "'False'"}, {"func_args": {"s": "'False'", "maxsize": "240"}, "return_value": "'False'"}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'True'", "maxsize": "240"}, "return_value": "'True'"}, {"func_args": {"s": "'True'", "maxsize": "240"}, "return_value": "'True'"}, {"func_args": {"s": "\"(['/usr/app/src/test_repos/html2text/.tox/py38/bin/python', '-m', 'html2text', '--wrap-list-items', '/usr/app/src/test_repos/html2text/test/wrap_list_items_example.html'],)\"", "maxsize": "240"}, "return_value": "\"(['/usr/app/src/test_repos/html2text/.tox/py38/bin/python', '-m', 'html2text', '--wrap-list-items', '/usr/app/src/test_repos/html2text/test/wrap_list_items_example.html'],)\""}, {"func_args": {"s": "\"{'stdout': -1}\"", "maxsize": "240"}, "return_value": "\"{'stdout': -1}\""}, {"func_args": {"s": "'<subprocess.Popen object at 0xffffa3f75820>'", "maxsize": "240"}, "return_value": "'<subprocess.Popen object at 0xffffa3f75820>'"}, {"func_args": {"s": "'<subprocess.Popen object at 0xffffa3f75820>'", "maxsize": "240"}, "return_value": "'<subprocess.Popen object at 0xffffa3f75820>'"}, {"func_args": {"s": "\"b'No such file as -m\\\\n'\"", "maxsize": "240"}, "return_value": "\"b'No such file as -m\\\\n'\""}, {"func_args": {"s": "\"b'No such file as -m\\\\n'\"", "maxsize": "240"}, "return_value": "\"b'No such file as -m\\\\n'\""}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'None'", "maxsize": "240"}, "return_value": "'None'"}, {"func_args": {"s": "'1'", "maxsize": "240"}, "return_value": "'1'"}], "text": "def _ellipsize(s: str, maxsize: int) -> str:\n    if len(s) > maxsize:\n        i = max(0, (maxsize - 3) // 2)\n        j = max(0, maxsize - 3 - i)\n        return s[:i] + \"...\" + s[len(s) - j :]\n    return s"}, "pluralize": {"line": 1350, "args": [{"func_args": {"count": "68", "noun": "'failed'"}, "return_value": "(68, 'failed')"}, {"func_args": {"count": "114", "noun": "'passed'"}, "return_value": "(114, 'passed')"}], "text": "def pluralize(count: int, noun: str) -> Tuple[int, str]:\n    # No need to pluralize words such as `failed` or `passed`.\n    if noun not in [\"error\", \"warnings\", \"test\"]:\n        return count, noun\n\n    # The `warnings` key is plural. To avoid API breakage, we keep it that way but\n    # set it to singular here so we can determine plurality in the same way as we do\n    # for `error`.\n    noun = noun.replace(\"warnings\", \"warning\")\n\n    return count, noun + \"s\" if count != 1 else noun"}, "format_session_duration": {"line": 1377, "args": [{"func_args": {"seconds": "28.282588005065918"}, "return_value": "'28.28s'"}], "text": "def format_session_duration(seconds: float) -> str:\n    \"\"\"Format the given seconds in a human readable manner to show in the final summary.\"\"\"\n    if seconds < 60:\n        return f\"{seconds:.2f}s\"\n    else:\n        dt = datetime.timedelta(seconds=int(seconds))\n        return f\"{seconds:.2f}s ({dt})\""}, "get_terminal_width": {"line": 15, "args": [{"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}, {"func_args": {}, "return_value": "80"}], "text": "def get_terminal_width() -> int:\n    width, _ = shutil.get_terminal_size(fallback=(80, 24))\n\n    # The Windows get_terminal_size may be bogus, let's sanify a bit.\n    if width < 40:\n        width = 80\n\n    return width"}, "_get_stderr_fileno": {"line": 68, "args": [{"func_args": {}, "return_value": "2"}]}, "scopemismatch": {"line": 799, "args": [{"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}, {"func_args": {"currentscope": "'function'", "newscope": "'function'"}, "return_value": "False"}], "text": "def scopemismatch(currentscope: \"_Scope\", newscope: \"_Scope\") -> bool:\n    return scopes.index(newscope) > scopes.index(currentscope)"}, "wcswidth": {"line": 43, "args": [{"func_args": {"s": "'FFFFFFFFFFFFFF'"}, "return_value": "14"}, {"func_args": {"s": "'FFFFFFFFFFFFFFF'"}, "return_value": "15"}, {"func_args": {"s": "'FFFFFFFFFFFFFFFF'"}, "return_value": "16"}, {"func_args": {"s": "'FFFFFFFFFFFFFFFF.'"}, "return_value": "17"}, {"func_args": {"s": "'FFFFFFFFFFFFFFFF..'"}, "return_value": "18"}, {"func_args": {"s": "'FFFFFFFFFFFFFFFF...'"}, "return_value": "19"}, {"func_args": {"s": "'FFFFFFFFFFFFFFFF....'"}, "return_value": "20"}, {"func_args": {"s": "'FFFFFFFFFFFFFFFF.....'"}, "return_value": "21"}, {"func_args": {"s": "'FFFFFFFFFFFFFFFF......'"}, "return_value": "22"}, {"func_args": {"s": "'FFFFFFFFFFFFFFFF.......'"}, "return_value": "23"}, {"func_args": {"s": "'FFFFFFFFFFFFFFFF........'"}, "return_value": "24"}, {"func_args": {"s": "'FFFFFFFFFFFFFFFF.........'"}, "return_value": "25"}, {"func_args": {"s": "'FFFFFFFFFFFFFFFF..........'"}, "return_value": "26"}, {"func_args": {"s": "'FFFFFFFFFFFFFFFF...........'"}, "return_value": "27"}, {"func_args": {"s": "'FFFFFFFFFFFFFFFF............'"}, "return_value": "28"}, {"func_args": {"s": "'FFFFFFFFFFFFFFFF.............'"}, "return_value": "29"}, {"func_args": {"s": "'FFFFFFFFFFFFFFFF..............'"}, "return_value": "30"}, {"func_args": {"s": "'FFFFFFFFFFFFFFFF...............'"}, "return_value": "31"}, {"func_args": {"s": "'FFFFFFFFFFFFFFFF................'"}, "return_value": "32"}, {"func_args": {"s": "'FFFFFFFFFFFFFFFF.................'"}, "return_value": "33"}, {"func_args": {"s": "'FFFFFFFFFFFFFFFF..................'"}, "return_value": "34"}, {"func_args": {"s": "'FFFFFFFFFFFFFFFF...................'"}, "return_value": "35"}, {"func_args": {"s": "'FFFFFFFFFFFFFFFF....................'"}, "return_value": "36"}, {"func_args": {"s": "'FFFFFFFFFFFFFFFF.....................'"}, "return_value": "37"}, {"func_args": {"s": "'FFFFFFFFFFFFFFFF......................'"}, "return_value": "38"}, {"func_args": {"s": "'FFFFFFFFFFFFFFFF.......................'"}, "return_value": "39"}, {"func_args": {"s": "'FFFFFFFFFFFFFFFF........................'"}, "return_value": "40"}, {"func_args": {"s": "'FFFFFFFFFFFFFFFF.........................'"}, "return_value": "41"}, {"func_args": {"s": "'FFFFFFFFFFFFFFFF..........................'"}, "return_value": "42"}, {"func_args": {"s": "'FFFFFFFFFFFFFFFF...........................'"}, "return_value": "43"}, {"func_args": {"s": "'FFFFFFFFFFFFFFFF............................'"}, "return_value": "44"}, {"func_args": {"s": "'FFFFFFFFFFFFFFFF.............................'"}, "return_value": "45"}, {"func_args": {"s": "'FFFFFFFFFFFFFFFF..............................'"}, "return_value": "46"}, {"func_args": {"s": "'FFFFFFFFFFFFFFFF...............................'"}, "return_value": "47"}, {"func_args": {"s": "'FFFFFFFFFFFFFFFF................................'"}, "return_value": "48"}, {"func_args": {"s": "'FFFFFFFFFFFFFFFF.................................'"}, "return_value": "49"}, {"func_args": {"s": "'FFFFFFFFFFFFFFFF..................................'"}, "return_value": "50"}, {"func_args": {"s": "'FFFFFFFFFFFFFFFF...................................'"}, "return_value": "51"}, {"func_args": {"s": "'FFFFFFFFFFFFFFFF....................................'"}, "return_value": "52"}, {"func_args": {"s": "'FFFFFFFFFFFFFFFF.....................................'"}, "return_value": "53"}, {"func_args": {"s": "'FFFFFFFFFFFFFFFF......................................'"}, "return_value": "54"}, {"func_args": {"s": "'FFFFFFFFFFFFFFFF.......................................'"}, "return_value": "55"}, {"func_args": {"s": "'FFFFFFFFFFFFFFFF........................................'"}, "return_value": "56"}, {"func_args": {"s": "'FFFFFFFFFFFFFFFF.........................................'"}, "return_value": "57"}, {"func_args": {"s": "'FFFFFFFFFFFFFFFF..........................................'"}, "return_value": "58"}, {"func_args": {"s": "'FFFFFFFFFFFFFFFF..........................................'"}, "return_value": "58"}, {"func_args": {"s": "'test/test_memleak.py .'"}, "return_value": "22"}, {"func_args": {"s": "'test/test_memleak.py ..'"}, "return_value": "23"}, {"func_args": {"s": "'test/test_memleak.py ...'"}, "return_value": "24"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/mark_code.html-cmdline_args0]'"}, "return_value": "112"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/long_lines.html-cmdline_args1]'"}, "return_value": "113"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/single_line_break.html-cmdline_args2]'"}, "return_value": "120"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/blockquote_example.html-cmdline_args3]'"}, "return_value": "121"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/pad_table_no_closed_tr.html-cmdline_args4]'"}, "return_value": "125"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/no_inline_links_images_to_alt.html-cmdline_args5]'"}, "return_value": "132"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/images_with_div_wrap.html-cmdline_args6]'"}, "return_value": "123"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/doc_with_table.html-cmdline_args7]'"}, "return_value": "117"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/break_preserved_in_blockquote.html-cmdline_args8]'"}, "return_value": "132"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/kbd_tag.html-cmdline_args9]'"}, "return_value": "110"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/abbr_tag.html-cmdline_args10]'"}, "return_value": "112"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/empty-title-tag.html-cmdline_args11]'"}, "return_value": "119"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/protect_links.html-cmdline_args12]'"}, "return_value": "117"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/nbsp.html-cmdline_args13]'"}, "return_value": "108"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/html_entities_out_of_text.html-cmdline_args14]'"}, "return_value": "129"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/decript_tage.html-cmdline_args15]'"}, "return_value": "116"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/GoogleDocSaved_two.html-cmdline_args16]'"}, "return_value": "122"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/lrm_inside_i.html-cmdline_args17]'"}, "return_value": "116"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/invalid_unicode.html-cmdline_args18]'"}, "return_value": "119"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/no_wrap_links_no_inline_links.html-cmdline_args19]'"}, "return_value": "133"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/q_tag.html-cmdline_args20]'"}, "return_value": "109"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/no_wrap_links.html-cmdline_args21]'"}, "return_value": "117"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/stressed_with_html_entities.html-cmdline_args22]'"}, "return_value": "131"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/css_import_no_semicolon.html-cmdline_args23]'"}, "return_value": "127"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/google-like_font-properties.html-cmdline_args24]'"}, "return_value": "131"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/anchors.html-cmdline_args25]'"}, "return_value": "111"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/nbsp_unicode.html-cmdline_args26]'"}, "return_value": "116"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/mixed_nested_lists.html-cmdline_args27]'"}, "return_value": "122"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/emphasis_whitespace.html-cmdline_args28]'"}, "return_value": "123"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/horizontal_rule.html-cmdline_args29]'"}, "return_value": "119"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/list_tags_example.html-cmdline_args30]'"}, "return_value": "121"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/link_titles.html-cmdline_args31]'"}, "return_value": "115"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/img-tag-with-link.html-cmdline_args32]'"}, "return_value": "121"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/invalid_start.html-cmdline_args33]'"}, "return_value": "117"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/rlm_inside_strong.html-cmdline_args34]'"}, "return_value": "121"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/images_as_html.html-cmdline_args35]'"}, "return_value": "118"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/images_to_alt.html-cmdline_args36]'"}, "return_value": "117"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/preformatted_in_list.html-cmdline_args37]'"}, "return_value": "124"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/empty-link.html-cmdline_args38]'"}, "return_value": "114"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/doc_with_table_bypass.html-cmdline_args39]'"}, "return_value": "125"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/no_inline_links_example.html-cmdline_args40]'"}, "return_value": "127"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/default_image_alt.html-cmdline_args41]'"}, "return_value": "121"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/no_mailto_links.html-cmdline_args42]'"}, "return_value": "119"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/normal.html-cmdline_args43]'"}, "return_value": "110"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/bold_inside_link.html-cmdline_args44]'"}, "return_value": "120"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/emdash-para.html-cmdline_args45]'"}, "return_value": "115"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/GoogleDocSaved.html-cmdline_args46]'"}, "return_value": "118"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/GoogleDocMassDownload.html-cmdline_args47]'"}, "return_value": "125"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/apos_element.html-cmdline_args48]'"}, "return_value": "116"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/header_tags.html-cmdline_args49]'"}, "return_value": "115"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/bold_long_line.html-cmdline_args50]'"}, "return_value": "118"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/pad_table_empty.html-cmdline_args51]'"}, "return_value": "119"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/no_inline_links_nested.html-cmdline_args52]'"}, "return_value": "126"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/wrap_tables.html-cmdline_args53]'"}, "return_value": "115"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/images_with_size.html-cmdline_args54]'"}, "return_value": "120"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/bodywidth_newline.html-cmdline_args55]'"}, "return_value": "121"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/text_after_list.html-cmdline_args56]'"}, "return_value": "119"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/lrm_after_i.html-cmdline_args57]'"}, "return_value": "115"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/pre.html-cmdline_args58]'"}, "return_value": "107"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/html-escaping.html-cmdline_args59]'"}, "return_value": "117"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/emphasis_preserved_whitespace.html-cmdline_args60]'"}, "return_value": "133"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/flip_emphasis.html-cmdline_args61]'"}, "return_value": "117"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/table_ignore.html-cmdline_args62]'"}, "return_value": "116"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/url-escaping.html-cmdline_args63]'"}, "return_value": "116"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/normal_escape_snob.html-cmdline_args64]'"}, "return_value": "122"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/pad_table.html-cmdline_args65]'"}, "return_value": "113"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/lrm_after_b.html-cmdline_args66]'"}, "return_value": "115"}, {"func_args": {"s": "' - '"}, "return_value": "3"}, {"func_args": {"s": "'FAILED test/test_html2text.py::test_command[/usr/app/src/test_repos/html2text/test/wrap_list_items_example.html-cmdline_args67]'"}, "return_value": "127"}, {"func_args": {"s": "' - '"}, "return_value": "3"}], "text": "def wcswidth(s: str) -> int:\n    \"\"\"Determine how many columns are needed to display a string in a terminal.\n\n    Returns -1 if the string contains non-printable characters.\n    \"\"\"\n    width = 0\n    for c in unicodedata.normalize(\"NFC\", s):\n        wc = wcwidth(c)\n        if wc < 0:\n            return -1\n        width += wc\n    return width"}, "wcwidth": {"line": 4, "args": [{"func_args": {"c": "'a'"}, "return_value": "1"}, {"func_args": {"c": "'k'"}, "return_value": "1"}, {"func_args": {"c": "'A'"}, "return_value": "1"}, {"func_args": {"c": "'I'"}, "return_value": "1"}, {"func_args": {"c": "'L'"}, "return_value": "1"}, {"func_args": {"c": "'E'"}, "return_value": "1"}, {"func_args": {"c": "'D'"}, "return_value": "1"}, {"func_args": {"c": "':'"}, "return_value": "1"}, {"func_args": {"c": "'c'"}, "return_value": "1"}, {"func_args": {"c": "'o'"}, "return_value": "1"}, {"func_args": {"c": "'n'"}, "return_value": "1"}, {"func_args": {"c": "'d'"}, "return_value": "1"}, {"func_args": {"c": "'['"}, "return_value": "1"}, {"func_args": {"c": "'u'"}, "return_value": "1"}, {"func_args": {"c": "'r'"}, "return_value": "1"}, {"func_args": {"c": "'-'"}, "return_value": "1"}, {"func_args": {"c": "'i'"}, "return_value": "1"}, {"func_args": {"c": "'g'"}, "return_value": "1"}, {"func_args": {"c": "'0'"}, "return_value": "1"}, {"func_args": {"c": "']'"}, "return_value": "1"}, {"func_args": {"c": "'1'"}, "return_value": "1"}, {"func_args": {"c": "'b'"}, "return_value": "1"}, {"func_args": {"c": "'q'"}, "return_value": "1"}, {"func_args": {"c": "'3'"}, "return_value": "1"}, {"func_args": {"c": "'4'"}, "return_value": "1"}, {"func_args": {"c": "'5'"}, "return_value": "1"}, {"func_args": {"c": "'w'"}, "return_value": "1"}, {"func_args": {"c": "'v'"}, "return_value": "1"}, {"func_args": {"c": "'6'"}, "return_value": "1"}, {"func_args": {"c": "'7'"}, "return_value": "1"}, {"func_args": {"c": "'8'"}, "return_value": "1"}, {"func_args": {"c": "'9'"}, "return_value": "1"}, {"func_args": {"c": "'f'"}, "return_value": "1"}, {"func_args": {"c": "'G'"}, "return_value": "1"}, {"func_args": {"c": "'S'"}, "return_value": "1"}, {"func_args": {"c": "'z'"}, "return_value": "1"}, {"func_args": {"c": "'M'"}, "return_value": "1"}]}, "get_baseline_name": {"line": 215, "args": [{"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/lrm_after_b.html'"}, "return_value": "'/usr/app/src/test_repos/html2text/test/lrm_after_b.md'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/wrap_list_items_example.html'"}, "return_value": "'/usr/app/src/test_repos/html2text/test/wrap_list_items_example.md'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/long_lines.html'"}, "return_value": "'/usr/app/src/test_repos/html2text/test/long_lines.md'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/blockquote_example.html'"}, "return_value": "'/usr/app/src/test_repos/html2text/test/blockquote_example.md'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/images_with_div_wrap.html'"}, "return_value": "'/usr/app/src/test_repos/html2text/test/images_with_div_wrap.md'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/doc_with_table.html'"}, "return_value": "'/usr/app/src/test_repos/html2text/test/doc_with_table.md'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/break_preserved_in_blockquote.html'"}, "return_value": "'/usr/app/src/test_repos/html2text/test/break_preserved_in_blockquote.md'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/kbd_tag.html'"}, "return_value": "'/usr/app/src/test_repos/html2text/test/kbd_tag.md'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/abbr_tag.html'"}, "return_value": "'/usr/app/src/test_repos/html2text/test/abbr_tag.md'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/empty-title-tag.html'"}, "return_value": "'/usr/app/src/test_repos/html2text/test/empty-title-tag.md'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/nbsp.html'"}, "return_value": "'/usr/app/src/test_repos/html2text/test/nbsp.md'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/html_entities_out_of_text.html'"}, "return_value": "'/usr/app/src/test_repos/html2text/test/html_entities_out_of_text.md'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/decript_tage.html'"}, "return_value": "'/usr/app/src/test_repos/html2text/test/decript_tage.md'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/lrm_inside_i.html'"}, "return_value": "'/usr/app/src/test_repos/html2text/test/lrm_inside_i.md'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/q_tag.html'"}, "return_value": "'/usr/app/src/test_repos/html2text/test/q_tag.md'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/stressed_with_html_entities.html'"}, "return_value": "'/usr/app/src/test_repos/html2text/test/stressed_with_html_entities.md'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/css_import_no_semicolon.html'"}, "return_value": "'/usr/app/src/test_repos/html2text/test/css_import_no_semicolon.md'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/anchors.html'"}, "return_value": "'/usr/app/src/test_repos/html2text/test/anchors.md'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/mixed_nested_lists.html'"}, "return_value": "'/usr/app/src/test_repos/html2text/test/mixed_nested_lists.md'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/emphasis_whitespace.html'"}, "return_value": "'/usr/app/src/test_repos/html2text/test/emphasis_whitespace.md'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/horizontal_rule.html'"}, "return_value": "'/usr/app/src/test_repos/html2text/test/horizontal_rule.md'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/list_tags_example.html'"}, "return_value": "'/usr/app/src/test_repos/html2text/test/list_tags_example.md'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/link_titles.html'"}, "return_value": "'/usr/app/src/test_repos/html2text/test/link_titles.md'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/img-tag-with-link.html'"}, "return_value": "'/usr/app/src/test_repos/html2text/test/img-tag-with-link.md'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/invalid_start.html'"}, "return_value": "'/usr/app/src/test_repos/html2text/test/invalid_start.md'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/rlm_inside_strong.html'"}, "return_value": "'/usr/app/src/test_repos/html2text/test/rlm_inside_strong.md'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/preformatted_in_list.html'"}, "return_value": "'/usr/app/src/test_repos/html2text/test/preformatted_in_list.md'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/empty-link.html'"}, "return_value": "'/usr/app/src/test_repos/html2text/test/empty-link.md'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/normal.html'"}, "return_value": "'/usr/app/src/test_repos/html2text/test/normal.md'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/bold_inside_link.html'"}, "return_value": "'/usr/app/src/test_repos/html2text/test/bold_inside_link.md'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/emdash-para.html'"}, "return_value": "'/usr/app/src/test_repos/html2text/test/emdash-para.md'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/apos_element.html'"}, "return_value": "'/usr/app/src/test_repos/html2text/test/apos_element.md'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/header_tags.html'"}, "return_value": "'/usr/app/src/test_repos/html2text/test/header_tags.md'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/inplace_baseurl_substitution.html'"}, "return_value": "'/usr/app/src/test_repos/html2text/test/inplace_baseurl_substitution.md'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/bold_long_line.html'"}, "return_value": "'/usr/app/src/test_repos/html2text/test/bold_long_line.md'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/bodywidth_newline.html'"}, "return_value": "'/usr/app/src/test_repos/html2text/test/bodywidth_newline.md'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/text_after_list.html'"}, "return_value": "'/usr/app/src/test_repos/html2text/test/text_after_list.md'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/lrm_after_i.html'"}, "return_value": "'/usr/app/src/test_repos/html2text/test/lrm_after_i.md'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/pre.html'"}, "return_value": "'/usr/app/src/test_repos/html2text/test/pre.md'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/html-escaping.html'"}, "return_value": "'/usr/app/src/test_repos/html2text/test/html-escaping.md'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/emphasis_preserved_whitespace.html'"}, "return_value": "'/usr/app/src/test_repos/html2text/test/emphasis_preserved_whitespace.md'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/url-escaping.html'"}, "return_value": "'/usr/app/src/test_repos/html2text/test/url-escaping.md'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/lrm_after_b.html'"}, "return_value": "'/usr/app/src/test_repos/html2text/test/lrm_after_b.md'"}], "text": "def get_baseline_name(fn):\n    return os.path.splitext(fn)[0] + \".md\""}, "cleanup_eol": {"line": 13, "args": [{"func_args": {"clean_str": "'**b**\\n\\n'"}, "return_value": "'**b**\\n\\n'"}, {"func_args": {"clean_str": "'  * One two three four five six seven eight nine ten eleven twelve thirteen\\n    fourteen fifteen sixteen seventeen eighteen nineteen twenty.\\n  * One two three four five six seven eight nine ten eleven twelve thirteen\\n    fourteen fifteen sixteen seventeen eighteen nineteen twenty.\\n\\nText between lists.\\n\\n  * One two three four five six seven eight nine ten eleven twelve thirteen\\n    fourteen fifteen sixteen seventeen eighteen nineteen twenty.\\n  * One two three four five six seven eight nine ten eleven twelve thirteen\\n    fourteen fifteen sixteen seventeen eighteen nineteen twenty.\\n\\nText after list.\\n\\n'"}, "return_value": "'  * One two three four five six seven eight nine ten eleven twelve thirteen\\n    fourteen fifteen sixteen seventeen eighteen nineteen twenty.\\n  * One two three four five six seven eight nine ten eleven twelve thirteen\\n    fourteen fifteen sixteen seventeen eighteen nineteen twenty.\\n\\nText between lists.\\n\\n  * One two three four five six seven eight nine ten eleven twelve thirteen\\n    fourteen fifteen sixteen seventeen eighteen nineteen twenty.\\n  * One two three four five six seven eight nine ten eleven twelve thirteen\\n    fourteen fifteen sixteen seventeen eighteen nineteen twenty.\\n\\nText after list.\\n\\n'"}, {"func_args": {"clean_str": "'asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd\\nasd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd\\nasd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd\\nasd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd\\nasd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd\\nasd asd asd asd asd\\n![](http://www.foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo.com)\\nasd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd\\nasd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd\\nasd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd\\nasd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd\\nasd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd\\nasd asd asd asd asd\\n\\n'"}, "return_value": "'asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd\\nasd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd\\nasd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd\\nasd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd\\nasd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd\\nasd asd asd asd asd\\n![](http://www.foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo.com)\\nasd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd\\nasd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd\\nasd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd\\nasd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd\\nasd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd\\nasd asd asd asd asd\\n\\n'"}, {"func_args": {"clean_str": "'> \"The time has come\", the Walrus said, \"To talk of many things: Of shoes -\\n> and ships - and sealing wax - Of cabbages - and kings- And why the sea is\\n> boiling hot - And whether pigs have wings.\"\\n\\n'"}, "return_value": "'> \"The time has come\", the Walrus said, \"To talk of many things: Of shoes -\\n> and ships - and sealing wax - Of cabbages - and kings- And why the sea is\\n> boiling hot - And whether pigs have wings.\"\\n\\n'"}, {"func_args": {"clean_str": "'[![](http://example.com/img.png)](http://example.com)\\n\\n'"}, "return_value": "'[![](http://example.com/img.png)](http://example.com)\\n\\n'"}, {"func_args": {"clean_str": "'# This is a test document\\n\\nWith some text, `code`, **bolds** and _italics_.\\n\\n## This is second header\\n\\nDisplaynone text\\n\\nHeader 1 | Header 2 | Header 3  \\n---|---|---  \\nContent 1 | Content 2 | ![200](http://lorempixel.com/200/200) Image!  \\nContent 1 | Content 2 | ![200](http://lorempixel.com/200/200) Image!\\n\\n'"}, "return_value": "'# This is a test document\\n\\nWith some text, `code`, **bolds** and _italics_.\\n\\n## This is second header\\n\\nDisplaynone text\\n\\nHeader 1 | Header 2 | Header 3  \\n---|---|---  \\nContent 1 | Content 2 | ![200](http://lorempixel.com/200/200) Image!  \\nContent 1 | Content 2 | ![200](http://lorempixel.com/200/200) Image!\\n\\n'"}, {"func_args": {"clean_str": "'a\\n\\n> b  \\n> c\\n\\n'"}, "return_value": "'a\\n\\n> b  \\n> c\\n\\n'"}, {"func_args": {"clean_str": "'Press `[CTRL]+c` to copy.\\n\\n'"}, "return_value": "'Press `[CTRL]+c` to copy.\\n\\n'"}, {"func_args": {"clean_str": "'TLA xyz\\n\\n  *[TLA]: Three Letter Acronym\\n\\n'"}, "return_value": "'TLA xyz\\n\\n  *[TLA]: Three Letter Acronym\\n\\n'"}, {"func_args": {"clean_str": "'[This is an A tag with an empty title property](test.html)\\n\\n'"}, "return_value": "'[This is an A tag with an empty title property](test.html)\\n\\n'"}, {"func_args": {"clean_str": "'# NBSP handling test #1\\n\\nIn this test all NBSPs will be replaced with ordinary spaces (unicode_snob =\\nFalse).\\n\\nLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\\ntempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\\nquis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\\nconsequat.\\n\\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore\\neu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt\\nin culpa qui officia deserunt mollit anim id est laborum.\\n\\n'"}, "return_value": "'# NBSP handling test #1\\n\\nIn this test all NBSPs will be replaced with ordinary spaces (unicode_snob =\\nFalse).\\n\\nLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\\ntempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\\nquis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\\nconsequat.\\n\\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore\\neu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt\\nin culpa qui officia deserunt mollit anim id est laborum.\\n\\n'"}, {"func_args": {"clean_str": "'[allas: Country Manager](http://thth)\\n\\n'"}, "return_value": "'[allas: Country Manager](http://thth)\\n\\n'"}, {"func_args": {"clean_str": "'~~something~~ ~~something~~ ~~something~~\\n\\n'"}, "return_value": "'~~something~~ ~~something~~ ~~something~~\\n\\n'"}, {"func_args": {"clean_str": "'_Foo bar_\\n\\n'"}, "return_value": "'_Foo bar_\\n\\n'"}, {"func_args": {"clean_str": "'\"If this is a test,\" he said, \"then it should pass\".\\n\\n'"}, "return_value": "'\"If this is a test,\" he said, \"then it should pass\".\\n\\n'"}, {"func_args": {"clean_str": "'**hello** world ><\\n\\n'"}, "return_value": "'**hello** world ><\\n\\n'"}, {"func_args": {"clean_str": "'# CSS @import statement without semicolon handling test\\n\\nLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\\ntempor incididunt ut labore et dolore magna aliqua.\\n\\n'"}, "return_value": "'# CSS @import statement without semicolon handling test\\n\\nLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\\ntempor incididunt ut labore et dolore magna aliqua.\\n\\n'"}, {"func_args": {"clean_str": "'# Processing hyperlinks\\n\\nAdditional hyperlink tests!\\n\\n[**Bold Link**](http://some.link)\\n[`filename.py`](http://some.link/filename.py) [The source code is called\\n`magic.py`](http://some.link/magicsources.py)\\n\\n'"}, "return_value": "'# Processing hyperlinks\\n\\nAdditional hyperlink tests!\\n\\n[**Bold Link**](http://some.link)\\n[`filename.py`](http://some.link/filename.py) [The source code is called\\n`magic.py`](http://some.link/magicsources.py)\\n\\n'"}, {"func_args": {"clean_str": "'  1. ordered\\n  2. ...\\n     * unordered\\n     * ...\\n  3. end\\n\\n  * unordered\\n  * ...\\n    1. ordered\\n    2. ...\\n  * end\\n\\n'"}, "return_value": "'  1. ordered\\n  2. ...\\n     * unordered\\n     * ...\\n  3. end\\n\\n  * unordered\\n  * ...\\n    1. ordered\\n    2. ...\\n  * end\\n\\n'"}, {"func_args": {"clean_str": "'_**ib**_\\n\\n._**ib**_\\n\\n**_bi_**\\n\\n.**_bi_**\\n\\n_~~is~~_\\n\\n._~~is~~_\\n\\n_~~si~~_\\n\\n._~~si~~_\\n\\n**~~bs~~**\\n\\n.**~~bs~~**\\n\\n~~**sb**~~\\n\\n.~~**sb**~~\\n\\n~~**_sbi_**~~\\n\\n.~~**_sbi_**~~\\n\\n**_~~bis~~_**\\n\\n.**_~~bis~~_**\\n\\n'"}, "return_value": "'_**ib**_\\n\\n._**ib**_\\n\\n**_bi_**\\n\\n.**_bi_**\\n\\n_~~is~~_\\n\\n._~~is~~_\\n\\n_~~si~~_\\n\\n._~~si~~_\\n\\n**~~bs~~**\\n\\n.**~~bs~~**\\n\\n~~**sb**~~\\n\\n.~~**sb**~~\\n\\n~~**_sbi_**~~\\n\\n.~~**_sbi_**~~\\n\\n**_~~bis~~_**\\n\\n.**_~~bis~~_**\\n\\n'"}, {"func_args": {"clean_str": "'* * *\\n\\n'"}, "return_value": "'* * *\\n\\n'"}, {"func_args": {"clean_str": "'Definition List\\n\\n    A list of terms and their definitions/descriptions.\\nOrdered List\\n\\n    A numbered list.\\nUnordered List\\n\\n    An unnumbered list.\\n\\n#### Example 2\\n\\nVocals\\n\\n    Bruce Dickinson\\nGuitar\\n\\n    Adrian Smith\\n    Dave Murray\\n    Janick Gers\\nBass\\n\\n    Steve Harris\\nDrums\\n\\n    Nicko McBrain\\n\\n  * some item\\n  * Some other item\\n  * some item\\n\\n  1. Some other item\\n  2. some item\\n  3. some item\\n\\n  * something else here\\n  * some item\\n\\n'"}, "return_value": "'Definition List\\n\\n    A list of terms and their definitions/descriptions.\\nOrdered List\\n\\n    A numbered list.\\nUnordered List\\n\\n    An unnumbered list.\\n\\n#### Example 2\\n\\nVocals\\n\\n    Bruce Dickinson\\nGuitar\\n\\n    Adrian Smith\\n    Dave Murray\\n    Janick Gers\\nBass\\n\\n    Steve Harris\\nDrums\\n\\n    Nicko McBrain\\n\\n  * some item\\n  * Some other item\\n  * some item\\n\\n  1. Some other item\\n  2. some item\\n  3. some item\\n\\n  * something else here\\n  * some item\\n\\n'"}, {"func_args": {"clean_str": "'[ first example](http://example.com \"MyTitle\")  \\n[ second example](http://example.com)\\n\\n'"}, "return_value": "'[ first example](http://example.com \"MyTitle\")  \\n[ second example](http://example.com)\\n\\n'"}, {"func_args": {"clean_str": "'# Processing images with links\\n\\nThis test checks images with associated links.\\n\\n[![\\\\(banana\\\\)](http://placehold.it/350x150#\\\\(banana\\\\))](http://some.link)\\n[![\\\\[banana\\\\]](http://placehold.it/350x150#\\\\[banana\\\\])](http://some.link)\\n[![{banana}](http://placehold.it/350x150#{banana})](http://some.link)\\n[![\\\\(\\\\[{}\\\\]\\\\)](http://placehold.it/350x150#\\\\(\\\\[{}\\\\]\\\\))](http://some.link)\\n[![](http://placehold.it/350x150#\\\\(\\\\[{}\\\\]\\\\))](http://some.link)\\n\\n'"}, "return_value": "'# Processing images with links\\n\\nThis test checks images with associated links.\\n\\n[![\\\\(banana\\\\)](http://placehold.it/350x150#\\\\(banana\\\\))](http://some.link)\\n[![\\\\[banana\\\\]](http://placehold.it/350x150#\\\\[banana\\\\])](http://some.link)\\n[![{banana}](http://placehold.it/350x150#{banana})](http://some.link)\\n[![\\\\(\\\\[{}\\\\]\\\\)](http://placehold.it/350x150#\\\\(\\\\[{}\\\\]\\\\))](http://some.link)\\n[![](http://placehold.it/350x150#\\\\(\\\\[{}\\\\]\\\\))](http://some.link)\\n\\n'"}, {"func_args": {"clean_str": "'  1. The ol has an invalid start \\n  2. This should just be ignored \\n\\n'"}, "return_value": "'  1. The ol has an invalid start \\n  2. This should just be ignored \\n\\n'"}, {"func_args": {"clean_str": "'**Foo bar**\\n\\n'"}, "return_value": "'**Foo bar**\\n\\n'"}, {"func_args": {"clean_str": "'  * Run this command: \\n    \\n        ls -l *.html\\n\\n  * ?\\n  * Profit!\\n\\n'"}, "return_value": "'  * Run this command: \\n    \\n        ls -l *.html\\n\\n  * ?\\n  * Profit!\\n\\n'"}, {"func_args": {"clean_str": "'# Processing empty hyperlinks\\n\\nThis test checks whether empty hyperlinks still appear in the markdown result.\\n\\n[](http://some.link) [](http://some.link)\\n\\n'"}, "return_value": "'# Processing empty hyperlinks\\n\\nThis test checks whether empty hyperlinks still appear in the markdown result.\\n\\n[](http://some.link) [](http://some.link)\\n\\n'"}, {"func_args": {"clean_str": "\"#  test doc\\n\\nfirst issue\\n\\n  * bit\\n  * _**bold italic**_\\n    * orange\\n    * apple\\n  * final\\n\\ntext to separate lists\\n\\n  1. now with numbers\\n  2. the prisoner\\n    1. not an _italic number_\\n    2. a **bold human** being\\n  3. end\\n\\n**bold**  \\n_italic_  \\n\\n    \\n    \\n    def func(x):\\n      if x < 1:\\n        return 'a'\\n      return 'b'\\n          \\n\\nSome `fixed width text` here  \\n_`italic fixed width text`_\\n\\n2012\\\\. Now that was a good year. So was 2011. That's all.\\n\\n3.14159 is an approximation of pi.\\n\\n\\\\+ not + a list item\\n\\n+foo\\n\\n\\\\- foo - bar\\n\\n-foo \\n\\nnot a header  \\n\\\\--\\n\\nnot a hr  \\n  \\n\\\\---  \\n\\\\- - -\\n\\nc:\\\\tmp, \\\\\\\\\\\\server\\\\path, \\\\\\\\_/, foo\\\\bar, #\\\\\\\\#, \\\\\\\\\\\\\\\\#\\n\\n\""}, "return_value": "\"#  test doc\\n\\nfirst issue\\n\\n  * bit\\n  * _**bold italic**_\\n    * orange\\n    * apple\\n  * final\\n\\ntext to separate lists\\n\\n  1. now with numbers\\n  2. the prisoner\\n    1. not an _italic number_\\n    2. a **bold human** being\\n  3. end\\n\\n**bold**  \\n_italic_  \\n\\n    \\n    \\n    def func(x):\\n      if x < 1:\\n        return 'a'\\n      return 'b'\\n          \\n\\nSome `fixed width text` here  \\n_`italic fixed width text`_\\n\\n2012\\\\. Now that was a good year. So was 2011. That's all.\\n\\n3.14159 is an approximation of pi.\\n\\n\\\\+ not + a list item\\n\\n+foo\\n\\n\\\\- foo - bar\\n\\n-foo \\n\\nnot a header  \\n\\\\--\\n\\nnot a hr  \\n  \\n\\\\---  \\n\\\\- - -\\n\\nc:\\\\tmp, \\\\\\\\\\\\server\\\\path, \\\\\\\\_/, foo\\\\bar, #\\\\\\\\#, \\\\\\\\\\\\\\\\#\\n\\n\""}, {"func_args": {"clean_str": "'[**Text**](link.htm) [**sample**](/nothing/)\\n\\n'"}, "return_value": "'[**Text**](link.htm) [**sample**](/nothing/)\\n\\n'"}, {"func_args": {"clean_str": "'Bacon ipsum dolor sit amet pork chop id pork belly ham hock, sed meatloaf eu\\nexercitation flank quis veniam officia. Chuck dolor esse, occaecat est elit\\ndrumstick ground round tri-tip nisi. Eu fugiat drumstick leberkas magna.\\nTurducken frankfurter nisi aute shank--\\n\\n--irure ex esse id, ham commodo meatloaf pig pariatur ut cow. Officia salami\\nin fatback voluptate boudin ullamco beef ribs shank. Duis spare ribs pork\\nchop, ad leberkas reprehenderit id voluptate salami ham ut in ut cillum\\nturducken. Nisi ribeye tail capicola dolore andouille. Short ribs id beef\\nribs, et nulla ground round do sunt dolore. Dolore nisi ullamco veniam sunt.\\nDuis brisket drumstick, dolor fatback filet mignon meatloaf laboris tri-tip\\nspeck chuck ball tip voluptate ullamco laborum.\\n\\n\\\\--\\n\\n'"}, "return_value": "'Bacon ipsum dolor sit amet pork chop id pork belly ham hock, sed meatloaf eu\\nexercitation flank quis veniam officia. Chuck dolor esse, occaecat est elit\\ndrumstick ground round tri-tip nisi. Eu fugiat drumstick leberkas magna.\\nTurducken frankfurter nisi aute shank--\\n\\n--irure ex esse id, ham commodo meatloaf pig pariatur ut cow. Officia salami\\nin fatback voluptate boudin ullamco beef ribs shank. Duis spare ribs pork\\nchop, ad leberkas reprehenderit id voluptate salami ham ut in ut cillum\\nturducken. Nisi ribeye tail capicola dolore andouille. Short ribs id beef\\nribs, et nulla ground round do sunt dolore. Dolore nisi ullamco veniam sunt.\\nDuis brisket drumstick, dolor fatback filet mignon meatloaf laboris tri-tip\\nspeck chuck ball tip voluptate ullamco laborum.\\n\\n\\\\--\\n\\n'"}, {"func_args": {"clean_str": "\"'\\n\\n\""}, "return_value": "\"'\\n\\n\""}, {"func_args": {"clean_str": "'# H1\\n\\n## H2\\n\\n### H3\\n\\n#### H4\\n\\n##### H5\\n\\n###### H6\\n\\n####### H7\\n\\n######## H8\\n\\n######### H9\\n\\nH10 H11 H12 NO number\\n\\n'"}, "return_value": "'# H1\\n\\n## H2\\n\\n### H3\\n\\n#### H4\\n\\n##### H5\\n\\n###### H6\\n\\n####### H7\\n\\n######## H8\\n\\n######### H9\\n\\nH10 H11 H12 NO number\\n\\n'"}, {"func_args": {"clean_str": "'![read2text header image](http://brettterpstra.com/uploads/2012/01/read2textheader.jpg)\\n\\n[BrettTerpstra.com](http://brettterpstra.com/)\\n'"}, "return_value": "'![read2text header image](http://brettterpstra.com/uploads/2012/01/read2textheader.jpg)\\n\\n[BrettTerpstra.com](http://brettterpstra.com/)\\n'"}, {"func_args": {"clean_str": "'**text** and a very long long long long long long long long long long long\\nlong long long long long long long long long line\\n\\n'"}, "return_value": "'**text** and a very long long long long long long long long long long long\\nlong long long long long long long long long line\\n\\n'"}, {"func_args": {"clean_str": "'Another theory is that magician and occultist [Aliester Crowley](http://en.wikipedia.org/wiki/Aleister_Crowley) created the beast while attempting to summon evil spirits at his house on the edge of the lake in the early 1900\u2032s. **I met a local woman who prefers this explanation.**\\n'"}, "return_value": "'Another theory is that magician and occultist [Aliester Crowley](http://en.wikipedia.org/wiki/Aleister_Crowley) created the beast while attempting to summon evil spirits at his house on the edge of the lake in the early 1900\u2032s. **I met a local woman who prefers this explanation.**\\n'"}, {"func_args": {"clean_str": "'  * item\\n\\ntext\\n\\n'"}, "return_value": "'  * item\\n\\ntext\\n\\n'"}, {"func_args": {"clean_str": "'_Foo_\\n\\n'"}, "return_value": "'_Foo_\\n\\n'"}, {"func_args": {"clean_str": "'\\n    a\\n    b\\n    c\\n\\nEnsure that HTML that starts with a crowded `<pre>` is converted to reasonable\\nMarkdown.\\n\\n'"}, "return_value": "'\\n    a\\n    b\\n    c\\n\\nEnsure that HTML that starts with a crowded `<pre>` is converted to reasonable\\nMarkdown.\\n\\n'"}, {"func_args": {"clean_str": "'Escaped HTML like <div> or & should NOT remain escaped on output\\n\\n    \\n    \\n    ...even when that escaped HTML is in a <pre> tag\\n\\n`...or a <code> tag`\\n\\n'"}, "return_value": "'Escaped HTML like <div> or & should NOT remain escaped on output\\n\\n    \\n    \\n    ...even when that escaped HTML is in a <pre> tag\\n\\n`...or a <code> tag`\\n\\n'"}, {"func_args": {"clean_str": "'_emphasis_\\n\\n_emphasis:_ some text\\n\\n_repeat:_ again\\n\\n**bold**\\n\\n**bold:** some text\\n\\n**repeat:** again\\n\\n~~strike~~\\n\\n~~strike:~~ some text\\n\\n~~strike:~~ again\\n\\nseparate _emphasis_ some more text\\n\\n_emphasis_.\\n\\n_emphasis_?\\n\\n_emphasis_!\\n\\n(_emphasis_)\\n\\n[**bold**}\\n\\n(~~strike~~]\\n\\n* **bold**\\n\\n~ ~~strike~~\\n\\n_em1_ _em2_\\n\\n'"}, "return_value": "'_emphasis_\\n\\n_emphasis:_ some text\\n\\n_repeat:_ again\\n\\n**bold**\\n\\n**bold:** some text\\n\\n**repeat:** again\\n\\n~~strike~~\\n\\n~~strike:~~ some text\\n\\n~~strike:~~ again\\n\\nseparate _emphasis_ some more text\\n\\n_emphasis_.\\n\\n_emphasis_?\\n\\n_emphasis_!\\n\\n(_emphasis_)\\n\\n[**bold**}\\n\\n(~~strike~~]\\n\\n* **bold**\\n\\n~ ~~strike~~\\n\\n_em1_ _em2_\\n\\n'"}, {"func_args": {"clean_str": "\"# Markdown-sensible characters processing\\n\\nThis test checks special characters processing inside URLs: parenthesis and\\nbrackets should be escaped to keep markdown image and anchor syntax safe and\\nsound.\\n\\n  * [Some MSDN link using parenthesis](http://msdn.microsoft.com/en-us/library/system.drawing.drawing2d\\\\(v=vs.110\\\\))\\n  * [Google search result URL with unescaped brackets](https://www.google.ru/search?q=\\\\[brackets are cool\\\\])\\n  * [Yet another test for [brackets], {curly braces} and (parenthesis) processing inside the anchor](https://www.google.ru/search?q='\\\\[\\\\({}\\\\)\\\\]')\\n  * Use automatic links like <http://example.com/> when the URL is the label\\n  * Exempt [non-absolute_URIs](non-absolute_URIs) from automatic link detection\\n\\nAnd here are images with tricky attribute values:\\n\\n![\\\\(banana\\\\)](http://placehold.it/350x150#\\\\(banana\\\\))  \\n![\\\\[banana\\\\]](http://placehold.it/350x150#\\\\[banana\\\\])  \\n![{banana}](http://placehold.it/350x150#{banana})  \\n![\\\\(\\\\[{}\\\\]\\\\)](http://placehold.it/350x150#\\\\(\\\\[{}\\\\]\\\\))\\n![](http://placehold.it/350x150#\\\\(\\\\[{}\\\\]\\\\))\\n\\n\""}, "return_value": "\"# Markdown-sensible characters processing\\n\\nThis test checks special characters processing inside URLs: parenthesis and\\nbrackets should be escaped to keep markdown image and anchor syntax safe and\\nsound.\\n\\n  * [Some MSDN link using parenthesis](http://msdn.microsoft.com/en-us/library/system.drawing.drawing2d\\\\(v=vs.110\\\\))\\n  * [Google search result URL with unescaped brackets](https://www.google.ru/search?q=\\\\[brackets are cool\\\\])\\n  * [Yet another test for [brackets], {curly braces} and (parenthesis) processing inside the anchor](https://www.google.ru/search?q='\\\\[\\\\({}\\\\)\\\\]')\\n  * Use automatic links like <http://example.com/> when the URL is the label\\n  * Exempt [non-absolute_URIs](non-absolute_URIs) from automatic link detection\\n\\nAnd here are images with tricky attribute values:\\n\\n![\\\\(banana\\\\)](http://placehold.it/350x150#\\\\(banana\\\\))  \\n![\\\\[banana\\\\]](http://placehold.it/350x150#\\\\[banana\\\\])  \\n![{banana}](http://placehold.it/350x150#{banana})  \\n![\\\\(\\\\[{}\\\\]\\\\)](http://placehold.it/350x150#\\\\(\\\\[{}\\\\]\\\\))\\n![](http://placehold.it/350x150#\\\\(\\\\[{}\\\\]\\\\))\\n\\n\""}, {"func_args": {"clean_str": "'**b**\\n\\n'"}, "return_value": "'**b**\\n\\n'"}], "text": "def cleanup_eol(clean_str):\n    if os.name == \"nt\" or sys.platform == \"cygwin\":\n        # Fix the unwanted CR to CRCRLF replacement\n        # during text pipelining on Windows/cygwin\n        # on cygwin, os.name == 'posix', not nt\n        clean_str = re.sub(r\"\\r+\", \"\\r\", clean_str)\n        clean_str = clean_str.replace(\"\\r\\n\", \"\\n\")\n    return clean_str"}, "get_baseline": {"line": 219, "args": [{"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/lrm_after_b.html'"}, "return_value": "'**b**\\n\\n'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/wrap_list_items_example.html'"}, "return_value": "'  * One two three four five six seven eight nine ten eleven twelve thirteen\\n    fourteen fifteen sixteen seventeen eighteen nineteen twenty.\\n  * One two three four five six seven eight nine ten eleven twelve thirteen\\n    fourteen fifteen sixteen seventeen eighteen nineteen twenty.\\n\\nText between lists.\\n\\n  * One two three four five six seven eight nine ten eleven twelve thirteen\\n    fourteen fifteen sixteen seventeen eighteen nineteen twenty.\\n  * One two three four five six seven eight nine ten eleven twelve thirteen\\n    fourteen fifteen sixteen seventeen eighteen nineteen twenty.\\n\\nText after list.\\n\\n'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/long_lines.html'"}, "return_value": "'asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd\\nasd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd\\nasd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd\\nasd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd\\nasd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd\\nasd asd asd asd asd\\n![](http://www.foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo.com)\\nasd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd\\nasd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd\\nasd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd\\nasd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd\\nasd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd\\nasd asd asd asd asd\\n\\n'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/blockquote_example.html'"}, "return_value": "'> \"The time has come\", the Walrus said, \"To talk of many things: Of shoes -\\n> and ships - and sealing wax - Of cabbages - and kings- And why the sea is\\n> boiling hot - And whether pigs have wings.\"\\n\\n'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/images_with_div_wrap.html'"}, "return_value": "'[![](http://example.com/img.png)](http://example.com)\\n\\n'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/doc_with_table.html'"}, "return_value": "'# This is a test document\\n\\nWith some text, `code`, **bolds** and _italics_.\\n\\n## This is second header\\n\\nDisplaynone text\\n\\nHeader 1 | Header 2 | Header 3  \\n---|---|---  \\nContent 1 | Content 2 | ![200](http://lorempixel.com/200/200) Image!  \\nContent 1 | Content 2 | ![200](http://lorempixel.com/200/200) Image!\\n\\n'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/break_preserved_in_blockquote.html'"}, "return_value": "'a\\n\\n> b  \\n> c\\n\\n'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/kbd_tag.html'"}, "return_value": "'Press `[CTRL]+c` to copy.\\n\\n'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/abbr_tag.html'"}, "return_value": "'TLA xyz\\n\\n  *[TLA]: Three Letter Acronym\\n\\n'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/empty-title-tag.html'"}, "return_value": "'[This is an A tag with an empty title property](test.html)\\n\\n'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/nbsp.html'"}, "return_value": "'# NBSP handling test #1\\n\\nIn this test all NBSPs will be replaced with ordinary spaces (unicode_snob =\\nFalse).\\n\\nLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\\ntempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\\nquis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\\nconsequat.\\n\\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore\\neu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt\\nin culpa qui officia deserunt mollit anim id est laborum.\\n\\n'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/html_entities_out_of_text.html'"}, "return_value": "'[allas: Country Manager](http://thth)\\n\\n'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/decript_tage.html'"}, "return_value": "'~~something~~ ~~something~~ ~~something~~\\n\\n'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/lrm_inside_i.html'"}, "return_value": "'_Foo bar_\\n\\n'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/q_tag.html'"}, "return_value": "'\"If this is a test,\" he said, \"then it should pass\".\\n\\n'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/stressed_with_html_entities.html'"}, "return_value": "'**hello** world ><\\n\\n'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/css_import_no_semicolon.html'"}, "return_value": "'# CSS @import statement without semicolon handling test\\n\\nLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\\ntempor incididunt ut labore et dolore magna aliqua.\\n\\n'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/anchors.html'"}, "return_value": "'# Processing hyperlinks\\n\\nAdditional hyperlink tests!\\n\\n[**Bold Link**](http://some.link)\\n[`filename.py`](http://some.link/filename.py) [The source code is called\\n`magic.py`](http://some.link/magicsources.py)\\n\\n'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/mixed_nested_lists.html'"}, "return_value": "'  1. ordered\\n  2. ...\\n     * unordered\\n     * ...\\n  3. end\\n\\n  * unordered\\n  * ...\\n    1. ordered\\n    2. ...\\n  * end\\n\\n'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/emphasis_whitespace.html'"}, "return_value": "'_**ib**_\\n\\n._**ib**_\\n\\n**_bi_**\\n\\n.**_bi_**\\n\\n_~~is~~_\\n\\n._~~is~~_\\n\\n_~~si~~_\\n\\n._~~si~~_\\n\\n**~~bs~~**\\n\\n.**~~bs~~**\\n\\n~~**sb**~~\\n\\n.~~**sb**~~\\n\\n~~**_sbi_**~~\\n\\n.~~**_sbi_**~~\\n\\n**_~~bis~~_**\\n\\n.**_~~bis~~_**\\n\\n'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/horizontal_rule.html'"}, "return_value": "'* * *\\n\\n'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/list_tags_example.html'"}, "return_value": "'Definition List\\n\\n    A list of terms and their definitions/descriptions.\\nOrdered List\\n\\n    A numbered list.\\nUnordered List\\n\\n    An unnumbered list.\\n\\n#### Example 2\\n\\nVocals\\n\\n    Bruce Dickinson\\nGuitar\\n\\n    Adrian Smith\\n    Dave Murray\\n    Janick Gers\\nBass\\n\\n    Steve Harris\\nDrums\\n\\n    Nicko McBrain\\n\\n  * some item\\n  * Some other item\\n  * some item\\n\\n  1. Some other item\\n  2. some item\\n  3. some item\\n\\n  * something else here\\n  * some item\\n\\n'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/link_titles.html'"}, "return_value": "'[ first example](http://example.com \"MyTitle\")  \\n[ second example](http://example.com)\\n\\n'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/img-tag-with-link.html'"}, "return_value": "'# Processing images with links\\n\\nThis test checks images with associated links.\\n\\n[![\\\\(banana\\\\)](http://placehold.it/350x150#\\\\(banana\\\\))](http://some.link)\\n[![\\\\[banana\\\\]](http://placehold.it/350x150#\\\\[banana\\\\])](http://some.link)\\n[![{banana}](http://placehold.it/350x150#{banana})](http://some.link)\\n[![\\\\(\\\\[{}\\\\]\\\\)](http://placehold.it/350x150#\\\\(\\\\[{}\\\\]\\\\))](http://some.link)\\n[![](http://placehold.it/350x150#\\\\(\\\\[{}\\\\]\\\\))](http://some.link)\\n\\n'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/invalid_start.html'"}, "return_value": "'  1. The ol has an invalid start \\n  2. This should just be ignored \\n\\n'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/rlm_inside_strong.html'"}, "return_value": "'**Foo bar**\\n\\n'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/preformatted_in_list.html'"}, "return_value": "'  * Run this command: \\n    \\n        ls -l *.html\\n\\n  * ?\\n  * Profit!\\n\\n'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/empty-link.html'"}, "return_value": "'# Processing empty hyperlinks\\n\\nThis test checks whether empty hyperlinks still appear in the markdown result.\\n\\n[](http://some.link) [](http://some.link)\\n\\n'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/normal.html'"}, "return_value": "\"#  test doc\\n\\nfirst issue\\n\\n  * bit\\n  * _**bold italic**_\\n    * orange\\n    * apple\\n  * final\\n\\ntext to separate lists\\n\\n  1. now with numbers\\n  2. the prisoner\\n    1. not an _italic number_\\n    2. a **bold human** being\\n  3. end\\n\\n**bold**  \\n_italic_  \\n\\n    \\n    \\n    def func(x):\\n      if x < 1:\\n        return 'a'\\n      return 'b'\\n          \\n\\nSome `fixed width text` here  \\n_`italic fixed width text`_\\n\\n2012\\\\. Now that was a good year. So was 2011. That's all.\\n\\n3.14159 is an approximation of pi.\\n\\n\\\\+ not + a list item\\n\\n+foo\\n\\n\\\\- foo - bar\\n\\n-foo \\n\\nnot a header  \\n\\\\--\\n\\nnot a hr  \\n  \\n\\\\---  \\n\\\\- - -\\n\\nc:\\\\tmp, \\\\\\\\\\\\server\\\\path, \\\\\\\\_/, foo\\\\bar, #\\\\\\\\#, \\\\\\\\\\\\\\\\#\\n\\n\""}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/bold_inside_link.html'"}, "return_value": "'[**Text**](link.htm) [**sample**](/nothing/)\\n\\n'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/emdash-para.html'"}, "return_value": "'Bacon ipsum dolor sit amet pork chop id pork belly ham hock, sed meatloaf eu\\nexercitation flank quis veniam officia. Chuck dolor esse, occaecat est elit\\ndrumstick ground round tri-tip nisi. Eu fugiat drumstick leberkas magna.\\nTurducken frankfurter nisi aute shank--\\n\\n--irure ex esse id, ham commodo meatloaf pig pariatur ut cow. Officia salami\\nin fatback voluptate boudin ullamco beef ribs shank. Duis spare ribs pork\\nchop, ad leberkas reprehenderit id voluptate salami ham ut in ut cillum\\nturducken. Nisi ribeye tail capicola dolore andouille. Short ribs id beef\\nribs, et nulla ground round do sunt dolore. Dolore nisi ullamco veniam sunt.\\nDuis brisket drumstick, dolor fatback filet mignon meatloaf laboris tri-tip\\nspeck chuck ball tip voluptate ullamco laborum.\\n\\n\\\\--\\n\\n'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/apos_element.html'"}, "return_value": "\"'\\n\\n\""}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/header_tags.html'"}, "return_value": "'# H1\\n\\n## H2\\n\\n### H3\\n\\n#### H4\\n\\n##### H5\\n\\n###### H6\\n\\n####### H7\\n\\n######## H8\\n\\n######### H9\\n\\nH10 H11 H12 NO number\\n\\n'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/inplace_baseurl_substitution.html'"}, "return_value": "'![read2text header image](http://brettterpstra.com/uploads/2012/01/read2textheader.jpg)\\n\\n[BrettTerpstra.com](http://brettterpstra.com/)\\n'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/bold_long_line.html'"}, "return_value": "'**text** and a very long long long long long long long long long long long\\nlong long long long long long long long long line\\n\\n'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/bodywidth_newline.html'"}, "return_value": "'Another theory is that magician and occultist [Aliester Crowley](http://en.wikipedia.org/wiki/Aleister_Crowley) created the beast while attempting to summon evil spirits at his house on the edge of the lake in the early 1900\u2032s. **I met a local woman who prefers this explanation.**\\n'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/text_after_list.html'"}, "return_value": "'  * item\\n\\ntext\\n\\n'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/lrm_after_i.html'"}, "return_value": "'_Foo_\\n\\n'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/pre.html'"}, "return_value": "'\\n    a\\n    b\\n    c\\n\\nEnsure that HTML that starts with a crowded `<pre>` is converted to reasonable\\nMarkdown.\\n\\n'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/html-escaping.html'"}, "return_value": "'Escaped HTML like <div> or & should NOT remain escaped on output\\n\\n    \\n    \\n    ...even when that escaped HTML is in a <pre> tag\\n\\n`...or a <code> tag`\\n\\n'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/emphasis_preserved_whitespace.html'"}, "return_value": "'_emphasis_\\n\\n_emphasis:_ some text\\n\\n_repeat:_ again\\n\\n**bold**\\n\\n**bold:** some text\\n\\n**repeat:** again\\n\\n~~strike~~\\n\\n~~strike:~~ some text\\n\\n~~strike:~~ again\\n\\nseparate _emphasis_ some more text\\n\\n_emphasis_.\\n\\n_emphasis_?\\n\\n_emphasis_!\\n\\n(_emphasis_)\\n\\n[**bold**}\\n\\n(~~strike~~]\\n\\n* **bold**\\n\\n~ ~~strike~~\\n\\n_em1_ _em2_\\n\\n'"}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/url-escaping.html'"}, "return_value": "\"# Markdown-sensible characters processing\\n\\nThis test checks special characters processing inside URLs: parenthesis and\\nbrackets should be escaped to keep markdown image and anchor syntax safe and\\nsound.\\n\\n  * [Some MSDN link using parenthesis](http://msdn.microsoft.com/en-us/library/system.drawing.drawing2d\\\\(v=vs.110\\\\))\\n  * [Google search result URL with unescaped brackets](https://www.google.ru/search?q=\\\\[brackets are cool\\\\])\\n  * [Yet another test for [brackets], {curly braces} and (parenthesis) processing inside the anchor](https://www.google.ru/search?q='\\\\[\\\\({}\\\\)\\\\]')\\n  * Use automatic links like <http://example.com/> when the URL is the label\\n  * Exempt [non-absolute_URIs](non-absolute_URIs) from automatic link detection\\n\\nAnd here are images with tricky attribute values:\\n\\n![\\\\(banana\\\\)](http://placehold.it/350x150#\\\\(banana\\\\))  \\n![\\\\[banana\\\\]](http://placehold.it/350x150#\\\\[banana\\\\])  \\n![{banana}](http://placehold.it/350x150#{banana})  \\n![\\\\(\\\\[{}\\\\]\\\\)](http://placehold.it/350x150#\\\\(\\\\[{}\\\\]\\\\))\\n![](http://placehold.it/350x150#\\\\(\\\\[{}\\\\]\\\\))\\n\\n\""}, {"func_args": {"fn": "'/usr/app/src/test_repos/html2text/test/lrm_after_b.html'"}, "return_value": "'**b**\\n\\n'"}], "text": "def get_baseline(fn):\n    name = get_baseline_name(fn)\n    with open(name, encoding=\"utf-8\") as f:\n        out = f.read()\n    return cleanup_eol(out)"}, "html2text": {"line": 991, "args": [{"func_args": {"html": "'asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd <img src=\"http://www.foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo.com\"> asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd\\n'", "baseurl": "''", "bodywidth": "None"}, "return_value": "'asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd\\nasd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd\\nasd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd\\nasd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd\\nasd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd\\nasd asd asd asd asd\\n![](http://www.foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo.com)\\nasd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd\\nasd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd\\nasd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd\\nasd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd\\nasd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd\\nasd asd asd asd asd\\n\\n'"}, {"func_args": {"html": "'<blockquote>\\n\"The time has come\", the Walrus said, \"To talk of many things: Of shoes - and ships - and sealing wax - Of cabbages - and kings- And why the sea is boiling hot - And whether pigs have wings.\"\\n</blockquote>\\n'", "baseurl": "''", "bodywidth": "None"}, "return_value": "'> \"The time has come\", the Walrus said, \"To talk of many things: Of shoes -\\n> and ships - and sealing wax - Of cabbages - and kings- And why the sea is\\n> boiling hot - And whether pigs have wings.\"\\n\\n'"}, {"func_args": {"html": "'<a href=\"http://example.com\"><div><img src=\"http://example.com/img.png\"/></div></a>\\n'", "baseurl": "''", "bodywidth": "None"}, "return_value": "'[![](http://example.com/img.png)](http://example.com)\\n\\n'"}, {"func_args": {"html": "'<!DOCTYPE html>\\n<html>\\n<head lang=\"en\">\\n    <meta charset=\"UTF-8\">\\n    <title></title>\\n</head>\\n<body>\\n\\n<h1>This is a test document</h1>\\n\\nWith some text, <code>code</code>, <b>bolds</b> and <i>italics</i>.\\n\\n<h2>This is second header</h2>\\n\\n<p style=\"display: none\">Displaynone text</p>\\n\\n<table>\\n    <tr>\\n        <th>Header 1</th>\\n        <th>Header 2</th>\\n        <th>Header 3</th>\\n    </tr>\\n    <tr>\\n        <td>Content 1</td>\\n        <td>Content 2</td>\\n        <td><img src=\"http://lorempixel.com/200/200\" alt=\"200\"/> Image!</td>\\n    </tr>\\n    <tr>\\n        <td>Content 1</td>\\n        <td>Content 2</td>\\n        <td><img src=\"http://lorempixel.com/200/200\" alt=\"200\"/> Image!</td>\\n    </tr>\\n</table>\\n\\n</body>\\n</html>'", "baseurl": "''", "bodywidth": "None"}, "return_value": "'# This is a test document\\n\\nWith some text, `code`, **bolds** and _italics_.\\n\\n## This is second header\\n\\nDisplaynone text\\n\\nHeader 1 | Header 2 | Header 3  \\n---|---|---  \\nContent 1 | Content 2 | ![200](http://lorempixel.com/200/200) Image!  \\nContent 1 | Content 2 | ![200](http://lorempixel.com/200/200) Image!\\n\\n'"}, {"func_args": {"html": "'a<blockquote>b<br>c</blockquote>\\n'", "baseurl": "''", "bodywidth": "None"}, "return_value": "'a\\n\\n> b  \\n> c\\n\\n'"}, {"func_args": {"html": "'Press <kbd>[CTRL]+c</kbd> to copy.\\n'", "baseurl": "''", "bodywidth": "None"}, "return_value": "'Press `[CTRL]+c` to copy.\\n\\n'"}, {"func_args": {"html": "'<abbr title=\"Three Letter Acronym\">TLA</abbr>\\n<abbr>xyz</abbr>\\n'", "baseurl": "''", "bodywidth": "None"}, "return_value": "'TLA xyz\\n\\n  *[TLA]: Three Letter Acronym\\n\\n'"}, {"func_args": {"html": "'<a href=\"test.html\" title>This is an A tag with an empty title property</a>'", "baseurl": "''", "bodywidth": "None"}, "return_value": "'[This is an A tag with an empty title property](test.html)\\n\\n'"}, {"func_args": {"html": "'<html>\\n  <head>\\n    <title>NBSP handling test #1</title>\\n  </head>\\n  <body>\\n    <h1>NBSP handling test #1</h1>\\n\\n    <p>In this test all NBSPs will be replaced with ordinary spaces (unicode_snob = False).</p>\\n\\n    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do&nbsp;eiusmod\\n    tempor incididunt ut&nbsp;labore et&nbsp;dolore magna aliqua. Ut&nbsp;enim ad&nbsp;minim veniam,\\n    quis nostrud exercitation ullamco laboris nisi ut&nbsp;aliquip ex&nbsp;ea commodo\\n    consequat.</p>\\n\\n    <p>Duis aute irure dolor in&nbsp;reprehenderit in&nbsp;voluptate velit esse\\n    cillum dolore eu&nbsp;fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\\n    proident, sunt in&nbsp;culpa qui officia deserunt mollit anim id&nbsp;est laborum.</p>\\n  </body>\\n</html>\\n\\n'", "baseurl": "''", "bodywidth": "None"}, "return_value": "'# NBSP handling test #1\\n\\nIn this test all NBSPs will be replaced with ordinary spaces (unicode_snob =\\nFalse).\\n\\nLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\\ntempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\\nquis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\\nconsequat.\\n\\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore\\neu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt\\nin culpa qui officia deserunt mollit anim id est laborum.\\n\\n'"}, {"func_args": {"html": "'<a href=\"http://thth\">&#225;ll&#225;s: Country Manager</a>\\n'", "baseurl": "''", "bodywidth": "None"}, "return_value": "'[allas: Country Manager](http://thth)\\n\\n'"}, {"func_args": {"html": "'<del>something</del>\\n<strike>something</strike>\\n<s>something</s>\\n'", "baseurl": "''", "bodywidth": "None"}, "return_value": "'~~something~~ ~~something~~ ~~something~~\\n\\n'"}, {"func_args": {"html": "'<i>Foo&lrm;bar</i>'", "baseurl": "''", "bodywidth": "None"}, "return_value": "'_Foo bar_\\n\\n'"}, {"func_args": {"html": "'<q>If this is a test,</q> he said, <q>then it should pass</q>.\\n'", "baseurl": "''", "bodywidth": "None"}, "return_value": "'\"If this is a test,\" he said, \"then it should pass\".\\n\\n'"}, {"func_args": {"html": "'<p><strong>hello</strong> world &gt;&lt;</p>\\n'", "baseurl": "''", "bodywidth": "None"}, "return_value": "'**hello** world ><\\n\\n'"}, {"func_args": {"html": "'<html>\\n  <head>\\n    <title>NBSP handling test #1</title>\\n    <style type=\"text/css\">\\n    @import url(https://themes.googleusercontent.com/fonts/css?kit=lhDjYqiy3mZ0x6ROQEUoUw&#39)\\n    </style>\\n  </head>\\n  <body>\\n    <h1>CSS @import statement without semicolon handling test</h1>\\n    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>\\n  </body>\\n</html>\\n\\n'", "baseurl": "''", "bodywidth": "None"}, "return_value": "'# CSS @import statement without semicolon handling test\\n\\nLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\\ntempor incididunt ut labore et dolore magna aliqua.\\n\\n'"}, {"func_args": {"html": "'<h1>Processing hyperlinks</h1>\\n\\n<p>Additional hyperlink tests!</p>\\n\\n<a href=\"http://some.link\"><b>Bold Link</b></a>\\n<a href=\"http://some.link/filename.py\"><code>filename.py</code></a>\\n<a href=\"http://some.link/magicsources.py\">The source code is called <code>magic.py</code></a>\\n'", "baseurl": "''", "bodywidth": "None"}, "return_value": "'# Processing hyperlinks\\n\\nAdditional hyperlink tests!\\n\\n[**Bold Link**](http://some.link)\\n[`filename.py`](http://some.link/filename.py) [The source code is called\\n`magic.py`](http://some.link/magicsources.py)\\n\\n'"}, {"func_args": {"html": "'<ol>\\n  <li>ordered</li>\\n  <li>...</li>\\n  <ul>\\n    <li>unordered</li>\\n    <li>...</li>\\n  </ul>\\n  <li>end</li>\\n</ol>\\n\\n<ul>\\n  <li>unordered</li>\\n  <li>...</li>\\n  <ol>\\n    <li>ordered</li>\\n    <li>...</li>\\n  </ol>\\n  <li>end</li>\\n</ul>\\n\\n'", "baseurl": "''", "bodywidth": "None"}, "return_value": "'  1. ordered\\n  2. ...\\n     * unordered\\n     * ...\\n  3. end\\n\\n  * unordered\\n  * ...\\n    1. ordered\\n    2. ...\\n  * end\\n\\n'"}, {"func_args": {"html": "'<p> <em><strong>ib</strong></em></p>\\n\\n<p>.<em><strong>ib</strong></em></p>\\n\\n<p> <strong><em>bi</em></strong></p>\\n\\n<p>.<strong><em>bi</em></strong></p>\\n\\n<p> <em><strike>is</strike></em></p>\\n\\n<p>.<em><strike>is</strike></em></p>\\n\\n<p> <em><strike>si</strike></em></p>\\n\\n<p>.<em><strike>si</strike></em></p>\\n\\n<p> <strong><strike>bs</strike></strong></p>\\n\\n<p>.<strong><strike>bs</strike></strong></p>\\n\\n<p> <strike><strong>sb</strong></strike></p>\\n\\n<p>.<strike><strong>sb</strong></strike></p>\\n\\n<p> <strike><strong><em>sbi</em></strong></strike></p>\\n\\n<p>.<strike><strong><em>sbi</em></strong></strike></p>\\n\\n<p> <strong><em><strike>bis</strike></em></strong></p>\\n\\n<p>.<strong><em><strike>bis</strike></em></strong></p>\\n'", "baseurl": "''", "bodywidth": "None"}, "return_value": "'_**ib**_\\n\\n._**ib**_\\n\\n**_bi_**\\n\\n.**_bi_**\\n\\n_~~is~~_\\n\\n._~~is~~_\\n\\n_~~si~~_\\n\\n._~~si~~_\\n\\n**~~bs~~**\\n\\n.**~~bs~~**\\n\\n~~**sb**~~\\n\\n.~~**sb**~~\\n\\n~~**_sbi_**~~\\n\\n.~~**_sbi_**~~\\n\\n**_~~bis~~_**\\n\\n.**_~~bis~~_**\\n\\n'"}, {"func_args": {"html": "'<html>\\n    <body>\\n    <hr>\\n    </body>\\n</html>\\n'", "baseurl": "''", "bodywidth": "None"}, "return_value": "'* * *\\n\\n'"}, {"func_args": {"html": "'<dl>\\n<dt>Definition List</dt>\\n<dd>A list of terms and their definitions/descriptions.</dd>\\n<dt>Ordered List</dt>\\n<dd>A numbered list.</dd>\\n<dt>Unordered List</dt>\\n<dd>An unnumbered list.</dd>\\n</dl>\\n\\n<h4>Example 2</h4>\\n<dl>\\n<dt>Vocals</dt>\\n<dd>Bruce Dickinson</dd>\\n<dt>Guitar</dt>\\n<dd>Adrian Smith</dd>\\n<dd>Dave Murray</dd>\\n<dd>Janick Gers</dd>\\n<dt>Bass</dt>\\n<dd>Steve Harris</dd>\\n<dt>Drums</dt>\\n<dd>Nicko McBrain</dd>\\n</dl>\\n\\n<ul>\\n<li>some item</li>\\n<li>Some other item</li>\\n<li>some item</li>\\n</ul>\\n\\n<ol>\\n<li>Some other item</li>\\n<li>some item</li>\\n<li>some item</li>\\n</ol>\\n\\n<ul style=\"list-style-type:ordered;\">\\n<li>something else here</li>\\n<li>some item</li>\\n</ul>\\n'", "baseurl": "''", "bodywidth": "None"}, "return_value": "'Definition List\\n\\n    A list of terms and their definitions/descriptions.\\nOrdered List\\n\\n    A numbered list.\\nUnordered List\\n\\n    An unnumbered list.\\n\\n#### Example 2\\n\\nVocals\\n\\n    Bruce Dickinson\\nGuitar\\n\\n    Adrian Smith\\n    Dave Murray\\n    Janick Gers\\nBass\\n\\n    Steve Harris\\nDrums\\n\\n    Nicko McBrain\\n\\n  * some item\\n  * Some other item\\n  * some item\\n\\n  1. Some other item\\n  2. some item\\n  3. some item\\n\\n  * something else here\\n  * some item\\n\\n'"}, {"func_args": {"html": "'<a href=\"http://example.com\" title=\"MyTitle\"> first example</a>\\n<br>\\n<a href=\"http://example.com\" ><p> second example</p></a>\\n'", "baseurl": "''", "bodywidth": "None"}, "return_value": "'[ first example](http://example.com \"MyTitle\")  \\n[ second example](http://example.com)\\n\\n'"}, {"func_args": {"html": "'<h1>Processing images with links</h1>\\n\\n<p>This test checks images with associated links.</p>\\n\\n<a href=\"http://some.link\"><img src=\"http://placehold.it/350x150#(banana)\" width=\"350\" height=\"150\" alt=\"(banana)\"></a>\\n<a href=\"http://some.link\"><img src=\"http://placehold.it/350x150#[banana]\" width=\"350\" height=\"150\" alt=\"[banana]\"></a>\\n<a href=\"http://some.link\"><img src=\"http://placehold.it/350x150#{banana}\" width=\"350\" height=\"150\" alt=\"{banana}\"></a>\\n<a href=\"http://some.link\"><img src=\"http://placehold.it/350x150#([{}])\" width=\"350\" height=\"150\" alt=\"([{}])\"></a>\\n<a href=\"http://some.link\"><img src=\"http://placehold.it/350x150#([{}])\" width=\"350\" height=\"150\" alt></a>'", "baseurl": "''", "bodywidth": "None"}, "return_value": "'# Processing images with links\\n\\nThis test checks images with associated links.\\n\\n[![\\\\(banana\\\\)](http://placehold.it/350x150#\\\\(banana\\\\))](http://some.link)\\n[![\\\\[banana\\\\]](http://placehold.it/350x150#\\\\[banana\\\\])](http://some.link)\\n[![{banana}](http://placehold.it/350x150#{banana})](http://some.link)\\n[![\\\\(\\\\[{}\\\\]\\\\)](http://placehold.it/350x150#\\\\(\\\\[{}\\\\]\\\\))](http://some.link)\\n[![](http://placehold.it/350x150#\\\\(\\\\[{}\\\\]\\\\))](http://some.link)\\n\\n'"}, {"func_args": {"html": "'<html>\\n   <body>\\n      <ol start=\"invalid\">\\n         <li>The ol has an invalid start </li>\\n         <li>This should just be ignored </li>\\n      </ol>\\n   </body>\\n</html>'", "baseurl": "''", "bodywidth": "None"}, "return_value": "'  1. The ol has an invalid start \\n  2. This should just be ignored \\n\\n'"}, {"func_args": {"html": "'<strong>Foo&rlm;bar</strong>'", "baseurl": "''", "bodywidth": "None"}, "return_value": "'**Foo bar**\\n\\n'"}, {"func_args": {"html": "'<html>\\n<body>\\n<ul>\\n<li>Run this command:\\n<pre>ls -l *.html</pre></li>\\n<li>?</li>\\n<li>Profit!</li>\\n</ul>\\n</body>\\n</html>\\n'", "baseurl": "''", "bodywidth": "None"}, "return_value": "'  * Run this command: \\n    \\n        ls -l *.html\\n\\n  * ?\\n  * Profit!\\n\\n'"}, {"func_args": {"html": "'<h1>Processing empty hyperlinks</h1>\\n\\n<p>This test checks whether empty hyperlinks still appear in the markdown result.</p>\\n\\n<a href=\"http://some.link\"></a>\\n<a href=\"http://some.link\"><p></p></a>'", "baseurl": "''", "bodywidth": "None"}, "return_value": "'# Processing empty hyperlinks\\n\\nThis test checks whether empty hyperlinks still appear in the markdown result.\\n\\n[](http://some.link) [](http://some.link)\\n\\n'"}, {"func_args": {"html": "'<html>\\n  <head>\\n    <title>Normal</title>\\n    <style type=\"text/css\">#example { color: red; }</style>\\n  </head>\\n  <body>\\n    <h1>\\n      <span style=\"color: red;\">test doc</span>\\n    </h1>\\n    <p>\\n      <span>first issue</span>\\n    </p>\\n    <p>\\n      <span>\\n      </span>\\n    </p>\\n    <ul>\\n      <li>\\n        <span>bit</span>\\n      </li>\\n      <li>\\n        <span><i><b>bold italic</b></i></span>\\n      </li>\\n      <ul>\\n        <li>\\n          <span>orange</span>\\n        </li>\\n        <li>\\n          <span>apple</span>\\n        </li>\\n      </ul>\\n      <li>\\n        <span>final</span>\\n      </li>\\n    </ul>\\n    <p>\\n      <span>\\n      </span>\\n    </p>\\n    <p>\\n      <span>text to separate lists</span>\\n    </p>\\n    <p>\\n      <span>\\n      </span>\\n    </p>\\n    <ol start=\"1\">\\n      <li>\\n        <span>now with numbers</span>\\n      </li>\\n      <li>\\n        <span>the prisoner</span>\\n      </li>\\n      <ol start=\"1\">\\n        <li>\\n          <span>not an <i>italic number</i></span>\\n        </li>\\n        <li>\\n          <span>a <b>bold human</b> being</span>\\n        </li>\\n      </ol>\\n      <li>\\n        <span>end</span>\\n      </li>\\n    </ol>\\n    <p>\\n      <span>\\n      </span>\\n    </p>\\n    <p>\\n      <span>\\n        <b>bold</b><br/>\\n        <i>italic</i><br/>\\n      </span>\\n    </p>\\n    <p>\\n      <pre>\\ndef func(x):\\n  if x &lt; 1:\\n    return \\'a\\'\\n  return \\'b\\'\\n      </pre>\\n    </p>\\n    <p>\\n      Some <code>fixed width text</code> here<br/>\\n      <i><code>italic fixed width text</code></i>\\n    </p>\\n\\n<script type=\"text/javascript\">\\n//<![CDATA[\\n(function(id) {\\n document.write(\\'<script type=\"text/javascript\" src=\"\\' +\\n   \\'http://connect.decknetwork.net/deck\\' + id + \\'_js.php?\\' +\\n   (new Date().getTime()) + \\'\"></\\' + \\'script>\\');\\n})(\"test\");\\n//]]>\\n</script>\\n\\n    <p>\\n        2012. Now that was a good year. So was 2011. That\\'s all.\\n    </p>\\n\\n    <p>\\n        3.14159 is an approximation of pi.\\n    </p>\\n\\n    <p>\\n        + not + a list item\\n    </p>\\n\\n    <p>\\n        +foo\\n    </p>\\n\\n    <p>\\n        - foo - bar\\n    </p>\\n\\n    <p>\\n        -foo\\n    </p>\\n\\n    <p>\\n        not a header<br>\\n        --\\n    </p>\\n\\n    <p>\\n        not a hr<br>\\n        <br>\\n        ---\\n        <br>\\n        - - -\\n    </p>\\n\\n    <p>\\n        c:\\\\tmp, \\\\\\\\server\\\\path, \\\\_/, foo\\\\bar, #\\\\#, \\\\\\\\#\\n    </p>\\n  </body>\\n</html>\\n'", "baseurl": "''", "bodywidth": "None"}, "return_value": "\"#  test doc\\n\\nfirst issue\\n\\n  * bit\\n  * _**bold italic**_\\n    * orange\\n    * apple\\n  * final\\n\\ntext to separate lists\\n\\n  1. now with numbers\\n  2. the prisoner\\n    1. not an _italic number_\\n    2. a **bold human** being\\n  3. end\\n\\n**bold**  \\n_italic_  \\n\\n    \\n    \\n    def func(x):\\n      if x < 1:\\n        return 'a'\\n      return 'b'\\n          \\n\\nSome `fixed width text` here  \\n_`italic fixed width text`_\\n\\n2012\\\\. Now that was a good year. So was 2011. That's all.\\n\\n3.14159 is an approximation of pi.\\n\\n\\\\+ not + a list item\\n\\n+foo\\n\\n\\\\- foo - bar\\n\\n-foo \\n\\nnot a header  \\n\\\\--\\n\\nnot a hr  \\n  \\n\\\\---  \\n\\\\- - -\\n\\nc:\\\\tmp, \\\\\\\\\\\\server\\\\path, \\\\\\\\_/, foo\\\\bar, #\\\\\\\\#, \\\\\\\\\\\\\\\\#\\n\\n\""}, {"func_args": {"html": "'<a href=\"link.htm\"><b>Text</b></a>\\n<a href=\\'/nothing/\\'><b>sample</b></a>\\n'", "baseurl": "''", "bodywidth": "None"}, "return_value": "'[**Text**](link.htm) [**sample**](/nothing/)\\n\\n'"}, {"func_args": {"html": "'<p>Bacon ipsum dolor sit amet pork chop id pork belly ham hock, sed meatloaf eu exercitation flank quis veniam officia. Chuck dolor esse, occaecat est elit drumstick ground round tri-tip nisi. Eu fugiat drumstick leberkas magna. Turducken frankfurter nisi aute shank&mdash;</p>\\n<p>&mdash;irure ex esse id, ham commodo meatloaf pig pariatur ut cow. Officia salami in fatback voluptate boudin ullamco beef ribs shank. Duis spare ribs pork chop, ad leberkas reprehenderit id voluptate salami ham ut in ut cillum turducken. Nisi ribeye tail capicola dolore andouille. Short ribs id beef ribs, et nulla ground round do sunt dolore. Dolore nisi ullamco veniam sunt. Duis brisket drumstick, dolor fatback filet mignon meatloaf laboris tri-tip speck chuck ball tip voluptate ullamco laborum.\\n</p>\\n<p>--</p>\\n'", "baseurl": "''", "bodywidth": "None"}, "return_value": "'Bacon ipsum dolor sit amet pork chop id pork belly ham hock, sed meatloaf eu\\nexercitation flank quis veniam officia. Chuck dolor esse, occaecat est elit\\ndrumstick ground round tri-tip nisi. Eu fugiat drumstick leberkas magna.\\nTurducken frankfurter nisi aute shank--\\n\\n--irure ex esse id, ham commodo meatloaf pig pariatur ut cow. Officia salami\\nin fatback voluptate boudin ullamco beef ribs shank. Duis spare ribs pork\\nchop, ad leberkas reprehenderit id voluptate salami ham ut in ut cillum\\nturducken. Nisi ribeye tail capicola dolore andouille. Short ribs id beef\\nribs, et nulla ground round do sunt dolore. Dolore nisi ullamco veniam sunt.\\nDuis brisket drumstick, dolor fatback filet mignon meatloaf laboris tri-tip\\nspeck chuck ball tip voluptate ullamco laborum.\\n\\n\\\\--\\n\\n'"}, {"func_args": {"html": "'<html>\\n    <body>\\n        &apos;\\n    </body>\\n</html>\\n'", "baseurl": "''", "bodywidth": "None"}, "return_value": "\"'\\n\\n\""}, {"func_args": {"html": "'<html>\\n    <body>\\n    <h1>H1</h1>\\n    <h2>H2</h2>\\n    <h3>H3</h3>\\n    <h4>H4</h4>\\n    <h5>H5</h5>\\n    <h6>H6</h6>\\n    <h7>H7</h7>\\n    <h8>H8</h8>\\n    <h9>H9</h9>\\n    <h10>H10</h10>\\n    <h11>H11</h11>\\n    <h12>H12</h12>\\n    <h>NO number</h>\\n    </body>\\n</html>\\n'", "baseurl": "''", "bodywidth": "None"}, "return_value": "'# H1\\n\\n## H2\\n\\n### H3\\n\\n#### H4\\n\\n##### H5\\n\\n###### H6\\n\\n####### H7\\n\\n######## H8\\n\\n######### H9\\n\\nH10 H11 H12 NO number\\n\\n'"}, {"func_args": {"html": "'<!DOCTYPE html>\\n<head></head>\\n<body>\\n<p>\\n<img src=\"/uploads/2012/01/read2textheader.jpg\" alt=\"read2text header image\" width=\"650\" height=\"165\"/>\\n</p>\\n<p>\\n<a href=\"/\">BrettTerpstra.com</a>\\n</p>\\n</body>\\n</html>\\n'", "baseurl": "'http://brettterpstra.com'", "bodywidth": "0"}, "return_value": "'![read2text header image](http://brettterpstra.com/uploads/2012/01/read2textheader.jpg)\\n\\n[BrettTerpstra.com](http://brettterpstra.com/)\\n'"}, {"func_args": {"html": "'<p>\\n<b>text</b> and a very long long long long long long long long long long long long long long long long long long long long line\\n</p>\\n'", "baseurl": "''", "bodywidth": "None"}, "return_value": "'**text** and a very long long long long long long long long long long long\\nlong long long long long long long long long line\\n\\n'"}, {"func_args": {"html": "'<p>Another theory is that magician and occultist <a\\n        href=\"http://en.wikipedia.org/wiki/Aleister_Crowley\"\\n        target=\"_blank\">Aliester Crowley</a> created the beast while\\n    attempting to summon evil spirits at his house on the edge of the\\n    lake in the early 1900&#8242;s. <strong>I met a local woman who\\n        prefers this explanation.</strong></p>\\n'", "baseurl": "''", "bodywidth": "0"}, "return_value": "'Another theory is that magician and occultist [Aliester Crowley](http://en.wikipedia.org/wiki/Aleister_Crowley) created the beast while attempting to summon evil spirits at his house on the edge of the lake in the early 1900\u2032s. **I met a local woman who prefers this explanation.**\\n'"}, {"func_args": {"html": "'<ul><li>item</li></ul>\\ntext\\n'", "baseurl": "''", "bodywidth": "None"}, "return_value": "'  * item\\n\\ntext\\n\\n'"}, {"func_args": {"html": "'<i>Foo</i>&lrm;'", "baseurl": "''", "bodywidth": "None"}, "return_value": "'_Foo_\\n\\n'"}, {"func_args": {"html": "'<html>\\n  <head>\\n    <title>initial crowded pre handling test #1</title>\\n  </head>\\n  <body>\\n<pre>a\\nb\\nc</pre>\\n\\n    <p>Ensure that HTML that starts with a crowded <code>&lt;pre&gt;</code>\\n    is converted to reasonable Markdown.</p>\\n  </body>\\n</html>\\n'", "baseurl": "''", "bodywidth": "None"}, "return_value": "'\\n    a\\n    b\\n    c\\n\\nEnsure that HTML that starts with a crowded `<pre>` is converted to reasonable\\nMarkdown.\\n\\n'"}, {"func_args": {"html": "'<p>Escaped HTML like &lt;div&gt; or &amp; should NOT remain escaped on output</p>\\n<pre>...even when that escaped HTML is in a &lt;pre&gt; tag</pre>\\n<code>...or a &lt;code&gt; tag</code>'", "baseurl": "''", "bodywidth": "None"}, "return_value": "'Escaped HTML like <div> or & should NOT remain escaped on output\\n\\n    \\n    \\n    ...even when that escaped HTML is in a <pre> tag\\n\\n`...or a <code> tag`\\n\\n'"}, {"func_args": {"html": "'<p><em> emphasis </em></p>\\n<p><em>emphasis: </em>some text</p>\\n<p><em>repeat: </em>again</p>\\n\\n<p><b> bold </b></p>\\n<p><b>bold: </b>some text</p>\\n<p><b>repeat: </b>again</p>\\n\\n<p><strike> strike </strike></p>\\n<p><strike>strike: </strike>some text</p>\\n<p><strike>strike: </strike>again</p>\\n\\n<p>separate<em> emphasis</em> some more text</p>\\n\\n<!-- Various punctuation has no space  -->\\n<p><em>emphasis</em>.</p>\\n<p><em>emphasis</em>?</p>\\n<p><em>emphasis</em>!</p>\\n<p>(<em>emphasis</em>)</p>\\n<p>[<b>bold</b>}</p>\\n<p>(<strike>strike</strike>]</p>\\n\\n<!-- Strong and strike characters have space  -->\\n<p>*<b>bold</b></p>\\n<p>~<strike>strike</strike></p>\\n\\n<p><em>em1</em><em>em2</em></p>\\n'", "baseurl": "''", "bodywidth": "None"}, "return_value": "'_emphasis_\\n\\n_emphasis:_ some text\\n\\n_repeat:_ again\\n\\n**bold**\\n\\n**bold:** some text\\n\\n**repeat:** again\\n\\n~~strike~~\\n\\n~~strike:~~ some text\\n\\n~~strike:~~ again\\n\\nseparate _emphasis_ some more text\\n\\n_emphasis_.\\n\\n_emphasis_?\\n\\n_emphasis_!\\n\\n(_emphasis_)\\n\\n[**bold**}\\n\\n(~~strike~~]\\n\\n* **bold**\\n\\n~ ~~strike~~\\n\\n_em1_ _em2_\\n\\n'"}, {"func_args": {"html": "'<h1>Markdown-sensible characters processing</h1>\\n\\n<p>This test checks special characters processing inside URLs: parenthesis and brackets should be escaped to keep markdown image and anchor syntax safe and sound.</p>\\n\\n<ul>\\n\\t<li><a href=\"http://msdn.microsoft.com/en-us/library/system.drawing.drawing2d(v=vs.110)\">Some MSDN link using parenthesis</a></li>\\n\\t<li><a href=\"https://www.google.ru/search?q=[brackets are cool]\">Google search result URL with unescaped brackets</a></li>\\n\\t<li><a href=\"https://www.google.ru/search?q=\\'[({})]\\'\">Yet another test for [brackets], {curly braces} and (parenthesis) processing inside the anchor</a></li>\\n    <li>Use automatic links like <a href=\"http://example.com/\">http://example.com/</a> when the URL is the label</a></li>\\n    <li>Exempt <a href=\"non-absolute_URIs\">non-absolute_URIs</a> from automatic link detection</a></li>\\n</ul>\\n\\n<p>And here are images with tricky attribute values:</p>\\n\\n<img src=\"http://placehold.it/350x150#(banana)\" width=\"350\" height=\"150\" alt=\"(banana)\"><br>\\n<img src=\"http://placehold.it/350x150#[banana]\" width=\"350\" height=\"150\" alt=\"[banana]\"><br>\\n<img src=\"http://placehold.it/350x150#{banana}\" width=\"350\" height=\"150\" alt=\"{banana}\"><br>\\n<img src=\"http://placehold.it/350x150#([{}])\" width=\"350\" height=\"150\" alt=\"([{}])\">\\n<img src=\"http://placehold.it/350x150#([{}])\" width=\"350\" height=\"150\" alt>\\n'", "baseurl": "''", "bodywidth": "None"}, "return_value": "\"# Markdown-sensible characters processing\\n\\nThis test checks special characters processing inside URLs: parenthesis and\\nbrackets should be escaped to keep markdown image and anchor syntax safe and\\nsound.\\n\\n  * [Some MSDN link using parenthesis](http://msdn.microsoft.com/en-us/library/system.drawing.drawing2d\\\\(v=vs.110\\\\))\\n  * [Google search result URL with unescaped brackets](https://www.google.ru/search?q=\\\\[brackets are cool\\\\])\\n  * [Yet another test for [brackets], {curly braces} and (parenthesis) processing inside the anchor](https://www.google.ru/search?q='\\\\[\\\\({}\\\\)\\\\]')\\n  * Use automatic links like <http://example.com/> when the URL is the label\\n  * Exempt [non-absolute_URIs](non-absolute_URIs) from automatic link detection\\n\\nAnd here are images with tricky attribute values:\\n\\n![\\\\(banana\\\\)](http://placehold.it/350x150#\\\\(banana\\\\))  \\n![\\\\[banana\\\\]](http://placehold.it/350x150#\\\\[banana\\\\])  \\n![{banana}](http://placehold.it/350x150#{banana})  \\n![\\\\(\\\\[{}\\\\]\\\\)](http://placehold.it/350x150#\\\\(\\\\[{}\\\\]\\\\))\\n![](http://placehold.it/350x150#\\\\(\\\\[{}\\\\]\\\\))\\n\\n\""}, {"func_args": {"html": "'<b>b</b>&#8206;\\n'", "baseurl": "''", "bodywidth": "None"}, "return_value": "'**b**\\n\\n'"}], "text": "def html2text(html: str, baseurl: str = \"\", bodywidth: Optional[int] = None) -> str:\n    if bodywidth is None:\n        bodywidth = config.BODY_WIDTH\n    h = HTML2Text(baseurl=baseurl, bodywidth=bodywidth)\n\n    return h.handle(html)"}, "escape_md_section": {"line": 206, "args": [{"func_args": {"text": "'asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd '", "snob": "False"}, "return_value": "'asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd '"}, {"func_args": {"text": "' asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd\\n'", "snob": "False"}, "return_value": "' asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd\\n'"}, {"func_args": {"text": "'\\n\"The time has come\", the Walrus said, \"To talk of many things: Of shoes - and ships - and sealing wax - Of cabbages - and kings- And why the sea is boiling hot - And whether pigs have wings.\"\\n'", "snob": "False"}, "return_value": "'\\n\"The time has come\", the Walrus said, \"To talk of many things: Of shoes - and ships - and sealing wax - Of cabbages - and kings- And why the sea is boiling hot - And whether pigs have wings.\"\\n'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n\\n'", "snob": "False"}, "return_value": "'\\n\\n'"}, {"func_args": {"text": "'This is a test document'", "snob": "False"}, "return_value": "'This is a test document'"}, {"func_args": {"text": "'\\n\\nWith some text, '", "snob": "False"}, "return_value": "'\\n\\nWith some text, '"}, {"func_args": {"text": "', '", "snob": "False"}, "return_value": "', '"}, {"func_args": {"text": "'bolds'", "snob": "False"}, "return_value": "'bolds'"}, {"func_args": {"text": "' and '", "snob": "False"}, "return_value": "' and '"}, {"func_args": {"text": "'italics'", "snob": "False"}, "return_value": "'italics'"}, {"func_args": {"text": "'.\\n\\n'", "snob": "False"}, "return_value": "'.\\n\\n'"}, {"func_args": {"text": "'This is second header'", "snob": "False"}, "return_value": "'This is second header'"}, {"func_args": {"text": "'\\n\\n'", "snob": "False"}, "return_value": "'\\n\\n'"}, {"func_args": {"text": "'Displaynone text'", "snob": "False"}, "return_value": "'Displaynone text'"}, {"func_args": {"text": "'\\n\\n'", "snob": "False"}, "return_value": "'\\n\\n'"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'\\n        '", "snob": "False"}, "return_value": "'\\n        '"}, {"func_args": {"text": "'Header 1'", "snob": "False"}, "return_value": "'Header 1'"}, {"func_args": {"text": "'\\n        '", "snob": "False"}, "return_value": "'\\n        '"}, {"func_args": {"text": "'Header 2'", "snob": "False"}, "return_value": "'Header 2'"}, {"func_args": {"text": "'\\n        '", "snob": "False"}, "return_value": "'\\n        '"}, {"func_args": {"text": "'Header 3'", "snob": "False"}, "return_value": "'Header 3'"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'\\n        '", "snob": "False"}, "return_value": "'\\n        '"}, {"func_args": {"text": "'Content 1'", "snob": "False"}, "return_value": "'Content 1'"}, {"func_args": {"text": "'\\n        '", "snob": "False"}, "return_value": "'\\n        '"}, {"func_args": {"text": "'Content 2'", "snob": "False"}, "return_value": "'Content 2'"}, {"func_args": {"text": "'\\n        '", "snob": "False"}, "return_value": "'\\n        '"}, {"func_args": {"text": "' Image!'", "snob": "False"}, "return_value": "' Image!'"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'\\n        '", "snob": "False"}, "return_value": "'\\n        '"}, {"func_args": {"text": "'Content 1'", "snob": "False"}, "return_value": "'Content 1'"}, {"func_args": {"text": "'\\n        '", "snob": "False"}, "return_value": "'\\n        '"}, {"func_args": {"text": "'Content 2'", "snob": "False"}, "return_value": "'Content 2'"}, {"func_args": {"text": "'\\n        '", "snob": "False"}, "return_value": "'\\n        '"}, {"func_args": {"text": "' Image!'", "snob": "False"}, "return_value": "' Image!'"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n\\n'", "snob": "False"}, "return_value": "'\\n\\n'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'a'", "snob": "False"}, "return_value": "'a'"}, {"func_args": {"text": "'b'", "snob": "False"}, "return_value": "'b'"}, {"func_args": {"text": "'c'", "snob": "False"}, "return_value": "'c'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'Press '", "snob": "False"}, "return_value": "'Press '"}, {"func_args": {"text": "' to copy.\\n'", "snob": "False"}, "return_value": "' to copy.\\n'"}, {"func_args": {"text": "'TLA'", "snob": "False"}, "return_value": "'TLA'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'xyz'", "snob": "False"}, "return_value": "'xyz'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'This is an A tag with an empty title property'", "snob": "False"}, "return_value": "'This is an A tag with an empty title property'"}, {"func_args": {"text": "'\\n  '", "snob": "False"}, "return_value": "'\\n  '"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'NBSP handling test #1'", "snob": "False"}, "return_value": "'NBSP handling test #1'"}, {"func_args": {"text": "'\\n  '", "snob": "False"}, "return_value": "'\\n  '"}, {"func_args": {"text": "'\\n  '", "snob": "False"}, "return_value": "'\\n  '"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'NBSP handling test #1'", "snob": "False"}, "return_value": "'NBSP handling test #1'"}, {"func_args": {"text": "'\\n\\n    '", "snob": "False"}, "return_value": "'\\n\\n    '"}, {"func_args": {"text": "'In this test all NBSPs will be replaced with ordinary spaces (unicode_snob = False).'", "snob": "False"}, "return_value": "'In this test all NBSPs will be replaced with ordinary spaces (unicode_snob = False).'"}, {"func_args": {"text": "'\\n\\n    '", "snob": "False"}, "return_value": "'\\n\\n    '"}, {"func_args": {"text": "'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do'", "snob": "False"}, "return_value": "'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do'"}, {"func_args": {"text": "'eiusmod\\n    tempor incididunt ut'", "snob": "False"}, "return_value": "'eiusmod\\n    tempor incididunt ut'"}, {"func_args": {"text": "'labore et'", "snob": "False"}, "return_value": "'labore et'"}, {"func_args": {"text": "'dolore magna aliqua. Ut'", "snob": "False"}, "return_value": "'dolore magna aliqua. Ut'"}, {"func_args": {"text": "'enim ad'", "snob": "False"}, "return_value": "'enim ad'"}, {"func_args": {"text": "'minim veniam,\\n    quis nostrud exercitation ullamco laboris nisi ut'", "snob": "False"}, "return_value": "'minim veniam,\\n    quis nostrud exercitation ullamco laboris nisi ut'"}, {"func_args": {"text": "'aliquip ex'", "snob": "False"}, "return_value": "'aliquip ex'"}, {"func_args": {"text": "'ea commodo\\n    consequat.'", "snob": "False"}, "return_value": "'ea commodo\\n    consequat.'"}, {"func_args": {"text": "'\\n\\n    '", "snob": "False"}, "return_value": "'\\n\\n    '"}, {"func_args": {"text": "'Duis aute irure dolor in'", "snob": "False"}, "return_value": "'Duis aute irure dolor in'"}, {"func_args": {"text": "'reprehenderit in'", "snob": "False"}, "return_value": "'reprehenderit in'"}, {"func_args": {"text": "'voluptate velit esse\\n    cillum dolore eu'", "snob": "False"}, "return_value": "'voluptate velit esse\\n    cillum dolore eu'"}, {"func_args": {"text": "'fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\\n    proident, sunt in'", "snob": "False"}, "return_value": "'fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\\n    proident, sunt in'"}, {"func_args": {"text": "'culpa qui officia deserunt mollit anim id'", "snob": "False"}, "return_value": "'culpa qui officia deserunt mollit anim id'"}, {"func_args": {"text": "'est laborum.'", "snob": "False"}, "return_value": "'est laborum.'"}, {"func_args": {"text": "'\\n  '", "snob": "False"}, "return_value": "'\\n  '"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n\\n'", "snob": "False"}, "return_value": "'\\n\\n'"}, {"func_args": {"text": "'ll'", "snob": "False"}, "return_value": "'ll'"}, {"func_args": {"text": "'s: Country Manager'", "snob": "False"}, "return_value": "'s: Country Manager'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'something'", "snob": "False"}, "return_value": "'something'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'something'", "snob": "False"}, "return_value": "'something'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'something'", "snob": "False"}, "return_value": "'something'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'Foo'", "snob": "False"}, "return_value": "'Foo'"}, {"func_args": {"text": "' bar'", "snob": "False"}, "return_value": "' bar'"}, {"func_args": {"text": "'If this is a test,'", "snob": "False"}, "return_value": "'If this is a test,'"}, {"func_args": {"text": "' he said, '", "snob": "False"}, "return_value": "' he said, '"}, {"func_args": {"text": "'then it should pass'", "snob": "False"}, "return_value": "'then it should pass'"}, {"func_args": {"text": "'.\\n'", "snob": "False"}, "return_value": "'.\\n'"}, {"func_args": {"text": "'hello'", "snob": "False"}, "return_value": "'hello'"}, {"func_args": {"text": "' world '", "snob": "False"}, "return_value": "' world '"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n  '", "snob": "False"}, "return_value": "'\\n  '"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'NBSP handling test #1'", "snob": "False"}, "return_value": "'NBSP handling test #1'"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'\\n    @import url(https://themes.googleusercontent.com/fonts/css?kit=lhDjYqiy3mZ0x6ROQEUoUw&#39)\\n    '", "snob": "False"}, "return_value": "'\\n    @import url(https://themes.googleusercontent.com/fonts/css?kit=lhDjYqiy3mZ0x6ROQEUoUw&#39)\\n    '"}, {"func_args": {"text": "'\\n  '", "snob": "False"}, "return_value": "'\\n  '"}, {"func_args": {"text": "'\\n  '", "snob": "False"}, "return_value": "'\\n  '"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'CSS @import statement without semicolon handling test'", "snob": "False"}, "return_value": "'CSS @import statement without semicolon handling test'"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.'", "snob": "False"}, "return_value": "'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.'"}, {"func_args": {"text": "'\\n  '", "snob": "False"}, "return_value": "'\\n  '"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n\\n'", "snob": "False"}, "return_value": "'\\n\\n'"}, {"func_args": {"text": "'Processing hyperlinks'", "snob": "False"}, "return_value": "'Processing hyperlinks'"}, {"func_args": {"text": "'\\n\\n'", "snob": "False"}, "return_value": "'\\n\\n'"}, {"func_args": {"text": "'Additional hyperlink tests!'", "snob": "False"}, "return_value": "'Additional hyperlink tests!'"}, {"func_args": {"text": "'\\n\\n'", "snob": "False"}, "return_value": "'\\n\\n'"}, {"func_args": {"text": "'Bold Link'", "snob": "False"}, "return_value": "'Bold Link'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'The source code is called '", "snob": "False"}, "return_value": "'The source code is called '"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n  '", "snob": "False"}, "return_value": "'\\n  '"}, {"func_args": {"text": "'ordered'", "snob": "False"}, "return_value": "'ordered'"}, {"func_args": {"text": "'\\n  '", "snob": "False"}, "return_value": "'\\n  '"}, {"func_args": {"text": "'...'", "snob": "False"}, "return_value": "'...'"}, {"func_args": {"text": "'\\n  '", "snob": "False"}, "return_value": "'\\n  '"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'unordered'", "snob": "False"}, "return_value": "'unordered'"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'...'", "snob": "False"}, "return_value": "'...'"}, {"func_args": {"text": "'\\n  '", "snob": "False"}, "return_value": "'\\n  '"}, {"func_args": {"text": "'\\n  '", "snob": "False"}, "return_value": "'\\n  '"}, {"func_args": {"text": "'end'", "snob": "False"}, "return_value": "'end'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n\\n'", "snob": "False"}, "return_value": "'\\n\\n'"}, {"func_args": {"text": "'\\n  '", "snob": "False"}, "return_value": "'\\n  '"}, {"func_args": {"text": "'unordered'", "snob": "False"}, "return_value": "'unordered'"}, {"func_args": {"text": "'\\n  '", "snob": "False"}, "return_value": "'\\n  '"}, {"func_args": {"text": "'...'", "snob": "False"}, "return_value": "'...'"}, {"func_args": {"text": "'\\n  '", "snob": "False"}, "return_value": "'\\n  '"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'ordered'", "snob": "False"}, "return_value": "'ordered'"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'...'", "snob": "False"}, "return_value": "'...'"}, {"func_args": {"text": "'\\n  '", "snob": "False"}, "return_value": "'\\n  '"}, {"func_args": {"text": "'\\n  '", "snob": "False"}, "return_value": "'\\n  '"}, {"func_args": {"text": "'end'", "snob": "False"}, "return_value": "'end'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n\\n'", "snob": "False"}, "return_value": "'\\n\\n'"}, {"func_args": {"text": "' '", "snob": "False"}, "return_value": "' '"}, {"func_args": {"text": "'ib'", "snob": "False"}, "return_value": "'ib'"}, {"func_args": {"text": "'\\n\\n'", "snob": "False"}, "return_value": "'\\n\\n'"}, {"func_args": {"text": "'.'", "snob": "False"}, "return_value": "'.'"}, {"func_args": {"text": "'ib'", "snob": "False"}, "return_value": "'ib'"}, {"func_args": {"text": "'\\n\\n'", "snob": "False"}, "return_value": "'\\n\\n'"}, {"func_args": {"text": "' '", "snob": "False"}, "return_value": "' '"}, {"func_args": {"text": "'bi'", "snob": "False"}, "return_value": "'bi'"}, {"func_args": {"text": "'\\n\\n'", "snob": "False"}, "return_value": "'\\n\\n'"}, {"func_args": {"text": "'.'", "snob": "False"}, "return_value": "'.'"}, {"func_args": {"text": "'bi'", "snob": "False"}, "return_value": "'bi'"}, {"func_args": {"text": "'\\n\\n'", "snob": "False"}, "return_value": "'\\n\\n'"}, {"func_args": {"text": "' '", "snob": "False"}, "return_value": "' '"}, {"func_args": {"text": "'is'", "snob": "False"}, "return_value": "'is'"}, {"func_args": {"text": "'\\n\\n'", "snob": "False"}, "return_value": "'\\n\\n'"}, {"func_args": {"text": "'.'", "snob": "False"}, "return_value": "'.'"}, {"func_args": {"text": "'is'", "snob": "False"}, "return_value": "'is'"}, {"func_args": {"text": "'\\n\\n'", "snob": "False"}, "return_value": "'\\n\\n'"}, {"func_args": {"text": "' '", "snob": "False"}, "return_value": "' '"}, {"func_args": {"text": "'si'", "snob": "False"}, "return_value": "'si'"}, {"func_args": {"text": "'\\n\\n'", "snob": "False"}, "return_value": "'\\n\\n'"}, {"func_args": {"text": "'.'", "snob": "False"}, "return_value": "'.'"}, {"func_args": {"text": "'si'", "snob": "False"}, "return_value": "'si'"}, {"func_args": {"text": "'\\n\\n'", "snob": "False"}, "return_value": "'\\n\\n'"}, {"func_args": {"text": "' '", "snob": "False"}, "return_value": "' '"}, {"func_args": {"text": "'bs'", "snob": "False"}, "return_value": "'bs'"}, {"func_args": {"text": "'\\n\\n'", "snob": "False"}, "return_value": "'\\n\\n'"}, {"func_args": {"text": "'.'", "snob": "False"}, "return_value": "'.'"}, {"func_args": {"text": "'bs'", "snob": "False"}, "return_value": "'bs'"}, {"func_args": {"text": "'\\n\\n'", "snob": "False"}, "return_value": "'\\n\\n'"}, {"func_args": {"text": "' '", "snob": "False"}, "return_value": "' '"}, {"func_args": {"text": "'sb'", "snob": "False"}, "return_value": "'sb'"}, {"func_args": {"text": "'\\n\\n'", "snob": "False"}, "return_value": "'\\n\\n'"}, {"func_args": {"text": "'.'", "snob": "False"}, "return_value": "'.'"}, {"func_args": {"text": "'sb'", "snob": "False"}, "return_value": "'sb'"}, {"func_args": {"text": "'\\n\\n'", "snob": "False"}, "return_value": "'\\n\\n'"}, {"func_args": {"text": "' '", "snob": "False"}, "return_value": "' '"}, {"func_args": {"text": "'sbi'", "snob": "False"}, "return_value": "'sbi'"}, {"func_args": {"text": "'\\n\\n'", "snob": "False"}, "return_value": "'\\n\\n'"}, {"func_args": {"text": "'.'", "snob": "False"}, "return_value": "'.'"}, {"func_args": {"text": "'sbi'", "snob": "False"}, "return_value": "'sbi'"}, {"func_args": {"text": "'\\n\\n'", "snob": "False"}, "return_value": "'\\n\\n'"}, {"func_args": {"text": "' '", "snob": "False"}, "return_value": "' '"}, {"func_args": {"text": "'bis'", "snob": "False"}, "return_value": "'bis'"}, {"func_args": {"text": "'\\n\\n'", "snob": "False"}, "return_value": "'\\n\\n'"}, {"func_args": {"text": "'.'", "snob": "False"}, "return_value": "'.'"}, {"func_args": {"text": "'bis'", "snob": "False"}, "return_value": "'bis'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'Definition List'", "snob": "False"}, "return_value": "'Definition List'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'A list of terms and their definitions/descriptions.'", "snob": "False"}, "return_value": "'A list of terms and their definitions/descriptions.'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'Ordered List'", "snob": "False"}, "return_value": "'Ordered List'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'A numbered list.'", "snob": "False"}, "return_value": "'A numbered list.'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'Unordered List'", "snob": "False"}, "return_value": "'Unordered List'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'An unnumbered list.'", "snob": "False"}, "return_value": "'An unnumbered list.'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n\\n'", "snob": "False"}, "return_value": "'\\n\\n'"}, {"func_args": {"text": "'Example 2'", "snob": "False"}, "return_value": "'Example 2'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'Vocals'", "snob": "False"}, "return_value": "'Vocals'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'Bruce Dickinson'", "snob": "False"}, "return_value": "'Bruce Dickinson'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'Guitar'", "snob": "False"}, "return_value": "'Guitar'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'Adrian Smith'", "snob": "False"}, "return_value": "'Adrian Smith'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'Dave Murray'", "snob": "False"}, "return_value": "'Dave Murray'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'Janick Gers'", "snob": "False"}, "return_value": "'Janick Gers'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'Bass'", "snob": "False"}, "return_value": "'Bass'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'Steve Harris'", "snob": "False"}, "return_value": "'Steve Harris'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'Drums'", "snob": "False"}, "return_value": "'Drums'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'Nicko McBrain'", "snob": "False"}, "return_value": "'Nicko McBrain'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n\\n'", "snob": "False"}, "return_value": "'\\n\\n'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'some item'", "snob": "False"}, "return_value": "'some item'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'Some other item'", "snob": "False"}, "return_value": "'Some other item'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'some item'", "snob": "False"}, "return_value": "'some item'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n\\n'", "snob": "False"}, "return_value": "'\\n\\n'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'Some other item'", "snob": "False"}, "return_value": "'Some other item'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'some item'", "snob": "False"}, "return_value": "'some item'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'some item'", "snob": "False"}, "return_value": "'some item'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n\\n'", "snob": "False"}, "return_value": "'\\n\\n'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'something else here'", "snob": "False"}, "return_value": "'something else here'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'some item'", "snob": "False"}, "return_value": "'some item'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "' first example'", "snob": "False"}, "return_value": "' first example'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "' second example'", "snob": "False"}, "return_value": "' second example'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'Processing images with links'", "snob": "False"}, "return_value": "'Processing images with links'"}, {"func_args": {"text": "'\\n\\n'", "snob": "False"}, "return_value": "'\\n\\n'"}, {"func_args": {"text": "'This test checks images with associated links.'", "snob": "False"}, "return_value": "'This test checks images with associated links.'"}, {"func_args": {"text": "'\\n\\n'", "snob": "False"}, "return_value": "'\\n\\n'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n   '", "snob": "False"}, "return_value": "'\\n   '"}, {"func_args": {"text": "'\\n      '", "snob": "False"}, "return_value": "'\\n      '"}, {"func_args": {"text": "'\\n         '", "snob": "False"}, "return_value": "'\\n         '"}, {"func_args": {"text": "'The ol has an invalid start '", "snob": "False"}, "return_value": "'The ol has an invalid start '"}, {"func_args": {"text": "'\\n         '", "snob": "False"}, "return_value": "'\\n         '"}, {"func_args": {"text": "'This should just be ignored '", "snob": "False"}, "return_value": "'This should just be ignored '"}, {"func_args": {"text": "'\\n      '", "snob": "False"}, "return_value": "'\\n      '"}, {"func_args": {"text": "'\\n   '", "snob": "False"}, "return_value": "'\\n   '"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'Foo'", "snob": "False"}, "return_value": "'Foo'"}, {"func_args": {"text": "' bar'", "snob": "False"}, "return_value": "' bar'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'Run this command:\\n'", "snob": "False"}, "return_value": "'Run this command:\\n'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'?'", "snob": "False"}, "return_value": "'?'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'Profit!'", "snob": "False"}, "return_value": "'Profit!'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'Processing empty hyperlinks'", "snob": "False"}, "return_value": "'Processing empty hyperlinks'"}, {"func_args": {"text": "'\\n\\n'", "snob": "False"}, "return_value": "'\\n\\n'"}, {"func_args": {"text": "'This test checks whether empty hyperlinks still appear in the markdown result.'", "snob": "False"}, "return_value": "'This test checks whether empty hyperlinks still appear in the markdown result.'"}, {"func_args": {"text": "'\\n\\n'", "snob": "False"}, "return_value": "'\\n\\n'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n  '", "snob": "False"}, "return_value": "'\\n  '"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'Normal'", "snob": "False"}, "return_value": "'Normal'"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'#example { color: red; }'", "snob": "False"}, "return_value": "'#example { color: red; }'"}, {"func_args": {"text": "'\\n  '", "snob": "False"}, "return_value": "'\\n  '"}, {"func_args": {"text": "'\\n  '", "snob": "False"}, "return_value": "'\\n  '"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'\\n      '", "snob": "False"}, "return_value": "'\\n      '"}, {"func_args": {"text": "'test doc'", "snob": "False"}, "return_value": "'test doc'"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'\\n      '", "snob": "False"}, "return_value": "'\\n      '"}, {"func_args": {"text": "'first issue'", "snob": "False"}, "return_value": "'first issue'"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'\\n      '", "snob": "False"}, "return_value": "'\\n      '"}, {"func_args": {"text": "'\\n      '", "snob": "False"}, "return_value": "'\\n      '"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'\\n      '", "snob": "False"}, "return_value": "'\\n      '"}, {"func_args": {"text": "'\\n        '", "snob": "False"}, "return_value": "'\\n        '"}, {"func_args": {"text": "'bit'", "snob": "False"}, "return_value": "'bit'"}, {"func_args": {"text": "'\\n      '", "snob": "False"}, "return_value": "'\\n      '"}, {"func_args": {"text": "'\\n      '", "snob": "False"}, "return_value": "'\\n      '"}, {"func_args": {"text": "'\\n        '", "snob": "False"}, "return_value": "'\\n        '"}, {"func_args": {"text": "'bold italic'", "snob": "False"}, "return_value": "'bold italic'"}, {"func_args": {"text": "'\\n      '", "snob": "False"}, "return_value": "'\\n      '"}, {"func_args": {"text": "'\\n      '", "snob": "False"}, "return_value": "'\\n      '"}, {"func_args": {"text": "'\\n        '", "snob": "False"}, "return_value": "'\\n        '"}, {"func_args": {"text": "'\\n          '", "snob": "False"}, "return_value": "'\\n          '"}, {"func_args": {"text": "'orange'", "snob": "False"}, "return_value": "'orange'"}, {"func_args": {"text": "'\\n        '", "snob": "False"}, "return_value": "'\\n        '"}, {"func_args": {"text": "'\\n        '", "snob": "False"}, "return_value": "'\\n        '"}, {"func_args": {"text": "'\\n          '", "snob": "False"}, "return_value": "'\\n          '"}, {"func_args": {"text": "'apple'", "snob": "False"}, "return_value": "'apple'"}, {"func_args": {"text": "'\\n        '", "snob": "False"}, "return_value": "'\\n        '"}, {"func_args": {"text": "'\\n      '", "snob": "False"}, "return_value": "'\\n      '"}, {"func_args": {"text": "'\\n      '", "snob": "False"}, "return_value": "'\\n      '"}, {"func_args": {"text": "'\\n        '", "snob": "False"}, "return_value": "'\\n        '"}, {"func_args": {"text": "'final'", "snob": "False"}, "return_value": "'final'"}, {"func_args": {"text": "'\\n      '", "snob": "False"}, "return_value": "'\\n      '"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'\\n      '", "snob": "False"}, "return_value": "'\\n      '"}, {"func_args": {"text": "'\\n      '", "snob": "False"}, "return_value": "'\\n      '"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'\\n      '", "snob": "False"}, "return_value": "'\\n      '"}, {"func_args": {"text": "'text to separate lists'", "snob": "False"}, "return_value": "'text to separate lists'"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'\\n      '", "snob": "False"}, "return_value": "'\\n      '"}, {"func_args": {"text": "'\\n      '", "snob": "False"}, "return_value": "'\\n      '"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'\\n      '", "snob": "False"}, "return_value": "'\\n      '"}, {"func_args": {"text": "'\\n        '", "snob": "False"}, "return_value": "'\\n        '"}, {"func_args": {"text": "'now with numbers'", "snob": "False"}, "return_value": "'now with numbers'"}, {"func_args": {"text": "'\\n      '", "snob": "False"}, "return_value": "'\\n      '"}, {"func_args": {"text": "'\\n      '", "snob": "False"}, "return_value": "'\\n      '"}, {"func_args": {"text": "'\\n        '", "snob": "False"}, "return_value": "'\\n        '"}, {"func_args": {"text": "'the prisoner'", "snob": "False"}, "return_value": "'the prisoner'"}, {"func_args": {"text": "'\\n      '", "snob": "False"}, "return_value": "'\\n      '"}, {"func_args": {"text": "'\\n      '", "snob": "False"}, "return_value": "'\\n      '"}, {"func_args": {"text": "'\\n        '", "snob": "False"}, "return_value": "'\\n        '"}, {"func_args": {"text": "'\\n          '", "snob": "False"}, "return_value": "'\\n          '"}, {"func_args": {"text": "'not an '", "snob": "False"}, "return_value": "'not an '"}, {"func_args": {"text": "'italic number'", "snob": "False"}, "return_value": "'italic number'"}, {"func_args": {"text": "'\\n        '", "snob": "False"}, "return_value": "'\\n        '"}, {"func_args": {"text": "'\\n        '", "snob": "False"}, "return_value": "'\\n        '"}, {"func_args": {"text": "'\\n          '", "snob": "False"}, "return_value": "'\\n          '"}, {"func_args": {"text": "'a '", "snob": "False"}, "return_value": "'a '"}, {"func_args": {"text": "'bold human'", "snob": "False"}, "return_value": "'bold human'"}, {"func_args": {"text": "' being'", "snob": "False"}, "return_value": "' being'"}, {"func_args": {"text": "'\\n        '", "snob": "False"}, "return_value": "'\\n        '"}, {"func_args": {"text": "'\\n      '", "snob": "False"}, "return_value": "'\\n      '"}, {"func_args": {"text": "'\\n      '", "snob": "False"}, "return_value": "'\\n      '"}, {"func_args": {"text": "'\\n        '", "snob": "False"}, "return_value": "'\\n        '"}, {"func_args": {"text": "'end'", "snob": "False"}, "return_value": "'end'"}, {"func_args": {"text": "'\\n      '", "snob": "False"}, "return_value": "'\\n      '"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'\\n      '", "snob": "False"}, "return_value": "'\\n      '"}, {"func_args": {"text": "'\\n      '", "snob": "False"}, "return_value": "'\\n      '"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'\\n      '", "snob": "False"}, "return_value": "'\\n      '"}, {"func_args": {"text": "'\\n        '", "snob": "False"}, "return_value": "'\\n        '"}, {"func_args": {"text": "'bold'", "snob": "False"}, "return_value": "'bold'"}, {"func_args": {"text": "'\\n        '", "snob": "False"}, "return_value": "'\\n        '"}, {"func_args": {"text": "'italic'", "snob": "False"}, "return_value": "'italic'"}, {"func_args": {"text": "'\\n      '", "snob": "False"}, "return_value": "'\\n      '"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'\\n      '", "snob": "False"}, "return_value": "'\\n      '"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'\\n      Some '", "snob": "False"}, "return_value": "'\\n      Some '"}, {"func_args": {"text": "' here'", "snob": "False"}, "return_value": "' here'"}, {"func_args": {"text": "'\\n      '", "snob": "False"}, "return_value": "'\\n      '"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'\\n\\n'", "snob": "False"}, "return_value": "'\\n\\n'"}, {"func_args": {"text": "'\\n//<![CDATA[\\n(function(id) {\\n document.write(\\'<script type=\"text/javascript\" src=\"\\' +\\n   \\'http://connect.decknetwork.net/deck\\' + id + \\'_js.php?\\' +\\n   (new Date().getTime()) + \\'\"></ignore>\\');\\n})(\"test\");\\n//]]>\\n'", "snob": "False"}, "return_value": "'\\n//<![CDATA[\\n(function(id) {\\n document.write(\\'<script type=\"text/javascript\" src=\"\\' +\\n   \\'http://connect.decknetwork.net/deck\\' + id + \\'_js.php?\\' +\\n   (new Date().getTime()) + \\'\"></ignore>\\');\\n})(\"test\");\\n//]]>\\n'"}, {"func_args": {"text": "'\\n\\n    '", "snob": "False"}, "return_value": "'\\n\\n    '"}, {"func_args": {"text": "\"\\n        2012. Now that was a good year. So was 2011. That's all.\\n    \"", "snob": "False"}, "return_value": "\"\\n        2012\\\\. Now that was a good year. So was 2011. That's all.\\n    \""}, {"func_args": {"text": "'\\n\\n    '", "snob": "False"}, "return_value": "'\\n\\n    '"}, {"func_args": {"text": "'\\n        3.14159 is an approximation of pi.\\n    '", "snob": "False"}, "return_value": "'\\n        3.14159 is an approximation of pi.\\n    '"}, {"func_args": {"text": "'\\n\\n    '", "snob": "False"}, "return_value": "'\\n\\n    '"}, {"func_args": {"text": "'\\n        + not + a list item\\n    '", "snob": "False"}, "return_value": "'\\n        \\\\+ not + a list item\\n    '"}, {"func_args": {"text": "'\\n\\n    '", "snob": "False"}, "return_value": "'\\n\\n    '"}, {"func_args": {"text": "'\\n        +foo\\n    '", "snob": "False"}, "return_value": "'\\n        +foo\\n    '"}, {"func_args": {"text": "'\\n\\n    '", "snob": "False"}, "return_value": "'\\n\\n    '"}, {"func_args": {"text": "'\\n        - foo - bar\\n    '", "snob": "False"}, "return_value": "'\\n        \\\\- foo - bar\\n    '"}, {"func_args": {"text": "'\\n\\n    '", "snob": "False"}, "return_value": "'\\n\\n    '"}, {"func_args": {"text": "'\\n        -foo\\n    '", "snob": "False"}, "return_value": "'\\n        -foo\\n    '"}, {"func_args": {"text": "'\\n\\n    '", "snob": "False"}, "return_value": "'\\n\\n    '"}, {"func_args": {"text": "'\\n        not a header'", "snob": "False"}, "return_value": "'\\n        not a header'"}, {"func_args": {"text": "'\\n        --\\n    '", "snob": "False"}, "return_value": "'\\n        \\\\--\\n    '"}, {"func_args": {"text": "'\\n\\n    '", "snob": "False"}, "return_value": "'\\n\\n    '"}, {"func_args": {"text": "'\\n        not a hr'", "snob": "False"}, "return_value": "'\\n        not a hr'"}, {"func_args": {"text": "'\\n        '", "snob": "False"}, "return_value": "'\\n        '"}, {"func_args": {"text": "'\\n        ---\\n        '", "snob": "False"}, "return_value": "'\\n        \\\\---\\n        '"}, {"func_args": {"text": "'\\n        - - -\\n    '", "snob": "False"}, "return_value": "'\\n        \\\\- - -\\n    '"}, {"func_args": {"text": "'\\n\\n    '", "snob": "False"}, "return_value": "'\\n\\n    '"}, {"func_args": {"text": "'\\n        c:\\\\tmp, \\\\\\\\server\\\\path, \\\\_/, foo\\\\bar, #\\\\#, \\\\\\\\#\\n    '", "snob": "False"}, "return_value": "'\\n        c:\\\\tmp, \\\\\\\\\\\\server\\\\path, \\\\\\\\_/, foo\\\\bar, #\\\\\\\\#, \\\\\\\\\\\\\\\\#\\n    '"}, {"func_args": {"text": "'\\n  '", "snob": "False"}, "return_value": "'\\n  '"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'Text'", "snob": "False"}, "return_value": "'Text'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'sample'", "snob": "False"}, "return_value": "'sample'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'Bacon ipsum dolor sit amet pork chop id pork belly ham hock, sed meatloaf eu exercitation flank quis veniam officia. Chuck dolor esse, occaecat est elit drumstick ground round tri-tip nisi. Eu fugiat drumstick leberkas magna. Turducken frankfurter nisi aute shank'", "snob": "False"}, "return_value": "'Bacon ipsum dolor sit amet pork chop id pork belly ham hock, sed meatloaf eu exercitation flank quis veniam officia. Chuck dolor esse, occaecat est elit drumstick ground round tri-tip nisi. Eu fugiat drumstick leberkas magna. Turducken frankfurter nisi aute shank'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'irure ex esse id, ham commodo meatloaf pig pariatur ut cow. Officia salami in fatback voluptate boudin ullamco beef ribs shank. Duis spare ribs pork chop, ad leberkas reprehenderit id voluptate salami ham ut in ut cillum turducken. Nisi ribeye tail capicola dolore andouille. Short ribs id beef ribs, et nulla ground round do sunt dolore. Dolore nisi ullamco veniam sunt. Duis brisket drumstick, dolor fatback filet mignon meatloaf laboris tri-tip speck chuck ball tip voluptate ullamco laborum.\\n'", "snob": "False"}, "return_value": "'irure ex esse id, ham commodo meatloaf pig pariatur ut cow. Officia salami in fatback voluptate boudin ullamco beef ribs shank. Duis spare ribs pork chop, ad leberkas reprehenderit id voluptate salami ham ut in ut cillum turducken. Nisi ribeye tail capicola dolore andouille. Short ribs id beef ribs, et nulla ground round do sunt dolore. Dolore nisi ullamco veniam sunt. Duis brisket drumstick, dolor fatback filet mignon meatloaf laboris tri-tip speck chuck ball tip voluptate ullamco laborum.\\n'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'--'", "snob": "False"}, "return_value": "'\\\\--'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'\\n        '", "snob": "False"}, "return_value": "'\\n        '"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'H1'", "snob": "False"}, "return_value": "'H1'"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'H2'", "snob": "False"}, "return_value": "'H2'"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'H3'", "snob": "False"}, "return_value": "'H3'"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'H4'", "snob": "False"}, "return_value": "'H4'"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'H5'", "snob": "False"}, "return_value": "'H5'"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'H6'", "snob": "False"}, "return_value": "'H6'"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'H7'", "snob": "False"}, "return_value": "'H7'"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'H8'", "snob": "False"}, "return_value": "'H8'"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'H9'", "snob": "False"}, "return_value": "'H9'"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'H10'", "snob": "False"}, "return_value": "'H10'"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'H11'", "snob": "False"}, "return_value": "'H11'"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'H12'", "snob": "False"}, "return_value": "'H12'"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'NO number'", "snob": "False"}, "return_value": "'NO number'"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'BrettTerpstra.com'", "snob": "False"}, "return_value": "'BrettTerpstra.com'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'text'", "snob": "False"}, "return_value": "'text'"}, {"func_args": {"text": "' and a very long long long long long long long long long long long long long long long long long long long long line\\n'", "snob": "False"}, "return_value": "' and a very long long long long long long long long long long long long long long long long long long long long line\\n'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'Another theory is that magician and occultist '", "snob": "False"}, "return_value": "'Another theory is that magician and occultist '"}, {"func_args": {"text": "'Aliester Crowley'", "snob": "False"}, "return_value": "'Aliester Crowley'"}, {"func_args": {"text": "' created the beast while\\n    attempting to summon evil spirits at his house on the edge of the\\n    lake in the early 1900'", "snob": "False"}, "return_value": "' created the beast while\\n    attempting to summon evil spirits at his house on the edge of the\\n    lake in the early 1900'"}, {"func_args": {"text": "'s. '", "snob": "False"}, "return_value": "'s. '"}, {"func_args": {"text": "'I met a local woman who\\n        prefers this explanation.'", "snob": "False"}, "return_value": "'I met a local woman who\\n        prefers this explanation.'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'item'", "snob": "False"}, "return_value": "'item'"}, {"func_args": {"text": "'\\ntext\\n'", "snob": "False"}, "return_value": "'\\ntext\\n'"}, {"func_args": {"text": "'Foo'", "snob": "False"}, "return_value": "'Foo'"}, {"func_args": {"text": "'\\n  '", "snob": "False"}, "return_value": "'\\n  '"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'initial crowded pre handling test #1'", "snob": "False"}, "return_value": "'initial crowded pre handling test #1'"}, {"func_args": {"text": "'\\n  '", "snob": "False"}, "return_value": "'\\n  '"}, {"func_args": {"text": "'\\n  '", "snob": "False"}, "return_value": "'\\n  '"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n\\n    '", "snob": "False"}, "return_value": "'\\n\\n    '"}, {"func_args": {"text": "'Ensure that HTML that starts with a crowded '", "snob": "False"}, "return_value": "'Ensure that HTML that starts with a crowded '"}, {"func_args": {"text": "'\\n    is converted to reasonable Markdown.'", "snob": "False"}, "return_value": "'\\n    is converted to reasonable Markdown.'"}, {"func_args": {"text": "'\\n  '", "snob": "False"}, "return_value": "'\\n  '"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'Escaped HTML like '", "snob": "False"}, "return_value": "'Escaped HTML like '"}, {"func_args": {"text": "'div'", "snob": "False"}, "return_value": "'div'"}, {"func_args": {"text": "' or '", "snob": "False"}, "return_value": "' or '"}, {"func_args": {"text": "' should NOT remain escaped on output'", "snob": "False"}, "return_value": "' should NOT remain escaped on output'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'emphasis'", "snob": "False"}, "return_value": "'emphasis'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'emphasis:'", "snob": "False"}, "return_value": "'emphasis:'"}, {"func_args": {"text": "' some text'", "snob": "False"}, "return_value": "' some text'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'repeat:'", "snob": "False"}, "return_value": "'repeat:'"}, {"func_args": {"text": "' again'", "snob": "False"}, "return_value": "' again'"}, {"func_args": {"text": "'\\n\\n'", "snob": "False"}, "return_value": "'\\n\\n'"}, {"func_args": {"text": "'bold'", "snob": "False"}, "return_value": "'bold'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'bold:'", "snob": "False"}, "return_value": "'bold:'"}, {"func_args": {"text": "' some text'", "snob": "False"}, "return_value": "' some text'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'repeat:'", "snob": "False"}, "return_value": "'repeat:'"}, {"func_args": {"text": "' again'", "snob": "False"}, "return_value": "' again'"}, {"func_args": {"text": "'\\n\\n'", "snob": "False"}, "return_value": "'\\n\\n'"}, {"func_args": {"text": "'strike'", "snob": "False"}, "return_value": "'strike'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'strike:'", "snob": "False"}, "return_value": "'strike:'"}, {"func_args": {"text": "' some text'", "snob": "False"}, "return_value": "' some text'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'strike:'", "snob": "False"}, "return_value": "'strike:'"}, {"func_args": {"text": "' again'", "snob": "False"}, "return_value": "' again'"}, {"func_args": {"text": "'\\n\\n'", "snob": "False"}, "return_value": "'\\n\\n'"}, {"func_args": {"text": "'separate'", "snob": "False"}, "return_value": "'separate'"}, {"func_args": {"text": "'emphasis'", "snob": "False"}, "return_value": "'emphasis'"}, {"func_args": {"text": "' some more text'", "snob": "False"}, "return_value": "' some more text'"}, {"func_args": {"text": "'\\n\\n'", "snob": "False"}, "return_value": "'\\n\\n'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'emphasis'", "snob": "False"}, "return_value": "'emphasis'"}, {"func_args": {"text": "'.'", "snob": "False"}, "return_value": "'.'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'emphasis'", "snob": "False"}, "return_value": "'emphasis'"}, {"func_args": {"text": "'?'", "snob": "False"}, "return_value": "'?'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'emphasis'", "snob": "False"}, "return_value": "'emphasis'"}, {"func_args": {"text": "'!'", "snob": "False"}, "return_value": "'!'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'('", "snob": "False"}, "return_value": "'('"}, {"func_args": {"text": "'emphasis'", "snob": "False"}, "return_value": "'emphasis'"}, {"func_args": {"text": "')'", "snob": "False"}, "return_value": "')'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'['", "snob": "False"}, "return_value": "'['"}, {"func_args": {"text": "'bold'", "snob": "False"}, "return_value": "'bold'"}, {"func_args": {"text": "'}'", "snob": "False"}, "return_value": "'}'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'('", "snob": "False"}, "return_value": "'('"}, {"func_args": {"text": "'strike'", "snob": "False"}, "return_value": "'strike'"}, {"func_args": {"text": "']'", "snob": "False"}, "return_value": "']'"}, {"func_args": {"text": "'\\n\\n'", "snob": "False"}, "return_value": "'\\n\\n'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'*'", "snob": "False"}, "return_value": "'*'"}, {"func_args": {"text": "'bold'", "snob": "False"}, "return_value": "'bold'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'~'", "snob": "False"}, "return_value": "'~'"}, {"func_args": {"text": "'strike'", "snob": "False"}, "return_value": "'strike'"}, {"func_args": {"text": "'\\n\\n'", "snob": "False"}, "return_value": "'\\n\\n'"}, {"func_args": {"text": "'em1'", "snob": "False"}, "return_value": "'em1'"}, {"func_args": {"text": "'em2'", "snob": "False"}, "return_value": "'em2'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'Markdown-sensible characters processing'", "snob": "False"}, "return_value": "'Markdown-sensible characters processing'"}, {"func_args": {"text": "'\\n\\n'", "snob": "False"}, "return_value": "'\\n\\n'"}, {"func_args": {"text": "'This test checks special characters processing inside URLs: parenthesis and brackets should be escaped to keep markdown image and anchor syntax safe and sound.'", "snob": "False"}, "return_value": "'This test checks special characters processing inside URLs: parenthesis and brackets should be escaped to keep markdown image and anchor syntax safe and sound.'"}, {"func_args": {"text": "'\\n\\n'", "snob": "False"}, "return_value": "'\\n\\n'"}, {"func_args": {"text": "'\\n\\t'", "snob": "False"}, "return_value": "'\\n\\t'"}, {"func_args": {"text": "'Some MSDN link using parenthesis'", "snob": "False"}, "return_value": "'Some MSDN link using parenthesis'"}, {"func_args": {"text": "'\\n\\t'", "snob": "False"}, "return_value": "'\\n\\t'"}, {"func_args": {"text": "'Google search result URL with unescaped brackets'", "snob": "False"}, "return_value": "'Google search result URL with unescaped brackets'"}, {"func_args": {"text": "'\\n\\t'", "snob": "False"}, "return_value": "'\\n\\t'"}, {"func_args": {"text": "'Yet another test for [brackets], {curly braces} and (parenthesis) processing inside the anchor'", "snob": "False"}, "return_value": "'Yet another test for [brackets], {curly braces} and (parenthesis) processing inside the anchor'"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'Use automatic links like '", "snob": "False"}, "return_value": "'Use automatic links like '"}, {"func_args": {"text": "' when the URL is the label'", "snob": "False"}, "return_value": "' when the URL is the label'"}, {"func_args": {"text": "'\\n    '", "snob": "False"}, "return_value": "'\\n    '"}, {"func_args": {"text": "'Exempt '", "snob": "False"}, "return_value": "'Exempt '"}, {"func_args": {"text": "'non-absolute_URIs'", "snob": "False"}, "return_value": "'non-absolute_URIs'"}, {"func_args": {"text": "' from automatic link detection'", "snob": "False"}, "return_value": "' from automatic link detection'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n\\n'", "snob": "False"}, "return_value": "'\\n\\n'"}, {"func_args": {"text": "'And here are images with tricky attribute values:'", "snob": "False"}, "return_value": "'And here are images with tricky attribute values:'"}, {"func_args": {"text": "'\\n\\n'", "snob": "False"}, "return_value": "'\\n\\n'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'b'", "snob": "False"}, "return_value": "'b'"}, {"func_args": {"text": "'\\n'", "snob": "False"}, "return_value": "'\\n'"}, {"func_args": {"text": "'this is a '", "snob": "False"}, "return_value": "'this is a '"}, {"func_args": {"text": "'txt'", "snob": "False"}, "return_value": "'txt'"}, {"func_args": {"text": "' and this is a '", "snob": "False"}, "return_value": "' and this is a '"}, {"func_args": {"text": "'with text'", "snob": "False"}, "return_value": "'with text'"}, {"func_args": {"text": "' and some '", "snob": "False"}, "return_value": "' and some '"}, {"func_args": {"text": "'italics'", "snob": "False"}, "return_value": "'italics'"}, {"func_args": {"text": "' too.'", "snob": "False"}, "return_value": "' too.'"}, {"func_args": {"text": "'miow '", "snob": "False"}, "return_value": "'miow '"}, {"func_args": {"text": "'miow '", "snob": "False"}, "return_value": "'miow '"}, {"func_args": {"text": "'miow '", "snob": "False"}, "return_value": "'miow '"}, {"func_args": {"text": "'foo '", "snob": "False"}, "return_value": "'foo '"}, {"func_args": {"text": "'TLA'", "snob": "False"}, "return_value": "'TLA'"}, {"func_args": {"text": "' bar'", "snob": "False"}, "return_value": "' bar'"}], "text": "def escape_md_section(text: str, snob: bool = False) -> str:\n    \"\"\"\n    Escapes markdown-sensitive characters across whole document sections.\n    \"\"\"\n    text = config.RE_MD_BACKSLASH_MATCHER.sub(r\"\\\\\\1\", text)\n\n    if snob:\n        text = config.RE_MD_CHARS_MATCHER_ALL.sub(r\"\\\\\\1\", text)\n\n    text = config.RE_MD_DOT_MATCHER.sub(r\"\\1\\\\\\2\", text)\n    text = config.RE_MD_PLUS_MATCHER.sub(r\"\\1\\\\\\2\", text)\n    text = config.RE_MD_DASH_MATCHER.sub(r\"\\1\\\\\\2\", text)\n\n    return text"}, "hn": {"line": 12, "args": [{"func_args": {"tag": "'img'"}, "return_value": "0"}, {"func_args": {"tag": "'blockquote'"}, "return_value": "0"}, {"func_args": {"tag": "'blockquote'"}, "return_value": "0"}, {"func_args": {"tag": "'a'"}, "return_value": "0"}, {"func_args": {"tag": "'div'"}, "return_value": "0"}, {"func_args": {"tag": "'img'"}, "return_value": "0"}, {"func_args": {"tag": "'img'"}, "return_value": "0"}, {"func_args": {"tag": "'div'"}, "return_value": "0"}, {"func_args": {"tag": "'a'"}, "return_value": "0"}, {"func_args": {"tag": "'html'"}, "return_value": "0"}, {"func_args": {"tag": "'head'"}, "return_value": "0"}, {"func_args": {"tag": "'meta'"}, "return_value": "0"}, {"func_args": {"tag": "'title'"}, "return_value": "0"}, {"func_args": {"tag": "'title'"}, "return_value": "0"}, {"func_args": {"tag": "'head'"}, "return_value": "0"}, {"func_args": {"tag": "'body'"}, "return_value": "0"}, {"func_args": {"tag": "'h1'"}, "return_value": "1"}, {"func_args": {"tag": "'h1'"}, "return_value": "1"}, {"func_args": {"tag": "'h1'"}, "return_value": "1"}, {"func_args": {"tag": "'code'"}, "return_value": "0"}, {"func_args": {"tag": "'code'"}, "return_value": "0"}, {"func_args": {"tag": "'b'"}, "return_value": "0"}, {"func_args": {"tag": "'b'"}, "return_value": "0"}, {"func_args": {"tag": "'i'"}, "return_value": "0"}, {"func_args": {"tag": "'i'"}, "return_value": "0"}, {"func_args": {"tag": "'h2'"}, "return_value": "2"}, {"func_args": {"tag": "'h2'"}, "return_value": "2"}, {"func_args": {"tag": "'h2'"}, "return_value": "2"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'table'"}, "return_value": "0"}, {"func_args": {"tag": "'tr'"}, "return_value": "0"}, {"func_args": {"tag": "'th'"}, "return_value": "0"}, {"func_args": {"tag": "'th'"}, "return_value": "0"}, {"func_args": {"tag": "'th'"}, "return_value": "0"}, {"func_args": {"tag": "'th'"}, "return_value": "0"}, {"func_args": {"tag": "'th'"}, "return_value": "0"}, {"func_args": {"tag": "'th'"}, "return_value": "0"}, {"func_args": {"tag": "'tr'"}, "return_value": "0"}, {"func_args": {"tag": "'tr'"}, "return_value": "0"}, {"func_args": {"tag": "'td'"}, "return_value": "0"}, {"func_args": {"tag": "'td'"}, "return_value": "0"}, {"func_args": {"tag": "'td'"}, "return_value": "0"}, {"func_args": {"tag": "'td'"}, "return_value": "0"}, {"func_args": {"tag": "'td'"}, "return_value": "0"}, {"func_args": {"tag": "'img'"}, "return_value": "0"}, {"func_args": {"tag": "'img'"}, "return_value": "0"}, {"func_args": {"tag": "'td'"}, "return_value": "0"}, {"func_args": {"tag": "'tr'"}, "return_value": "0"}, {"func_args": {"tag": "'tr'"}, "return_value": "0"}, {"func_args": {"tag": "'td'"}, "return_value": "0"}, {"func_args": {"tag": "'td'"}, "return_value": "0"}, {"func_args": {"tag": "'td'"}, "return_value": "0"}, {"func_args": {"tag": "'td'"}, "return_value": "0"}, {"func_args": {"tag": "'td'"}, "return_value": "0"}, {"func_args": {"tag": "'img'"}, "return_value": "0"}, {"func_args": {"tag": "'img'"}, "return_value": "0"}, {"func_args": {"tag": "'td'"}, "return_value": "0"}, {"func_args": {"tag": "'tr'"}, "return_value": "0"}, {"func_args": {"tag": "'table'"}, "return_value": "0"}, {"func_args": {"tag": "'body'"}, "return_value": "0"}, {"func_args": {"tag": "'html'"}, "return_value": "0"}, {"func_args": {"tag": "'blockquote'"}, "return_value": "0"}, {"func_args": {"tag": "'br'"}, "return_value": "0"}, {"func_args": {"tag": "'blockquote'"}, "return_value": "0"}, {"func_args": {"tag": "'kbd'"}, "return_value": "0"}, {"func_args": {"tag": "'kbd'"}, "return_value": "0"}, {"func_args": {"tag": "'abbr'"}, "return_value": "0"}, {"func_args": {"tag": "'abbr'"}, "return_value": "0"}, {"func_args": {"tag": "'abbr'"}, "return_value": "0"}, {"func_args": {"tag": "'abbr'"}, "return_value": "0"}, {"func_args": {"tag": "'a'"}, "return_value": "0"}, {"func_args": {"tag": "'a'"}, "return_value": "0"}, {"func_args": {"tag": "'html'"}, "return_value": "0"}, {"func_args": {"tag": "'head'"}, "return_value": "0"}, {"func_args": {"tag": "'title'"}, "return_value": "0"}, {"func_args": {"tag": "'title'"}, "return_value": "0"}, {"func_args": {"tag": "'head'"}, "return_value": "0"}, {"func_args": {"tag": "'body'"}, "return_value": "0"}, {"func_args": {"tag": "'h1'"}, "return_value": "1"}, {"func_args": {"tag": "'h1'"}, "return_value": "1"}, {"func_args": {"tag": "'h1'"}, "return_value": "1"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'body'"}, "return_value": "0"}, {"func_args": {"tag": "'html'"}, "return_value": "0"}, {"func_args": {"tag": "'a'"}, "return_value": "0"}, {"func_args": {"tag": "'a'"}, "return_value": "0"}, {"func_args": {"tag": "'del'"}, "return_value": "0"}, {"func_args": {"tag": "'del'"}, "return_value": "0"}, {"func_args": {"tag": "'strike'"}, "return_value": "0"}, {"func_args": {"tag": "'strike'"}, "return_value": "0"}, {"func_args": {"tag": "'s'"}, "return_value": "0"}, {"func_args": {"tag": "'s'"}, "return_value": "0"}, {"func_args": {"tag": "'i'"}, "return_value": "0"}, {"func_args": {"tag": "'i'"}, "return_value": "0"}, {"func_args": {"tag": "'i'"}, "return_value": "0"}, {"func_args": {"tag": "'q'"}, "return_value": "0"}, {"func_args": {"tag": "'q'"}, "return_value": "0"}, {"func_args": {"tag": "'q'"}, "return_value": "0"}, {"func_args": {"tag": "'q'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'strong'"}, "return_value": "0"}, {"func_args": {"tag": "'strong'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'html'"}, "return_value": "0"}, {"func_args": {"tag": "'head'"}, "return_value": "0"}, {"func_args": {"tag": "'title'"}, "return_value": "0"}, {"func_args": {"tag": "'title'"}, "return_value": "0"}, {"func_args": {"tag": "'style'"}, "return_value": "0"}, {"func_args": {"tag": "'style'"}, "return_value": "0"}, {"func_args": {"tag": "'head'"}, "return_value": "0"}, {"func_args": {"tag": "'body'"}, "return_value": "0"}, {"func_args": {"tag": "'h1'"}, "return_value": "1"}, {"func_args": {"tag": "'h1'"}, "return_value": "1"}, {"func_args": {"tag": "'h1'"}, "return_value": "1"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'body'"}, "return_value": "0"}, {"func_args": {"tag": "'html'"}, "return_value": "0"}, {"func_args": {"tag": "'h1'"}, "return_value": "1"}, {"func_args": {"tag": "'h1'"}, "return_value": "1"}, {"func_args": {"tag": "'h1'"}, "return_value": "1"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'a'"}, "return_value": "0"}, {"func_args": {"tag": "'b'"}, "return_value": "0"}, {"func_args": {"tag": "'b'"}, "return_value": "0"}, {"func_args": {"tag": "'a'"}, "return_value": "0"}, {"func_args": {"tag": "'a'"}, "return_value": "0"}, {"func_args": {"tag": "'code'"}, "return_value": "0"}, {"func_args": {"tag": "'code'"}, "return_value": "0"}, {"func_args": {"tag": "'a'"}, "return_value": "0"}, {"func_args": {"tag": "'a'"}, "return_value": "0"}, {"func_args": {"tag": "'code'"}, "return_value": "0"}, {"func_args": {"tag": "'code'"}, "return_value": "0"}, {"func_args": {"tag": "'a'"}, "return_value": "0"}, {"func_args": {"tag": "'ol'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'ul'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'ul'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'ol'"}, "return_value": "0"}, {"func_args": {"tag": "'ul'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'ol'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'ol'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'ul'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'em'"}, "return_value": "0"}, {"func_args": {"tag": "'strong'"}, "return_value": "0"}, {"func_args": {"tag": "'strong'"}, "return_value": "0"}, {"func_args": {"tag": "'em'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'em'"}, "return_value": "0"}, {"func_args": {"tag": "'strong'"}, "return_value": "0"}, {"func_args": {"tag": "'strong'"}, "return_value": "0"}, {"func_args": {"tag": "'em'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'strong'"}, "return_value": "0"}, {"func_args": {"tag": "'em'"}, "return_value": "0"}, {"func_args": {"tag": "'em'"}, "return_value": "0"}, {"func_args": {"tag": "'strong'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'strong'"}, "return_value": "0"}, {"func_args": {"tag": "'em'"}, "return_value": "0"}, {"func_args": {"tag": "'em'"}, "return_value": "0"}, {"func_args": {"tag": "'strong'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'em'"}, "return_value": "0"}, {"func_args": {"tag": "'strike'"}, "return_value": "0"}, {"func_args": {"tag": "'strike'"}, "return_value": "0"}, {"func_args": {"tag": "'em'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'em'"}, "return_value": "0"}, {"func_args": {"tag": "'strike'"}, "return_value": "0"}, {"func_args": {"tag": "'strike'"}, "return_value": "0"}, {"func_args": {"tag": "'em'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'em'"}, "return_value": "0"}, {"func_args": {"tag": "'strike'"}, "return_value": "0"}, {"func_args": {"tag": "'strike'"}, "return_value": "0"}, {"func_args": {"tag": "'em'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'em'"}, "return_value": "0"}, {"func_args": {"tag": "'strike'"}, "return_value": "0"}, {"func_args": {"tag": "'strike'"}, "return_value": "0"}, {"func_args": {"tag": "'em'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'strong'"}, "return_value": "0"}, {"func_args": {"tag": "'strike'"}, "return_value": "0"}, {"func_args": {"tag": "'strike'"}, "return_value": "0"}, {"func_args": {"tag": "'strong'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'strong'"}, "return_value": "0"}, {"func_args": {"tag": "'strike'"}, "return_value": "0"}, {"func_args": {"tag": "'strike'"}, "return_value": "0"}, {"func_args": {"tag": "'strong'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'strike'"}, "return_value": "0"}, {"func_args": {"tag": "'strong'"}, "return_value": "0"}, {"func_args": {"tag": "'strong'"}, "return_value": "0"}, {"func_args": {"tag": "'strike'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'strike'"}, "return_value": "0"}, {"func_args": {"tag": "'strong'"}, "return_value": "0"}, {"func_args": {"tag": "'strong'"}, "return_value": "0"}, {"func_args": {"tag": "'strike'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'strike'"}, "return_value": "0"}, {"func_args": {"tag": "'strong'"}, "return_value": "0"}, {"func_args": {"tag": "'em'"}, "return_value": "0"}, {"func_args": {"tag": "'em'"}, "return_value": "0"}, {"func_args": {"tag": "'strong'"}, "return_value": "0"}, {"func_args": {"tag": "'strike'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'strike'"}, "return_value": "0"}, {"func_args": {"tag": "'strong'"}, "return_value": "0"}, {"func_args": {"tag": "'em'"}, "return_value": "0"}, {"func_args": {"tag": "'em'"}, "return_value": "0"}, {"func_args": {"tag": "'strong'"}, "return_value": "0"}, {"func_args": {"tag": "'strike'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'strong'"}, "return_value": "0"}, {"func_args": {"tag": "'em'"}, "return_value": "0"}, {"func_args": {"tag": "'strike'"}, "return_value": "0"}, {"func_args": {"tag": "'strike'"}, "return_value": "0"}, {"func_args": {"tag": "'em'"}, "return_value": "0"}, {"func_args": {"tag": "'strong'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'strong'"}, "return_value": "0"}, {"func_args": {"tag": "'em'"}, "return_value": "0"}, {"func_args": {"tag": "'strike'"}, "return_value": "0"}, {"func_args": {"tag": "'strike'"}, "return_value": "0"}, {"func_args": {"tag": "'em'"}, "return_value": "0"}, {"func_args": {"tag": "'strong'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'html'"}, "return_value": "0"}, {"func_args": {"tag": "'body'"}, "return_value": "0"}, {"func_args": {"tag": "'hr'"}, "return_value": "0"}, {"func_args": {"tag": "'body'"}, "return_value": "0"}, {"func_args": {"tag": "'html'"}, "return_value": "0"}, {"func_args": {"tag": "'dl'"}, "return_value": "0"}, {"func_args": {"tag": "'dt'"}, "return_value": "0"}, {"func_args": {"tag": "'dt'"}, "return_value": "0"}, {"func_args": {"tag": "'dd'"}, "return_value": "0"}, {"func_args": {"tag": "'dd'"}, "return_value": "0"}, {"func_args": {"tag": "'dt'"}, "return_value": "0"}, {"func_args": {"tag": "'dt'"}, "return_value": "0"}, {"func_args": {"tag": "'dd'"}, "return_value": "0"}, {"func_args": {"tag": "'dd'"}, "return_value": "0"}, {"func_args": {"tag": "'dt'"}, "return_value": "0"}, {"func_args": {"tag": "'dt'"}, "return_value": "0"}, {"func_args": {"tag": "'dd'"}, "return_value": "0"}, {"func_args": {"tag": "'dd'"}, "return_value": "0"}, {"func_args": {"tag": "'dl'"}, "return_value": "0"}, {"func_args": {"tag": "'h4'"}, "return_value": "4"}, {"func_args": {"tag": "'h4'"}, "return_value": "4"}, {"func_args": {"tag": "'h4'"}, "return_value": "4"}, {"func_args": {"tag": "'dl'"}, "return_value": "0"}, {"func_args": {"tag": "'dt'"}, "return_value": "0"}, {"func_args": {"tag": "'dt'"}, "return_value": "0"}, {"func_args": {"tag": "'dd'"}, "return_value": "0"}, {"func_args": {"tag": "'dd'"}, "return_value": "0"}, {"func_args": {"tag": "'dt'"}, "return_value": "0"}, {"func_args": {"tag": "'dt'"}, "return_value": "0"}, {"func_args": {"tag": "'dd'"}, "return_value": "0"}, {"func_args": {"tag": "'dd'"}, "return_value": "0"}, {"func_args": {"tag": "'dd'"}, "return_value": "0"}, {"func_args": {"tag": "'dd'"}, "return_value": "0"}, {"func_args": {"tag": "'dd'"}, "return_value": "0"}, {"func_args": {"tag": "'dd'"}, "return_value": "0"}, {"func_args": {"tag": "'dt'"}, "return_value": "0"}, {"func_args": {"tag": "'dt'"}, "return_value": "0"}, {"func_args": {"tag": "'dd'"}, "return_value": "0"}, {"func_args": {"tag": "'dd'"}, "return_value": "0"}, {"func_args": {"tag": "'dt'"}, "return_value": "0"}, {"func_args": {"tag": "'dt'"}, "return_value": "0"}, {"func_args": {"tag": "'dd'"}, "return_value": "0"}, {"func_args": {"tag": "'dd'"}, "return_value": "0"}, {"func_args": {"tag": "'dl'"}, "return_value": "0"}, {"func_args": {"tag": "'ul'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'ul'"}, "return_value": "0"}, {"func_args": {"tag": "'ol'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'ol'"}, "return_value": "0"}, {"func_args": {"tag": "'ul'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'ul'"}, "return_value": "0"}, {"func_args": {"tag": "'a'"}, "return_value": "0"}, {"func_args": {"tag": "'a'"}, "return_value": "0"}, {"func_args": {"tag": "'br'"}, "return_value": "0"}, {"func_args": {"tag": "'a'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'a'"}, "return_value": "0"}, {"func_args": {"tag": "'h1'"}, "return_value": "1"}, {"func_args": {"tag": "'h1'"}, "return_value": "1"}, {"func_args": {"tag": "'h1'"}, "return_value": "1"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'a'"}, "return_value": "0"}, {"func_args": {"tag": "'img'"}, "return_value": "0"}, {"func_args": {"tag": "'a'"}, "return_value": "0"}, {"func_args": {"tag": "'a'"}, "return_value": "0"}, {"func_args": {"tag": "'img'"}, "return_value": "0"}, {"func_args": {"tag": "'a'"}, "return_value": "0"}, {"func_args": {"tag": "'a'"}, "return_value": "0"}, {"func_args": {"tag": "'img'"}, "return_value": "0"}, {"func_args": {"tag": "'a'"}, "return_value": "0"}, {"func_args": {"tag": "'a'"}, "return_value": "0"}, {"func_args": {"tag": "'img'"}, "return_value": "0"}, {"func_args": {"tag": "'a'"}, "return_value": "0"}, {"func_args": {"tag": "'a'"}, "return_value": "0"}, {"func_args": {"tag": "'img'"}, "return_value": "0"}, {"func_args": {"tag": "'a'"}, "return_value": "0"}, {"func_args": {"tag": "'html'"}, "return_value": "0"}, {"func_args": {"tag": "'body'"}, "return_value": "0"}, {"func_args": {"tag": "'ol'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'ol'"}, "return_value": "0"}, {"func_args": {"tag": "'body'"}, "return_value": "0"}, {"func_args": {"tag": "'html'"}, "return_value": "0"}, {"func_args": {"tag": "'strong'"}, "return_value": "0"}, {"func_args": {"tag": "'strong'"}, "return_value": "0"}, {"func_args": {"tag": "'strong'"}, "return_value": "0"}, {"func_args": {"tag": "'html'"}, "return_value": "0"}, {"func_args": {"tag": "'body'"}, "return_value": "0"}, {"func_args": {"tag": "'ul'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'pre'"}, "return_value": "0"}, {"func_args": {"tag": "'pre'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'ul'"}, "return_value": "0"}, {"func_args": {"tag": "'body'"}, "return_value": "0"}, {"func_args": {"tag": "'html'"}, "return_value": "0"}, {"func_args": {"tag": "'h1'"}, "return_value": "1"}, {"func_args": {"tag": "'h1'"}, "return_value": "1"}, {"func_args": {"tag": "'h1'"}, "return_value": "1"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'a'"}, "return_value": "0"}, {"func_args": {"tag": "'a'"}, "return_value": "0"}, {"func_args": {"tag": "'a'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'a'"}, "return_value": "0"}, {"func_args": {"tag": "'html'"}, "return_value": "0"}, {"func_args": {"tag": "'head'"}, "return_value": "0"}, {"func_args": {"tag": "'title'"}, "return_value": "0"}, {"func_args": {"tag": "'title'"}, "return_value": "0"}, {"func_args": {"tag": "'style'"}, "return_value": "0"}, {"func_args": {"tag": "'style'"}, "return_value": "0"}, {"func_args": {"tag": "'head'"}, "return_value": "0"}, {"func_args": {"tag": "'body'"}, "return_value": "0"}, {"func_args": {"tag": "'h1'"}, "return_value": "1"}, {"func_args": {"tag": "'h1'"}, "return_value": "1"}, {"func_args": {"tag": "'span'"}, "return_value": "0"}, {"func_args": {"tag": "'span'"}, "return_value": "0"}, {"func_args": {"tag": "'h1'"}, "return_value": "1"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'span'"}, "return_value": "0"}, {"func_args": {"tag": "'span'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'span'"}, "return_value": "0"}, {"func_args": {"tag": "'span'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'ul'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'span'"}, "return_value": "0"}, {"func_args": {"tag": "'span'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'span'"}, "return_value": "0"}, {"func_args": {"tag": "'i'"}, "return_value": "0"}, {"func_args": {"tag": "'b'"}, "return_value": "0"}, {"func_args": {"tag": "'b'"}, "return_value": "0"}, {"func_args": {"tag": "'i'"}, "return_value": "0"}, {"func_args": {"tag": "'span'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'ul'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'span'"}, "return_value": "0"}, {"func_args": {"tag": "'span'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'span'"}, "return_value": "0"}, {"func_args": {"tag": "'span'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'ul'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'span'"}, "return_value": "0"}, {"func_args": {"tag": "'span'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'ul'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'span'"}, "return_value": "0"}, {"func_args": {"tag": "'span'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'span'"}, "return_value": "0"}, {"func_args": {"tag": "'span'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'span'"}, "return_value": "0"}, {"func_args": {"tag": "'span'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'ol'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'span'"}, "return_value": "0"}, {"func_args": {"tag": "'span'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'span'"}, "return_value": "0"}, {"func_args": {"tag": "'span'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'ol'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'span'"}, "return_value": "0"}, {"func_args": {"tag": "'i'"}, "return_value": "0"}, {"func_args": {"tag": "'i'"}, "return_value": "0"}, {"func_args": {"tag": "'span'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'span'"}, "return_value": "0"}, {"func_args": {"tag": "'b'"}, "return_value": "0"}, {"func_args": {"tag": "'b'"}, "return_value": "0"}, {"func_args": {"tag": "'span'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'ol'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'span'"}, "return_value": "0"}, {"func_args": {"tag": "'span'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'ol'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'span'"}, "return_value": "0"}, {"func_args": {"tag": "'span'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'span'"}, "return_value": "0"}, {"func_args": {"tag": "'b'"}, "return_value": "0"}, {"func_args": {"tag": "'b'"}, "return_value": "0"}, {"func_args": {"tag": "'br'"}, "return_value": "0"}, {"func_args": {"tag": "'br'"}, "return_value": "0"}, {"func_args": {"tag": "'i'"}, "return_value": "0"}, {"func_args": {"tag": "'i'"}, "return_value": "0"}, {"func_args": {"tag": "'br'"}, "return_value": "0"}, {"func_args": {"tag": "'br'"}, "return_value": "0"}, {"func_args": {"tag": "'span'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'pre'"}, "return_value": "0"}, {"func_args": {"tag": "'pre'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'code'"}, "return_value": "0"}, {"func_args": {"tag": "'code'"}, "return_value": "0"}, {"func_args": {"tag": "'br'"}, "return_value": "0"}, {"func_args": {"tag": "'br'"}, "return_value": "0"}, {"func_args": {"tag": "'i'"}, "return_value": "0"}, {"func_args": {"tag": "'code'"}, "return_value": "0"}, {"func_args": {"tag": "'code'"}, "return_value": "0"}, {"func_args": {"tag": "'i'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'script'"}, "return_value": "0"}, {"func_args": {"tag": "'script'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'br'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'br'"}, "return_value": "0"}, {"func_args": {"tag": "'br'"}, "return_value": "0"}, {"func_args": {"tag": "'br'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'body'"}, "return_value": "0"}, {"func_args": {"tag": "'html'"}, "return_value": "0"}, {"func_args": {"tag": "'a'"}, "return_value": "0"}, {"func_args": {"tag": "'b'"}, "return_value": "0"}, {"func_args": {"tag": "'b'"}, "return_value": "0"}, {"func_args": {"tag": "'a'"}, "return_value": "0"}, {"func_args": {"tag": "'a'"}, "return_value": "0"}, {"func_args": {"tag": "'b'"}, "return_value": "0"}, {"func_args": {"tag": "'b'"}, "return_value": "0"}, {"func_args": {"tag": "'a'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'html'"}, "return_value": "0"}, {"func_args": {"tag": "'body'"}, "return_value": "0"}, {"func_args": {"tag": "'body'"}, "return_value": "0"}, {"func_args": {"tag": "'html'"}, "return_value": "0"}, {"func_args": {"tag": "'html'"}, "return_value": "0"}, {"func_args": {"tag": "'body'"}, "return_value": "0"}, {"func_args": {"tag": "'h1'"}, "return_value": "1"}, {"func_args": {"tag": "'h1'"}, "return_value": "1"}, {"func_args": {"tag": "'h1'"}, "return_value": "1"}, {"func_args": {"tag": "'h2'"}, "return_value": "2"}, {"func_args": {"tag": "'h2'"}, "return_value": "2"}, {"func_args": {"tag": "'h2'"}, "return_value": "2"}, {"func_args": {"tag": "'h3'"}, "return_value": "3"}, {"func_args": {"tag": "'h3'"}, "return_value": "3"}, {"func_args": {"tag": "'h3'"}, "return_value": "3"}, {"func_args": {"tag": "'h4'"}, "return_value": "4"}, {"func_args": {"tag": "'h4'"}, "return_value": "4"}, {"func_args": {"tag": "'h4'"}, "return_value": "4"}, {"func_args": {"tag": "'h5'"}, "return_value": "5"}, {"func_args": {"tag": "'h5'"}, "return_value": "5"}, {"func_args": {"tag": "'h5'"}, "return_value": "5"}, {"func_args": {"tag": "'h6'"}, "return_value": "6"}, {"func_args": {"tag": "'h6'"}, "return_value": "6"}, {"func_args": {"tag": "'h6'"}, "return_value": "6"}, {"func_args": {"tag": "'h7'"}, "return_value": "7"}, {"func_args": {"tag": "'h7'"}, "return_value": "7"}, {"func_args": {"tag": "'h7'"}, "return_value": "7"}, {"func_args": {"tag": "'h8'"}, "return_value": "8"}, {"func_args": {"tag": "'h8'"}, "return_value": "8"}, {"func_args": {"tag": "'h8'"}, "return_value": "8"}, {"func_args": {"tag": "'h9'"}, "return_value": "9"}, {"func_args": {"tag": "'h9'"}, "return_value": "9"}, {"func_args": {"tag": "'h9'"}, "return_value": "9"}, {"func_args": {"tag": "'h10'"}, "return_value": "0"}, {"func_args": {"tag": "'h10'"}, "return_value": "0"}, {"func_args": {"tag": "'h11'"}, "return_value": "0"}, {"func_args": {"tag": "'h11'"}, "return_value": "0"}, {"func_args": {"tag": "'h12'"}, "return_value": "0"}, {"func_args": {"tag": "'h12'"}, "return_value": "0"}, {"func_args": {"tag": "'h'"}, "return_value": "0"}, {"func_args": {"tag": "'h'"}, "return_value": "0"}, {"func_args": {"tag": "'body'"}, "return_value": "0"}, {"func_args": {"tag": "'html'"}, "return_value": "0"}, {"func_args": {"tag": "'head'"}, "return_value": "0"}, {"func_args": {"tag": "'head'"}, "return_value": "0"}, {"func_args": {"tag": "'body'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'img'"}, "return_value": "0"}, {"func_args": {"tag": "'img'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'a'"}, "return_value": "0"}, {"func_args": {"tag": "'a'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'body'"}, "return_value": "0"}, {"func_args": {"tag": "'html'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'b'"}, "return_value": "0"}, {"func_args": {"tag": "'b'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'a'"}, "return_value": "0"}, {"func_args": {"tag": "'a'"}, "return_value": "0"}, {"func_args": {"tag": "'strong'"}, "return_value": "0"}, {"func_args": {"tag": "'strong'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'ul'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'ul'"}, "return_value": "0"}, {"func_args": {"tag": "'i'"}, "return_value": "0"}, {"func_args": {"tag": "'i'"}, "return_value": "0"}, {"func_args": {"tag": "'html'"}, "return_value": "0"}, {"func_args": {"tag": "'head'"}, "return_value": "0"}, {"func_args": {"tag": "'title'"}, "return_value": "0"}, {"func_args": {"tag": "'title'"}, "return_value": "0"}, {"func_args": {"tag": "'head'"}, "return_value": "0"}, {"func_args": {"tag": "'body'"}, "return_value": "0"}, {"func_args": {"tag": "'pre'"}, "return_value": "0"}, {"func_args": {"tag": "'pre'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'code'"}, "return_value": "0"}, {"func_args": {"tag": "'code'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'body'"}, "return_value": "0"}, {"func_args": {"tag": "'html'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'pre'"}, "return_value": "0"}, {"func_args": {"tag": "'pre'"}, "return_value": "0"}, {"func_args": {"tag": "'code'"}, "return_value": "0"}, {"func_args": {"tag": "'code'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'em'"}, "return_value": "0"}, {"func_args": {"tag": "'em'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'em'"}, "return_value": "0"}, {"func_args": {"tag": "'em'"}, "return_value": "0"}, {"func_args": {"tag": "'em'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'em'"}, "return_value": "0"}, {"func_args": {"tag": "'em'"}, "return_value": "0"}, {"func_args": {"tag": "'em'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'b'"}, "return_value": "0"}, {"func_args": {"tag": "'b'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'b'"}, "return_value": "0"}, {"func_args": {"tag": "'b'"}, "return_value": "0"}, {"func_args": {"tag": "'b'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'b'"}, "return_value": "0"}, {"func_args": {"tag": "'b'"}, "return_value": "0"}, {"func_args": {"tag": "'b'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'strike'"}, "return_value": "0"}, {"func_args": {"tag": "'strike'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'strike'"}, "return_value": "0"}, {"func_args": {"tag": "'strike'"}, "return_value": "0"}, {"func_args": {"tag": "'strike'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'strike'"}, "return_value": "0"}, {"func_args": {"tag": "'strike'"}, "return_value": "0"}, {"func_args": {"tag": "'strike'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'em'"}, "return_value": "0"}, {"func_args": {"tag": "'em'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'em'"}, "return_value": "0"}, {"func_args": {"tag": "'em'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'em'"}, "return_value": "0"}, {"func_args": {"tag": "'em'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'em'"}, "return_value": "0"}, {"func_args": {"tag": "'em'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'em'"}, "return_value": "0"}, {"func_args": {"tag": "'em'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'b'"}, "return_value": "0"}, {"func_args": {"tag": "'b'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'strike'"}, "return_value": "0"}, {"func_args": {"tag": "'strike'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'b'"}, "return_value": "0"}, {"func_args": {"tag": "'b'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'strike'"}, "return_value": "0"}, {"func_args": {"tag": "'strike'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'em'"}, "return_value": "0"}, {"func_args": {"tag": "'em'"}, "return_value": "0"}, {"func_args": {"tag": "'em'"}, "return_value": "0"}, {"func_args": {"tag": "'em'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'h1'"}, "return_value": "1"}, {"func_args": {"tag": "'h1'"}, "return_value": "1"}, {"func_args": {"tag": "'h1'"}, "return_value": "1"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'ul'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'a'"}, "return_value": "0"}, {"func_args": {"tag": "'a'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'a'"}, "return_value": "0"}, {"func_args": {"tag": "'a'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'a'"}, "return_value": "0"}, {"func_args": {"tag": "'a'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'a'"}, "return_value": "0"}, {"func_args": {"tag": "'a'"}, "return_value": "0"}, {"func_args": {"tag": "'a'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'a'"}, "return_value": "0"}, {"func_args": {"tag": "'a'"}, "return_value": "0"}, {"func_args": {"tag": "'a'"}, "return_value": "0"}, {"func_args": {"tag": "'li'"}, "return_value": "0"}, {"func_args": {"tag": "'ul'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'img'"}, "return_value": "0"}, {"func_args": {"tag": "'br'"}, "return_value": "0"}, {"func_args": {"tag": "'img'"}, "return_value": "0"}, {"func_args": {"tag": "'br'"}, "return_value": "0"}, {"func_args": {"tag": "'img'"}, "return_value": "0"}, {"func_args": {"tag": "'br'"}, "return_value": "0"}, {"func_args": {"tag": "'img'"}, "return_value": "0"}, {"func_args": {"tag": "'img'"}, "return_value": "0"}, {"func_args": {"tag": "'b'"}, "return_value": "0"}, {"func_args": {"tag": "'b'"}, "return_value": "0"}, {"func_args": {"tag": "'i'"}, "return_value": "0"}, {"func_args": {"tag": "'i'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}, {"func_args": {"tag": "'abbr'"}, "return_value": "0"}, {"func_args": {"tag": "'abbr'"}, "return_value": "0"}, {"func_args": {"tag": "'p'"}, "return_value": "0"}], "text": "def hn(tag: str) -> int:\n    if tag[0] == \"h\" and len(tag) == 2:\n        n = tag[1]\n        if \"0\" < n <= \"9\":\n            return int(n)\n    return 0"}, "escape_md": {"line": 198, "args": [{"func_args": {"text": "''"}, "return_value": "''"}, {"func_args": {"text": "'http://www.foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo.com'"}, "return_value": "'http://www.foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo.com'"}, {"func_args": {"text": "''"}, "return_value": "''"}, {"func_args": {"text": "'http://example.com/img.png'"}, "return_value": "'http://example.com/img.png'"}, {"func_args": {"text": "''"}, "return_value": "''"}, {"func_args": {"text": "'http://example.com'"}, "return_value": "'http://example.com'"}, {"func_args": {"text": "'200'"}, "return_value": "'200'"}, {"func_args": {"text": "'http://lorempixel.com/200/200'"}, "return_value": "'http://lorempixel.com/200/200'"}, {"func_args": {"text": "'200'"}, "return_value": "'200'"}, {"func_args": {"text": "'http://lorempixel.com/200/200'"}, "return_value": "'http://lorempixel.com/200/200'"}, {"func_args": {"text": "''"}, "return_value": "''"}, {"func_args": {"text": "'test.html'"}, "return_value": "'test.html'"}, {"func_args": {"text": "''"}, "return_value": "''"}, {"func_args": {"text": "'http://thth'"}, "return_value": "'http://thth'"}, {"func_args": {"text": "''"}, "return_value": "''"}, {"func_args": {"text": "'http://some.link'"}, "return_value": "'http://some.link'"}, {"func_args": {"text": "''"}, "return_value": "''"}, {"func_args": {"text": "'http://some.link/filename.py'"}, "return_value": "'http://some.link/filename.py'"}, {"func_args": {"text": "''"}, "return_value": "''"}, {"func_args": {"text": "'http://some.link/magicsources.py'"}, "return_value": "'http://some.link/magicsources.py'"}, {"func_args": {"text": "'MyTitle'"}, "return_value": "'MyTitle'"}, {"func_args": {"text": "'http://example.com'"}, "return_value": "'http://example.com'"}, {"func_args": {"text": "''"}, "return_value": "''"}, {"func_args": {"text": "'http://example.com'"}, "return_value": "'http://example.com'"}, {"func_args": {"text": "'(banana)'"}, "return_value": "'\\\\(banana\\\\)'"}, {"func_args": {"text": "'http://placehold.it/350x150#(banana)'"}, "return_value": "'http://placehold.it/350x150#\\\\(banana\\\\)'"}, {"func_args": {"text": "''"}, "return_value": "''"}, {"func_args": {"text": "'http://some.link'"}, "return_value": "'http://some.link'"}, {"func_args": {"text": "'[banana]'"}, "return_value": "'\\\\[banana\\\\]'"}, {"func_args": {"text": "'http://placehold.it/350x150#[banana]'"}, "return_value": "'http://placehold.it/350x150#\\\\[banana\\\\]'"}, {"func_args": {"text": "''"}, "return_value": "''"}, {"func_args": {"text": "'http://some.link'"}, "return_value": "'http://some.link'"}, {"func_args": {"text": "'{banana}'"}, "return_value": "'{banana}'"}, {"func_args": {"text": "'http://placehold.it/350x150#{banana}'"}, "return_value": "'http://placehold.it/350x150#{banana}'"}, {"func_args": {"text": "''"}, "return_value": "''"}, {"func_args": {"text": "'http://some.link'"}, "return_value": "'http://some.link'"}, {"func_args": {"text": "'([{}])'"}, "return_value": "'\\\\(\\\\[{}\\\\]\\\\)'"}, {"func_args": {"text": "'http://placehold.it/350x150#([{}])'"}, "return_value": "'http://placehold.it/350x150#\\\\(\\\\[{}\\\\]\\\\)'"}, {"func_args": {"text": "''"}, "return_value": "''"}, {"func_args": {"text": "'http://some.link'"}, "return_value": "'http://some.link'"}, {"func_args": {"text": "''"}, "return_value": "''"}, {"func_args": {"text": "'http://placehold.it/350x150#([{}])'"}, "return_value": "'http://placehold.it/350x150#\\\\(\\\\[{}\\\\]\\\\)'"}, {"func_args": {"text": "''"}, "return_value": "''"}, {"func_args": {"text": "'http://some.link'"}, "return_value": "'http://some.link'"}, {"func_args": {"text": "''"}, "return_value": "''"}, {"func_args": {"text": "'http://some.link'"}, "return_value": "'http://some.link'"}, {"func_args": {"text": "''"}, "return_value": "''"}, {"func_args": {"text": "'http://some.link'"}, "return_value": "'http://some.link'"}, {"func_args": {"text": "''"}, "return_value": "''"}, {"func_args": {"text": "'link.htm'"}, "return_value": "'link.htm'"}, {"func_args": {"text": "''"}, "return_value": "''"}, {"func_args": {"text": "'/nothing/'"}, "return_value": "'/nothing/'"}, {"func_args": {"text": "'read2text header image'"}, "return_value": "'read2text header image'"}, {"func_args": {"text": "'http://brettterpstra.com/uploads/2012/01/read2textheader.jpg'"}, "return_value": "'http://brettterpstra.com/uploads/2012/01/read2textheader.jpg'"}, {"func_args": {"text": "''"}, "return_value": "''"}, {"func_args": {"text": "'http://brettterpstra.com/'"}, "return_value": "'http://brettterpstra.com/'"}, {"func_args": {"text": "''"}, "return_value": "''"}, {"func_args": {"text": "'http://en.wikipedia.org/wiki/Aleister_Crowley'"}, "return_value": "'http://en.wikipedia.org/wiki/Aleister_Crowley'"}, {"func_args": {"text": "''"}, "return_value": "''"}, {"func_args": {"text": "'http://msdn.microsoft.com/en-us/library/system.drawing.drawing2d(v=vs.110)'"}, "return_value": "'http://msdn.microsoft.com/en-us/library/system.drawing.drawing2d\\\\(v=vs.110\\\\)'"}, {"func_args": {"text": "''"}, "return_value": "''"}, {"func_args": {"text": "'https://www.google.ru/search?q=[brackets are cool]'"}, "return_value": "'https://www.google.ru/search?q=\\\\[brackets are cool\\\\]'"}, {"func_args": {"text": "''"}, "return_value": "''"}, {"func_args": {"text": "\"https://www.google.ru/search?q='[({})]'\""}, "return_value": "\"https://www.google.ru/search?q='\\\\[\\\\({}\\\\)\\\\]'\""}, {"func_args": {"text": "''"}, "return_value": "''"}, {"func_args": {"text": "'non-absolute_URIs'"}, "return_value": "'non-absolute_URIs'"}, {"func_args": {"text": "'(banana)'"}, "return_value": "'\\\\(banana\\\\)'"}, {"func_args": {"text": "'http://placehold.it/350x150#(banana)'"}, "return_value": "'http://placehold.it/350x150#\\\\(banana\\\\)'"}, {"func_args": {"text": "'[banana]'"}, "return_value": "'\\\\[banana\\\\]'"}, {"func_args": {"text": "'http://placehold.it/350x150#[banana]'"}, "return_value": "'http://placehold.it/350x150#\\\\[banana\\\\]'"}, {"func_args": {"text": "'{banana}'"}, "return_value": "'{banana}'"}, {"func_args": {"text": "'http://placehold.it/350x150#{banana}'"}, "return_value": "'http://placehold.it/350x150#{banana}'"}, {"func_args": {"text": "'([{}])'"}, "return_value": "'\\\\(\\\\[{}\\\\]\\\\)'"}, {"func_args": {"text": "'http://placehold.it/350x150#([{}])'"}, "return_value": "'http://placehold.it/350x150#\\\\(\\\\[{}\\\\]\\\\)'"}, {"func_args": {"text": "''"}, "return_value": "''"}, {"func_args": {"text": "'http://placehold.it/350x150#([{}])'"}, "return_value": "'http://placehold.it/350x150#\\\\(\\\\[{}\\\\]\\\\)'"}], "text": "def escape_md(text: str) -> str:\n    \"\"\"\n    Escapes markdown-sensitive characters within other markdown\n    constructs.\n    \"\"\"\n    return config.RE_MD_CHARS_MATCHER.sub(r\"\\\\\\1\", text)"}, "skipwrap": {"line": 161, "args": [{"func_args": {"para": "'asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd ![](http://www.foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo.com) asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd asd '", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'> \"The time has come\", the Walrus said, \"To talk of many things: Of shoes - and ships - and sealing wax - Of cabbages - and kings- And why the sea is boiling hot - And whether pigs have wings.\" '", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'[![](http://example.com/img.png)](http://example.com)'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'# This is a test document'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'With some text, `code`, **bolds** and _italics_. '", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'## This is second header'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'Displaynone text'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'Header 1 | Header 2 | Header 3  '", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'---|---|---  '", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'Content 1 | Content 2 | ![200](http://lorempixel.com/200/200) Image!  '", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'Content 1 | Content 2 | ![200](http://lorempixel.com/200/200) Image!'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'a'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'> b  '", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'> c'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'Press `[CTRL]+c` to copy. '", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'TLA xyz'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'  *[TLA]: Three Letter Acronym'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'[This is an A tag with an empty title property](test.html)'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'# NBSP handling test #1'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'In this test all NBSPs will be replaced with ordinary spaces (unicode_snob = False).'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'[allas: Country Manager](http://thth)'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'~~something~~ ~~something~~ ~~something~~'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'_Foo bar_'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'\"If this is a test,\" he said, \"then it should pass\". '", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'**hello** world ><'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'# CSS @import statement without semicolon handling test'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'# Processing hyperlinks'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'Additional hyperlink tests!'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'[**Bold Link**](http://some.link) [`filename.py`](http://some.link/filename.py) [The source code is called `magic.py`](http://some.link/magicsources.py)'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'  1. ordered'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'  2. ...'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'     * unordered'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'     * ...'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'  3. end'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'  * unordered'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'  * ...'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'    1. ordered'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'    2. ...'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'  * end'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'_**ib**_'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'._**ib**_'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'**_bi_**'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'.**_bi_**'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'_~~is~~_'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'._~~is~~_'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'_~~si~~_'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'._~~si~~_'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'**~~bs~~**'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'.**~~bs~~**'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'~~**sb**~~'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'.~~**sb**~~'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'~~**_sbi_**~~'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'.~~**_sbi_**~~'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'**_~~bis~~_**'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'.**_~~bis~~_**'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'* * *'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'Definition List'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'    A list of terms and their definitions/descriptions.'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'Ordered List'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'    A numbered list.'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'Unordered List'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'    An unnumbered list.'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'#### Example 2'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'Vocals'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'    Bruce Dickinson'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'Guitar'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'    Adrian Smith'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'    Dave Murray'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'    Janick Gers'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'Bass'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'    Steve Harris'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'Drums'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'    Nicko McBrain'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'  * some item'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'  * Some other item'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'  * some item'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'  1. Some other item'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'  2. some item'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'  3. some item'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'  * something else here'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'  * some item'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'[ first example](http://example.com \"MyTitle\")   '", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'[ second example](http://example.com)'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'# Processing images with links'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'This test checks images with associated links.'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'[![\\\\(banana\\\\)](http://placehold.it/350x150#\\\\(banana\\\\))](http://some.link) [![\\\\[banana\\\\]](http://placehold.it/350x150#\\\\[banana\\\\])](http://some.link) [![{banana}](http://placehold.it/350x150#{banana})](http://some.link) [![\\\\(\\\\[{}\\\\]\\\\)](http://placehold.it/350x150#\\\\(\\\\[{}\\\\]\\\\))](http://some.link) [![](http://placehold.it/350x150#\\\\(\\\\[{}\\\\]\\\\))](http://some.link)'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'  1. The ol has an invalid start '", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'  2. This should just be ignored '", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'**Foo bar**'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'  * Run this command: '", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'    '", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'        ls -l *.html'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'  * ?'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'  * Profit!'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'# Processing empty hyperlinks'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'This test checks whether empty hyperlinks still appear in the markdown result.'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'[](http://some.link) [](http://some.link)'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'#  test doc'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'first issue'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'  * bit'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'  * _**bold italic**_'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'    * orange'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'    * apple'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'  * final'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'text to separate lists'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'  1. now with numbers'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'  2. the prisoner'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'    1. not an _italic number_'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'    2. a **bold human** being'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'  3. end'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'**bold**  '", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'_italic_  '", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'    '", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'    '", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'    def func(x):'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'      if x < 1:'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "\"        return 'a'\"", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "\"      return 'b'\"", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'          '", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'Some `fixed width text` here  '", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'_`italic fixed width text`_'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "\"2012\\\\. Now that was a good year. So was 2011. That's all. \"", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'3.14159 is an approximation of pi. '", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'\\\\+ not + a list item '", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'+foo '", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'\\\\- foo - bar '", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'-foo '", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'not a header  '", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'\\\\-- '", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'not a hr  '", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'  '", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'\\\\---   '", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'\\\\- - - '", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'c:\\\\tmp, \\\\\\\\\\\\server\\\\path, \\\\\\\\_/, foo\\\\bar, #\\\\\\\\#, \\\\\\\\\\\\\\\\# '", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'[**Text**](link.htm) [**sample**](/nothing/)'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'Bacon ipsum dolor sit amet pork chop id pork belly ham hock, sed meatloaf eu exercitation flank quis veniam officia. Chuck dolor esse, occaecat est elit drumstick ground round tri-tip nisi. Eu fugiat drumstick leberkas magna. Turducken frankfurter nisi aute shank--'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'--irure ex esse id, ham commodo meatloaf pig pariatur ut cow. Officia salami in fatback voluptate boudin ullamco beef ribs shank. Duis spare ribs pork chop, ad leberkas reprehenderit id voluptate salami ham ut in ut cillum turducken. Nisi ribeye tail capicola dolore andouille. Short ribs id beef ribs, et nulla ground round do sunt dolore. Dolore nisi ullamco veniam sunt. Duis brisket drumstick, dolor fatback filet mignon meatloaf laboris tri-tip speck chuck ball tip voluptate ullamco laborum. '", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'\\\\--'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "\"'\"", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'# H1'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'## H2'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'### H3'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'#### H4'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'##### H5'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'###### H6'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'####### H7'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'######## H8'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'######### H9'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'H10 H11 H12 NO number'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'**text** and a very long long long long long long long long long long long long long long long long long long long long line '", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'  * item'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'text '", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'_Foo_'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'    a'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'    b'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'    c'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'Ensure that HTML that starts with a crowded `<pre>` is converted to reasonable Markdown.'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'Escaped HTML like <div> or & should NOT remain escaped on output'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'    '", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'    '", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'    ...even when that escaped HTML is in a <pre> tag'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'`...or a <code> tag`'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'_emphasis_'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'_emphasis:_ some text'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'_repeat:_ again'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'**bold**'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'**bold:** some text'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'**repeat:** again'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'~~strike~~'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'~~strike:~~ some text'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'~~strike:~~ again'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'separate _emphasis_ some more text'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'_emphasis_.'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'_emphasis_?'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'_emphasis_!'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'(_emphasis_)'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'[**bold**}'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'(~~strike~~]'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'* **bold**'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'~ ~~strike~~'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'_em1_ _em2_'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'# Markdown-sensible characters processing'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'This test checks special characters processing inside URLs: parenthesis and brackets should be escaped to keep markdown image and anchor syntax safe and sound.'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'  * [Some MSDN link using parenthesis](http://msdn.microsoft.com/en-us/library/system.drawing.drawing2d\\\\(v=vs.110\\\\))'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'  * [Google search result URL with unescaped brackets](https://www.google.ru/search?q=\\\\[brackets are cool\\\\])'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "\"  * [Yet another test for [brackets], {curly braces} and (parenthesis) processing inside the anchor](https://www.google.ru/search?q='\\\\[\\\\({}\\\\)\\\\]')\"", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'  * Use automatic links like <http://example.com/> when the URL is the label'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'  * Exempt [non-absolute_URIs](non-absolute_URIs) from automatic link detection'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}, {"func_args": {"para": "'And here are images with tricky attribute values:'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'![\\\\(banana\\\\)](http://placehold.it/350x150#\\\\(banana\\\\))  '", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'![\\\\[banana\\\\]](http://placehold.it/350x150#\\\\[banana\\\\])  '", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'![{banana}](http://placehold.it/350x150#{banana})  '", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'![\\\\(\\\\[{}\\\\]\\\\)](http://placehold.it/350x150#\\\\(\\\\[{}\\\\]\\\\)) ![](http://placehold.it/350x150#\\\\(\\\\[{}\\\\]\\\\))'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'**b**'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'this is a txt and this is a with text and some _italics_ too.'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'miow '", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'miow '", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'miow '", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'foo TLA bar'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "False"}, {"func_args": {"para": "'  *[TLA]: Three Letter Acronym'", "wrap_links": "True", "wrap_list_items": "False", "wrap_tables": "False"}, "return_value": "True"}], "text": "def skipwrap(\n    para: str, wrap_links: bool, wrap_list_items: bool, wrap_tables: bool\n) -> bool:\n    # If it appears to contain a link\n    # don't wrap\n    if not wrap_links and config.RE_LINK.search(para):\n        return True\n    # If the text begins with four spaces or one tab, it's a code block;\n    # don't wrap\n    if para[0:4] == \"    \" or para[0] == \"\\t\":\n        return True\n\n    # If the text begins with only two \"--\", possibly preceded by\n    # whitespace, that's an emdash; so wrap.\n    stripped = para.lstrip()\n    if stripped[0:2] == \"--\" and len(stripped) > 2 and stripped[2] != \"-\":\n        return False\n\n    # I'm not sure what this is for; I thought it was to detect lists,\n    # but there's a <br>-inside-<span> case in one of the tests that\n    # also depends upon it.\n    if stripped[0:1] in (\"-\", \"*\") and not stripped[0:2] == \"**\":\n        return not wrap_list_items\n\n    # If text contains a pipe character it is likely a table\n    if not wrap_tables and config.RE_TABLE.search(para):\n        return True\n\n    # If the text begins with a single -, *, or +, followed by a space,\n    # or an integer, followed by a ., followed by a space (in either\n    # case optionally proceeded by whitespace), it's a list; don't wrap.\n    return bool(\n        config.RE_ORDERED_LIST_MATCHER.match(stripped)\n        or config.RE_UNORDERED_LIST_MATCHER.match(stripped)\n    )"}, "dumb_css_parser": {"line": 30, "args": [{"func_args": {"data": "'\\n    @import url(https://themes.googleusercontent.com/fonts/css?kit=lhDjYqiy3mZ0x6ROQEUoUw&#39)\\n    '"}, "return_value": "{}"}, {"func_args": {"data": "'#example { color: red; }'"}, "return_value": "{'#example': {'color': 'red'}}"}], "text": "def dumb_css_parser(data: str) -> Dict[str, Dict[str, str]]:\n    \"\"\"\n    :type data: str\n\n    :returns: A hash of css selectors, each of which contains a hash of\n    css attributes.\n    :rtype: dict\n    \"\"\"\n    # remove @import sentences\n    data += \";\"\n    importIndex = data.find(\"@import\")\n    while importIndex != -1:\n        data = data[0:importIndex] + data[data.find(\";\", importIndex) + 1 :]\n        importIndex = data.find(\"@import\")\n\n    # parse the css. reverted from dictionary comprehension in order to\n    # support older pythons\n    pairs = [x.split(\"{\") for x in data.split(\"}\") if \"{\" in x.strip()]\n    try:\n        elements = {a.strip(): dumb_property_dict(b) for a, b in pairs}\n    except ValueError:\n        elements = {}  # not that important\n\n    return elements"}, "list_numbering_start": {"line": 143, "args": [{"func_args": {"attrs": "{}"}, "return_value": "0"}, {"func_args": {"attrs": "{}"}, "return_value": "0"}, {"func_args": {"attrs": "{}"}, "return_value": "0"}, {"func_args": {"attrs": "{}"}, "return_value": "0"}, {"func_args": {"attrs": "{}"}, "return_value": "0"}, {"func_args": {"attrs": "{}"}, "return_value": "0"}, {"func_args": {"attrs": "{'style': 'list-style-type:ordered;'}"}, "return_value": "0"}, {"func_args": {"attrs": "{'start': 'invalid'}"}, "return_value": "0"}, {"func_args": {"attrs": "{}"}, "return_value": "0"}, {"func_args": {"attrs": "{}"}, "return_value": "0"}, {"func_args": {"attrs": "{}"}, "return_value": "0"}, {"func_args": {"attrs": "{'start': '1'}"}, "return_value": "0"}, {"func_args": {"attrs": "{'start': '1'}"}, "return_value": "0"}, {"func_args": {"attrs": "{}"}, "return_value": "0"}, {"func_args": {"attrs": "{}"}, "return_value": "0"}], "text": "def list_numbering_start(attrs: Dict[str, Optional[str]]) -> int:\n    \"\"\"\n    Extract numbering from list element attributes\n\n    :type attrs: dict\n\n    :rtype: int or None\n    \"\"\"\n    if \"start\" in attrs:\n        assert attrs[\"start\"] is not None\n        try:\n            return int(attrs[\"start\"]) - 1\n        except ValueError:\n            pass\n\n    return 0"}, "dumb_property_dict": {"line": 20, "args": [{"func_args": {"style": "' color: red; '"}, "return_value": "{'color': 'red'}"}], "text": "def dumb_property_dict(style: str) -> Dict[str, str]:\n    \"\"\"\n    :returns: A hash of css attributes\n    \"\"\"\n    return {\n        x.strip().lower(): y.strip().lower()\n        for x, y in [z.split(\":\", 1) for z in style.split(\";\") if \":\" in z]\n    }"}, "actual_path": {"line": 139, "args": [{"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/config.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/config.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/elements.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/elements.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/typing.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/typing.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/utils.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/utils.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/cli.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/cli.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/cli.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/cli.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/utils.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/utils.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/__main__.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/__main__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/__main__.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/__main__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/config.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/config.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/elements.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/elements.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/typing.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/typing.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text'"}, "return_value": "'/usr/app/src/test_repos/html2text'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/utils.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/utils.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/utils.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/utils.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/config.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/config.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/config.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/config.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/elements.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/elements.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/elements.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/elements.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/cli.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/cli.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/cli.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/cli.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/typing.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/typing.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/typing.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/typing.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/__main__.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/__main__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/__main__.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/__main__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/__main__.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/__main__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/cli.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/cli.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/config.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/config.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/elements.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/elements.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/typing.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/typing.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/utils.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/utils.py'"}], "text": "def actual_path(path):\n        \"\"\"The actual path for non-Windows platforms.\"\"\"\n        return path"}, "abs_file": {"line": 144, "args": [{"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/config.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/config.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/elements.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/elements.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/typing.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/typing.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/utils.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/utils.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/cli.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/cli.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/cli.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/cli.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/utils.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/utils.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/__main__.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/__main__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/__main__.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/__main__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/config.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/config.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/elements.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/elements.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/typing.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/typing.py'"}, {"func_args": {"path": "'.'"}, "return_value": "'/usr/app/src/test_repos/html2text'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/utils.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/utils.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/utils.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/utils.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/config.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/config.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/config.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/config.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/elements.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/elements.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/elements.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/elements.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/cli.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/cli.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/cli.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/cli.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/typing.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/typing.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/typing.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/typing.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/__main__.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/__main__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/__main__.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/__main__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/__init__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/__main__.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/__main__.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/cli.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/cli.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/config.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/config.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/elements.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/elements.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/typing.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/typing.py'"}, {"func_args": {"path": "'/usr/app/src/test_repos/html2text/html2text/utils.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/utils.py'"}]}, "find_python_files": {"line": 403, "args": [{"func_args": {"dirname": "'/usr/app/src/test_repos/html2text/html2text'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/__init__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/html2text/html2text'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/cli.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/html2text/html2text'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/utils.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/html2text/html2text'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/__main__.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/html2text/html2text'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/config.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/html2text/html2text'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/elements.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/html2text/html2text'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/typing.py'"}, {"func_args": {"dirname": "'/usr/app/src/test_repos/html2text/html2text'"}, "return_value": "None"}], "text": "def find_python_files(dirname):\n    \"\"\"Yield all of the importable Python files in `dirname`, recursively.\n\n    To be importable, the files have to be in a directory with a __init__.py,\n    except for `dirname` itself, which isn't required to have one.  The\n    assumption is that `dirname` was specified directly, so the user knows\n    best, but sub-directories are checked for a __init__.py to be sure we only\n    find the importable files.\n\n    \"\"\"\n    for i, (dirpath, dirnames, filenames) in enumerate(os.walk(dirname)):\n        if i > 0 and '__init__.py' not in filenames:\n            # If a directory doesn't have __init__.py, then it isn't\n            # importable and neither are its files\n            del dirnames[:]\n            continue\n        for filename in filenames:\n            # We're only interested in files that look like reasonable Python\n            # files: Must end with .py or .pyw, and must not have certain funny\n            # characters that probably mean they are editor junk.\n            if re.match(r\"^[^.#~!$@%^&*()+=,]+\\.pyw?$\", filename):\n                yield os.path.join(dirpath, filename)"}, "canonical_filename": {"line": 53, "args": [{"func_args": {"filename": "'/usr/app/src/test_repos/html2text/html2text/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/__init__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/html2text/html2text/cli.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/cli.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/html2text/html2text/utils.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/utils.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/html2text/html2text/__main__.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/__main__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/html2text/html2text/config.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/config.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/html2text/html2text/elements.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/elements.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/html2text/html2text/typing.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/typing.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/html2text/html2text/utils.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/utils.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/html2text/html2text/config.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/config.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/html2text/html2text/elements.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/elements.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/html2text/html2text/cli.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/cli.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/html2text/html2text/typing.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/typing.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/html2text/html2text/__main__.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/__main__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/html2text/html2text/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/__init__.py'"}]}, "relative_filename": {"line": 39, "args": [{"func_args": {"filename": "'/usr/app/src/test_repos/html2text/html2text/utils.py'"}, "return_value": "'html2text/utils.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/html2text/html2text/config.py'"}, "return_value": "'html2text/config.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/html2text/html2text/elements.py'"}, "return_value": "'html2text/elements.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/html2text/html2text/cli.py'"}, "return_value": "'html2text/cli.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/html2text/html2text/typing.py'"}, "return_value": "'html2text/typing.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/html2text/html2text/__main__.py'"}, "return_value": "'html2text/__main__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/html2text/html2text/__init__.py'"}, "return_value": "'html2text/__init__.py'"}]}, "join_regex": {"line": 182, "args": [{"func_args": {"regexes": "['#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)']"}, "return_value": "'(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}, {"func_args": {"regexes": "('(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER))',)"}, "return_value": "'(?:(?:#\\\\s*(pragma|PRAGMA)[:\\\\s]?\\\\s*(no|NO)\\\\s*(cover|COVER)))'"}], "text": "def join_regex(regexes):\n    \"\"\"Combine a list of regexes into one that matches any of them.\"\"\"\n    return \"|\".join(f\"(?:{r})\" for r in regexes)"}, "tryint": {"line": 370, "args": [{"func_args": {"s": "'html'"}, "return_value": "'html'"}, {"func_args": {"s": "'2'"}, "return_value": "2"}, {"func_args": {"s": "'text/__init__.py     '"}, "return_value": "'text/__init__.py     '"}, {"func_args": {"s": "'633'"}, "return_value": "633"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'17'"}, "return_value": "17"}, {"func_args": {"s": "'    '"}, "return_value": "'    '"}, {"func_args": {"s": "'97'"}, "return_value": "97"}, {"func_args": {"s": "'%'"}, "return_value": "'%'"}, {"func_args": {"s": "'html'"}, "return_value": "'html'"}, {"func_args": {"s": "'2'"}, "return_value": "2"}, {"func_args": {"s": "'text/__main__.py       '"}, "return_value": "'text/__main__.py       '"}, {"func_args": {"s": "'2'"}, "return_value": "2"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'2'"}, "return_value": "2"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'%'"}, "return_value": "'%'"}, {"func_args": {"s": "'html'"}, "return_value": "'html'"}, {"func_args": {"s": "'2'"}, "return_value": "2"}, {"func_args": {"s": "'text/cli.py           '"}, "return_value": "'text/cli.py           '"}, {"func_args": {"s": "'99'"}, "return_value": "99"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'99'"}, "return_value": "99"}, {"func_args": {"s": "'     '"}, "return_value": "'     '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'%'"}, "return_value": "'%'"}, {"func_args": {"s": "'html'"}, "return_value": "'html'"}, {"func_args": {"s": "'2'"}, "return_value": "2"}, {"func_args": {"s": "'text/config.py        '"}, "return_value": "'text/config.py        '"}, {"func_args": {"s": "'44'"}, "return_value": "44"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'   '"}, "return_value": "'   '"}, {"func_args": {"s": "'100'"}, "return_value": "100"}, {"func_args": {"s": "'%'"}, "return_value": "'%'"}, {"func_args": {"s": "'html'"}, "return_value": "'html'"}, {"func_args": {"s": "'2'"}, "return_value": "2"}, {"func_args": {"s": "'text/elements.py      '"}, "return_value": "'text/elements.py      '"}, {"func_args": {"s": "'12'"}, "return_value": "12"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'0'"}, "return_value": "0"}, {"func_args": {"s": "'   '"}, "return_value": "'   '"}, {"func_args": {"s": "'100'"}, "return_value": "100"}, {"func_args": {"s": "'%'"}, "return_value": "'%'"}, {"func_args": {"s": "'html'"}, "return_value": "'html'"}, {"func_args": {"s": "'2'"}, "return_value": "2"}, {"func_args": {"s": "'text/typing.py         '"}, "return_value": "'text/typing.py         '"}, {"func_args": {"s": "'3'"}, "return_value": "3"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'1'"}, "return_value": "1"}, {"func_args": {"s": "'    '"}, "return_value": "'    '"}, {"func_args": {"s": "'67'"}, "return_value": "67"}, {"func_args": {"s": "'%'"}, "return_value": "'%'"}, {"func_args": {"s": "'html'"}, "return_value": "'html'"}, {"func_args": {"s": "'2'"}, "return_value": "2"}, {"func_args": {"s": "'text/utils.py        '"}, "return_value": "'text/utils.py        '"}, {"func_args": {"s": "'130'"}, "return_value": "130"}, {"func_args": {"s": "'      '"}, "return_value": "'      '"}, {"func_args": {"s": "'2'"}, "return_value": "2"}, {"func_args": {"s": "'    '"}, "return_value": "'    '"}, {"func_args": {"s": "'98'"}, "return_value": "98"}, {"func_args": {"s": "'%'"}, "return_value": "'%'"}], "text": "def tryint(s):\n        \"\"\"If `s` is a number, return an int, else `s` unchanged.\"\"\"\n        try:\n            return int(s)\n        except ValueError:\n            return s"}, "human_key": {"line": 366, "args": [{"func_args": {"s": "'html2text/__init__.py     633     17    97%'"}, "return_value": "['html', 2, 'text/__init__.py     ', 633, '     ', 17, '    ', 97, '%']"}, {"func_args": {"s": "'html2text/__main__.py       2      2     0%'"}, "return_value": "['html', 2, 'text/__main__.py       ', 2, '      ', 2, '     ', 0, '%']"}, {"func_args": {"s": "'html2text/cli.py           99     99     0%'"}, "return_value": "['html', 2, 'text/cli.py           ', 99, '     ', 99, '     ', 0, '%']"}, {"func_args": {"s": "'html2text/config.py        44      0   100%'"}, "return_value": "['html', 2, 'text/config.py        ', 44, '      ', 0, '   ', 100, '%']"}, {"func_args": {"s": "'html2text/elements.py      12      0   100%'"}, "return_value": "['html', 2, 'text/elements.py      ', 12, '      ', 0, '   ', 100, '%']"}, {"func_args": {"s": "'html2text/typing.py         3      1    67%'"}, "return_value": "['html', 2, 'text/typing.py         ', 3, '      ', 1, '    ', 67, '%']"}, {"func_args": {"s": "'html2text/utils.py        130      2    98%'"}, "return_value": "['html', 2, 'text/utils.py        ', 130, '      ', 2, '    ', 98, '%']"}], "text": "def human_key(s):\n    \"\"\"Turn a string into a list of string and number chunks.\n        \"z23a\" -> [\"z\", 23, \"a\"]\n    \"\"\"\n    def tryint(s):\n        \"\"\"If `s` is a number, return an int, else `s` unchanged.\"\"\"\n        try:\n            return int(s)\n        except ValueError:\n            return s\n\n    return [tryint(c) for c in re.split(r\"(\\d+)\", s)]"}, "<lambda>": {"line": 394, "args": [{"func_args": {"pair": "('html2text/__init__.py     633     17    97%', ('html2text/__init__.py', 633, 17, '97', 97.31437598736177))"}, "return_value": "(['html', 2, 'text/__init__.py     ', 633, '     ', 17, '    ', 97, '%'], ('html2text/__init__.py', 633, 17, '97', 97.31437598736177))"}, {"func_args": {"pair": "('html2text/__main__.py       2      2     0%', ('html2text/__main__.py', 2, 2, '0', 0.0))"}, "return_value": "(['html', 2, 'text/__main__.py       ', 2, '      ', 2, '     ', 0, '%'], ('html2text/__main__.py', 2, 2, '0', 0.0))"}, {"func_args": {"pair": "('html2text/cli.py           99     99     0%', ('html2text/cli.py', 99, 99, '0', 0.0))"}, "return_value": "(['html', 2, 'text/cli.py           ', 99, '     ', 99, '     ', 0, '%'], ('html2text/cli.py', 99, 99, '0', 0.0))"}, {"func_args": {"pair": "('html2text/config.py        44      0   100%', ('html2text/config.py', 44, 0, '100', 100.0))"}, "return_value": "(['html', 2, 'text/config.py        ', 44, '      ', 0, '   ', 100, '%'], ('html2text/config.py', 44, 0, '100', 100.0))"}, {"func_args": {"pair": "('html2text/elements.py      12      0   100%', ('html2text/elements.py', 12, 0, '100', 100.0))"}, "return_value": "(['html', 2, 'text/elements.py      ', 12, '      ', 0, '   ', 100, '%'], ('html2text/elements.py', 12, 0, '100', 100.0))"}, {"func_args": {"pair": "('html2text/typing.py         3      1    67%', ('html2text/typing.py', 3, 1, '67', 66.66666666666667))"}, "return_value": "(['html', 2, 'text/typing.py         ', 3, '      ', 1, '    ', 67, '%'], ('html2text/typing.py', 3, 1, '67', 66.66666666666667))"}, {"func_args": {"pair": "('html2text/utils.py        130      2    98%', ('html2text/utils.py', 130, 2, '98', 98.46153846153847))"}, "return_value": "(['html', 2, 'text/utils.py        ', 130, '      ', 2, '    ', 98, '%'], ('html2text/utils.py', 130, 2, '98', 98.46153846153847))"}]}, "human_sorted_items": {"line": 389, "args": [{"func_args": {"items": "[('html2text/__init__.py     633     17    97%', ('html2text/__init__.py', 633, 17, '97', 97.31437598736177)), ('html2text/__main__.py       2      2     0%', ('html2text/__main__.py', 2, 2, '0', 0.0)), ('html2text/cli.py           99     99     0%', ('html2text/cli.py', 99, 99, '0', 0.0)), ('html2text/config.py        44      0   100%', ('html2text/config.py', 44, 0, '100', 100.0)), ('html2text/elements.py      12      0   100%', ('html2text/elements.py', 12, 0, '100', 100.0)), ('html2text/typing.py         3      1    67%', ('html2text/typing.py', 3, 1, '67', 66.66666666666667)), ('html2text/utils.py        130      2    98%', ('html2text/utils.py', 130, 2, '98', 98.46153846153847))]", "reverse": "False"}, "return_value": "[('html2text/__init__.py     633     17    97%', ('html2text/__init__.py', 633, 17, '97', 97.31437598736177)), ('html2text/__main__.py       2      2     0%', ('html2text/__main__.py', 2, 2, '0', 0.0)), ('html2text/cli.py           99     99     0%', ('html2text/cli.py', 99, 99, '0', 0.0)), ('html2text/config.py        44      0   100%', ('html2text/config.py', 44, 0, '100', 100.0)), ('html2text/elements.py      12      0   100%', ('html2text/elements.py', 12, 0, '100', 100.0)), ('html2text/typing.py         3      1    67%', ('html2text/typing.py', 3, 1, '67', 66.66666666666667)), ('html2text/utils.py        130      2    98%', ('html2text/utils.py', 130, 2, '98', 98.46153846153847))]"}], "text": "def human_sorted_items(items, reverse=False):\n    \"\"\"Sort the (string, value) items the way humans expect.\n\n    Returns the sorted list of items.\n    \"\"\"\n    return sorted(items, key=lambda pair: (human_key(pair[0]), pair[1]), reverse=reverse)"}, "_to_blob": {"line": 21, "args": [{"func_args": {"b": "b\"\\xfa{\\x00@`\\x0f\\xe4\\xff\\xff\\xff\\xff\\r\\xfd\\xff\\xff\\xbb\\xfau\\xbf\\xde\\xd6Fm\\xc0\\xb6\\x80\\xfc\\xab;&\\xdf'\\xff\\xbf^\\xaf\\xab\\xf7\\x8e\\xef\\xc2o+\\x00x{\\xd7\\xf5\\xaek\\xbf\\x05\\xdf\\xba\\xf0\\xd6\\xbdn\\xdd\\xef\\xbb\\xbd_\\xbe\\xfe\\xff\\xee\\xfd\\xd8\\xff\\xf9\\xdd\\xb1\\xcf\\xbd\\x7f}\\xf7\\xf5\\x19\\xbc~_\\xfdZ~\\xfd\\xfd\\xbe\\xf7\\xb4j\\xc7\\xe6\\x8b_\\xbd\\xbb]\\xaf{o\\xfb\\xf7\\xb0\\xee\\xa6\\xffl\\xbf\\xbb7\\xed}\\n\\xb8\\x026~3\\xbf\\xbf\\xc1=/\""}, "return_value": "b\"\\xfa{\\x00@`\\x0f\\xe4\\xff\\xff\\xff\\xff\\r\\xfd\\xff\\xff\\xbb\\xfau\\xbf\\xde\\xd6Fm\\xc0\\xb6\\x80\\xfc\\xab;&\\xdf'\\xff\\xbf^\\xaf\\xab\\xf7\\x8e\\xef\\xc2o+\\x00x{\\xd7\\xf5\\xaek\\xbf\\x05\\xdf\\xba\\xf0\\xd6\\xbdn\\xdd\\xef\\xbb\\xbd_\\xbe\\xfe\\xff\\xee\\xfd\\xd8\\xff\\xf9\\xdd\\xb1\\xcf\\xbd\\x7f}\\xf7\\xf5\\x19\\xbc~_\\xfdZ~\\xfd\\xfd\\xbe\\xf7\\xb4j\\xc7\\xe6\\x8b_\\xbd\\xbb]\\xaf{o\\xfb\\xf7\\xb0\\xee\\xa6\\xffl\\xbf\\xbb7\\xed}\\n\\xb8\\x026~3\\xbf\\xbf\\xc1=/\""}, {"func_args": {"b": "b'\\x92$\\x91(I\\xfa?\\xd2\\x93\\x06\\r\\x1a\\xe8\\x98\\xff\\xff\\xff\\xff?\\n1'"}, "return_value": "b'\\x92$\\x91(I\\xfa?\\xd2\\x93\\x06\\r\\x1a\\xe8\\x98\\xff\\xff\\xff\\xff?\\n1'"}, {"func_args": {"b": "b'\\xb2g\\x07'"}, "return_value": "b'\\xb2g\\x07'"}, {"func_args": {"b": "b'\\x06'"}, "return_value": "b'\\x06'"}, {"func_args": {"b": "b\"\\xd6\\xe3'\\x8e\\x00\\x1fG>\\xc0\\xff\\x12\\xf0\\x12 \\x81\\xbf\\x04<\\x01\\xbf\\x9c\\x19\\x87\\x19\\x8e\\x90h\\x97\\xe0\\xf3\\x8d\\x7f\\xbd\\x89\\xef\\xdf\\x06\""}, "return_value": "b\"\\xd6\\xe3'\\x8e\\x00\\x1fG>\\xc0\\xff\\x12\\xf0\\x12 \\x81\\xbf\\x04<\\x01\\xbf\\x9c\\x19\\x87\\x19\\x8e\\x90h\\x97\\xe0\\xf3\\x8d\\x7f\\xbd\\x89\\xef\\xdf\\x06\""}], "text": "def _to_blob(b):\n    \"\"\"Convert a bytestring into a type SQLite will accept for a blob.\"\"\"\n    return b"}, "nums_to_numbits": {"line": 28, "args": [{"func_args": {"nums": "{1, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 30, 37, 38, 40, 41, 42, 43, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 127, 129, 131, 132, 133, 134, 135, 136, 138, 140, 141, 142, 144, 145, 146, 147, 148, 149, 151, 153, 154, 155, 156, 158, 159, 161, 162, 164, 166, 167, 169, 170, 174, 176, 178, 179, 181, 182, 190, 191, 193, 194, 196, 197, 199, 207, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 223, 224, 225, 227, 228, 229, 233, 234, 237, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 273, 274, 275, 276, 278, 280, 281, 282, 283, 285, 287, 288, 289, 291, 293, 295, 296, 297, 298, 300, 301, 302, 303, 305, 306, 307, 311, 312, 313, 314, 315, 317, 318, 319, 321, 326, 327, 328, 329, 330, 331, 333, 334, 336, 337, 339, 341, 355, 356, 357, 358, 360, 361, 363, 364, 365, 366, 368, 369, 370, 372, 374, 375, 376, 378, 380, 381, 382, 383, 385, 386, 387, 389, 391, 392, 393, 395, 397, 398, 400, 401, 402, 403, 404, 405, 407, 408, 410, 416, 417, 418, 419, 420, 422, 423, 425, 427, 428, 429, 431, 436, 437, 438, 439, 441, 442, 444, 446, 447, 448, 450, 451, 452, 453, 455, 457, 458, 459, 461, 462, 464, 466, 467, 468, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 483, 484, 485, 487, 488, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 502, 505, 506, 507, 508, 509, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 563, 564, 565, 566, 567, 568, 570, 571, 572, 574, 575, 576, 580, 581, 583, 584, 585, 586, 587, 590, 591, 592, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 610, 611, 612, 613, 614, 616, 617, 618, 620, 621, 622, 623, 624, 626, 628, 629, 630, 631, 632, 635, 636, 642, 643, 644, 645, 647, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 662, 664, 666, 667, 668, 669, 670, 671, 673, 675, 676, 678, 681, 682, 683, 684, 685, 686, 688, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 711, 712, 713, 714, 716, 717, 718, 719, 722, 724, 725, 727, 729, 731, 733, 734, 736, 737, 738, 742, 743, 745, 746, 749, 750, 751, 752, 753, 755, 759, 760, 761, 762, 763, 764, 766, 768, 770, 771, 772, 773, 775, 776, 777, 779, 780, 781, 783, 784, 786, 787, 788, 790, 792, 793, 794, 795, 797, 799, 800, 801, 803, 804, 805, 806, 808, 809, 810, 811, 813, 814, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 836, 837, 839, 841, 842, 843, 845, 846, 847, 849, 850, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 866, 867, 869, 870, 872, 873, 874, 875, 876, 877, 879, 880, 881, 883, 884, 885, 887, 888, 889, 890, 892, 893, 896, 898, 899, 901, 902, 903, 904, 906, 907, 908, 909, 910, 913, 915, 923, 924, 925, 927, 929, 937, 938, 940, 941, 945, 946, 947, 948, 949, 950, 952, 953, 956, 957, 960, 961, 962, 963, 964, 965, 967, 968, 969, 970, 971, 972, 973, 975, 976, 982, 983, 984, 986, 987, 988, 989, 992, 993, 994, 995, 997}"}, "return_value": "b\"\\xfa{\\x00@`\\x0f\\xe4\\xff\\xff\\xff\\xff\\r\\xfd\\xff\\xff\\xbb\\xfau\\xbf\\xde\\xd6Fm\\xc0\\xb6\\x80\\xfc\\xab;&\\xdf'\\xff\\xbf^\\xaf\\xab\\xf7\\x8e\\xef\\xc2o+\\x00x{\\xd7\\xf5\\xaek\\xbf\\x05\\xdf\\xba\\xf0\\xd6\\xbdn\\xdd\\xef\\xbb\\xbd_\\xbe\\xfe\\xff\\xee\\xfd\\xd8\\xff\\xf9\\xdd\\xb1\\xcf\\xbd\\x7f}\\xf7\\xf5\\x19\\xbc~_\\xfdZ~\\xfd\\xfd\\xbe\\xf7\\xb4j\\xc7\\xe6\\x8b_\\xbd\\xbb]\\xaf{o\\xfb\\xf7\\xb0\\xee\\xa6\\xffl\\xbf\\xbb7\\xed}\\n\\xb8\\x026~3\\xbf\\xbf\\xc1=/\""}, {"func_args": {"nums": "{1, 4, 7, 10, 13, 16, 20, 23, 27, 29, 32, 35, 38, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 57, 60, 62, 63, 64, 65, 68, 71, 73, 74, 80, 82, 83, 89, 91, 92, 99, 101, 102, 103, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 153, 155, 160, 164, 165}"}, "return_value": "b'\\x92$\\x91(I\\xfa?\\xd2\\x93\\x06\\r\\x1a\\xe8\\x98\\xff\\xff\\xff\\xff?\\n1'"}, {"func_args": {"nums": "{1, 4, 5, 7, 8, 9, 10, 13, 14, 16, 17, 18}"}, "return_value": "b'\\xb2g\\x07'"}, {"func_args": {"nums": "{1, 2}"}, "return_value": "b'\\x06'"}, {"func_args": {"nums": "{1, 2, 4, 6, 7, 8, 9, 13, 14, 15, 16, 17, 18, 21, 25, 26, 27, 31, 40, 41, 42, 43, 44, 48, 49, 50, 54, 57, 58, 59, 60, 61, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 84, 92, 93, 94, 95, 97, 100, 109, 112, 119, 120, 121, 122, 123, 124, 125, 127, 130, 138, 139, 140, 141, 144, 152, 153, 154, 155, 156, 157, 159, 162, 163, 164, 167, 168, 171, 172, 176, 177, 178, 183, 184, 187, 188, 193, 194, 195, 199, 204, 207, 211, 213, 214, 216, 217, 218, 220, 223, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 242, 243, 247, 248, 249, 250, 251, 252, 253, 254, 256, 258, 259, 260, 261, 263, 264, 267, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 289, 290}"}, "return_value": "b\"\\xd6\\xe3'\\x8e\\x00\\x1fG>\\xc0\\xff\\x12\\xf0\\x12 \\x81\\xbf\\x04<\\x01\\xbf\\x9c\\x19\\x87\\x19\\x8e\\x90h\\x97\\xe0\\xf3\\x8d\\x7f\\xbd\\x89\\xef\\xdf\\x06\""}]}, "numbits_to_nums": {"line": 49, "args": [{"func_args": {"numbits": "b\"\\xfa{\\x00@`\\x0f\\xe4\\xff\\xff\\xff\\xff\\r\\xfd\\xff\\xff\\xbb\\xfau\\xbf\\xde\\xd6Fm\\xc0\\xb6\\x80\\xfc\\xab;&\\xdf'\\xff\\xbf^\\xaf\\xab\\xf7\\x8e\\xef\\xc2o+\\x00x{\\xd7\\xf5\\xaek\\xbf\\x05\\xdf\\xba\\xf0\\xd6\\xbdn\\xdd\\xef\\xbb\\xbd_\\xbe\\xfe\\xff\\xee\\xfd\\xd8\\xff\\xf9\\xdd\\xb1\\xcf\\xbd\\x7f}\\xf7\\xf5\\x19\\xbc~_\\xfdZ~\\xfd\\xfd\\xbe\\xf7\\xb4j\\xc7\\xe6\\x8b_\\xbd\\xbb]\\xaf{o\\xfb\\xf7\\xb0\\xee\\xa6\\xffl\\xbf\\xbb7\\xed}\\n\\xb8\\x026~3\\xbf\\xbf\\xc1=/\""}, "return_value": "[1, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 30, 37, 38, 40, 41, 42, 43, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 127, 129, 131, 132, 133, 134, 135, 136, 138, 140, 141, 142, 144, 145, 146, 147, 148, 149, 151, 153, 154, 155, 156, 158, 159, 161, 162, 164, 166, 167, 169, 170, 174, 176, 178, 179, 181, 182, 190, 191, 193, 194, 196, 197, 199, 207, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 223, 224, 225, 227, 228, 229, 233, 234, 237, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 273, 274, 275, 276, 278, 280, 281, 282, 283, 285, 287, 288, 289, 291, 293, 295, 296, 297, 298, 300, 301, 302, 303, 305, 306, 307, 311, 312, 313, 314, 315, 317, 318, 319, 321, 326, 327, 328, 329, 330, 331, 333, 334, 336, 337, 339, 341, 355, 356, 357, 358, 360, 361, 363, 364, 365, 366, 368, 369, 370, 372, 374, 375, 376, 378, 380, 381, 382, 383, 385, 386, 387, 389, 391, 392, 393, 395, 397, 398, 400, 401, 402, 403, 404, 405, 407, 408, 410, 416, 417, 418, 419, 420, 422, 423, 425, 427, 428, 429, 431, 436, 437, 438, 439, 441, 442, 444, 446, 447, 448, 450, 451, 452, 453, 455, 457, 458, 459, 461, 462, 464, 466, 467, 468, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 483, 484, 485, 487, 488, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 502, 505, 506, 507, 508, 509, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 563, 564, 565, 566, 567, 568, 570, 571, 572, 574, 575, 576, 580, 581, 583, 584, 585, 586, 587, 590, 591, 592, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 608, 610, 611, 612, 613, 614, 616, 617, 618, 620, 621, 622, 623, 624, 626, 628, 629, 630, 631, 632, 635, 636, 642, 643, 644, 645, 647, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 662, 664, 666, 667, 668, 669, 670, 671, 673, 675, 676, 678, 681, 682, 683, 684, 685, 686, 688, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 711, 712, 713, 714, 716, 717, 718, 719, 722, 724, 725, 727, 729, 731, 733, 734, 736, 737, 738, 742, 743, 745, 746, 749, 750, 751, 752, 753, 755, 759, 760, 761, 762, 763, 764, 766, 768, 770, 771, 772, 773, 775, 776, 777, 779, 780, 781, 783, 784, 786, 787, 788, 790, 792, 793, 794, 795, 797, 799, 800, 801, 803, 804, 805, 806, 808, 809, 810, 811, 813, 814, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 836, 837, 839, 841, 842, 843, 845, 846, 847, 849, 850, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 866, 867, 869, 870, 872, 873, 874, 875, 876, 877, 879, 880, 881, 883, 884, 885, 887, 888, 889, 890, 892, 893, 896, 898, 899, 901, 902, 903, 904, 906, 907, 908, 909, 910, 913, 915, 923, 924, 925, 927, 929, 937, 938, 940, 941, 945, 946, 947, 948, 949, 950, 952, 953, 956, 957, 960, 961, 962, 963, 964, 965, 967, 968, 969, 970, 971, 972, 973, 975, 976, 982, 983, 984, 986, 987, 988, 989, 992, 993, 994, 995, 997]"}, {"func_args": {"numbits": "b'\\x92$\\x91(I\\xfa?\\xd2\\x93\\x06\\r\\x1a\\xe8\\x98\\xff\\xff\\xff\\xff?\\n1'"}, "return_value": "[1, 4, 7, 10, 13, 16, 20, 23, 27, 29, 32, 35, 38, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 57, 60, 62, 63, 64, 65, 68, 71, 73, 74, 80, 82, 83, 89, 91, 92, 99, 101, 102, 103, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 153, 155, 160, 164, 165]"}, {"func_args": {"numbits": "b'\\xb2g\\x07'"}, "return_value": "[1, 4, 5, 7, 8, 9, 10, 13, 14, 16, 17, 18]"}, {"func_args": {"numbits": "b'\\x06'"}, "return_value": "[1, 2]"}, {"func_args": {"numbits": "b\"\\xd6\\xe3'\\x8e\\x00\\x1fG>\\xc0\\xff\\x12\\xf0\\x12 \\x81\\xbf\\x04<\\x01\\xbf\\x9c\\x19\\x87\\x19\\x8e\\x90h\\x97\\xe0\\xf3\\x8d\\x7f\\xbd\\x89\\xef\\xdf\\x06\""}, "return_value": "[1, 2, 4, 6, 7, 8, 9, 13, 14, 15, 16, 17, 18, 21, 25, 26, 27, 31, 40, 41, 42, 43, 44, 48, 49, 50, 54, 57, 58, 59, 60, 61, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 84, 92, 93, 94, 95, 97, 100, 109, 112, 119, 120, 121, 122, 123, 124, 125, 127, 130, 138, 139, 140, 141, 144, 152, 153, 154, 155, 156, 157, 159, 162, 163, 164, 167, 168, 171, 172, 176, 177, 178, 183, 184, 187, 188, 193, 194, 195, 199, 204, 207, 211, 213, 214, 216, 217, 218, 220, 223, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 242, 243, 247, 248, 249, 250, 251, 252, 253, 254, 256, 258, 259, 260, 261, 263, 264, 267, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 289, 290]"}]}, "combinable_files": {"line": 55, "args": [{"func_args": {"data_file": "'/usr/app/src/test_repos/html2text/.coverage'", "data_paths": "None"}, "return_value": "['/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3459.545165', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3438.912182', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3482.833533', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3473.932317', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3457.769837', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3483.303399', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3484.795663', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3458.007536', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3472.023851', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3464.401315', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3444.101906', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3469.804316', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3444.712863', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3469.078013', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3488.335126', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3471.997225', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3456.945659', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3471.940017', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3462.217571', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3459.984109', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3476.709889', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3490.743726', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3467.030314', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3460.897418', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3474.215054', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3437.387835', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3494.661024', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3487.747453', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3442.252202', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3492.602524', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3475.093639', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3477.875006', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3429.677304', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3454.691346', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3455.138075', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3491.453803', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3457.872049', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3493.216681', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3443.048843', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3436.196752', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3468.060116', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3495.333659', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3478.409381', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3486.286034', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3432.635863', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3470.548086', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3473.312128', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3453.918713', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3452.005863', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3496.459323', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3427.111548', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3461.892688', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3446.585659', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3431.999021', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3439.656645', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3496.847858', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3490.388298', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3466.156969', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3488.778211', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3447.553465', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3465.474687', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3452.776786', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3472.298670', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3466.868528', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3494.513814', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3450.842932', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3493.448790', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3447.114980', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3433.682773', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3435.857638', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3477.567028', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3429.383972', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3464.672393', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3485.492740', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3449.276775', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3453.478409', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3455.237460', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3454.280524', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3430.122559', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3435.556263', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3484.029765', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3463.982372', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3441.814736', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3468.136976', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3456.019702', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3446.687615', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3487.604016', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3440.116697', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3476.041511', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3445.499487', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3443.039247', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3450.644000', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3480.344713', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3492.523589', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3481.495387', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3445.357843', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3483.454789', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3491.435286', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3448.589106', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3451.360729', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3439.934480', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3482.655631', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3442.457514', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3434.421363', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3433.751069', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3432.659871', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3458.786870', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3451.984441', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3479.775143', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3478.828253', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3430.641046', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3461.000801', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3465.189767', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3448.892753', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3434.303090', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3495.913828', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3441.381573', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3436.890969', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3470.220697', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3479.464072', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3485.967447', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3474.819130', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3481.181994', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3480.385965', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3463.560488', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3486.069468', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3431.401407', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3467.922743', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3489.486057', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3462.105147', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3438.208577', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3449.705444', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3460.523098', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3437.024449', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3475.788649', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3489.018876', '/usr/app/src/test_repos/html2text/.coverage.cae2a1e14906.3440.512535']"}], "text": "def combinable_files(data_file, data_paths=None):\n    \"\"\"Make a list of data files to be combined.\n\n    `data_file` is a path to a data file.  `data_paths` is a list of files or\n    directories of files.\n\n    Returns a list of absolute file paths.\n    \"\"\"\n    data_dir, local = os.path.split(os.path.abspath(data_file))\n\n    data_paths = data_paths or [data_dir]\n    files_to_combine = []\n    for p in data_paths:\n        if os.path.isfile(p):\n            files_to_combine.append(os.path.abspath(p))\n        elif os.path.isdir(p):\n            pattern = os.path.join(os.path.abspath(p), f\"{local}.*\")\n            files_to_combine.extend(glob.glob(pattern))\n        else:\n            raise NoDataError(f\"Couldn't combine from non-existent path '{p}'\")\n    return files_to_combine"}, "source_for_file": {"line": 97, "args": [{"func_args": {"filename": "'/usr/app/src/test_repos/html2text/html2text/utils.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/utils.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/html2text/html2text/config.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/config.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/html2text/html2text/elements.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/elements.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/html2text/html2text/cli.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/cli.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/html2text/html2text/typing.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/typing.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/html2text/html2text/__main__.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/__main__.py'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/html2text/html2text/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/__init__.py'"}], "text": "def source_for_file(filename):\n    \"\"\"Return the source filename for `filename`.\n\n    Given a file name being traced, return the best guess as to the source\n    file to attribute it to.\n\n    \"\"\"\n    if filename.endswith(\".py\"):\n        # .py files are themselves source files.\n        return filename\n\n    elif filename.endswith((\".pyc\", \".pyo\")):\n        # Bytecode files probably have source files near them.\n        py_filename = filename[:-1]\n        if os.path.exists(py_filename):\n            # Found a .py file, use that.\n            return py_filename\n        if env.WINDOWS:\n            # On Windows, it could be a .pyw file.\n            pyw_filename = py_filename + \"w\"\n            if os.path.exists(pyw_filename):\n                return pyw_filename\n        # Didn't find source, but it's probably the .py file we want.\n        return py_filename\n\n    elif filename.endswith(\"$py.class\"):\n        # Jython is easy to guess.\n        return filename[:-9] + \".py\"\n\n    # No idea, just use the file name as-is.\n    return filename"}, "source_for_morf": {"line": 130, "args": [{"func_args": {"morf": "'/usr/app/src/test_repos/html2text/html2text/utils.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/utils.py'"}, {"func_args": {"morf": "'/usr/app/src/test_repos/html2text/html2text/config.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/config.py'"}, {"func_args": {"morf": "'/usr/app/src/test_repos/html2text/html2text/elements.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/elements.py'"}, {"func_args": {"morf": "'/usr/app/src/test_repos/html2text/html2text/cli.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/cli.py'"}, {"func_args": {"morf": "'/usr/app/src/test_repos/html2text/html2text/typing.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/typing.py'"}, {"func_args": {"morf": "'/usr/app/src/test_repos/html2text/html2text/__main__.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/__main__.py'"}, {"func_args": {"morf": "'/usr/app/src/test_repos/html2text/html2text/__init__.py'"}, "return_value": "'/usr/app/src/test_repos/html2text/html2text/__init__.py'"}], "text": "def source_for_morf(morf):\n    \"\"\"Get the source filename for the module-or-file `morf`.\"\"\"\n    if hasattr(morf, '__file__') and morf.__file__:\n        filename = morf.__file__\n    elif isinstance(morf, types.ModuleType):\n        # A module should have had .__file__, otherwise we can't use it.\n        # This could be a PEP-420 namespace package.\n        raise CoverageException(f\"Module {morf} has no file\")\n    else:\n        filename = morf\n\n    filename = source_for_file(filename)\n    return filename"}, "read_python_source": {"line": 20, "args": [{"func_args": {"filename": "'/usr/app/src/test_repos/html2text/html2text/__init__.py'"}, "return_value": "b'\"\"\"html2text: Turn HTML into equivalent Markdown-structured text.\"\"\"\\n\\nimport html.entities\\nimport html.parser\\nimport re\\nimport string\\nimport urllib.parse as urlparse\\nfrom textwrap import wrap\\nfrom typing import Dict, List, Optional, Tuple, Union\\n\\nfrom . import config\\nfrom .elements import AnchorElement, ListElement\\nfrom .typing import OutCallback\\nfrom .utils import (\\n    dumb_css_parser,\\n    element_style,\\n    escape_md,\\n    escape_md_section,\\n    google_fixed_width_font,\\n    google_has_height,\\n    google_list_style,\\n    google_text_emphasis,\\n    hn,\\n    list_numbering_start,\\n    pad_tables_in_text,\\n    skipwrap,\\n    unifiable_n,\\n)\\n\\n__version__ = (2020, 1, 16)\\n\\n\\n# TODO:\\n# Support decoded entities with UNIFIABLE.\\n\\n\\nclass HTML2Text(html.parser.HTMLParser):\\n    def __init__(\\n        self,\\n        out: Optional[OutCallback] = None,\\n        baseurl: str = \"\",\\n        bodywidth: int = config.BODY_WIDTH,\\n    ) -> None:\\n        \"\"\"\\n        Input parameters:\\n            out: possible custom replacement for self.outtextf (which\\n                 appends lines of text).\\n            baseurl: base URL of the document we process\\n        \"\"\"\\n        super().__init__(convert_charrefs=False)\\n\\n        # Config options\\n        self.split_next_td = False\\n        self.td_count = 0\\n        self.table_start = False\\n        self.unicode_snob = config.UNICODE_SNOB  # covered in cli\\n        self.escape_snob = config.ESCAPE_SNOB  # covered in cli\\n        self.links_each_paragraph = config.LINKS_EACH_PARAGRAPH\\n        self.body_width = bodywidth  # covered in cli\\n        self.skip_internal_links = config.SKIP_INTERNAL_LINKS  # covered in cli\\n        self.inline_links = config.INLINE_LINKS  # covered in cli\\n        self.protect_links = config.PROTECT_LINKS  # covered in cli\\n        self.google_list_indent = config.GOOGLE_LIST_INDENT  # covered in cli\\n        self.ignore_links = config.IGNORE_ANCHORS  # covered in cli\\n        self.ignore_mailto_links = config.IGNORE_MAILTO_LINKS  # covered in cli\\n        self.ignore_images = config.IGNORE_IMAGES  # covered in cli\\n        self.images_as_html = config.IMAGES_AS_HTML  # covered in cli\\n        self.images_to_alt = config.IMAGES_TO_ALT  # covered in cli\\n        self.images_with_size = config.IMAGES_WITH_SIZE  # covered in cli\\n        self.ignore_emphasis = config.IGNORE_EMPHASIS  # covered in cli\\n        self.bypass_tables = config.BYPASS_TABLES  # covered in cli\\n        self.ignore_tables = config.IGNORE_TABLES  # covered in cli\\n        self.google_doc = False  # covered in cli\\n        self.ul_item_mark = \"*\"  # covered in cli\\n        self.emphasis_mark = \"_\"  # covered in cli\\n        self.strong_mark = \"**\"\\n        self.single_line_break = config.SINGLE_LINE_BREAK  # covered in cli\\n        self.use_automatic_links = config.USE_AUTOMATIC_LINKS  # covered in cli\\n        self.hide_strikethrough = False  # covered in cli\\n        self.mark_code = config.MARK_CODE\\n        self.wrap_list_items = config.WRAP_LIST_ITEMS  # covered in cli\\n        self.wrap_links = config.WRAP_LINKS  # covered in cli\\n        self.wrap_tables = config.WRAP_TABLES\\n        self.pad_tables = config.PAD_TABLES  # covered in cli\\n        self.default_image_alt = config.DEFAULT_IMAGE_ALT  # covered in cli\\n        self.tag_callback = None\\n        self.open_quote = config.OPEN_QUOTE  # covered in cli\\n        self.close_quote = config.CLOSE_QUOTE  # covered in cli\\n\\n        if out is None:\\n            self.out = self.outtextf\\n        else:\\n            self.out = out\\n\\n        # empty list to store output characters before they are \"joined\"\\n        self.outtextlist = []  # type: List[str]\\n\\n        self.quiet = 0\\n        self.p_p = 0  # number of newline character to print before next output\\n        self.outcount = 0\\n        self.start = True\\n        self.space = False\\n        self.a = []  # type: List[AnchorElement]\\n        self.astack = []  # type: List[Optional[Dict[str, Optional[str]]]]\\n        self.maybe_automatic_link = None  # type: Optional[str]\\n        self.empty_link = False\\n        self.absolute_url_matcher = re.compile(r\"^[a-zA-Z+]+://\")\\n        self.acount = 0\\n        self.list = []  # type: List[ListElement]\\n        self.blockquote = 0\\n        self.pre = False\\n        self.startpre = False\\n        self.code = False\\n        self.quote = False\\n        self.br_toggle = \"\"\\n        self.lastWasNL = False\\n        self.lastWasList = False\\n        self.style = 0\\n        self.style_def = {}  # type: Dict[str, Dict[str, str]]\\n        self.tag_stack = (\\n            []\\n        )  # type: List[Tuple[str, Dict[str, Optional[str]], Dict[str, str]]]\\n        self.emphasis = 0\\n        self.drop_white_space = 0\\n        self.inheader = False\\n        # Current abbreviation definition\\n        self.abbr_title = None  # type: Optional[str]\\n        # Last inner HTML (for abbr being defined)\\n        self.abbr_data = None  # type: Optional[str]\\n        # Stack of abbreviations to write later\\n        self.abbr_list = {}  # type: Dict[str, str]\\n        self.baseurl = baseurl\\n        self.stressed = False\\n        self.preceding_stressed = False\\n        self.preceding_data = \"\"\\n        self.current_tag = \"\"\\n\\n        config.UNIFIABLE[\"nbsp\"] = \"&nbsp_place_holder;\"\\n\\n    def feed(self, data: str) -> None:\\n        data = data.replace(\"</\\' + \\'script>\", \"</ignore>\")\\n        super().feed(data)\\n\\n    def handle(self, data: str) -> str:\\n        self.feed(data)\\n        self.feed(\"\")\\n        markdown = self.optwrap(self.finish())\\n        if self.pad_tables:\\n            return pad_tables_in_text(markdown)\\n        else:\\n            return markdown\\n\\n    def outtextf(self, s: str) -> None:\\n        self.outtextlist.append(s)\\n        if s:\\n            self.lastWasNL = s[-1] == \"\\\\n\"\\n\\n    def finish(self) -> str:\\n        self.close()\\n\\n        self.pbr()\\n        self.o(\"\", force=\"end\")\\n\\n        outtext = \"\".join(self.outtextlist)\\n\\n        if self.unicode_snob:\\n            nbsp = html.entities.html5[\"nbsp;\"]\\n        else:\\n            nbsp = \" \"\\n        outtext = outtext.replace(\"&nbsp_place_holder;\", nbsp)\\n\\n        # Clear self.outtextlist to avoid memory leak of its content to\\n        # the next handling.\\n        self.outtextlist = []\\n\\n        return outtext\\n\\n    def handle_charref(self, c: str) -> None:\\n        self.handle_data(self.charref(c), True)\\n\\n    def handle_entityref(self, c: str) -> None:\\n        ref = self.entityref(c)\\n\\n        # ref may be an empty string (e.g. for &lrm;/&rlm; markers that should\\n        # not contribute to the final output).\\n        # self.handle_data cannot handle a zero-length string right after a\\n        # stressed tag or mid-text within a stressed tag (text get split and\\n        # self.stressed/self.preceding_stressed gets switched after the first\\n        # part of that text).\\n        if ref:\\n            self.handle_data(ref, True)\\n\\n    def handle_starttag(self, tag: str, attrs: List[Tuple[str, Optional[str]]]) -> None:\\n        self.handle_tag(tag, dict(attrs), start=True)\\n\\n    def handle_endtag(self, tag: str) -> None:\\n        self.handle_tag(tag, {}, start=False)\\n\\n    def previousIndex(self, attrs: Dict[str, Optional[str]]) -> Optional[int]:\\n        \"\"\"\\n        :type attrs: dict\\n\\n        :returns: The index of certain set of attributes (of a link) in the\\n        self.a list. If the set of attributes is not found, returns None\\n        :rtype: int\\n        \"\"\"\\n        if \"href\" not in attrs:\\n            return None\\n\\n        match = False\\n        for i, a in enumerate(self.a):\\n            if \"href\" in a.attrs and a.attrs[\"href\"] == attrs[\"href\"]:\\n                if \"title\" in a.attrs or \"title\" in attrs:\\n                    if (\\n                        \"title\" in a.attrs\\n                        and \"title\" in attrs\\n                        and a.attrs[\"title\"] == attrs[\"title\"]\\n                    ):\\n                        match = True\\n                else:\\n                    match = True\\n\\n            if match:\\n                return i\\n        return None\\n\\n    def handle_emphasis(\\n        self, start: bool, tag_style: Dict[str, str], parent_style: Dict[str, str]\\n    ) -> None:\\n        \"\"\"\\n        Handles various text emphases\\n        \"\"\"\\n        tag_emphasis = google_text_emphasis(tag_style)\\n        parent_emphasis = google_text_emphasis(parent_style)\\n\\n        # handle Google\\'s text emphasis\\n        strikethrough = \"line-through\" in tag_emphasis and self.hide_strikethrough\\n\\n        # google and others may mark a font\\'s weight as `bold` or `700`\\n        bold = False\\n        for bold_marker in config.BOLD_TEXT_STYLE_VALUES:\\n            bold = bold_marker in tag_emphasis and bold_marker not in parent_emphasis\\n            if bold:\\n                break\\n\\n        italic = \"italic\" in tag_emphasis and \"italic\" not in parent_emphasis\\n        fixed = (\\n            google_fixed_width_font(tag_style)\\n            and not google_fixed_width_font(parent_style)\\n            and not self.pre\\n        )\\n\\n        if start:\\n            # crossed-out text must be handled before other attributes\\n            # in order not to output qualifiers unnecessarily\\n            if bold or italic or fixed:\\n                self.emphasis += 1\\n            if strikethrough:\\n                self.quiet += 1\\n            if italic:\\n                self.o(self.emphasis_mark)\\n                self.drop_white_space += 1\\n            if bold:\\n                self.o(self.strong_mark)\\n                self.drop_white_space += 1\\n            if fixed:\\n                self.o(\"`\")\\n                self.drop_white_space += 1\\n                self.code = True\\n        else:\\n            if bold or italic or fixed:\\n                # there must not be whitespace before closing emphasis mark\\n                self.emphasis -= 1\\n                self.space = False\\n            if fixed:\\n                if self.drop_white_space:\\n                    # empty emphasis, drop it\\n                    self.drop_white_space -= 1\\n                else:\\n                    self.o(\"`\")\\n                self.code = False\\n            if bold:\\n                if self.drop_white_space:\\n                    # empty emphasis, drop it\\n                    self.drop_white_space -= 1\\n                else:\\n                    self.o(self.strong_mark)\\n            if italic:\\n                if self.drop_white_space:\\n                    # empty emphasis, drop it\\n                    self.drop_white_space -= 1\\n                else:\\n                    self.o(self.emphasis_mark)\\n            # space is only allowed after *all* emphasis marks\\n            if (bold or italic) and not self.emphasis:\\n                self.o(\" \")\\n            if strikethrough:\\n                self.quiet -= 1\\n\\n    def handle_tag(\\n        self, tag: str, attrs: Dict[str, Optional[str]], start: bool\\n    ) -> None:\\n        self.current_tag = tag\\n\\n        if self.tag_callback is not None:\\n            if self.tag_callback(self, tag, attrs, start) is True:\\n                return\\n\\n        # first thing inside the anchor tag is another tag\\n        # that produces some output\\n        if (\\n            start\\n            and self.maybe_automatic_link is not None\\n            and tag not in [\"p\", \"div\", \"style\", \"dl\", \"dt\"]\\n            and (tag != \"img\" or self.ignore_images)\\n        ):\\n            self.o(\"[\")\\n            self.maybe_automatic_link = None\\n            self.empty_link = False\\n\\n        if self.google_doc:\\n            # the attrs parameter is empty for a closing tag. in addition, we\\n            # need the attributes of the parent nodes in order to get a\\n            # complete style description for the current element. we assume\\n            # that google docs export well formed html.\\n            parent_style = {}  # type: Dict[str, str]\\n            if start:\\n                if self.tag_stack:\\n                    parent_style = self.tag_stack[-1][2]\\n                tag_style = element_style(attrs, self.style_def, parent_style)\\n                self.tag_stack.append((tag, attrs, tag_style))\\n            else:\\n                dummy, attrs, tag_style = (\\n                    self.tag_stack.pop() if self.tag_stack else (None, {}, {})\\n                )\\n                if self.tag_stack:\\n                    parent_style = self.tag_stack[-1][2]\\n\\n        if hn(tag):\\n            # check if nh is inside of an \\'a\\' tag (incorrect but found in the wild)\\n            if self.astack:\\n                if start:\\n                    self.inheader = True\\n                    # are inside link name, so only add \\'#\\' if it can appear before \\'[\\'\\n                    if self.outtextlist and self.outtextlist[-1] == \"[\":\\n                        self.outtextlist.pop()\\n                        self.space = False\\n                        self.o(hn(tag) * \"#\" + \" \")\\n                        self.o(\"[\")\\n                else:\\n                    self.p_p = 0  # don\\'t break up link name\\n                    self.inheader = False\\n                    return  # prevent redundant emphasis marks on headers\\n            else:\\n                self.p()\\n                if start:\\n                    self.inheader = True\\n                    self.o(hn(tag) * \"#\" + \" \")\\n                else:\\n                    self.inheader = False\\n                    return  # prevent redundant emphasis marks on headers\\n\\n        if tag in [\"p\", \"div\"]:\\n            if self.google_doc:\\n                if start and google_has_height(tag_style):\\n                    self.p()\\n                else:\\n                    self.soft_br()\\n            elif self.astack:\\n                pass\\n            else:\\n                self.p()\\n\\n        if tag == \"br\" and start:\\n            if self.blockquote > 0:\\n                self.o(\"  \\\\n> \")\\n            else:\\n                self.o(\"  \\\\n\")\\n\\n        if tag == \"hr\" and start:\\n            self.p()\\n            self.o(\"* * *\")\\n            self.p()\\n\\n        if tag in [\"head\", \"style\", \"script\"]:\\n            if start:\\n                self.quiet += 1\\n            else:\\n                self.quiet -= 1\\n\\n        if tag == \"style\":\\n            if start:\\n                self.style += 1\\n            else:\\n                self.style -= 1\\n\\n        if tag in [\"body\"]:\\n            self.quiet = 0  # sites like 9rules.com never close <head>\\n\\n        if tag == \"blockquote\":\\n            if start:\\n                self.p()\\n                self.o(\"> \", force=True)\\n                self.start = True\\n                self.blockquote += 1\\n            else:\\n                self.blockquote -= 1\\n                self.p()\\n\\n        if tag in [\"em\", \"i\", \"u\"] and not self.ignore_emphasis:\\n            # Separate with a space if we immediately follow an alphanumeric\\n            # character, since otherwise Markdown won\\'t render the emphasis\\n            # marks, and we\\'ll be left with eg \\'foo_bar_\\' visible.\\n            # (Don\\'t add a space otherwise, though, since there isn\\'t one in the\\n            # original HTML.)\\n            if (\\n                start\\n                and self.preceding_data\\n                and self.preceding_data[-1] not in string.whitespace\\n                and self.preceding_data[-1] not in string.punctuation\\n            ):\\n                emphasis = \" \" + self.emphasis_mark\\n                self.preceding_data += \" \"\\n            else:\\n                emphasis = self.emphasis_mark\\n\\n            self.o(emphasis)\\n            if start:\\n                self.stressed = True\\n\\n        if tag in [\"strong\", \"b\"] and not self.ignore_emphasis:\\n            # Separate with space if we immediately follow an * character, since\\n            # without it, Markdown won\\'t render the resulting *** correctly.\\n            # (Don\\'t add a space otherwise, though, since there isn\\'t one in the\\n            # original HTML.)\\n            if (\\n                start\\n                and self.preceding_data\\n                and self.preceding_data[-1] == self.strong_mark[0]\\n            ):\\n                strong = \" \" + self.strong_mark\\n                self.preceding_data += \" \"\\n            else:\\n                strong = self.strong_mark\\n\\n            self.o(strong)\\n            if start:\\n                self.stressed = True\\n\\n        if tag in [\"del\", \"strike\", \"s\"]:\\n            if start and self.preceding_data and self.preceding_data[-1] == \"~\":\\n                strike = \" ~~\"\\n                self.preceding_data += \" \"\\n            else:\\n                strike = \"~~\"\\n\\n            self.o(strike)\\n            if start:\\n                self.stressed = True\\n\\n        if self.google_doc:\\n            if not self.inheader:\\n                # handle some font attributes, but leave headers clean\\n                self.handle_emphasis(start, tag_style, parent_style)\\n\\n        if tag in [\"kbd\", \"code\", \"tt\"] and not self.pre:\\n            self.o(\"`\")  # TODO: `` `this` ``\\n            self.code = not self.code\\n\\n        if tag == \"abbr\":\\n            if start:\\n                self.abbr_title = None\\n                self.abbr_data = \"\"\\n                if \"title\" in attrs:\\n                    self.abbr_title = attrs[\"title\"]\\n            else:\\n                if self.abbr_title is not None:\\n                    assert self.abbr_data is not None\\n                    self.abbr_list[self.abbr_data] = self.abbr_title\\n                    self.abbr_title = None\\n                self.abbr_data = None\\n\\n        if tag == \"q\":\\n            if not self.quote:\\n                self.o(self.open_quote)\\n            else:\\n                self.o(self.close_quote)\\n            self.quote = not self.quote\\n\\n        def link_url(self: HTML2Text, link: str, title: str = \"\") -> None:\\n            url = urlparse.urljoin(self.baseurl, link)\\n            title = \\' \"{}\"\\'.format(title) if title.strip() else \"\"\\n            self.o(\"]({url}{title})\".format(url=escape_md(url), title=title))\\n\\n        if tag == \"a\" and not self.ignore_links:\\n            if start:\\n                if (\\n                    \"href\" in attrs\\n                    and attrs[\"href\"] is not None\\n                    and not (self.skip_internal_links and attrs[\"href\"].startswith(\"#\"))\\n                    and not (\\n                        self.ignore_mailto_links and attrs[\"href\"].startswith(\"mailto:\")\\n                    )\\n                ):\\n                    self.astack.append(attrs)\\n                    self.maybe_automatic_link = attrs[\"href\"]\\n                    self.empty_link = True\\n                    if self.protect_links:\\n                        attrs[\"href\"] = \"<\" + attrs[\"href\"] + \">\"\\n                else:\\n                    self.astack.append(None)\\n            else:\\n                if self.astack:\\n                    a = self.astack.pop()\\n                    if self.maybe_automatic_link and not self.empty_link:\\n                        self.maybe_automatic_link = None\\n                    elif a:\\n                        assert a[\"href\"] is not None\\n                        if self.empty_link:\\n                            self.o(\"[\")\\n                            self.empty_link = False\\n                            self.maybe_automatic_link = None\\n                        if self.inline_links:\\n                            self.p_p = 0\\n                            title = a.get(\"title\") or \"\"\\n                            title = escape_md(title)\\n                            link_url(self, a[\"href\"], title)\\n                        else:\\n                            i = self.previousIndex(a)\\n                            if i is not None:\\n                                a_props = self.a[i]\\n                            else:\\n                                self.acount += 1\\n                                a_props = AnchorElement(a, self.acount, self.outcount)\\n                                self.a.append(a_props)\\n                            self.o(\"][\" + str(a_props.count) + \"]\")\\n\\n        if tag == \"img\" and start and not self.ignore_images:\\n            if \"src\" in attrs:\\n                assert attrs[\"src\"] is not None\\n                if not self.images_to_alt:\\n                    attrs[\"href\"] = attrs[\"src\"]\\n                alt = attrs.get(\"alt\") or self.default_image_alt\\n\\n                # If we have images_with_size, write raw html including width,\\n                # height, and alt attributes\\n                if self.images_as_html or (\\n                    self.images_with_size and (\"width\" in attrs or \"height\" in attrs)\\n                ):\\n                    self.o(\"<img src=\\'\" + attrs[\"src\"] + \"\\' \")\\n                    if \"width\" in attrs:\\n                        assert attrs[\"width\"] is not None\\n                        self.o(\"width=\\'\" + attrs[\"width\"] + \"\\' \")\\n                    if \"height\" in attrs:\\n                        assert attrs[\"height\"] is not None\\n                        self.o(\"height=\\'\" + attrs[\"height\"] + \"\\' \")\\n                    if alt:\\n                        self.o(\"alt=\\'\" + alt + \"\\' \")\\n                    self.o(\"/>\")\\n                    return\\n\\n                # If we have a link to create, output the start\\n                if self.maybe_automatic_link is not None:\\n                    href = self.maybe_automatic_link\\n                    if (\\n                        self.images_to_alt\\n                        and escape_md(alt) == href\\n                        and self.absolute_url_matcher.match(href)\\n                    ):\\n                        self.o(\"<\" + escape_md(alt) + \">\")\\n                        self.empty_link = False\\n                        return\\n                    else:\\n                        self.o(\"[\")\\n                        self.maybe_automatic_link = None\\n                        self.empty_link = False\\n\\n                # If we have images_to_alt, we discard the image itself,\\n                # considering only the alt text.\\n                if self.images_to_alt:\\n                    self.o(escape_md(alt))\\n                else:\\n                    self.o(\"![\" + escape_md(alt) + \"]\")\\n                    if self.inline_links:\\n                        href = attrs.get(\"href\") or \"\"\\n                        self.o(\\n                            \"(\" + escape_md(urlparse.urljoin(self.baseurl, href)) + \")\"\\n                        )\\n                    else:\\n                        i = self.previousIndex(attrs)\\n                        if i is not None:\\n                            a_props = self.a[i]\\n                        else:\\n                            self.acount += 1\\n                            a_props = AnchorElement(attrs, self.acount, self.outcount)\\n                            self.a.append(a_props)\\n                        self.o(\"[\" + str(a_props.count) + \"]\")\\n\\n        if tag == \"dl\" and start:\\n            self.p()\\n        if tag == \"dt\" and not start:\\n            self.pbr()\\n        if tag == \"dd\" and start:\\n            self.o(\"    \")\\n        if tag == \"dd\" and not start:\\n            self.pbr()\\n\\n        if tag in [\"ol\", \"ul\"]:\\n            # Google Docs create sub lists as top level lists\\n            if not self.list and not self.lastWasList:\\n                self.p()\\n            if start:\\n                if self.google_doc:\\n                    list_style = google_list_style(tag_style)\\n                else:\\n                    list_style = tag\\n                numbering_start = list_numbering_start(attrs)\\n                self.list.append(ListElement(list_style, numbering_start))\\n            else:\\n                if self.list:\\n                    self.list.pop()\\n                    if not self.google_doc and not self.list:\\n                        self.o(\"\\\\n\")\\n            self.lastWasList = True\\n        else:\\n            self.lastWasList = False\\n\\n        if tag == \"li\":\\n            self.pbr()\\n            if start:\\n                if self.list:\\n                    li = self.list[-1]\\n                else:\\n                    li = ListElement(\"ul\", 0)\\n                if self.google_doc:\\n                    self.o(\"  \" * self.google_nest_count(tag_style))\\n                else:\\n                    # Indent two spaces per list, except use three spaces for an\\n                    # unordered list inside an ordered list.\\n                    # https://spec.commonmark.org/0.28/#motivation\\n                    # TODO: line up <ol><li>s > 9 correctly.\\n                    parent_list = None\\n                    for list in self.list:\\n                        self.o(\\n                            \"   \" if parent_list == \"ol\" and list.name == \"ul\" else \"  \"\\n                        )\\n                        parent_list = list.name\\n\\n                if li.name == \"ul\":\\n                    self.o(self.ul_item_mark + \" \")\\n                elif li.name == \"ol\":\\n                    li.num += 1\\n                    self.o(str(li.num) + \". \")\\n                self.start = True\\n\\n        if tag in [\"table\", \"tr\", \"td\", \"th\"]:\\n            if self.ignore_tables:\\n                if tag == \"tr\":\\n                    if start:\\n                        pass\\n                    else:\\n                        self.soft_br()\\n                else:\\n                    pass\\n\\n            elif self.bypass_tables:\\n                if start:\\n                    self.soft_br()\\n                if tag in [\"td\", \"th\"]:\\n                    if start:\\n                        self.o(\"<{}>\\\\n\\\\n\".format(tag))\\n                    else:\\n                        self.o(\"\\\\n</{}>\".format(tag))\\n                else:\\n                    if start:\\n                        self.o(\"<{}>\".format(tag))\\n                    else:\\n                        self.o(\"</{}>\".format(tag))\\n\\n            else:\\n                if tag == \"table\":\\n                    if start:\\n                        self.table_start = True\\n                        if self.pad_tables:\\n                            self.o(\"<\" + config.TABLE_MARKER_FOR_PAD + \">\")\\n                            self.o(\"  \\\\n\")\\n                    else:\\n                        if self.pad_tables:\\n                            # add break in case the table is empty or its 1 row table\\n                            self.soft_br()\\n                            self.o(\"</\" + config.TABLE_MARKER_FOR_PAD + \">\")\\n                            self.o(\"  \\\\n\")\\n                if tag in [\"td\", \"th\"] and start:\\n                    if self.split_next_td:\\n                        self.o(\"| \")\\n                    self.split_next_td = True\\n\\n                if tag == \"tr\" and start:\\n                    self.td_count = 0\\n                if tag == \"tr\" and not start:\\n                    self.split_next_td = False\\n                    self.soft_br()\\n                if tag == \"tr\" and not start and self.table_start:\\n                    # Underline table header\\n                    self.o(\"|\".join([\"---\"] * self.td_count))\\n                    self.soft_br()\\n                    self.table_start = False\\n                if tag in [\"td\", \"th\"] and start:\\n                    self.td_count += 1\\n\\n        if tag == \"pre\":\\n            if start:\\n                self.startpre = True\\n                self.pre = True\\n            else:\\n                self.pre = False\\n                if self.mark_code:\\n                    self.out(\"\\\\n[/code]\")\\n            self.p()\\n\\n    # TODO: Add docstring for these one letter functions\\n    def pbr(self) -> None:\\n        \"Pretty print has a line break\"\\n        if self.p_p == 0:\\n            self.p_p = 1\\n\\n    def p(self) -> None:\\n        \"Set pretty print to 1 or 2 lines\"\\n        self.p_p = 1 if self.single_line_break else 2\\n\\n    def soft_br(self) -> None:\\n        \"Soft breaks\"\\n        self.pbr()\\n        self.br_toggle = \"  \"\\n\\n    def o(\\n        self, data: str, puredata: bool = False, force: Union[bool, str] = False\\n    ) -> None:\\n        \"\"\"\\n        Deal with indentation and whitespace\\n        \"\"\"\\n        if self.abbr_data is not None:\\n            self.abbr_data += data\\n\\n        if not self.quiet:\\n            if self.google_doc:\\n                # prevent white space immediately after \\'begin emphasis\\'\\n                # marks (\\'**\\' and \\'_\\')\\n                lstripped_data = data.lstrip()\\n                if self.drop_white_space and not (self.pre or self.code):\\n                    data = lstripped_data\\n                if lstripped_data != \"\":\\n                    self.drop_white_space = 0\\n\\n            if puredata and not self.pre:\\n                # This is a very dangerous call ... it could mess up\\n                # all handling of &nbsp; when not handled properly\\n                # (see entityref)\\n                data = re.sub(r\"\\\\s+\", r\" \", data)\\n                if data and data[0] == \" \":\\n                    self.space = True\\n                    data = data[1:]\\n            if not data and not force:\\n                return\\n\\n            if self.startpre:\\n                # self.out(\" :\") #TODO: not output when already one there\\n                if not data.startswith(\"\\\\n\") and not data.startswith(\"\\\\r\\\\n\"):\\n                    # <pre>stuff...\\n                    data = \"\\\\n\" + data\\n                if self.mark_code:\\n                    self.out(\"\\\\n[code]\")\\n                    self.p_p = 0\\n\\n            bq = \">\" * self.blockquote\\n            if not (force and data and data[0] == \">\") and self.blockquote:\\n                bq += \" \"\\n\\n            if self.pre:\\n                if not self.list:\\n                    bq += \"    \"\\n                # else: list content is already partially indented\\n                bq += \"    \" * len(self.list)\\n                data = data.replace(\"\\\\n\", \"\\\\n\" + bq)\\n\\n            if self.startpre:\\n                self.startpre = False\\n                if self.list:\\n                    # use existing initial indentation\\n                    data = data.lstrip(\"\\\\n\")\\n\\n            if self.start:\\n                self.space = False\\n                self.p_p = 0\\n                self.start = False\\n\\n            if force == \"end\":\\n                # It\\'s the end.\\n                self.p_p = 0\\n                self.out(\"\\\\n\")\\n                self.space = False\\n\\n            if self.p_p:\\n                self.out((self.br_toggle + \"\\\\n\" + bq) * self.p_p)\\n                self.space = False\\n                self.br_toggle = \"\"\\n\\n            if self.space:\\n                if not self.lastWasNL:\\n                    self.out(\" \")\\n                self.space = False\\n\\n            if self.a and (\\n                (self.p_p == 2 and self.links_each_paragraph) or force == \"end\"\\n            ):\\n                if force == \"end\":\\n                    self.out(\"\\\\n\")\\n\\n                newa = []\\n                for link in self.a:\\n                    if self.outcount > link.outcount:\\n                        self.out(\\n                            \"   [\"\\n                            + str(link.count)\\n                            + \"]: \"\\n                            + urlparse.urljoin(self.baseurl, link.attrs[\"href\"])\\n                        )\\n                        if \"title\" in link.attrs:\\n                            assert link.attrs[\"title\"] is not None\\n                            self.out(\" (\" + link.attrs[\"title\"] + \")\")\\n                        self.out(\"\\\\n\")\\n                    else:\\n                        newa.append(link)\\n\\n                # Don\\'t need an extra line when nothing was done.\\n                if self.a != newa:\\n                    self.out(\"\\\\n\")\\n\\n                self.a = newa\\n\\n            if self.abbr_list and force == \"end\":\\n                for abbr, definition in self.abbr_list.items():\\n                    self.out(\"  *[\" + abbr + \"]: \" + definition + \"\\\\n\")\\n\\n            self.p_p = 0\\n            self.out(data)\\n            self.outcount += 1\\n\\n    def handle_data(self, data: str, entity_char: bool = False) -> None:\\n        if not data:\\n            # Data may be empty for some HTML entities. For example,\\n            # LEFT-TO-RIGHT MARK.\\n            return\\n\\n        if self.stressed:\\n            data = data.strip()\\n            self.stressed = False\\n            self.preceding_stressed = True\\n        elif self.preceding_stressed:\\n            if (\\n                re.match(r\"[^][(){}\\\\s.!?]\", data[0])\\n                and not hn(self.current_tag)\\n                and self.current_tag not in [\"a\", \"code\", \"pre\"]\\n            ):\\n                # should match a letter or common punctuation\\n                data = \" \" + data\\n            self.preceding_stressed = False\\n\\n        if self.style:\\n            self.style_def.update(dumb_css_parser(data))\\n\\n        if self.maybe_automatic_link is not None:\\n            href = self.maybe_automatic_link\\n            if (\\n                href == data\\n                and self.absolute_url_matcher.match(href)\\n                and self.use_automatic_links\\n            ):\\n                self.o(\"<\" + data + \">\")\\n                self.empty_link = False\\n                return\\n            else:\\n                self.o(\"[\")\\n                self.maybe_automatic_link = None\\n                self.empty_link = False\\n\\n        if not self.code and not self.pre and not entity_char:\\n            data = escape_md_section(data, snob=self.escape_snob)\\n        self.preceding_data = data\\n        self.o(data, puredata=True)\\n\\n    def charref(self, name: str) -> str:\\n        if name[0] in [\"x\", \"X\"]:\\n            c = int(name[1:], 16)\\n        else:\\n            c = int(name)\\n\\n        if not self.unicode_snob and c in unifiable_n:\\n            return unifiable_n[c]\\n        else:\\n            try:\\n                return chr(c)\\n            except ValueError:  # invalid unicode\\n                return \"\"\\n\\n    def entityref(self, c: str) -> str:\\n        if not self.unicode_snob and c in config.UNIFIABLE:\\n            return config.UNIFIABLE[c]\\n        try:\\n            ch = html.entities.html5[c + \";\"]\\n        except KeyError:\\n            return \"&\" + c + \";\"\\n        return config.UNIFIABLE[c] if c == \"nbsp\" else ch\\n\\n    def google_nest_count(self, style: Dict[str, str]) -> int:\\n        \"\"\"\\n        Calculate the nesting count of google doc lists\\n\\n        :type style: dict\\n\\n        :rtype: int\\n        \"\"\"\\n        nest_count = 0\\n        if \"margin-left\" in style:\\n            nest_count = int(style[\"margin-left\"][:-2]) // self.google_list_indent\\n\\n        return nest_count\\n\\n    def optwrap(self, text: str) -> str:\\n        \"\"\"\\n        Wrap all paragraphs in the provided text.\\n\\n        :type text: str\\n\\n        :rtype: str\\n        \"\"\"\\n        if not self.body_width:\\n            return text\\n\\n        result = \"\"\\n        newlines = 0\\n        # I cannot think of a better solution for now.\\n        # To avoid the non-wrap behaviour for entire paras\\n        # because of the presence of a link in it\\n        if not self.wrap_links:\\n            self.inline_links = False\\n        for para in text.split(\"\\\\n\"):\\n            if len(para) > 0:\\n                if not skipwrap(\\n                    para, self.wrap_links, self.wrap_list_items, self.wrap_tables\\n                ):\\n                    indent = \"\"\\n                    if para.startswith(\"  \" + self.ul_item_mark):\\n                        # list item continuation: add a double indent to the\\n                        # new lines\\n                        indent = \"    \"\\n                    elif para.startswith(\"> \"):\\n                        # blockquote continuation: add the greater than symbol\\n                        # to the new lines\\n                        indent = \"> \"\\n                    wrapped = wrap(\\n                        para,\\n                        self.body_width,\\n                        break_long_words=False,\\n                        subsequent_indent=indent,\\n                    )\\n                    result += \"\\\\n\".join(wrapped)\\n                    if para.endswith(\"  \"):\\n                        result += \"  \\\\n\"\\n                        newlines = 1\\n                    elif indent:\\n                        result += \"\\\\n\"\\n                        newlines = 1\\n                    else:\\n                        result += \"\\\\n\\\\n\"\\n                        newlines = 2\\n                else:\\n                    # Warning for the tempted!!!\\n                    # Be aware that obvious replacement of this with\\n                    # line.isspace()\\n                    # DOES NOT work! Explanations are welcome.\\n                    if not config.RE_SPACE.match(para):\\n                        result += para + \"\\\\n\"\\n                        newlines = 1\\n            else:\\n                if newlines < 2:\\n                    result += \"\\\\n\"\\n                    newlines += 1\\n        return result\\n\\n\\ndef html2text(html: str, baseurl: str = \"\", bodywidth: Optional[int] = None) -> str:\\n    if bodywidth is None:\\n        bodywidth = config.BODY_WIDTH\\n    h = HTML2Text(baseurl=baseurl, bodywidth=bodywidth)\\n\\n    return h.handle(html)\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/html2text/html2text/__main__.py'"}, "return_value": "b'from .cli import main\\n\\nmain()\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/html2text/html2text/cli.py'"}, "return_value": "b'import argparse\\nimport sys\\n\\nfrom . import HTML2Text, __version__, config\\n\\n\\ndef main() -> None:\\n    baseurl = \"\"\\n\\n    class bcolors:\\n        HEADER = \"\\\\033[95m\"\\n        OKBLUE = \"\\\\033[94m\"\\n        OKGREEN = \"\\\\033[92m\"\\n        WARNING = \"\\\\033[93m\"\\n        FAIL = \"\\\\033[91m\"\\n        ENDC = \"\\\\033[0m\"\\n        BOLD = \"\\\\033[1m\"\\n        UNDERLINE = \"\\\\033[4m\"\\n\\n    p = argparse.ArgumentParser()\\n    p.add_argument(\\n        \"--default-image-alt\",\\n        dest=\"default_image_alt\",\\n        default=config.DEFAULT_IMAGE_ALT,\\n        help=\"The default alt string for images with missing ones\",\\n    )\\n    p.add_argument(\\n        \"--pad-tables\",\\n        dest=\"pad_tables\",\\n        action=\"store_true\",\\n        default=config.PAD_TABLES,\\n        help=\"pad the cells to equal column width in tables\",\\n    )\\n    p.add_argument(\\n        \"--no-wrap-links\",\\n        dest=\"wrap_links\",\\n        action=\"store_false\",\\n        default=config.WRAP_LINKS,\\n        help=\"don\\'t wrap links during conversion\",\\n    )\\n    p.add_argument(\\n        \"--wrap-list-items\",\\n        dest=\"wrap_list_items\",\\n        action=\"store_true\",\\n        default=config.WRAP_LIST_ITEMS,\\n        help=\"wrap list items during conversion\",\\n    )\\n    p.add_argument(\\n        \"--wrap-tables\",\\n        dest=\"wrap_tables\",\\n        action=\"store_true\",\\n        default=config.WRAP_TABLES,\\n        help=\"wrap tables\",\\n    )\\n    p.add_argument(\\n        \"--ignore-emphasis\",\\n        dest=\"ignore_emphasis\",\\n        action=\"store_true\",\\n        default=config.IGNORE_EMPHASIS,\\n        help=\"don\\'t include any formatting for emphasis\",\\n    )\\n    p.add_argument(\\n        \"--reference-links\",\\n        dest=\"inline_links\",\\n        action=\"store_false\",\\n        default=config.INLINE_LINKS,\\n        help=\"use reference style links instead of inline links\",\\n    )\\n    p.add_argument(\\n        \"--ignore-links\",\\n        dest=\"ignore_links\",\\n        action=\"store_true\",\\n        default=config.IGNORE_ANCHORS,\\n        help=\"don\\'t include any formatting for links\",\\n    )\\n    p.add_argument(\\n        \"--ignore-mailto-links\",\\n        action=\"store_true\",\\n        dest=\"ignore_mailto_links\",\\n        default=config.IGNORE_MAILTO_LINKS,\\n        help=\"don\\'t include mailto: links\",\\n    )\\n    p.add_argument(\\n        \"--protect-links\",\\n        dest=\"protect_links\",\\n        action=\"store_true\",\\n        default=config.PROTECT_LINKS,\\n        help=\"protect links from line breaks surrounding them with angle brackets\",\\n    )\\n    p.add_argument(\\n        \"--ignore-images\",\\n        dest=\"ignore_images\",\\n        action=\"store_true\",\\n        default=config.IGNORE_IMAGES,\\n        help=\"don\\'t include any formatting for images\",\\n    )\\n    p.add_argument(\\n        \"--images-as-html\",\\n        dest=\"images_as_html\",\\n        action=\"store_true\",\\n        default=config.IMAGES_AS_HTML,\\n        help=(\\n            \"Always write image tags as raw html; preserves `height`, `width` and \"\\n            \"`alt` if possible.\"\\n        ),\\n    )\\n    p.add_argument(\\n        \"--images-to-alt\",\\n        dest=\"images_to_alt\",\\n        action=\"store_true\",\\n        default=config.IMAGES_TO_ALT,\\n        help=\"Discard image data, only keep alt text\",\\n    )\\n    p.add_argument(\\n        \"--images-with-size\",\\n        dest=\"images_with_size\",\\n        action=\"store_true\",\\n        default=config.IMAGES_WITH_SIZE,\\n        help=(\\n            \"Write image tags with height and width attrs as raw html to retain \"\\n            \"dimensions\"\\n        ),\\n    )\\n    p.add_argument(\\n        \"-g\",\\n        \"--google-doc\",\\n        action=\"store_true\",\\n        dest=\"google_doc\",\\n        default=False,\\n        help=\"convert an html-exported Google Document\",\\n    )\\n    p.add_argument(\\n        \"-d\",\\n        \"--dash-unordered-list\",\\n        action=\"store_true\",\\n        dest=\"ul_style_dash\",\\n        default=False,\\n        help=\"use a dash rather than a star for unordered list items\",\\n    )\\n    p.add_argument(\\n        \"-e\",\\n        \"--asterisk-emphasis\",\\n        action=\"store_true\",\\n        dest=\"em_style_asterisk\",\\n        default=False,\\n        help=\"use an asterisk rather than an underscore for emphasized text\",\\n    )\\n    p.add_argument(\\n        \"-b\",\\n        \"--body-width\",\\n        dest=\"body_width\",\\n        type=int,\\n        default=config.BODY_WIDTH,\\n        help=\"number of characters per output line, 0 for no wrap\",\\n    )\\n    p.add_argument(\\n        \"-i\",\\n        \"--google-list-indent\",\\n        dest=\"list_indent\",\\n        type=int,\\n        default=config.GOOGLE_LIST_INDENT,\\n        help=\"number of pixels Google indents nested lists\",\\n    )\\n    p.add_argument(\\n        \"-s\",\\n        \"--hide-strikethrough\",\\n        action=\"store_true\",\\n        dest=\"hide_strikethrough\",\\n        default=False,\\n        help=\"hide strike-through text. only relevant when -g is \" \"specified as well\",\\n    )\\n    p.add_argument(\\n        \"--escape-all\",\\n        action=\"store_true\",\\n        dest=\"escape_snob\",\\n        default=False,\\n        help=(\\n            \"Escape all special characters.  Output is less readable, but avoids \"\\n            \"corner case formatting issues.\"\\n        ),\\n    )\\n    p.add_argument(\\n        \"--bypass-tables\",\\n        action=\"store_true\",\\n        dest=\"bypass_tables\",\\n        default=config.BYPASS_TABLES,\\n        help=\"Format tables in HTML rather than Markdown syntax.\",\\n    )\\n    p.add_argument(\\n        \"--ignore-tables\",\\n        action=\"store_true\",\\n        dest=\"ignore_tables\",\\n        default=config.IGNORE_TABLES,\\n        help=\"Ignore table-related tags (table, th, td, tr) \" \"while keeping rows.\",\\n    )\\n    p.add_argument(\\n        \"--single-line-break\",\\n        action=\"store_true\",\\n        dest=\"single_line_break\",\\n        default=config.SINGLE_LINE_BREAK,\\n        help=(\\n            \"Use a single line break after a block element rather than two line \"\\n            \"breaks. NOTE: Requires --body-width=0\"\\n        ),\\n    )\\n    p.add_argument(\\n        \"--unicode-snob\",\\n        action=\"store_true\",\\n        dest=\"unicode_snob\",\\n        default=config.UNICODE_SNOB,\\n        help=\"Use unicode throughout document\",\\n    )\\n    p.add_argument(\\n        \"--no-automatic-links\",\\n        action=\"store_false\",\\n        dest=\"use_automatic_links\",\\n        default=config.USE_AUTOMATIC_LINKS,\\n        help=\"Do not use automatic links wherever applicable\",\\n    )\\n    p.add_argument(\\n        \"--no-skip-internal-links\",\\n        action=\"store_false\",\\n        dest=\"skip_internal_links\",\\n        default=config.SKIP_INTERNAL_LINKS,\\n        help=\"Do not skip internal links\",\\n    )\\n    p.add_argument(\\n        \"--links-after-para\",\\n        action=\"store_true\",\\n        dest=\"links_each_paragraph\",\\n        default=config.LINKS_EACH_PARAGRAPH,\\n        help=\"Put links after each paragraph instead of document\",\\n    )\\n    p.add_argument(\\n        \"--mark-code\",\\n        action=\"store_true\",\\n        dest=\"mark_code\",\\n        default=config.MARK_CODE,\\n        help=\"Mark program code blocks with [code]...[/code]\",\\n    )\\n    p.add_argument(\\n        \"--decode-errors\",\\n        dest=\"decode_errors\",\\n        default=config.DECODE_ERRORS,\\n        help=(\\n            \"What to do in case of decode errors.\\'ignore\\', \\'strict\\' and \\'replace\\' are \"\\n            \"acceptable values\"\\n        ),\\n    )\\n    p.add_argument(\\n        \"--open-quote\",\\n        dest=\"open_quote\",\\n        default=config.OPEN_QUOTE,\\n        help=\"The character used to open quotes\",\\n    )\\n    p.add_argument(\\n        \"--close-quote\",\\n        dest=\"close_quote\",\\n        default=config.CLOSE_QUOTE,\\n        help=\"The character used to close quotes\",\\n    )\\n    p.add_argument(\\n        \"--version\", action=\"version\", version=\".\".join(map(str, __version__))\\n    )\\n    p.add_argument(\"filename\", nargs=\"?\")\\n    p.add_argument(\"encoding\", nargs=\"?\", default=\"utf-8\")\\n    args = p.parse_args()\\n\\n    if args.filename and args.filename != \"-\":\\n        with open(args.filename, \"rb\") as fp:\\n            data = fp.read()\\n    else:\\n        data = sys.stdin.buffer.read()\\n\\n    try:\\n        html = data.decode(args.encoding, args.decode_errors)\\n    except UnicodeDecodeError as err:\\n        warning = bcolors.WARNING + \"Warning:\" + bcolors.ENDC\\n        warning += \" Use the \" + bcolors.OKGREEN\\n        warning += \"--decode-errors=ignore\" + bcolors.ENDC + \" flag.\"\\n        print(warning)\\n        raise err\\n\\n    h = HTML2Text(baseurl=baseurl)\\n    # handle options\\n    if args.ul_style_dash:\\n        h.ul_item_mark = \"-\"\\n    if args.em_style_asterisk:\\n        h.emphasis_mark = \"*\"\\n        h.strong_mark = \"__\"\\n\\n    h.body_width = args.body_width\\n    h.google_list_indent = args.list_indent\\n    h.ignore_emphasis = args.ignore_emphasis\\n    h.ignore_links = args.ignore_links\\n    h.ignore_mailto_links = args.ignore_mailto_links\\n    h.protect_links = args.protect_links\\n    h.ignore_images = args.ignore_images\\n    h.images_as_html = args.images_as_html\\n    h.images_to_alt = args.images_to_alt\\n    h.images_with_size = args.images_with_size\\n    h.google_doc = args.google_doc\\n    h.hide_strikethrough = args.hide_strikethrough\\n    h.escape_snob = args.escape_snob\\n    h.bypass_tables = args.bypass_tables\\n    h.ignore_tables = args.ignore_tables\\n    h.single_line_break = args.single_line_break\\n    h.inline_links = args.inline_links\\n    h.unicode_snob = args.unicode_snob\\n    h.use_automatic_links = args.use_automatic_links\\n    h.skip_internal_links = args.skip_internal_links\\n    h.links_each_paragraph = args.links_each_paragraph\\n    h.mark_code = args.mark_code\\n    h.wrap_links = args.wrap_links\\n    h.wrap_list_items = args.wrap_list_items\\n    h.wrap_tables = args.wrap_tables\\n    h.pad_tables = args.pad_tables\\n    h.default_image_alt = args.default_image_alt\\n    h.open_quote = args.open_quote\\n    h.close_quote = args.close_quote\\n\\n    sys.stdout.write(h.handle(html))\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/html2text/html2text/config.py'"}, "return_value": "b'import re\\n\\n# Use Unicode characters instead of their ascii pseudo-replacements\\nUNICODE_SNOB = False\\n\\n# Marker to use for marking tables for padding post processing\\nTABLE_MARKER_FOR_PAD = \"special_marker_for_table_padding\"\\n# Escape all special characters.  Output is less readable, but avoids\\n# corner case formatting issues.\\nESCAPE_SNOB = False\\n\\n# Put the links after each paragraph instead of at the end.\\nLINKS_EACH_PARAGRAPH = False\\n\\n# Wrap long lines at position. 0 for no wrapping.\\nBODY_WIDTH = 78\\n\\n# Don\\'t show internal links (href=\"#local-anchor\") -- corresponding link\\n# targets won\\'t be visible in the plain text file anyway.\\nSKIP_INTERNAL_LINKS = True\\n\\n# Use inline, rather than reference, formatting for images and links\\nINLINE_LINKS = True\\n\\n# Protect links from line breaks surrounding them with angle brackets (in\\n# addition to their square brackets)\\nPROTECT_LINKS = False\\n# WRAP_LINKS = True\\nWRAP_LINKS = True\\n\\n# Wrap list items.\\nWRAP_LIST_ITEMS = False\\n\\n# Wrap tables\\nWRAP_TABLES = False\\n\\n# Number of pixels Google indents nested lists\\nGOOGLE_LIST_INDENT = 36\\n\\n# Values Google and others may use to indicate bold text\\nBOLD_TEXT_STYLE_VALUES = (\"bold\", \"700\", \"800\", \"900\")\\n\\nIGNORE_ANCHORS = False\\nIGNORE_MAILTO_LINKS = False\\nIGNORE_IMAGES = False\\nIMAGES_AS_HTML = False\\nIMAGES_TO_ALT = False\\nIMAGES_WITH_SIZE = False\\nIGNORE_EMPHASIS = False\\nMARK_CODE = False\\nDECODE_ERRORS = \"strict\"\\nDEFAULT_IMAGE_ALT = \"\"\\nPAD_TABLES = False\\n\\n# Convert links with same href and text to <href> format\\n# if they are absolute links\\nUSE_AUTOMATIC_LINKS = True\\n\\n# For checking space-only lines on line 771\\nRE_SPACE = re.compile(r\"\\\\s\\\\+\")\\n\\nRE_ORDERED_LIST_MATCHER = re.compile(r\"\\\\d+\\\\.\\\\s\")\\nRE_UNORDERED_LIST_MATCHER = re.compile(r\"[-\\\\*\\\\+]\\\\s\")\\nRE_MD_CHARS_MATCHER = re.compile(r\"([\\\\\\\\\\\\[\\\\]\\\\(\\\\)])\")\\nRE_MD_CHARS_MATCHER_ALL = re.compile(r\"([`\\\\*_{}\\\\[\\\\]\\\\(\\\\)#!])\")\\n\\n# to find links in the text\\nRE_LINK = re.compile(r\"(\\\\[.*?\\\\] ?\\\\(.*?\\\\))|(\\\\[.*?\\\\]:.*?)\")\\n\\n# to find table separators\\nRE_TABLE = re.compile(r\" \\\\| \")\\n\\nRE_MD_DOT_MATCHER = re.compile(\\n    r\"\"\"\\n    ^             # start of line\\n    (\\\\s*\\\\d+)      # optional whitespace and a number\\n    (\\\\.)          # dot\\n    (?=\\\\s)        # lookahead assert whitespace\\n    \"\"\",\\n    re.MULTILINE | re.VERBOSE,\\n)\\nRE_MD_PLUS_MATCHER = re.compile(\\n    r\"\"\"\\n    ^\\n    (\\\\s*)\\n    (\\\\+)\\n    (?=\\\\s)\\n    \"\"\",\\n    flags=re.MULTILINE | re.VERBOSE,\\n)\\nRE_MD_DASH_MATCHER = re.compile(\\n    r\"\"\"\\n    ^\\n    (\\\\s*)\\n    (-)\\n    (?=\\\\s|\\\\-)     # followed by whitespace (bullet list, or spaced out hr)\\n                  # or another dash (header or hr)\\n    \"\"\",\\n    flags=re.MULTILINE | re.VERBOSE,\\n)\\nRE_SLASH_CHARS = r\"\\\\`*_{}[]()#+-.!\"\\nRE_MD_BACKSLASH_MATCHER = re.compile(\\n    r\"\"\"\\n    (\\\\\\\\)          # match one slash\\n    (?=[%s])      # followed by a char that requires escaping\\n    \"\"\"\\n    % re.escape(RE_SLASH_CHARS),\\n    flags=re.VERBOSE,\\n)\\n\\nUNIFIABLE = {\\n    \"rsquo\": \"\\'\",\\n    \"lsquo\": \"\\'\",\\n    \"rdquo\": \\'\"\\',\\n    \"ldquo\": \\'\"\\',\\n    \"copy\": \"(C)\",\\n    \"mdash\": \"--\",\\n    \"nbsp\": \" \",\\n    \"rarr\": \"->\",\\n    \"larr\": \"<-\",\\n    \"middot\": \"*\",\\n    \"ndash\": \"-\",\\n    \"oelig\": \"oe\",\\n    \"aelig\": \"ae\",\\n    \"agrave\": \"a\",\\n    \"aacute\": \"a\",\\n    \"acirc\": \"a\",\\n    \"atilde\": \"a\",\\n    \"auml\": \"a\",\\n    \"aring\": \"a\",\\n    \"egrave\": \"e\",\\n    \"eacute\": \"e\",\\n    \"ecirc\": \"e\",\\n    \"euml\": \"e\",\\n    \"igrave\": \"i\",\\n    \"iacute\": \"i\",\\n    \"icirc\": \"i\",\\n    \"iuml\": \"i\",\\n    \"ograve\": \"o\",\\n    \"oacute\": \"o\",\\n    \"ocirc\": \"o\",\\n    \"otilde\": \"o\",\\n    \"ouml\": \"o\",\\n    \"ugrave\": \"u\",\\n    \"uacute\": \"u\",\\n    \"ucirc\": \"u\",\\n    \"uuml\": \"u\",\\n    \"lrm\": \"\",\\n    \"rlm\": \"\",\\n}\\n\\n# Format tables in HTML rather than Markdown syntax\\nBYPASS_TABLES = False\\n# Ignore table-related tags (table, th, td, tr) while keeping rows\\nIGNORE_TABLES = False\\n\\n\\n# Use a single line break after a block element rather than two line breaks.\\n# NOTE: Requires body width setting to be 0.\\nSINGLE_LINE_BREAK = False\\n\\n\\n# Use double quotation marks when converting the <q> tag.\\nOPEN_QUOTE = \\'\"\\'\\nCLOSE_QUOTE = \\'\"\\'\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/html2text/html2text/elements.py'"}, "return_value": "b'from typing import Dict, Optional\\n\\n\\nclass AnchorElement:\\n    __slots__ = [\"attrs\", \"count\", \"outcount\"]\\n\\n    def __init__(self, attrs: Dict[str, Optional[str]], count: int, outcount: int):\\n        self.attrs = attrs\\n        self.count = count\\n        self.outcount = outcount\\n\\n\\nclass ListElement:\\n    __slots__ = [\"name\", \"num\"]\\n\\n    def __init__(self, name: str, num: int):\\n        self.name = name\\n        self.num = num\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/html2text/html2text/typing.py'"}, "return_value": "b'class OutCallback:\\n    def __call__(self, s: str) -> None:\\n        ...\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/html2text/html2text/utils.py'"}, "return_value": "b'import html.entities\\nfrom typing import Dict, List, Optional\\n\\nfrom . import config\\n\\nunifiable_n = {\\n    html.entities.name2codepoint[k]: v\\n    for k, v in config.UNIFIABLE.items()\\n    if k != \"nbsp\"\\n}\\n\\n\\ndef hn(tag: str) -> int:\\n    if tag[0] == \"h\" and len(tag) == 2:\\n        n = tag[1]\\n        if \"0\" < n <= \"9\":\\n            return int(n)\\n    return 0\\n\\n\\ndef dumb_property_dict(style: str) -> Dict[str, str]:\\n    \"\"\"\\n    :returns: A hash of css attributes\\n    \"\"\"\\n    return {\\n        x.strip().lower(): y.strip().lower()\\n        for x, y in [z.split(\":\", 1) for z in style.split(\";\") if \":\" in z]\\n    }\\n\\n\\ndef dumb_css_parser(data: str) -> Dict[str, Dict[str, str]]:\\n    \"\"\"\\n    :type data: str\\n\\n    :returns: A hash of css selectors, each of which contains a hash of\\n    css attributes.\\n    :rtype: dict\\n    \"\"\"\\n    # remove @import sentences\\n    data += \";\"\\n    importIndex = data.find(\"@import\")\\n    while importIndex != -1:\\n        data = data[0:importIndex] + data[data.find(\";\", importIndex) + 1 :]\\n        importIndex = data.find(\"@import\")\\n\\n    # parse the css. reverted from dictionary comprehension in order to\\n    # support older pythons\\n    pairs = [x.split(\"{\") for x in data.split(\"}\") if \"{\" in x.strip()]\\n    try:\\n        elements = {a.strip(): dumb_property_dict(b) for a, b in pairs}\\n    except ValueError:\\n        elements = {}  # not that important\\n\\n    return elements\\n\\n\\ndef element_style(\\n    attrs: Dict[str, Optional[str]],\\n    style_def: Dict[str, Dict[str, str]],\\n    parent_style: Dict[str, str],\\n) -> Dict[str, str]:\\n    \"\"\"\\n    :type attrs: dict\\n    :type style_def: dict\\n    :type style_def: dict\\n\\n    :returns: A hash of the \\'final\\' style attributes of the element\\n    :rtype: dict\\n    \"\"\"\\n    style = parent_style.copy()\\n    if \"class\" in attrs:\\n        assert attrs[\"class\"] is not None\\n        for css_class in attrs[\"class\"].split():\\n            css_style = style_def.get(\".\" + css_class, {})\\n            style.update(css_style)\\n    if \"style\" in attrs:\\n        assert attrs[\"style\"] is not None\\n        immediate_style = dumb_property_dict(attrs[\"style\"])\\n        style.update(immediate_style)\\n\\n    return style\\n\\n\\ndef google_list_style(style: Dict[str, str]) -> str:\\n    \"\"\"\\n    Finds out whether this is an ordered or unordered list\\n\\n    :type style: dict\\n\\n    :rtype: str\\n    \"\"\"\\n    if \"list-style-type\" in style:\\n        list_style = style[\"list-style-type\"]\\n        if list_style in [\"disc\", \"circle\", \"square\", \"none\"]:\\n            return \"ul\"\\n\\n    return \"ol\"\\n\\n\\ndef google_has_height(style: Dict[str, str]) -> bool:\\n    \"\"\"\\n    Check if the style of the element has the \\'height\\' attribute\\n    explicitly defined\\n\\n    :type style: dict\\n\\n    :rtype: bool\\n    \"\"\"\\n    return \"height\" in style\\n\\n\\ndef google_text_emphasis(style: Dict[str, str]) -> List[str]:\\n    \"\"\"\\n    :type style: dict\\n\\n    :returns: A list of all emphasis modifiers of the element\\n    :rtype: list\\n    \"\"\"\\n    emphasis = []\\n    if \"text-decoration\" in style:\\n        emphasis.append(style[\"text-decoration\"])\\n    if \"font-style\" in style:\\n        emphasis.append(style[\"font-style\"])\\n    if \"font-weight\" in style:\\n        emphasis.append(style[\"font-weight\"])\\n\\n    return emphasis\\n\\n\\ndef google_fixed_width_font(style: Dict[str, str]) -> bool:\\n    \"\"\"\\n    Check if the css of the current element defines a fixed width font\\n\\n    :type style: dict\\n\\n    :rtype: bool\\n    \"\"\"\\n    font_family = \"\"\\n    if \"font-family\" in style:\\n        font_family = style[\"font-family\"]\\n    return \"courier new\" == font_family or \"consolas\" == font_family\\n\\n\\ndef list_numbering_start(attrs: Dict[str, Optional[str]]) -> int:\\n    \"\"\"\\n    Extract numbering from list element attributes\\n\\n    :type attrs: dict\\n\\n    :rtype: int or None\\n    \"\"\"\\n    if \"start\" in attrs:\\n        assert attrs[\"start\"] is not None\\n        try:\\n            return int(attrs[\"start\"]) - 1\\n        except ValueError:\\n            pass\\n\\n    return 0\\n\\n\\ndef skipwrap(\\n    para: str, wrap_links: bool, wrap_list_items: bool, wrap_tables: bool\\n) -> bool:\\n    # If it appears to contain a link\\n    # don\\'t wrap\\n    if not wrap_links and config.RE_LINK.search(para):\\n        return True\\n    # If the text begins with four spaces or one tab, it\\'s a code block;\\n    # don\\'t wrap\\n    if para[0:4] == \"    \" or para[0] == \"\\\\t\":\\n        return True\\n\\n    # If the text begins with only two \"--\", possibly preceded by\\n    # whitespace, that\\'s an emdash; so wrap.\\n    stripped = para.lstrip()\\n    if stripped[0:2] == \"--\" and len(stripped) > 2 and stripped[2] != \"-\":\\n        return False\\n\\n    # I\\'m not sure what this is for; I thought it was to detect lists,\\n    # but there\\'s a <br>-inside-<span> case in one of the tests that\\n    # also depends upon it.\\n    if stripped[0:1] in (\"-\", \"*\") and not stripped[0:2] == \"**\":\\n        return not wrap_list_items\\n\\n    # If text contains a pipe character it is likely a table\\n    if not wrap_tables and config.RE_TABLE.search(para):\\n        return True\\n\\n    # If the text begins with a single -, *, or +, followed by a space,\\n    # or an integer, followed by a ., followed by a space (in either\\n    # case optionally proceeded by whitespace), it\\'s a list; don\\'t wrap.\\n    return bool(\\n        config.RE_ORDERED_LIST_MATCHER.match(stripped)\\n        or config.RE_UNORDERED_LIST_MATCHER.match(stripped)\\n    )\\n\\n\\ndef escape_md(text: str) -> str:\\n    \"\"\"\\n    Escapes markdown-sensitive characters within other markdown\\n    constructs.\\n    \"\"\"\\n    return config.RE_MD_CHARS_MATCHER.sub(r\"\\\\\\\\\\\\1\", text)\\n\\n\\ndef escape_md_section(text: str, snob: bool = False) -> str:\\n    \"\"\"\\n    Escapes markdown-sensitive characters across whole document sections.\\n    \"\"\"\\n    text = config.RE_MD_BACKSLASH_MATCHER.sub(r\"\\\\\\\\\\\\1\", text)\\n\\n    if snob:\\n        text = config.RE_MD_CHARS_MATCHER_ALL.sub(r\"\\\\\\\\\\\\1\", text)\\n\\n    text = config.RE_MD_DOT_MATCHER.sub(r\"\\\\1\\\\\\\\\\\\2\", text)\\n    text = config.RE_MD_PLUS_MATCHER.sub(r\"\\\\1\\\\\\\\\\\\2\", text)\\n    text = config.RE_MD_DASH_MATCHER.sub(r\"\\\\1\\\\\\\\\\\\2\", text)\\n\\n    return text\\n\\n\\ndef reformat_table(lines: List[str], right_margin: int) -> List[str]:\\n    \"\"\"\\n    Given the lines of a table\\n    padds the cells and returns the new lines\\n    \"\"\"\\n    # find the maximum width of the columns\\n    max_width = [len(x.rstrip()) + right_margin for x in lines[0].split(\"|\")]\\n    max_cols = len(max_width)\\n    for line in lines:\\n        cols = [x.rstrip() for x in line.split(\"|\")]\\n        num_cols = len(cols)\\n\\n        # don\\'t drop any data if colspan attributes result in unequal lengths\\n        if num_cols < max_cols:\\n            cols += [\"\"] * (max_cols - num_cols)\\n        elif max_cols < num_cols:\\n            max_width += [len(x) + right_margin for x in cols[-(num_cols - max_cols) :]]\\n            max_cols = num_cols\\n\\n        max_width = [\\n            max(len(x) + right_margin, old_len) for x, old_len in zip(cols, max_width)\\n        ]\\n\\n    # reformat\\n    new_lines = []\\n    for line in lines:\\n        cols = [x.rstrip() for x in line.split(\"|\")]\\n        if set(line.strip()) == set(\"-|\"):\\n            filler = \"-\"\\n            new_cols = [\\n                x.rstrip() + (filler * (M - len(x.rstrip())))\\n                for x, M in zip(cols, max_width)\\n            ]\\n            new_lines.append(\"|-\" + \"|\".join(new_cols) + \"|\")\\n        else:\\n            filler = \" \"\\n            new_cols = [\\n                x.rstrip() + (filler * (M - len(x.rstrip())))\\n                for x, M in zip(cols, max_width)\\n            ]\\n            new_lines.append(\"| \" + \"|\".join(new_cols) + \"|\")\\n    return new_lines\\n\\n\\ndef pad_tables_in_text(text: str, right_margin: int = 1) -> str:\\n    \"\"\"\\n    Provide padding for tables in the text\\n    \"\"\"\\n    lines = text.split(\"\\\\n\")\\n    table_buffer = []  # type: List[str]\\n    table_started = False\\n    new_lines = []\\n    for line in lines:\\n        # Toggle table started\\n        if config.TABLE_MARKER_FOR_PAD in line:\\n            table_started = not table_started\\n            if not table_started:\\n                table = reformat_table(table_buffer, right_margin)\\n                new_lines.extend(table)\\n                table_buffer = []\\n                new_lines.append(\"\")\\n            continue\\n        # Process lines\\n        if table_started:\\n            table_buffer.append(line)\\n        else:\\n            new_lines.append(line)\\n    return \"\\\\n\".join(new_lines)\\n'"}]}, "get_python_source": {"line": 37, "args": [{"func_args": {"filename": "'/usr/app/src/test_repos/html2text/html2text/__init__.py'"}, "return_value": "'\"\"\"html2text: Turn HTML into equivalent Markdown-structured text.\"\"\"\\n\\nimport html.entities\\nimport html.parser\\nimport re\\nimport string\\nimport urllib.parse as urlparse\\nfrom textwrap import wrap\\nfrom typing import Dict, List, Optional, Tuple, Union\\n\\nfrom . import config\\nfrom .elements import AnchorElement, ListElement\\nfrom .typing import OutCallback\\nfrom .utils import (\\n    dumb_css_parser,\\n    element_style,\\n    escape_md,\\n    escape_md_section,\\n    google_fixed_width_font,\\n    google_has_height,\\n    google_list_style,\\n    google_text_emphasis,\\n    hn,\\n    list_numbering_start,\\n    pad_tables_in_text,\\n    skipwrap,\\n    unifiable_n,\\n)\\n\\n__version__ = (2020, 1, 16)\\n\\n\\n# TODO:\\n# Support decoded entities with UNIFIABLE.\\n\\n\\nclass HTML2Text(html.parser.HTMLParser):\\n    def __init__(\\n        self,\\n        out: Optional[OutCallback] = None,\\n        baseurl: str = \"\",\\n        bodywidth: int = config.BODY_WIDTH,\\n    ) -> None:\\n        \"\"\"\\n        Input parameters:\\n            out: possible custom replacement for self.outtextf (which\\n                 appends lines of text).\\n            baseurl: base URL of the document we process\\n        \"\"\"\\n        super().__init__(convert_charrefs=False)\\n\\n        # Config options\\n        self.split_next_td = False\\n        self.td_count = 0\\n        self.table_start = False\\n        self.unicode_snob = config.UNICODE_SNOB  # covered in cli\\n        self.escape_snob = config.ESCAPE_SNOB  # covered in cli\\n        self.links_each_paragraph = config.LINKS_EACH_PARAGRAPH\\n        self.body_width = bodywidth  # covered in cli\\n        self.skip_internal_links = config.SKIP_INTERNAL_LINKS  # covered in cli\\n        self.inline_links = config.INLINE_LINKS  # covered in cli\\n        self.protect_links = config.PROTECT_LINKS  # covered in cli\\n        self.google_list_indent = config.GOOGLE_LIST_INDENT  # covered in cli\\n        self.ignore_links = config.IGNORE_ANCHORS  # covered in cli\\n        self.ignore_mailto_links = config.IGNORE_MAILTO_LINKS  # covered in cli\\n        self.ignore_images = config.IGNORE_IMAGES  # covered in cli\\n        self.images_as_html = config.IMAGES_AS_HTML  # covered in cli\\n        self.images_to_alt = config.IMAGES_TO_ALT  # covered in cli\\n        self.images_with_size = config.IMAGES_WITH_SIZE  # covered in cli\\n        self.ignore_emphasis = config.IGNORE_EMPHASIS  # covered in cli\\n        self.bypass_tables = config.BYPASS_TABLES  # covered in cli\\n        self.ignore_tables = config.IGNORE_TABLES  # covered in cli\\n        self.google_doc = False  # covered in cli\\n        self.ul_item_mark = \"*\"  # covered in cli\\n        self.emphasis_mark = \"_\"  # covered in cli\\n        self.strong_mark = \"**\"\\n        self.single_line_break = config.SINGLE_LINE_BREAK  # covered in cli\\n        self.use_automatic_links = config.USE_AUTOMATIC_LINKS  # covered in cli\\n        self.hide_strikethrough = False  # covered in cli\\n        self.mark_code = config.MARK_CODE\\n        self.wrap_list_items = config.WRAP_LIST_ITEMS  # covered in cli\\n        self.wrap_links = config.WRAP_LINKS  # covered in cli\\n        self.wrap_tables = config.WRAP_TABLES\\n        self.pad_tables = config.PAD_TABLES  # covered in cli\\n        self.default_image_alt = config.DEFAULT_IMAGE_ALT  # covered in cli\\n        self.tag_callback = None\\n        self.open_quote = config.OPEN_QUOTE  # covered in cli\\n        self.close_quote = config.CLOSE_QUOTE  # covered in cli\\n\\n        if out is None:\\n            self.out = self.outtextf\\n        else:\\n            self.out = out\\n\\n        # empty list to store output characters before they are \"joined\"\\n        self.outtextlist = []  # type: List[str]\\n\\n        self.quiet = 0\\n        self.p_p = 0  # number of newline character to print before next output\\n        self.outcount = 0\\n        self.start = True\\n        self.space = False\\n        self.a = []  # type: List[AnchorElement]\\n        self.astack = []  # type: List[Optional[Dict[str, Optional[str]]]]\\n        self.maybe_automatic_link = None  # type: Optional[str]\\n        self.empty_link = False\\n        self.absolute_url_matcher = re.compile(r\"^[a-zA-Z+]+://\")\\n        self.acount = 0\\n        self.list = []  # type: List[ListElement]\\n        self.blockquote = 0\\n        self.pre = False\\n        self.startpre = False\\n        self.code = False\\n        self.quote = False\\n        self.br_toggle = \"\"\\n        self.lastWasNL = False\\n        self.lastWasList = False\\n        self.style = 0\\n        self.style_def = {}  # type: Dict[str, Dict[str, str]]\\n        self.tag_stack = (\\n            []\\n        )  # type: List[Tuple[str, Dict[str, Optional[str]], Dict[str, str]]]\\n        self.emphasis = 0\\n        self.drop_white_space = 0\\n        self.inheader = False\\n        # Current abbreviation definition\\n        self.abbr_title = None  # type: Optional[str]\\n        # Last inner HTML (for abbr being defined)\\n        self.abbr_data = None  # type: Optional[str]\\n        # Stack of abbreviations to write later\\n        self.abbr_list = {}  # type: Dict[str, str]\\n        self.baseurl = baseurl\\n        self.stressed = False\\n        self.preceding_stressed = False\\n        self.preceding_data = \"\"\\n        self.current_tag = \"\"\\n\\n        config.UNIFIABLE[\"nbsp\"] = \"&nbsp_place_holder;\"\\n\\n    def feed(self, data: str) -> None:\\n        data = data.replace(\"</\\' + \\'script>\", \"</ignore>\")\\n        super().feed(data)\\n\\n    def handle(self, data: str) -> str:\\n        self.feed(data)\\n        self.feed(\"\")\\n        markdown = self.optwrap(self.finish())\\n        if self.pad_tables:\\n            return pad_tables_in_text(markdown)\\n        else:\\n            return markdown\\n\\n    def outtextf(self, s: str) -> None:\\n        self.outtextlist.append(s)\\n        if s:\\n            self.lastWasNL = s[-1] == \"\\\\n\"\\n\\n    def finish(self) -> str:\\n        self.close()\\n\\n        self.pbr()\\n        self.o(\"\", force=\"end\")\\n\\n        outtext = \"\".join(self.outtextlist)\\n\\n        if self.unicode_snob:\\n            nbsp = html.entities.html5[\"nbsp;\"]\\n        else:\\n            nbsp = \" \"\\n        outtext = outtext.replace(\"&nbsp_place_holder;\", nbsp)\\n\\n        # Clear self.outtextlist to avoid memory leak of its content to\\n        # the next handling.\\n        self.outtextlist = []\\n\\n        return outtext\\n\\n    def handle_charref(self, c: str) -> None:\\n        self.handle_data(self.charref(c), True)\\n\\n    def handle_entityref(self, c: str) -> None:\\n        ref = self.entityref(c)\\n\\n        # ref may be an empty string (e.g. for &lrm;/&rlm; markers that should\\n        # not contribute to the final output).\\n        # self.handle_data cannot handle a zero-length string right after a\\n        # stressed tag or mid-text within a stressed tag (text get split and\\n        # self.stressed/self.preceding_stressed gets switched after the first\\n        # part of that text).\\n        if ref:\\n            self.handle_data(ref, True)\\n\\n    def handle_starttag(self, tag: str, attrs: List[Tuple[str, Optional[str]]]) -> None:\\n        self.handle_tag(tag, dict(attrs), start=True)\\n\\n    def handle_endtag(self, tag: str) -> None:\\n        self.handle_tag(tag, {}, start=False)\\n\\n    def previousIndex(self, attrs: Dict[str, Optional[str]]) -> Optional[int]:\\n        \"\"\"\\n        :type attrs: dict\\n\\n        :returns: The index of certain set of attributes (of a link) in the\\n        self.a list. If the set of attributes is not found, returns None\\n        :rtype: int\\n        \"\"\"\\n        if \"href\" not in attrs:\\n            return None\\n\\n        match = False\\n        for i, a in enumerate(self.a):\\n            if \"href\" in a.attrs and a.attrs[\"href\"] == attrs[\"href\"]:\\n                if \"title\" in a.attrs or \"title\" in attrs:\\n                    if (\\n                        \"title\" in a.attrs\\n                        and \"title\" in attrs\\n                        and a.attrs[\"title\"] == attrs[\"title\"]\\n                    ):\\n                        match = True\\n                else:\\n                    match = True\\n\\n            if match:\\n                return i\\n        return None\\n\\n    def handle_emphasis(\\n        self, start: bool, tag_style: Dict[str, str], parent_style: Dict[str, str]\\n    ) -> None:\\n        \"\"\"\\n        Handles various text emphases\\n        \"\"\"\\n        tag_emphasis = google_text_emphasis(tag_style)\\n        parent_emphasis = google_text_emphasis(parent_style)\\n\\n        # handle Google\\'s text emphasis\\n        strikethrough = \"line-through\" in tag_emphasis and self.hide_strikethrough\\n\\n        # google and others may mark a font\\'s weight as `bold` or `700`\\n        bold = False\\n        for bold_marker in config.BOLD_TEXT_STYLE_VALUES:\\n            bold = bold_marker in tag_emphasis and bold_marker not in parent_emphasis\\n            if bold:\\n                break\\n\\n        italic = \"italic\" in tag_emphasis and \"italic\" not in parent_emphasis\\n        fixed = (\\n            google_fixed_width_font(tag_style)\\n            and not google_fixed_width_font(parent_style)\\n            and not self.pre\\n        )\\n\\n        if start:\\n            # crossed-out text must be handled before other attributes\\n            # in order not to output qualifiers unnecessarily\\n            if bold or italic or fixed:\\n                self.emphasis += 1\\n            if strikethrough:\\n                self.quiet += 1\\n            if italic:\\n                self.o(self.emphasis_mark)\\n                self.drop_white_space += 1\\n            if bold:\\n                self.o(self.strong_mark)\\n                self.drop_white_space += 1\\n            if fixed:\\n                self.o(\"`\")\\n                self.drop_white_space += 1\\n                self.code = True\\n        else:\\n            if bold or italic or fixed:\\n                # there must not be whitespace before closing emphasis mark\\n                self.emphasis -= 1\\n                self.space = False\\n            if fixed:\\n                if self.drop_white_space:\\n                    # empty emphasis, drop it\\n                    self.drop_white_space -= 1\\n                else:\\n                    self.o(\"`\")\\n                self.code = False\\n            if bold:\\n                if self.drop_white_space:\\n                    # empty emphasis, drop it\\n                    self.drop_white_space -= 1\\n                else:\\n                    self.o(self.strong_mark)\\n            if italic:\\n                if self.drop_white_space:\\n                    # empty emphasis, drop it\\n                    self.drop_white_space -= 1\\n                else:\\n                    self.o(self.emphasis_mark)\\n            # space is only allowed after *all* emphasis marks\\n            if (bold or italic) and not self.emphasis:\\n                self.o(\" \")\\n            if strikethrough:\\n                self.quiet -= 1\\n\\n    def handle_tag(\\n        self, tag: str, attrs: Dict[str, Optional[str]], start: bool\\n    ) -> None:\\n        self.current_tag = tag\\n\\n        if self.tag_callback is not None:\\n            if self.tag_callback(self, tag, attrs, start) is True:\\n                return\\n\\n        # first thing inside the anchor tag is another tag\\n        # that produces some output\\n        if (\\n            start\\n            and self.maybe_automatic_link is not None\\n            and tag not in [\"p\", \"div\", \"style\", \"dl\", \"dt\"]\\n            and (tag != \"img\" or self.ignore_images)\\n        ):\\n            self.o(\"[\")\\n            self.maybe_automatic_link = None\\n            self.empty_link = False\\n\\n        if self.google_doc:\\n            # the attrs parameter is empty for a closing tag. in addition, we\\n            # need the attributes of the parent nodes in order to get a\\n            # complete style description for the current element. we assume\\n            # that google docs export well formed html.\\n            parent_style = {}  # type: Dict[str, str]\\n            if start:\\n                if self.tag_stack:\\n                    parent_style = self.tag_stack[-1][2]\\n                tag_style = element_style(attrs, self.style_def, parent_style)\\n                self.tag_stack.append((tag, attrs, tag_style))\\n            else:\\n                dummy, attrs, tag_style = (\\n                    self.tag_stack.pop() if self.tag_stack else (None, {}, {})\\n                )\\n                if self.tag_stack:\\n                    parent_style = self.tag_stack[-1][2]\\n\\n        if hn(tag):\\n            # check if nh is inside of an \\'a\\' tag (incorrect but found in the wild)\\n            if self.astack:\\n                if start:\\n                    self.inheader = True\\n                    # are inside link name, so only add \\'#\\' if it can appear before \\'[\\'\\n                    if self.outtextlist and self.outtextlist[-1] == \"[\":\\n                        self.outtextlist.pop()\\n                        self.space = False\\n                        self.o(hn(tag) * \"#\" + \" \")\\n                        self.o(\"[\")\\n                else:\\n                    self.p_p = 0  # don\\'t break up link name\\n                    self.inheader = False\\n                    return  # prevent redundant emphasis marks on headers\\n            else:\\n                self.p()\\n                if start:\\n                    self.inheader = True\\n                    self.o(hn(tag) * \"#\" + \" \")\\n                else:\\n                    self.inheader = False\\n                    return  # prevent redundant emphasis marks on headers\\n\\n        if tag in [\"p\", \"div\"]:\\n            if self.google_doc:\\n                if start and google_has_height(tag_style):\\n                    self.p()\\n                else:\\n                    self.soft_br()\\n            elif self.astack:\\n                pass\\n            else:\\n                self.p()\\n\\n        if tag == \"br\" and start:\\n            if self.blockquote > 0:\\n                self.o(\"  \\\\n> \")\\n            else:\\n                self.o(\"  \\\\n\")\\n\\n        if tag == \"hr\" and start:\\n            self.p()\\n            self.o(\"* * *\")\\n            self.p()\\n\\n        if tag in [\"head\", \"style\", \"script\"]:\\n            if start:\\n                self.quiet += 1\\n            else:\\n                self.quiet -= 1\\n\\n        if tag == \"style\":\\n            if start:\\n                self.style += 1\\n            else:\\n                self.style -= 1\\n\\n        if tag in [\"body\"]:\\n            self.quiet = 0  # sites like 9rules.com never close <head>\\n\\n        if tag == \"blockquote\":\\n            if start:\\n                self.p()\\n                self.o(\"> \", force=True)\\n                self.start = True\\n                self.blockquote += 1\\n            else:\\n                self.blockquote -= 1\\n                self.p()\\n\\n        if tag in [\"em\", \"i\", \"u\"] and not self.ignore_emphasis:\\n            # Separate with a space if we immediately follow an alphanumeric\\n            # character, since otherwise Markdown won\\'t render the emphasis\\n            # marks, and we\\'ll be left with eg \\'foo_bar_\\' visible.\\n            # (Don\\'t add a space otherwise, though, since there isn\\'t one in the\\n            # original HTML.)\\n            if (\\n                start\\n                and self.preceding_data\\n                and self.preceding_data[-1] not in string.whitespace\\n                and self.preceding_data[-1] not in string.punctuation\\n            ):\\n                emphasis = \" \" + self.emphasis_mark\\n                self.preceding_data += \" \"\\n            else:\\n                emphasis = self.emphasis_mark\\n\\n            self.o(emphasis)\\n            if start:\\n                self.stressed = True\\n\\n        if tag in [\"strong\", \"b\"] and not self.ignore_emphasis:\\n            # Separate with space if we immediately follow an * character, since\\n            # without it, Markdown won\\'t render the resulting *** correctly.\\n            # (Don\\'t add a space otherwise, though, since there isn\\'t one in the\\n            # original HTML.)\\n            if (\\n                start\\n                and self.preceding_data\\n                and self.preceding_data[-1] == self.strong_mark[0]\\n            ):\\n                strong = \" \" + self.strong_mark\\n                self.preceding_data += \" \"\\n            else:\\n                strong = self.strong_mark\\n\\n            self.o(strong)\\n            if start:\\n                self.stressed = True\\n\\n        if tag in [\"del\", \"strike\", \"s\"]:\\n            if start and self.preceding_data and self.preceding_data[-1] == \"~\":\\n                strike = \" ~~\"\\n                self.preceding_data += \" \"\\n            else:\\n                strike = \"~~\"\\n\\n            self.o(strike)\\n            if start:\\n                self.stressed = True\\n\\n        if self.google_doc:\\n            if not self.inheader:\\n                # handle some font attributes, but leave headers clean\\n                self.handle_emphasis(start, tag_style, parent_style)\\n\\n        if tag in [\"kbd\", \"code\", \"tt\"] and not self.pre:\\n            self.o(\"`\")  # TODO: `` `this` ``\\n            self.code = not self.code\\n\\n        if tag == \"abbr\":\\n            if start:\\n                self.abbr_title = None\\n                self.abbr_data = \"\"\\n                if \"title\" in attrs:\\n                    self.abbr_title = attrs[\"title\"]\\n            else:\\n                if self.abbr_title is not None:\\n                    assert self.abbr_data is not None\\n                    self.abbr_list[self.abbr_data] = self.abbr_title\\n                    self.abbr_title = None\\n                self.abbr_data = None\\n\\n        if tag == \"q\":\\n            if not self.quote:\\n                self.o(self.open_quote)\\n            else:\\n                self.o(self.close_quote)\\n            self.quote = not self.quote\\n\\n        def link_url(self: HTML2Text, link: str, title: str = \"\") -> None:\\n            url = urlparse.urljoin(self.baseurl, link)\\n            title = \\' \"{}\"\\'.format(title) if title.strip() else \"\"\\n            self.o(\"]({url}{title})\".format(url=escape_md(url), title=title))\\n\\n        if tag == \"a\" and not self.ignore_links:\\n            if start:\\n                if (\\n                    \"href\" in attrs\\n                    and attrs[\"href\"] is not None\\n                    and not (self.skip_internal_links and attrs[\"href\"].startswith(\"#\"))\\n                    and not (\\n                        self.ignore_mailto_links and attrs[\"href\"].startswith(\"mailto:\")\\n                    )\\n                ):\\n                    self.astack.append(attrs)\\n                    self.maybe_automatic_link = attrs[\"href\"]\\n                    self.empty_link = True\\n                    if self.protect_links:\\n                        attrs[\"href\"] = \"<\" + attrs[\"href\"] + \">\"\\n                else:\\n                    self.astack.append(None)\\n            else:\\n                if self.astack:\\n                    a = self.astack.pop()\\n                    if self.maybe_automatic_link and not self.empty_link:\\n                        self.maybe_automatic_link = None\\n                    elif a:\\n                        assert a[\"href\"] is not None\\n                        if self.empty_link:\\n                            self.o(\"[\")\\n                            self.empty_link = False\\n                            self.maybe_automatic_link = None\\n                        if self.inline_links:\\n                            self.p_p = 0\\n                            title = a.get(\"title\") or \"\"\\n                            title = escape_md(title)\\n                            link_url(self, a[\"href\"], title)\\n                        else:\\n                            i = self.previousIndex(a)\\n                            if i is not None:\\n                                a_props = self.a[i]\\n                            else:\\n                                self.acount += 1\\n                                a_props = AnchorElement(a, self.acount, self.outcount)\\n                                self.a.append(a_props)\\n                            self.o(\"][\" + str(a_props.count) + \"]\")\\n\\n        if tag == \"img\" and start and not self.ignore_images:\\n            if \"src\" in attrs:\\n                assert attrs[\"src\"] is not None\\n                if not self.images_to_alt:\\n                    attrs[\"href\"] = attrs[\"src\"]\\n                alt = attrs.get(\"alt\") or self.default_image_alt\\n\\n                # If we have images_with_size, write raw html including width,\\n                # height, and alt attributes\\n                if self.images_as_html or (\\n                    self.images_with_size and (\"width\" in attrs or \"height\" in attrs)\\n                ):\\n                    self.o(\"<img src=\\'\" + attrs[\"src\"] + \"\\' \")\\n                    if \"width\" in attrs:\\n                        assert attrs[\"width\"] is not None\\n                        self.o(\"width=\\'\" + attrs[\"width\"] + \"\\' \")\\n                    if \"height\" in attrs:\\n                        assert attrs[\"height\"] is not None\\n                        self.o(\"height=\\'\" + attrs[\"height\"] + \"\\' \")\\n                    if alt:\\n                        self.o(\"alt=\\'\" + alt + \"\\' \")\\n                    self.o(\"/>\")\\n                    return\\n\\n                # If we have a link to create, output the start\\n                if self.maybe_automatic_link is not None:\\n                    href = self.maybe_automatic_link\\n                    if (\\n                        self.images_to_alt\\n                        and escape_md(alt) == href\\n                        and self.absolute_url_matcher.match(href)\\n                    ):\\n                        self.o(\"<\" + escape_md(alt) + \">\")\\n                        self.empty_link = False\\n                        return\\n                    else:\\n                        self.o(\"[\")\\n                        self.maybe_automatic_link = None\\n                        self.empty_link = False\\n\\n                # If we have images_to_alt, we discard the image itself,\\n                # considering only the alt text.\\n                if self.images_to_alt:\\n                    self.o(escape_md(alt))\\n                else:\\n                    self.o(\"![\" + escape_md(alt) + \"]\")\\n                    if self.inline_links:\\n                        href = attrs.get(\"href\") or \"\"\\n                        self.o(\\n                            \"(\" + escape_md(urlparse.urljoin(self.baseurl, href)) + \")\"\\n                        )\\n                    else:\\n                        i = self.previousIndex(attrs)\\n                        if i is not None:\\n                            a_props = self.a[i]\\n                        else:\\n                            self.acount += 1\\n                            a_props = AnchorElement(attrs, self.acount, self.outcount)\\n                            self.a.append(a_props)\\n                        self.o(\"[\" + str(a_props.count) + \"]\")\\n\\n        if tag == \"dl\" and start:\\n            self.p()\\n        if tag == \"dt\" and not start:\\n            self.pbr()\\n        if tag == \"dd\" and start:\\n            self.o(\"    \")\\n        if tag == \"dd\" and not start:\\n            self.pbr()\\n\\n        if tag in [\"ol\", \"ul\"]:\\n            # Google Docs create sub lists as top level lists\\n            if not self.list and not self.lastWasList:\\n                self.p()\\n            if start:\\n                if self.google_doc:\\n                    list_style = google_list_style(tag_style)\\n                else:\\n                    list_style = tag\\n                numbering_start = list_numbering_start(attrs)\\n                self.list.append(ListElement(list_style, numbering_start))\\n            else:\\n                if self.list:\\n                    self.list.pop()\\n                    if not self.google_doc and not self.list:\\n                        self.o(\"\\\\n\")\\n            self.lastWasList = True\\n        else:\\n            self.lastWasList = False\\n\\n        if tag == \"li\":\\n            self.pbr()\\n            if start:\\n                if self.list:\\n                    li = self.list[-1]\\n                else:\\n                    li = ListElement(\"ul\", 0)\\n                if self.google_doc:\\n                    self.o(\"  \" * self.google_nest_count(tag_style))\\n                else:\\n                    # Indent two spaces per list, except use three spaces for an\\n                    # unordered list inside an ordered list.\\n                    # https://spec.commonmark.org/0.28/#motivation\\n                    # TODO: line up <ol><li>s > 9 correctly.\\n                    parent_list = None\\n                    for list in self.list:\\n                        self.o(\\n                            \"   \" if parent_list == \"ol\" and list.name == \"ul\" else \"  \"\\n                        )\\n                        parent_list = list.name\\n\\n                if li.name == \"ul\":\\n                    self.o(self.ul_item_mark + \" \")\\n                elif li.name == \"ol\":\\n                    li.num += 1\\n                    self.o(str(li.num) + \". \")\\n                self.start = True\\n\\n        if tag in [\"table\", \"tr\", \"td\", \"th\"]:\\n            if self.ignore_tables:\\n                if tag == \"tr\":\\n                    if start:\\n                        pass\\n                    else:\\n                        self.soft_br()\\n                else:\\n                    pass\\n\\n            elif self.bypass_tables:\\n                if start:\\n                    self.soft_br()\\n                if tag in [\"td\", \"th\"]:\\n                    if start:\\n                        self.o(\"<{}>\\\\n\\\\n\".format(tag))\\n                    else:\\n                        self.o(\"\\\\n</{}>\".format(tag))\\n                else:\\n                    if start:\\n                        self.o(\"<{}>\".format(tag))\\n                    else:\\n                        self.o(\"</{}>\".format(tag))\\n\\n            else:\\n                if tag == \"table\":\\n                    if start:\\n                        self.table_start = True\\n                        if self.pad_tables:\\n                            self.o(\"<\" + config.TABLE_MARKER_FOR_PAD + \">\")\\n                            self.o(\"  \\\\n\")\\n                    else:\\n                        if self.pad_tables:\\n                            # add break in case the table is empty or its 1 row table\\n                            self.soft_br()\\n                            self.o(\"</\" + config.TABLE_MARKER_FOR_PAD + \">\")\\n                            self.o(\"  \\\\n\")\\n                if tag in [\"td\", \"th\"] and start:\\n                    if self.split_next_td:\\n                        self.o(\"| \")\\n                    self.split_next_td = True\\n\\n                if tag == \"tr\" and start:\\n                    self.td_count = 0\\n                if tag == \"tr\" and not start:\\n                    self.split_next_td = False\\n                    self.soft_br()\\n                if tag == \"tr\" and not start and self.table_start:\\n                    # Underline table header\\n                    self.o(\"|\".join([\"---\"] * self.td_count))\\n                    self.soft_br()\\n                    self.table_start = False\\n                if tag in [\"td\", \"th\"] and start:\\n                    self.td_count += 1\\n\\n        if tag == \"pre\":\\n            if start:\\n                self.startpre = True\\n                self.pre = True\\n            else:\\n                self.pre = False\\n                if self.mark_code:\\n                    self.out(\"\\\\n[/code]\")\\n            self.p()\\n\\n    # TODO: Add docstring for these one letter functions\\n    def pbr(self) -> None:\\n        \"Pretty print has a line break\"\\n        if self.p_p == 0:\\n            self.p_p = 1\\n\\n    def p(self) -> None:\\n        \"Set pretty print to 1 or 2 lines\"\\n        self.p_p = 1 if self.single_line_break else 2\\n\\n    def soft_br(self) -> None:\\n        \"Soft breaks\"\\n        self.pbr()\\n        self.br_toggle = \"  \"\\n\\n    def o(\\n        self, data: str, puredata: bool = False, force: Union[bool, str] = False\\n    ) -> None:\\n        \"\"\"\\n        Deal with indentation and whitespace\\n        \"\"\"\\n        if self.abbr_data is not None:\\n            self.abbr_data += data\\n\\n        if not self.quiet:\\n            if self.google_doc:\\n                # prevent white space immediately after \\'begin emphasis\\'\\n                # marks (\\'**\\' and \\'_\\')\\n                lstripped_data = data.lstrip()\\n                if self.drop_white_space and not (self.pre or self.code):\\n                    data = lstripped_data\\n                if lstripped_data != \"\":\\n                    self.drop_white_space = 0\\n\\n            if puredata and not self.pre:\\n                # This is a very dangerous call ... it could mess up\\n                # all handling of &nbsp; when not handled properly\\n                # (see entityref)\\n                data = re.sub(r\"\\\\s+\", r\" \", data)\\n                if data and data[0] == \" \":\\n                    self.space = True\\n                    data = data[1:]\\n            if not data and not force:\\n                return\\n\\n            if self.startpre:\\n                # self.out(\" :\") #TODO: not output when already one there\\n                if not data.startswith(\"\\\\n\") and not data.startswith(\"\\\\r\\\\n\"):\\n                    # <pre>stuff...\\n                    data = \"\\\\n\" + data\\n                if self.mark_code:\\n                    self.out(\"\\\\n[code]\")\\n                    self.p_p = 0\\n\\n            bq = \">\" * self.blockquote\\n            if not (force and data and data[0] == \">\") and self.blockquote:\\n                bq += \" \"\\n\\n            if self.pre:\\n                if not self.list:\\n                    bq += \"    \"\\n                # else: list content is already partially indented\\n                bq += \"    \" * len(self.list)\\n                data = data.replace(\"\\\\n\", \"\\\\n\" + bq)\\n\\n            if self.startpre:\\n                self.startpre = False\\n                if self.list:\\n                    # use existing initial indentation\\n                    data = data.lstrip(\"\\\\n\")\\n\\n            if self.start:\\n                self.space = False\\n                self.p_p = 0\\n                self.start = False\\n\\n            if force == \"end\":\\n                # It\\'s the end.\\n                self.p_p = 0\\n                self.out(\"\\\\n\")\\n                self.space = False\\n\\n            if self.p_p:\\n                self.out((self.br_toggle + \"\\\\n\" + bq) * self.p_p)\\n                self.space = False\\n                self.br_toggle = \"\"\\n\\n            if self.space:\\n                if not self.lastWasNL:\\n                    self.out(\" \")\\n                self.space = False\\n\\n            if self.a and (\\n                (self.p_p == 2 and self.links_each_paragraph) or force == \"end\"\\n            ):\\n                if force == \"end\":\\n                    self.out(\"\\\\n\")\\n\\n                newa = []\\n                for link in self.a:\\n                    if self.outcount > link.outcount:\\n                        self.out(\\n                            \"   [\"\\n                            + str(link.count)\\n                            + \"]: \"\\n                            + urlparse.urljoin(self.baseurl, link.attrs[\"href\"])\\n                        )\\n                        if \"title\" in link.attrs:\\n                            assert link.attrs[\"title\"] is not None\\n                            self.out(\" (\" + link.attrs[\"title\"] + \")\")\\n                        self.out(\"\\\\n\")\\n                    else:\\n                        newa.append(link)\\n\\n                # Don\\'t need an extra line when nothing was done.\\n                if self.a != newa:\\n                    self.out(\"\\\\n\")\\n\\n                self.a = newa\\n\\n            if self.abbr_list and force == \"end\":\\n                for abbr, definition in self.abbr_list.items():\\n                    self.out(\"  *[\" + abbr + \"]: \" + definition + \"\\\\n\")\\n\\n            self.p_p = 0\\n            self.out(data)\\n            self.outcount += 1\\n\\n    def handle_data(self, data: str, entity_char: bool = False) -> None:\\n        if not data:\\n            # Data may be empty for some HTML entities. For example,\\n            # LEFT-TO-RIGHT MARK.\\n            return\\n\\n        if self.stressed:\\n            data = data.strip()\\n            self.stressed = False\\n            self.preceding_stressed = True\\n        elif self.preceding_stressed:\\n            if (\\n                re.match(r\"[^][(){}\\\\s.!?]\", data[0])\\n                and not hn(self.current_tag)\\n                and self.current_tag not in [\"a\", \"code\", \"pre\"]\\n            ):\\n                # should match a letter or common punctuation\\n                data = \" \" + data\\n            self.preceding_stressed = False\\n\\n        if self.style:\\n            self.style_def.update(dumb_css_parser(data))\\n\\n        if self.maybe_automatic_link is not None:\\n            href = self.maybe_automatic_link\\n            if (\\n                href == data\\n                and self.absolute_url_matcher.match(href)\\n                and self.use_automatic_links\\n            ):\\n                self.o(\"<\" + data + \">\")\\n                self.empty_link = False\\n                return\\n            else:\\n                self.o(\"[\")\\n                self.maybe_automatic_link = None\\n                self.empty_link = False\\n\\n        if not self.code and not self.pre and not entity_char:\\n            data = escape_md_section(data, snob=self.escape_snob)\\n        self.preceding_data = data\\n        self.o(data, puredata=True)\\n\\n    def charref(self, name: str) -> str:\\n        if name[0] in [\"x\", \"X\"]:\\n            c = int(name[1:], 16)\\n        else:\\n            c = int(name)\\n\\n        if not self.unicode_snob and c in unifiable_n:\\n            return unifiable_n[c]\\n        else:\\n            try:\\n                return chr(c)\\n            except ValueError:  # invalid unicode\\n                return \"\"\\n\\n    def entityref(self, c: str) -> str:\\n        if not self.unicode_snob and c in config.UNIFIABLE:\\n            return config.UNIFIABLE[c]\\n        try:\\n            ch = html.entities.html5[c + \";\"]\\n        except KeyError:\\n            return \"&\" + c + \";\"\\n        return config.UNIFIABLE[c] if c == \"nbsp\" else ch\\n\\n    def google_nest_count(self, style: Dict[str, str]) -> int:\\n        \"\"\"\\n        Calculate the nesting count of google doc lists\\n\\n        :type style: dict\\n\\n        :rtype: int\\n        \"\"\"\\n        nest_count = 0\\n        if \"margin-left\" in style:\\n            nest_count = int(style[\"margin-left\"][:-2]) // self.google_list_indent\\n\\n        return nest_count\\n\\n    def optwrap(self, text: str) -> str:\\n        \"\"\"\\n        Wrap all paragraphs in the provided text.\\n\\n        :type text: str\\n\\n        :rtype: str\\n        \"\"\"\\n        if not self.body_width:\\n            return text\\n\\n        result = \"\"\\n        newlines = 0\\n        # I cannot think of a better solution for now.\\n        # To avoid the non-wrap behaviour for entire paras\\n        # because of the presence of a link in it\\n        if not self.wrap_links:\\n            self.inline_links = False\\n        for para in text.split(\"\\\\n\"):\\n            if len(para) > 0:\\n                if not skipwrap(\\n                    para, self.wrap_links, self.wrap_list_items, self.wrap_tables\\n                ):\\n                    indent = \"\"\\n                    if para.startswith(\"  \" + self.ul_item_mark):\\n                        # list item continuation: add a double indent to the\\n                        # new lines\\n                        indent = \"    \"\\n                    elif para.startswith(\"> \"):\\n                        # blockquote continuation: add the greater than symbol\\n                        # to the new lines\\n                        indent = \"> \"\\n                    wrapped = wrap(\\n                        para,\\n                        self.body_width,\\n                        break_long_words=False,\\n                        subsequent_indent=indent,\\n                    )\\n                    result += \"\\\\n\".join(wrapped)\\n                    if para.endswith(\"  \"):\\n                        result += \"  \\\\n\"\\n                        newlines = 1\\n                    elif indent:\\n                        result += \"\\\\n\"\\n                        newlines = 1\\n                    else:\\n                        result += \"\\\\n\\\\n\"\\n                        newlines = 2\\n                else:\\n                    # Warning for the tempted!!!\\n                    # Be aware that obvious replacement of this with\\n                    # line.isspace()\\n                    # DOES NOT work! Explanations are welcome.\\n                    if not config.RE_SPACE.match(para):\\n                        result += para + \"\\\\n\"\\n                        newlines = 1\\n            else:\\n                if newlines < 2:\\n                    result += \"\\\\n\"\\n                    newlines += 1\\n        return result\\n\\n\\ndef html2text(html: str, baseurl: str = \"\", bodywidth: Optional[int] = None) -> str:\\n    if bodywidth is None:\\n        bodywidth = config.BODY_WIDTH\\n    h = HTML2Text(baseurl=baseurl, bodywidth=bodywidth)\\n\\n    return h.handle(html)\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/html2text/html2text/__main__.py'"}, "return_value": "'from .cli import main\\n\\nmain()\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/html2text/html2text/cli.py'"}, "return_value": "'import argparse\\nimport sys\\n\\nfrom . import HTML2Text, __version__, config\\n\\n\\ndef main() -> None:\\n    baseurl = \"\"\\n\\n    class bcolors:\\n        HEADER = \"\\\\033[95m\"\\n        OKBLUE = \"\\\\033[94m\"\\n        OKGREEN = \"\\\\033[92m\"\\n        WARNING = \"\\\\033[93m\"\\n        FAIL = \"\\\\033[91m\"\\n        ENDC = \"\\\\033[0m\"\\n        BOLD = \"\\\\033[1m\"\\n        UNDERLINE = \"\\\\033[4m\"\\n\\n    p = argparse.ArgumentParser()\\n    p.add_argument(\\n        \"--default-image-alt\",\\n        dest=\"default_image_alt\",\\n        default=config.DEFAULT_IMAGE_ALT,\\n        help=\"The default alt string for images with missing ones\",\\n    )\\n    p.add_argument(\\n        \"--pad-tables\",\\n        dest=\"pad_tables\",\\n        action=\"store_true\",\\n        default=config.PAD_TABLES,\\n        help=\"pad the cells to equal column width in tables\",\\n    )\\n    p.add_argument(\\n        \"--no-wrap-links\",\\n        dest=\"wrap_links\",\\n        action=\"store_false\",\\n        default=config.WRAP_LINKS,\\n        help=\"don\\'t wrap links during conversion\",\\n    )\\n    p.add_argument(\\n        \"--wrap-list-items\",\\n        dest=\"wrap_list_items\",\\n        action=\"store_true\",\\n        default=config.WRAP_LIST_ITEMS,\\n        help=\"wrap list items during conversion\",\\n    )\\n    p.add_argument(\\n        \"--wrap-tables\",\\n        dest=\"wrap_tables\",\\n        action=\"store_true\",\\n        default=config.WRAP_TABLES,\\n        help=\"wrap tables\",\\n    )\\n    p.add_argument(\\n        \"--ignore-emphasis\",\\n        dest=\"ignore_emphasis\",\\n        action=\"store_true\",\\n        default=config.IGNORE_EMPHASIS,\\n        help=\"don\\'t include any formatting for emphasis\",\\n    )\\n    p.add_argument(\\n        \"--reference-links\",\\n        dest=\"inline_links\",\\n        action=\"store_false\",\\n        default=config.INLINE_LINKS,\\n        help=\"use reference style links instead of inline links\",\\n    )\\n    p.add_argument(\\n        \"--ignore-links\",\\n        dest=\"ignore_links\",\\n        action=\"store_true\",\\n        default=config.IGNORE_ANCHORS,\\n        help=\"don\\'t include any formatting for links\",\\n    )\\n    p.add_argument(\\n        \"--ignore-mailto-links\",\\n        action=\"store_true\",\\n        dest=\"ignore_mailto_links\",\\n        default=config.IGNORE_MAILTO_LINKS,\\n        help=\"don\\'t include mailto: links\",\\n    )\\n    p.add_argument(\\n        \"--protect-links\",\\n        dest=\"protect_links\",\\n        action=\"store_true\",\\n        default=config.PROTECT_LINKS,\\n        help=\"protect links from line breaks surrounding them with angle brackets\",\\n    )\\n    p.add_argument(\\n        \"--ignore-images\",\\n        dest=\"ignore_images\",\\n        action=\"store_true\",\\n        default=config.IGNORE_IMAGES,\\n        help=\"don\\'t include any formatting for images\",\\n    )\\n    p.add_argument(\\n        \"--images-as-html\",\\n        dest=\"images_as_html\",\\n        action=\"store_true\",\\n        default=config.IMAGES_AS_HTML,\\n        help=(\\n            \"Always write image tags as raw html; preserves `height`, `width` and \"\\n            \"`alt` if possible.\"\\n        ),\\n    )\\n    p.add_argument(\\n        \"--images-to-alt\",\\n        dest=\"images_to_alt\",\\n        action=\"store_true\",\\n        default=config.IMAGES_TO_ALT,\\n        help=\"Discard image data, only keep alt text\",\\n    )\\n    p.add_argument(\\n        \"--images-with-size\",\\n        dest=\"images_with_size\",\\n        action=\"store_true\",\\n        default=config.IMAGES_WITH_SIZE,\\n        help=(\\n            \"Write image tags with height and width attrs as raw html to retain \"\\n            \"dimensions\"\\n        ),\\n    )\\n    p.add_argument(\\n        \"-g\",\\n        \"--google-doc\",\\n        action=\"store_true\",\\n        dest=\"google_doc\",\\n        default=False,\\n        help=\"convert an html-exported Google Document\",\\n    )\\n    p.add_argument(\\n        \"-d\",\\n        \"--dash-unordered-list\",\\n        action=\"store_true\",\\n        dest=\"ul_style_dash\",\\n        default=False,\\n        help=\"use a dash rather than a star for unordered list items\",\\n    )\\n    p.add_argument(\\n        \"-e\",\\n        \"--asterisk-emphasis\",\\n        action=\"store_true\",\\n        dest=\"em_style_asterisk\",\\n        default=False,\\n        help=\"use an asterisk rather than an underscore for emphasized text\",\\n    )\\n    p.add_argument(\\n        \"-b\",\\n        \"--body-width\",\\n        dest=\"body_width\",\\n        type=int,\\n        default=config.BODY_WIDTH,\\n        help=\"number of characters per output line, 0 for no wrap\",\\n    )\\n    p.add_argument(\\n        \"-i\",\\n        \"--google-list-indent\",\\n        dest=\"list_indent\",\\n        type=int,\\n        default=config.GOOGLE_LIST_INDENT,\\n        help=\"number of pixels Google indents nested lists\",\\n    )\\n    p.add_argument(\\n        \"-s\",\\n        \"--hide-strikethrough\",\\n        action=\"store_true\",\\n        dest=\"hide_strikethrough\",\\n        default=False,\\n        help=\"hide strike-through text. only relevant when -g is \" \"specified as well\",\\n    )\\n    p.add_argument(\\n        \"--escape-all\",\\n        action=\"store_true\",\\n        dest=\"escape_snob\",\\n        default=False,\\n        help=(\\n            \"Escape all special characters.  Output is less readable, but avoids \"\\n            \"corner case formatting issues.\"\\n        ),\\n    )\\n    p.add_argument(\\n        \"--bypass-tables\",\\n        action=\"store_true\",\\n        dest=\"bypass_tables\",\\n        default=config.BYPASS_TABLES,\\n        help=\"Format tables in HTML rather than Markdown syntax.\",\\n    )\\n    p.add_argument(\\n        \"--ignore-tables\",\\n        action=\"store_true\",\\n        dest=\"ignore_tables\",\\n        default=config.IGNORE_TABLES,\\n        help=\"Ignore table-related tags (table, th, td, tr) \" \"while keeping rows.\",\\n    )\\n    p.add_argument(\\n        \"--single-line-break\",\\n        action=\"store_true\",\\n        dest=\"single_line_break\",\\n        default=config.SINGLE_LINE_BREAK,\\n        help=(\\n            \"Use a single line break after a block element rather than two line \"\\n            \"breaks. NOTE: Requires --body-width=0\"\\n        ),\\n    )\\n    p.add_argument(\\n        \"--unicode-snob\",\\n        action=\"store_true\",\\n        dest=\"unicode_snob\",\\n        default=config.UNICODE_SNOB,\\n        help=\"Use unicode throughout document\",\\n    )\\n    p.add_argument(\\n        \"--no-automatic-links\",\\n        action=\"store_false\",\\n        dest=\"use_automatic_links\",\\n        default=config.USE_AUTOMATIC_LINKS,\\n        help=\"Do not use automatic links wherever applicable\",\\n    )\\n    p.add_argument(\\n        \"--no-skip-internal-links\",\\n        action=\"store_false\",\\n        dest=\"skip_internal_links\",\\n        default=config.SKIP_INTERNAL_LINKS,\\n        help=\"Do not skip internal links\",\\n    )\\n    p.add_argument(\\n        \"--links-after-para\",\\n        action=\"store_true\",\\n        dest=\"links_each_paragraph\",\\n        default=config.LINKS_EACH_PARAGRAPH,\\n        help=\"Put links after each paragraph instead of document\",\\n    )\\n    p.add_argument(\\n        \"--mark-code\",\\n        action=\"store_true\",\\n        dest=\"mark_code\",\\n        default=config.MARK_CODE,\\n        help=\"Mark program code blocks with [code]...[/code]\",\\n    )\\n    p.add_argument(\\n        \"--decode-errors\",\\n        dest=\"decode_errors\",\\n        default=config.DECODE_ERRORS,\\n        help=(\\n            \"What to do in case of decode errors.\\'ignore\\', \\'strict\\' and \\'replace\\' are \"\\n            \"acceptable values\"\\n        ),\\n    )\\n    p.add_argument(\\n        \"--open-quote\",\\n        dest=\"open_quote\",\\n        default=config.OPEN_QUOTE,\\n        help=\"The character used to open quotes\",\\n    )\\n    p.add_argument(\\n        \"--close-quote\",\\n        dest=\"close_quote\",\\n        default=config.CLOSE_QUOTE,\\n        help=\"The character used to close quotes\",\\n    )\\n    p.add_argument(\\n        \"--version\", action=\"version\", version=\".\".join(map(str, __version__))\\n    )\\n    p.add_argument(\"filename\", nargs=\"?\")\\n    p.add_argument(\"encoding\", nargs=\"?\", default=\"utf-8\")\\n    args = p.parse_args()\\n\\n    if args.filename and args.filename != \"-\":\\n        with open(args.filename, \"rb\") as fp:\\n            data = fp.read()\\n    else:\\n        data = sys.stdin.buffer.read()\\n\\n    try:\\n        html = data.decode(args.encoding, args.decode_errors)\\n    except UnicodeDecodeError as err:\\n        warning = bcolors.WARNING + \"Warning:\" + bcolors.ENDC\\n        warning += \" Use the \" + bcolors.OKGREEN\\n        warning += \"--decode-errors=ignore\" + bcolors.ENDC + \" flag.\"\\n        print(warning)\\n        raise err\\n\\n    h = HTML2Text(baseurl=baseurl)\\n    # handle options\\n    if args.ul_style_dash:\\n        h.ul_item_mark = \"-\"\\n    if args.em_style_asterisk:\\n        h.emphasis_mark = \"*\"\\n        h.strong_mark = \"__\"\\n\\n    h.body_width = args.body_width\\n    h.google_list_indent = args.list_indent\\n    h.ignore_emphasis = args.ignore_emphasis\\n    h.ignore_links = args.ignore_links\\n    h.ignore_mailto_links = args.ignore_mailto_links\\n    h.protect_links = args.protect_links\\n    h.ignore_images = args.ignore_images\\n    h.images_as_html = args.images_as_html\\n    h.images_to_alt = args.images_to_alt\\n    h.images_with_size = args.images_with_size\\n    h.google_doc = args.google_doc\\n    h.hide_strikethrough = args.hide_strikethrough\\n    h.escape_snob = args.escape_snob\\n    h.bypass_tables = args.bypass_tables\\n    h.ignore_tables = args.ignore_tables\\n    h.single_line_break = args.single_line_break\\n    h.inline_links = args.inline_links\\n    h.unicode_snob = args.unicode_snob\\n    h.use_automatic_links = args.use_automatic_links\\n    h.skip_internal_links = args.skip_internal_links\\n    h.links_each_paragraph = args.links_each_paragraph\\n    h.mark_code = args.mark_code\\n    h.wrap_links = args.wrap_links\\n    h.wrap_list_items = args.wrap_list_items\\n    h.wrap_tables = args.wrap_tables\\n    h.pad_tables = args.pad_tables\\n    h.default_image_alt = args.default_image_alt\\n    h.open_quote = args.open_quote\\n    h.close_quote = args.close_quote\\n\\n    sys.stdout.write(h.handle(html))\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/html2text/html2text/config.py'"}, "return_value": "'import re\\n\\n# Use Unicode characters instead of their ascii pseudo-replacements\\nUNICODE_SNOB = False\\n\\n# Marker to use for marking tables for padding post processing\\nTABLE_MARKER_FOR_PAD = \"special_marker_for_table_padding\"\\n# Escape all special characters.  Output is less readable, but avoids\\n# corner case formatting issues.\\nESCAPE_SNOB = False\\n\\n# Put the links after each paragraph instead of at the end.\\nLINKS_EACH_PARAGRAPH = False\\n\\n# Wrap long lines at position. 0 for no wrapping.\\nBODY_WIDTH = 78\\n\\n# Don\\'t show internal links (href=\"#local-anchor\") -- corresponding link\\n# targets won\\'t be visible in the plain text file anyway.\\nSKIP_INTERNAL_LINKS = True\\n\\n# Use inline, rather than reference, formatting for images and links\\nINLINE_LINKS = True\\n\\n# Protect links from line breaks surrounding them with angle brackets (in\\n# addition to their square brackets)\\nPROTECT_LINKS = False\\n# WRAP_LINKS = True\\nWRAP_LINKS = True\\n\\n# Wrap list items.\\nWRAP_LIST_ITEMS = False\\n\\n# Wrap tables\\nWRAP_TABLES = False\\n\\n# Number of pixels Google indents nested lists\\nGOOGLE_LIST_INDENT = 36\\n\\n# Values Google and others may use to indicate bold text\\nBOLD_TEXT_STYLE_VALUES = (\"bold\", \"700\", \"800\", \"900\")\\n\\nIGNORE_ANCHORS = False\\nIGNORE_MAILTO_LINKS = False\\nIGNORE_IMAGES = False\\nIMAGES_AS_HTML = False\\nIMAGES_TO_ALT = False\\nIMAGES_WITH_SIZE = False\\nIGNORE_EMPHASIS = False\\nMARK_CODE = False\\nDECODE_ERRORS = \"strict\"\\nDEFAULT_IMAGE_ALT = \"\"\\nPAD_TABLES = False\\n\\n# Convert links with same href and text to <href> format\\n# if they are absolute links\\nUSE_AUTOMATIC_LINKS = True\\n\\n# For checking space-only lines on line 771\\nRE_SPACE = re.compile(r\"\\\\s\\\\+\")\\n\\nRE_ORDERED_LIST_MATCHER = re.compile(r\"\\\\d+\\\\.\\\\s\")\\nRE_UNORDERED_LIST_MATCHER = re.compile(r\"[-\\\\*\\\\+]\\\\s\")\\nRE_MD_CHARS_MATCHER = re.compile(r\"([\\\\\\\\\\\\[\\\\]\\\\(\\\\)])\")\\nRE_MD_CHARS_MATCHER_ALL = re.compile(r\"([`\\\\*_{}\\\\[\\\\]\\\\(\\\\)#!])\")\\n\\n# to find links in the text\\nRE_LINK = re.compile(r\"(\\\\[.*?\\\\] ?\\\\(.*?\\\\))|(\\\\[.*?\\\\]:.*?)\")\\n\\n# to find table separators\\nRE_TABLE = re.compile(r\" \\\\| \")\\n\\nRE_MD_DOT_MATCHER = re.compile(\\n    r\"\"\"\\n    ^             # start of line\\n    (\\\\s*\\\\d+)      # optional whitespace and a number\\n    (\\\\.)          # dot\\n    (?=\\\\s)        # lookahead assert whitespace\\n    \"\"\",\\n    re.MULTILINE | re.VERBOSE,\\n)\\nRE_MD_PLUS_MATCHER = re.compile(\\n    r\"\"\"\\n    ^\\n    (\\\\s*)\\n    (\\\\+)\\n    (?=\\\\s)\\n    \"\"\",\\n    flags=re.MULTILINE | re.VERBOSE,\\n)\\nRE_MD_DASH_MATCHER = re.compile(\\n    r\"\"\"\\n    ^\\n    (\\\\s*)\\n    (-)\\n    (?=\\\\s|\\\\-)     # followed by whitespace (bullet list, or spaced out hr)\\n                  # or another dash (header or hr)\\n    \"\"\",\\n    flags=re.MULTILINE | re.VERBOSE,\\n)\\nRE_SLASH_CHARS = r\"\\\\`*_{}[]()#+-.!\"\\nRE_MD_BACKSLASH_MATCHER = re.compile(\\n    r\"\"\"\\n    (\\\\\\\\)          # match one slash\\n    (?=[%s])      # followed by a char that requires escaping\\n    \"\"\"\\n    % re.escape(RE_SLASH_CHARS),\\n    flags=re.VERBOSE,\\n)\\n\\nUNIFIABLE = {\\n    \"rsquo\": \"\\'\",\\n    \"lsquo\": \"\\'\",\\n    \"rdquo\": \\'\"\\',\\n    \"ldquo\": \\'\"\\',\\n    \"copy\": \"(C)\",\\n    \"mdash\": \"--\",\\n    \"nbsp\": \" \",\\n    \"rarr\": \"->\",\\n    \"larr\": \"<-\",\\n    \"middot\": \"*\",\\n    \"ndash\": \"-\",\\n    \"oelig\": \"oe\",\\n    \"aelig\": \"ae\",\\n    \"agrave\": \"a\",\\n    \"aacute\": \"a\",\\n    \"acirc\": \"a\",\\n    \"atilde\": \"a\",\\n    \"auml\": \"a\",\\n    \"aring\": \"a\",\\n    \"egrave\": \"e\",\\n    \"eacute\": \"e\",\\n    \"ecirc\": \"e\",\\n    \"euml\": \"e\",\\n    \"igrave\": \"i\",\\n    \"iacute\": \"i\",\\n    \"icirc\": \"i\",\\n    \"iuml\": \"i\",\\n    \"ograve\": \"o\",\\n    \"oacute\": \"o\",\\n    \"ocirc\": \"o\",\\n    \"otilde\": \"o\",\\n    \"ouml\": \"o\",\\n    \"ugrave\": \"u\",\\n    \"uacute\": \"u\",\\n    \"ucirc\": \"u\",\\n    \"uuml\": \"u\",\\n    \"lrm\": \"\",\\n    \"rlm\": \"\",\\n}\\n\\n# Format tables in HTML rather than Markdown syntax\\nBYPASS_TABLES = False\\n# Ignore table-related tags (table, th, td, tr) while keeping rows\\nIGNORE_TABLES = False\\n\\n\\n# Use a single line break after a block element rather than two line breaks.\\n# NOTE: Requires body width setting to be 0.\\nSINGLE_LINE_BREAK = False\\n\\n\\n# Use double quotation marks when converting the <q> tag.\\nOPEN_QUOTE = \\'\"\\'\\nCLOSE_QUOTE = \\'\"\\'\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/html2text/html2text/elements.py'"}, "return_value": "'from typing import Dict, Optional\\n\\n\\nclass AnchorElement:\\n    __slots__ = [\"attrs\", \"count\", \"outcount\"]\\n\\n    def __init__(self, attrs: Dict[str, Optional[str]], count: int, outcount: int):\\n        self.attrs = attrs\\n        self.count = count\\n        self.outcount = outcount\\n\\n\\nclass ListElement:\\n    __slots__ = [\"name\", \"num\"]\\n\\n    def __init__(self, name: str, num: int):\\n        self.name = name\\n        self.num = num\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/html2text/html2text/typing.py'"}, "return_value": "'class OutCallback:\\n    def __call__(self, s: str) -> None:\\n        ...\\n'"}, {"func_args": {"filename": "'/usr/app/src/test_repos/html2text/html2text/utils.py'"}, "return_value": "'import html.entities\\nfrom typing import Dict, List, Optional\\n\\nfrom . import config\\n\\nunifiable_n = {\\n    html.entities.name2codepoint[k]: v\\n    for k, v in config.UNIFIABLE.items()\\n    if k != \"nbsp\"\\n}\\n\\n\\ndef hn(tag: str) -> int:\\n    if tag[0] == \"h\" and len(tag) == 2:\\n        n = tag[1]\\n        if \"0\" < n <= \"9\":\\n            return int(n)\\n    return 0\\n\\n\\ndef dumb_property_dict(style: str) -> Dict[str, str]:\\n    \"\"\"\\n    :returns: A hash of css attributes\\n    \"\"\"\\n    return {\\n        x.strip().lower(): y.strip().lower()\\n        for x, y in [z.split(\":\", 1) for z in style.split(\";\") if \":\" in z]\\n    }\\n\\n\\ndef dumb_css_parser(data: str) -> Dict[str, Dict[str, str]]:\\n    \"\"\"\\n    :type data: str\\n\\n    :returns: A hash of css selectors, each of which contains a hash of\\n    css attributes.\\n    :rtype: dict\\n    \"\"\"\\n    # remove @import sentences\\n    data += \";\"\\n    importIndex = data.find(\"@import\")\\n    while importIndex != -1:\\n        data = data[0:importIndex] + data[data.find(\";\", importIndex) + 1 :]\\n        importIndex = data.find(\"@import\")\\n\\n    # parse the css. reverted from dictionary comprehension in order to\\n    # support older pythons\\n    pairs = [x.split(\"{\") for x in data.split(\"}\") if \"{\" in x.strip()]\\n    try:\\n        elements = {a.strip(): dumb_property_dict(b) for a, b in pairs}\\n    except ValueError:\\n        elements = {}  # not that important\\n\\n    return elements\\n\\n\\ndef element_style(\\n    attrs: Dict[str, Optional[str]],\\n    style_def: Dict[str, Dict[str, str]],\\n    parent_style: Dict[str, str],\\n) -> Dict[str, str]:\\n    \"\"\"\\n    :type attrs: dict\\n    :type style_def: dict\\n    :type style_def: dict\\n\\n    :returns: A hash of the \\'final\\' style attributes of the element\\n    :rtype: dict\\n    \"\"\"\\n    style = parent_style.copy()\\n    if \"class\" in attrs:\\n        assert attrs[\"class\"] is not None\\n        for css_class in attrs[\"class\"].split():\\n            css_style = style_def.get(\".\" + css_class, {})\\n            style.update(css_style)\\n    if \"style\" in attrs:\\n        assert attrs[\"style\"] is not None\\n        immediate_style = dumb_property_dict(attrs[\"style\"])\\n        style.update(immediate_style)\\n\\n    return style\\n\\n\\ndef google_list_style(style: Dict[str, str]) -> str:\\n    \"\"\"\\n    Finds out whether this is an ordered or unordered list\\n\\n    :type style: dict\\n\\n    :rtype: str\\n    \"\"\"\\n    if \"list-style-type\" in style:\\n        list_style = style[\"list-style-type\"]\\n        if list_style in [\"disc\", \"circle\", \"square\", \"none\"]:\\n            return \"ul\"\\n\\n    return \"ol\"\\n\\n\\ndef google_has_height(style: Dict[str, str]) -> bool:\\n    \"\"\"\\n    Check if the style of the element has the \\'height\\' attribute\\n    explicitly defined\\n\\n    :type style: dict\\n\\n    :rtype: bool\\n    \"\"\"\\n    return \"height\" in style\\n\\n\\ndef google_text_emphasis(style: Dict[str, str]) -> List[str]:\\n    \"\"\"\\n    :type style: dict\\n\\n    :returns: A list of all emphasis modifiers of the element\\n    :rtype: list\\n    \"\"\"\\n    emphasis = []\\n    if \"text-decoration\" in style:\\n        emphasis.append(style[\"text-decoration\"])\\n    if \"font-style\" in style:\\n        emphasis.append(style[\"font-style\"])\\n    if \"font-weight\" in style:\\n        emphasis.append(style[\"font-weight\"])\\n\\n    return emphasis\\n\\n\\ndef google_fixed_width_font(style: Dict[str, str]) -> bool:\\n    \"\"\"\\n    Check if the css of the current element defines a fixed width font\\n\\n    :type style: dict\\n\\n    :rtype: bool\\n    \"\"\"\\n    font_family = \"\"\\n    if \"font-family\" in style:\\n        font_family = style[\"font-family\"]\\n    return \"courier new\" == font_family or \"consolas\" == font_family\\n\\n\\ndef list_numbering_start(attrs: Dict[str, Optional[str]]) -> int:\\n    \"\"\"\\n    Extract numbering from list element attributes\\n\\n    :type attrs: dict\\n\\n    :rtype: int or None\\n    \"\"\"\\n    if \"start\" in attrs:\\n        assert attrs[\"start\"] is not None\\n        try:\\n            return int(attrs[\"start\"]) - 1\\n        except ValueError:\\n            pass\\n\\n    return 0\\n\\n\\ndef skipwrap(\\n    para: str, wrap_links: bool, wrap_list_items: bool, wrap_tables: bool\\n) -> bool:\\n    # If it appears to contain a link\\n    # don\\'t wrap\\n    if not wrap_links and config.RE_LINK.search(para):\\n        return True\\n    # If the text begins with four spaces or one tab, it\\'s a code block;\\n    # don\\'t wrap\\n    if para[0:4] == \"    \" or para[0] == \"\\\\t\":\\n        return True\\n\\n    # If the text begins with only two \"--\", possibly preceded by\\n    # whitespace, that\\'s an emdash; so wrap.\\n    stripped = para.lstrip()\\n    if stripped[0:2] == \"--\" and len(stripped) > 2 and stripped[2] != \"-\":\\n        return False\\n\\n    # I\\'m not sure what this is for; I thought it was to detect lists,\\n    # but there\\'s a <br>-inside-<span> case in one of the tests that\\n    # also depends upon it.\\n    if stripped[0:1] in (\"-\", \"*\") and not stripped[0:2] == \"**\":\\n        return not wrap_list_items\\n\\n    # If text contains a pipe character it is likely a table\\n    if not wrap_tables and config.RE_TABLE.search(para):\\n        return True\\n\\n    # If the text begins with a single -, *, or +, followed by a space,\\n    # or an integer, followed by a ., followed by a space (in either\\n    # case optionally proceeded by whitespace), it\\'s a list; don\\'t wrap.\\n    return bool(\\n        config.RE_ORDERED_LIST_MATCHER.match(stripped)\\n        or config.RE_UNORDERED_LIST_MATCHER.match(stripped)\\n    )\\n\\n\\ndef escape_md(text: str) -> str:\\n    \"\"\"\\n    Escapes markdown-sensitive characters within other markdown\\n    constructs.\\n    \"\"\"\\n    return config.RE_MD_CHARS_MATCHER.sub(r\"\\\\\\\\\\\\1\", text)\\n\\n\\ndef escape_md_section(text: str, snob: bool = False) -> str:\\n    \"\"\"\\n    Escapes markdown-sensitive characters across whole document sections.\\n    \"\"\"\\n    text = config.RE_MD_BACKSLASH_MATCHER.sub(r\"\\\\\\\\\\\\1\", text)\\n\\n    if snob:\\n        text = config.RE_MD_CHARS_MATCHER_ALL.sub(r\"\\\\\\\\\\\\1\", text)\\n\\n    text = config.RE_MD_DOT_MATCHER.sub(r\"\\\\1\\\\\\\\\\\\2\", text)\\n    text = config.RE_MD_PLUS_MATCHER.sub(r\"\\\\1\\\\\\\\\\\\2\", text)\\n    text = config.RE_MD_DASH_MATCHER.sub(r\"\\\\1\\\\\\\\\\\\2\", text)\\n\\n    return text\\n\\n\\ndef reformat_table(lines: List[str], right_margin: int) -> List[str]:\\n    \"\"\"\\n    Given the lines of a table\\n    padds the cells and returns the new lines\\n    \"\"\"\\n    # find the maximum width of the columns\\n    max_width = [len(x.rstrip()) + right_margin for x in lines[0].split(\"|\")]\\n    max_cols = len(max_width)\\n    for line in lines:\\n        cols = [x.rstrip() for x in line.split(\"|\")]\\n        num_cols = len(cols)\\n\\n        # don\\'t drop any data if colspan attributes result in unequal lengths\\n        if num_cols < max_cols:\\n            cols += [\"\"] * (max_cols - num_cols)\\n        elif max_cols < num_cols:\\n            max_width += [len(x) + right_margin for x in cols[-(num_cols - max_cols) :]]\\n            max_cols = num_cols\\n\\n        max_width = [\\n            max(len(x) + right_margin, old_len) for x, old_len in zip(cols, max_width)\\n        ]\\n\\n    # reformat\\n    new_lines = []\\n    for line in lines:\\n        cols = [x.rstrip() for x in line.split(\"|\")]\\n        if set(line.strip()) == set(\"-|\"):\\n            filler = \"-\"\\n            new_cols = [\\n                x.rstrip() + (filler * (M - len(x.rstrip())))\\n                for x, M in zip(cols, max_width)\\n            ]\\n            new_lines.append(\"|-\" + \"|\".join(new_cols) + \"|\")\\n        else:\\n            filler = \" \"\\n            new_cols = [\\n                x.rstrip() + (filler * (M - len(x.rstrip())))\\n                for x, M in zip(cols, max_width)\\n            ]\\n            new_lines.append(\"| \" + \"|\".join(new_cols) + \"|\")\\n    return new_lines\\n\\n\\ndef pad_tables_in_text(text: str, right_margin: int = 1) -> str:\\n    \"\"\"\\n    Provide padding for tables in the text\\n    \"\"\"\\n    lines = text.split(\"\\\\n\")\\n    table_buffer = []  # type: List[str]\\n    table_started = False\\n    new_lines = []\\n    for line in lines:\\n        # Toggle table started\\n        if config.TABLE_MARKER_FOR_PAD in line:\\n            table_started = not table_started\\n            if not table_started:\\n                table = reformat_table(table_buffer, right_margin)\\n                new_lines.extend(table)\\n                table_buffer = []\\n                new_lines.append(\"\")\\n            continue\\n        # Process lines\\n        if table_started:\\n            table_buffer.append(line)\\n        else:\\n            new_lines.append(line)\\n    return \"\\\\n\".join(new_lines)\\n'"}]}, "source_encoding": {"line": 184, "args": [{"func_args": {"source": "b'\"\"\"html2text: Turn HTML into equivalent Markdown-structured text.\"\"\"\\n\\nimport html.entities\\nimport html.parser\\nimport re\\nimport string\\nimport urllib.parse as urlparse\\nfrom textwrap import wrap\\nfrom typing import Dict, List, Optional, Tuple, Union\\n\\nfrom . import config\\nfrom .elements import AnchorElement, ListElement\\nfrom .typing import OutCallback\\nfrom .utils import (\\n    dumb_css_parser,\\n    element_style,\\n    escape_md,\\n    escape_md_section,\\n    google_fixed_width_font,\\n    google_has_height,\\n    google_list_style,\\n    google_text_emphasis,\\n    hn,\\n    list_numbering_start,\\n    pad_tables_in_text,\\n    skipwrap,\\n    unifiable_n,\\n)\\n\\n__version__ = (2020, 1, 16)\\n\\n\\n# TODO:\\n# Support decoded entities with UNIFIABLE.\\n\\n\\nclass HTML2Text(html.parser.HTMLParser):\\n    def __init__(\\n        self,\\n        out: Optional[OutCallback] = None,\\n        baseurl: str = \"\",\\n        bodywidth: int = config.BODY_WIDTH,\\n    ) -> None:\\n        \"\"\"\\n        Input parameters:\\n            out: possible custom replacement for self.outtextf (which\\n                 appends lines of text).\\n            baseurl: base URL of the document we process\\n        \"\"\"\\n        super().__init__(convert_charrefs=False)\\n\\n        # Config options\\n        self.split_next_td = False\\n        self.td_count = 0\\n        self.table_start = False\\n        self.unicode_snob = config.UNICODE_SNOB  # covered in cli\\n        self.escape_snob = config.ESCAPE_SNOB  # covered in cli\\n        self.links_each_paragraph = config.LINKS_EACH_PARAGRAPH\\n        self.body_width = bodywidth  # covered in cli\\n        self.skip_internal_links = config.SKIP_INTERNAL_LINKS  # covered in cli\\n        self.inline_links = config.INLINE_LINKS  # covered in cli\\n        self.protect_links = config.PROTECT_LINKS  # covered in cli\\n        self.google_list_indent = config.GOOGLE_LIST_INDENT  # covered in cli\\n        self.ignore_links = config.IGNORE_ANCHORS  # covered in cli\\n        self.ignore_mailto_links = config.IGNORE_MAILTO_LINKS  # covered in cli\\n        self.ignore_images = config.IGNORE_IMAGES  # covered in cli\\n        self.images_as_html = config.IMAGES_AS_HTML  # covered in cli\\n        self.images_to_alt = config.IMAGES_TO_ALT  # covered in cli\\n        self.images_with_size = config.IMAGES_WITH_SIZE  # covered in cli\\n        self.ignore_emphasis = config.IGNORE_EMPHASIS  # covered in cli\\n        self.bypass_tables = config.BYPASS_TABLES  # covered in cli\\n        self.ignore_tables = config.IGNORE_TABLES  # covered in cli\\n        self.google_doc = False  # covered in cli\\n        self.ul_item_mark = \"*\"  # covered in cli\\n        self.emphasis_mark = \"_\"  # covered in cli\\n        self.strong_mark = \"**\"\\n        self.single_line_break = config.SINGLE_LINE_BREAK  # covered in cli\\n        self.use_automatic_links = config.USE_AUTOMATIC_LINKS  # covered in cli\\n        self.hide_strikethrough = False  # covered in cli\\n        self.mark_code = config.MARK_CODE\\n        self.wrap_list_items = config.WRAP_LIST_ITEMS  # covered in cli\\n        self.wrap_links = config.WRAP_LINKS  # covered in cli\\n        self.wrap_tables = config.WRAP_TABLES\\n        self.pad_tables = config.PAD_TABLES  # covered in cli\\n        self.default_image_alt = config.DEFAULT_IMAGE_ALT  # covered in cli\\n        self.tag_callback = None\\n        self.open_quote = config.OPEN_QUOTE  # covered in cli\\n        self.close_quote = config.CLOSE_QUOTE  # covered in cli\\n\\n        if out is None:\\n            self.out = self.outtextf\\n        else:\\n            self.out = out\\n\\n        # empty list to store output characters before they are \"joined\"\\n        self.outtextlist = []  # type: List[str]\\n\\n        self.quiet = 0\\n        self.p_p = 0  # number of newline character to print before next output\\n        self.outcount = 0\\n        self.start = True\\n        self.space = False\\n        self.a = []  # type: List[AnchorElement]\\n        self.astack = []  # type: List[Optional[Dict[str, Optional[str]]]]\\n        self.maybe_automatic_link = None  # type: Optional[str]\\n        self.empty_link = False\\n        self.absolute_url_matcher = re.compile(r\"^[a-zA-Z+]+://\")\\n        self.acount = 0\\n        self.list = []  # type: List[ListElement]\\n        self.blockquote = 0\\n        self.pre = False\\n        self.startpre = False\\n        self.code = False\\n        self.quote = False\\n        self.br_toggle = \"\"\\n        self.lastWasNL = False\\n        self.lastWasList = False\\n        self.style = 0\\n        self.style_def = {}  # type: Dict[str, Dict[str, str]]\\n        self.tag_stack = (\\n            []\\n        )  # type: List[Tuple[str, Dict[str, Optional[str]], Dict[str, str]]]\\n        self.emphasis = 0\\n        self.drop_white_space = 0\\n        self.inheader = False\\n        # Current abbreviation definition\\n        self.abbr_title = None  # type: Optional[str]\\n        # Last inner HTML (for abbr being defined)\\n        self.abbr_data = None  # type: Optional[str]\\n        # Stack of abbreviations to write later\\n        self.abbr_list = {}  # type: Dict[str, str]\\n        self.baseurl = baseurl\\n        self.stressed = False\\n        self.preceding_stressed = False\\n        self.preceding_data = \"\"\\n        self.current_tag = \"\"\\n\\n        config.UNIFIABLE[\"nbsp\"] = \"&nbsp_place_holder;\"\\n\\n    def feed(self, data: str) -> None:\\n        data = data.replace(\"</\\' + \\'script>\", \"</ignore>\")\\n        super().feed(data)\\n\\n    def handle(self, data: str) -> str:\\n        self.feed(data)\\n        self.feed(\"\")\\n        markdown = self.optwrap(self.finish())\\n        if self.pad_tables:\\n            return pad_tables_in_text(markdown)\\n        else:\\n            return markdown\\n\\n    def outtextf(self, s: str) -> None:\\n        self.outtextlist.append(s)\\n        if s:\\n            self.lastWasNL = s[-1] == \"\\\\n\"\\n\\n    def finish(self) -> str:\\n        self.close()\\n\\n        self.pbr()\\n        self.o(\"\", force=\"end\")\\n\\n        outtext = \"\".join(self.outtextlist)\\n\\n        if self.unicode_snob:\\n            nbsp = html.entities.html5[\"nbsp;\"]\\n        else:\\n            nbsp = \" \"\\n        outtext = outtext.replace(\"&nbsp_place_holder;\", nbsp)\\n\\n        # Clear self.outtextlist to avoid memory leak of its content to\\n        # the next handling.\\n        self.outtextlist = []\\n\\n        return outtext\\n\\n    def handle_charref(self, c: str) -> None:\\n        self.handle_data(self.charref(c), True)\\n\\n    def handle_entityref(self, c: str) -> None:\\n        ref = self.entityref(c)\\n\\n        # ref may be an empty string (e.g. for &lrm;/&rlm; markers that should\\n        # not contribute to the final output).\\n        # self.handle_data cannot handle a zero-length string right after a\\n        # stressed tag or mid-text within a stressed tag (text get split and\\n        # self.stressed/self.preceding_stressed gets switched after the first\\n        # part of that text).\\n        if ref:\\n            self.handle_data(ref, True)\\n\\n    def handle_starttag(self, tag: str, attrs: List[Tuple[str, Optional[str]]]) -> None:\\n        self.handle_tag(tag, dict(attrs), start=True)\\n\\n    def handle_endtag(self, tag: str) -> None:\\n        self.handle_tag(tag, {}, start=False)\\n\\n    def previousIndex(self, attrs: Dict[str, Optional[str]]) -> Optional[int]:\\n        \"\"\"\\n        :type attrs: dict\\n\\n        :returns: The index of certain set of attributes (of a link) in the\\n        self.a list. If the set of attributes is not found, returns None\\n        :rtype: int\\n        \"\"\"\\n        if \"href\" not in attrs:\\n            return None\\n\\n        match = False\\n        for i, a in enumerate(self.a):\\n            if \"href\" in a.attrs and a.attrs[\"href\"] == attrs[\"href\"]:\\n                if \"title\" in a.attrs or \"title\" in attrs:\\n                    if (\\n                        \"title\" in a.attrs\\n                        and \"title\" in attrs\\n                        and a.attrs[\"title\"] == attrs[\"title\"]\\n                    ):\\n                        match = True\\n                else:\\n                    match = True\\n\\n            if match:\\n                return i\\n        return None\\n\\n    def handle_emphasis(\\n        self, start: bool, tag_style: Dict[str, str], parent_style: Dict[str, str]\\n    ) -> None:\\n        \"\"\"\\n        Handles various text emphases\\n        \"\"\"\\n        tag_emphasis = google_text_emphasis(tag_style)\\n        parent_emphasis = google_text_emphasis(parent_style)\\n\\n        # handle Google\\'s text emphasis\\n        strikethrough = \"line-through\" in tag_emphasis and self.hide_strikethrough\\n\\n        # google and others may mark a font\\'s weight as `bold` or `700`\\n        bold = False\\n        for bold_marker in config.BOLD_TEXT_STYLE_VALUES:\\n            bold = bold_marker in tag_emphasis and bold_marker not in parent_emphasis\\n            if bold:\\n                break\\n\\n        italic = \"italic\" in tag_emphasis and \"italic\" not in parent_emphasis\\n        fixed = (\\n            google_fixed_width_font(tag_style)\\n            and not google_fixed_width_font(parent_style)\\n            and not self.pre\\n        )\\n\\n        if start:\\n            # crossed-out text must be handled before other attributes\\n            # in order not to output qualifiers unnecessarily\\n            if bold or italic or fixed:\\n                self.emphasis += 1\\n            if strikethrough:\\n                self.quiet += 1\\n            if italic:\\n                self.o(self.emphasis_mark)\\n                self.drop_white_space += 1\\n            if bold:\\n                self.o(self.strong_mark)\\n                self.drop_white_space += 1\\n            if fixed:\\n                self.o(\"`\")\\n                self.drop_white_space += 1\\n                self.code = True\\n        else:\\n            if bold or italic or fixed:\\n                # there must not be whitespace before closing emphasis mark\\n                self.emphasis -= 1\\n                self.space = False\\n            if fixed:\\n                if self.drop_white_space:\\n                    # empty emphasis, drop it\\n                    self.drop_white_space -= 1\\n                else:\\n                    self.o(\"`\")\\n                self.code = False\\n            if bold:\\n                if self.drop_white_space:\\n                    # empty emphasis, drop it\\n                    self.drop_white_space -= 1\\n                else:\\n                    self.o(self.strong_mark)\\n            if italic:\\n                if self.drop_white_space:\\n                    # empty emphasis, drop it\\n                    self.drop_white_space -= 1\\n                else:\\n                    self.o(self.emphasis_mark)\\n            # space is only allowed after *all* emphasis marks\\n            if (bold or italic) and not self.emphasis:\\n                self.o(\" \")\\n            if strikethrough:\\n                self.quiet -= 1\\n\\n    def handle_tag(\\n        self, tag: str, attrs: Dict[str, Optional[str]], start: bool\\n    ) -> None:\\n        self.current_tag = tag\\n\\n        if self.tag_callback is not None:\\n            if self.tag_callback(self, tag, attrs, start) is True:\\n                return\\n\\n        # first thing inside the anchor tag is another tag\\n        # that produces some output\\n        if (\\n            start\\n            and self.maybe_automatic_link is not None\\n            and tag not in [\"p\", \"div\", \"style\", \"dl\", \"dt\"]\\n            and (tag != \"img\" or self.ignore_images)\\n        ):\\n            self.o(\"[\")\\n            self.maybe_automatic_link = None\\n            self.empty_link = False\\n\\n        if self.google_doc:\\n            # the attrs parameter is empty for a closing tag. in addition, we\\n            # need the attributes of the parent nodes in order to get a\\n            # complete style description for the current element. we assume\\n            # that google docs export well formed html.\\n            parent_style = {}  # type: Dict[str, str]\\n            if start:\\n                if self.tag_stack:\\n                    parent_style = self.tag_stack[-1][2]\\n                tag_style = element_style(attrs, self.style_def, parent_style)\\n                self.tag_stack.append((tag, attrs, tag_style))\\n            else:\\n                dummy, attrs, tag_style = (\\n                    self.tag_stack.pop() if self.tag_stack else (None, {}, {})\\n                )\\n                if self.tag_stack:\\n                    parent_style = self.tag_stack[-1][2]\\n\\n        if hn(tag):\\n            # check if nh is inside of an \\'a\\' tag (incorrect but found in the wild)\\n            if self.astack:\\n                if start:\\n                    self.inheader = True\\n                    # are inside link name, so only add \\'#\\' if it can appear before \\'[\\'\\n                    if self.outtextlist and self.outtextlist[-1] == \"[\":\\n                        self.outtextlist.pop()\\n                        self.space = False\\n                        self.o(hn(tag) * \"#\" + \" \")\\n                        self.o(\"[\")\\n                else:\\n                    self.p_p = 0  # don\\'t break up link name\\n                    self.inheader = False\\n                    return  # prevent redundant emphasis marks on headers\\n            else:\\n                self.p()\\n                if start:\\n                    self.inheader = True\\n                    self.o(hn(tag) * \"#\" + \" \")\\n                else:\\n                    self.inheader = False\\n                    return  # prevent redundant emphasis marks on headers\\n\\n        if tag in [\"p\", \"div\"]:\\n            if self.google_doc:\\n                if start and google_has_height(tag_style):\\n                    self.p()\\n                else:\\n                    self.soft_br()\\n            elif self.astack:\\n                pass\\n            else:\\n                self.p()\\n\\n        if tag == \"br\" and start:\\n            if self.blockquote > 0:\\n                self.o(\"  \\\\n> \")\\n            else:\\n                self.o(\"  \\\\n\")\\n\\n        if tag == \"hr\" and start:\\n            self.p()\\n            self.o(\"* * *\")\\n            self.p()\\n\\n        if tag in [\"head\", \"style\", \"script\"]:\\n            if start:\\n                self.quiet += 1\\n            else:\\n                self.quiet -= 1\\n\\n        if tag == \"style\":\\n            if start:\\n                self.style += 1\\n            else:\\n                self.style -= 1\\n\\n        if tag in [\"body\"]:\\n            self.quiet = 0  # sites like 9rules.com never close <head>\\n\\n        if tag == \"blockquote\":\\n            if start:\\n                self.p()\\n                self.o(\"> \", force=True)\\n                self.start = True\\n                self.blockquote += 1\\n            else:\\n                self.blockquote -= 1\\n                self.p()\\n\\n        if tag in [\"em\", \"i\", \"u\"] and not self.ignore_emphasis:\\n            # Separate with a space if we immediately follow an alphanumeric\\n            # character, since otherwise Markdown won\\'t render the emphasis\\n            # marks, and we\\'ll be left with eg \\'foo_bar_\\' visible.\\n            # (Don\\'t add a space otherwise, though, since there isn\\'t one in the\\n            # original HTML.)\\n            if (\\n                start\\n                and self.preceding_data\\n                and self.preceding_data[-1] not in string.whitespace\\n                and self.preceding_data[-1] not in string.punctuation\\n            ):\\n                emphasis = \" \" + self.emphasis_mark\\n                self.preceding_data += \" \"\\n            else:\\n                emphasis = self.emphasis_mark\\n\\n            self.o(emphasis)\\n            if start:\\n                self.stressed = True\\n\\n        if tag in [\"strong\", \"b\"] and not self.ignore_emphasis:\\n            # Separate with space if we immediately follow an * character, since\\n            # without it, Markdown won\\'t render the resulting *** correctly.\\n            # (Don\\'t add a space otherwise, though, since there isn\\'t one in the\\n            # original HTML.)\\n            if (\\n                start\\n                and self.preceding_data\\n                and self.preceding_data[-1] == self.strong_mark[0]\\n            ):\\n                strong = \" \" + self.strong_mark\\n                self.preceding_data += \" \"\\n            else:\\n                strong = self.strong_mark\\n\\n            self.o(strong)\\n            if start:\\n                self.stressed = True\\n\\n        if tag in [\"del\", \"strike\", \"s\"]:\\n            if start and self.preceding_data and self.preceding_data[-1] == \"~\":\\n                strike = \" ~~\"\\n                self.preceding_data += \" \"\\n            else:\\n                strike = \"~~\"\\n\\n            self.o(strike)\\n            if start:\\n                self.stressed = True\\n\\n        if self.google_doc:\\n            if not self.inheader:\\n                # handle some font attributes, but leave headers clean\\n                self.handle_emphasis(start, tag_style, parent_style)\\n\\n        if tag in [\"kbd\", \"code\", \"tt\"] and not self.pre:\\n            self.o(\"`\")  # TODO: `` `this` ``\\n            self.code = not self.code\\n\\n        if tag == \"abbr\":\\n            if start:\\n                self.abbr_title = None\\n                self.abbr_data = \"\"\\n                if \"title\" in attrs:\\n                    self.abbr_title = attrs[\"title\"]\\n            else:\\n                if self.abbr_title is not None:\\n                    assert self.abbr_data is not None\\n                    self.abbr_list[self.abbr_data] = self.abbr_title\\n                    self.abbr_title = None\\n                self.abbr_data = None\\n\\n        if tag == \"q\":\\n            if not self.quote:\\n                self.o(self.open_quote)\\n            else:\\n                self.o(self.close_quote)\\n            self.quote = not self.quote\\n\\n        def link_url(self: HTML2Text, link: str, title: str = \"\") -> None:\\n            url = urlparse.urljoin(self.baseurl, link)\\n            title = \\' \"{}\"\\'.format(title) if title.strip() else \"\"\\n            self.o(\"]({url}{title})\".format(url=escape_md(url), title=title))\\n\\n        if tag == \"a\" and not self.ignore_links:\\n            if start:\\n                if (\\n                    \"href\" in attrs\\n                    and attrs[\"href\"] is not None\\n                    and not (self.skip_internal_links and attrs[\"href\"].startswith(\"#\"))\\n                    and not (\\n                        self.ignore_mailto_links and attrs[\"href\"].startswith(\"mailto:\")\\n                    )\\n                ):\\n                    self.astack.append(attrs)\\n                    self.maybe_automatic_link = attrs[\"href\"]\\n                    self.empty_link = True\\n                    if self.protect_links:\\n                        attrs[\"href\"] = \"<\" + attrs[\"href\"] + \">\"\\n                else:\\n                    self.astack.append(None)\\n            else:\\n                if self.astack:\\n                    a = self.astack.pop()\\n                    if self.maybe_automatic_link and not self.empty_link:\\n                        self.maybe_automatic_link = None\\n                    elif a:\\n                        assert a[\"href\"] is not None\\n                        if self.empty_link:\\n                            self.o(\"[\")\\n                            self.empty_link = False\\n                            self.maybe_automatic_link = None\\n                        if self.inline_links:\\n                            self.p_p = 0\\n                            title = a.get(\"title\") or \"\"\\n                            title = escape_md(title)\\n                            link_url(self, a[\"href\"], title)\\n                        else:\\n                            i = self.previousIndex(a)\\n                            if i is not None:\\n                                a_props = self.a[i]\\n                            else:\\n                                self.acount += 1\\n                                a_props = AnchorElement(a, self.acount, self.outcount)\\n                                self.a.append(a_props)\\n                            self.o(\"][\" + str(a_props.count) + \"]\")\\n\\n        if tag == \"img\" and start and not self.ignore_images:\\n            if \"src\" in attrs:\\n                assert attrs[\"src\"] is not None\\n                if not self.images_to_alt:\\n                    attrs[\"href\"] = attrs[\"src\"]\\n                alt = attrs.get(\"alt\") or self.default_image_alt\\n\\n                # If we have images_with_size, write raw html including width,\\n                # height, and alt attributes\\n                if self.images_as_html or (\\n                    self.images_with_size and (\"width\" in attrs or \"height\" in attrs)\\n                ):\\n                    self.o(\"<img src=\\'\" + attrs[\"src\"] + \"\\' \")\\n                    if \"width\" in attrs:\\n                        assert attrs[\"width\"] is not None\\n                        self.o(\"width=\\'\" + attrs[\"width\"] + \"\\' \")\\n                    if \"height\" in attrs:\\n                        assert attrs[\"height\"] is not None\\n                        self.o(\"height=\\'\" + attrs[\"height\"] + \"\\' \")\\n                    if alt:\\n                        self.o(\"alt=\\'\" + alt + \"\\' \")\\n                    self.o(\"/>\")\\n                    return\\n\\n                # If we have a link to create, output the start\\n                if self.maybe_automatic_link is not None:\\n                    href = self.maybe_automatic_link\\n                    if (\\n                        self.images_to_alt\\n                        and escape_md(alt) == href\\n                        and self.absolute_url_matcher.match(href)\\n                    ):\\n                        self.o(\"<\" + escape_md(alt) + \">\")\\n                        self.empty_link = False\\n                        return\\n                    else:\\n                        self.o(\"[\")\\n                        self.maybe_automatic_link = None\\n                        self.empty_link = False\\n\\n                # If we have images_to_alt, we discard the image itself,\\n                # considering only the alt text.\\n                if self.images_to_alt:\\n                    self.o(escape_md(alt))\\n                else:\\n                    self.o(\"![\" + escape_md(alt) + \"]\")\\n                    if self.inline_links:\\n                        href = attrs.get(\"href\") or \"\"\\n                        self.o(\\n                            \"(\" + escape_md(urlparse.urljoin(self.baseurl, href)) + \")\"\\n                        )\\n                    else:\\n                        i = self.previousIndex(attrs)\\n                        if i is not None:\\n                            a_props = self.a[i]\\n                        else:\\n                            self.acount += 1\\n                            a_props = AnchorElement(attrs, self.acount, self.outcount)\\n                            self.a.append(a_props)\\n                        self.o(\"[\" + str(a_props.count) + \"]\")\\n\\n        if tag == \"dl\" and start:\\n            self.p()\\n        if tag == \"dt\" and not start:\\n            self.pbr()\\n        if tag == \"dd\" and start:\\n            self.o(\"    \")\\n        if tag == \"dd\" and not start:\\n            self.pbr()\\n\\n        if tag in [\"ol\", \"ul\"]:\\n            # Google Docs create sub lists as top level lists\\n            if not self.list and not self.lastWasList:\\n                self.p()\\n            if start:\\n                if self.google_doc:\\n                    list_style = google_list_style(tag_style)\\n                else:\\n                    list_style = tag\\n                numbering_start = list_numbering_start(attrs)\\n                self.list.append(ListElement(list_style, numbering_start))\\n            else:\\n                if self.list:\\n                    self.list.pop()\\n                    if not self.google_doc and not self.list:\\n                        self.o(\"\\\\n\")\\n            self.lastWasList = True\\n        else:\\n            self.lastWasList = False\\n\\n        if tag == \"li\":\\n            self.pbr()\\n            if start:\\n                if self.list:\\n                    li = self.list[-1]\\n                else:\\n                    li = ListElement(\"ul\", 0)\\n                if self.google_doc:\\n                    self.o(\"  \" * self.google_nest_count(tag_style))\\n                else:\\n                    # Indent two spaces per list, except use three spaces for an\\n                    # unordered list inside an ordered list.\\n                    # https://spec.commonmark.org/0.28/#motivation\\n                    # TODO: line up <ol><li>s > 9 correctly.\\n                    parent_list = None\\n                    for list in self.list:\\n                        self.o(\\n                            \"   \" if parent_list == \"ol\" and list.name == \"ul\" else \"  \"\\n                        )\\n                        parent_list = list.name\\n\\n                if li.name == \"ul\":\\n                    self.o(self.ul_item_mark + \" \")\\n                elif li.name == \"ol\":\\n                    li.num += 1\\n                    self.o(str(li.num) + \". \")\\n                self.start = True\\n\\n        if tag in [\"table\", \"tr\", \"td\", \"th\"]:\\n            if self.ignore_tables:\\n                if tag == \"tr\":\\n                    if start:\\n                        pass\\n                    else:\\n                        self.soft_br()\\n                else:\\n                    pass\\n\\n            elif self.bypass_tables:\\n                if start:\\n                    self.soft_br()\\n                if tag in [\"td\", \"th\"]:\\n                    if start:\\n                        self.o(\"<{}>\\\\n\\\\n\".format(tag))\\n                    else:\\n                        self.o(\"\\\\n</{}>\".format(tag))\\n                else:\\n                    if start:\\n                        self.o(\"<{}>\".format(tag))\\n                    else:\\n                        self.o(\"</{}>\".format(tag))\\n\\n            else:\\n                if tag == \"table\":\\n                    if start:\\n                        self.table_start = True\\n                        if self.pad_tables:\\n                            self.o(\"<\" + config.TABLE_MARKER_FOR_PAD + \">\")\\n                            self.o(\"  \\\\n\")\\n                    else:\\n                        if self.pad_tables:\\n                            # add break in case the table is empty or its 1 row table\\n                            self.soft_br()\\n                            self.o(\"</\" + config.TABLE_MARKER_FOR_PAD + \">\")\\n                            self.o(\"  \\\\n\")\\n                if tag in [\"td\", \"th\"] and start:\\n                    if self.split_next_td:\\n                        self.o(\"| \")\\n                    self.split_next_td = True\\n\\n                if tag == \"tr\" and start:\\n                    self.td_count = 0\\n                if tag == \"tr\" and not start:\\n                    self.split_next_td = False\\n                    self.soft_br()\\n                if tag == \"tr\" and not start and self.table_start:\\n                    # Underline table header\\n                    self.o(\"|\".join([\"---\"] * self.td_count))\\n                    self.soft_br()\\n                    self.table_start = False\\n                if tag in [\"td\", \"th\"] and start:\\n                    self.td_count += 1\\n\\n        if tag == \"pre\":\\n            if start:\\n                self.startpre = True\\n                self.pre = True\\n            else:\\n                self.pre = False\\n                if self.mark_code:\\n                    self.out(\"\\\\n[/code]\")\\n            self.p()\\n\\n    # TODO: Add docstring for these one letter functions\\n    def pbr(self) -> None:\\n        \"Pretty print has a line break\"\\n        if self.p_p == 0:\\n            self.p_p = 1\\n\\n    def p(self) -> None:\\n        \"Set pretty print to 1 or 2 lines\"\\n        self.p_p = 1 if self.single_line_break else 2\\n\\n    def soft_br(self) -> None:\\n        \"Soft breaks\"\\n        self.pbr()\\n        self.br_toggle = \"  \"\\n\\n    def o(\\n        self, data: str, puredata: bool = False, force: Union[bool, str] = False\\n    ) -> None:\\n        \"\"\"\\n        Deal with indentation and whitespace\\n        \"\"\"\\n        if self.abbr_data is not None:\\n            self.abbr_data += data\\n\\n        if not self.quiet:\\n            if self.google_doc:\\n                # prevent white space immediately after \\'begin emphasis\\'\\n                # marks (\\'**\\' and \\'_\\')\\n                lstripped_data = data.lstrip()\\n                if self.drop_white_space and not (self.pre or self.code):\\n                    data = lstripped_data\\n                if lstripped_data != \"\":\\n                    self.drop_white_space = 0\\n\\n            if puredata and not self.pre:\\n                # This is a very dangerous call ... it could mess up\\n                # all handling of &nbsp; when not handled properly\\n                # (see entityref)\\n                data = re.sub(r\"\\\\s+\", r\" \", data)\\n                if data and data[0] == \" \":\\n                    self.space = True\\n                    data = data[1:]\\n            if not data and not force:\\n                return\\n\\n            if self.startpre:\\n                # self.out(\" :\") #TODO: not output when already one there\\n                if not data.startswith(\"\\\\n\") and not data.startswith(\"\\\\r\\\\n\"):\\n                    # <pre>stuff...\\n                    data = \"\\\\n\" + data\\n                if self.mark_code:\\n                    self.out(\"\\\\n[code]\")\\n                    self.p_p = 0\\n\\n            bq = \">\" * self.blockquote\\n            if not (force and data and data[0] == \">\") and self.blockquote:\\n                bq += \" \"\\n\\n            if self.pre:\\n                if not self.list:\\n                    bq += \"    \"\\n                # else: list content is already partially indented\\n                bq += \"    \" * len(self.list)\\n                data = data.replace(\"\\\\n\", \"\\\\n\" + bq)\\n\\n            if self.startpre:\\n                self.startpre = False\\n                if self.list:\\n                    # use existing initial indentation\\n                    data = data.lstrip(\"\\\\n\")\\n\\n            if self.start:\\n                self.space = False\\n                self.p_p = 0\\n                self.start = False\\n\\n            if force == \"end\":\\n                # It\\'s the end.\\n                self.p_p = 0\\n                self.out(\"\\\\n\")\\n                self.space = False\\n\\n            if self.p_p:\\n                self.out((self.br_toggle + \"\\\\n\" + bq) * self.p_p)\\n                self.space = False\\n                self.br_toggle = \"\"\\n\\n            if self.space:\\n                if not self.lastWasNL:\\n                    self.out(\" \")\\n                self.space = False\\n\\n            if self.a and (\\n                (self.p_p == 2 and self.links_each_paragraph) or force == \"end\"\\n            ):\\n                if force == \"end\":\\n                    self.out(\"\\\\n\")\\n\\n                newa = []\\n                for link in self.a:\\n                    if self.outcount > link.outcount:\\n                        self.out(\\n                            \"   [\"\\n                            + str(link.count)\\n                            + \"]: \"\\n                            + urlparse.urljoin(self.baseurl, link.attrs[\"href\"])\\n                        )\\n                        if \"title\" in link.attrs:\\n                            assert link.attrs[\"title\"] is not None\\n                            self.out(\" (\" + link.attrs[\"title\"] + \")\")\\n                        self.out(\"\\\\n\")\\n                    else:\\n                        newa.append(link)\\n\\n                # Don\\'t need an extra line when nothing was done.\\n                if self.a != newa:\\n                    self.out(\"\\\\n\")\\n\\n                self.a = newa\\n\\n            if self.abbr_list and force == \"end\":\\n                for abbr, definition in self.abbr_list.items():\\n                    self.out(\"  *[\" + abbr + \"]: \" + definition + \"\\\\n\")\\n\\n            self.p_p = 0\\n            self.out(data)\\n            self.outcount += 1\\n\\n    def handle_data(self, data: str, entity_char: bool = False) -> None:\\n        if not data:\\n            # Data may be empty for some HTML entities. For example,\\n            # LEFT-TO-RIGHT MARK.\\n            return\\n\\n        if self.stressed:\\n            data = data.strip()\\n            self.stressed = False\\n            self.preceding_stressed = True\\n        elif self.preceding_stressed:\\n            if (\\n                re.match(r\"[^][(){}\\\\s.!?]\", data[0])\\n                and not hn(self.current_tag)\\n                and self.current_tag not in [\"a\", \"code\", \"pre\"]\\n            ):\\n                # should match a letter or common punctuation\\n                data = \" \" + data\\n            self.preceding_stressed = False\\n\\n        if self.style:\\n            self.style_def.update(dumb_css_parser(data))\\n\\n        if self.maybe_automatic_link is not None:\\n            href = self.maybe_automatic_link\\n            if (\\n                href == data\\n                and self.absolute_url_matcher.match(href)\\n                and self.use_automatic_links\\n            ):\\n                self.o(\"<\" + data + \">\")\\n                self.empty_link = False\\n                return\\n            else:\\n                self.o(\"[\")\\n                self.maybe_automatic_link = None\\n                self.empty_link = False\\n\\n        if not self.code and not self.pre and not entity_char:\\n            data = escape_md_section(data, snob=self.escape_snob)\\n        self.preceding_data = data\\n        self.o(data, puredata=True)\\n\\n    def charref(self, name: str) -> str:\\n        if name[0] in [\"x\", \"X\"]:\\n            c = int(name[1:], 16)\\n        else:\\n            c = int(name)\\n\\n        if not self.unicode_snob and c in unifiable_n:\\n            return unifiable_n[c]\\n        else:\\n            try:\\n                return chr(c)\\n            except ValueError:  # invalid unicode\\n                return \"\"\\n\\n    def entityref(self, c: str) -> str:\\n        if not self.unicode_snob and c in config.UNIFIABLE:\\n            return config.UNIFIABLE[c]\\n        try:\\n            ch = html.entities.html5[c + \";\"]\\n        except KeyError:\\n            return \"&\" + c + \";\"\\n        return config.UNIFIABLE[c] if c == \"nbsp\" else ch\\n\\n    def google_nest_count(self, style: Dict[str, str]) -> int:\\n        \"\"\"\\n        Calculate the nesting count of google doc lists\\n\\n        :type style: dict\\n\\n        :rtype: int\\n        \"\"\"\\n        nest_count = 0\\n        if \"margin-left\" in style:\\n            nest_count = int(style[\"margin-left\"][:-2]) // self.google_list_indent\\n\\n        return nest_count\\n\\n    def optwrap(self, text: str) -> str:\\n        \"\"\"\\n        Wrap all paragraphs in the provided text.\\n\\n        :type text: str\\n\\n        :rtype: str\\n        \"\"\"\\n        if not self.body_width:\\n            return text\\n\\n        result = \"\"\\n        newlines = 0\\n        # I cannot think of a better solution for now.\\n        # To avoid the non-wrap behaviour for entire paras\\n        # because of the presence of a link in it\\n        if not self.wrap_links:\\n            self.inline_links = False\\n        for para in text.split(\"\\\\n\"):\\n            if len(para) > 0:\\n                if not skipwrap(\\n                    para, self.wrap_links, self.wrap_list_items, self.wrap_tables\\n                ):\\n                    indent = \"\"\\n                    if para.startswith(\"  \" + self.ul_item_mark):\\n                        # list item continuation: add a double indent to the\\n                        # new lines\\n                        indent = \"    \"\\n                    elif para.startswith(\"> \"):\\n                        # blockquote continuation: add the greater than symbol\\n                        # to the new lines\\n                        indent = \"> \"\\n                    wrapped = wrap(\\n                        para,\\n                        self.body_width,\\n                        break_long_words=False,\\n                        subsequent_indent=indent,\\n                    )\\n                    result += \"\\\\n\".join(wrapped)\\n                    if para.endswith(\"  \"):\\n                        result += \"  \\\\n\"\\n                        newlines = 1\\n                    elif indent:\\n                        result += \"\\\\n\"\\n                        newlines = 1\\n                    else:\\n                        result += \"\\\\n\\\\n\"\\n                        newlines = 2\\n                else:\\n                    # Warning for the tempted!!!\\n                    # Be aware that obvious replacement of this with\\n                    # line.isspace()\\n                    # DOES NOT work! Explanations are welcome.\\n                    if not config.RE_SPACE.match(para):\\n                        result += para + \"\\\\n\"\\n                        newlines = 1\\n            else:\\n                if newlines < 2:\\n                    result += \"\\\\n\"\\n                    newlines += 1\\n        return result\\n\\n\\ndef html2text(html: str, baseurl: str = \"\", bodywidth: Optional[int] = None) -> str:\\n    if bodywidth is None:\\n        bodywidth = config.BODY_WIDTH\\n    h = HTML2Text(baseurl=baseurl, bodywidth=bodywidth)\\n\\n    return h.handle(html)\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'from .cli import main\\n\\nmain()\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'import argparse\\nimport sys\\n\\nfrom . import HTML2Text, __version__, config\\n\\n\\ndef main() -> None:\\n    baseurl = \"\"\\n\\n    class bcolors:\\n        HEADER = \"\\\\033[95m\"\\n        OKBLUE = \"\\\\033[94m\"\\n        OKGREEN = \"\\\\033[92m\"\\n        WARNING = \"\\\\033[93m\"\\n        FAIL = \"\\\\033[91m\"\\n        ENDC = \"\\\\033[0m\"\\n        BOLD = \"\\\\033[1m\"\\n        UNDERLINE = \"\\\\033[4m\"\\n\\n    p = argparse.ArgumentParser()\\n    p.add_argument(\\n        \"--default-image-alt\",\\n        dest=\"default_image_alt\",\\n        default=config.DEFAULT_IMAGE_ALT,\\n        help=\"The default alt string for images with missing ones\",\\n    )\\n    p.add_argument(\\n        \"--pad-tables\",\\n        dest=\"pad_tables\",\\n        action=\"store_true\",\\n        default=config.PAD_TABLES,\\n        help=\"pad the cells to equal column width in tables\",\\n    )\\n    p.add_argument(\\n        \"--no-wrap-links\",\\n        dest=\"wrap_links\",\\n        action=\"store_false\",\\n        default=config.WRAP_LINKS,\\n        help=\"don\\'t wrap links during conversion\",\\n    )\\n    p.add_argument(\\n        \"--wrap-list-items\",\\n        dest=\"wrap_list_items\",\\n        action=\"store_true\",\\n        default=config.WRAP_LIST_ITEMS,\\n        help=\"wrap list items during conversion\",\\n    )\\n    p.add_argument(\\n        \"--wrap-tables\",\\n        dest=\"wrap_tables\",\\n        action=\"store_true\",\\n        default=config.WRAP_TABLES,\\n        help=\"wrap tables\",\\n    )\\n    p.add_argument(\\n        \"--ignore-emphasis\",\\n        dest=\"ignore_emphasis\",\\n        action=\"store_true\",\\n        default=config.IGNORE_EMPHASIS,\\n        help=\"don\\'t include any formatting for emphasis\",\\n    )\\n    p.add_argument(\\n        \"--reference-links\",\\n        dest=\"inline_links\",\\n        action=\"store_false\",\\n        default=config.INLINE_LINKS,\\n        help=\"use reference style links instead of inline links\",\\n    )\\n    p.add_argument(\\n        \"--ignore-links\",\\n        dest=\"ignore_links\",\\n        action=\"store_true\",\\n        default=config.IGNORE_ANCHORS,\\n        help=\"don\\'t include any formatting for links\",\\n    )\\n    p.add_argument(\\n        \"--ignore-mailto-links\",\\n        action=\"store_true\",\\n        dest=\"ignore_mailto_links\",\\n        default=config.IGNORE_MAILTO_LINKS,\\n        help=\"don\\'t include mailto: links\",\\n    )\\n    p.add_argument(\\n        \"--protect-links\",\\n        dest=\"protect_links\",\\n        action=\"store_true\",\\n        default=config.PROTECT_LINKS,\\n        help=\"protect links from line breaks surrounding them with angle brackets\",\\n    )\\n    p.add_argument(\\n        \"--ignore-images\",\\n        dest=\"ignore_images\",\\n        action=\"store_true\",\\n        default=config.IGNORE_IMAGES,\\n        help=\"don\\'t include any formatting for images\",\\n    )\\n    p.add_argument(\\n        \"--images-as-html\",\\n        dest=\"images_as_html\",\\n        action=\"store_true\",\\n        default=config.IMAGES_AS_HTML,\\n        help=(\\n            \"Always write image tags as raw html; preserves `height`, `width` and \"\\n            \"`alt` if possible.\"\\n        ),\\n    )\\n    p.add_argument(\\n        \"--images-to-alt\",\\n        dest=\"images_to_alt\",\\n        action=\"store_true\",\\n        default=config.IMAGES_TO_ALT,\\n        help=\"Discard image data, only keep alt text\",\\n    )\\n    p.add_argument(\\n        \"--images-with-size\",\\n        dest=\"images_with_size\",\\n        action=\"store_true\",\\n        default=config.IMAGES_WITH_SIZE,\\n        help=(\\n            \"Write image tags with height and width attrs as raw html to retain \"\\n            \"dimensions\"\\n        ),\\n    )\\n    p.add_argument(\\n        \"-g\",\\n        \"--google-doc\",\\n        action=\"store_true\",\\n        dest=\"google_doc\",\\n        default=False,\\n        help=\"convert an html-exported Google Document\",\\n    )\\n    p.add_argument(\\n        \"-d\",\\n        \"--dash-unordered-list\",\\n        action=\"store_true\",\\n        dest=\"ul_style_dash\",\\n        default=False,\\n        help=\"use a dash rather than a star for unordered list items\",\\n    )\\n    p.add_argument(\\n        \"-e\",\\n        \"--asterisk-emphasis\",\\n        action=\"store_true\",\\n        dest=\"em_style_asterisk\",\\n        default=False,\\n        help=\"use an asterisk rather than an underscore for emphasized text\",\\n    )\\n    p.add_argument(\\n        \"-b\",\\n        \"--body-width\",\\n        dest=\"body_width\",\\n        type=int,\\n        default=config.BODY_WIDTH,\\n        help=\"number of characters per output line, 0 for no wrap\",\\n    )\\n    p.add_argument(\\n        \"-i\",\\n        \"--google-list-indent\",\\n        dest=\"list_indent\",\\n        type=int,\\n        default=config.GOOGLE_LIST_INDENT,\\n        help=\"number of pixels Google indents nested lists\",\\n    )\\n    p.add_argument(\\n        \"-s\",\\n        \"--hide-strikethrough\",\\n        action=\"store_true\",\\n        dest=\"hide_strikethrough\",\\n        default=False,\\n        help=\"hide strike-through text. only relevant when -g is \" \"specified as well\",\\n    )\\n    p.add_argument(\\n        \"--escape-all\",\\n        action=\"store_true\",\\n        dest=\"escape_snob\",\\n        default=False,\\n        help=(\\n            \"Escape all special characters.  Output is less readable, but avoids \"\\n            \"corner case formatting issues.\"\\n        ),\\n    )\\n    p.add_argument(\\n        \"--bypass-tables\",\\n        action=\"store_true\",\\n        dest=\"bypass_tables\",\\n        default=config.BYPASS_TABLES,\\n        help=\"Format tables in HTML rather than Markdown syntax.\",\\n    )\\n    p.add_argument(\\n        \"--ignore-tables\",\\n        action=\"store_true\",\\n        dest=\"ignore_tables\",\\n        default=config.IGNORE_TABLES,\\n        help=\"Ignore table-related tags (table, th, td, tr) \" \"while keeping rows.\",\\n    )\\n    p.add_argument(\\n        \"--single-line-break\",\\n        action=\"store_true\",\\n        dest=\"single_line_break\",\\n        default=config.SINGLE_LINE_BREAK,\\n        help=(\\n            \"Use a single line break after a block element rather than two line \"\\n            \"breaks. NOTE: Requires --body-width=0\"\\n        ),\\n    )\\n    p.add_argument(\\n        \"--unicode-snob\",\\n        action=\"store_true\",\\n        dest=\"unicode_snob\",\\n        default=config.UNICODE_SNOB,\\n        help=\"Use unicode throughout document\",\\n    )\\n    p.add_argument(\\n        \"--no-automatic-links\",\\n        action=\"store_false\",\\n        dest=\"use_automatic_links\",\\n        default=config.USE_AUTOMATIC_LINKS,\\n        help=\"Do not use automatic links wherever applicable\",\\n    )\\n    p.add_argument(\\n        \"--no-skip-internal-links\",\\n        action=\"store_false\",\\n        dest=\"skip_internal_links\",\\n        default=config.SKIP_INTERNAL_LINKS,\\n        help=\"Do not skip internal links\",\\n    )\\n    p.add_argument(\\n        \"--links-after-para\",\\n        action=\"store_true\",\\n        dest=\"links_each_paragraph\",\\n        default=config.LINKS_EACH_PARAGRAPH,\\n        help=\"Put links after each paragraph instead of document\",\\n    )\\n    p.add_argument(\\n        \"--mark-code\",\\n        action=\"store_true\",\\n        dest=\"mark_code\",\\n        default=config.MARK_CODE,\\n        help=\"Mark program code blocks with [code]...[/code]\",\\n    )\\n    p.add_argument(\\n        \"--decode-errors\",\\n        dest=\"decode_errors\",\\n        default=config.DECODE_ERRORS,\\n        help=(\\n            \"What to do in case of decode errors.\\'ignore\\', \\'strict\\' and \\'replace\\' are \"\\n            \"acceptable values\"\\n        ),\\n    )\\n    p.add_argument(\\n        \"--open-quote\",\\n        dest=\"open_quote\",\\n        default=config.OPEN_QUOTE,\\n        help=\"The character used to open quotes\",\\n    )\\n    p.add_argument(\\n        \"--close-quote\",\\n        dest=\"close_quote\",\\n        default=config.CLOSE_QUOTE,\\n        help=\"The character used to close quotes\",\\n    )\\n    p.add_argument(\\n        \"--version\", action=\"version\", version=\".\".join(map(str, __version__))\\n    )\\n    p.add_argument(\"filename\", nargs=\"?\")\\n    p.add_argument(\"encoding\", nargs=\"?\", default=\"utf-8\")\\n    args = p.parse_args()\\n\\n    if args.filename and args.filename != \"-\":\\n        with open(args.filename, \"rb\") as fp:\\n            data = fp.read()\\n    else:\\n        data = sys.stdin.buffer.read()\\n\\n    try:\\n        html = data.decode(args.encoding, args.decode_errors)\\n    except UnicodeDecodeError as err:\\n        warning = bcolors.WARNING + \"Warning:\" + bcolors.ENDC\\n        warning += \" Use the \" + bcolors.OKGREEN\\n        warning += \"--decode-errors=ignore\" + bcolors.ENDC + \" flag.\"\\n        print(warning)\\n        raise err\\n\\n    h = HTML2Text(baseurl=baseurl)\\n    # handle options\\n    if args.ul_style_dash:\\n        h.ul_item_mark = \"-\"\\n    if args.em_style_asterisk:\\n        h.emphasis_mark = \"*\"\\n        h.strong_mark = \"__\"\\n\\n    h.body_width = args.body_width\\n    h.google_list_indent = args.list_indent\\n    h.ignore_emphasis = args.ignore_emphasis\\n    h.ignore_links = args.ignore_links\\n    h.ignore_mailto_links = args.ignore_mailto_links\\n    h.protect_links = args.protect_links\\n    h.ignore_images = args.ignore_images\\n    h.images_as_html = args.images_as_html\\n    h.images_to_alt = args.images_to_alt\\n    h.images_with_size = args.images_with_size\\n    h.google_doc = args.google_doc\\n    h.hide_strikethrough = args.hide_strikethrough\\n    h.escape_snob = args.escape_snob\\n    h.bypass_tables = args.bypass_tables\\n    h.ignore_tables = args.ignore_tables\\n    h.single_line_break = args.single_line_break\\n    h.inline_links = args.inline_links\\n    h.unicode_snob = args.unicode_snob\\n    h.use_automatic_links = args.use_automatic_links\\n    h.skip_internal_links = args.skip_internal_links\\n    h.links_each_paragraph = args.links_each_paragraph\\n    h.mark_code = args.mark_code\\n    h.wrap_links = args.wrap_links\\n    h.wrap_list_items = args.wrap_list_items\\n    h.wrap_tables = args.wrap_tables\\n    h.pad_tables = args.pad_tables\\n    h.default_image_alt = args.default_image_alt\\n    h.open_quote = args.open_quote\\n    h.close_quote = args.close_quote\\n\\n    sys.stdout.write(h.handle(html))\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'import re\\n\\n# Use Unicode characters instead of their ascii pseudo-replacements\\nUNICODE_SNOB = False\\n\\n# Marker to use for marking tables for padding post processing\\nTABLE_MARKER_FOR_PAD = \"special_marker_for_table_padding\"\\n# Escape all special characters.  Output is less readable, but avoids\\n# corner case formatting issues.\\nESCAPE_SNOB = False\\n\\n# Put the links after each paragraph instead of at the end.\\nLINKS_EACH_PARAGRAPH = False\\n\\n# Wrap long lines at position. 0 for no wrapping.\\nBODY_WIDTH = 78\\n\\n# Don\\'t show internal links (href=\"#local-anchor\") -- corresponding link\\n# targets won\\'t be visible in the plain text file anyway.\\nSKIP_INTERNAL_LINKS = True\\n\\n# Use inline, rather than reference, formatting for images and links\\nINLINE_LINKS = True\\n\\n# Protect links from line breaks surrounding them with angle brackets (in\\n# addition to their square brackets)\\nPROTECT_LINKS = False\\n# WRAP_LINKS = True\\nWRAP_LINKS = True\\n\\n# Wrap list items.\\nWRAP_LIST_ITEMS = False\\n\\n# Wrap tables\\nWRAP_TABLES = False\\n\\n# Number of pixels Google indents nested lists\\nGOOGLE_LIST_INDENT = 36\\n\\n# Values Google and others may use to indicate bold text\\nBOLD_TEXT_STYLE_VALUES = (\"bold\", \"700\", \"800\", \"900\")\\n\\nIGNORE_ANCHORS = False\\nIGNORE_MAILTO_LINKS = False\\nIGNORE_IMAGES = False\\nIMAGES_AS_HTML = False\\nIMAGES_TO_ALT = False\\nIMAGES_WITH_SIZE = False\\nIGNORE_EMPHASIS = False\\nMARK_CODE = False\\nDECODE_ERRORS = \"strict\"\\nDEFAULT_IMAGE_ALT = \"\"\\nPAD_TABLES = False\\n\\n# Convert links with same href and text to <href> format\\n# if they are absolute links\\nUSE_AUTOMATIC_LINKS = True\\n\\n# For checking space-only lines on line 771\\nRE_SPACE = re.compile(r\"\\\\s\\\\+\")\\n\\nRE_ORDERED_LIST_MATCHER = re.compile(r\"\\\\d+\\\\.\\\\s\")\\nRE_UNORDERED_LIST_MATCHER = re.compile(r\"[-\\\\*\\\\+]\\\\s\")\\nRE_MD_CHARS_MATCHER = re.compile(r\"([\\\\\\\\\\\\[\\\\]\\\\(\\\\)])\")\\nRE_MD_CHARS_MATCHER_ALL = re.compile(r\"([`\\\\*_{}\\\\[\\\\]\\\\(\\\\)#!])\")\\n\\n# to find links in the text\\nRE_LINK = re.compile(r\"(\\\\[.*?\\\\] ?\\\\(.*?\\\\))|(\\\\[.*?\\\\]:.*?)\")\\n\\n# to find table separators\\nRE_TABLE = re.compile(r\" \\\\| \")\\n\\nRE_MD_DOT_MATCHER = re.compile(\\n    r\"\"\"\\n    ^             # start of line\\n    (\\\\s*\\\\d+)      # optional whitespace and a number\\n    (\\\\.)          # dot\\n    (?=\\\\s)        # lookahead assert whitespace\\n    \"\"\",\\n    re.MULTILINE | re.VERBOSE,\\n)\\nRE_MD_PLUS_MATCHER = re.compile(\\n    r\"\"\"\\n    ^\\n    (\\\\s*)\\n    (\\\\+)\\n    (?=\\\\s)\\n    \"\"\",\\n    flags=re.MULTILINE | re.VERBOSE,\\n)\\nRE_MD_DASH_MATCHER = re.compile(\\n    r\"\"\"\\n    ^\\n    (\\\\s*)\\n    (-)\\n    (?=\\\\s|\\\\-)     # followed by whitespace (bullet list, or spaced out hr)\\n                  # or another dash (header or hr)\\n    \"\"\",\\n    flags=re.MULTILINE | re.VERBOSE,\\n)\\nRE_SLASH_CHARS = r\"\\\\`*_{}[]()#+-.!\"\\nRE_MD_BACKSLASH_MATCHER = re.compile(\\n    r\"\"\"\\n    (\\\\\\\\)          # match one slash\\n    (?=[%s])      # followed by a char that requires escaping\\n    \"\"\"\\n    % re.escape(RE_SLASH_CHARS),\\n    flags=re.VERBOSE,\\n)\\n\\nUNIFIABLE = {\\n    \"rsquo\": \"\\'\",\\n    \"lsquo\": \"\\'\",\\n    \"rdquo\": \\'\"\\',\\n    \"ldquo\": \\'\"\\',\\n    \"copy\": \"(C)\",\\n    \"mdash\": \"--\",\\n    \"nbsp\": \" \",\\n    \"rarr\": \"->\",\\n    \"larr\": \"<-\",\\n    \"middot\": \"*\",\\n    \"ndash\": \"-\",\\n    \"oelig\": \"oe\",\\n    \"aelig\": \"ae\",\\n    \"agrave\": \"a\",\\n    \"aacute\": \"a\",\\n    \"acirc\": \"a\",\\n    \"atilde\": \"a\",\\n    \"auml\": \"a\",\\n    \"aring\": \"a\",\\n    \"egrave\": \"e\",\\n    \"eacute\": \"e\",\\n    \"ecirc\": \"e\",\\n    \"euml\": \"e\",\\n    \"igrave\": \"i\",\\n    \"iacute\": \"i\",\\n    \"icirc\": \"i\",\\n    \"iuml\": \"i\",\\n    \"ograve\": \"o\",\\n    \"oacute\": \"o\",\\n    \"ocirc\": \"o\",\\n    \"otilde\": \"o\",\\n    \"ouml\": \"o\",\\n    \"ugrave\": \"u\",\\n    \"uacute\": \"u\",\\n    \"ucirc\": \"u\",\\n    \"uuml\": \"u\",\\n    \"lrm\": \"\",\\n    \"rlm\": \"\",\\n}\\n\\n# Format tables in HTML rather than Markdown syntax\\nBYPASS_TABLES = False\\n# Ignore table-related tags (table, th, td, tr) while keeping rows\\nIGNORE_TABLES = False\\n\\n\\n# Use a single line break after a block element rather than two line breaks.\\n# NOTE: Requires body width setting to be 0.\\nSINGLE_LINE_BREAK = False\\n\\n\\n# Use double quotation marks when converting the <q> tag.\\nOPEN_QUOTE = \\'\"\\'\\nCLOSE_QUOTE = \\'\"\\'\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'from typing import Dict, Optional\\n\\n\\nclass AnchorElement:\\n    __slots__ = [\"attrs\", \"count\", \"outcount\"]\\n\\n    def __init__(self, attrs: Dict[str, Optional[str]], count: int, outcount: int):\\n        self.attrs = attrs\\n        self.count = count\\n        self.outcount = outcount\\n\\n\\nclass ListElement:\\n    __slots__ = [\"name\", \"num\"]\\n\\n    def __init__(self, name: str, num: int):\\n        self.name = name\\n        self.num = num\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'class OutCallback:\\n    def __call__(self, s: str) -> None:\\n        ...\\n'"}, "return_value": "'utf-8'"}, {"func_args": {"source": "b'import html.entities\\nfrom typing import Dict, List, Optional\\n\\nfrom . import config\\n\\nunifiable_n = {\\n    html.entities.name2codepoint[k]: v\\n    for k, v in config.UNIFIABLE.items()\\n    if k != \"nbsp\"\\n}\\n\\n\\ndef hn(tag: str) -> int:\\n    if tag[0] == \"h\" and len(tag) == 2:\\n        n = tag[1]\\n        if \"0\" < n <= \"9\":\\n            return int(n)\\n    return 0\\n\\n\\ndef dumb_property_dict(style: str) -> Dict[str, str]:\\n    \"\"\"\\n    :returns: A hash of css attributes\\n    \"\"\"\\n    return {\\n        x.strip().lower(): y.strip().lower()\\n        for x, y in [z.split(\":\", 1) for z in style.split(\";\") if \":\" in z]\\n    }\\n\\n\\ndef dumb_css_parser(data: str) -> Dict[str, Dict[str, str]]:\\n    \"\"\"\\n    :type data: str\\n\\n    :returns: A hash of css selectors, each of which contains a hash of\\n    css attributes.\\n    :rtype: dict\\n    \"\"\"\\n    # remove @import sentences\\n    data += \";\"\\n    importIndex = data.find(\"@import\")\\n    while importIndex != -1:\\n        data = data[0:importIndex] + data[data.find(\";\", importIndex) + 1 :]\\n        importIndex = data.find(\"@import\")\\n\\n    # parse the css. reverted from dictionary comprehension in order to\\n    # support older pythons\\n    pairs = [x.split(\"{\") for x in data.split(\"}\") if \"{\" in x.strip()]\\n    try:\\n        elements = {a.strip(): dumb_property_dict(b) for a, b in pairs}\\n    except ValueError:\\n        elements = {}  # not that important\\n\\n    return elements\\n\\n\\ndef element_style(\\n    attrs: Dict[str, Optional[str]],\\n    style_def: Dict[str, Dict[str, str]],\\n    parent_style: Dict[str, str],\\n) -> Dict[str, str]:\\n    \"\"\"\\n    :type attrs: dict\\n    :type style_def: dict\\n    :type style_def: dict\\n\\n    :returns: A hash of the \\'final\\' style attributes of the element\\n    :rtype: dict\\n    \"\"\"\\n    style = parent_style.copy()\\n    if \"class\" in attrs:\\n        assert attrs[\"class\"] is not None\\n        for css_class in attrs[\"class\"].split():\\n            css_style = style_def.get(\".\" + css_class, {})\\n            style.update(css_style)\\n    if \"style\" in attrs:\\n        assert attrs[\"style\"] is not None\\n        immediate_style = dumb_property_dict(attrs[\"style\"])\\n        style.update(immediate_style)\\n\\n    return style\\n\\n\\ndef google_list_style(style: Dict[str, str]) -> str:\\n    \"\"\"\\n    Finds out whether this is an ordered or unordered list\\n\\n    :type style: dict\\n\\n    :rtype: str\\n    \"\"\"\\n    if \"list-style-type\" in style:\\n        list_style = style[\"list-style-type\"]\\n        if list_style in [\"disc\", \"circle\", \"square\", \"none\"]:\\n            return \"ul\"\\n\\n    return \"ol\"\\n\\n\\ndef google_has_height(style: Dict[str, str]) -> bool:\\n    \"\"\"\\n    Check if the style of the element has the \\'height\\' attribute\\n    explicitly defined\\n\\n    :type style: dict\\n\\n    :rtype: bool\\n    \"\"\"\\n    return \"height\" in style\\n\\n\\ndef google_text_emphasis(style: Dict[str, str]) -> List[str]:\\n    \"\"\"\\n    :type style: dict\\n\\n    :returns: A list of all emphasis modifiers of the element\\n    :rtype: list\\n    \"\"\"\\n    emphasis = []\\n    if \"text-decoration\" in style:\\n        emphasis.append(style[\"text-decoration\"])\\n    if \"font-style\" in style:\\n        emphasis.append(style[\"font-style\"])\\n    if \"font-weight\" in style:\\n        emphasis.append(style[\"font-weight\"])\\n\\n    return emphasis\\n\\n\\ndef google_fixed_width_font(style: Dict[str, str]) -> bool:\\n    \"\"\"\\n    Check if the css of the current element defines a fixed width font\\n\\n    :type style: dict\\n\\n    :rtype: bool\\n    \"\"\"\\n    font_family = \"\"\\n    if \"font-family\" in style:\\n        font_family = style[\"font-family\"]\\n    return \"courier new\" == font_family or \"consolas\" == font_family\\n\\n\\ndef list_numbering_start(attrs: Dict[str, Optional[str]]) -> int:\\n    \"\"\"\\n    Extract numbering from list element attributes\\n\\n    :type attrs: dict\\n\\n    :rtype: int or None\\n    \"\"\"\\n    if \"start\" in attrs:\\n        assert attrs[\"start\"] is not None\\n        try:\\n            return int(attrs[\"start\"]) - 1\\n        except ValueError:\\n            pass\\n\\n    return 0\\n\\n\\ndef skipwrap(\\n    para: str, wrap_links: bool, wrap_list_items: bool, wrap_tables: bool\\n) -> bool:\\n    # If it appears to contain a link\\n    # don\\'t wrap\\n    if not wrap_links and config.RE_LINK.search(para):\\n        return True\\n    # If the text begins with four spaces or one tab, it\\'s a code block;\\n    # don\\'t wrap\\n    if para[0:4] == \"    \" or para[0] == \"\\\\t\":\\n        return True\\n\\n    # If the text begins with only two \"--\", possibly preceded by\\n    # whitespace, that\\'s an emdash; so wrap.\\n    stripped = para.lstrip()\\n    if stripped[0:2] == \"--\" and len(stripped) > 2 and stripped[2] != \"-\":\\n        return False\\n\\n    # I\\'m not sure what this is for; I thought it was to detect lists,\\n    # but there\\'s a <br>-inside-<span> case in one of the tests that\\n    # also depends upon it.\\n    if stripped[0:1] in (\"-\", \"*\") and not stripped[0:2] == \"**\":\\n        return not wrap_list_items\\n\\n    # If text contains a pipe character it is likely a table\\n    if not wrap_tables and config.RE_TABLE.search(para):\\n        return True\\n\\n    # If the text begins with a single -, *, or +, followed by a space,\\n    # or an integer, followed by a ., followed by a space (in either\\n    # case optionally proceeded by whitespace), it\\'s a list; don\\'t wrap.\\n    return bool(\\n        config.RE_ORDERED_LIST_MATCHER.match(stripped)\\n        or config.RE_UNORDERED_LIST_MATCHER.match(stripped)\\n    )\\n\\n\\ndef escape_md(text: str) -> str:\\n    \"\"\"\\n    Escapes markdown-sensitive characters within other markdown\\n    constructs.\\n    \"\"\"\\n    return config.RE_MD_CHARS_MATCHER.sub(r\"\\\\\\\\\\\\1\", text)\\n\\n\\ndef escape_md_section(text: str, snob: bool = False) -> str:\\n    \"\"\"\\n    Escapes markdown-sensitive characters across whole document sections.\\n    \"\"\"\\n    text = config.RE_MD_BACKSLASH_MATCHER.sub(r\"\\\\\\\\\\\\1\", text)\\n\\n    if snob:\\n        text = config.RE_MD_CHARS_MATCHER_ALL.sub(r\"\\\\\\\\\\\\1\", text)\\n\\n    text = config.RE_MD_DOT_MATCHER.sub(r\"\\\\1\\\\\\\\\\\\2\", text)\\n    text = config.RE_MD_PLUS_MATCHER.sub(r\"\\\\1\\\\\\\\\\\\2\", text)\\n    text = config.RE_MD_DASH_MATCHER.sub(r\"\\\\1\\\\\\\\\\\\2\", text)\\n\\n    return text\\n\\n\\ndef reformat_table(lines: List[str], right_margin: int) -> List[str]:\\n    \"\"\"\\n    Given the lines of a table\\n    padds the cells and returns the new lines\\n    \"\"\"\\n    # find the maximum width of the columns\\n    max_width = [len(x.rstrip()) + right_margin for x in lines[0].split(\"|\")]\\n    max_cols = len(max_width)\\n    for line in lines:\\n        cols = [x.rstrip() for x in line.split(\"|\")]\\n        num_cols = len(cols)\\n\\n        # don\\'t drop any data if colspan attributes result in unequal lengths\\n        if num_cols < max_cols:\\n            cols += [\"\"] * (max_cols - num_cols)\\n        elif max_cols < num_cols:\\n            max_width += [len(x) + right_margin for x in cols[-(num_cols - max_cols) :]]\\n            max_cols = num_cols\\n\\n        max_width = [\\n            max(len(x) + right_margin, old_len) for x, old_len in zip(cols, max_width)\\n        ]\\n\\n    # reformat\\n    new_lines = []\\n    for line in lines:\\n        cols = [x.rstrip() for x in line.split(\"|\")]\\n        if set(line.strip()) == set(\"-|\"):\\n            filler = \"-\"\\n            new_cols = [\\n                x.rstrip() + (filler * (M - len(x.rstrip())))\\n                for x, M in zip(cols, max_width)\\n            ]\\n            new_lines.append(\"|-\" + \"|\".join(new_cols) + \"|\")\\n        else:\\n            filler = \" \"\\n            new_cols = [\\n                x.rstrip() + (filler * (M - len(x.rstrip())))\\n                for x, M in zip(cols, max_width)\\n            ]\\n            new_lines.append(\"| \" + \"|\".join(new_cols) + \"|\")\\n    return new_lines\\n\\n\\ndef pad_tables_in_text(text: str, right_margin: int = 1) -> str:\\n    \"\"\"\\n    Provide padding for tables in the text\\n    \"\"\"\\n    lines = text.split(\"\\\\n\")\\n    table_buffer = []  # type: List[str]\\n    table_started = False\\n    new_lines = []\\n    for line in lines:\\n        # Toggle table started\\n        if config.TABLE_MARKER_FOR_PAD in line:\\n            table_started = not table_started\\n            if not table_started:\\n                table = reformat_table(table_buffer, right_margin)\\n                new_lines.extend(table)\\n                table_buffer = []\\n                new_lines.append(\"\")\\n            continue\\n        # Process lines\\n        if table_started:\\n            table_buffer.append(line)\\n        else:\\n            new_lines.append(line)\\n    return \"\\\\n\".join(new_lines)\\n'"}, "return_value": "'utf-8'"}]}, "neuter_encoding_declaration": {"line": 214, "args": [{"func_args": {"source": "'\"\"\"html2text: Turn HTML into equivalent Markdown-structured text.\"\"\"\\n\\nimport html.entities\\nimport html.parser\\nimport re\\nimport string\\nimport urllib.parse as urlparse\\nfrom textwrap import wrap\\nfrom typing import Dict, List, Optional, Tuple, Union\\n\\nfrom . import config\\nfrom .elements import AnchorElement, ListElement\\nfrom .typing import OutCallback\\nfrom .utils import (\\n    dumb_css_parser,\\n    element_style,\\n    escape_md,\\n    escape_md_section,\\n    google_fixed_width_font,\\n    google_has_height,\\n    google_list_style,\\n    google_text_emphasis,\\n    hn,\\n    list_numbering_start,\\n    pad_tables_in_text,\\n    skipwrap,\\n    unifiable_n,\\n)\\n\\n__version__ = (2020, 1, 16)\\n\\n\\n# TODO:\\n# Support decoded entities with UNIFIABLE.\\n\\n\\nclass HTML2Text(html.parser.HTMLParser):\\n    def __init__(\\n        self,\\n        out: Optional[OutCallback] = None,\\n        baseurl: str = \"\",\\n        bodywidth: int = config.BODY_WIDTH,\\n    ) -> None:\\n        \"\"\"\\n        Input parameters:\\n            out: possible custom replacement for self.outtextf (which\\n                 appends lines of text).\\n            baseurl: base URL of the document we process\\n        \"\"\"\\n        super().__init__(convert_charrefs=False)\\n\\n        # Config options\\n        self.split_next_td = False\\n        self.td_count = 0\\n        self.table_start = False\\n        self.unicode_snob = config.UNICODE_SNOB  # covered in cli\\n        self.escape_snob = config.ESCAPE_SNOB  # covered in cli\\n        self.links_each_paragraph = config.LINKS_EACH_PARAGRAPH\\n        self.body_width = bodywidth  # covered in cli\\n        self.skip_internal_links = config.SKIP_INTERNAL_LINKS  # covered in cli\\n        self.inline_links = config.INLINE_LINKS  # covered in cli\\n        self.protect_links = config.PROTECT_LINKS  # covered in cli\\n        self.google_list_indent = config.GOOGLE_LIST_INDENT  # covered in cli\\n        self.ignore_links = config.IGNORE_ANCHORS  # covered in cli\\n        self.ignore_mailto_links = config.IGNORE_MAILTO_LINKS  # covered in cli\\n        self.ignore_images = config.IGNORE_IMAGES  # covered in cli\\n        self.images_as_html = config.IMAGES_AS_HTML  # covered in cli\\n        self.images_to_alt = config.IMAGES_TO_ALT  # covered in cli\\n        self.images_with_size = config.IMAGES_WITH_SIZE  # covered in cli\\n        self.ignore_emphasis = config.IGNORE_EMPHASIS  # covered in cli\\n        self.bypass_tables = config.BYPASS_TABLES  # covered in cli\\n        self.ignore_tables = config.IGNORE_TABLES  # covered in cli\\n        self.google_doc = False  # covered in cli\\n        self.ul_item_mark = \"*\"  # covered in cli\\n        self.emphasis_mark = \"_\"  # covered in cli\\n        self.strong_mark = \"**\"\\n        self.single_line_break = config.SINGLE_LINE_BREAK  # covered in cli\\n        self.use_automatic_links = config.USE_AUTOMATIC_LINKS  # covered in cli\\n        self.hide_strikethrough = False  # covered in cli\\n        self.mark_code = config.MARK_CODE\\n        self.wrap_list_items = config.WRAP_LIST_ITEMS  # covered in cli\\n        self.wrap_links = config.WRAP_LINKS  # covered in cli\\n        self.wrap_tables = config.WRAP_TABLES\\n        self.pad_tables = config.PAD_TABLES  # covered in cli\\n        self.default_image_alt = config.DEFAULT_IMAGE_ALT  # covered in cli\\n        self.tag_callback = None\\n        self.open_quote = config.OPEN_QUOTE  # covered in cli\\n        self.close_quote = config.CLOSE_QUOTE  # covered in cli\\n\\n        if out is None:\\n            self.out = self.outtextf\\n        else:\\n            self.out = out\\n\\n        # empty list to store output characters before they are \"joined\"\\n        self.outtextlist = []  # type: List[str]\\n\\n        self.quiet = 0\\n        self.p_p = 0  # number of newline character to print before next output\\n        self.outcount = 0\\n        self.start = True\\n        self.space = False\\n        self.a = []  # type: List[AnchorElement]\\n        self.astack = []  # type: List[Optional[Dict[str, Optional[str]]]]\\n        self.maybe_automatic_link = None  # type: Optional[str]\\n        self.empty_link = False\\n        self.absolute_url_matcher = re.compile(r\"^[a-zA-Z+]+://\")\\n        self.acount = 0\\n        self.list = []  # type: List[ListElement]\\n        self.blockquote = 0\\n        self.pre = False\\n        self.startpre = False\\n        self.code = False\\n        self.quote = False\\n        self.br_toggle = \"\"\\n        self.lastWasNL = False\\n        self.lastWasList = False\\n        self.style = 0\\n        self.style_def = {}  # type: Dict[str, Dict[str, str]]\\n        self.tag_stack = (\\n            []\\n        )  # type: List[Tuple[str, Dict[str, Optional[str]], Dict[str, str]]]\\n        self.emphasis = 0\\n        self.drop_white_space = 0\\n        self.inheader = False\\n        # Current abbreviation definition\\n        self.abbr_title = None  # type: Optional[str]\\n        # Last inner HTML (for abbr being defined)\\n        self.abbr_data = None  # type: Optional[str]\\n        # Stack of abbreviations to write later\\n        self.abbr_list = {}  # type: Dict[str, str]\\n        self.baseurl = baseurl\\n        self.stressed = False\\n        self.preceding_stressed = False\\n        self.preceding_data = \"\"\\n        self.current_tag = \"\"\\n\\n        config.UNIFIABLE[\"nbsp\"] = \"&nbsp_place_holder;\"\\n\\n    def feed(self, data: str) -> None:\\n        data = data.replace(\"</\\' + \\'script>\", \"</ignore>\")\\n        super().feed(data)\\n\\n    def handle(self, data: str) -> str:\\n        self.feed(data)\\n        self.feed(\"\")\\n        markdown = self.optwrap(self.finish())\\n        if self.pad_tables:\\n            return pad_tables_in_text(markdown)\\n        else:\\n            return markdown\\n\\n    def outtextf(self, s: str) -> None:\\n        self.outtextlist.append(s)\\n        if s:\\n            self.lastWasNL = s[-1] == \"\\\\n\"\\n\\n    def finish(self) -> str:\\n        self.close()\\n\\n        self.pbr()\\n        self.o(\"\", force=\"end\")\\n\\n        outtext = \"\".join(self.outtextlist)\\n\\n        if self.unicode_snob:\\n            nbsp = html.entities.html5[\"nbsp;\"]\\n        else:\\n            nbsp = \" \"\\n        outtext = outtext.replace(\"&nbsp_place_holder;\", nbsp)\\n\\n        # Clear self.outtextlist to avoid memory leak of its content to\\n        # the next handling.\\n        self.outtextlist = []\\n\\n        return outtext\\n\\n    def handle_charref(self, c: str) -> None:\\n        self.handle_data(self.charref(c), True)\\n\\n    def handle_entityref(self, c: str) -> None:\\n        ref = self.entityref(c)\\n\\n        # ref may be an empty string (e.g. for &lrm;/&rlm; markers that should\\n        # not contribute to the final output).\\n        # self.handle_data cannot handle a zero-length string right after a\\n        # stressed tag or mid-text within a stressed tag (text get split and\\n        # self.stressed/self.preceding_stressed gets switched after the first\\n        # part of that text).\\n        if ref:\\n            self.handle_data(ref, True)\\n\\n    def handle_starttag(self, tag: str, attrs: List[Tuple[str, Optional[str]]]) -> None:\\n        self.handle_tag(tag, dict(attrs), start=True)\\n\\n    def handle_endtag(self, tag: str) -> None:\\n        self.handle_tag(tag, {}, start=False)\\n\\n    def previousIndex(self, attrs: Dict[str, Optional[str]]) -> Optional[int]:\\n        \"\"\"\\n        :type attrs: dict\\n\\n        :returns: The index of certain set of attributes (of a link) in the\\n        self.a list. If the set of attributes is not found, returns None\\n        :rtype: int\\n        \"\"\"\\n        if \"href\" not in attrs:\\n            return None\\n\\n        match = False\\n        for i, a in enumerate(self.a):\\n            if \"href\" in a.attrs and a.attrs[\"href\"] == attrs[\"href\"]:\\n                if \"title\" in a.attrs or \"title\" in attrs:\\n                    if (\\n                        \"title\" in a.attrs\\n                        and \"title\" in attrs\\n                        and a.attrs[\"title\"] == attrs[\"title\"]\\n                    ):\\n                        match = True\\n                else:\\n                    match = True\\n\\n            if match:\\n                return i\\n        return None\\n\\n    def handle_emphasis(\\n        self, start: bool, tag_style: Dict[str, str], parent_style: Dict[str, str]\\n    ) -> None:\\n        \"\"\"\\n        Handles various text emphases\\n        \"\"\"\\n        tag_emphasis = google_text_emphasis(tag_style)\\n        parent_emphasis = google_text_emphasis(parent_style)\\n\\n        # handle Google\\'s text emphasis\\n        strikethrough = \"line-through\" in tag_emphasis and self.hide_strikethrough\\n\\n        # google and others may mark a font\\'s weight as `bold` or `700`\\n        bold = False\\n        for bold_marker in config.BOLD_TEXT_STYLE_VALUES:\\n            bold = bold_marker in tag_emphasis and bold_marker not in parent_emphasis\\n            if bold:\\n                break\\n\\n        italic = \"italic\" in tag_emphasis and \"italic\" not in parent_emphasis\\n        fixed = (\\n            google_fixed_width_font(tag_style)\\n            and not google_fixed_width_font(parent_style)\\n            and not self.pre\\n        )\\n\\n        if start:\\n            # crossed-out text must be handled before other attributes\\n            # in order not to output qualifiers unnecessarily\\n            if bold or italic or fixed:\\n                self.emphasis += 1\\n            if strikethrough:\\n                self.quiet += 1\\n            if italic:\\n                self.o(self.emphasis_mark)\\n                self.drop_white_space += 1\\n            if bold:\\n                self.o(self.strong_mark)\\n                self.drop_white_space += 1\\n            if fixed:\\n                self.o(\"`\")\\n                self.drop_white_space += 1\\n                self.code = True\\n        else:\\n            if bold or italic or fixed:\\n                # there must not be whitespace before closing emphasis mark\\n                self.emphasis -= 1\\n                self.space = False\\n            if fixed:\\n                if self.drop_white_space:\\n                    # empty emphasis, drop it\\n                    self.drop_white_space -= 1\\n                else:\\n                    self.o(\"`\")\\n                self.code = False\\n            if bold:\\n                if self.drop_white_space:\\n                    # empty emphasis, drop it\\n                    self.drop_white_space -= 1\\n                else:\\n                    self.o(self.strong_mark)\\n            if italic:\\n                if self.drop_white_space:\\n                    # empty emphasis, drop it\\n                    self.drop_white_space -= 1\\n                else:\\n                    self.o(self.emphasis_mark)\\n            # space is only allowed after *all* emphasis marks\\n            if (bold or italic) and not self.emphasis:\\n                self.o(\" \")\\n            if strikethrough:\\n                self.quiet -= 1\\n\\n    def handle_tag(\\n        self, tag: str, attrs: Dict[str, Optional[str]], start: bool\\n    ) -> None:\\n        self.current_tag = tag\\n\\n        if self.tag_callback is not None:\\n            if self.tag_callback(self, tag, attrs, start) is True:\\n                return\\n\\n        # first thing inside the anchor tag is another tag\\n        # that produces some output\\n        if (\\n            start\\n            and self.maybe_automatic_link is not None\\n            and tag not in [\"p\", \"div\", \"style\", \"dl\", \"dt\"]\\n            and (tag != \"img\" or self.ignore_images)\\n        ):\\n            self.o(\"[\")\\n            self.maybe_automatic_link = None\\n            self.empty_link = False\\n\\n        if self.google_doc:\\n            # the attrs parameter is empty for a closing tag. in addition, we\\n            # need the attributes of the parent nodes in order to get a\\n            # complete style description for the current element. we assume\\n            # that google docs export well formed html.\\n            parent_style = {}  # type: Dict[str, str]\\n            if start:\\n                if self.tag_stack:\\n                    parent_style = self.tag_stack[-1][2]\\n                tag_style = element_style(attrs, self.style_def, parent_style)\\n                self.tag_stack.append((tag, attrs, tag_style))\\n            else:\\n                dummy, attrs, tag_style = (\\n                    self.tag_stack.pop() if self.tag_stack else (None, {}, {})\\n                )\\n                if self.tag_stack:\\n                    parent_style = self.tag_stack[-1][2]\\n\\n        if hn(tag):\\n            # check if nh is inside of an \\'a\\' tag (incorrect but found in the wild)\\n            if self.astack:\\n                if start:\\n                    self.inheader = True\\n                    # are inside link name, so only add \\'#\\' if it can appear before \\'[\\'\\n                    if self.outtextlist and self.outtextlist[-1] == \"[\":\\n                        self.outtextlist.pop()\\n                        self.space = False\\n                        self.o(hn(tag) * \"#\" + \" \")\\n                        self.o(\"[\")\\n                else:\\n                    self.p_p = 0  # don\\'t break up link name\\n                    self.inheader = False\\n                    return  # prevent redundant emphasis marks on headers\\n            else:\\n                self.p()\\n                if start:\\n                    self.inheader = True\\n                    self.o(hn(tag) * \"#\" + \" \")\\n                else:\\n                    self.inheader = False\\n                    return  # prevent redundant emphasis marks on headers\\n\\n        if tag in [\"p\", \"div\"]:\\n            if self.google_doc:\\n                if start and google_has_height(tag_style):\\n                    self.p()\\n                else:\\n                    self.soft_br()\\n            elif self.astack:\\n                pass\\n            else:\\n                self.p()\\n\\n        if tag == \"br\" and start:\\n            if self.blockquote > 0:\\n                self.o(\"  \\\\n> \")\\n            else:\\n                self.o(\"  \\\\n\")\\n\\n        if tag == \"hr\" and start:\\n            self.p()\\n            self.o(\"* * *\")\\n            self.p()\\n\\n        if tag in [\"head\", \"style\", \"script\"]:\\n            if start:\\n                self.quiet += 1\\n            else:\\n                self.quiet -= 1\\n\\n        if tag == \"style\":\\n            if start:\\n                self.style += 1\\n            else:\\n                self.style -= 1\\n\\n        if tag in [\"body\"]:\\n            self.quiet = 0  # sites like 9rules.com never close <head>\\n\\n        if tag == \"blockquote\":\\n            if start:\\n                self.p()\\n                self.o(\"> \", force=True)\\n                self.start = True\\n                self.blockquote += 1\\n            else:\\n                self.blockquote -= 1\\n                self.p()\\n\\n        if tag in [\"em\", \"i\", \"u\"] and not self.ignore_emphasis:\\n            # Separate with a space if we immediately follow an alphanumeric\\n            # character, since otherwise Markdown won\\'t render the emphasis\\n            # marks, and we\\'ll be left with eg \\'foo_bar_\\' visible.\\n            # (Don\\'t add a space otherwise, though, since there isn\\'t one in the\\n            # original HTML.)\\n            if (\\n                start\\n                and self.preceding_data\\n                and self.preceding_data[-1] not in string.whitespace\\n                and self.preceding_data[-1] not in string.punctuation\\n            ):\\n                emphasis = \" \" + self.emphasis_mark\\n                self.preceding_data += \" \"\\n            else:\\n                emphasis = self.emphasis_mark\\n\\n            self.o(emphasis)\\n            if start:\\n                self.stressed = True\\n\\n        if tag in [\"strong\", \"b\"] and not self.ignore_emphasis:\\n            # Separate with space if we immediately follow an * character, since\\n            # without it, Markdown won\\'t render the resulting *** correctly.\\n            # (Don\\'t add a space otherwise, though, since there isn\\'t one in the\\n            # original HTML.)\\n            if (\\n                start\\n                and self.preceding_data\\n                and self.preceding_data[-1] == self.strong_mark[0]\\n            ):\\n                strong = \" \" + self.strong_mark\\n                self.preceding_data += \" \"\\n            else:\\n                strong = self.strong_mark\\n\\n            self.o(strong)\\n            if start:\\n                self.stressed = True\\n\\n        if tag in [\"del\", \"strike\", \"s\"]:\\n            if start and self.preceding_data and self.preceding_data[-1] == \"~\":\\n                strike = \" ~~\"\\n                self.preceding_data += \" \"\\n            else:\\n                strike = \"~~\"\\n\\n            self.o(strike)\\n            if start:\\n                self.stressed = True\\n\\n        if self.google_doc:\\n            if not self.inheader:\\n                # handle some font attributes, but leave headers clean\\n                self.handle_emphasis(start, tag_style, parent_style)\\n\\n        if tag in [\"kbd\", \"code\", \"tt\"] and not self.pre:\\n            self.o(\"`\")  # TODO: `` `this` ``\\n            self.code = not self.code\\n\\n        if tag == \"abbr\":\\n            if start:\\n                self.abbr_title = None\\n                self.abbr_data = \"\"\\n                if \"title\" in attrs:\\n                    self.abbr_title = attrs[\"title\"]\\n            else:\\n                if self.abbr_title is not None:\\n                    assert self.abbr_data is not None\\n                    self.abbr_list[self.abbr_data] = self.abbr_title\\n                    self.abbr_title = None\\n                self.abbr_data = None\\n\\n        if tag == \"q\":\\n            if not self.quote:\\n                self.o(self.open_quote)\\n            else:\\n                self.o(self.close_quote)\\n            self.quote = not self.quote\\n\\n        def link_url(self: HTML2Text, link: str, title: str = \"\") -> None:\\n            url = urlparse.urljoin(self.baseurl, link)\\n            title = \\' \"{}\"\\'.format(title) if title.strip() else \"\"\\n            self.o(\"]({url}{title})\".format(url=escape_md(url), title=title))\\n\\n        if tag == \"a\" and not self.ignore_links:\\n            if start:\\n                if (\\n                    \"href\" in attrs\\n                    and attrs[\"href\"] is not None\\n                    and not (self.skip_internal_links and attrs[\"href\"].startswith(\"#\"))\\n                    and not (\\n                        self.ignore_mailto_links and attrs[\"href\"].startswith(\"mailto:\")\\n                    )\\n                ):\\n                    self.astack.append(attrs)\\n                    self.maybe_automatic_link = attrs[\"href\"]\\n                    self.empty_link = True\\n                    if self.protect_links:\\n                        attrs[\"href\"] = \"<\" + attrs[\"href\"] + \">\"\\n                else:\\n                    self.astack.append(None)\\n            else:\\n                if self.astack:\\n                    a = self.astack.pop()\\n                    if self.maybe_automatic_link and not self.empty_link:\\n                        self.maybe_automatic_link = None\\n                    elif a:\\n                        assert a[\"href\"] is not None\\n                        if self.empty_link:\\n                            self.o(\"[\")\\n                            self.empty_link = False\\n                            self.maybe_automatic_link = None\\n                        if self.inline_links:\\n                            self.p_p = 0\\n                            title = a.get(\"title\") or \"\"\\n                            title = escape_md(title)\\n                            link_url(self, a[\"href\"], title)\\n                        else:\\n                            i = self.previousIndex(a)\\n                            if i is not None:\\n                                a_props = self.a[i]\\n                            else:\\n                                self.acount += 1\\n                                a_props = AnchorElement(a, self.acount, self.outcount)\\n                                self.a.append(a_props)\\n                            self.o(\"][\" + str(a_props.count) + \"]\")\\n\\n        if tag == \"img\" and start and not self.ignore_images:\\n            if \"src\" in attrs:\\n                assert attrs[\"src\"] is not None\\n                if not self.images_to_alt:\\n                    attrs[\"href\"] = attrs[\"src\"]\\n                alt = attrs.get(\"alt\") or self.default_image_alt\\n\\n                # If we have images_with_size, write raw html including width,\\n                # height, and alt attributes\\n                if self.images_as_html or (\\n                    self.images_with_size and (\"width\" in attrs or \"height\" in attrs)\\n                ):\\n                    self.o(\"<img src=\\'\" + attrs[\"src\"] + \"\\' \")\\n                    if \"width\" in attrs:\\n                        assert attrs[\"width\"] is not None\\n                        self.o(\"width=\\'\" + attrs[\"width\"] + \"\\' \")\\n                    if \"height\" in attrs:\\n                        assert attrs[\"height\"] is not None\\n                        self.o(\"height=\\'\" + attrs[\"height\"] + \"\\' \")\\n                    if alt:\\n                        self.o(\"alt=\\'\" + alt + \"\\' \")\\n                    self.o(\"/>\")\\n                    return\\n\\n                # If we have a link to create, output the start\\n                if self.maybe_automatic_link is not None:\\n                    href = self.maybe_automatic_link\\n                    if (\\n                        self.images_to_alt\\n                        and escape_md(alt) == href\\n                        and self.absolute_url_matcher.match(href)\\n                    ):\\n                        self.o(\"<\" + escape_md(alt) + \">\")\\n                        self.empty_link = False\\n                        return\\n                    else:\\n                        self.o(\"[\")\\n                        self.maybe_automatic_link = None\\n                        self.empty_link = False\\n\\n                # If we have images_to_alt, we discard the image itself,\\n                # considering only the alt text.\\n                if self.images_to_alt:\\n                    self.o(escape_md(alt))\\n                else:\\n                    self.o(\"![\" + escape_md(alt) + \"]\")\\n                    if self.inline_links:\\n                        href = attrs.get(\"href\") or \"\"\\n                        self.o(\\n                            \"(\" + escape_md(urlparse.urljoin(self.baseurl, href)) + \")\"\\n                        )\\n                    else:\\n                        i = self.previousIndex(attrs)\\n                        if i is not None:\\n                            a_props = self.a[i]\\n                        else:\\n                            self.acount += 1\\n                            a_props = AnchorElement(attrs, self.acount, self.outcount)\\n                            self.a.append(a_props)\\n                        self.o(\"[\" + str(a_props.count) + \"]\")\\n\\n        if tag == \"dl\" and start:\\n            self.p()\\n        if tag == \"dt\" and not start:\\n            self.pbr()\\n        if tag == \"dd\" and start:\\n            self.o(\"    \")\\n        if tag == \"dd\" and not start:\\n            self.pbr()\\n\\n        if tag in [\"ol\", \"ul\"]:\\n            # Google Docs create sub lists as top level lists\\n            if not self.list and not self.lastWasList:\\n                self.p()\\n            if start:\\n                if self.google_doc:\\n                    list_style = google_list_style(tag_style)\\n                else:\\n                    list_style = tag\\n                numbering_start = list_numbering_start(attrs)\\n                self.list.append(ListElement(list_style, numbering_start))\\n            else:\\n                if self.list:\\n                    self.list.pop()\\n                    if not self.google_doc and not self.list:\\n                        self.o(\"\\\\n\")\\n            self.lastWasList = True\\n        else:\\n            self.lastWasList = False\\n\\n        if tag == \"li\":\\n            self.pbr()\\n            if start:\\n                if self.list:\\n                    li = self.list[-1]\\n                else:\\n                    li = ListElement(\"ul\", 0)\\n                if self.google_doc:\\n                    self.o(\"  \" * self.google_nest_count(tag_style))\\n                else:\\n                    # Indent two spaces per list, except use three spaces for an\\n                    # unordered list inside an ordered list.\\n                    # https://spec.commonmark.org/0.28/#motivation\\n                    # TODO: line up <ol><li>s > 9 correctly.\\n                    parent_list = None\\n                    for list in self.list:\\n                        self.o(\\n                            \"   \" if parent_list == \"ol\" and list.name == \"ul\" else \"  \"\\n                        )\\n                        parent_list = list.name\\n\\n                if li.name == \"ul\":\\n                    self.o(self.ul_item_mark + \" \")\\n                elif li.name == \"ol\":\\n                    li.num += 1\\n                    self.o(str(li.num) + \". \")\\n                self.start = True\\n\\n        if tag in [\"table\", \"tr\", \"td\", \"th\"]:\\n            if self.ignore_tables:\\n                if tag == \"tr\":\\n                    if start:\\n                        pass\\n                    else:\\n                        self.soft_br()\\n                else:\\n                    pass\\n\\n            elif self.bypass_tables:\\n                if start:\\n                    self.soft_br()\\n                if tag in [\"td\", \"th\"]:\\n                    if start:\\n                        self.o(\"<{}>\\\\n\\\\n\".format(tag))\\n                    else:\\n                        self.o(\"\\\\n</{}>\".format(tag))\\n                else:\\n                    if start:\\n                        self.o(\"<{}>\".format(tag))\\n                    else:\\n                        self.o(\"</{}>\".format(tag))\\n\\n            else:\\n                if tag == \"table\":\\n                    if start:\\n                        self.table_start = True\\n                        if self.pad_tables:\\n                            self.o(\"<\" + config.TABLE_MARKER_FOR_PAD + \">\")\\n                            self.o(\"  \\\\n\")\\n                    else:\\n                        if self.pad_tables:\\n                            # add break in case the table is empty or its 1 row table\\n                            self.soft_br()\\n                            self.o(\"</\" + config.TABLE_MARKER_FOR_PAD + \">\")\\n                            self.o(\"  \\\\n\")\\n                if tag in [\"td\", \"th\"] and start:\\n                    if self.split_next_td:\\n                        self.o(\"| \")\\n                    self.split_next_td = True\\n\\n                if tag == \"tr\" and start:\\n                    self.td_count = 0\\n                if tag == \"tr\" and not start:\\n                    self.split_next_td = False\\n                    self.soft_br()\\n                if tag == \"tr\" and not start and self.table_start:\\n                    # Underline table header\\n                    self.o(\"|\".join([\"---\"] * self.td_count))\\n                    self.soft_br()\\n                    self.table_start = False\\n                if tag in [\"td\", \"th\"] and start:\\n                    self.td_count += 1\\n\\n        if tag == \"pre\":\\n            if start:\\n                self.startpre = True\\n                self.pre = True\\n            else:\\n                self.pre = False\\n                if self.mark_code:\\n                    self.out(\"\\\\n[/code]\")\\n            self.p()\\n\\n    # TODO: Add docstring for these one letter functions\\n    def pbr(self) -> None:\\n        \"Pretty print has a line break\"\\n        if self.p_p == 0:\\n            self.p_p = 1\\n\\n    def p(self) -> None:\\n        \"Set pretty print to 1 or 2 lines\"\\n        self.p_p = 1 if self.single_line_break else 2\\n\\n    def soft_br(self) -> None:\\n        \"Soft breaks\"\\n        self.pbr()\\n        self.br_toggle = \"  \"\\n\\n    def o(\\n        self, data: str, puredata: bool = False, force: Union[bool, str] = False\\n    ) -> None:\\n        \"\"\"\\n        Deal with indentation and whitespace\\n        \"\"\"\\n        if self.abbr_data is not None:\\n            self.abbr_data += data\\n\\n        if not self.quiet:\\n            if self.google_doc:\\n                # prevent white space immediately after \\'begin emphasis\\'\\n                # marks (\\'**\\' and \\'_\\')\\n                lstripped_data = data.lstrip()\\n                if self.drop_white_space and not (self.pre or self.code):\\n                    data = lstripped_data\\n                if lstripped_data != \"\":\\n                    self.drop_white_space = 0\\n\\n            if puredata and not self.pre:\\n                # This is a very dangerous call ... it could mess up\\n                # all handling of &nbsp; when not handled properly\\n                # (see entityref)\\n                data = re.sub(r\"\\\\s+\", r\" \", data)\\n                if data and data[0] == \" \":\\n                    self.space = True\\n                    data = data[1:]\\n            if not data and not force:\\n                return\\n\\n            if self.startpre:\\n                # self.out(\" :\") #TODO: not output when already one there\\n                if not data.startswith(\"\\\\n\") and not data.startswith(\"\\\\r\\\\n\"):\\n                    # <pre>stuff...\\n                    data = \"\\\\n\" + data\\n                if self.mark_code:\\n                    self.out(\"\\\\n[code]\")\\n                    self.p_p = 0\\n\\n            bq = \">\" * self.blockquote\\n            if not (force and data and data[0] == \">\") and self.blockquote:\\n                bq += \" \"\\n\\n            if self.pre:\\n                if not self.list:\\n                    bq += \"    \"\\n                # else: list content is already partially indented\\n                bq += \"    \" * len(self.list)\\n                data = data.replace(\"\\\\n\", \"\\\\n\" + bq)\\n\\n            if self.startpre:\\n                self.startpre = False\\n                if self.list:\\n                    # use existing initial indentation\\n                    data = data.lstrip(\"\\\\n\")\\n\\n            if self.start:\\n                self.space = False\\n                self.p_p = 0\\n                self.start = False\\n\\n            if force == \"end\":\\n                # It\\'s the end.\\n                self.p_p = 0\\n                self.out(\"\\\\n\")\\n                self.space = False\\n\\n            if self.p_p:\\n                self.out((self.br_toggle + \"\\\\n\" + bq) * self.p_p)\\n                self.space = False\\n                self.br_toggle = \"\"\\n\\n            if self.space:\\n                if not self.lastWasNL:\\n                    self.out(\" \")\\n                self.space = False\\n\\n            if self.a and (\\n                (self.p_p == 2 and self.links_each_paragraph) or force == \"end\"\\n            ):\\n                if force == \"end\":\\n                    self.out(\"\\\\n\")\\n\\n                newa = []\\n                for link in self.a:\\n                    if self.outcount > link.outcount:\\n                        self.out(\\n                            \"   [\"\\n                            + str(link.count)\\n                            + \"]: \"\\n                            + urlparse.urljoin(self.baseurl, link.attrs[\"href\"])\\n                        )\\n                        if \"title\" in link.attrs:\\n                            assert link.attrs[\"title\"] is not None\\n                            self.out(\" (\" + link.attrs[\"title\"] + \")\")\\n                        self.out(\"\\\\n\")\\n                    else:\\n                        newa.append(link)\\n\\n                # Don\\'t need an extra line when nothing was done.\\n                if self.a != newa:\\n                    self.out(\"\\\\n\")\\n\\n                self.a = newa\\n\\n            if self.abbr_list and force == \"end\":\\n                for abbr, definition in self.abbr_list.items():\\n                    self.out(\"  *[\" + abbr + \"]: \" + definition + \"\\\\n\")\\n\\n            self.p_p = 0\\n            self.out(data)\\n            self.outcount += 1\\n\\n    def handle_data(self, data: str, entity_char: bool = False) -> None:\\n        if not data:\\n            # Data may be empty for some HTML entities. For example,\\n            # LEFT-TO-RIGHT MARK.\\n            return\\n\\n        if self.stressed:\\n            data = data.strip()\\n            self.stressed = False\\n            self.preceding_stressed = True\\n        elif self.preceding_stressed:\\n            if (\\n                re.match(r\"[^][(){}\\\\s.!?]\", data[0])\\n                and not hn(self.current_tag)\\n                and self.current_tag not in [\"a\", \"code\", \"pre\"]\\n            ):\\n                # should match a letter or common punctuation\\n                data = \" \" + data\\n            self.preceding_stressed = False\\n\\n        if self.style:\\n            self.style_def.update(dumb_css_parser(data))\\n\\n        if self.maybe_automatic_link is not None:\\n            href = self.maybe_automatic_link\\n            if (\\n                href == data\\n                and self.absolute_url_matcher.match(href)\\n                and self.use_automatic_links\\n            ):\\n                self.o(\"<\" + data + \">\")\\n                self.empty_link = False\\n                return\\n            else:\\n                self.o(\"[\")\\n                self.maybe_automatic_link = None\\n                self.empty_link = False\\n\\n        if not self.code and not self.pre and not entity_char:\\n            data = escape_md_section(data, snob=self.escape_snob)\\n        self.preceding_data = data\\n        self.o(data, puredata=True)\\n\\n    def charref(self, name: str) -> str:\\n        if name[0] in [\"x\", \"X\"]:\\n            c = int(name[1:], 16)\\n        else:\\n            c = int(name)\\n\\n        if not self.unicode_snob and c in unifiable_n:\\n            return unifiable_n[c]\\n        else:\\n            try:\\n                return chr(c)\\n            except ValueError:  # invalid unicode\\n                return \"\"\\n\\n    def entityref(self, c: str) -> str:\\n        if not self.unicode_snob and c in config.UNIFIABLE:\\n            return config.UNIFIABLE[c]\\n        try:\\n            ch = html.entities.html5[c + \";\"]\\n        except KeyError:\\n            return \"&\" + c + \";\"\\n        return config.UNIFIABLE[c] if c == \"nbsp\" else ch\\n\\n    def google_nest_count(self, style: Dict[str, str]) -> int:\\n        \"\"\"\\n        Calculate the nesting count of google doc lists\\n\\n        :type style: dict\\n\\n        :rtype: int\\n        \"\"\"\\n        nest_count = 0\\n        if \"margin-left\" in style:\\n            nest_count = int(style[\"margin-left\"][:-2]) // self.google_list_indent\\n\\n        return nest_count\\n\\n    def optwrap(self, text: str) -> str:\\n        \"\"\"\\n        Wrap all paragraphs in the provided text.\\n\\n        :type text: str\\n\\n        :rtype: str\\n        \"\"\"\\n        if not self.body_width:\\n            return text\\n\\n        result = \"\"\\n        newlines = 0\\n        # I cannot think of a better solution for now.\\n        # To avoid the non-wrap behaviour for entire paras\\n        # because of the presence of a link in it\\n        if not self.wrap_links:\\n            self.inline_links = False\\n        for para in text.split(\"\\\\n\"):\\n            if len(para) > 0:\\n                if not skipwrap(\\n                    para, self.wrap_links, self.wrap_list_items, self.wrap_tables\\n                ):\\n                    indent = \"\"\\n                    if para.startswith(\"  \" + self.ul_item_mark):\\n                        # list item continuation: add a double indent to the\\n                        # new lines\\n                        indent = \"    \"\\n                    elif para.startswith(\"> \"):\\n                        # blockquote continuation: add the greater than symbol\\n                        # to the new lines\\n                        indent = \"> \"\\n                    wrapped = wrap(\\n                        para,\\n                        self.body_width,\\n                        break_long_words=False,\\n                        subsequent_indent=indent,\\n                    )\\n                    result += \"\\\\n\".join(wrapped)\\n                    if para.endswith(\"  \"):\\n                        result += \"  \\\\n\"\\n                        newlines = 1\\n                    elif indent:\\n                        result += \"\\\\n\"\\n                        newlines = 1\\n                    else:\\n                        result += \"\\\\n\\\\n\"\\n                        newlines = 2\\n                else:\\n                    # Warning for the tempted!!!\\n                    # Be aware that obvious replacement of this with\\n                    # line.isspace()\\n                    # DOES NOT work! Explanations are welcome.\\n                    if not config.RE_SPACE.match(para):\\n                        result += para + \"\\\\n\"\\n                        newlines = 1\\n            else:\\n                if newlines < 2:\\n                    result += \"\\\\n\"\\n                    newlines += 1\\n        return result\\n\\n\\ndef html2text(html: str, baseurl: str = \"\", bodywidth: Optional[int] = None) -> str:\\n    if bodywidth is None:\\n        bodywidth = config.BODY_WIDTH\\n    h = HTML2Text(baseurl=baseurl, bodywidth=bodywidth)\\n\\n    return h.handle(html)\\n'"}, "return_value": "'\"\"\"html2text: Turn HTML into equivalent Markdown-structured text.\"\"\"\\n\\nimport html.entities\\nimport html.parser\\nimport re\\nimport string\\nimport urllib.parse as urlparse\\nfrom textwrap import wrap\\nfrom typing import Dict, List, Optional, Tuple, Union\\n\\nfrom . import config\\nfrom .elements import AnchorElement, ListElement\\nfrom .typing import OutCallback\\nfrom .utils import (\\n    dumb_css_parser,\\n    element_style,\\n    escape_md,\\n    escape_md_section,\\n    google_fixed_width_font,\\n    google_has_height,\\n    google_list_style,\\n    google_text_emphasis,\\n    hn,\\n    list_numbering_start,\\n    pad_tables_in_text,\\n    skipwrap,\\n    unifiable_n,\\n)\\n\\n__version__ = (2020, 1, 16)\\n\\n\\n# TODO:\\n# Support decoded entities with UNIFIABLE.\\n\\n\\nclass HTML2Text(html.parser.HTMLParser):\\n    def __init__(\\n        self,\\n        out: Optional[OutCallback] = None,\\n        baseurl: str = \"\",\\n        bodywidth: int = config.BODY_WIDTH,\\n    ) -> None:\\n        \"\"\"\\n        Input parameters:\\n            out: possible custom replacement for self.outtextf (which\\n                 appends lines of text).\\n            baseurl: base URL of the document we process\\n        \"\"\"\\n        super().__init__(convert_charrefs=False)\\n\\n        # Config options\\n        self.split_next_td = False\\n        self.td_count = 0\\n        self.table_start = False\\n        self.unicode_snob = config.UNICODE_SNOB  # covered in cli\\n        self.escape_snob = config.ESCAPE_SNOB  # covered in cli\\n        self.links_each_paragraph = config.LINKS_EACH_PARAGRAPH\\n        self.body_width = bodywidth  # covered in cli\\n        self.skip_internal_links = config.SKIP_INTERNAL_LINKS  # covered in cli\\n        self.inline_links = config.INLINE_LINKS  # covered in cli\\n        self.protect_links = config.PROTECT_LINKS  # covered in cli\\n        self.google_list_indent = config.GOOGLE_LIST_INDENT  # covered in cli\\n        self.ignore_links = config.IGNORE_ANCHORS  # covered in cli\\n        self.ignore_mailto_links = config.IGNORE_MAILTO_LINKS  # covered in cli\\n        self.ignore_images = config.IGNORE_IMAGES  # covered in cli\\n        self.images_as_html = config.IMAGES_AS_HTML  # covered in cli\\n        self.images_to_alt = config.IMAGES_TO_ALT  # covered in cli\\n        self.images_with_size = config.IMAGES_WITH_SIZE  # covered in cli\\n        self.ignore_emphasis = config.IGNORE_EMPHASIS  # covered in cli\\n        self.bypass_tables = config.BYPASS_TABLES  # covered in cli\\n        self.ignore_tables = config.IGNORE_TABLES  # covered in cli\\n        self.google_doc = False  # covered in cli\\n        self.ul_item_mark = \"*\"  # covered in cli\\n        self.emphasis_mark = \"_\"  # covered in cli\\n        self.strong_mark = \"**\"\\n        self.single_line_break = config.SINGLE_LINE_BREAK  # covered in cli\\n        self.use_automatic_links = config.USE_AUTOMATIC_LINKS  # covered in cli\\n        self.hide_strikethrough = False  # covered in cli\\n        self.mark_code = config.MARK_CODE\\n        self.wrap_list_items = config.WRAP_LIST_ITEMS  # covered in cli\\n        self.wrap_links = config.WRAP_LINKS  # covered in cli\\n        self.wrap_tables = config.WRAP_TABLES\\n        self.pad_tables = config.PAD_TABLES  # covered in cli\\n        self.default_image_alt = config.DEFAULT_IMAGE_ALT  # covered in cli\\n        self.tag_callback = None\\n        self.open_quote = config.OPEN_QUOTE  # covered in cli\\n        self.close_quote = config.CLOSE_QUOTE  # covered in cli\\n\\n        if out is None:\\n            self.out = self.outtextf\\n        else:\\n            self.out = out\\n\\n        # empty list to store output characters before they are \"joined\"\\n        self.outtextlist = []  # type: List[str]\\n\\n        self.quiet = 0\\n        self.p_p = 0  # number of newline character to print before next output\\n        self.outcount = 0\\n        self.start = True\\n        self.space = False\\n        self.a = []  # type: List[AnchorElement]\\n        self.astack = []  # type: List[Optional[Dict[str, Optional[str]]]]\\n        self.maybe_automatic_link = None  # type: Optional[str]\\n        self.empty_link = False\\n        self.absolute_url_matcher = re.compile(r\"^[a-zA-Z+]+://\")\\n        self.acount = 0\\n        self.list = []  # type: List[ListElement]\\n        self.blockquote = 0\\n        self.pre = False\\n        self.startpre = False\\n        self.code = False\\n        self.quote = False\\n        self.br_toggle = \"\"\\n        self.lastWasNL = False\\n        self.lastWasList = False\\n        self.style = 0\\n        self.style_def = {}  # type: Dict[str, Dict[str, str]]\\n        self.tag_stack = (\\n            []\\n        )  # type: List[Tuple[str, Dict[str, Optional[str]], Dict[str, str]]]\\n        self.emphasis = 0\\n        self.drop_white_space = 0\\n        self.inheader = False\\n        # Current abbreviation definition\\n        self.abbr_title = None  # type: Optional[str]\\n        # Last inner HTML (for abbr being defined)\\n        self.abbr_data = None  # type: Optional[str]\\n        # Stack of abbreviations to write later\\n        self.abbr_list = {}  # type: Dict[str, str]\\n        self.baseurl = baseurl\\n        self.stressed = False\\n        self.preceding_stressed = False\\n        self.preceding_data = \"\"\\n        self.current_tag = \"\"\\n\\n        config.UNIFIABLE[\"nbsp\"] = \"&nbsp_place_holder;\"\\n\\n    def feed(self, data: str) -> None:\\n        data = data.replace(\"</\\' + \\'script>\", \"</ignore>\")\\n        super().feed(data)\\n\\n    def handle(self, data: str) -> str:\\n        self.feed(data)\\n        self.feed(\"\")\\n        markdown = self.optwrap(self.finish())\\n        if self.pad_tables:\\n            return pad_tables_in_text(markdown)\\n        else:\\n            return markdown\\n\\n    def outtextf(self, s: str) -> None:\\n        self.outtextlist.append(s)\\n        if s:\\n            self.lastWasNL = s[-1] == \"\\\\n\"\\n\\n    def finish(self) -> str:\\n        self.close()\\n\\n        self.pbr()\\n        self.o(\"\", force=\"end\")\\n\\n        outtext = \"\".join(self.outtextlist)\\n\\n        if self.unicode_snob:\\n            nbsp = html.entities.html5[\"nbsp;\"]\\n        else:\\n            nbsp = \" \"\\n        outtext = outtext.replace(\"&nbsp_place_holder;\", nbsp)\\n\\n        # Clear self.outtextlist to avoid memory leak of its content to\\n        # the next handling.\\n        self.outtextlist = []\\n\\n        return outtext\\n\\n    def handle_charref(self, c: str) -> None:\\n        self.handle_data(self.charref(c), True)\\n\\n    def handle_entityref(self, c: str) -> None:\\n        ref = self.entityref(c)\\n\\n        # ref may be an empty string (e.g. for &lrm;/&rlm; markers that should\\n        # not contribute to the final output).\\n        # self.handle_data cannot handle a zero-length string right after a\\n        # stressed tag or mid-text within a stressed tag (text get split and\\n        # self.stressed/self.preceding_stressed gets switched after the first\\n        # part of that text).\\n        if ref:\\n            self.handle_data(ref, True)\\n\\n    def handle_starttag(self, tag: str, attrs: List[Tuple[str, Optional[str]]]) -> None:\\n        self.handle_tag(tag, dict(attrs), start=True)\\n\\n    def handle_endtag(self, tag: str) -> None:\\n        self.handle_tag(tag, {}, start=False)\\n\\n    def previousIndex(self, attrs: Dict[str, Optional[str]]) -> Optional[int]:\\n        \"\"\"\\n        :type attrs: dict\\n\\n        :returns: The index of certain set of attributes (of a link) in the\\n        self.a list. If the set of attributes is not found, returns None\\n        :rtype: int\\n        \"\"\"\\n        if \"href\" not in attrs:\\n            return None\\n\\n        match = False\\n        for i, a in enumerate(self.a):\\n            if \"href\" in a.attrs and a.attrs[\"href\"] == attrs[\"href\"]:\\n                if \"title\" in a.attrs or \"title\" in attrs:\\n                    if (\\n                        \"title\" in a.attrs\\n                        and \"title\" in attrs\\n                        and a.attrs[\"title\"] == attrs[\"title\"]\\n                    ):\\n                        match = True\\n                else:\\n                    match = True\\n\\n            if match:\\n                return i\\n        return None\\n\\n    def handle_emphasis(\\n        self, start: bool, tag_style: Dict[str, str], parent_style: Dict[str, str]\\n    ) -> None:\\n        \"\"\"\\n        Handles various text emphases\\n        \"\"\"\\n        tag_emphasis = google_text_emphasis(tag_style)\\n        parent_emphasis = google_text_emphasis(parent_style)\\n\\n        # handle Google\\'s text emphasis\\n        strikethrough = \"line-through\" in tag_emphasis and self.hide_strikethrough\\n\\n        # google and others may mark a font\\'s weight as `bold` or `700`\\n        bold = False\\n        for bold_marker in config.BOLD_TEXT_STYLE_VALUES:\\n            bold = bold_marker in tag_emphasis and bold_marker not in parent_emphasis\\n            if bold:\\n                break\\n\\n        italic = \"italic\" in tag_emphasis and \"italic\" not in parent_emphasis\\n        fixed = (\\n            google_fixed_width_font(tag_style)\\n            and not google_fixed_width_font(parent_style)\\n            and not self.pre\\n        )\\n\\n        if start:\\n            # crossed-out text must be handled before other attributes\\n            # in order not to output qualifiers unnecessarily\\n            if bold or italic or fixed:\\n                self.emphasis += 1\\n            if strikethrough:\\n                self.quiet += 1\\n            if italic:\\n                self.o(self.emphasis_mark)\\n                self.drop_white_space += 1\\n            if bold:\\n                self.o(self.strong_mark)\\n                self.drop_white_space += 1\\n            if fixed:\\n                self.o(\"`\")\\n                self.drop_white_space += 1\\n                self.code = True\\n        else:\\n            if bold or italic or fixed:\\n                # there must not be whitespace before closing emphasis mark\\n                self.emphasis -= 1\\n                self.space = False\\n            if fixed:\\n                if self.drop_white_space:\\n                    # empty emphasis, drop it\\n                    self.drop_white_space -= 1\\n                else:\\n                    self.o(\"`\")\\n                self.code = False\\n            if bold:\\n                if self.drop_white_space:\\n                    # empty emphasis, drop it\\n                    self.drop_white_space -= 1\\n                else:\\n                    self.o(self.strong_mark)\\n            if italic:\\n                if self.drop_white_space:\\n                    # empty emphasis, drop it\\n                    self.drop_white_space -= 1\\n                else:\\n                    self.o(self.emphasis_mark)\\n            # space is only allowed after *all* emphasis marks\\n            if (bold or italic) and not self.emphasis:\\n                self.o(\" \")\\n            if strikethrough:\\n                self.quiet -= 1\\n\\n    def handle_tag(\\n        self, tag: str, attrs: Dict[str, Optional[str]], start: bool\\n    ) -> None:\\n        self.current_tag = tag\\n\\n        if self.tag_callback is not None:\\n            if self.tag_callback(self, tag, attrs, start) is True:\\n                return\\n\\n        # first thing inside the anchor tag is another tag\\n        # that produces some output\\n        if (\\n            start\\n            and self.maybe_automatic_link is not None\\n            and tag not in [\"p\", \"div\", \"style\", \"dl\", \"dt\"]\\n            and (tag != \"img\" or self.ignore_images)\\n        ):\\n            self.o(\"[\")\\n            self.maybe_automatic_link = None\\n            self.empty_link = False\\n\\n        if self.google_doc:\\n            # the attrs parameter is empty for a closing tag. in addition, we\\n            # need the attributes of the parent nodes in order to get a\\n            # complete style description for the current element. we assume\\n            # that google docs export well formed html.\\n            parent_style = {}  # type: Dict[str, str]\\n            if start:\\n                if self.tag_stack:\\n                    parent_style = self.tag_stack[-1][2]\\n                tag_style = element_style(attrs, self.style_def, parent_style)\\n                self.tag_stack.append((tag, attrs, tag_style))\\n            else:\\n                dummy, attrs, tag_style = (\\n                    self.tag_stack.pop() if self.tag_stack else (None, {}, {})\\n                )\\n                if self.tag_stack:\\n                    parent_style = self.tag_stack[-1][2]\\n\\n        if hn(tag):\\n            # check if nh is inside of an \\'a\\' tag (incorrect but found in the wild)\\n            if self.astack:\\n                if start:\\n                    self.inheader = True\\n                    # are inside link name, so only add \\'#\\' if it can appear before \\'[\\'\\n                    if self.outtextlist and self.outtextlist[-1] == \"[\":\\n                        self.outtextlist.pop()\\n                        self.space = False\\n                        self.o(hn(tag) * \"#\" + \" \")\\n                        self.o(\"[\")\\n                else:\\n                    self.p_p = 0  # don\\'t break up link name\\n                    self.inheader = False\\n                    return  # prevent redundant emphasis marks on headers\\n            else:\\n                self.p()\\n                if start:\\n                    self.inheader = True\\n                    self.o(hn(tag) * \"#\" + \" \")\\n                else:\\n                    self.inheader = False\\n                    return  # prevent redundant emphasis marks on headers\\n\\n        if tag in [\"p\", \"div\"]:\\n            if self.google_doc:\\n                if start and google_has_height(tag_style):\\n                    self.p()\\n                else:\\n                    self.soft_br()\\n            elif self.astack:\\n                pass\\n            else:\\n                self.p()\\n\\n        if tag == \"br\" and start:\\n            if self.blockquote > 0:\\n                self.o(\"  \\\\n> \")\\n            else:\\n                self.o(\"  \\\\n\")\\n\\n        if tag == \"hr\" and start:\\n            self.p()\\n            self.o(\"* * *\")\\n            self.p()\\n\\n        if tag in [\"head\", \"style\", \"script\"]:\\n            if start:\\n                self.quiet += 1\\n            else:\\n                self.quiet -= 1\\n\\n        if tag == \"style\":\\n            if start:\\n                self.style += 1\\n            else:\\n                self.style -= 1\\n\\n        if tag in [\"body\"]:\\n            self.quiet = 0  # sites like 9rules.com never close <head>\\n\\n        if tag == \"blockquote\":\\n            if start:\\n                self.p()\\n                self.o(\"> \", force=True)\\n                self.start = True\\n                self.blockquote += 1\\n            else:\\n                self.blockquote -= 1\\n                self.p()\\n\\n        if tag in [\"em\", \"i\", \"u\"] and not self.ignore_emphasis:\\n            # Separate with a space if we immediately follow an alphanumeric\\n            # character, since otherwise Markdown won\\'t render the emphasis\\n            # marks, and we\\'ll be left with eg \\'foo_bar_\\' visible.\\n            # (Don\\'t add a space otherwise, though, since there isn\\'t one in the\\n            # original HTML.)\\n            if (\\n                start\\n                and self.preceding_data\\n                and self.preceding_data[-1] not in string.whitespace\\n                and self.preceding_data[-1] not in string.punctuation\\n            ):\\n                emphasis = \" \" + self.emphasis_mark\\n                self.preceding_data += \" \"\\n            else:\\n                emphasis = self.emphasis_mark\\n\\n            self.o(emphasis)\\n            if start:\\n                self.stressed = True\\n\\n        if tag in [\"strong\", \"b\"] and not self.ignore_emphasis:\\n            # Separate with space if we immediately follow an * character, since\\n            # without it, Markdown won\\'t render the resulting *** correctly.\\n            # (Don\\'t add a space otherwise, though, since there isn\\'t one in the\\n            # original HTML.)\\n            if (\\n                start\\n                and self.preceding_data\\n                and self.preceding_data[-1] == self.strong_mark[0]\\n            ):\\n                strong = \" \" + self.strong_mark\\n                self.preceding_data += \" \"\\n            else:\\n                strong = self.strong_mark\\n\\n            self.o(strong)\\n            if start:\\n                self.stressed = True\\n\\n        if tag in [\"del\", \"strike\", \"s\"]:\\n            if start and self.preceding_data and self.preceding_data[-1] == \"~\":\\n                strike = \" ~~\"\\n                self.preceding_data += \" \"\\n            else:\\n                strike = \"~~\"\\n\\n            self.o(strike)\\n            if start:\\n                self.stressed = True\\n\\n        if self.google_doc:\\n            if not self.inheader:\\n                # handle some font attributes, but leave headers clean\\n                self.handle_emphasis(start, tag_style, parent_style)\\n\\n        if tag in [\"kbd\", \"code\", \"tt\"] and not self.pre:\\n            self.o(\"`\")  # TODO: `` `this` ``\\n            self.code = not self.code\\n\\n        if tag == \"abbr\":\\n            if start:\\n                self.abbr_title = None\\n                self.abbr_data = \"\"\\n                if \"title\" in attrs:\\n                    self.abbr_title = attrs[\"title\"]\\n            else:\\n                if self.abbr_title is not None:\\n                    assert self.abbr_data is not None\\n                    self.abbr_list[self.abbr_data] = self.abbr_title\\n                    self.abbr_title = None\\n                self.abbr_data = None\\n\\n        if tag == \"q\":\\n            if not self.quote:\\n                self.o(self.open_quote)\\n            else:\\n                self.o(self.close_quote)\\n            self.quote = not self.quote\\n\\n        def link_url(self: HTML2Text, link: str, title: str = \"\") -> None:\\n            url = urlparse.urljoin(self.baseurl, link)\\n            title = \\' \"{}\"\\'.format(title) if title.strip() else \"\"\\n            self.o(\"]({url}{title})\".format(url=escape_md(url), title=title))\\n\\n        if tag == \"a\" and not self.ignore_links:\\n            if start:\\n                if (\\n                    \"href\" in attrs\\n                    and attrs[\"href\"] is not None\\n                    and not (self.skip_internal_links and attrs[\"href\"].startswith(\"#\"))\\n                    and not (\\n                        self.ignore_mailto_links and attrs[\"href\"].startswith(\"mailto:\")\\n                    )\\n                ):\\n                    self.astack.append(attrs)\\n                    self.maybe_automatic_link = attrs[\"href\"]\\n                    self.empty_link = True\\n                    if self.protect_links:\\n                        attrs[\"href\"] = \"<\" + attrs[\"href\"] + \">\"\\n                else:\\n                    self.astack.append(None)\\n            else:\\n                if self.astack:\\n                    a = self.astack.pop()\\n                    if self.maybe_automatic_link and not self.empty_link:\\n                        self.maybe_automatic_link = None\\n                    elif a:\\n                        assert a[\"href\"] is not None\\n                        if self.empty_link:\\n                            self.o(\"[\")\\n                            self.empty_link = False\\n                            self.maybe_automatic_link = None\\n                        if self.inline_links:\\n                            self.p_p = 0\\n                            title = a.get(\"title\") or \"\"\\n                            title = escape_md(title)\\n                            link_url(self, a[\"href\"], title)\\n                        else:\\n                            i = self.previousIndex(a)\\n                            if i is not None:\\n                                a_props = self.a[i]\\n                            else:\\n                                self.acount += 1\\n                                a_props = AnchorElement(a, self.acount, self.outcount)\\n                                self.a.append(a_props)\\n                            self.o(\"][\" + str(a_props.count) + \"]\")\\n\\n        if tag == \"img\" and start and not self.ignore_images:\\n            if \"src\" in attrs:\\n                assert attrs[\"src\"] is not None\\n                if not self.images_to_alt:\\n                    attrs[\"href\"] = attrs[\"src\"]\\n                alt = attrs.get(\"alt\") or self.default_image_alt\\n\\n                # If we have images_with_size, write raw html including width,\\n                # height, and alt attributes\\n                if self.images_as_html or (\\n                    self.images_with_size and (\"width\" in attrs or \"height\" in attrs)\\n                ):\\n                    self.o(\"<img src=\\'\" + attrs[\"src\"] + \"\\' \")\\n                    if \"width\" in attrs:\\n                        assert attrs[\"width\"] is not None\\n                        self.o(\"width=\\'\" + attrs[\"width\"] + \"\\' \")\\n                    if \"height\" in attrs:\\n                        assert attrs[\"height\"] is not None\\n                        self.o(\"height=\\'\" + attrs[\"height\"] + \"\\' \")\\n                    if alt:\\n                        self.o(\"alt=\\'\" + alt + \"\\' \")\\n                    self.o(\"/>\")\\n                    return\\n\\n                # If we have a link to create, output the start\\n                if self.maybe_automatic_link is not None:\\n                    href = self.maybe_automatic_link\\n                    if (\\n                        self.images_to_alt\\n                        and escape_md(alt) == href\\n                        and self.absolute_url_matcher.match(href)\\n                    ):\\n                        self.o(\"<\" + escape_md(alt) + \">\")\\n                        self.empty_link = False\\n                        return\\n                    else:\\n                        self.o(\"[\")\\n                        self.maybe_automatic_link = None\\n                        self.empty_link = False\\n\\n                # If we have images_to_alt, we discard the image itself,\\n                # considering only the alt text.\\n                if self.images_to_alt:\\n                    self.o(escape_md(alt))\\n                else:\\n                    self.o(\"![\" + escape_md(alt) + \"]\")\\n                    if self.inline_links:\\n                        href = attrs.get(\"href\") or \"\"\\n                        self.o(\\n                            \"(\" + escape_md(urlparse.urljoin(self.baseurl, href)) + \")\"\\n                        )\\n                    else:\\n                        i = self.previousIndex(attrs)\\n                        if i is not None:\\n                            a_props = self.a[i]\\n                        else:\\n                            self.acount += 1\\n                            a_props = AnchorElement(attrs, self.acount, self.outcount)\\n                            self.a.append(a_props)\\n                        self.o(\"[\" + str(a_props.count) + \"]\")\\n\\n        if tag == \"dl\" and start:\\n            self.p()\\n        if tag == \"dt\" and not start:\\n            self.pbr()\\n        if tag == \"dd\" and start:\\n            self.o(\"    \")\\n        if tag == \"dd\" and not start:\\n            self.pbr()\\n\\n        if tag in [\"ol\", \"ul\"]:\\n            # Google Docs create sub lists as top level lists\\n            if not self.list and not self.lastWasList:\\n                self.p()\\n            if start:\\n                if self.google_doc:\\n                    list_style = google_list_style(tag_style)\\n                else:\\n                    list_style = tag\\n                numbering_start = list_numbering_start(attrs)\\n                self.list.append(ListElement(list_style, numbering_start))\\n            else:\\n                if self.list:\\n                    self.list.pop()\\n                    if not self.google_doc and not self.list:\\n                        self.o(\"\\\\n\")\\n            self.lastWasList = True\\n        else:\\n            self.lastWasList = False\\n\\n        if tag == \"li\":\\n            self.pbr()\\n            if start:\\n                if self.list:\\n                    li = self.list[-1]\\n                else:\\n                    li = ListElement(\"ul\", 0)\\n                if self.google_doc:\\n                    self.o(\"  \" * self.google_nest_count(tag_style))\\n                else:\\n                    # Indent two spaces per list, except use three spaces for an\\n                    # unordered list inside an ordered list.\\n                    # https://spec.commonmark.org/0.28/#motivation\\n                    # TODO: line up <ol><li>s > 9 correctly.\\n                    parent_list = None\\n                    for list in self.list:\\n                        self.o(\\n                            \"   \" if parent_list == \"ol\" and list.name == \"ul\" else \"  \"\\n                        )\\n                        parent_list = list.name\\n\\n                if li.name == \"ul\":\\n                    self.o(self.ul_item_mark + \" \")\\n                elif li.name == \"ol\":\\n                    li.num += 1\\n                    self.o(str(li.num) + \". \")\\n                self.start = True\\n\\n        if tag in [\"table\", \"tr\", \"td\", \"th\"]:\\n            if self.ignore_tables:\\n                if tag == \"tr\":\\n                    if start:\\n                        pass\\n                    else:\\n                        self.soft_br()\\n                else:\\n                    pass\\n\\n            elif self.bypass_tables:\\n                if start:\\n                    self.soft_br()\\n                if tag in [\"td\", \"th\"]:\\n                    if start:\\n                        self.o(\"<{}>\\\\n\\\\n\".format(tag))\\n                    else:\\n                        self.o(\"\\\\n</{}>\".format(tag))\\n                else:\\n                    if start:\\n                        self.o(\"<{}>\".format(tag))\\n                    else:\\n                        self.o(\"</{}>\".format(tag))\\n\\n            else:\\n                if tag == \"table\":\\n                    if start:\\n                        self.table_start = True\\n                        if self.pad_tables:\\n                            self.o(\"<\" + config.TABLE_MARKER_FOR_PAD + \">\")\\n                            self.o(\"  \\\\n\")\\n                    else:\\n                        if self.pad_tables:\\n                            # add break in case the table is empty or its 1 row table\\n                            self.soft_br()\\n                            self.o(\"</\" + config.TABLE_MARKER_FOR_PAD + \">\")\\n                            self.o(\"  \\\\n\")\\n                if tag in [\"td\", \"th\"] and start:\\n                    if self.split_next_td:\\n                        self.o(\"| \")\\n                    self.split_next_td = True\\n\\n                if tag == \"tr\" and start:\\n                    self.td_count = 0\\n                if tag == \"tr\" and not start:\\n                    self.split_next_td = False\\n                    self.soft_br()\\n                if tag == \"tr\" and not start and self.table_start:\\n                    # Underline table header\\n                    self.o(\"|\".join([\"---\"] * self.td_count))\\n                    self.soft_br()\\n                    self.table_start = False\\n                if tag in [\"td\", \"th\"] and start:\\n                    self.td_count += 1\\n\\n        if tag == \"pre\":\\n            if start:\\n                self.startpre = True\\n                self.pre = True\\n            else:\\n                self.pre = False\\n                if self.mark_code:\\n                    self.out(\"\\\\n[/code]\")\\n            self.p()\\n\\n    # TODO: Add docstring for these one letter functions\\n    def pbr(self) -> None:\\n        \"Pretty print has a line break\"\\n        if self.p_p == 0:\\n            self.p_p = 1\\n\\n    def p(self) -> None:\\n        \"Set pretty print to 1 or 2 lines\"\\n        self.p_p = 1 if self.single_line_break else 2\\n\\n    def soft_br(self) -> None:\\n        \"Soft breaks\"\\n        self.pbr()\\n        self.br_toggle = \"  \"\\n\\n    def o(\\n        self, data: str, puredata: bool = False, force: Union[bool, str] = False\\n    ) -> None:\\n        \"\"\"\\n        Deal with indentation and whitespace\\n        \"\"\"\\n        if self.abbr_data is not None:\\n            self.abbr_data += data\\n\\n        if not self.quiet:\\n            if self.google_doc:\\n                # prevent white space immediately after \\'begin emphasis\\'\\n                # marks (\\'**\\' and \\'_\\')\\n                lstripped_data = data.lstrip()\\n                if self.drop_white_space and not (self.pre or self.code):\\n                    data = lstripped_data\\n                if lstripped_data != \"\":\\n                    self.drop_white_space = 0\\n\\n            if puredata and not self.pre:\\n                # This is a very dangerous call ... it could mess up\\n                # all handling of &nbsp; when not handled properly\\n                # (see entityref)\\n                data = re.sub(r\"\\\\s+\", r\" \", data)\\n                if data and data[0] == \" \":\\n                    self.space = True\\n                    data = data[1:]\\n            if not data and not force:\\n                return\\n\\n            if self.startpre:\\n                # self.out(\" :\") #TODO: not output when already one there\\n                if not data.startswith(\"\\\\n\") and not data.startswith(\"\\\\r\\\\n\"):\\n                    # <pre>stuff...\\n                    data = \"\\\\n\" + data\\n                if self.mark_code:\\n                    self.out(\"\\\\n[code]\")\\n                    self.p_p = 0\\n\\n            bq = \">\" * self.blockquote\\n            if not (force and data and data[0] == \">\") and self.blockquote:\\n                bq += \" \"\\n\\n            if self.pre:\\n                if not self.list:\\n                    bq += \"    \"\\n                # else: list content is already partially indented\\n                bq += \"    \" * len(self.list)\\n                data = data.replace(\"\\\\n\", \"\\\\n\" + bq)\\n\\n            if self.startpre:\\n                self.startpre = False\\n                if self.list:\\n                    # use existing initial indentation\\n                    data = data.lstrip(\"\\\\n\")\\n\\n            if self.start:\\n                self.space = False\\n                self.p_p = 0\\n                self.start = False\\n\\n            if force == \"end\":\\n                # It\\'s the end.\\n                self.p_p = 0\\n                self.out(\"\\\\n\")\\n                self.space = False\\n\\n            if self.p_p:\\n                self.out((self.br_toggle + \"\\\\n\" + bq) * self.p_p)\\n                self.space = False\\n                self.br_toggle = \"\"\\n\\n            if self.space:\\n                if not self.lastWasNL:\\n                    self.out(\" \")\\n                self.space = False\\n\\n            if self.a and (\\n                (self.p_p == 2 and self.links_each_paragraph) or force == \"end\"\\n            ):\\n                if force == \"end\":\\n                    self.out(\"\\\\n\")\\n\\n                newa = []\\n                for link in self.a:\\n                    if self.outcount > link.outcount:\\n                        self.out(\\n                            \"   [\"\\n                            + str(link.count)\\n                            + \"]: \"\\n                            + urlparse.urljoin(self.baseurl, link.attrs[\"href\"])\\n                        )\\n                        if \"title\" in link.attrs:\\n                            assert link.attrs[\"title\"] is not None\\n                            self.out(\" (\" + link.attrs[\"title\"] + \")\")\\n                        self.out(\"\\\\n\")\\n                    else:\\n                        newa.append(link)\\n\\n                # Don\\'t need an extra line when nothing was done.\\n                if self.a != newa:\\n                    self.out(\"\\\\n\")\\n\\n                self.a = newa\\n\\n            if self.abbr_list and force == \"end\":\\n                for abbr, definition in self.abbr_list.items():\\n                    self.out(\"  *[\" + abbr + \"]: \" + definition + \"\\\\n\")\\n\\n            self.p_p = 0\\n            self.out(data)\\n            self.outcount += 1\\n\\n    def handle_data(self, data: str, entity_char: bool = False) -> None:\\n        if not data:\\n            # Data may be empty for some HTML entities. For example,\\n            # LEFT-TO-RIGHT MARK.\\n            return\\n\\n        if self.stressed:\\n            data = data.strip()\\n            self.stressed = False\\n            self.preceding_stressed = True\\n        elif self.preceding_stressed:\\n            if (\\n                re.match(r\"[^][(){}\\\\s.!?]\", data[0])\\n                and not hn(self.current_tag)\\n                and self.current_tag not in [\"a\", \"code\", \"pre\"]\\n            ):\\n                # should match a letter or common punctuation\\n                data = \" \" + data\\n            self.preceding_stressed = False\\n\\n        if self.style:\\n            self.style_def.update(dumb_css_parser(data))\\n\\n        if self.maybe_automatic_link is not None:\\n            href = self.maybe_automatic_link\\n            if (\\n                href == data\\n                and self.absolute_url_matcher.match(href)\\n                and self.use_automatic_links\\n            ):\\n                self.o(\"<\" + data + \">\")\\n                self.empty_link = False\\n                return\\n            else:\\n                self.o(\"[\")\\n                self.maybe_automatic_link = None\\n                self.empty_link = False\\n\\n        if not self.code and not self.pre and not entity_char:\\n            data = escape_md_section(data, snob=self.escape_snob)\\n        self.preceding_data = data\\n        self.o(data, puredata=True)\\n\\n    def charref(self, name: str) -> str:\\n        if name[0] in [\"x\", \"X\"]:\\n            c = int(name[1:], 16)\\n        else:\\n            c = int(name)\\n\\n        if not self.unicode_snob and c in unifiable_n:\\n            return unifiable_n[c]\\n        else:\\n            try:\\n                return chr(c)\\n            except ValueError:  # invalid unicode\\n                return \"\"\\n\\n    def entityref(self, c: str) -> str:\\n        if not self.unicode_snob and c in config.UNIFIABLE:\\n            return config.UNIFIABLE[c]\\n        try:\\n            ch = html.entities.html5[c + \";\"]\\n        except KeyError:\\n            return \"&\" + c + \";\"\\n        return config.UNIFIABLE[c] if c == \"nbsp\" else ch\\n\\n    def google_nest_count(self, style: Dict[str, str]) -> int:\\n        \"\"\"\\n        Calculate the nesting count of google doc lists\\n\\n        :type style: dict\\n\\n        :rtype: int\\n        \"\"\"\\n        nest_count = 0\\n        if \"margin-left\" in style:\\n            nest_count = int(style[\"margin-left\"][:-2]) // self.google_list_indent\\n\\n        return nest_count\\n\\n    def optwrap(self, text: str) -> str:\\n        \"\"\"\\n        Wrap all paragraphs in the provided text.\\n\\n        :type text: str\\n\\n        :rtype: str\\n        \"\"\"\\n        if not self.body_width:\\n            return text\\n\\n        result = \"\"\\n        newlines = 0\\n        # I cannot think of a better solution for now.\\n        # To avoid the non-wrap behaviour for entire paras\\n        # because of the presence of a link in it\\n        if not self.wrap_links:\\n            self.inline_links = False\\n        for para in text.split(\"\\\\n\"):\\n            if len(para) > 0:\\n                if not skipwrap(\\n                    para, self.wrap_links, self.wrap_list_items, self.wrap_tables\\n                ):\\n                    indent = \"\"\\n                    if para.startswith(\"  \" + self.ul_item_mark):\\n                        # list item continuation: add a double indent to the\\n                        # new lines\\n                        indent = \"    \"\\n                    elif para.startswith(\"> \"):\\n                        # blockquote continuation: add the greater than symbol\\n                        # to the new lines\\n                        indent = \"> \"\\n                    wrapped = wrap(\\n                        para,\\n                        self.body_width,\\n                        break_long_words=False,\\n                        subsequent_indent=indent,\\n                    )\\n                    result += \"\\\\n\".join(wrapped)\\n                    if para.endswith(\"  \"):\\n                        result += \"  \\\\n\"\\n                        newlines = 1\\n                    elif indent:\\n                        result += \"\\\\n\"\\n                        newlines = 1\\n                    else:\\n                        result += \"\\\\n\\\\n\"\\n                        newlines = 2\\n                else:\\n                    # Warning for the tempted!!!\\n                    # Be aware that obvious replacement of this with\\n                    # line.isspace()\\n                    # DOES NOT work! Explanations are welcome.\\n                    if not config.RE_SPACE.match(para):\\n                        result += para + \"\\\\n\"\\n                        newlines = 1\\n            else:\\n                if newlines < 2:\\n                    result += \"\\\\n\"\\n                    newlines += 1\\n        return result\\n\\n\\ndef html2text(html: str, baseurl: str = \"\", bodywidth: Optional[int] = None) -> str:\\n    if bodywidth is None:\\n        bodywidth = config.BODY_WIDTH\\n    h = HTML2Text(baseurl=baseurl, bodywidth=bodywidth)\\n\\n    return h.handle(html)\\n'"}, {"func_args": {"source": "'from .cli import main\\n\\nmain()\\n'"}, "return_value": "'from .cli import main\\n\\nmain()\\n'"}, {"func_args": {"source": "'import argparse\\nimport sys\\n\\nfrom . import HTML2Text, __version__, config\\n\\n\\ndef main() -> None:\\n    baseurl = \"\"\\n\\n    class bcolors:\\n        HEADER = \"\\\\033[95m\"\\n        OKBLUE = \"\\\\033[94m\"\\n        OKGREEN = \"\\\\033[92m\"\\n        WARNING = \"\\\\033[93m\"\\n        FAIL = \"\\\\033[91m\"\\n        ENDC = \"\\\\033[0m\"\\n        BOLD = \"\\\\033[1m\"\\n        UNDERLINE = \"\\\\033[4m\"\\n\\n    p = argparse.ArgumentParser()\\n    p.add_argument(\\n        \"--default-image-alt\",\\n        dest=\"default_image_alt\",\\n        default=config.DEFAULT_IMAGE_ALT,\\n        help=\"The default alt string for images with missing ones\",\\n    )\\n    p.add_argument(\\n        \"--pad-tables\",\\n        dest=\"pad_tables\",\\n        action=\"store_true\",\\n        default=config.PAD_TABLES,\\n        help=\"pad the cells to equal column width in tables\",\\n    )\\n    p.add_argument(\\n        \"--no-wrap-links\",\\n        dest=\"wrap_links\",\\n        action=\"store_false\",\\n        default=config.WRAP_LINKS,\\n        help=\"don\\'t wrap links during conversion\",\\n    )\\n    p.add_argument(\\n        \"--wrap-list-items\",\\n        dest=\"wrap_list_items\",\\n        action=\"store_true\",\\n        default=config.WRAP_LIST_ITEMS,\\n        help=\"wrap list items during conversion\",\\n    )\\n    p.add_argument(\\n        \"--wrap-tables\",\\n        dest=\"wrap_tables\",\\n        action=\"store_true\",\\n        default=config.WRAP_TABLES,\\n        help=\"wrap tables\",\\n    )\\n    p.add_argument(\\n        \"--ignore-emphasis\",\\n        dest=\"ignore_emphasis\",\\n        action=\"store_true\",\\n        default=config.IGNORE_EMPHASIS,\\n        help=\"don\\'t include any formatting for emphasis\",\\n    )\\n    p.add_argument(\\n        \"--reference-links\",\\n        dest=\"inline_links\",\\n        action=\"store_false\",\\n        default=config.INLINE_LINKS,\\n        help=\"use reference style links instead of inline links\",\\n    )\\n    p.add_argument(\\n        \"--ignore-links\",\\n        dest=\"ignore_links\",\\n        action=\"store_true\",\\n        default=config.IGNORE_ANCHORS,\\n        help=\"don\\'t include any formatting for links\",\\n    )\\n    p.add_argument(\\n        \"--ignore-mailto-links\",\\n        action=\"store_true\",\\n        dest=\"ignore_mailto_links\",\\n        default=config.IGNORE_MAILTO_LINKS,\\n        help=\"don\\'t include mailto: links\",\\n    )\\n    p.add_argument(\\n        \"--protect-links\",\\n        dest=\"protect_links\",\\n        action=\"store_true\",\\n        default=config.PROTECT_LINKS,\\n        help=\"protect links from line breaks surrounding them with angle brackets\",\\n    )\\n    p.add_argument(\\n        \"--ignore-images\",\\n        dest=\"ignore_images\",\\n        action=\"store_true\",\\n        default=config.IGNORE_IMAGES,\\n        help=\"don\\'t include any formatting for images\",\\n    )\\n    p.add_argument(\\n        \"--images-as-html\",\\n        dest=\"images_as_html\",\\n        action=\"store_true\",\\n        default=config.IMAGES_AS_HTML,\\n        help=(\\n            \"Always write image tags as raw html; preserves `height`, `width` and \"\\n            \"`alt` if possible.\"\\n        ),\\n    )\\n    p.add_argument(\\n        \"--images-to-alt\",\\n        dest=\"images_to_alt\",\\n        action=\"store_true\",\\n        default=config.IMAGES_TO_ALT,\\n        help=\"Discard image data, only keep alt text\",\\n    )\\n    p.add_argument(\\n        \"--images-with-size\",\\n        dest=\"images_with_size\",\\n        action=\"store_true\",\\n        default=config.IMAGES_WITH_SIZE,\\n        help=(\\n            \"Write image tags with height and width attrs as raw html to retain \"\\n            \"dimensions\"\\n        ),\\n    )\\n    p.add_argument(\\n        \"-g\",\\n        \"--google-doc\",\\n        action=\"store_true\",\\n        dest=\"google_doc\",\\n        default=False,\\n        help=\"convert an html-exported Google Document\",\\n    )\\n    p.add_argument(\\n        \"-d\",\\n        \"--dash-unordered-list\",\\n        action=\"store_true\",\\n        dest=\"ul_style_dash\",\\n        default=False,\\n        help=\"use a dash rather than a star for unordered list items\",\\n    )\\n    p.add_argument(\\n        \"-e\",\\n        \"--asterisk-emphasis\",\\n        action=\"store_true\",\\n        dest=\"em_style_asterisk\",\\n        default=False,\\n        help=\"use an asterisk rather than an underscore for emphasized text\",\\n    )\\n    p.add_argument(\\n        \"-b\",\\n        \"--body-width\",\\n        dest=\"body_width\",\\n        type=int,\\n        default=config.BODY_WIDTH,\\n        help=\"number of characters per output line, 0 for no wrap\",\\n    )\\n    p.add_argument(\\n        \"-i\",\\n        \"--google-list-indent\",\\n        dest=\"list_indent\",\\n        type=int,\\n        default=config.GOOGLE_LIST_INDENT,\\n        help=\"number of pixels Google indents nested lists\",\\n    )\\n    p.add_argument(\\n        \"-s\",\\n        \"--hide-strikethrough\",\\n        action=\"store_true\",\\n        dest=\"hide_strikethrough\",\\n        default=False,\\n        help=\"hide strike-through text. only relevant when -g is \" \"specified as well\",\\n    )\\n    p.add_argument(\\n        \"--escape-all\",\\n        action=\"store_true\",\\n        dest=\"escape_snob\",\\n        default=False,\\n        help=(\\n            \"Escape all special characters.  Output is less readable, but avoids \"\\n            \"corner case formatting issues.\"\\n        ),\\n    )\\n    p.add_argument(\\n        \"--bypass-tables\",\\n        action=\"store_true\",\\n        dest=\"bypass_tables\",\\n        default=config.BYPASS_TABLES,\\n        help=\"Format tables in HTML rather than Markdown syntax.\",\\n    )\\n    p.add_argument(\\n        \"--ignore-tables\",\\n        action=\"store_true\",\\n        dest=\"ignore_tables\",\\n        default=config.IGNORE_TABLES,\\n        help=\"Ignore table-related tags (table, th, td, tr) \" \"while keeping rows.\",\\n    )\\n    p.add_argument(\\n        \"--single-line-break\",\\n        action=\"store_true\",\\n        dest=\"single_line_break\",\\n        default=config.SINGLE_LINE_BREAK,\\n        help=(\\n            \"Use a single line break after a block element rather than two line \"\\n            \"breaks. NOTE: Requires --body-width=0\"\\n        ),\\n    )\\n    p.add_argument(\\n        \"--unicode-snob\",\\n        action=\"store_true\",\\n        dest=\"unicode_snob\",\\n        default=config.UNICODE_SNOB,\\n        help=\"Use unicode throughout document\",\\n    )\\n    p.add_argument(\\n        \"--no-automatic-links\",\\n        action=\"store_false\",\\n        dest=\"use_automatic_links\",\\n        default=config.USE_AUTOMATIC_LINKS,\\n        help=\"Do not use automatic links wherever applicable\",\\n    )\\n    p.add_argument(\\n        \"--no-skip-internal-links\",\\n        action=\"store_false\",\\n        dest=\"skip_internal_links\",\\n        default=config.SKIP_INTERNAL_LINKS,\\n        help=\"Do not skip internal links\",\\n    )\\n    p.add_argument(\\n        \"--links-after-para\",\\n        action=\"store_true\",\\n        dest=\"links_each_paragraph\",\\n        default=config.LINKS_EACH_PARAGRAPH,\\n        help=\"Put links after each paragraph instead of document\",\\n    )\\n    p.add_argument(\\n        \"--mark-code\",\\n        action=\"store_true\",\\n        dest=\"mark_code\",\\n        default=config.MARK_CODE,\\n        help=\"Mark program code blocks with [code]...[/code]\",\\n    )\\n    p.add_argument(\\n        \"--decode-errors\",\\n        dest=\"decode_errors\",\\n        default=config.DECODE_ERRORS,\\n        help=(\\n            \"What to do in case of decode errors.\\'ignore\\', \\'strict\\' and \\'replace\\' are \"\\n            \"acceptable values\"\\n        ),\\n    )\\n    p.add_argument(\\n        \"--open-quote\",\\n        dest=\"open_quote\",\\n        default=config.OPEN_QUOTE,\\n        help=\"The character used to open quotes\",\\n    )\\n    p.add_argument(\\n        \"--close-quote\",\\n        dest=\"close_quote\",\\n        default=config.CLOSE_QUOTE,\\n        help=\"The character used to close quotes\",\\n    )\\n    p.add_argument(\\n        \"--version\", action=\"version\", version=\".\".join(map(str, __version__))\\n    )\\n    p.add_argument(\"filename\", nargs=\"?\")\\n    p.add_argument(\"encoding\", nargs=\"?\", default=\"utf-8\")\\n    args = p.parse_args()\\n\\n    if args.filename and args.filename != \"-\":\\n        with open(args.filename, \"rb\") as fp:\\n            data = fp.read()\\n    else:\\n        data = sys.stdin.buffer.read()\\n\\n    try:\\n        html = data.decode(args.encoding, args.decode_errors)\\n    except UnicodeDecodeError as err:\\n        warning = bcolors.WARNING + \"Warning:\" + bcolors.ENDC\\n        warning += \" Use the \" + bcolors.OKGREEN\\n        warning += \"--decode-errors=ignore\" + bcolors.ENDC + \" flag.\"\\n        print(warning)\\n        raise err\\n\\n    h = HTML2Text(baseurl=baseurl)\\n    # handle options\\n    if args.ul_style_dash:\\n        h.ul_item_mark = \"-\"\\n    if args.em_style_asterisk:\\n        h.emphasis_mark = \"*\"\\n        h.strong_mark = \"__\"\\n\\n    h.body_width = args.body_width\\n    h.google_list_indent = args.list_indent\\n    h.ignore_emphasis = args.ignore_emphasis\\n    h.ignore_links = args.ignore_links\\n    h.ignore_mailto_links = args.ignore_mailto_links\\n    h.protect_links = args.protect_links\\n    h.ignore_images = args.ignore_images\\n    h.images_as_html = args.images_as_html\\n    h.images_to_alt = args.images_to_alt\\n    h.images_with_size = args.images_with_size\\n    h.google_doc = args.google_doc\\n    h.hide_strikethrough = args.hide_strikethrough\\n    h.escape_snob = args.escape_snob\\n    h.bypass_tables = args.bypass_tables\\n    h.ignore_tables = args.ignore_tables\\n    h.single_line_break = args.single_line_break\\n    h.inline_links = args.inline_links\\n    h.unicode_snob = args.unicode_snob\\n    h.use_automatic_links = args.use_automatic_links\\n    h.skip_internal_links = args.skip_internal_links\\n    h.links_each_paragraph = args.links_each_paragraph\\n    h.mark_code = args.mark_code\\n    h.wrap_links = args.wrap_links\\n    h.wrap_list_items = args.wrap_list_items\\n    h.wrap_tables = args.wrap_tables\\n    h.pad_tables = args.pad_tables\\n    h.default_image_alt = args.default_image_alt\\n    h.open_quote = args.open_quote\\n    h.close_quote = args.close_quote\\n\\n    sys.stdout.write(h.handle(html))\\n'"}, "return_value": "'import argparse\\nimport sys\\n\\nfrom . import HTML2Text, __version__, config\\n\\n\\ndef main() -> None:\\n    baseurl = \"\"\\n\\n    class bcolors:\\n        HEADER = \"\\\\033[95m\"\\n        OKBLUE = \"\\\\033[94m\"\\n        OKGREEN = \"\\\\033[92m\"\\n        WARNING = \"\\\\033[93m\"\\n        FAIL = \"\\\\033[91m\"\\n        ENDC = \"\\\\033[0m\"\\n        BOLD = \"\\\\033[1m\"\\n        UNDERLINE = \"\\\\033[4m\"\\n\\n    p = argparse.ArgumentParser()\\n    p.add_argument(\\n        \"--default-image-alt\",\\n        dest=\"default_image_alt\",\\n        default=config.DEFAULT_IMAGE_ALT,\\n        help=\"The default alt string for images with missing ones\",\\n    )\\n    p.add_argument(\\n        \"--pad-tables\",\\n        dest=\"pad_tables\",\\n        action=\"store_true\",\\n        default=config.PAD_TABLES,\\n        help=\"pad the cells to equal column width in tables\",\\n    )\\n    p.add_argument(\\n        \"--no-wrap-links\",\\n        dest=\"wrap_links\",\\n        action=\"store_false\",\\n        default=config.WRAP_LINKS,\\n        help=\"don\\'t wrap links during conversion\",\\n    )\\n    p.add_argument(\\n        \"--wrap-list-items\",\\n        dest=\"wrap_list_items\",\\n        action=\"store_true\",\\n        default=config.WRAP_LIST_ITEMS,\\n        help=\"wrap list items during conversion\",\\n    )\\n    p.add_argument(\\n        \"--wrap-tables\",\\n        dest=\"wrap_tables\",\\n        action=\"store_true\",\\n        default=config.WRAP_TABLES,\\n        help=\"wrap tables\",\\n    )\\n    p.add_argument(\\n        \"--ignore-emphasis\",\\n        dest=\"ignore_emphasis\",\\n        action=\"store_true\",\\n        default=config.IGNORE_EMPHASIS,\\n        help=\"don\\'t include any formatting for emphasis\",\\n    )\\n    p.add_argument(\\n        \"--reference-links\",\\n        dest=\"inline_links\",\\n        action=\"store_false\",\\n        default=config.INLINE_LINKS,\\n        help=\"use reference style links instead of inline links\",\\n    )\\n    p.add_argument(\\n        \"--ignore-links\",\\n        dest=\"ignore_links\",\\n        action=\"store_true\",\\n        default=config.IGNORE_ANCHORS,\\n        help=\"don\\'t include any formatting for links\",\\n    )\\n    p.add_argument(\\n        \"--ignore-mailto-links\",\\n        action=\"store_true\",\\n        dest=\"ignore_mailto_links\",\\n        default=config.IGNORE_MAILTO_LINKS,\\n        help=\"don\\'t include mailto: links\",\\n    )\\n    p.add_argument(\\n        \"--protect-links\",\\n        dest=\"protect_links\",\\n        action=\"store_true\",\\n        default=config.PROTECT_LINKS,\\n        help=\"protect links from line breaks surrounding them with angle brackets\",\\n    )\\n    p.add_argument(\\n        \"--ignore-images\",\\n        dest=\"ignore_images\",\\n        action=\"store_true\",\\n        default=config.IGNORE_IMAGES,\\n        help=\"don\\'t include any formatting for images\",\\n    )\\n    p.add_argument(\\n        \"--images-as-html\",\\n        dest=\"images_as_html\",\\n        action=\"store_true\",\\n        default=config.IMAGES_AS_HTML,\\n        help=(\\n            \"Always write image tags as raw html; preserves `height`, `width` and \"\\n            \"`alt` if possible.\"\\n        ),\\n    )\\n    p.add_argument(\\n        \"--images-to-alt\",\\n        dest=\"images_to_alt\",\\n        action=\"store_true\",\\n        default=config.IMAGES_TO_ALT,\\n        help=\"Discard image data, only keep alt text\",\\n    )\\n    p.add_argument(\\n        \"--images-with-size\",\\n        dest=\"images_with_size\",\\n        action=\"store_true\",\\n        default=config.IMAGES_WITH_SIZE,\\n        help=(\\n            \"Write image tags with height and width attrs as raw html to retain \"\\n            \"dimensions\"\\n        ),\\n    )\\n    p.add_argument(\\n        \"-g\",\\n        \"--google-doc\",\\n        action=\"store_true\",\\n        dest=\"google_doc\",\\n        default=False,\\n        help=\"convert an html-exported Google Document\",\\n    )\\n    p.add_argument(\\n        \"-d\",\\n        \"--dash-unordered-list\",\\n        action=\"store_true\",\\n        dest=\"ul_style_dash\",\\n        default=False,\\n        help=\"use a dash rather than a star for unordered list items\",\\n    )\\n    p.add_argument(\\n        \"-e\",\\n        \"--asterisk-emphasis\",\\n        action=\"store_true\",\\n        dest=\"em_style_asterisk\",\\n        default=False,\\n        help=\"use an asterisk rather than an underscore for emphasized text\",\\n    )\\n    p.add_argument(\\n        \"-b\",\\n        \"--body-width\",\\n        dest=\"body_width\",\\n        type=int,\\n        default=config.BODY_WIDTH,\\n        help=\"number of characters per output line, 0 for no wrap\",\\n    )\\n    p.add_argument(\\n        \"-i\",\\n        \"--google-list-indent\",\\n        dest=\"list_indent\",\\n        type=int,\\n        default=config.GOOGLE_LIST_INDENT,\\n        help=\"number of pixels Google indents nested lists\",\\n    )\\n    p.add_argument(\\n        \"-s\",\\n        \"--hide-strikethrough\",\\n        action=\"store_true\",\\n        dest=\"hide_strikethrough\",\\n        default=False,\\n        help=\"hide strike-through text. only relevant when -g is \" \"specified as well\",\\n    )\\n    p.add_argument(\\n        \"--escape-all\",\\n        action=\"store_true\",\\n        dest=\"escape_snob\",\\n        default=False,\\n        help=(\\n            \"Escape all special characters.  Output is less readable, but avoids \"\\n            \"corner case formatting issues.\"\\n        ),\\n    )\\n    p.add_argument(\\n        \"--bypass-tables\",\\n        action=\"store_true\",\\n        dest=\"bypass_tables\",\\n        default=config.BYPASS_TABLES,\\n        help=\"Format tables in HTML rather than Markdown syntax.\",\\n    )\\n    p.add_argument(\\n        \"--ignore-tables\",\\n        action=\"store_true\",\\n        dest=\"ignore_tables\",\\n        default=config.IGNORE_TABLES,\\n        help=\"Ignore table-related tags (table, th, td, tr) \" \"while keeping rows.\",\\n    )\\n    p.add_argument(\\n        \"--single-line-break\",\\n        action=\"store_true\",\\n        dest=\"single_line_break\",\\n        default=config.SINGLE_LINE_BREAK,\\n        help=(\\n            \"Use a single line break after a block element rather than two line \"\\n            \"breaks. NOTE: Requires --body-width=0\"\\n        ),\\n    )\\n    p.add_argument(\\n        \"--unicode-snob\",\\n        action=\"store_true\",\\n        dest=\"unicode_snob\",\\n        default=config.UNICODE_SNOB,\\n        help=\"Use unicode throughout document\",\\n    )\\n    p.add_argument(\\n        \"--no-automatic-links\",\\n        action=\"store_false\",\\n        dest=\"use_automatic_links\",\\n        default=config.USE_AUTOMATIC_LINKS,\\n        help=\"Do not use automatic links wherever applicable\",\\n    )\\n    p.add_argument(\\n        \"--no-skip-internal-links\",\\n        action=\"store_false\",\\n        dest=\"skip_internal_links\",\\n        default=config.SKIP_INTERNAL_LINKS,\\n        help=\"Do not skip internal links\",\\n    )\\n    p.add_argument(\\n        \"--links-after-para\",\\n        action=\"store_true\",\\n        dest=\"links_each_paragraph\",\\n        default=config.LINKS_EACH_PARAGRAPH,\\n        help=\"Put links after each paragraph instead of document\",\\n    )\\n    p.add_argument(\\n        \"--mark-code\",\\n        action=\"store_true\",\\n        dest=\"mark_code\",\\n        default=config.MARK_CODE,\\n        help=\"Mark program code blocks with [code]...[/code]\",\\n    )\\n    p.add_argument(\\n        \"--decode-errors\",\\n        dest=\"decode_errors\",\\n        default=config.DECODE_ERRORS,\\n        help=(\\n            \"What to do in case of decode errors.\\'ignore\\', \\'strict\\' and \\'replace\\' are \"\\n            \"acceptable values\"\\n        ),\\n    )\\n    p.add_argument(\\n        \"--open-quote\",\\n        dest=\"open_quote\",\\n        default=config.OPEN_QUOTE,\\n        help=\"The character used to open quotes\",\\n    )\\n    p.add_argument(\\n        \"--close-quote\",\\n        dest=\"close_quote\",\\n        default=config.CLOSE_QUOTE,\\n        help=\"The character used to close quotes\",\\n    )\\n    p.add_argument(\\n        \"--version\", action=\"version\", version=\".\".join(map(str, __version__))\\n    )\\n    p.add_argument(\"filename\", nargs=\"?\")\\n    p.add_argument(\"encoding\", nargs=\"?\", default=\"utf-8\")\\n    args = p.parse_args()\\n\\n    if args.filename and args.filename != \"-\":\\n        with open(args.filename, \"rb\") as fp:\\n            data = fp.read()\\n    else:\\n        data = sys.stdin.buffer.read()\\n\\n    try:\\n        html = data.decode(args.encoding, args.decode_errors)\\n    except UnicodeDecodeError as err:\\n        warning = bcolors.WARNING + \"Warning:\" + bcolors.ENDC\\n        warning += \" Use the \" + bcolors.OKGREEN\\n        warning += \"--decode-errors=ignore\" + bcolors.ENDC + \" flag.\"\\n        print(warning)\\n        raise err\\n\\n    h = HTML2Text(baseurl=baseurl)\\n    # handle options\\n    if args.ul_style_dash:\\n        h.ul_item_mark = \"-\"\\n    if args.em_style_asterisk:\\n        h.emphasis_mark = \"*\"\\n        h.strong_mark = \"__\"\\n\\n    h.body_width = args.body_width\\n    h.google_list_indent = args.list_indent\\n    h.ignore_emphasis = args.ignore_emphasis\\n    h.ignore_links = args.ignore_links\\n    h.ignore_mailto_links = args.ignore_mailto_links\\n    h.protect_links = args.protect_links\\n    h.ignore_images = args.ignore_images\\n    h.images_as_html = args.images_as_html\\n    h.images_to_alt = args.images_to_alt\\n    h.images_with_size = args.images_with_size\\n    h.google_doc = args.google_doc\\n    h.hide_strikethrough = args.hide_strikethrough\\n    h.escape_snob = args.escape_snob\\n    h.bypass_tables = args.bypass_tables\\n    h.ignore_tables = args.ignore_tables\\n    h.single_line_break = args.single_line_break\\n    h.inline_links = args.inline_links\\n    h.unicode_snob = args.unicode_snob\\n    h.use_automatic_links = args.use_automatic_links\\n    h.skip_internal_links = args.skip_internal_links\\n    h.links_each_paragraph = args.links_each_paragraph\\n    h.mark_code = args.mark_code\\n    h.wrap_links = args.wrap_links\\n    h.wrap_list_items = args.wrap_list_items\\n    h.wrap_tables = args.wrap_tables\\n    h.pad_tables = args.pad_tables\\n    h.default_image_alt = args.default_image_alt\\n    h.open_quote = args.open_quote\\n    h.close_quote = args.close_quote\\n\\n    sys.stdout.write(h.handle(html))\\n'"}, {"func_args": {"source": "'import re\\n\\n# Use Unicode characters instead of their ascii pseudo-replacements\\nUNICODE_SNOB = False\\n\\n# Marker to use for marking tables for padding post processing\\nTABLE_MARKER_FOR_PAD = \"special_marker_for_table_padding\"\\n# Escape all special characters.  Output is less readable, but avoids\\n# corner case formatting issues.\\nESCAPE_SNOB = False\\n\\n# Put the links after each paragraph instead of at the end.\\nLINKS_EACH_PARAGRAPH = False\\n\\n# Wrap long lines at position. 0 for no wrapping.\\nBODY_WIDTH = 78\\n\\n# Don\\'t show internal links (href=\"#local-anchor\") -- corresponding link\\n# targets won\\'t be visible in the plain text file anyway.\\nSKIP_INTERNAL_LINKS = True\\n\\n# Use inline, rather than reference, formatting for images and links\\nINLINE_LINKS = True\\n\\n# Protect links from line breaks surrounding them with angle brackets (in\\n# addition to their square brackets)\\nPROTECT_LINKS = False\\n# WRAP_LINKS = True\\nWRAP_LINKS = True\\n\\n# Wrap list items.\\nWRAP_LIST_ITEMS = False\\n\\n# Wrap tables\\nWRAP_TABLES = False\\n\\n# Number of pixels Google indents nested lists\\nGOOGLE_LIST_INDENT = 36\\n\\n# Values Google and others may use to indicate bold text\\nBOLD_TEXT_STYLE_VALUES = (\"bold\", \"700\", \"800\", \"900\")\\n\\nIGNORE_ANCHORS = False\\nIGNORE_MAILTO_LINKS = False\\nIGNORE_IMAGES = False\\nIMAGES_AS_HTML = False\\nIMAGES_TO_ALT = False\\nIMAGES_WITH_SIZE = False\\nIGNORE_EMPHASIS = False\\nMARK_CODE = False\\nDECODE_ERRORS = \"strict\"\\nDEFAULT_IMAGE_ALT = \"\"\\nPAD_TABLES = False\\n\\n# Convert links with same href and text to <href> format\\n# if they are absolute links\\nUSE_AUTOMATIC_LINKS = True\\n\\n# For checking space-only lines on line 771\\nRE_SPACE = re.compile(r\"\\\\s\\\\+\")\\n\\nRE_ORDERED_LIST_MATCHER = re.compile(r\"\\\\d+\\\\.\\\\s\")\\nRE_UNORDERED_LIST_MATCHER = re.compile(r\"[-\\\\*\\\\+]\\\\s\")\\nRE_MD_CHARS_MATCHER = re.compile(r\"([\\\\\\\\\\\\[\\\\]\\\\(\\\\)])\")\\nRE_MD_CHARS_MATCHER_ALL = re.compile(r\"([`\\\\*_{}\\\\[\\\\]\\\\(\\\\)#!])\")\\n\\n# to find links in the text\\nRE_LINK = re.compile(r\"(\\\\[.*?\\\\] ?\\\\(.*?\\\\))|(\\\\[.*?\\\\]:.*?)\")\\n\\n# to find table separators\\nRE_TABLE = re.compile(r\" \\\\| \")\\n\\nRE_MD_DOT_MATCHER = re.compile(\\n    r\"\"\"\\n    ^             # start of line\\n    (\\\\s*\\\\d+)      # optional whitespace and a number\\n    (\\\\.)          # dot\\n    (?=\\\\s)        # lookahead assert whitespace\\n    \"\"\",\\n    re.MULTILINE | re.VERBOSE,\\n)\\nRE_MD_PLUS_MATCHER = re.compile(\\n    r\"\"\"\\n    ^\\n    (\\\\s*)\\n    (\\\\+)\\n    (?=\\\\s)\\n    \"\"\",\\n    flags=re.MULTILINE | re.VERBOSE,\\n)\\nRE_MD_DASH_MATCHER = re.compile(\\n    r\"\"\"\\n    ^\\n    (\\\\s*)\\n    (-)\\n    (?=\\\\s|\\\\-)     # followed by whitespace (bullet list, or spaced out hr)\\n                  # or another dash (header or hr)\\n    \"\"\",\\n    flags=re.MULTILINE | re.VERBOSE,\\n)\\nRE_SLASH_CHARS = r\"\\\\`*_{}[]()#+-.!\"\\nRE_MD_BACKSLASH_MATCHER = re.compile(\\n    r\"\"\"\\n    (\\\\\\\\)          # match one slash\\n    (?=[%s])      # followed by a char that requires escaping\\n    \"\"\"\\n    % re.escape(RE_SLASH_CHARS),\\n    flags=re.VERBOSE,\\n)\\n\\nUNIFIABLE = {\\n    \"rsquo\": \"\\'\",\\n    \"lsquo\": \"\\'\",\\n    \"rdquo\": \\'\"\\',\\n    \"ldquo\": \\'\"\\',\\n    \"copy\": \"(C)\",\\n    \"mdash\": \"--\",\\n    \"nbsp\": \" \",\\n    \"rarr\": \"->\",\\n    \"larr\": \"<-\",\\n    \"middot\": \"*\",\\n    \"ndash\": \"-\",\\n    \"oelig\": \"oe\",\\n    \"aelig\": \"ae\",\\n    \"agrave\": \"a\",\\n    \"aacute\": \"a\",\\n    \"acirc\": \"a\",\\n    \"atilde\": \"a\",\\n    \"auml\": \"a\",\\n    \"aring\": \"a\",\\n    \"egrave\": \"e\",\\n    \"eacute\": \"e\",\\n    \"ecirc\": \"e\",\\n    \"euml\": \"e\",\\n    \"igrave\": \"i\",\\n    \"iacute\": \"i\",\\n    \"icirc\": \"i\",\\n    \"iuml\": \"i\",\\n    \"ograve\": \"o\",\\n    \"oacute\": \"o\",\\n    \"ocirc\": \"o\",\\n    \"otilde\": \"o\",\\n    \"ouml\": \"o\",\\n    \"ugrave\": \"u\",\\n    \"uacute\": \"u\",\\n    \"ucirc\": \"u\",\\n    \"uuml\": \"u\",\\n    \"lrm\": \"\",\\n    \"rlm\": \"\",\\n}\\n\\n# Format tables in HTML rather than Markdown syntax\\nBYPASS_TABLES = False\\n# Ignore table-related tags (table, th, td, tr) while keeping rows\\nIGNORE_TABLES = False\\n\\n\\n# Use a single line break after a block element rather than two line breaks.\\n# NOTE: Requires body width setting to be 0.\\nSINGLE_LINE_BREAK = False\\n\\n\\n# Use double quotation marks when converting the <q> tag.\\nOPEN_QUOTE = \\'\"\\'\\nCLOSE_QUOTE = \\'\"\\'\\n'"}, "return_value": "'import re\\n\\n# Use Unicode characters instead of their ascii pseudo-replacements\\nUNICODE_SNOB = False\\n\\n# Marker to use for marking tables for padding post processing\\nTABLE_MARKER_FOR_PAD = \"special_marker_for_table_padding\"\\n# Escape all special characters.  Output is less readable, but avoids\\n# corner case formatting issues.\\nESCAPE_SNOB = False\\n\\n# Put the links after each paragraph instead of at the end.\\nLINKS_EACH_PARAGRAPH = False\\n\\n# Wrap long lines at position. 0 for no wrapping.\\nBODY_WIDTH = 78\\n\\n# Don\\'t show internal links (href=\"#local-anchor\") -- corresponding link\\n# targets won\\'t be visible in the plain text file anyway.\\nSKIP_INTERNAL_LINKS = True\\n\\n# Use inline, rather than reference, formatting for images and links\\nINLINE_LINKS = True\\n\\n# Protect links from line breaks surrounding them with angle brackets (in\\n# addition to their square brackets)\\nPROTECT_LINKS = False\\n# WRAP_LINKS = True\\nWRAP_LINKS = True\\n\\n# Wrap list items.\\nWRAP_LIST_ITEMS = False\\n\\n# Wrap tables\\nWRAP_TABLES = False\\n\\n# Number of pixels Google indents nested lists\\nGOOGLE_LIST_INDENT = 36\\n\\n# Values Google and others may use to indicate bold text\\nBOLD_TEXT_STYLE_VALUES = (\"bold\", \"700\", \"800\", \"900\")\\n\\nIGNORE_ANCHORS = False\\nIGNORE_MAILTO_LINKS = False\\nIGNORE_IMAGES = False\\nIMAGES_AS_HTML = False\\nIMAGES_TO_ALT = False\\nIMAGES_WITH_SIZE = False\\nIGNORE_EMPHASIS = False\\nMARK_CODE = False\\nDECODE_ERRORS = \"strict\"\\nDEFAULT_IMAGE_ALT = \"\"\\nPAD_TABLES = False\\n\\n# Convert links with same href and text to <href> format\\n# if they are absolute links\\nUSE_AUTOMATIC_LINKS = True\\n\\n# For checking space-only lines on line 771\\nRE_SPACE = re.compile(r\"\\\\s\\\\+\")\\n\\nRE_ORDERED_LIST_MATCHER = re.compile(r\"\\\\d+\\\\.\\\\s\")\\nRE_UNORDERED_LIST_MATCHER = re.compile(r\"[-\\\\*\\\\+]\\\\s\")\\nRE_MD_CHARS_MATCHER = re.compile(r\"([\\\\\\\\\\\\[\\\\]\\\\(\\\\)])\")\\nRE_MD_CHARS_MATCHER_ALL = re.compile(r\"([`\\\\*_{}\\\\[\\\\]\\\\(\\\\)#!])\")\\n\\n# to find links in the text\\nRE_LINK = re.compile(r\"(\\\\[.*?\\\\] ?\\\\(.*?\\\\))|(\\\\[.*?\\\\]:.*?)\")\\n\\n# to find table separators\\nRE_TABLE = re.compile(r\" \\\\| \")\\n\\nRE_MD_DOT_MATCHER = re.compile(\\n    r\"\"\"\\n    ^             # start of line\\n    (\\\\s*\\\\d+)      # optional whitespace and a number\\n    (\\\\.)          # dot\\n    (?=\\\\s)        # lookahead assert whitespace\\n    \"\"\",\\n    re.MULTILINE | re.VERBOSE,\\n)\\nRE_MD_PLUS_MATCHER = re.compile(\\n    r\"\"\"\\n    ^\\n    (\\\\s*)\\n    (\\\\+)\\n    (?=\\\\s)\\n    \"\"\",\\n    flags=re.MULTILINE | re.VERBOSE,\\n)\\nRE_MD_DASH_MATCHER = re.compile(\\n    r\"\"\"\\n    ^\\n    (\\\\s*)\\n    (-)\\n    (?=\\\\s|\\\\-)     # followed by whitespace (bullet list, or spaced out hr)\\n                  # or another dash (header or hr)\\n    \"\"\",\\n    flags=re.MULTILINE | re.VERBOSE,\\n)\\nRE_SLASH_CHARS = r\"\\\\`*_{}[]()#+-.!\"\\nRE_MD_BACKSLASH_MATCHER = re.compile(\\n    r\"\"\"\\n    (\\\\\\\\)          # match one slash\\n    (?=[%s])      # followed by a char that requires escaping\\n    \"\"\"\\n    % re.escape(RE_SLASH_CHARS),\\n    flags=re.VERBOSE,\\n)\\n\\nUNIFIABLE = {\\n    \"rsquo\": \"\\'\",\\n    \"lsquo\": \"\\'\",\\n    \"rdquo\": \\'\"\\',\\n    \"ldquo\": \\'\"\\',\\n    \"copy\": \"(C)\",\\n    \"mdash\": \"--\",\\n    \"nbsp\": \" \",\\n    \"rarr\": \"->\",\\n    \"larr\": \"<-\",\\n    \"middot\": \"*\",\\n    \"ndash\": \"-\",\\n    \"oelig\": \"oe\",\\n    \"aelig\": \"ae\",\\n    \"agrave\": \"a\",\\n    \"aacute\": \"a\",\\n    \"acirc\": \"a\",\\n    \"atilde\": \"a\",\\n    \"auml\": \"a\",\\n    \"aring\": \"a\",\\n    \"egrave\": \"e\",\\n    \"eacute\": \"e\",\\n    \"ecirc\": \"e\",\\n    \"euml\": \"e\",\\n    \"igrave\": \"i\",\\n    \"iacute\": \"i\",\\n    \"icirc\": \"i\",\\n    \"iuml\": \"i\",\\n    \"ograve\": \"o\",\\n    \"oacute\": \"o\",\\n    \"ocirc\": \"o\",\\n    \"otilde\": \"o\",\\n    \"ouml\": \"o\",\\n    \"ugrave\": \"u\",\\n    \"uacute\": \"u\",\\n    \"ucirc\": \"u\",\\n    \"uuml\": \"u\",\\n    \"lrm\": \"\",\\n    \"rlm\": \"\",\\n}\\n\\n# Format tables in HTML rather than Markdown syntax\\nBYPASS_TABLES = False\\n# Ignore table-related tags (table, th, td, tr) while keeping rows\\nIGNORE_TABLES = False\\n\\n\\n# Use a single line break after a block element rather than two line breaks.\\n# NOTE: Requires body width setting to be 0.\\nSINGLE_LINE_BREAK = False\\n\\n\\n# Use double quotation marks when converting the <q> tag.\\nOPEN_QUOTE = \\'\"\\'\\nCLOSE_QUOTE = \\'\"\\'\\n'"}, {"func_args": {"source": "'from typing import Dict, Optional\\n\\n\\nclass AnchorElement:\\n    __slots__ = [\"attrs\", \"count\", \"outcount\"]\\n\\n    def __init__(self, attrs: Dict[str, Optional[str]], count: int, outcount: int):\\n        self.attrs = attrs\\n        self.count = count\\n        self.outcount = outcount\\n\\n\\nclass ListElement:\\n    __slots__ = [\"name\", \"num\"]\\n\\n    def __init__(self, name: str, num: int):\\n        self.name = name\\n        self.num = num\\n'"}, "return_value": "'from typing import Dict, Optional\\n\\n\\nclass AnchorElement:\\n    __slots__ = [\"attrs\", \"count\", \"outcount\"]\\n\\n    def __init__(self, attrs: Dict[str, Optional[str]], count: int, outcount: int):\\n        self.attrs = attrs\\n        self.count = count\\n        self.outcount = outcount\\n\\n\\nclass ListElement:\\n    __slots__ = [\"name\", \"num\"]\\n\\n    def __init__(self, name: str, num: int):\\n        self.name = name\\n        self.num = num\\n'"}, {"func_args": {"source": "'class OutCallback:\\n    def __call__(self, s: str) -> None:\\n        ...\\n'"}, "return_value": "'class OutCallback:\\n    def __call__(self, s: str) -> None:\\n        ...\\n'"}, {"func_args": {"source": "'import html.entities\\nfrom typing import Dict, List, Optional\\n\\nfrom . import config\\n\\nunifiable_n = {\\n    html.entities.name2codepoint[k]: v\\n    for k, v in config.UNIFIABLE.items()\\n    if k != \"nbsp\"\\n}\\n\\n\\ndef hn(tag: str) -> int:\\n    if tag[0] == \"h\" and len(tag) == 2:\\n        n = tag[1]\\n        if \"0\" < n <= \"9\":\\n            return int(n)\\n    return 0\\n\\n\\ndef dumb_property_dict(style: str) -> Dict[str, str]:\\n    \"\"\"\\n    :returns: A hash of css attributes\\n    \"\"\"\\n    return {\\n        x.strip().lower(): y.strip().lower()\\n        for x, y in [z.split(\":\", 1) for z in style.split(\";\") if \":\" in z]\\n    }\\n\\n\\ndef dumb_css_parser(data: str) -> Dict[str, Dict[str, str]]:\\n    \"\"\"\\n    :type data: str\\n\\n    :returns: A hash of css selectors, each of which contains a hash of\\n    css attributes.\\n    :rtype: dict\\n    \"\"\"\\n    # remove @import sentences\\n    data += \";\"\\n    importIndex = data.find(\"@import\")\\n    while importIndex != -1:\\n        data = data[0:importIndex] + data[data.find(\";\", importIndex) + 1 :]\\n        importIndex = data.find(\"@import\")\\n\\n    # parse the css. reverted from dictionary comprehension in order to\\n    # support older pythons\\n    pairs = [x.split(\"{\") for x in data.split(\"}\") if \"{\" in x.strip()]\\n    try:\\n        elements = {a.strip(): dumb_property_dict(b) for a, b in pairs}\\n    except ValueError:\\n        elements = {}  # not that important\\n\\n    return elements\\n\\n\\ndef element_style(\\n    attrs: Dict[str, Optional[str]],\\n    style_def: Dict[str, Dict[str, str]],\\n    parent_style: Dict[str, str],\\n) -> Dict[str, str]:\\n    \"\"\"\\n    :type attrs: dict\\n    :type style_def: dict\\n    :type style_def: dict\\n\\n    :returns: A hash of the \\'final\\' style attributes of the element\\n    :rtype: dict\\n    \"\"\"\\n    style = parent_style.copy()\\n    if \"class\" in attrs:\\n        assert attrs[\"class\"] is not None\\n        for css_class in attrs[\"class\"].split():\\n            css_style = style_def.get(\".\" + css_class, {})\\n            style.update(css_style)\\n    if \"style\" in attrs:\\n        assert attrs[\"style\"] is not None\\n        immediate_style = dumb_property_dict(attrs[\"style\"])\\n        style.update(immediate_style)\\n\\n    return style\\n\\n\\ndef google_list_style(style: Dict[str, str]) -> str:\\n    \"\"\"\\n    Finds out whether this is an ordered or unordered list\\n\\n    :type style: dict\\n\\n    :rtype: str\\n    \"\"\"\\n    if \"list-style-type\" in style:\\n        list_style = style[\"list-style-type\"]\\n        if list_style in [\"disc\", \"circle\", \"square\", \"none\"]:\\n            return \"ul\"\\n\\n    return \"ol\"\\n\\n\\ndef google_has_height(style: Dict[str, str]) -> bool:\\n    \"\"\"\\n    Check if the style of the element has the \\'height\\' attribute\\n    explicitly defined\\n\\n    :type style: dict\\n\\n    :rtype: bool\\n    \"\"\"\\n    return \"height\" in style\\n\\n\\ndef google_text_emphasis(style: Dict[str, str]) -> List[str]:\\n    \"\"\"\\n    :type style: dict\\n\\n    :returns: A list of all emphasis modifiers of the element\\n    :rtype: list\\n    \"\"\"\\n    emphasis = []\\n    if \"text-decoration\" in style:\\n        emphasis.append(style[\"text-decoration\"])\\n    if \"font-style\" in style:\\n        emphasis.append(style[\"font-style\"])\\n    if \"font-weight\" in style:\\n        emphasis.append(style[\"font-weight\"])\\n\\n    return emphasis\\n\\n\\ndef google_fixed_width_font(style: Dict[str, str]) -> bool:\\n    \"\"\"\\n    Check if the css of the current element defines a fixed width font\\n\\n    :type style: dict\\n\\n    :rtype: bool\\n    \"\"\"\\n    font_family = \"\"\\n    if \"font-family\" in style:\\n        font_family = style[\"font-family\"]\\n    return \"courier new\" == font_family or \"consolas\" == font_family\\n\\n\\ndef list_numbering_start(attrs: Dict[str, Optional[str]]) -> int:\\n    \"\"\"\\n    Extract numbering from list element attributes\\n\\n    :type attrs: dict\\n\\n    :rtype: int or None\\n    \"\"\"\\n    if \"start\" in attrs:\\n        assert attrs[\"start\"] is not None\\n        try:\\n            return int(attrs[\"start\"]) - 1\\n        except ValueError:\\n            pass\\n\\n    return 0\\n\\n\\ndef skipwrap(\\n    para: str, wrap_links: bool, wrap_list_items: bool, wrap_tables: bool\\n) -> bool:\\n    # If it appears to contain a link\\n    # don\\'t wrap\\n    if not wrap_links and config.RE_LINK.search(para):\\n        return True\\n    # If the text begins with four spaces or one tab, it\\'s a code block;\\n    # don\\'t wrap\\n    if para[0:4] == \"    \" or para[0] == \"\\\\t\":\\n        return True\\n\\n    # If the text begins with only two \"--\", possibly preceded by\\n    # whitespace, that\\'s an emdash; so wrap.\\n    stripped = para.lstrip()\\n    if stripped[0:2] == \"--\" and len(stripped) > 2 and stripped[2] != \"-\":\\n        return False\\n\\n    # I\\'m not sure what this is for; I thought it was to detect lists,\\n    # but there\\'s a <br>-inside-<span> case in one of the tests that\\n    # also depends upon it.\\n    if stripped[0:1] in (\"-\", \"*\") and not stripped[0:2] == \"**\":\\n        return not wrap_list_items\\n\\n    # If text contains a pipe character it is likely a table\\n    if not wrap_tables and config.RE_TABLE.search(para):\\n        return True\\n\\n    # If the text begins with a single -, *, or +, followed by a space,\\n    # or an integer, followed by a ., followed by a space (in either\\n    # case optionally proceeded by whitespace), it\\'s a list; don\\'t wrap.\\n    return bool(\\n        config.RE_ORDERED_LIST_MATCHER.match(stripped)\\n        or config.RE_UNORDERED_LIST_MATCHER.match(stripped)\\n    )\\n\\n\\ndef escape_md(text: str) -> str:\\n    \"\"\"\\n    Escapes markdown-sensitive characters within other markdown\\n    constructs.\\n    \"\"\"\\n    return config.RE_MD_CHARS_MATCHER.sub(r\"\\\\\\\\\\\\1\", text)\\n\\n\\ndef escape_md_section(text: str, snob: bool = False) -> str:\\n    \"\"\"\\n    Escapes markdown-sensitive characters across whole document sections.\\n    \"\"\"\\n    text = config.RE_MD_BACKSLASH_MATCHER.sub(r\"\\\\\\\\\\\\1\", text)\\n\\n    if snob:\\n        text = config.RE_MD_CHARS_MATCHER_ALL.sub(r\"\\\\\\\\\\\\1\", text)\\n\\n    text = config.RE_MD_DOT_MATCHER.sub(r\"\\\\1\\\\\\\\\\\\2\", text)\\n    text = config.RE_MD_PLUS_MATCHER.sub(r\"\\\\1\\\\\\\\\\\\2\", text)\\n    text = config.RE_MD_DASH_MATCHER.sub(r\"\\\\1\\\\\\\\\\\\2\", text)\\n\\n    return text\\n\\n\\ndef reformat_table(lines: List[str], right_margin: int) -> List[str]:\\n    \"\"\"\\n    Given the lines of a table\\n    padds the cells and returns the new lines\\n    \"\"\"\\n    # find the maximum width of the columns\\n    max_width = [len(x.rstrip()) + right_margin for x in lines[0].split(\"|\")]\\n    max_cols = len(max_width)\\n    for line in lines:\\n        cols = [x.rstrip() for x in line.split(\"|\")]\\n        num_cols = len(cols)\\n\\n        # don\\'t drop any data if colspan attributes result in unequal lengths\\n        if num_cols < max_cols:\\n            cols += [\"\"] * (max_cols - num_cols)\\n        elif max_cols < num_cols:\\n            max_width += [len(x) + right_margin for x in cols[-(num_cols - max_cols) :]]\\n            max_cols = num_cols\\n\\n        max_width = [\\n            max(len(x) + right_margin, old_len) for x, old_len in zip(cols, max_width)\\n        ]\\n\\n    # reformat\\n    new_lines = []\\n    for line in lines:\\n        cols = [x.rstrip() for x in line.split(\"|\")]\\n        if set(line.strip()) == set(\"-|\"):\\n            filler = \"-\"\\n            new_cols = [\\n                x.rstrip() + (filler * (M - len(x.rstrip())))\\n                for x, M in zip(cols, max_width)\\n            ]\\n            new_lines.append(\"|-\" + \"|\".join(new_cols) + \"|\")\\n        else:\\n            filler = \" \"\\n            new_cols = [\\n                x.rstrip() + (filler * (M - len(x.rstrip())))\\n                for x, M in zip(cols, max_width)\\n            ]\\n            new_lines.append(\"| \" + \"|\".join(new_cols) + \"|\")\\n    return new_lines\\n\\n\\ndef pad_tables_in_text(text: str, right_margin: int = 1) -> str:\\n    \"\"\"\\n    Provide padding for tables in the text\\n    \"\"\"\\n    lines = text.split(\"\\\\n\")\\n    table_buffer = []  # type: List[str]\\n    table_started = False\\n    new_lines = []\\n    for line in lines:\\n        # Toggle table started\\n        if config.TABLE_MARKER_FOR_PAD in line:\\n            table_started = not table_started\\n            if not table_started:\\n                table = reformat_table(table_buffer, right_margin)\\n                new_lines.extend(table)\\n                table_buffer = []\\n                new_lines.append(\"\")\\n            continue\\n        # Process lines\\n        if table_started:\\n            table_buffer.append(line)\\n        else:\\n            new_lines.append(line)\\n    return \"\\\\n\".join(new_lines)\\n'"}, "return_value": "'import html.entities\\nfrom typing import Dict, List, Optional\\n\\nfrom . import config\\n\\nunifiable_n = {\\n    html.entities.name2codepoint[k]: v\\n    for k, v in config.UNIFIABLE.items()\\n    if k != \"nbsp\"\\n}\\n\\n\\ndef hn(tag: str) -> int:\\n    if tag[0] == \"h\" and len(tag) == 2:\\n        n = tag[1]\\n        if \"0\" < n <= \"9\":\\n            return int(n)\\n    return 0\\n\\n\\ndef dumb_property_dict(style: str) -> Dict[str, str]:\\n    \"\"\"\\n    :returns: A hash of css attributes\\n    \"\"\"\\n    return {\\n        x.strip().lower(): y.strip().lower()\\n        for x, y in [z.split(\":\", 1) for z in style.split(\";\") if \":\" in z]\\n    }\\n\\n\\ndef dumb_css_parser(data: str) -> Dict[str, Dict[str, str]]:\\n    \"\"\"\\n    :type data: str\\n\\n    :returns: A hash of css selectors, each of which contains a hash of\\n    css attributes.\\n    :rtype: dict\\n    \"\"\"\\n    # remove @import sentences\\n    data += \";\"\\n    importIndex = data.find(\"@import\")\\n    while importIndex != -1:\\n        data = data[0:importIndex] + data[data.find(\";\", importIndex) + 1 :]\\n        importIndex = data.find(\"@import\")\\n\\n    # parse the css. reverted from dictionary comprehension in order to\\n    # support older pythons\\n    pairs = [x.split(\"{\") for x in data.split(\"}\") if \"{\" in x.strip()]\\n    try:\\n        elements = {a.strip(): dumb_property_dict(b) for a, b in pairs}\\n    except ValueError:\\n        elements = {}  # not that important\\n\\n    return elements\\n\\n\\ndef element_style(\\n    attrs: Dict[str, Optional[str]],\\n    style_def: Dict[str, Dict[str, str]],\\n    parent_style: Dict[str, str],\\n) -> Dict[str, str]:\\n    \"\"\"\\n    :type attrs: dict\\n    :type style_def: dict\\n    :type style_def: dict\\n\\n    :returns: A hash of the \\'final\\' style attributes of the element\\n    :rtype: dict\\n    \"\"\"\\n    style = parent_style.copy()\\n    if \"class\" in attrs:\\n        assert attrs[\"class\"] is not None\\n        for css_class in attrs[\"class\"].split():\\n            css_style = style_def.get(\".\" + css_class, {})\\n            style.update(css_style)\\n    if \"style\" in attrs:\\n        assert attrs[\"style\"] is not None\\n        immediate_style = dumb_property_dict(attrs[\"style\"])\\n        style.update(immediate_style)\\n\\n    return style\\n\\n\\ndef google_list_style(style: Dict[str, str]) -> str:\\n    \"\"\"\\n    Finds out whether this is an ordered or unordered list\\n\\n    :type style: dict\\n\\n    :rtype: str\\n    \"\"\"\\n    if \"list-style-type\" in style:\\n        list_style = style[\"list-style-type\"]\\n        if list_style in [\"disc\", \"circle\", \"square\", \"none\"]:\\n            return \"ul\"\\n\\n    return \"ol\"\\n\\n\\ndef google_has_height(style: Dict[str, str]) -> bool:\\n    \"\"\"\\n    Check if the style of the element has the \\'height\\' attribute\\n    explicitly defined\\n\\n    :type style: dict\\n\\n    :rtype: bool\\n    \"\"\"\\n    return \"height\" in style\\n\\n\\ndef google_text_emphasis(style: Dict[str, str]) -> List[str]:\\n    \"\"\"\\n    :type style: dict\\n\\n    :returns: A list of all emphasis modifiers of the element\\n    :rtype: list\\n    \"\"\"\\n    emphasis = []\\n    if \"text-decoration\" in style:\\n        emphasis.append(style[\"text-decoration\"])\\n    if \"font-style\" in style:\\n        emphasis.append(style[\"font-style\"])\\n    if \"font-weight\" in style:\\n        emphasis.append(style[\"font-weight\"])\\n\\n    return emphasis\\n\\n\\ndef google_fixed_width_font(style: Dict[str, str]) -> bool:\\n    \"\"\"\\n    Check if the css of the current element defines a fixed width font\\n\\n    :type style: dict\\n\\n    :rtype: bool\\n    \"\"\"\\n    font_family = \"\"\\n    if \"font-family\" in style:\\n        font_family = style[\"font-family\"]\\n    return \"courier new\" == font_family or \"consolas\" == font_family\\n\\n\\ndef list_numbering_start(attrs: Dict[str, Optional[str]]) -> int:\\n    \"\"\"\\n    Extract numbering from list element attributes\\n\\n    :type attrs: dict\\n\\n    :rtype: int or None\\n    \"\"\"\\n    if \"start\" in attrs:\\n        assert attrs[\"start\"] is not None\\n        try:\\n            return int(attrs[\"start\"]) - 1\\n        except ValueError:\\n            pass\\n\\n    return 0\\n\\n\\ndef skipwrap(\\n    para: str, wrap_links: bool, wrap_list_items: bool, wrap_tables: bool\\n) -> bool:\\n    # If it appears to contain a link\\n    # don\\'t wrap\\n    if not wrap_links and config.RE_LINK.search(para):\\n        return True\\n    # If the text begins with four spaces or one tab, it\\'s a code block;\\n    # don\\'t wrap\\n    if para[0:4] == \"    \" or para[0] == \"\\\\t\":\\n        return True\\n\\n    # If the text begins with only two \"--\", possibly preceded by\\n    # whitespace, that\\'s an emdash; so wrap.\\n    stripped = para.lstrip()\\n    if stripped[0:2] == \"--\" and len(stripped) > 2 and stripped[2] != \"-\":\\n        return False\\n\\n    # I\\'m not sure what this is for; I thought it was to detect lists,\\n    # but there\\'s a <br>-inside-<span> case in one of the tests that\\n    # also depends upon it.\\n    if stripped[0:1] in (\"-\", \"*\") and not stripped[0:2] == \"**\":\\n        return not wrap_list_items\\n\\n    # If text contains a pipe character it is likely a table\\n    if not wrap_tables and config.RE_TABLE.search(para):\\n        return True\\n\\n    # If the text begins with a single -, *, or +, followed by a space,\\n    # or an integer, followed by a ., followed by a space (in either\\n    # case optionally proceeded by whitespace), it\\'s a list; don\\'t wrap.\\n    return bool(\\n        config.RE_ORDERED_LIST_MATCHER.match(stripped)\\n        or config.RE_UNORDERED_LIST_MATCHER.match(stripped)\\n    )\\n\\n\\ndef escape_md(text: str) -> str:\\n    \"\"\"\\n    Escapes markdown-sensitive characters within other markdown\\n    constructs.\\n    \"\"\"\\n    return config.RE_MD_CHARS_MATCHER.sub(r\"\\\\\\\\\\\\1\", text)\\n\\n\\ndef escape_md_section(text: str, snob: bool = False) -> str:\\n    \"\"\"\\n    Escapes markdown-sensitive characters across whole document sections.\\n    \"\"\"\\n    text = config.RE_MD_BACKSLASH_MATCHER.sub(r\"\\\\\\\\\\\\1\", text)\\n\\n    if snob:\\n        text = config.RE_MD_CHARS_MATCHER_ALL.sub(r\"\\\\\\\\\\\\1\", text)\\n\\n    text = config.RE_MD_DOT_MATCHER.sub(r\"\\\\1\\\\\\\\\\\\2\", text)\\n    text = config.RE_MD_PLUS_MATCHER.sub(r\"\\\\1\\\\\\\\\\\\2\", text)\\n    text = config.RE_MD_DASH_MATCHER.sub(r\"\\\\1\\\\\\\\\\\\2\", text)\\n\\n    return text\\n\\n\\ndef reformat_table(lines: List[str], right_margin: int) -> List[str]:\\n    \"\"\"\\n    Given the lines of a table\\n    padds the cells and returns the new lines\\n    \"\"\"\\n    # find the maximum width of the columns\\n    max_width = [len(x.rstrip()) + right_margin for x in lines[0].split(\"|\")]\\n    max_cols = len(max_width)\\n    for line in lines:\\n        cols = [x.rstrip() for x in line.split(\"|\")]\\n        num_cols = len(cols)\\n\\n        # don\\'t drop any data if colspan attributes result in unequal lengths\\n        if num_cols < max_cols:\\n            cols += [\"\"] * (max_cols - num_cols)\\n        elif max_cols < num_cols:\\n            max_width += [len(x) + right_margin for x in cols[-(num_cols - max_cols) :]]\\n            max_cols = num_cols\\n\\n        max_width = [\\n            max(len(x) + right_margin, old_len) for x, old_len in zip(cols, max_width)\\n        ]\\n\\n    # reformat\\n    new_lines = []\\n    for line in lines:\\n        cols = [x.rstrip() for x in line.split(\"|\")]\\n        if set(line.strip()) == set(\"-|\"):\\n            filler = \"-\"\\n            new_cols = [\\n                x.rstrip() + (filler * (M - len(x.rstrip())))\\n                for x, M in zip(cols, max_width)\\n            ]\\n            new_lines.append(\"|-\" + \"|\".join(new_cols) + \"|\")\\n        else:\\n            filler = \" \"\\n            new_cols = [\\n                x.rstrip() + (filler * (M - len(x.rstrip())))\\n                for x, M in zip(cols, max_width)\\n            ]\\n            new_lines.append(\"| \" + \"|\".join(new_cols) + \"|\")\\n    return new_lines\\n\\n\\ndef pad_tables_in_text(text: str, right_margin: int = 1) -> str:\\n    \"\"\"\\n    Provide padding for tables in the text\\n    \"\"\"\\n    lines = text.split(\"\\\\n\")\\n    table_buffer = []  # type: List[str]\\n    table_started = False\\n    new_lines = []\\n    for line in lines:\\n        # Toggle table started\\n        if config.TABLE_MARKER_FOR_PAD in line:\\n            table_started = not table_started\\n            if not table_started:\\n                table = reformat_table(table_buffer, right_margin)\\n                new_lines.extend(table)\\n                table_buffer = []\\n                new_lines.append(\"\")\\n            continue\\n        # Process lines\\n        if table_started:\\n            table_buffer.append(line)\\n        else:\\n            new_lines.append(line)\\n    return \"\\\\n\".join(new_lines)\\n'"}]}}